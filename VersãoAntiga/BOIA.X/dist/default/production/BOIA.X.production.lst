

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Nov 04 00:58:01 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK0
   184  17A5                     __pidataBANK0:	
   185                           
   186                           ;initializer for _flag_an
   187  17A5  34FF               	retlw	255
   188  17A6  34FF               	retlw	255
   189                           
   190                           	psect	idataBANK1
   191  17CC                     __pidataBANK1:	
   192                           
   193                           ;initializer for progressBar@F1341
   194  17CC  3420               	retlw	32
   195  17CD  3420               	retlw	32
   196  17CE  3420               	retlw	32
   197  17CF  3420               	retlw	32
   198  17D0  3420               	retlw	32
   199  17D1  3420               	retlw	32
   200  17D2  3420               	retlw	32
   201  17D3  3420               	retlw	32
   202  17D4  3420               	retlw	32
   203  17D5  3420               	retlw	32
   204  17D6  3420               	retlw	32
   205  17D7  3420               	retlw	32
   206  17D8  3420               	retlw	32
   207  17D9  3420               	retlw	32
   208  17DA  3420               	retlw	32
   209  17DB  3420               	retlw	32
   210                           
   211                           	psect	strings
   212  0800                     __pstrings:	
   213  0800                     stringtab:	
   214  0800                     __stringtab:	
   215                           
   216                           ;	String table - string pointers are 1 byte each
   217  0800  1BFF               	btfsc	btemp+1,7
   218  0801  280A               	ljmp	stringcode
   219  0802  1383               	bcf	3,7
   220  0803  187F               	btfsc	btemp+1,0
   221  0804  1783               	bsf	3,7
   222  0805  0800               	movf	0,w
   223  0806  0A84               	incf	4,f
   224  0807  1903               	skipnz
   225  0808  0AFF               	incf	btemp+1,f
   226  0809  0008               	return
   227  080A                     stringcode:	
   228  080A                     stringdir:	
   229  080A  3008               	movlw	high stringdir
   230  080B  008A               	movwf	10
   231  080C  0804               	movf	4,w
   232  080D  0A84               	incf	4,f
   233  080E  0782               	addwf	2,f
   234  080F                     __stringbase:	
   235  080F  3400               	retlw	0
   236  0810                     __end_of__stringtab:	
   237  0810                     _dpowers:	
   238  0810  3401               	retlw	1
   239  0811  3400               	retlw	0
   240  0812  3400               	retlw	0
   241  0813  3400               	retlw	0
   242  0814  340A               	retlw	10
   243  0815  3400               	retlw	0
   244  0816  3400               	retlw	0
   245  0817  3400               	retlw	0
   246  0818  3464               	retlw	100
   247  0819  3400               	retlw	0
   248  081A  3400               	retlw	0
   249  081B  3400               	retlw	0
   250  081C  34E8               	retlw	232
   251  081D  3403               	retlw	3
   252  081E  3400               	retlw	0
   253  081F  3400               	retlw	0
   254  0820  3410               	retlw	16
   255  0821  3427               	retlw	39
   256  0822  3400               	retlw	0
   257  0823  3400               	retlw	0
   258  0824  34A0               	retlw	160
   259  0825  3486               	retlw	134
   260  0826  3401               	retlw	1
   261  0827  3400               	retlw	0
   262  0828  3440               	retlw	64
   263  0829  3442               	retlw	66
   264  082A  340F               	retlw	15
   265  082B  3400               	retlw	0
   266  082C  3480               	retlw	128
   267  082D  3496               	retlw	150
   268  082E  3498               	retlw	152
   269  082F  3400               	retlw	0
   270  0830  3400               	retlw	0
   271  0831  34E1               	retlw	225
   272  0832  34F5               	retlw	245
   273  0833  3405               	retlw	5
   274  0834  3400               	retlw	0
   275  0835  34CA               	retlw	202
   276  0836  349A               	retlw	154
   277  0837  343B               	retlw	59
   278  0838                     __end_of_dpowers:	
   279  0838                     _LCD_INIT_STRING:	
   280  0838  341C               	retlw	28
   281  0839  340C               	retlw	12
   282  083A  3401               	retlw	1
   283  083B  3406               	retlw	6
   284  083C                     __end_of_LCD_INIT_STRING:	
   285  001F                     _ADCON0bits	set	31
   286  001E                     _ADRESH	set	30
   287  000B                     _INTCONbits	set	11
   288  000C                     _PIR1bits	set	12
   289  0005                     _PORTAbits	set	5
   290  0006                     _PORTBbits	set	6
   291  0007                     _PORTCbits	set	7
   292  0008                     _PORTDbits	set	8
   293  001A                     _RCREG	set	26
   294  0018                     _RCSTAbits	set	24
   295  0019                     _TXREG	set	25
   296  00C1                     _OERR	set	193
   297  009F                     _ADCON1bits	set	159
   298  009E                     _ADRESL	set	158
   299  008C                     _PIE1bits	set	140
   300  0099                     _SPBRG	set	153
   301  0085                     _TRISA	set	133
   302  0086                     _TRISBbits	set	134
   303  0087                     _TRISCbits	set	135
   304  0088                     _TRISDbits	set	136
   305  0098                     _TXSTAbits	set	152
   306  083C                     __stringdata:	
   307  083C                     STR_1:	
   308  083C  340A               	retlw	10
   309  083D  340D               	retlw	13
   310  083E  3420               	retlw	32	;' '
   311  083F  342D               	retlw	45	;'-'
   312  0840  342D               	retlw	45	;'-'
   313  0841  342D               	retlw	45	;'-'
   314  0842  342D               	retlw	45	;'-'
   315  0843  342D               	retlw	45	;'-'
   316  0844  342D               	retlw	45	;'-'
   317  0845  342D               	retlw	45	;'-'
   318  0846  3420               	retlw	32	;' '
   319  0847  3445               	retlw	69	;'E'
   320  0848  3453               	retlw	83	;'S'
   321  0849  3454               	retlw	84	;'T'
   322  084A  344F               	retlw	79	;'O'
   323  084B  3455               	retlw	85	;'U'
   324  084C  3452               	retlw	82	;'R'
   325  084D  344F               	retlw	79	;'O'
   326  084E  3420               	retlw	32	;' '
   327  084F  3444               	retlw	68	;'D'
   328  0850  3445               	retlw	69	;'E'
   329  0851  3420               	retlw	32	;' '
   330  0852  3450               	retlw	80	;'P'
   331  0853  3449               	retlw	73	;'I'
   332  0854  344C               	retlw	76	;'L'
   333  0855  3448               	retlw	72	;'H'
   334  0856  3441               	retlw	65	;'A'
   335  0857  3420               	retlw	32	;' '
   336  0858  342D               	retlw	45	;'-'
   337  0859  342D               	retlw	45	;'-'
   338  085A  342D               	retlw	45	;'-'
   339  085B  342D               	retlw	45	;'-'
   340  085C  342D               	retlw	45	;'-'
   341  085D  342D               	retlw	45	;'-'
   342  085E  342D               	retlw	45	;'-'
   343  085F  3420               	retlw	32	;' '
   344  0860  340A               	retlw	10
   345  0861  340D               	retlw	13
   346  0862  3420               	retlw	32	;' '
   347  0863  3400               	retlw	0
   348  0864                     STR_4:	
   349  0864  340C               	retlw	12
   350  0865  344C               	retlw	76	;'L'
   351  0866  346F               	retlw	111	;'o'
   352  0867  3461               	retlw	97	;'a'
   353  0868  3464               	retlw	100	;'d'
   354  0869  3469               	retlw	105	;'i'
   355  086A  346E               	retlw	110	;'n'
   356  086B  3467               	retlw	103	;'g'
   357  086C  3420               	retlw	32	;' '
   358  086D  3450               	retlw	80	;'P'
   359  086E  3449               	retlw	73	;'I'
   360  086F  3443               	retlw	67	;'C'
   361  0870  342E               	retlw	46	;'.'
   362  0871  342E               	retlw	46	;'.'
   363  0872  342E               	retlw	46	;'.'
   364  0873  3400               	retlw	0
   365  0874                     STR_6:	
   366  0874  3425               	retlw	37	;'%'
   367  0875  346C               	retlw	108	;'l'
   368  0876  3475               	retlw	117	;'u'
   369  0877  342E               	retlw	46	;'.'
   370  0878  3425               	retlw	37	;'%'
   371  0879  3436               	retlw	54	;'6'
   372  087A  342E               	retlw	46	;'.'
   373  087B  3436               	retlw	54	;'6'
   374  087C  346C               	retlw	108	;'l'
   375  087D  3475               	retlw	117	;'u'
   376  087E  3400               	retlw	0
   377  087F                     STR_2:	
   378  087F  344E               	retlw	78	;'N'
   379  0880  3469               	retlw	105	;'i'
   380  0881  3476               	retlw	118	;'v'
   381  0882  3465               	retlw	101	;'e'
   382  0883  346C               	retlw	108	;'l'
   383  0884  343A               	retlw	58	;':'
   384  0885  3400               	retlw	0
   385  0886                     STR_3:	
   386  0886  3425               	retlw	37	;'%'
   387  0887  3400               	retlw	0
   388  0888                     __end_of__stringdata:	
   389                           
   390                           ; #config settings
   391  0000                     
   392                           	psect	cinit
   393  0015                     start_initialization:	
   394  0015                     __initialization:	
   395                           
   396                           ; Clear objects allocated to BANK0
   397  0015  01E9               	clrf	__pbssBANK0& (0+127)
   398  0016  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   399  0017  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   400  0018  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   401                           
   402                           ; Clear objects allocated to BANK1
   403  0019  1383               	bcf	3,7	;select IRP bank0
   404  001A  30A0               	movlw	low __pbssBANK1
   405  001B  0084               	movwf	4
   406  001C  30B8               	movlw	low (__pbssBANK1+24)
   407  001D  160A  118A  27B7  120A  118A  	fcall	clear_ram0
   408                           
   409                           ; Initialize objects allocated to BANK1
   410  0022  30DC               	movlw	low (__pdataBANK1+16)
   411  0023  00FD               	movwf	btemp+-1
   412  0024  3017               	movlw	high __pidataBANK1
   413  0025  00FE               	movwf	btemp
   414  0026  30CC               	movlw	low __pidataBANK1
   415  0027  00FF               	movwf	btemp+1
   416  0028  30CC               	movlw	low __pdataBANK1
   417  0029  0084               	movwf	4
   418  002A  160A  118A  27E0  120A  118A  	fcall	init_ram0
   419                           
   420                           ; Initialize objects allocated to BANK0
   421  002F  160A  118A  27A5  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   422  0034  00ED               	movwf	__pdataBANK0& (0+127)
   423  0035  160A  118A  27A6   	fcall	__pidataBANK0+1	;fetch initializer
   424  0038  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   425  0039                     end_of_initialization:	
   426                           ;End of C runtime variable initialization code
   427                           
   428  0039                     __end_of__initialization:	
   429  0039  0183               	clrf	3
   430  003A  120A  158A  29A2   	ljmp	_main	;jump to C main() function
   431                           
   432                           	psect	bssBANK0
   433  0069                     __pbssBANK0:	
   434  0069                     _ADCResult:	
   435  0069                     	ds	2
   436  006B                     _recipiente:	
   437  006B                     	ds	2
   438                           
   439                           	psect	dataBANK0
   440  006D                     __pdataBANK0:	
   441  006D                     _flag_an:	
   442  006D                     	ds	2
   443                           
   444                           	psect	bssBANK1
   445  00A0                     __pbssBANK1:	
   446  00A0                     _Display:	
   447  00A0                     	ds	7
   448  00A7                     ftoa@buf:	
   449  00A7                     	ds	17
   450                           
   451                           	psect	dataBANK1
   452  00CC                     __pdataBANK1:	
   453  00CC                     progressBar@F1341:	
   454  00CC                     	ds	16
   455                           
   456                           	psect	clrtext
   457  17B7                     clear_ram0:	
   458                           ;	Called with FSR containing the base address, and
   459                           ;	W with the last address+1
   460                           
   461  17B7  0064               	clrwdt	;clear the watchdog before getting into this loop
   462  17B8                     clrloop0:	
   463  17B8  0180               	clrf	0	;clear RAM location pointed to by FSR
   464  17B9  0A84               	incf	4,f	;increment pointer
   465  17BA  0604               	xorwf	4,w	;XOR with final address
   466  17BB  1903               	btfsc	3,2	;have we reached the end yet?
   467  17BC  3400               	retlw	0	;all done for this memory range, return
   468  17BD  0604               	xorwf	4,w	;XOR again to restore value
   469  17BE  2FB8               	goto	clrloop0	;do the next byte
   470                           
   471                           	psect	inittext
   472  17DC                     init_fetch0:	
   473                           ;	Called with low address in FSR and high address in W
   474                           
   475  17DC  087E               	movf	126,w
   476  17DD  008A               	movwf	10
   477  17DE  087F               	movf	127,w
   478  17DF  0082               	movwf	2
   479  17E0                     init_ram0:	
   480                           ;Called with:
   481                           ;	high address of idata address in btemp 
   482                           ;	low address of idata address in btemp+1 
   483                           ;	low address of data in FSR
   484                           ;	high address + 1 of data in btemp-1
   485                           
   486  17E0  27DC  160A  118A   	fcall	init_fetch0
   487  17E3  0080               	movwf	0
   488  17E4  0A84               	incf	4,f
   489  17E5  0804               	movf	4,w
   490  17E6  067D               	xorwf	125,w
   491  17E7  1903               	btfsc	3,2
   492  17E8  3400               	retlw	0
   493  17E9  0AFF               	incf	127,f
   494  17EA  1903               	btfsc	3,2
   495  17EB  0AFE               	incf	126,f
   496  17EC  2FE0               	goto	init_ram0
   497                           
   498                           	psect	cstackBANK1
   499  00B8                     __pcstackBANK1:	
   500  00B8                     ??_lcd_envia_nibble:	
   501  00B8                     ??_USARTWriteChar:	
   502                           ; 0 bytes @ 0x0
   503                           
   504  00B8                     ??_ADCInit:	
   505                           ; 0 bytes @ 0x0
   506                           
   507  00B8                     ?_ADCRead:	
   508                           ; 0 bytes @ 0x0
   509                           
   510  00B8                     USARTWriteChar@USARTData:	
   511                           ; 0 bytes @ 0x0
   512                           
   513  00B8                     ADCRead@ch:	
   514                           ; 1 bytes @ 0x0
   515                           
   516                           
   517                           ; 2 bytes @ 0x0
   518  00B8                     	ds	1
   519  00B9                     ?_USARTWriteString:	
   520  00B9                     lcd_envia_nibble@n:	
   521                           ; 0 bytes @ 0x1
   522                           
   523  00B9                     USARTWriteString@str:	
   524                           ; 1 bytes @ 0x1
   525                           
   526                           
   527                           ; 2 bytes @ 0x1
   528  00B9                     	ds	1
   529  00BA                     ?_lcd_envia_byte:	
   530  00BA                     ??_ADCRead:	
   531                           ; 0 bytes @ 0x2
   532                           
   533  00BA                     lcd_envia_byte@n:	
   534                           ; 0 bytes @ 0x2
   535                           
   536                           
   537                           ; 1 bytes @ 0x2
   538  00BA                     	ds	1
   539  00BB                     ??_lcd_envia_byte:	
   540  00BB                     ??_USARTWriteString:	
   541                           ; 0 bytes @ 0x3
   542                           
   543                           
   544                           ; 0 bytes @ 0x3
   545  00BB                     	ds	1
   546  00BC                     lcd_envia_byte@address:	
   547                           
   548                           ; 1 bytes @ 0x4
   549  00BC                     	ds	1
   550  00BD                     ?_lcd_gotoxy:	
   551  00BD                     ??_init_lcd_4bit:	
   552                           ; 0 bytes @ 0x5
   553                           
   554  00BD                     ??_LCDClear:	
   555                           ; 0 bytes @ 0x5
   556                           
   557  00BD                     lcd_gotoxy@y:	
   558                           ; 0 bytes @ 0x5
   559                           
   560                           
   561                           ; 1 bytes @ 0x5
   562  00BD                     	ds	1
   563  00BE                     ??_lcd_gotoxy:	
   564                           
   565                           ; 0 bytes @ 0x6
   566  00BE                     	ds	1
   567  00BF                     init_lcd_4bit@i:	
   568  00BF                     lcd_gotoxy@x:	
   569                           ; 1 bytes @ 0x7
   570                           
   571                           
   572                           ; 1 bytes @ 0x7
   573  00BF                     	ds	1
   574  00C0                     lcd_gotoxy@address:	
   575                           
   576                           ; 1 bytes @ 0x8
   577  00C0                     	ds	1
   578  00C1                     ??_lcd_putc:	
   579                           
   580                           ; 0 bytes @ 0x9
   581  00C1                     	ds	2
   582  00C3                     lcd_putc@c:	
   583                           
   584                           ; 1 bytes @ 0xB
   585  00C3                     	ds	1
   586  00C4                     ?_lcd_escreve_string:	
   587  00C4                     lcd_escreve_string@y:	
   588                           ; 0 bytes @ 0xC
   589                           
   590                           
   591                           ; 2 bytes @ 0xC
   592  00C4                     	ds	2
   593  00C6                     ??_lcd_escreve_string:	
   594  00C6                     ??_inicialize:	
   595                           ; 0 bytes @ 0xE
   596                           
   597                           
   598                           ; 0 bytes @ 0xE
   599  00C6                     	ds	3
   600  00C9                     ??_main:	
   601                           
   602                           ; 0 bytes @ 0x11
   603  00C9                     	ds	3
   604                           
   605                           	psect	cstackCOMMON
   606  0070                     __pcstackCOMMON:	
   607  0070                     ?_init_lcd_4bit:	
   608  0070                     ?_LCDClear:	
   609                           ; 0 bytes @ 0x0
   610                           
   611  0070                     ?_lcd_envia_nibble:	
   612                           ; 0 bytes @ 0x0
   613                           
   614  0070                     ?_isdigit:	
   615                           ; 0 bytes @ 0x0
   616                           
   617  0070                     ??_isdigit:	
   618                           ; 1 bit 
   619                           
   620  0070                     ?_USARTWriteChar:	
   621                           ; 0 bytes @ 0x0
   622                           
   623  0070                     ?_ADCInit:	
   624                           ; 0 bytes @ 0x0
   625                           
   626  0070                     ?_active:	
   627                           ; 0 bytes @ 0x0
   628                           
   629  0070                     ?_sendString:	
   630                           ; 0 bytes @ 0x0
   631                           
   632  0070                     ?_ISR:	
   633                           ; 0 bytes @ 0x0
   634                           
   635  0070                     ?_inicialize:	
   636                           ; 0 bytes @ 0x0
   637                           
   638  0070                     ?_main:	
   639                           ; 0 bytes @ 0x0
   640                           
   641  0070                     ?_lcd_putc:	
   642                           ; 0 bytes @ 0x0
   643                           
   644  0070                     ?___ftge:	
   645                           ; 0 bytes @ 0x0
   646                           
   647  0070                     ?i1_USARTWriteChar:	
   648                           ; 1 bit 
   649                           
   650  0070                     ??i1_USARTWriteChar:	
   651                           ; 0 bytes @ 0x0
   652                           
   653  0070                     ?i1_lcd_envia_nibble:	
   654                           ; 0 bytes @ 0x0
   655                           
   656  0070                     ??i1_lcd_envia_nibble:	
   657                           ; 0 bytes @ 0x0
   658                           
   659  0070                     ?i1_lcd_putc:	
   660                           ; 0 bytes @ 0x0
   661                           
   662  0070                     ?_USARTReceiveChar:	
   663                           ; 0 bytes @ 0x0
   664                           
   665  0070                     ?___wmul:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?___awdiv:	
   669                           ; 2 bytes @ 0x0
   670                           
   671  0070                     ?___ftpack:	
   672                           ; 2 bytes @ 0x0
   673                           
   674  0070                     ?___ftneg:	
   675                           ; 3 bytes @ 0x0
   676                           
   677  0070                     ?___lldiv:	
   678                           ; 3 bytes @ 0x0
   679                           
   680  0070                     _isdigit$880:	
   681                           ; 4 bytes @ 0x0
   682                           
   683  0070                     i1USARTWriteChar@USARTData:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ___wmul@multiplier:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ___awdiv@divisor:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  0070                     ___ftpack@arg:	
   693                           ; 2 bytes @ 0x0
   694                           
   695  0070                     ___ftge@ff1:	
   696                           ; 3 bytes @ 0x0
   697                           
   698  0070                     ___ftneg@f1:	
   699                           ; 3 bytes @ 0x0
   700                           
   701  0070                     ___lldiv@divisor:	
   702                           ; 3 bytes @ 0x0
   703                           
   704                           
   705                           ; 4 bytes @ 0x0
   706  0070                     	ds	1
   707  0071                     ??_active:	
   708  0071                     ?i1_USARTWriteString:	
   709                           ; 0 bytes @ 0x1
   710                           
   711  0071                     isdigit@c:	
   712                           ; 0 bytes @ 0x1
   713                           
   714  0071                     i1lcd_envia_nibble@n:	
   715                           ; 1 bytes @ 0x1
   716                           
   717  0071                     i1USARTWriteString@str:	
   718                           ; 1 bytes @ 0x1
   719                           
   720                           
   721                           ; 2 bytes @ 0x1
   722  0071                     	ds	1
   723  0072                     ?i1_lcd_envia_byte:	
   724  0072                     active@input:	
   725                           ; 0 bytes @ 0x2
   726                           
   727  0072                     i1lcd_envia_byte@n:	
   728                           ; 1 bytes @ 0x2
   729                           
   730  0072                     ___wmul@multiplicand:	
   731                           ; 1 bytes @ 0x2
   732                           
   733  0072                     ___awdiv@dividend:	
   734                           ; 2 bytes @ 0x2
   735                           
   736                           
   737                           ; 2 bytes @ 0x2
   738  0072                     	ds	1
   739  0073                     ??_USARTReceiveChar:	
   740  0073                     ??_sendString:	
   741                           ; 0 bytes @ 0x3
   742                           
   743  0073                     ??___ftneg:	
   744                           ; 0 bytes @ 0x3
   745                           
   746  0073                     ??i1_USARTWriteString:	
   747                           ; 0 bytes @ 0x3
   748                           
   749  0073                     ??i1_lcd_envia_byte:	
   750                           ; 0 bytes @ 0x3
   751                           
   752  0073                     ___ftpack@exp:	
   753                           ; 0 bytes @ 0x3
   754                           
   755  0073                     ___ftge@ff2:	
   756                           ; 1 bytes @ 0x3
   757                           
   758                           
   759                           ; 3 bytes @ 0x3
   760  0073                     	ds	1
   761  0074                     ??___wmul:	
   762  0074                     ??___awdiv:	
   763                           ; 0 bytes @ 0x4
   764                           
   765  0074                     USARTReceiveChar@USARTData:	
   766                           ; 0 bytes @ 0x4
   767                           
   768  0074                     ___ftpack@sign:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  0074                     i1lcd_envia_byte@address:	
   772                           ; 1 bytes @ 0x4
   773                           
   774  0074                     ___wmul@product:	
   775                           ; 1 bytes @ 0x4
   776                           
   777  0074                     ___lldiv@dividend:	
   778                           ; 2 bytes @ 0x4
   779                           
   780                           
   781                           ; 4 bytes @ 0x4
   782  0074                     	ds	1
   783  0075                     ??___ftpack:	
   784  0075                     ?i1_lcd_gotoxy:	
   785                           ; 0 bytes @ 0x5
   786                           
   787  0075                     ___awdiv@counter:	
   788                           ; 0 bytes @ 0x5
   789                           
   790  0075                     i1lcd_gotoxy@y:	
   791                           ; 1 bytes @ 0x5
   792                           
   793                           
   794                           ; 1 bytes @ 0x5
   795  0075                     	ds	1
   796  0076                     ??___ftge:	
   797  0076                     ??i1_lcd_gotoxy:	
   798                           ; 0 bytes @ 0x6
   799                           
   800  0076                     ___awdiv@sign:	
   801                           ; 0 bytes @ 0x6
   802                           
   803                           
   804                           ; 1 bytes @ 0x6
   805  0076                     	ds	1
   806  0077                     i1lcd_gotoxy@x:	
   807  0077                     ___awdiv@quotient:	
   808                           ; 1 bytes @ 0x7
   809                           
   810                           
   811                           ; 2 bytes @ 0x7
   812  0077                     	ds	1
   813  0078                     ??___lldiv:	
   814  0078                     ?___awtoft:	
   815                           ; 0 bytes @ 0x8
   816                           
   817  0078                     ?___ftadd:	
   818                           ; 3 bytes @ 0x8
   819                           
   820  0078                     ?___lltoft:	
   821                           ; 3 bytes @ 0x8
   822                           
   823  0078                     i1lcd_gotoxy@address:	
   824                           ; 3 bytes @ 0x8
   825                           
   826  0078                     ___awtoft@c:	
   827                           ; 1 bytes @ 0x8
   828                           
   829  0078                     ___ftadd@f1:	
   830                           ; 2 bytes @ 0x8
   831                           
   832  0078                     ___lltoft@c:	
   833                           ; 3 bytes @ 0x8
   834                           
   835                           
   836                           ; 4 bytes @ 0x8
   837  0078                     	ds	1
   838  0079                     ??i1_lcd_putc:	
   839  0079                     ?___awmod:	
   840                           ; 0 bytes @ 0x9
   841                           
   842  0079                     ___awmod@divisor:	
   843                           ; 2 bytes @ 0x9
   844                           
   845  0079                     ___lldiv@quotient:	
   846                           ; 2 bytes @ 0x9
   847                           
   848                           
   849                           ; 4 bytes @ 0x9
   850  0079                     	ds	2
   851  007B                     ??___awtoft:	
   852  007B                     i1lcd_putc@c:	
   853                           ; 0 bytes @ 0xB
   854                           
   855  007B                     ___awmod@dividend:	
   856                           ; 1 bytes @ 0xB
   857                           
   858  007B                     ___ftadd@f2:	
   859                           ; 2 bytes @ 0xB
   860                           
   861                           
   862                           ; 3 bytes @ 0xB
   863  007B                     	ds	1
   864  007C                     ??___lltoft:	
   865  007C                     ?i1_lcd_escreve_string:	
   866                           ; 0 bytes @ 0xC
   867                           
   868  007C                     i1lcd_escreve_string@y:	
   869                           ; 0 bytes @ 0xC
   870                           
   871                           
   872                           ; 2 bytes @ 0xC
   873  007C                     	ds	1
   874  007D                     ??___awmod:	
   875  007D                     ___awtoft@sign:	
   876                           ; 0 bytes @ 0xD
   877                           
   878  007D                     ___lldiv@counter:	
   879                           ; 1 bytes @ 0xD
   880                           
   881  007D                     ___lltoft@exp:	
   882                           ; 1 bytes @ 0xD
   883                           
   884                           
   885                           ; 1 bytes @ 0xD
   886  007D                     	ds	1
   887  007E                     ??___ftsub:	
   888  007E                     ??i1_lcd_escreve_string:	
   889                           ; 0 bytes @ 0xE
   890                           
   891                           
   892                           	psect	cstackBANK0
   893  0020                     __pcstackBANK0:	
   894                           ; 0 bytes @ 0xE
   895                           
   896  0020                     ?_progressBar:	
   897  0020                     ??___ftadd:	
   898                           ; 0 bytes @ 0x0
   899                           
   900  0020                     ?___ftmul:	
   901                           ; 0 bytes @ 0x0
   902                           
   903  0020                     ?___llmod:	
   904                           ; 3 bytes @ 0x0
   905                           
   906  0020                     ___awmod@counter:	
   907                           ; 4 bytes @ 0x0
   908                           
   909  0020                     progressBar@preint:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0020                     ___ftmul@f1:	
   913                           ; 2 bytes @ 0x0
   914                           
   915  0020                     ___llmod@divisor:	
   916                           ; 3 bytes @ 0x0
   917                           
   918  0020                     sendString@array:	
   919                           ; 4 bytes @ 0x0
   920                           
   921                           
   922                           ; 40 bytes @ 0x0
   923  0020                     	ds	1
   924  0021                     ___awmod@sign:	
   925                           
   926                           ; 1 bytes @ 0x1
   927  0021                     	ds	1
   928  0022                     ??_progressBar:	
   929                           
   930                           ; 0 bytes @ 0x2
   931  0022                     	ds	1
   932  0023                     ___ftmul@f2:	
   933                           
   934                           ; 3 bytes @ 0x3
   935  0023                     	ds	1
   936  0024                     ___ftadd@sign:	
   937  0024                     ___llmod@dividend:	
   938                           ; 1 bytes @ 0x4
   939                           
   940                           
   941                           ; 4 bytes @ 0x4
   942  0024                     	ds	1
   943  0025                     ___ftadd@exp2:	
   944                           
   945                           ; 1 bytes @ 0x5
   946  0025                     	ds	1
   947  0026                     ??___ftmul:	
   948  0026                     ___ftadd@exp1:	
   949                           ; 0 bytes @ 0x6
   950                           
   951  0026                     progressBar@aux:	
   952                           ; 1 bytes @ 0x6
   953                           
   954                           
   955                           ; 16 bytes @ 0x6
   956  0026                     	ds	1
   957  0027                     ?___ftsub:	
   958  0027                     ___ftsub@f2:	
   959                           ; 3 bytes @ 0x7
   960                           
   961                           
   962                           ; 3 bytes @ 0x7
   963  0027                     	ds	1
   964  0028                     ??___llmod:	
   965                           
   966                           ; 0 bytes @ 0x8
   967  0028                     	ds	1
   968  0029                     ___llmod@counter:	
   969                           
   970                           ; 1 bytes @ 0x9
   971  0029                     	ds	1
   972  002A                     ?_sprintf:	
   973  002A                     sprintf@f:	
   974                           ; 2 bytes @ 0xA
   975                           
   976  002A                     ___ftmul@exp:	
   977                           ; 1 bytes @ 0xA
   978                           
   979  002A                     ___ftsub@f1:	
   980                           ; 1 bytes @ 0xA
   981                           
   982                           
   983                           ; 3 bytes @ 0xA
   984  002A                     	ds	1
   985  002B                     ___ftmul@f3_as_product:	
   986                           
   987                           ; 3 bytes @ 0xB
   988  002B                     	ds	3
   989  002E                     ___ftmul@cntr:	
   990                           
   991                           ; 1 bytes @ 0xE
   992  002E                     	ds	1
   993  002F                     ___ftmul@sign:	
   994                           
   995                           ; 1 bytes @ 0xF
   996  002F                     	ds	1
   997  0030                     ?___ftdiv:	
   998  0030                     ?___fttol:	
   999                           ; 3 bytes @ 0x10
  1000                           
  1001  0030                     ___ftdiv@f2:	
  1002                           ; 4 bytes @ 0x10
  1003                           
  1004  0030                     ___fttol@f1:	
  1005                           ; 3 bytes @ 0x10
  1006                           
  1007                           
  1008                           ; 3 bytes @ 0x10
  1009  0030                     	ds	3
  1010  0033                     ??_sprintf:	
  1011  0033                     ___ftdiv@f1:	
  1012                           ; 0 bytes @ 0x13
  1013                           
  1014                           
  1015                           ; 3 bytes @ 0x13
  1016  0033                     	ds	1
  1017  0034                     ??___fttol:	
  1018                           
  1019                           ; 0 bytes @ 0x14
  1020  0034                     	ds	2
  1021  0036                     ??___ftdiv:	
  1022  0036                     progressBar@i:	
  1023                           ; 0 bytes @ 0x16
  1024                           
  1025                           
  1026                           ; 2 bytes @ 0x16
  1027  0036                     	ds	2
  1028  0038                     progressBar@result:	
  1029  0038                     sprintf@flag:	
  1030                           ; 1 bytes @ 0x18
  1031                           
  1032  0038                     ___fttol@sign1:	
  1033                           ; 1 bytes @ 0x18
  1034                           
  1035                           
  1036                           ; 1 bytes @ 0x18
  1037  0038                     	ds	1
  1038  0039                     sprintf@ap:	
  1039  0039                     ___fttol@lval:	
  1040                           ; 1 bytes @ 0x19
  1041                           
  1042                           
  1043                           ; 4 bytes @ 0x19
  1044  0039                     	ds	1
  1045  003A                     ___ftdiv@cntr:	
  1046  003A                     sprintf@_val:	
  1047                           ; 1 bytes @ 0x1A
  1048                           
  1049                           
  1050                           ; 4 bytes @ 0x1A
  1051  003A                     	ds	1
  1052  003B                     ___ftdiv@f3:	
  1053                           
  1054                           ; 3 bytes @ 0x1B
  1055  003B                     	ds	2
  1056  003D                     ___fttol@exp1:	
  1057                           
  1058                           ; 1 bytes @ 0x1D
  1059  003D                     	ds	1
  1060  003E                     sprintf@sp:	
  1061  003E                     ___ftdiv@exp:	
  1062                           ; 1 bytes @ 0x1E
  1063                           
  1064                           
  1065                           ; 1 bytes @ 0x1E
  1066  003E                     	ds	1
  1067  003F                     ___ftdiv@sign:	
  1068  003F                     sprintf@width:	
  1069                           ; 1 bytes @ 0x1F
  1070                           
  1071                           
  1072                           ; 2 bytes @ 0x1F
  1073  003F                     	ds	2
  1074  0041                     sprintf@prec:	
  1075                           
  1076                           ; 2 bytes @ 0x21
  1077  0041                     	ds	2
  1078  0043                     sprintf@c:	
  1079                           
  1080                           ; 1 bytes @ 0x23
  1081  0043                     	ds	1
  1082  0044                     ?_ftoa:	
  1083  0044                     ftoa@f:	
  1084                           ; 1 bytes @ 0x24
  1085                           
  1086                           
  1087                           ; 3 bytes @ 0x24
  1088  0044                     	ds	3
  1089  0047                     ftoa@status:	
  1090                           
  1091                           ; 1 bytes @ 0x27
  1092  0047                     	ds	1
  1093  0048                     ??_ftoa:	
  1094  0048                     sendString@envio:	
  1095                           ; 0 bytes @ 0x28
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x28
  1099  0048                     	ds	1
  1100  0049                     sendString@send:	
  1101  0049                     ftoa@rem:	
  1102                           ; 1 bytes @ 0x29
  1103                           
  1104                           
  1105                           ; 4 bytes @ 0x29
  1106  0049                     	ds	1
  1107  004A                     sendString@x:	
  1108                           
  1109                           ; 2 bytes @ 0x2A
  1110  004A                     	ds	3
  1111  004D                     ftoa@l:	
  1112                           
  1113                           ; 4 bytes @ 0x2D
  1114  004D                     	ds	4
  1115  0051                     ftoa@cp:	
  1116                           
  1117                           ; 1 bytes @ 0x31
  1118  0051                     	ds	1
  1119  0052                     ??_ISR:	
  1120                           
  1121                           ; 0 bytes @ 0x32
  1122  0052                     	ds	6
  1123  0058                     ISR@buf:	
  1124                           
  1125                           ; 1 bytes @ 0x38
  1126  0058                     	ds	1
  1127  0059                     ISR@status:	
  1128                           
  1129                           ; 2 bytes @ 0x39
  1130  0059                     	ds	2
  1131  005B                     ISR@status2:	
  1132                           
  1133                           ; 2 bytes @ 0x3B
  1134  005B                     	ds	2
  1135  005D                     ISR@pre:	
  1136                           
  1137                           ; 3 bytes @ 0x3D
  1138  005D                     	ds	3
  1139  0060                     ISR@preint:	
  1140                           
  1141                           ; 2 bytes @ 0x40
  1142  0060                     	ds	2
  1143  0062                     ISR@input:	
  1144                           
  1145                           ; 3 bytes @ 0x42
  1146  0062                     	ds	3
  1147  0065                     ISR@input2:	
  1148                           
  1149                           ; 3 bytes @ 0x45
  1150  0065                     	ds	3
  1151  0068                     ISR@per:	
  1152                           
  1153                           ; 1 bytes @ 0x48
  1154  0068                     	ds	1
  1155                           
  1156                           	psect	maintext
  1157  09A2                     __pmaintext:	
  1158 ;;
  1159 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1160 ;;
  1161 ;; *************** function _main *****************
  1162 ;; Defined at:
  1163 ;;		line 332 in file "main.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;		None
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;		None
  1168 ;; Return value:  Size  Location     Type
  1169 ;;		None               void
  1170 ;; Registers used:
  1171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 17F/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1177 ;;      Params:         0       0       0       0       0
  1178 ;;      Locals:         0       0       0       0       0
  1179 ;;      Temps:          0       0       3       0       0
  1180 ;;      Totals:         0       0       3       0       0
  1181 ;;Total ram usage:        3 bytes
  1182 ;; Hardware stack levels required when called:   13
  1183 ;; This function calls:
  1184 ;;		_ADCRead
  1185 ;;		_inicialize
  1186 ;; This function is called by:
  1187 ;;		Startup code after reset
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           
  1192                           ;psect for function _main
  1193  09A2                     _main:	
  1194                           
  1195                           ;main.c: 334: inicialize();
  1196                           
  1197                           ;incstack = 0
  1198 ;; hardware stack exceeded
  1199                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1200  09A2  120A  158A  26F6  120A  158A  	fcall	_inicialize
  1201  09A7                     l2848:	
  1202                           ;main.c: 336: while (1) {
  1203                           
  1204                           
  1205                           ;main.c: 337: ADCRead(0);
  1206  09A7  3000               	movlw	0
  1207  09A8  1683               	bsf	3,5	;RP0=1, select bank1
  1208  09A9  1303               	bcf	3,6	;RP1=0, select bank1
  1209  09AA  00B8               	movwf	ADCRead@ch^(0+128)
  1210  09AB  3000               	movlw	0
  1211  09AC  00B9               	movwf	(ADCRead@ch^(0+128)+1)
  1212  09AD  120A  158A  2221  120A  158A  	fcall	_ADCRead
  1213                           
  1214                           ;main.c: 338: _delay((unsigned long)((300)*(20000000/4000.0)));
  1215  09B2  3008               	movlw	8
  1216  09B3  1683               	bsf	3,5	;RP0=1, select bank1
  1217  09B4  1303               	bcf	3,6	;RP1=0, select bank1
  1218  09B5  00CB               	movwf	(??_main^(0+128)+2)
  1219  09B6  309D               	movlw	157
  1220  09B7  00CA               	movwf	(??_main^(0+128)+1)
  1221  09B8  300B               	movlw	11
  1222  09B9  00C9               	movwf	??_main^(0+128)
  1223  09BA                     u3887:	
  1224  09BA  0BC9               	decfsz	??_main^(0+128),f
  1225  09BB  29BA               	goto	u3887
  1226  09BC  0BCA               	decfsz	(??_main^(0+128)+1),f
  1227  09BD  29BA               	goto	u3887
  1228  09BE  0BCB               	decfsz	(??_main^(0+128)+2),f
  1229  09BF  29BA               	goto	u3887
  1230  09C0  29C1               	nop2
  1231                           
  1232                           ;main.c: 339: if (PORTCbits.RC3 == 1) {
  1233  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  1234  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  1235  09C3  1987               	btfsc	7,3	;volatile
  1236  09C4  29C8               	goto	l140
  1237  09C5  29A7               	goto	l2848
  1238  09C6                     l141:	
  1239                           ;main.c: 340: while (PORTCbits.RC3 == 1) {
  1240                           
  1241                           
  1242                           ;main.c: 341: PORTDbits.RD2 = 1;
  1243  09C6  1508               	bsf	8,2	;volatile
  1244                           
  1245                           ;main.c: 342: PORTDbits.RD3 = 0;
  1246  09C7  1188               	bcf	8,3	;volatile
  1247  09C8                     l140:	
  1248  09C8  1D87               	btfss	7,3	;volatile
  1249  09C9  29A7               	goto	l2848
  1250  09CA  29C6               	goto	l141
  1251  09CB                     __end_of_main:	
  1252                           
  1253                           	psect	text1
  1254  0EF6                     __ptext1:	
  1255 ;; *************** function _inicialize *****************
  1256 ;; Defined at:
  1257 ;;		line 306 in file "main.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;		None               void
  1264 ;; Registers used:
  1265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1271 ;;      Params:         0       0       0       0       0
  1272 ;;      Locals:         0       0       0       0       0
  1273 ;;      Temps:          0       0       3       0       0
  1274 ;;      Totals:         0       0       3       0       0
  1275 ;;Total ram usage:        3 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:   12
  1278 ;; This function calls:
  1279 ;;		_ADCInit
  1280 ;;		_LCDClear
  1281 ;;		_USARTWriteString
  1282 ;;		_init_lcd_4bit
  1283 ;;		_lcd_escreve_string
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           
  1290                           ;psect for function _inicialize
  1291  0EF6                     _inicialize:	
  1292                           
  1293                           ;main.c: 307: TRISA = 0b11111111;
  1294                           
  1295                           ;incstack = 0
  1296 ;; hardware stack exceeded
  1297                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1298  0EF6  30FF               	movlw	255
  1299  0EF7  1683               	bsf	3,5	;RP0=1, select bank1
  1300  0EF8  1303               	bcf	3,6	;RP1=0, select bank1
  1301  0EF9  0085               	movwf	5	;volatile
  1302                           
  1303                           ;main.c: 308: PORTAbits.RA0 = 0;
  1304  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0EFC  1005               	bcf	5,0	;volatile
  1307                           
  1308                           ;main.c: 309: TRISDbits.TRISD2 = 0;
  1309  0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  1310  0EFE  1303               	bcf	3,6	;RP1=0, select bank1
  1311  0EFF  1108               	bcf	8,2	;volatile
  1312                           
  1313                           ;main.c: 310: PORTDbits.RD2 = 1;
  1314  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0F02  1508               	bsf	8,2	;volatile
  1317                           
  1318                           ;main.c: 311: TRISDbits.TRISD3 = 0;
  1319  0F03  1683               	bsf	3,5	;RP0=1, select bank1
  1320  0F04  1303               	bcf	3,6	;RP1=0, select bank1
  1321  0F05  1188               	bcf	8,3	;volatile
  1322                           
  1323                           ;main.c: 312: PORTDbits.RD3 = 0;
  1324  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  1325  0F07  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0F08  1188               	bcf	8,3	;volatile
  1327                           
  1328                           ;main.c: 314: TRISCbits.TRISC0 = 1;
  1329  0F09  1683               	bsf	3,5	;RP0=1, select bank1
  1330  0F0A  1303               	bcf	3,6	;RP1=0, select bank1
  1331  0F0B  1407               	bsf	7,0	;volatile
  1332                           
  1333                           ;main.c: 315: TRISCbits.TRISC1 = 1;
  1334  0F0C  1487               	bsf	7,1	;volatile
  1335                           
  1336                           ;main.c: 316: TRISCbits.TRISC2 = 1;
  1337  0F0D  1507               	bsf	7,2	;volatile
  1338                           
  1339                           ;main.c: 317: TRISCbits.TRISC3 = 1;
  1340  0F0E  1587               	bsf	7,3	;volatile
  1341                           
  1342                           ;main.c: 318: PORTCbits.RC3 = 0;
  1343  0F0F  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0F10  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0F11  1187               	bcf	7,3	;volatile
  1346                           
  1347                           ;main.c: 319: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1348  0F12  3033               	movlw	51
  1349  0F13  1683               	bsf	3,5	;RP0=1, select bank1
  1350  0F14  1303               	bcf	3,6	;RP1=0, select bank1
  1351  0F15  00C8               	movwf	(??_inicialize^(0+128)+2)
  1352  0F16  30BC               	movlw	188
  1353  0F17  00C7               	movwf	(??_inicialize^(0+128)+1)
  1354  0F18  3010               	movlw	16
  1355  0F19  00C6               	movwf	??_inicialize^(0+128)
  1356  0F1A                     u3897:	
  1357  0F1A  0BC6               	decfsz	??_inicialize^(0+128),f
  1358  0F1B  2F1A               	goto	u3897
  1359  0F1C  0BC7               	decfsz	(??_inicialize^(0+128)+1),f
  1360  0F1D  2F1A               	goto	u3897
  1361  0F1E  0BC8               	decfsz	(??_inicialize^(0+128)+2),f
  1362  0F1F  2F1A               	goto	u3897
  1363                           
  1364                           ;main.c: 320: init_lcd_4bit();
  1365  0F20  120A  158A  2690  120A  158A  	fcall	_init_lcd_4bit
  1366                           
  1367                           ;main.c: 321: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1368  0F25  3033               	movlw	51
  1369  0F26  1683               	bsf	3,5	;RP0=1, select bank1
  1370  0F27  1303               	bcf	3,6	;RP1=0, select bank1
  1371  0F28  00C8               	movwf	(??_inicialize^(0+128)+2)
  1372  0F29  30BC               	movlw	188
  1373  0F2A  00C7               	movwf	(??_inicialize^(0+128)+1)
  1374  0F2B  3010               	movlw	16
  1375  0F2C  00C6               	movwf	??_inicialize^(0+128)
  1376  0F2D                     u3907:	
  1377  0F2D  0BC6               	decfsz	??_inicialize^(0+128),f
  1378  0F2E  2F2D               	goto	u3907
  1379  0F2F  0BC7               	decfsz	(??_inicialize^(0+128)+1),f
  1380  0F30  2F2D               	goto	u3907
  1381  0F31  0BC8               	decfsz	(??_inicialize^(0+128)+2),f
  1382  0F32  2F2D               	goto	u3907
  1383                           
  1384                           ;main.c: 322: INTCONbits.PEIE = 1;
  1385  0F33  170B               	bsf	11,6	;volatile
  1386                           
  1387                           ;main.c: 323: INTCONbits.GIE = 1;
  1388  0F34  178B               	bsf	11,7	;volatile
  1389                           
  1390                           ;main.c: 324: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1391  0F35  301A               	movlw	26
  1392  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  1394  0F38  00C8               	movwf	(??_inicialize^(0+128)+2)
  1395  0F39  305E               	movlw	94
  1396  0F3A  00C7               	movwf	(??_inicialize^(0+128)+1)
  1397  0F3B  3086               	movlw	134
  1398  0F3C  00C6               	movwf	??_inicialize^(0+128)
  1399  0F3D                     u3917:	
  1400  0F3D  0BC6               	decfsz	??_inicialize^(0+128),f
  1401  0F3E  2F3D               	goto	u3917
  1402  0F3F  0BC7               	decfsz	(??_inicialize^(0+128)+1),f
  1403  0F40  2F3D               	goto	u3917
  1404  0F41  0BC8               	decfsz	(??_inicialize^(0+128)+2),f
  1405  0F42  2F3D               	goto	u3917
  1406  0F43  0000               	nop
  1407                           
  1408                           ;main.c: 325: ADCInit();
  1409  0F44  160A  118A  27ED  120A  158A  	fcall	_ADCInit
  1410                           
  1411                           ;main.c: 326: lcd_escreve_string("\fLoading PIC...");
  1412  0F49  3055               	movlw	low (STR_4-__stringbase)
  1413  0F4A  1683               	bsf	3,5	;RP0=1, select bank1
  1414  0F4B  1303               	bcf	3,6	;RP1=0, select bank1
  1415  0F4C  00C4               	movwf	lcd_escreve_string@y^(0+128)
  1416  0F4D  3080               	movlw	128
  1417  0F4E  00C5               	movwf	(lcd_escreve_string@y+1)^(0+128)
  1418  0F4F  120A  158A  227F  120A  158A  	fcall	_lcd_escreve_string
  1419                           
  1420                           ;main.c: 327: USARTWriteString("\fLoading PIC...");
  1421  0F54  3055               	movlw	low (STR_4-__stringbase)
  1422  0F55  1683               	bsf	3,5	;RP0=1, select bank1
  1423  0F56  1303               	bcf	3,6	;RP1=0, select bank1
  1424  0F57  00B9               	movwf	USARTWriteString@str^(0+128)
  1425  0F58  3080               	movlw	128
  1426  0F59  00BA               	movwf	(USARTWriteString@str+1)^(0+128)
  1427  0F5A  120A  158A  224E  120A  158A  	fcall	_USARTWriteString
  1428                           
  1429                           ;main.c: 328: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1430  0F5F  307F               	movlw	127
  1431  0F60  1683               	bsf	3,5	;RP0=1, select bank1
  1432  0F61  1303               	bcf	3,6	;RP1=0, select bank1
  1433  0F62  00C8               	movwf	(??_inicialize^(0+128)+2)
  1434  0F63  30D4               	movlw	212
  1435  0F64  00C7               	movwf	(??_inicialize^(0+128)+1)
  1436  0F65  30AE               	movlw	174
  1437  0F66  00C6               	movwf	??_inicialize^(0+128)
  1438  0F67                     u3927:	
  1439  0F67  0BC6               	decfsz	??_inicialize^(0+128),f
  1440  0F68  2F67               	goto	u3927
  1441  0F69  0BC7               	decfsz	(??_inicialize^(0+128)+1),f
  1442  0F6A  2F67               	goto	u3927
  1443  0F6B  0BC8               	decfsz	(??_inicialize^(0+128)+2),f
  1444  0F6C  2F67               	goto	u3927
  1445  0F6D  2F6E               	nop2
  1446                           
  1447                           ;main.c: 329: LCDClear();
  1448  0F6E  120A  158A  2359   	fcall	_LCDClear
  1449  0F71  0008               	return
  1450  0F72                     __end_of_inicialize:	
  1451                           
  1452                           	psect	text2
  1453  0A7F                     __ptext2:	
  1454 ;; *************** function _lcd_escreve_string *****************
  1455 ;; Defined at:
  1456 ;;		line 168 in file "lcd_4bit.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  y               2   12[BANK1 ] PTR const unsigned char 
  1459 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  1460 ;;		 -> progressBar@aux(16), 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;		None               void
  1465 ;; Registers used:
  1466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1472 ;;      Params:         0       0       2       0       0
  1473 ;;      Locals:         0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0
  1475 ;;      Totals:         0       0       2       0       0
  1476 ;;Total ram usage:        2 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:   11
  1479 ;; This function calls:
  1480 ;;		_lcd_putc
  1481 ;; This function is called by:
  1482 ;;		_inicialize
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           
  1487                           ;psect for function _lcd_escreve_string
  1488  0A7F                     _lcd_escreve_string:	
  1489  0A7F                     l2180:	
  1490                           ;lcd_4bit.c: 170: while(*y!='\0')
  1491                           
  1492                           ;incstack = 0
  1493 ;; hardware stack exceeded
  1494                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1495                           
  1496  0A7F  1683               	bsf	3,5	;RP0=1, select bank1
  1497  0A80  1303               	bcf	3,6	;RP1=0, select bank1
  1498  0A81  0845               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1499  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0A83  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0A84  00FF               	movwf	127
  1502  0A85  1683               	bsf	3,5	;RP0=1, select bank1
  1503  0A86  1303               	bcf	3,6	;RP1=0, select bank1
  1504  0A87  0844               	movf	lcd_escreve_string@y^(0+128),w
  1505  0A88  0084               	movwf	4
  1506  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  1507  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  1508  0A8B  120A  158A  2000  120A  158A  	fcall	stringtab
  1509  0A90  3800               	iorlw	0
  1510  0A91  1903               	btfsc	3,2
  1511  0A92  0008               	return
  1512                           
  1513                           ;lcd_4bit.c: 171: {
  1514                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1515  0A93  1683               	bsf	3,5	;RP0=1, select bank1
  1516  0A94  1303               	bcf	3,6	;RP1=0, select bank1
  1517  0A95  0845               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1518  0A96  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0A97  1303               	bcf	3,6	;RP1=0, select bank0
  1520  0A98  00FF               	movwf	127
  1521  0A99  1683               	bsf	3,5	;RP0=1, select bank1
  1522  0A9A  1303               	bcf	3,6	;RP1=0, select bank1
  1523  0A9B  0844               	movf	lcd_escreve_string@y^(0+128),w
  1524  0A9C  0084               	movwf	4
  1525  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0A9F  120A  158A  2000  120A  158A  	fcall	stringtab
  1528  0AA4  120A  158A  2399  120A  158A  	fcall	_lcd_putc
  1529                           
  1530                           ;lcd_4bit.c: 173: y++;
  1531  0AA9  3001               	movlw	1
  1532  0AAA  1683               	bsf	3,5	;RP0=1, select bank1
  1533  0AAB  1303               	bcf	3,6	;RP1=0, select bank1
  1534  0AAC  07C4               	addwf	lcd_escreve_string@y^(0+128),f
  1535  0AAD  1803               	skipnc
  1536  0AAE  0AC5               	incf	(lcd_escreve_string@y+1)^(0+128),f
  1537  0AAF  2A7F               	goto	l2180
  1538  0AB0                     __end_of_lcd_escreve_string:	
  1539                           
  1540                           	psect	text3
  1541  0B99                     __ptext3:	
  1542 ;; *************** function _lcd_putc *****************
  1543 ;; Defined at:
  1544 ;;		line 82 in file "lcd_4bit.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  c               1    wreg     unsigned char 
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  c               1   11[BANK1 ] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;		None               void
  1551 ;; Registers used:
  1552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1558 ;;      Params:         0       0       0       0       0
  1559 ;;      Locals:         0       0       1       0       0
  1560 ;;      Temps:          0       0       2       0       0
  1561 ;;      Totals:         0       0       3       0       0
  1562 ;;Total ram usage:        3 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:   10
  1565 ;; This function calls:
  1566 ;;		_lcd_envia_byte
  1567 ;;		_lcd_gotoxy
  1568 ;; This function is called by:
  1569 ;;		_lcd_escreve_string
  1570 ;;		_lcd_escreve_p
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           
  1575                           ;psect for function _lcd_putc
  1576  0B99                     _lcd_putc:	
  1577                           
  1578                           ;incstack = 0
  1579 ;; hardware stack exceeded
  1580                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1581                           ;lcd_putc@c stored from wreg
  1582  0B99  1683               	bsf	3,5	;RP0=1, select bank1
  1583  0B9A  1303               	bcf	3,6	;RP1=0, select bank1
  1584  0B9B  00C3               	movwf	lcd_putc@c^(0+128)
  1585                           
  1586                           ;lcd_4bit.c: 84: switch(c)
  1587  0B9C  2BD2               	goto	l2002
  1588  0B9D                     l1990:	
  1589                           ;lcd_4bit.c: 85: {
  1590                           ;lcd_4bit.c: 86: case '\f':
  1591                           
  1592                           
  1593                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1594  0B9D  01BA               	clrf	lcd_envia_byte@n^(0+128)
  1595  0B9E  0ABA               	incf	lcd_envia_byte@n^(0+128),f
  1596  0B9F  3000               	movlw	0
  1597  0BA0  120A  158A  22B0  120A  158A  	fcall	_lcd_envia_byte
  1598                           
  1599                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1600  0BA5  300D               	movlw	13
  1601  0BA6  1683               	bsf	3,5	;RP0=1, select bank1
  1602  0BA7  1303               	bcf	3,6	;RP1=0, select bank1
  1603  0BA8  00C2               	movwf	(??_lcd_putc^(0+128)+1)
  1604  0BA9  30FB               	movlw	251
  1605  0BAA  00C1               	movwf	??_lcd_putc^(0+128)
  1606  0BAB                     u3937:	
  1607  0BAB  0BC1               	decfsz	??_lcd_putc^(0+128),f
  1608  0BAC  2BAB               	goto	u3937
  1609  0BAD  0BC2               	decfsz	(??_lcd_putc^(0+128)+1),f
  1610  0BAE  2BAB               	goto	u3937
  1611  0BAF  2BB0               	nop2
  1612                           
  1613                           ;lcd_4bit.c: 89: break;
  1614  0BB0  0008               	return
  1615  0BB1                     l1994:	
  1616                           ;lcd_4bit.c: 91: case '\n':
  1617                           
  1618                           
  1619                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1620  0BB1  3002               	movlw	2
  1621  0BB2  1683               	bsf	3,5	;RP0=1, select bank1
  1622  0BB3  1303               	bcf	3,6	;RP1=0, select bank1
  1623  0BB4  00C1               	movwf	??_lcd_putc^(0+128)
  1624  0BB5  0841               	movf	??_lcd_putc^(0+128),w
  1625  0BB6  00BD               	movwf	lcd_gotoxy@y^(0+128)
  1626  0BB7  3001               	movlw	1
  1627  0BB8  120A  158A  20D9   	fcall	_lcd_gotoxy
  1628                           
  1629                           ;lcd_4bit.c: 93: break;
  1630  0BBB  0008               	return
  1631  0BBC                     l1996:	
  1632                           ;lcd_4bit.c: 95: case '\b':
  1633                           
  1634                           
  1635                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1636  0BBC  3010               	movlw	16
  1637  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  1638  0BBE  1303               	bcf	3,6	;RP1=0, select bank1
  1639  0BBF  00C1               	movwf	??_lcd_putc^(0+128)
  1640  0BC0  0841               	movf	??_lcd_putc^(0+128),w
  1641  0BC1  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1642  0BC2  3000               	movlw	0
  1643  0BC3  120A  158A  22B0   	fcall	_lcd_envia_byte
  1644                           
  1645                           ;lcd_4bit.c: 97: break;
  1646  0BC6  0008               	return
  1647  0BC7                     l1998:	
  1648                           ;lcd_4bit.c: 99: default:
  1649                           
  1650                           
  1651                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1652  0BC7  1683               	bsf	3,5	;RP0=1, select bank1
  1653  0BC8  1303               	bcf	3,6	;RP1=0, select bank1
  1654  0BC9  0843               	movf	lcd_putc@c^(0+128),w
  1655  0BCA  00C1               	movwf	??_lcd_putc^(0+128)
  1656  0BCB  0841               	movf	??_lcd_putc^(0+128),w
  1657  0BCC  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1658  0BCD  3001               	movlw	1
  1659  0BCE  120A  158A  22B0   	fcall	_lcd_envia_byte
  1660                           
  1661                           ;lcd_4bit.c: 102: }
  1662                           
  1663                           ;lcd_4bit.c: 101: break;
  1664  0BD1  0008               	return
  1665  0BD2                     l2002:	
  1666  0BD2  1683               	bsf	3,5	;RP0=1, select bank1
  1667  0BD3  1303               	bcf	3,6	;RP1=0, select bank1
  1668  0BD4  0843               	movf	lcd_putc@c^(0+128),w
  1669                           
  1670                           ; Switch size 1, requested type "space"
  1671                           ; Number of cases is 3, Range of values is 8 to 12
  1672                           ; switch strategies available:
  1673                           ; Name         Instructions Cycles
  1674                           ; simple_byte           10     6 (average)
  1675                           ; direct_byte           26    11 (fixed)
  1676                           ; jumptable            263     9 (fixed)
  1677                           ;	Chosen strategy is simple_byte
  1678  0BD5  3A08               	xorlw	8	; case 8
  1679  0BD6  1903               	skipnz
  1680  0BD7  2BBC               	goto	l1996
  1681  0BD8  3A02               	xorlw	2	; case 10
  1682  0BD9  1903               	skipnz
  1683  0BDA  2BB1               	goto	l1994
  1684  0BDB  3A06               	xorlw	6	; case 12
  1685  0BDC  1903               	skipnz
  1686  0BDD  2B9D               	goto	l1990
  1687  0BDE  2BC7               	goto	l1998
  1688  0BDF  0008               	return
  1689  0BE0                     __end_of_lcd_putc:	
  1690                           
  1691                           	psect	text4
  1692  08D9                     __ptext4:	
  1693 ;; *************** function _lcd_gotoxy *****************
  1694 ;; Defined at:
  1695 ;;		line 70 in file "lcd_4bit.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  x               1    wreg     unsigned char 
  1698 ;;  y               1    5[BANK1 ] unsigned char 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  x               1    7[BANK1 ] unsigned char 
  1701 ;;  address         1    8[BANK1 ] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;		None               void
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, pclath, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         0       0       1       0       0
  1712 ;;      Locals:         0       0       2       0       0
  1713 ;;      Temps:          0       0       1       0       0
  1714 ;;      Totals:         0       0       4       0       0
  1715 ;;Total ram usage:        4 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    9
  1718 ;; This function calls:
  1719 ;;		_lcd_envia_byte
  1720 ;; This function is called by:
  1721 ;;		_lcd_putc
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           
  1726                           ;psect for function _lcd_gotoxy
  1727  08D9                     _lcd_gotoxy:	
  1728                           
  1729                           ;incstack = 0
  1730 ;; hardware stack exceeded
  1731                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1732                           ;lcd_gotoxy@x stored from wreg
  1733  08D9  1683               	bsf	3,5	;RP0=1, select bank1
  1734  08DA  1303               	bcf	3,6	;RP1=0, select bank1
  1735  08DB  00BF               	movwf	lcd_gotoxy@x^(0+128)
  1736                           
  1737                           ;lcd_4bit.c: 72: unsigned char address;
  1738                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1739  08DC  083D               	movf	lcd_gotoxy@y^(0+128),w
  1740  08DD  3A01               	xorlw	1
  1741  08DE  1903               	skipnz
  1742  08DF  28E5               	goto	l1938
  1743  08E0  3040               	movlw	64
  1744  08E1  00BE               	movwf	??_lcd_gotoxy^(0+128)
  1745  08E2  083E               	movf	??_lcd_gotoxy^(0+128),w
  1746  08E3  00C0               	movwf	lcd_gotoxy@address^(0+128)
  1747  08E4  28E6               	goto	l1940
  1748  08E5                     l1938:	
  1749                           
  1750                           ;lcd_4bit.c: 75: else address=0;
  1751  08E5  01C0               	clrf	lcd_gotoxy@address^(0+128)
  1752  08E6                     l1940:	
  1753                           
  1754                           ;lcd_4bit.c: 77: address += x-1;
  1755  08E6  083F               	movf	lcd_gotoxy@x^(0+128),w
  1756  08E7  3EFF               	addlw	255
  1757  08E8  00BE               	movwf	??_lcd_gotoxy^(0+128)
  1758  08E9  083E               	movf	??_lcd_gotoxy^(0+128),w
  1759  08EA  07C0               	addwf	lcd_gotoxy@address^(0+128),f
  1760                           
  1761                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1762  08EB  0840               	movf	lcd_gotoxy@address^(0+128),w
  1763  08EC  3880               	iorlw	128
  1764  08ED  00BE               	movwf	??_lcd_gotoxy^(0+128)
  1765  08EE  083E               	movf	??_lcd_gotoxy^(0+128),w
  1766  08EF  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1767  08F0  3000               	movlw	0
  1768  08F1  120A  158A  22B0   	fcall	_lcd_envia_byte
  1769  08F4  0008               	return
  1770  08F5                     __end_of_lcd_gotoxy:	
  1771                           
  1772                           	psect	text5
  1773  0E90                     __ptext5:	
  1774 ;; *************** function _init_lcd_4bit *****************
  1775 ;; Defined at:
  1776 ;;		line 6 in file "lcd_4bit.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  i               1    7[BANK1 ] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1790 ;;      Params:         0       0       0       0       0
  1791 ;;      Locals:         0       0       1       0       0
  1792 ;;      Temps:          0       0       2       0       0
  1793 ;;      Totals:         0       0       3       0       0
  1794 ;;Total ram usage:        3 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    9
  1797 ;; This function calls:
  1798 ;;		_lcd_envia_byte
  1799 ;;		_lcd_envia_nibble
  1800 ;; This function is called by:
  1801 ;;		_inicialize
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function _init_lcd_4bit
  1807  0E90                     _init_lcd_4bit:	
  1808                           
  1809                           ;lcd_4bit.c: 8: unsigned char i;
  1810                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1811                           
  1812                           ;incstack = 0
  1813 ;; hardware stack exceeded
  1814                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1815  0E90  1683               	bsf	3,5	;RP0=1, select bank1
  1816  0E91  1303               	bcf	3,6	;RP1=0, select bank1
  1817  0E92  1206               	bcf	6,4	;volatile
  1818                           
  1819                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1820  0E93  1286               	bcf	6,5	;volatile
  1821                           
  1822                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1823  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  1824  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  1825  0E96  1206               	bcf	6,4	;volatile
  1826                           
  1827                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1828  0E97  1286               	bcf	6,5	;volatile
  1829                           
  1830                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1831  0E98  1683               	bsf	3,5	;RP0=1, select bank1
  1832  0E99  1303               	bcf	3,6	;RP1=0, select bank1
  1833  0E9A  1006               	bcf	6,0	;volatile
  1834                           
  1835                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1836  0E9B  1086               	bcf	6,1	;volatile
  1837                           
  1838                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1839  0E9C  1106               	bcf	6,2	;volatile
  1840                           
  1841                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1842  0E9D  1186               	bcf	6,3	;volatile
  1843                           
  1844                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1845  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0EA0  1006               	bcf	6,0	;volatile
  1848                           
  1849                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1850  0EA1  1086               	bcf	6,1	;volatile
  1851                           
  1852                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1853  0EA2  1106               	bcf	6,2	;volatile
  1854                           
  1855                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1856  0EA3  1186               	bcf	6,3	;volatile
  1857                           
  1858                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1859  0EA4  3062               	movlw	98
  1860  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0EA6  1303               	bcf	3,6	;RP1=0, select bank1
  1862  0EA7  00BE               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1863  0EA8  3065               	movlw	101
  1864  0EA9  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1865  0EAA                     u3947:	
  1866  0EAA  0BBD               	decfsz	??_init_lcd_4bit^(0+128),f
  1867  0EAB  2EAA               	goto	u3947
  1868  0EAC  0BBE               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1869  0EAD  2EAA               	goto	u3947
  1870  0EAE  2EAF               	nop2
  1871                           
  1872                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1873  0EAF  1683               	bsf	3,5	;RP0=1, select bank1
  1874  0EB0  1303               	bcf	3,6	;RP1=0, select bank1
  1875  0EB1  01BF               	clrf	init_lcd_4bit@i^(0+128)
  1876  0EB2  3003               	movlw	3
  1877  0EB3  023F               	subwf	init_lcd_4bit@i^(0+128),w
  1878  0EB4  1803               	btfsc	3,0
  1879  0EB5  2ED1               	goto	l2200
  1880  0EB6                     l2192:	
  1881                           
  1882                           ;lcd_4bit.c: 26: {
  1883                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1884  0EB6  3003               	movlw	3
  1885  0EB7  120A  158A  2521  120A  158A  	fcall	_lcd_envia_nibble
  1886                           
  1887                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1888  0EBC  3021               	movlw	33
  1889  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0EBE  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0EBF  00BE               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1892  0EC0  3076               	movlw	118
  1893  0EC1  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1894  0EC2                     u3957:	
  1895  0EC2  0BBD               	decfsz	??_init_lcd_4bit^(0+128),f
  1896  0EC3  2EC2               	goto	u3957
  1897  0EC4  0BBE               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1898  0EC5  2EC2               	goto	u3957
  1899  0EC6  0000               	nop
  1900  0EC7  3001               	movlw	1
  1901  0EC8  1683               	bsf	3,5	;RP0=1, select bank1
  1902  0EC9  1303               	bcf	3,6	;RP1=0, select bank1
  1903  0ECA  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1904  0ECB  083D               	movf	??_init_lcd_4bit^(0+128),w
  1905  0ECC  07BF               	addwf	init_lcd_4bit@i^(0+128),f
  1906  0ECD  3003               	movlw	3
  1907  0ECE  023F               	subwf	init_lcd_4bit@i^(0+128),w
  1908  0ECF  1C03               	skipc
  1909  0ED0  2EB6               	goto	l2192
  1910  0ED1                     l2200:	
  1911                           
  1912                           ;lcd_4bit.c: 29: }
  1913                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1914  0ED1  3002               	movlw	2
  1915  0ED2  120A  158A  2521  120A  158A  	fcall	_lcd_envia_nibble
  1916                           
  1917                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1918  0ED7  1683               	bsf	3,5	;RP0=1, select bank1
  1919  0ED8  1303               	bcf	3,6	;RP1=0, select bank1
  1920  0ED9  01BF               	clrf	init_lcd_4bit@i^(0+128)
  1921  0EDA                     L1:	
  1922  0EDA  3004               	movlw	4
  1923  0EDB  023F               	subwf	init_lcd_4bit@i^(0+128),w
  1924  0EDC  1803               	btfsc	3,0
  1925  0EDD  0008               	return
  1926                           
  1927                           ;lcd_4bit.c: 33: {
  1928                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1929  0EDE  083F               	movf	init_lcd_4bit@i^(0+128),w
  1930  0EDF  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1931  0EE0  0084               	movwf	4
  1932  0EE1  120A  158A  200A  120A  158A  	fcall	stringdir
  1933  0EE6  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1934  0EE7  083D               	movf	??_init_lcd_4bit^(0+128),w
  1935  0EE8  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1936  0EE9  3000               	movlw	0
  1937  0EEA  120A  158A  22B0  120A  158A  	fcall	_lcd_envia_byte
  1938  0EEF  3001               	movlw	1
  1939  0EF0  1683               	bsf	3,5	;RP0=1, select bank1
  1940  0EF1  1303               	bcf	3,6	;RP1=0, select bank1
  1941  0EF2  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1942  0EF3  083D               	movf	??_init_lcd_4bit^(0+128),w
  1943  0EF4  07BF               	addwf	init_lcd_4bit@i^(0+128),f
  1944  0EF5  2EDA               	goto	L1
  1945  0EF6                     __end_of_init_lcd_4bit:	
  1946                           
  1947                           	psect	text6
  1948  0A4E                     __ptext6:	
  1949 ;; *************** function _USARTWriteString *****************
  1950 ;; Defined at:
  1951 ;;		line 75 in file "main.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  str             2    1[BANK1 ] PTR const unsigned char 
  1954 ;;		 -> STR_5(16), sendString@array(40), STR_1(40), 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;		None               void
  1959 ;; Registers used:
  1960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1966 ;;      Params:         0       0       2       0       0
  1967 ;;      Locals:         0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0
  1969 ;;      Totals:         0       0       2       0       0
  1970 ;;Total ram usage:        2 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    8
  1973 ;; This function calls:
  1974 ;;		_USARTWriteChar
  1975 ;; This function is called by:
  1976 ;;		_inicialize
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function _USARTWriteString
  1982  0A4E                     _USARTWriteString:	
  1983  0A4E                     l2170:	
  1984                           ;main.c: 77: while (*str != '\0') {
  1985                           
  1986                           ;incstack = 0
  1987 ;; hardware stack exceeded
  1988                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1989                           
  1990  0A4E  1683               	bsf	3,5	;RP0=1, select bank1
  1991  0A4F  1303               	bcf	3,6	;RP1=0, select bank1
  1992  0A50  083A               	movf	(USARTWriteString@str+1)^(0+128),w
  1993  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0A53  00FF               	movwf	127
  1996  0A54  1683               	bsf	3,5	;RP0=1, select bank1
  1997  0A55  1303               	bcf	3,6	;RP1=0, select bank1
  1998  0A56  0839               	movf	USARTWriteString@str^(0+128),w
  1999  0A57  0084               	movwf	4
  2000  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0A5A  120A  158A  2000  120A  158A  	fcall	stringtab
  2003  0A5F  3800               	iorlw	0
  2004  0A60  1903               	btfsc	3,2
  2005  0A61  0008               	return
  2006                           
  2007                           ;main.c: 79: USARTWriteChar(*str);
  2008  0A62  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0A63  1303               	bcf	3,6	;RP1=0, select bank1
  2010  0A64  083A               	movf	(USARTWriteString@str+1)^(0+128),w
  2011  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0A67  00FF               	movwf	127
  2014  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  2015  0A69  1303               	bcf	3,6	;RP1=0, select bank1
  2016  0A6A  0839               	movf	USARTWriteString@str^(0+128),w
  2017  0A6B  0084               	movwf	4
  2018  0A6C  1283               	bcf	3,5	;RP0=0, select bank0
  2019  0A6D  1303               	bcf	3,6	;RP1=0, select bank0
  2020  0A6E  120A  158A  2000  120A  158A  	fcall	stringtab
  2021  0A73  160A  118A  27BF  120A  158A  	fcall	_USARTWriteChar
  2022                           
  2023                           ;main.c: 80: str++;
  2024  0A78  3001               	movlw	1
  2025  0A79  1683               	bsf	3,5	;RP0=1, select bank1
  2026  0A7A  1303               	bcf	3,6	;RP1=0, select bank1
  2027  0A7B  07B9               	addwf	USARTWriteString@str^(0+128),f
  2028  0A7C  1803               	skipnc
  2029  0A7D  0ABA               	incf	(USARTWriteString@str+1)^(0+128),f
  2030  0A7E  2A4E               	goto	l2170
  2031  0A7F                     __end_of_USARTWriteString:	
  2032                           
  2033                           	psect	text7
  2034  17BF                     __ptext7:	
  2035 ;; *************** function _USARTWriteChar *****************
  2036 ;; Defined at:
  2037 ;;		line 68 in file "main.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  USARTData       1    wreg     unsigned char 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  USARTData       1    0[BANK1 ] unsigned char 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;		None               void
  2044 ;; Registers used:
  2045 ;;		wreg
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2051 ;;      Params:         0       0       0       0       0
  2052 ;;      Locals:         0       0       1       0       0
  2053 ;;      Temps:          0       0       0       0       0
  2054 ;;      Totals:         0       0       1       0       0
  2055 ;;Total ram usage:        1 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    7
  2058 ;; This function calls:
  2059 ;;		Nothing
  2060 ;; This function is called by:
  2061 ;;		_USARTWriteString
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function _USARTWriteChar
  2067  17BF                     _USARTWriteChar:	
  2068                           
  2069                           ;incstack = 0
  2070 ;; hardware stack exceeded
  2071                           ; Regs used in _USARTWriteChar: [wreg]
  2072                           ;USARTWriteChar@USARTData stored from wreg
  2073  17BF  1683               	bsf	3,5	;RP0=1, select bank1
  2074  17C0  1303               	bcf	3,6	;RP1=0, select bank1
  2075  17C1  00B8               	movwf	USARTWriteChar@USARTData^(0+128)
  2076  17C2                     l68:	
  2077                           ;main.c: 69: while (!PIR1bits.TXIF);
  2078                           
  2079  17C2  1283               	bcf	3,5	;RP0=0, select bank0
  2080  17C3  1E0C               	btfss	12,4	;volatile
  2081  17C4  2FC2               	goto	l68
  2082                           
  2083                           ;main.c: 70: TXREG = USARTData;
  2084  17C5  1683               	bsf	3,5	;RP0=1, select bank1
  2085  17C6  1303               	bcf	3,6	;RP1=0, select bank1
  2086  17C7  0838               	movf	USARTWriteChar@USARTData^(0+128),w
  2087  17C8  1283               	bcf	3,5	;RP0=0, select bank0
  2088  17C9  1303               	bcf	3,6	;RP1=0, select bank0
  2089  17CA  0099               	movwf	25	;volatile
  2090  17CB  0008               	return
  2091  17CC                     __end_of_USARTWriteChar:	
  2092                           
  2093                           	psect	text8
  2094  0B59                     __ptext8:	
  2095 ;; *************** function _LCDClear *****************
  2096 ;; Defined at:
  2097 ;;		line 179 in file "lcd_4bit.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;		None               void
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0, pclath, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2111 ;;      Params:         0       0       0       0       0
  2112 ;;      Locals:         0       0       0       0       0
  2113 ;;      Temps:          0       0       2       0       0
  2114 ;;      Totals:         0       0       2       0       0
  2115 ;;Total ram usage:        2 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    9
  2118 ;; This function calls:
  2119 ;;		_lcd_envia_byte
  2120 ;; This function is called by:
  2121 ;;		_inicialize
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           
  2126                           ;psect for function _LCDClear
  2127  0B59                     _LCDClear:	
  2128                           
  2129                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2130                           
  2131                           ;incstack = 0
  2132 ;; hardware stack exceeded
  2133                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2134  0B59  1683               	bsf	3,5	;RP0=1, select bank1
  2135  0B5A  1303               	bcf	3,6	;RP1=0, select bank1
  2136  0B5B  01BA               	clrf	lcd_envia_byte@n^(0+128)
  2137  0B5C  0ABA               	incf	lcd_envia_byte@n^(0+128),f
  2138  0B5D  3000               	movlw	0
  2139  0B5E  120A  158A  22B0  120A  158A  	fcall	_lcd_envia_byte
  2140                           
  2141                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2142  0B63  3041               	movlw	65
  2143  0B64  1683               	bsf	3,5	;RP0=1, select bank1
  2144  0B65  1303               	bcf	3,6	;RP1=0, select bank1
  2145  0B66  00BE               	movwf	(??_LCDClear^(0+128)+1)
  2146  0B67  30EE               	movlw	238
  2147  0B68  00BD               	movwf	??_LCDClear^(0+128)
  2148  0B69                     u3967:	
  2149  0B69  0BBD               	decfsz	??_LCDClear^(0+128),f
  2150  0B6A  2B69               	goto	u3967
  2151  0B6B  0BBE               	decfsz	(??_LCDClear^(0+128)+1),f
  2152  0B6C  2B69               	goto	u3967
  2153  0B6D  0000               	nop
  2154                           
  2155                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2156  0B6E  300C               	movlw	12
  2157  0B6F  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0B70  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0B71  00BD               	movwf	??_LCDClear^(0+128)
  2160  0B72  083D               	movf	??_LCDClear^(0+128),w
  2161  0B73  00BA               	movwf	lcd_envia_byte@n^(0+128)
  2162  0B74  3000               	movlw	0
  2163  0B75  120A  158A  22B0  120A  158A  	fcall	_lcd_envia_byte
  2164                           
  2165                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2166  0B7A  30F9               	movlw	249
  2167  0B7B  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0B7C  1303               	bcf	3,6	;RP1=0, select bank1
  2169  0B7D  00BD               	movwf	??_LCDClear^(0+128)
  2170  0B7E                     u3977:	
  2171  0B7E  0000               	nop
  2172  0B7F  0BBD               	decfsz	??_LCDClear^(0+128),f
  2173  0B80  2B7E               	goto	u3977
  2174  0B81  2B82               	nop2	;nop
  2175  0B82  0000               	nop
  2176                           
  2177                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2178  0B83  3006               	movlw	6
  2179  0B84  1683               	bsf	3,5	;RP0=1, select bank1
  2180  0B85  1303               	bcf	3,6	;RP1=0, select bank1
  2181  0B86  00BD               	movwf	??_LCDClear^(0+128)
  2182  0B87  083D               	movf	??_LCDClear^(0+128),w
  2183  0B88  00BA               	movwf	lcd_envia_byte@n^(0+128)
  2184  0B89  3000               	movlw	0
  2185  0B8A  120A  158A  22B0  120A  158A  	fcall	_lcd_envia_byte
  2186                           
  2187                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2188  0B8F  30F9               	movlw	249
  2189  0B90  1683               	bsf	3,5	;RP0=1, select bank1
  2190  0B91  1303               	bcf	3,6	;RP1=0, select bank1
  2191  0B92  00BD               	movwf	??_LCDClear^(0+128)
  2192  0B93                     u3987:	
  2193  0B93  0000               	nop
  2194  0B94  0BBD               	decfsz	??_LCDClear^(0+128),f
  2195  0B95  2B93               	goto	u3987
  2196  0B96  2B97               	nop2	;nop
  2197  0B97  0000               	nop
  2198  0B98  0008               	return
  2199  0B99                     __end_of_LCDClear:	
  2200                           
  2201                           	psect	text9
  2202  0AB0                     __ptext9:	
  2203 ;; *************** function _lcd_envia_byte *****************
  2204 ;; Defined at:
  2205 ;;		line 53 in file "lcd_4bit.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  address         1    wreg     unsigned char 
  2208 ;;  n               1    2[BANK1 ] unsigned char 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  address         1    4[BANK1 ] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;		None               void
  2213 ;; Registers used:
  2214 ;;		wreg, status,2, status,0, pclath, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2220 ;;      Params:         0       0       1       0       0
  2221 ;;      Locals:         0       0       1       0       0
  2222 ;;      Temps:          0       0       1       0       0
  2223 ;;      Totals:         0       0       3       0       0
  2224 ;;Total ram usage:        3 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    8
  2227 ;; This function calls:
  2228 ;;		_lcd_envia_nibble
  2229 ;; This function is called by:
  2230 ;;		_init_lcd_4bit
  2231 ;;		_lcd_gotoxy
  2232 ;;		_lcd_putc
  2233 ;;		_LCDClear
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function _lcd_envia_byte
  2239  0AB0                     _lcd_envia_byte:	
  2240                           
  2241                           ;incstack = 0
  2242 ;; hardware stack exceeded
  2243                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2244                           ;lcd_envia_byte@address stored from wreg
  2245  0AB0  1683               	bsf	3,5	;RP0=1, select bank1
  2246  0AB1  1303               	bcf	3,6	;RP1=0, select bank1
  2247  0AB2  00BC               	movwf	lcd_envia_byte@address^(0+128)
  2248                           
  2249                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2250  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0AB5  1286               	bcf	6,5	;volatile
  2253                           
  2254                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2255  0AB6  3063               	movlw	99
  2256  0AB7  1683               	bsf	3,5	;RP0=1, select bank1
  2257  0AB8  1303               	bcf	3,6	;RP1=0, select bank1
  2258  0AB9  00BB               	movwf	??_lcd_envia_byte^(0+128)
  2259  0ABA                     u3997:	
  2260  0ABA  0BBB               	decfsz	??_lcd_envia_byte^(0+128),f
  2261  0ABB  2ABA               	goto	u3997
  2262  0ABC  2ABD               	nop2	;nop
  2263                           
  2264                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2265  0ABD  1683               	bsf	3,5	;RP0=1, select bank1
  2266  0ABE  1303               	bcf	3,6	;RP1=0, select bank1
  2267  0ABF  083C               	movf	lcd_envia_byte@address^(0+128),w
  2268  0AC0  1903               	btfsc	3,2
  2269  0AC1  2AC6               	goto	l176
  2270  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0AC4  1686               	bsf	6,5	;volatile
  2273  0AC5  2AC9               	goto	l177
  2274  0AC6                     l176:	
  2275                           
  2276                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2277  0AC6  1283               	bcf	3,5	;RP0=0, select bank0
  2278  0AC7  1303               	bcf	3,6	;RP1=0, select bank0
  2279  0AC8  1286               	bcf	6,5	;volatile
  2280  0AC9                     l177:	
  2281                           
  2282                           ;lcd_4bit.c: 61: _delay(1);
  2283  0AC9  0000               	nop
  2284                           
  2285                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2286  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  2287  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  2288  0ACC  1206               	bcf	6,4	;volatile
  2289                           
  2290                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2291  0ACD  1683               	bsf	3,5	;RP0=1, select bank1
  2292  0ACE  1303               	bcf	3,6	;RP1=0, select bank1
  2293  0ACF  083A               	movf	lcd_envia_byte@n^(0+128),w
  2294  0AD0  00BB               	movwf	??_lcd_envia_byte^(0+128)
  2295  0AD1  3004               	movlw	4
  2296  0AD2                     u1975:	
  2297  0AD2  1003               	clrc
  2298  0AD3  0CBB               	rrf	??_lcd_envia_byte^(0+128),f
  2299  0AD4  3EFF               	addlw	-1
  2300  0AD5  1D03               	skipz
  2301  0AD6  2AD2               	goto	u1975
  2302  0AD7  083B               	movf	??_lcd_envia_byte^(0+128),w
  2303  0AD8  120A  158A  2521  120A  158A  	fcall	_lcd_envia_nibble
  2304                           
  2305                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2306  0ADD  1683               	bsf	3,5	;RP0=1, select bank1
  2307  0ADE  1303               	bcf	3,6	;RP1=0, select bank1
  2308  0ADF  083A               	movf	lcd_envia_byte@n^(0+128),w
  2309  0AE0  390F               	andlw	15
  2310  0AE1  120A  158A  2521   	fcall	_lcd_envia_nibble
  2311  0AE4  0008               	return
  2312  0AE5                     __end_of_lcd_envia_byte:	
  2313                           
  2314                           	psect	text10
  2315  0D21                     __ptext10:	
  2316 ;; *************** function _lcd_envia_nibble *****************
  2317 ;; Defined at:
  2318 ;;		line 39 in file "lcd_4bit.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  n               1    wreg     unsigned char 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  n               1    1[BANK1 ] unsigned char 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;		None               void
  2325 ;; Registers used:
  2326 ;;		wreg, status,2, status,0
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2332 ;;      Params:         0       0       0       0       0
  2333 ;;      Locals:         0       0       1       0       0
  2334 ;;      Temps:          0       0       1       0       0
  2335 ;;      Totals:         0       0       2       0       0
  2336 ;;Total ram usage:        2 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    7
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_init_lcd_4bit
  2343 ;;		_lcd_envia_byte
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           
  2348                           ;psect for function _lcd_envia_nibble
  2349  0D21                     _lcd_envia_nibble:	
  2350                           
  2351                           ;incstack = 0
  2352 ;; hardware stack exceeded
  2353                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2354                           ;lcd_envia_nibble@n stored from wreg
  2355  0D21  1683               	bsf	3,5	;RP0=1, select bank1
  2356  0D22  1303               	bcf	3,6	;RP1=0, select bank1
  2357  0D23  00B9               	movwf	lcd_envia_nibble@n^(0+128)
  2358                           
  2359                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2360  0D24  3000               	movlw	0
  2361  0D25  1839               	btfsc	lcd_envia_nibble@n^(0+128),0
  2362  0D26  3001               	movlw	1
  2363  0D27  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2364  0D28  1283               	bcf	3,5	;RP0=0, select bank0
  2365  0D29  1303               	bcf	3,6	;RP1=0, select bank0
  2366  0D2A  0806               	movf	6,w	;volatile
  2367  0D2B  1683               	bsf	3,5	;RP0=1, select bank1
  2368  0D2C  1303               	bcf	3,6	;RP1=0, select bank1
  2369  0D2D  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2370  0D2E  39FE               	andlw	-2
  2371  0D2F  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2372  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0D32  0086               	movwf	6	;volatile
  2375                           
  2376                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2377  0D33  3000               	movlw	0
  2378  0D34  1683               	bsf	3,5	;RP0=1, select bank1
  2379  0D35  1303               	bcf	3,6	;RP1=0, select bank1
  2380  0D36  18B9               	btfsc	lcd_envia_nibble@n^(0+128),1
  2381  0D37  3001               	movlw	1
  2382  0D38  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2383  0D39  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2384  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  2385  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0D3C  0806               	movf	6,w	;volatile
  2387  0D3D  1683               	bsf	3,5	;RP0=1, select bank1
  2388  0D3E  1303               	bcf	3,6	;RP1=0, select bank1
  2389  0D3F  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2390  0D40  39FD               	andlw	-3
  2391  0D41  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2392  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0D44  0086               	movwf	6	;volatile
  2395                           
  2396                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2397  0D45  3000               	movlw	0
  2398  0D46  1683               	bsf	3,5	;RP0=1, select bank1
  2399  0D47  1303               	bcf	3,6	;RP1=0, select bank1
  2400  0D48  1939               	btfsc	lcd_envia_nibble@n^(0+128),2
  2401  0D49  3001               	movlw	1
  2402  0D4A  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2403  0D4B  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2404  0D4C  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2405  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  2406  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  2407  0D4F  0806               	movf	6,w	;volatile
  2408  0D50  1683               	bsf	3,5	;RP0=1, select bank1
  2409  0D51  1303               	bcf	3,6	;RP1=0, select bank1
  2410  0D52  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2411  0D53  39FB               	andlw	-5
  2412  0D54  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2413  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  2414  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  2415  0D57  0086               	movwf	6	;volatile
  2416                           
  2417                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2418  0D58  3000               	movlw	0
  2419  0D59  1683               	bsf	3,5	;RP0=1, select bank1
  2420  0D5A  1303               	bcf	3,6	;RP1=0, select bank1
  2421  0D5B  19B9               	btfsc	lcd_envia_nibble@n^(0+128),3
  2422  0D5C  3001               	movlw	1
  2423  0D5D  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2424  0D5E  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2425  0D5F  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2426  0D60  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2427  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  2428  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  2429  0D63  0806               	movf	6,w	;volatile
  2430  0D64  1683               	bsf	3,5	;RP0=1, select bank1
  2431  0D65  1303               	bcf	3,6	;RP1=0, select bank1
  2432  0D66  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2433  0D67  39F7               	andlw	-9
  2434  0D68  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2435  0D69  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0D6A  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0D6B  0086               	movwf	6	;volatile
  2438                           
  2439                           ;lcd_4bit.c: 46: _delay(1);
  2440  0D6C  0000               	nop
  2441                           
  2442                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2443  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  2444  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  2445  0D6F  1606               	bsf	6,4	;volatile
  2446                           
  2447                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2448  0D70  3003               	movlw	3
  2449  0D71  1683               	bsf	3,5	;RP0=1, select bank1
  2450  0D72  1303               	bcf	3,6	;RP1=0, select bank1
  2451  0D73  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2452  0D74                     u4007:	
  2453  0D74  0BB8               	decfsz	??_lcd_envia_nibble^(0+128),f
  2454  0D75  2D74               	goto	u4007
  2455                           
  2456                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2457  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0D78  1206               	bcf	6,4	;volatile
  2460  0D79  0008               	return
  2461  0D7A                     __end_of_lcd_envia_nibble:	
  2462                           
  2463                           	psect	text11
  2464  17ED                     __ptext11:	
  2465 ;; *************** function _ADCInit *****************
  2466 ;; Defined at:
  2467 ;;		line 110 in file "main.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;		None
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;		None
  2472 ;; Return value:  Size  Location     Type
  2473 ;;		None               void
  2474 ;; Registers used:
  2475 ;;		None
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2481 ;;      Params:         0       0       0       0       0
  2482 ;;      Locals:         0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0
  2484 ;;      Totals:         0       0       0       0       0
  2485 ;;Total ram usage:        0 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    7
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_inicialize
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           
  2496                           ;psect for function _ADCInit
  2497  17ED                     _ADCInit:	
  2498                           
  2499                           ;main.c: 112: ADCON1bits.ADFM = 1;
  2500                           
  2501                           ;incstack = 0
  2502 ;; hardware stack exceeded
  2503                           ; Regs used in _ADCInit: []
  2504  17ED  1683               	bsf	3,5	;RP0=1, select bank1
  2505  17EE  1303               	bcf	3,6	;RP1=0, select bank1
  2506  17EF  179F               	bsf	31,7	;volatile
  2507                           
  2508                           ;main.c: 113: ADCON1bits.PCFG3 = 0;
  2509  17F0  119F               	bcf	31,3	;volatile
  2510                           
  2511                           ;main.c: 114: ADCON1bits.PCFG2 = 0;
  2512  17F1  111F               	bcf	31,2	;volatile
  2513                           
  2514                           ;main.c: 115: ADCON1bits.PCFG1 = 0;
  2515  17F2  109F               	bcf	31,1	;volatile
  2516                           
  2517                           ;main.c: 116: ADCON1bits.PCFG0 = 0;
  2518  17F3  101F               	bcf	31,0	;volatile
  2519                           
  2520                           ;main.c: 119: ADCON0bits.ADCS1 = 1;
  2521  17F4  1283               	bcf	3,5	;RP0=0, select bank0
  2522  17F5  1303               	bcf	3,6	;RP1=0, select bank0
  2523  17F6  179F               	bsf	31,7	;volatile
  2524                           
  2525                           ;main.c: 120: ADCON0bits.ADCS0 = 0;
  2526  17F7  131F               	bcf	31,6	;volatile
  2527                           
  2528                           ;main.c: 121: ADCON0bits.ADON = 1;
  2529  17F8  141F               	bsf	31,0	;volatile
  2530                           
  2531                           ;main.c: 124: PIE1bits.ADIE = 1;
  2532  17F9  1683               	bsf	3,5	;RP0=1, select bank1
  2533  17FA  1303               	bcf	3,6	;RP1=0, select bank1
  2534  17FB  170C               	bsf	12,6	;volatile
  2535                           
  2536                           ;main.c: 125: PIR1bits.ADIF = 0;
  2537  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  2538  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  2539  17FE  130C               	bcf	12,6	;volatile
  2540  17FF  0008               	return
  2541  1800                     __end_of_ADCInit:	
  2542                           
  2543                           	psect	text12
  2544  0A21                     __ptext12:	
  2545 ;; *************** function _ADCRead *****************
  2546 ;; Defined at:
  2547 ;;		line 129 in file "main.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  ch              2    0[BANK1 ] int 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;		None               void
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2561 ;;      Params:         0       0       2       0       0
  2562 ;;      Locals:         0       0       0       0       0
  2563 ;;      Temps:          0       0       1       0       0
  2564 ;;      Totals:         0       0       3       0       0
  2565 ;;Total ram usage:        3 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    7
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _ADCRead
  2577  0A21                     _ADCRead:	
  2578                           
  2579                           ;main.c: 131: ADCON0bits.CHS = ch;
  2580                           
  2581                           ;incstack = 0
  2582                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2583  0A21  1683               	bsf	3,5	;RP0=1, select bank1
  2584  0A22  1303               	bcf	3,6	;RP1=0, select bank1
  2585  0A23  0838               	movf	ADCRead@ch^(0+128),w
  2586  0A24  00BA               	movwf	??_ADCRead^(0+128)
  2587  0A25  0DBA               	rlf	??_ADCRead^(0+128),f
  2588  0A26  0DBA               	rlf	??_ADCRead^(0+128),f
  2589  0A27  0DBA               	rlf	??_ADCRead^(0+128),f
  2590  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  2592  0A2A  081F               	movf	31,w	;volatile
  2593  0A2B  1683               	bsf	3,5	;RP0=1, select bank1
  2594  0A2C  1303               	bcf	3,6	;RP1=0, select bank1
  2595  0A2D  063A               	xorwf	??_ADCRead^(0+128),w
  2596  0A2E  39C7               	andlw	-57
  2597  0A2F  063A               	xorwf	??_ADCRead^(0+128),w
  2598  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0A32  009F               	movwf	31	;volatile
  2601                           
  2602                           ;main.c: 132: recipiente = ch;
  2603  0A33  1683               	bsf	3,5	;RP0=1, select bank1
  2604  0A34  1303               	bcf	3,6	;RP1=0, select bank1
  2605  0A35  0839               	movf	(ADCRead@ch+1)^(0+128),w
  2606  0A36  1283               	bcf	3,5	;RP0=0, select bank0
  2607  0A37  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0A38  01EC               	clrf	_recipiente+1
  2609  0A39  07EC               	addwf	_recipiente+1,f
  2610  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  2611  0A3B  1303               	bcf	3,6	;RP1=0, select bank1
  2612  0A3C  0838               	movf	ADCRead@ch^(0+128),w
  2613  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  2614  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  2615  0A3F  01EB               	clrf	_recipiente
  2616  0A40  07EB               	addwf	_recipiente,f
  2617                           
  2618                           ;main.c: 133: _delay((unsigned long)((25)*(20000000/4000000.0)));
  2619  0A41  3029               	movlw	41
  2620  0A42  1683               	bsf	3,5	;RP0=1, select bank1
  2621  0A43  1303               	bcf	3,6	;RP1=0, select bank1
  2622  0A44  00BA               	movwf	??_ADCRead^(0+128)
  2623  0A45                     u4017:	
  2624  0A45  0BBA               	decfsz	??_ADCRead^(0+128),f
  2625  0A46  2A45               	goto	u4017
  2626  0A47  0000               	nop
  2627                           
  2628                           ;main.c: 134: ADCON0bits.GO = 1;
  2629  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0A4A  151F               	bsf	31,2	;volatile
  2632  0A4B                     l88:	
  2633                           ;main.c: 135: while (ADCON0bits.GO_DONE);
  2634                           
  2635  0A4B  1D1F               	btfss	31,2	;volatile
  2636  0A4C  0008               	return
  2637  0A4D  2A4B               	goto	l88
  2638  0A4E                     __end_of_ADCRead:	
  2639                           
  2640                           	psect	text13
  2641  0279                     __ptext13:	
  2642 ;; *************** function _ISR *****************
  2643 ;; Defined at:
  2644 ;;		line 235 in file "main.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;  input2          3   69[BANK0 ] float 
  2649 ;;  input           3   66[BANK0 ] float 
  2650 ;;  pre             3   61[BANK0 ] float 
  2651 ;;  preint          2   64[BANK0 ] int 
  2652 ;;  status2         2   59[BANK0 ] int 
  2653 ;;  status          2   57[BANK0 ] int 
  2654 ;;  per             1   72[BANK0 ] PTR unsigned char 
  2655 ;;		 -> ftoa@buf(17), 
  2656 ;;  buf             1   56[BANK0 ] PTR unsigned char 
  2657 ;;		 -> ftoa@buf(17), 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;		None               void
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2667 ;;      Params:         0       0       0       0       0
  2668 ;;      Locals:         0      17       0       0       0
  2669 ;;      Temps:          0       6       0       0       0
  2670 ;;      Totals:         0      23       0       0       0
  2671 ;;Total ram usage:       23 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    6
  2674 ;; This function calls:
  2675 ;;		_USARTReceiveChar
  2676 ;;		___awdiv
  2677 ;;		___awmod
  2678 ;;		___awtoft
  2679 ;;		___ftdiv
  2680 ;;		___ftmul
  2681 ;;		___fttol
  2682 ;;		_active
  2683 ;;		_ftoa
  2684 ;;		_progressBar
  2685 ;;		_sendString
  2686 ;;		i1_lcd_escreve_string
  2687 ;;		i1_lcd_gotoxy
  2688 ;; This function is called by:
  2689 ;;		Interrupt level 1
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           
  2694                           ;psect for function _ISR
  2695  0279                     _ISR:	
  2696                           
  2697                           ;main.c: 238: if (PIR1bits.ADIF) {
  2698  0279  1F0C               	btfss	12,6	;volatile
  2699  027A  2C25               	goto	i1l2842
  2700                           
  2701                           ;main.c: 240: ADCResult = ((ADRESH << 8) + ADRESL);
  2702  027B  081E               	movf	30,w	;volatile
  2703  027C  01EA               	clrf	_ADCResult+1
  2704  027D  07EA               	addwf	_ADCResult+1,f
  2705  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2706  027F  1303               	bcf	3,6	;RP1=0, select bank1
  2707  0280  081E               	movf	30,w	;volatile
  2708  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0283  01E9               	clrf	_ADCResult
  2711  0284  07E9               	addwf	_ADCResult,f
  2712                           
  2713                           ;main.c: 243: char * buf;
  2714                           ;main.c: 244: char * per;
  2715                           ;main.c: 247: float input;
  2716                           ;main.c: 248: float input2;
  2717                           ;main.c: 249: float pre;
  2718                           ;main.c: 250: int preint;
  2719                           ;main.c: 251: int status;
  2720                           ;main.c: 252: int status2;
  2721                           ;main.c: 255: input = ADCResult * 0.0048828125;
  2722  0285  3000               	movlw	0
  2723  0286  00A0               	movwf	___ftmul@f1
  2724  0287  30A0               	movlw	160
  2725  0288  00A1               	movwf	___ftmul@f1+1
  2726  0289  303B               	movlw	59
  2727  028A  00A2               	movwf	___ftmul@f1+2
  2728  028B  086A               	movf	_ADCResult+1,w
  2729  028C  01F9               	clrf	___awtoft@c+1
  2730  028D  07F9               	addwf	___awtoft@c+1,f
  2731  028E  0869               	movf	_ADCResult,w
  2732  028F  01F8               	clrf	___awtoft@c
  2733  0290  07F8               	addwf	___awtoft@c,f
  2734  0291  120A  158A  20F5  120A  118A  	fcall	___awtoft
  2735  0296  0878               	movf	?___awtoft,w
  2736  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2737  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2738  0299  00A3               	movwf	___ftmul@f2
  2739  029A  0879               	movf	?___awtoft+1,w
  2740  029B  00A4               	movwf	___ftmul@f2+1
  2741  029C  087A               	movf	?___awtoft+2,w
  2742  029D  00A5               	movwf	___ftmul@f2+2
  2743  029E  120A  118A  2545  120A  118A  	fcall	___ftmul
  2744  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2745  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2746  02A5  0820               	movf	?___ftmul,w
  2747  02A6  00E2               	movwf	ISR@input
  2748  02A7  0821               	movf	?___ftmul+1,w
  2749  02A8  00E3               	movwf	ISR@input+1
  2750  02A9  0822               	movf	?___ftmul+2,w
  2751  02AA  00E4               	movwf	ISR@input+2
  2752                           
  2753                           ;main.c: 256: buf = ftoa(input, &status);
  2754  02AB  0862               	movf	ISR@input,w
  2755  02AC  00C4               	movwf	ftoa@f
  2756  02AD  0863               	movf	ISR@input+1,w
  2757  02AE  00C5               	movwf	ftoa@f+1
  2758  02AF  0864               	movf	ISR@input+2,w
  2759  02B0  00C6               	movwf	ftoa@f+2
  2760  02B1  3059               	movlw	ISR@status& (0+255)
  2761  02B2  00D2               	movwf	??_ISR
  2762  02B3  0852               	movf	??_ISR,w
  2763  02B4  00C7               	movwf	ftoa@status
  2764  02B5  120A  118A  2618  120A  118A  	fcall	_ftoa
  2765  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2766  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2767  02BC  00D3               	movwf	??_ISR+1
  2768  02BD  0853               	movf	??_ISR+1,w
  2769  02BE  00D8               	movwf	ISR@buf
  2770                           
  2771                           ;main.c: 260: Display[0] = (ADCResult / 1000) + 48;
  2772  02BF  30E8               	movlw	232
  2773  02C0  00F0               	movwf	___awdiv@divisor
  2774  02C1  3003               	movlw	3
  2775  02C2  00F1               	movwf	___awdiv@divisor+1
  2776  02C3  086A               	movf	_ADCResult+1,w
  2777  02C4  01F3               	clrf	___awdiv@dividend+1
  2778  02C5  07F3               	addwf	___awdiv@dividend+1,f
  2779  02C6  0869               	movf	_ADCResult,w
  2780  02C7  01F2               	clrf	___awdiv@dividend
  2781  02C8  07F2               	addwf	___awdiv@dividend,f
  2782  02C9  120A  158A  257A  120A  118A  	fcall	___awdiv
  2783  02CE  0870               	movf	?___awdiv,w
  2784  02CF  3E30               	addlw	48
  2785  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2786  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2787  02D2  00D2               	movwf	??_ISR
  2788  02D3  0852               	movf	??_ISR,w
  2789  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  2790  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  2791  02D6  00A0               	movwf	_Display^(0+128)
  2792                           
  2793                           ;main.c: 261: Display[1] = ((ADCResult / 100) % 10) + 48;
  2794  02D7  300A               	movlw	10
  2795  02D8  00F9               	movwf	___awmod@divisor
  2796  02D9  3000               	movlw	0
  2797  02DA  00FA               	movwf	___awmod@divisor+1
  2798  02DB  3064               	movlw	100
  2799  02DC  00F0               	movwf	___awdiv@divisor
  2800  02DD  3000               	movlw	0
  2801  02DE  00F1               	movwf	___awdiv@divisor+1
  2802  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  2803  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  2804  02E1  086A               	movf	_ADCResult+1,w
  2805  02E2  01F3               	clrf	___awdiv@dividend+1
  2806  02E3  07F3               	addwf	___awdiv@dividend+1,f
  2807  02E4  0869               	movf	_ADCResult,w
  2808  02E5  01F2               	clrf	___awdiv@dividend
  2809  02E6  07F2               	addwf	___awdiv@dividend,f
  2810  02E7  120A  158A  257A  120A  118A  	fcall	___awdiv
  2811  02EC  0871               	movf	?___awdiv+1,w
  2812  02ED  01FC               	clrf	___awmod@dividend+1
  2813  02EE  07FC               	addwf	___awmod@dividend+1,f
  2814  02EF  0870               	movf	?___awdiv,w
  2815  02F0  01FB               	clrf	___awmod@dividend
  2816  02F1  07FB               	addwf	___awmod@dividend,f
  2817  02F2  120A  158A  247A  120A  118A  	fcall	___awmod
  2818  02F7  0879               	movf	?___awmod,w
  2819  02F8  3E30               	addlw	48
  2820  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2821  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2822  02FB  00D2               	movwf	??_ISR
  2823  02FC  0852               	movf	??_ISR,w
  2824  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2825  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  2826  02FF  00A1               	movwf	(_Display^(0+128)+1)
  2827                           
  2828                           ;main.c: 262: Display[2] = ((ADCResult / 10) % 10) + 48;
  2829  0300  300A               	movlw	10
  2830  0301  00F9               	movwf	___awmod@divisor
  2831  0302  3000               	movlw	0
  2832  0303  00FA               	movwf	___awmod@divisor+1
  2833  0304  300A               	movlw	10
  2834  0305  00F0               	movwf	___awdiv@divisor
  2835  0306  3000               	movlw	0
  2836  0307  00F1               	movwf	___awdiv@divisor+1
  2837  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2838  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2839  030A  086A               	movf	_ADCResult+1,w
  2840  030B  01F3               	clrf	___awdiv@dividend+1
  2841  030C  07F3               	addwf	___awdiv@dividend+1,f
  2842  030D  0869               	movf	_ADCResult,w
  2843  030E  01F2               	clrf	___awdiv@dividend
  2844  030F  07F2               	addwf	___awdiv@dividend,f
  2845  0310  120A  158A  257A  120A  118A  	fcall	___awdiv
  2846  0315  0871               	movf	?___awdiv+1,w
  2847  0316  01FC               	clrf	___awmod@dividend+1
  2848  0317  07FC               	addwf	___awmod@dividend+1,f
  2849  0318  0870               	movf	?___awdiv,w
  2850  0319  01FB               	clrf	___awmod@dividend
  2851  031A  07FB               	addwf	___awmod@dividend,f
  2852  031B  120A  158A  247A  120A  118A  	fcall	___awmod
  2853  0320  0879               	movf	?___awmod,w
  2854  0321  3E30               	addlw	48
  2855  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2856  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2857  0324  00D2               	movwf	??_ISR
  2858  0325  0852               	movf	??_ISR,w
  2859  0326  1683               	bsf	3,5	;RP0=1, select bank1
  2860  0327  1303               	bcf	3,6	;RP1=0, select bank1
  2861  0328  00A2               	movwf	(_Display^(0+128)+2)
  2862                           
  2863                           ;main.c: 263: Display[3] = (ADCResult % 10) + 48;
  2864  0329  300A               	movlw	10
  2865  032A  00F9               	movwf	___awmod@divisor
  2866  032B  3000               	movlw	0
  2867  032C  00FA               	movwf	___awmod@divisor+1
  2868  032D  1283               	bcf	3,5	;RP0=0, select bank0
  2869  032E  1303               	bcf	3,6	;RP1=0, select bank0
  2870  032F  086A               	movf	_ADCResult+1,w
  2871  0330  01FC               	clrf	___awmod@dividend+1
  2872  0331  07FC               	addwf	___awmod@dividend+1,f
  2873  0332  0869               	movf	_ADCResult,w
  2874  0333  01FB               	clrf	___awmod@dividend
  2875  0334  07FB               	addwf	___awmod@dividend,f
  2876  0335  120A  158A  247A  120A  118A  	fcall	___awmod
  2877  033A  0879               	movf	?___awmod,w
  2878  033B  3E30               	addlw	48
  2879  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2880  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2881  033E  00D2               	movwf	??_ISR
  2882  033F  0852               	movf	??_ISR,w
  2883  0340  1683               	bsf	3,5	;RP0=1, select bank1
  2884  0341  1303               	bcf	3,6	;RP1=0, select bank1
  2885  0342  00A3               	movwf	(_Display^(0+128)+3)
  2886                           
  2887                           ;main.c: 265: lcd_gotoxy(0, 1);
  2888  0343  01F5               	clrf	i1lcd_gotoxy@y
  2889  0344  0AF5               	incf	i1lcd_gotoxy@y,f
  2890  0345  3000               	movlw	0
  2891  0346  120A  158A  2088  120A  118A  	fcall	i1_lcd_gotoxy
  2892                           
  2893                           ;main.c: 266: lcd_escreve_string("Nivel:");
  2894  034B  3070               	movlw	low (STR_2-__stringbase)
  2895  034C  00FC               	movwf	i1lcd_escreve_string@y
  2896  034D  3080               	movlw	128
  2897  034E  00FD               	movwf	i1lcd_escreve_string@y+1
  2898  034F  120A  158A  217F  120A  118A  	fcall	i1_lcd_escreve_string
  2899                           
  2900                           ;main.c: 267: lcd_gotoxy(7, 1);
  2901  0354  01F5               	clrf	i1lcd_gotoxy@y
  2902  0355  0AF5               	incf	i1lcd_gotoxy@y,f
  2903  0356  3007               	movlw	7
  2904  0357  120A  158A  2088  120A  118A  	fcall	i1_lcd_gotoxy
  2905                           
  2906                           ;main.c: 268: input2 = ((input * 100) / 1);
  2907  035C  3000               	movlw	0
  2908  035D  1283               	bcf	3,5	;RP0=0, select bank0
  2909  035E  1303               	bcf	3,6	;RP1=0, select bank0
  2910  035F  00B0               	movwf	___ftdiv@f2
  2911  0360  3080               	movlw	128
  2912  0361  00B1               	movwf	___ftdiv@f2+1
  2913  0362  303F               	movlw	63
  2914  0363  00B2               	movwf	___ftdiv@f2+2
  2915  0364  3000               	movlw	0
  2916  0365  00A0               	movwf	___ftmul@f1
  2917  0366  30C8               	movlw	200
  2918  0367  00A1               	movwf	___ftmul@f1+1
  2919  0368  3042               	movlw	66
  2920  0369  00A2               	movwf	___ftmul@f1+2
  2921  036A  0862               	movf	ISR@input,w
  2922  036B  00A3               	movwf	___ftmul@f2
  2923  036C  0863               	movf	ISR@input+1,w
  2924  036D  00A4               	movwf	___ftmul@f2+1
  2925  036E  0864               	movf	ISR@input+2,w
  2926  036F  00A5               	movwf	___ftmul@f2+2
  2927  0370  120A  118A  2545  120A  118A  	fcall	___ftmul
  2928  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2929  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0377  0820               	movf	?___ftmul,w
  2931  0378  00B3               	movwf	___ftdiv@f1
  2932  0379  0821               	movf	?___ftmul+1,w
  2933  037A  00B4               	movwf	___ftdiv@f1+1
  2934  037B  0822               	movf	?___ftmul+2,w
  2935  037C  00B5               	movwf	___ftdiv@f1+2
  2936  037D  120A  118A  26D2  120A  118A  	fcall	___ftdiv
  2937  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0384  0830               	movf	?___ftdiv,w
  2940  0385  00E5               	movwf	ISR@input2
  2941  0386  0831               	movf	?___ftdiv+1,w
  2942  0387  00E6               	movwf	ISR@input2+1
  2943  0388  0832               	movf	?___ftdiv+2,w
  2944  0389  00E7               	movwf	ISR@input2+2
  2945                           
  2946                           ;main.c: 269: per = ftoa(input2, &status2);
  2947  038A  0865               	movf	ISR@input2,w
  2948  038B  00C4               	movwf	ftoa@f
  2949  038C  0866               	movf	ISR@input2+1,w
  2950  038D  00C5               	movwf	ftoa@f+1
  2951  038E  0867               	movf	ISR@input2+2,w
  2952  038F  00C6               	movwf	ftoa@f+2
  2953  0390  305B               	movlw	ISR@status2& (0+255)
  2954  0391  00D2               	movwf	??_ISR
  2955  0392  0852               	movf	??_ISR,w
  2956  0393  00C7               	movwf	ftoa@status
  2957  0394  120A  118A  2618  120A  118A  	fcall	_ftoa
  2958  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2959  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2960  039B  00D3               	movwf	??_ISR+1
  2961  039C  0853               	movf	??_ISR+1,w
  2962  039D  00E8               	movwf	ISR@per
  2963                           
  2964                           ;main.c: 270: lcd_escreve_string(per);
  2965  039E  0868               	movf	ISR@per,w
  2966  039F  00FC               	movwf	i1lcd_escreve_string@y
  2967  03A0  3000               	movlw	0
  2968  03A1  00FD               	movwf	i1lcd_escreve_string@y+1
  2969  03A2  120A  158A  217F  120A  118A  	fcall	i1_lcd_escreve_string
  2970                           
  2971                           ;main.c: 272: sendString(per);
  2972  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2973  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2974  03A9  0868               	movf	ISR@per,w
  2975  03AA  120A  158A  24C9  120A  118A  	fcall	_sendString
  2976                           
  2977                           ;main.c: 274: lcd_gotoxy(16, 1);
  2978  03AF  01F5               	clrf	i1lcd_gotoxy@y
  2979  03B0  0AF5               	incf	i1lcd_gotoxy@y,f
  2980  03B1  3010               	movlw	16
  2981  03B2  120A  158A  2088  120A  118A  	fcall	i1_lcd_gotoxy
  2982                           
  2983                           ;main.c: 275: lcd_escreve_string("%");
  2984  03B7  3077               	movlw	low (STR_3-__stringbase)
  2985  03B8  00FC               	movwf	i1lcd_escreve_string@y
  2986  03B9  3080               	movlw	128
  2987  03BA  00FD               	movwf	i1lcd_escreve_string@y+1
  2988  03BB  120A  158A  217F  120A  118A  	fcall	i1_lcd_escreve_string
  2989                           
  2990                           ;main.c: 276: lcd_gotoxy(0, 0);
  2991  03C0  01F5               	clrf	i1lcd_gotoxy@y
  2992  03C1  3000               	movlw	0
  2993  03C2  120A  158A  2088  120A  118A  	fcall	i1_lcd_gotoxy
  2994                           
  2995                           ;main.c: 277: pre = input2 * 0.16;
  2996  03C7  30D7               	movlw	215
  2997  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2998  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  2999  03CA  00A0               	movwf	___ftmul@f1
  3000  03CB  3023               	movlw	35
  3001  03CC  00A1               	movwf	___ftmul@f1+1
  3002  03CD  303E               	movlw	62
  3003  03CE  00A2               	movwf	___ftmul@f1+2
  3004  03CF  0865               	movf	ISR@input2,w
  3005  03D0  00A3               	movwf	___ftmul@f2
  3006  03D1  0866               	movf	ISR@input2+1,w
  3007  03D2  00A4               	movwf	___ftmul@f2+1
  3008  03D3  0867               	movf	ISR@input2+2,w
  3009  03D4  00A5               	movwf	___ftmul@f2+2
  3010  03D5  120A  118A  2545  120A  118A  	fcall	___ftmul
  3011  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3012  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  3013  03DC  0820               	movf	?___ftmul,w
  3014  03DD  00DD               	movwf	ISR@pre
  3015  03DE  0821               	movf	?___ftmul+1,w
  3016  03DF  00DE               	movwf	ISR@pre+1
  3017  03E0  0822               	movf	?___ftmul+2,w
  3018  03E1  00DF               	movwf	ISR@pre+2
  3019                           
  3020                           ;main.c: 278: preint = (int) pre;
  3021  03E2  085D               	movf	ISR@pre,w
  3022  03E3  00B0               	movwf	___fttol@f1
  3023  03E4  085E               	movf	ISR@pre+1,w
  3024  03E5  00B1               	movwf	___fttol@f1+1
  3025  03E6  085F               	movf	ISR@pre+2,w
  3026  03E7  00B2               	movwf	___fttol@f1+2
  3027  03E8  120A  158A  2772  120A  118A  	fcall	___fttol
  3028  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  3029  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  3030  03EF  0831               	movf	?___fttol+1,w
  3031  03F0  01E1               	clrf	ISR@preint+1
  3032  03F1  07E1               	addwf	ISR@preint+1,f
  3033  03F2  0830               	movf	?___fttol,w
  3034  03F3  01E0               	clrf	ISR@preint
  3035  03F4  07E0               	addwf	ISR@preint,f
  3036                           
  3037                           ;main.c: 281: if (ADCResult < 200) {
  3038  03F5  086A               	movf	_ADCResult+1,w
  3039  03F6  3A80               	xorlw	128
  3040  03F7  00FF               	movwf	127
  3041  03F8  3080               	movlw	128
  3042  03F9  027F               	subwf	127,w
  3043  03FA  1D03               	skipz
  3044  03FB  2BFE               	goto	u362_25
  3045  03FC  30C8               	movlw	200
  3046  03FD  0269               	subwf	_ADCResult,w
  3047  03FE                     u362_25:	
  3048  03FE  1803               	skipnc
  3049  03FF  2C04               	goto	i1l2834
  3050                           
  3051                           ;main.c: 282: PORTDbits.RD2 = 0;
  3052  0400  1283               	bcf	3,5	;RP0=0, select bank0
  3053  0401  1303               	bcf	3,6	;RP1=0, select bank0
  3054  0402  1108               	bcf	8,2	;volatile
  3055                           
  3056                           ;main.c: 283: PORTDbits.RD3 = 1;
  3057  0403  1588               	bsf	8,3	;volatile
  3058  0404                     i1l2834:	
  3059                           
  3060                           ;main.c: 284: }
  3061                           ;main.c: 286: if (ADCResult > 200) {
  3062  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0406  086A               	movf	_ADCResult+1,w
  3065  0407  3A80               	xorlw	128
  3066  0408  00FF               	movwf	127
  3067  0409  3080               	movlw	128
  3068  040A  027F               	subwf	127,w
  3069  040B  1D03               	skipz
  3070  040C  2C0F               	goto	u363_25
  3071  040D  30C9               	movlw	201
  3072  040E  0269               	subwf	_ADCResult,w
  3073  040F                     u363_25:	
  3074  040F  1C03               	skipc
  3075  0410  2C15               	goto	i1l2838
  3076                           
  3077                           ;main.c: 287: PORTDbits.RD2 = 1;
  3078  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3079  0412  1303               	bcf	3,6	;RP1=0, select bank0
  3080  0413  1508               	bsf	8,2	;volatile
  3081                           
  3082                           ;main.c: 288: PORTDbits.RD3 = 0;
  3083  0414  1188               	bcf	8,3	;volatile
  3084  0415                     i1l2838:	
  3085                           
  3086                           ;main.c: 289: }
  3087                           ;main.c: 291: progressBar(preint);
  3088  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0416  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0417  0861               	movf	ISR@preint+1,w
  3091  0418  01A1               	clrf	progressBar@preint+1
  3092  0419  07A1               	addwf	progressBar@preint+1,f
  3093  041A  0860               	movf	ISR@preint,w
  3094  041B  01A0               	clrf	progressBar@preint
  3095  041C  07A0               	addwf	progressBar@preint,f
  3096  041D  120A  158A  23E0  120A  118A  	fcall	_progressBar
  3097                           
  3098                           ;main.c: 293: PIR1bits.ADIF = 0;
  3099  0422  1283               	bcf	3,5	;RP0=0, select bank0
  3100  0423  1303               	bcf	3,6	;RP1=0, select bank0
  3101  0424  130C               	bcf	12,6	;volatile
  3102  0425                     i1l2842:	
  3103                           
  3104                           ;main.c: 294: }
  3105                           ;main.c: 296: if (PIR1bits.RCIF) {
  3106  0425  1E8C               	btfss	12,5	;volatile
  3107  0426  2C31               	goto	i1l132
  3108                           
  3109                           ;main.c: 298: active(USARTReceiveChar());
  3110  0427  120A  158A  20A2  120A  118A  	fcall	_USARTReceiveChar
  3111  042C  120A  158A  2139  120A  118A  	fcall	_active
  3112  0431                     i1l132:	
  3113  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3114  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3115  0433  0857               	movf	??_ISR+5,w
  3116  0434  00FF               	movwf	127
  3117  0435  0856               	movf	??_ISR+4,w
  3118  0436  008A               	movwf	10
  3119  0437  0855               	movf	??_ISR+3,w
  3120  0438  0084               	movwf	4
  3121  0439  0E54               	swapf	(??_ISR+2)^0,w
  3122  043A  0083               	movwf	3
  3123  043B  0EFE               	swapf	126,f
  3124  043C  0E7E               	swapf	126,w
  3125  043D  0009               	retfie
  3126  043E                     __end_of_ISR:	
  3127                           
  3128                           	psect	intentry
  3129  0004                     __pintentry:	
  3130                           ;incstack = 0
  3131 ;; hardware stack exceeded
  3132                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3133                           
  3134  0004                     interrupt_function:	
  3135  007E                     saved_w	set	btemp
  3136  0004  00FE               	movwf	btemp
  3137  0005  0E03               	swapf	3,w
  3138  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3140  0008  00D4               	movwf	??_ISR+2
  3141  0009  0804               	movf	4,w
  3142  000A  00D5               	movwf	??_ISR+3
  3143  000B  080A               	movf	10,w
  3144  000C  00D6               	movwf	??_ISR+4
  3145  000D  087F               	movf	btemp+1,w
  3146  000E  00D7               	movwf	??_ISR+5
  3147  000F  120A  118A  2A79   	ljmp	_ISR
  3148                           
  3149                           	psect	text14
  3150  0CC9                     __ptext14:	
  3151 ;; *************** function _sendString *****************
  3152 ;; Defined at:
  3153 ;;		line 184 in file "main.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  send            1    wreg     PTR const unsigned char 
  3156 ;;		 -> ftoa@buf(17), 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  send            1   41[BANK0 ] PTR const unsigned char 
  3159 ;;		 -> ftoa@buf(17), 
  3160 ;;  array          40    0[BANK0 ] unsigned char [40]
  3161 ;;  x               2   42[BANK0 ] int 
  3162 ;;  envio           1   40[BANK0 ] PTR unsigned char 
  3163 ;;		 -> sendString@array(40), 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;		None               void
  3166 ;; Registers used:
  3167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3173 ;;      Params:         0       0       0       0       0
  3174 ;;      Locals:         0      44       0       0       0
  3175 ;;      Temps:          1       0       0       0       0
  3176 ;;      Totals:         1      44       0       0       0
  3177 ;;Total ram usage:       45 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    2
  3180 ;; This function calls:
  3181 ;;		i1_USARTWriteString
  3182 ;; This function is called by:
  3183 ;;		_ISR
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _sendString
  3189  0CC9                     _sendString:	
  3190                           
  3191                           ;incstack = 0
  3192 ;; hardware stack exceeded
  3193                           ; Regs used in _sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3194                           ;sendString@send stored from wreg
  3195  0CC9  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0CCA  1303               	bcf	3,6	;RP1=0, select bank0
  3197  0CCB  00C9               	movwf	sendString@send
  3198                           
  3199                           ;main.c: 185: int x = 0;
  3200  0CCC  01CA               	clrf	sendString@x
  3201  0CCD  01CB               	clrf	sendString@x+1
  3202  0CCE                     i1l2562:	
  3203                           ;main.c: 186: char array[40];
  3204                           ;main.c: 187: char * envio;
  3205                           ;main.c: 189: while (*send != '\0') {
  3206                           
  3207  0CCE  0849               	movf	sendString@send,w
  3208  0CCF  0084               	movwf	4
  3209  0CD0  1383               	bcf	3,7	;select IRP bank0
  3210  0CD1  0880               	movf	0,f
  3211  0CD2  1903               	btfsc	3,2
  3212  0CD3  2D01               	goto	i1l2564
  3213                           
  3214                           ;main.c: 190: if (x == 0) {
  3215  0CD4  084B               	movf	sendString@x+1,w
  3216  0CD5  044A               	iorwf	sendString@x,w
  3217  0CD6  1D03               	skipz
  3218  0CD7  2CEC               	goto	i1l2556
  3219                           
  3220                           ;main.c: 191: if (recipiente == 0) {
  3221  0CD8  086C               	movf	_recipiente+1,w
  3222  0CD9  046B               	iorwf	_recipiente,w
  3223  0CDA  1D03               	skipz
  3224  0CDB  2CDE               	goto	i1l2550
  3225                           
  3226                           ;main.c: 192: array[x] = 'S';
  3227  0CDC  3053               	movlw	83
  3228  0CDD  2CE4               	goto	L2
  3229  0CDE                     i1l2550:	
  3230                           ;main.c: 193: } else if (recipiente == 1) {
  3231                           
  3232  0CDE  3001               	movlw	1
  3233  0CDF  066B               	xorwf	_recipiente,w
  3234  0CE0  046C               	iorwf	_recipiente+1,w
  3235  0CE1  1D03               	skipz
  3236  0CE2  2CFA               	goto	i1l2560
  3237                           
  3238                           ;main.c: 194: array[x] = 'I';
  3239  0CE3  3049               	movlw	73
  3240  0CE4                     L2:	
  3241  0CE4  00F3               	movwf	??_sendString
  3242  0CE5  084A               	movf	sendString@x,w
  3243  0CE6  3E20               	addlw	sendString@array& (0+255)
  3244  0CE7  0084               	movwf	4
  3245  0CE8  0873               	movf	??_sendString,w
  3246  0CE9  1383               	bcf	3,7	;select IRP bank0
  3247  0CEA  0080               	movwf	0
  3248  0CEB  2CFA               	goto	i1l2560
  3249  0CEC                     i1l2556:	
  3250                           ;main.c: 197: } else {
  3251                           
  3252                           ;main.c: 195: }
  3253                           ;main.c: 196: x++;
  3254                           
  3255                           
  3256                           ;main.c: 198: array[x] = *send;
  3257  0CEC  0849               	movf	sendString@send,w
  3258  0CED  0084               	movwf	4
  3259  0CEE  1383               	bcf	3,7	;select IRP bank0
  3260  0CEF  0800               	movf	0,w
  3261  0CF0  00F3               	movwf	??_sendString
  3262  0CF1  084A               	movf	sendString@x,w
  3263  0CF2  3E20               	addlw	sendString@array& (0+255)
  3264  0CF3  0084               	movwf	4
  3265  0CF4  0873               	movf	??_sendString,w
  3266  0CF5  0080               	movwf	0
  3267                           
  3268                           ;main.c: 199: send++;
  3269  0CF6  3001               	movlw	1
  3270  0CF7  00F3               	movwf	??_sendString
  3271  0CF8  0873               	movf	??_sendString,w
  3272  0CF9  07C9               	addwf	sendString@send,f
  3273  0CFA                     i1l2560:	
  3274                           
  3275                           ;main.c: 200: x++;
  3276  0CFA  3001               	movlw	1
  3277  0CFB  07CA               	addwf	sendString@x,f
  3278  0CFC  1803               	skipnc
  3279  0CFD  0ACB               	incf	sendString@x+1,f
  3280  0CFE  3000               	movlw	0
  3281  0CFF  07CB               	addwf	sendString@x+1,f
  3282  0D00  2CCE               	goto	i1l2562
  3283  0D01                     i1l2564:	
  3284                           
  3285                           ;main.c: 201: }
  3286                           ;main.c: 202: }
  3287                           ;main.c: 204: if (x < 39) {
  3288  0D01  084B               	movf	sendString@x+1,w
  3289  0D02  3A80               	xorlw	128
  3290  0D03  00FF               	movwf	127
  3291  0D04  3080               	movlw	128
  3292  0D05  027F               	subwf	127,w
  3293  0D06  1D03               	skipz
  3294  0D07  2D0A               	goto	u329_25
  3295  0D08  3027               	movlw	39
  3296  0D09  024A               	subwf	sendString@x,w
  3297  0D0A                     u329_25:	
  3298  0D0A  1803               	skipnc
  3299  0D0B  2D13               	goto	i1l2568
  3300                           
  3301                           ;main.c: 205: array[x] = '\0';
  3302  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0D0E  084A               	movf	sendString@x,w
  3305  0D0F  3E20               	addlw	sendString@array& (0+255)
  3306  0D10  0084               	movwf	4
  3307  0D11  1383               	bcf	3,7	;select IRP bank0
  3308  0D12  0180               	clrf	0
  3309  0D13                     i1l2568:	
  3310                           
  3311                           ;main.c: 206: }
  3312                           ;main.c: 208: envio = &array;
  3313  0D13  3020               	movlw	sendString@array& (0+255)
  3314  0D14  00F3               	movwf	??_sendString
  3315  0D15  0873               	movf	??_sendString,w
  3316  0D16  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0D17  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0D18  00C8               	movwf	sendString@envio
  3319                           
  3320                           ;main.c: 209: USARTWriteString(envio);
  3321  0D19  0848               	movf	sendString@envio,w
  3322  0D1A  00F1               	movwf	i1USARTWriteString@str
  3323  0D1B  3000               	movlw	0
  3324  0D1C  00F2               	movwf	i1USARTWriteString@str+1
  3325  0D1D  120A  158A  2116   	fcall	i1_USARTWriteString
  3326  0D20  0008               	return
  3327  0D21                     __end_of_sendString:	
  3328                           
  3329                           	psect	text15
  3330  0BE0                     __ptext15:	
  3331 ;; *************** function _progressBar *****************
  3332 ;; Defined at:
  3333 ;;		line 216 in file "main.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  preint          2    0[BANK0 ] int 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  aux            16    6[BANK0 ] unsigned char [16]
  3338 ;;  i               2   22[BANK0 ] int 
  3339 ;;  result          1   24[BANK0 ] PTR unsigned char 
  3340 ;;		 -> progressBar@aux(16), 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;		None               void
  3343 ;; Registers used:
  3344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3350 ;;      Params:         0       2       0       0       0
  3351 ;;      Locals:         0      19       0       0       0
  3352 ;;      Temps:          0       4       0       0       0
  3353 ;;      Totals:         0      25       0       0       0
  3354 ;;Total ram usage:       25 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    5
  3357 ;; This function calls:
  3358 ;;		i1_lcd_escreve_string
  3359 ;; This function is called by:
  3360 ;;		_ISR
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           
  3365                           ;psect for function _progressBar
  3366  0BE0                     _progressBar:	
  3367                           
  3368                           ;main.c: 217: int i = 0;
  3369                           
  3370                           ;incstack = 0
  3371 ;; hardware stack exceeded
  3372                           ; Regs used in _progressBar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3373  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  3374  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  3375  0BE2  01B6               	clrf	progressBar@i
  3376  0BE3  01B7               	clrf	progressBar@i+1
  3377                           
  3378                           ;main.c: 218: unsigned char *result;
  3379                           ;main.c: 219: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
  3380                           ;main.c: 220: ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
  3381  0BE4  3026               	movlw	progressBar@aux& (0+255)
  3382  0BE5  0084               	movwf	4
  3383  0BE6  30CC               	movlw	low progressBar@F1341
  3384  0BE7  00A2               	movwf	??_progressBar
  3385  0BE8  0804               	movf	4,w
  3386  0BE9  00A3               	movwf	??_progressBar+1
  3387  0BEA  3010               	movlw	16
  3388  0BEB  00A4               	movwf	??_progressBar+2
  3389  0BEC                     u330_20:	
  3390  0BEC  0822               	movf	??_progressBar,w
  3391  0BED  0084               	movwf	4
  3392  0BEE  1383               	bcf	3,7	;select IRP bank1
  3393  0BEF  0800               	movf	0,w
  3394  0BF0  00A5               	movwf	??_progressBar+3
  3395  0BF1  0AA2               	incf	??_progressBar,f
  3396  0BF2  0823               	movf	??_progressBar+1,w
  3397  0BF3  0084               	movwf	4
  3398  0BF4  0825               	movf	??_progressBar+3,w
  3399  0BF5  0080               	movwf	0
  3400  0BF6  0AA3               	incf	??_progressBar+1,f
  3401  0BF7  0BA4               	decfsz	??_progressBar+2,f
  3402  0BF8  2BEC               	goto	u330_20
  3403  0BF9                     i1l2582:	
  3404                           ;main.c: 223: while (preint >= 0) {
  3405                           
  3406  0BF9  1BA1               	btfsc	progressBar@preint+1,7
  3407  0BFA  2C0F               	goto	i1l2584
  3408                           
  3409                           ;main.c: 224: aux[i] = 0xFF;
  3410  0BFB  30FF               	movlw	255
  3411  0BFC  00A2               	movwf	??_progressBar
  3412  0BFD  0836               	movf	progressBar@i,w
  3413  0BFE  3E26               	addlw	progressBar@aux& (0+255)
  3414  0BFF  0084               	movwf	4
  3415  0C00  0822               	movf	??_progressBar,w
  3416  0C01  0080               	movwf	0
  3417                           
  3418                           ;main.c: 225: preint--;
  3419  0C02  30FF               	movlw	255
  3420  0C03  07A0               	addwf	progressBar@preint,f
  3421  0C04  1803               	skipnc
  3422  0C05  0AA1               	incf	progressBar@preint+1,f
  3423  0C06  30FF               	movlw	255
  3424  0C07  07A1               	addwf	progressBar@preint+1,f
  3425                           
  3426                           ;main.c: 226: i++;
  3427  0C08  3001               	movlw	1
  3428  0C09  07B6               	addwf	progressBar@i,f
  3429  0C0A  1803               	skipnc
  3430  0C0B  0AB7               	incf	progressBar@i+1,f
  3431  0C0C  3000               	movlw	0
  3432  0C0D  07B7               	addwf	progressBar@i+1,f
  3433  0C0E  2BF9               	goto	i1l2582
  3434  0C0F                     i1l2584:	
  3435                           
  3436                           ;main.c: 227: }
  3437                           ;main.c: 228: result = &aux;
  3438  0C0F  3026               	movlw	progressBar@aux& (0+255)
  3439  0C10  00A2               	movwf	??_progressBar
  3440  0C11  0822               	movf	??_progressBar,w
  3441  0C12  00B8               	movwf	progressBar@result
  3442                           
  3443                           ;main.c: 229: lcd_escreve_string(result);
  3444  0C13  0838               	movf	progressBar@result,w
  3445  0C14  00FC               	movwf	i1lcd_escreve_string@y
  3446  0C15  3000               	movlw	0
  3447  0C16  00FD               	movwf	i1lcd_escreve_string@y+1
  3448  0C17  120A  158A  217F  120A  158A  	fcall	i1_lcd_escreve_string
  3449                           
  3450                           ;main.c: 230: _delay((unsigned long)((200)*(20000000/4000.0)));
  3451  0C1C  3006               	movlw	6
  3452  0C1D  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0C1E  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0C1F  00A4               	movwf	??_progressBar+2
  3455  0C20  3013               	movlw	19
  3456  0C21  00A3               	movwf	??_progressBar+1
  3457  0C22  30B1               	movlw	177
  3458  0C23  00A2               	movwf	??_progressBar
  3459  0C24                     u402_27:	
  3460  0C24  0BA2               	decfsz	??_progressBar,f
  3461  0C25  2C24               	goto	u402_27
  3462  0C26  0BA3               	decfsz	??_progressBar+1,f
  3463  0C27  2C24               	goto	u402_27
  3464  0C28  0BA4               	decfsz	??_progressBar+2,f
  3465  0C29  2C24               	goto	u402_27
  3466  0C2A  2C2B               	nop2
  3467  0C2B  0008               	return
  3468  0C2C                     __end_of_progressBar:	
  3469                           
  3470                           	psect	text16
  3471  097F                     __ptext16:	
  3472 ;; *************** function i1_lcd_escreve_string *****************
  3473 ;; Defined at:
  3474 ;;		line 168 in file "lcd_4bit.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  y               2   12[COMMON] PTR const unsigned char 
  3477 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  3478 ;;		 -> progressBar@aux(16), 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;		None               void
  3483 ;; Registers used:
  3484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3490 ;;      Params:         2       0       0       0       0
  3491 ;;      Locals:         0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0
  3493 ;;      Totals:         2       0       0       0       0
  3494 ;;Total ram usage:        2 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    4
  3497 ;; This function calls:
  3498 ;;		i1_lcd_putc
  3499 ;; This function is called by:
  3500 ;;		_progressBar
  3501 ;;		_ISR
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           
  3506                           ;psect for function i1_lcd_escreve_string
  3507  097F                     i1_lcd_escreve_string:	
  3508  097F                     i1l2480:	
  3509                           ;lcd_4bit.c: 170: while(*y!='\0')
  3510                           
  3511                           ;incstack = 0
  3512 ;; hardware stack exceeded
  3513                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3514                           
  3515  097F  087D               	movf	i1lcd_escreve_string@y+1,w
  3516  0980  1283               	bcf	3,5	;RP0=0, select bank0
  3517  0981  1303               	bcf	3,6	;RP1=0, select bank0
  3518  0982  00FF               	movwf	127
  3519  0983  087C               	movf	i1lcd_escreve_string@y,w
  3520  0984  0084               	movwf	4
  3521  0985  120A  158A  2000  120A  158A  	fcall	stringtab
  3522  098A  3800               	iorlw	0
  3523  098B  1903               	btfsc	3,2
  3524  098C  0008               	return
  3525                           
  3526                           ;lcd_4bit.c: 171: {
  3527                           ;lcd_4bit.c: 172: lcd_putc(*y);
  3528  098D  087D               	movf	i1lcd_escreve_string@y+1,w
  3529  098E  1283               	bcf	3,5	;RP0=0, select bank0
  3530  098F  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0990  00FF               	movwf	127
  3532  0991  087C               	movf	i1lcd_escreve_string@y,w
  3533  0992  0084               	movwf	4
  3534  0993  120A  158A  2000  120A  158A  	fcall	stringtab
  3535  0998  120A  158A  231E  120A  158A  	fcall	i1_lcd_putc
  3536                           
  3537                           ;lcd_4bit.c: 173: y++;
  3538  099D  3001               	movlw	1
  3539  099E  07FC               	addwf	i1lcd_escreve_string@y,f
  3540  099F  1803               	skipnc
  3541  09A0  0AFD               	incf	i1lcd_escreve_string@y+1,f
  3542  09A1  297F               	goto	i1l2480
  3543  09A2                     __end_ofi1_lcd_escreve_string:	
  3544                           
  3545                           	psect	text17
  3546  0B1E                     __ptext17:	
  3547 ;; *************** function i1_lcd_putc *****************
  3548 ;; Defined at:
  3549 ;;		line 82 in file "lcd_4bit.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  c               1    wreg     unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  c               1   11[COMMON] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;		None               void
  3556 ;; Registers used:
  3557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3563 ;;      Params:         0       0       0       0       0
  3564 ;;      Locals:         1       0       0       0       0
  3565 ;;      Temps:          2       0       0       0       0
  3566 ;;      Totals:         3       0       0       0       0
  3567 ;;Total ram usage:        3 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    3
  3570 ;; This function calls:
  3571 ;;		i1_lcd_envia_byte
  3572 ;;		i1_lcd_gotoxy
  3573 ;; This function is called by:
  3574 ;;		i1_lcd_escreve_string
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function i1_lcd_putc
  3580  0B1E                     i1_lcd_putc:	
  3581                           
  3582                           ;incstack = 0
  3583 ;; hardware stack exceeded
  3584                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3585                           ;i1lcd_putc@c stored from wreg
  3586  0B1E  00FB               	movwf	i1lcd_putc@c
  3587                           
  3588                           ;lcd_4bit.c: 84: switch(c)
  3589  0B1F  2B4D               	goto	i1l2162
  3590  0B20                     i1l2150:	
  3591                           ;lcd_4bit.c: 85: {
  3592                           ;lcd_4bit.c: 86: case '\f':
  3593                           
  3594                           
  3595                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  3596  0B20  01F2               	clrf	i1lcd_envia_byte@n
  3597  0B21  0AF2               	incf	i1lcd_envia_byte@n,f
  3598  0B22  3000               	movlw	0
  3599  0B23  120A  158A  21F6  120A  158A  	fcall	i1_lcd_envia_byte
  3600                           
  3601                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3602  0B28  300D               	movlw	13
  3603  0B29  00FA               	movwf	??i1_lcd_putc+1
  3604  0B2A  30FB               	movlw	251
  3605  0B2B  00F9               	movwf	??i1_lcd_putc
  3606  0B2C                     u403_27:	
  3607  0B2C  0BF9               	decfsz	??i1_lcd_putc,f
  3608  0B2D  2B2C               	goto	u403_27
  3609  0B2E  0BFA               	decfsz	??i1_lcd_putc+1,f
  3610  0B2F  2B2C               	goto	u403_27
  3611  0B30  2B31               	nop2
  3612                           
  3613                           ;lcd_4bit.c: 89: break;
  3614  0B31  0008               	return
  3615  0B32                     i1l2154:	
  3616                           ;lcd_4bit.c: 91: case '\n':
  3617                           
  3618                           
  3619                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  3620  0B32  3002               	movlw	2
  3621  0B33  00F9               	movwf	??i1_lcd_putc
  3622  0B34  0879               	movf	??i1_lcd_putc,w
  3623  0B35  00F5               	movwf	i1lcd_gotoxy@y
  3624  0B36  3001               	movlw	1
  3625  0B37  120A  158A  2088   	fcall	i1_lcd_gotoxy
  3626                           
  3627                           ;lcd_4bit.c: 93: break;
  3628  0B3A  0008               	return
  3629  0B3B                     i1l2156:	
  3630                           ;lcd_4bit.c: 95: case '\b':
  3631                           
  3632                           
  3633                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  3634  0B3B  3010               	movlw	16
  3635  0B3C  00F9               	movwf	??i1_lcd_putc
  3636  0B3D  0879               	movf	??i1_lcd_putc,w
  3637  0B3E  00F2               	movwf	i1lcd_envia_byte@n
  3638  0B3F  3000               	movlw	0
  3639  0B40  120A  158A  21F6   	fcall	i1_lcd_envia_byte
  3640                           
  3641                           ;lcd_4bit.c: 97: break;
  3642  0B43  0008               	return
  3643  0B44                     i1l2158:	
  3644                           ;lcd_4bit.c: 99: default:
  3645                           
  3646                           
  3647                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  3648  0B44  087B               	movf	i1lcd_putc@c,w
  3649  0B45  00F9               	movwf	??i1_lcd_putc
  3650  0B46  0879               	movf	??i1_lcd_putc,w
  3651  0B47  00F2               	movwf	i1lcd_envia_byte@n
  3652  0B48  3001               	movlw	1
  3653  0B49  120A  158A  21F6   	fcall	i1_lcd_envia_byte
  3654                           
  3655                           ;lcd_4bit.c: 102: }
  3656                           
  3657                           ;lcd_4bit.c: 101: break;
  3658  0B4C  0008               	return
  3659  0B4D                     i1l2162:	
  3660  0B4D  087B               	movf	i1lcd_putc@c,w
  3661                           
  3662                           ; Switch size 1, requested type "space"
  3663                           ; Number of cases is 3, Range of values is 8 to 12
  3664                           ; switch strategies available:
  3665                           ; Name         Instructions Cycles
  3666                           ; simple_byte           10     6 (average)
  3667                           ; direct_byte           26    11 (fixed)
  3668                           ; jumptable            263     9 (fixed)
  3669                           ;	Chosen strategy is simple_byte
  3670  0B4E  3A08               	xorlw	8	; case 8
  3671  0B4F  1903               	skipnz
  3672  0B50  2B3B               	goto	i1l2156
  3673  0B51  3A02               	xorlw	2	; case 10
  3674  0B52  1903               	skipnz
  3675  0B53  2B32               	goto	i1l2154
  3676  0B54  3A06               	xorlw	6	; case 12
  3677  0B55  1903               	skipnz
  3678  0B56  2B20               	goto	i1l2150
  3679  0B57  2B44               	goto	i1l2158
  3680  0B58  0008               	return
  3681  0B59                     __end_ofi1_lcd_putc:	
  3682                           
  3683                           	psect	text18
  3684  0888                     __ptext18:	
  3685 ;; *************** function i1_lcd_gotoxy *****************
  3686 ;; Defined at:
  3687 ;;		line 70 in file "lcd_4bit.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  x               1    wreg     unsigned char 
  3690 ;;  y               1    5[COMMON] unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  x               1    7[COMMON] unsigned char 
  3693 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;		None               void
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0, pclath, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3703 ;;      Params:         1       0       0       0       0
  3704 ;;      Locals:         2       0       0       0       0
  3705 ;;      Temps:          1       0       0       0       0
  3706 ;;      Totals:         4       0       0       0       0
  3707 ;;Total ram usage:        4 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    2
  3710 ;; This function calls:
  3711 ;;		i1_lcd_envia_byte
  3712 ;; This function is called by:
  3713 ;;		_ISR
  3714 ;;		i1_lcd_putc
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function i1_lcd_gotoxy
  3720  0888                     i1_lcd_gotoxy:	
  3721                           
  3722                           ;incstack = 0
  3723 ;; hardware stack exceeded
  3724                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  3725                           ;i1lcd_gotoxy@x stored from wreg
  3726  0888  00F7               	movwf	i1lcd_gotoxy@x
  3727                           
  3728                           ;lcd_4bit.c: 72: unsigned char address;
  3729                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  3730  0889  0875               	movf	i1lcd_gotoxy@y,w
  3731  088A  3A01               	xorlw	1
  3732  088B  1903               	skipnz
  3733  088C  2892               	goto	i1l1978
  3734  088D  3040               	movlw	64
  3735  088E  00F6               	movwf	??i1_lcd_gotoxy
  3736  088F  0876               	movf	??i1_lcd_gotoxy,w
  3737  0890  00F8               	movwf	i1lcd_gotoxy@address
  3738  0891  2893               	goto	i1l1980
  3739  0892                     i1l1978:	
  3740                           
  3741                           ;lcd_4bit.c: 75: else address=0;
  3742  0892  01F8               	clrf	i1lcd_gotoxy@address
  3743  0893                     i1l1980:	
  3744                           
  3745                           ;lcd_4bit.c: 77: address += x-1;
  3746  0893  0877               	movf	i1lcd_gotoxy@x,w
  3747  0894  3EFF               	addlw	255
  3748  0895  00F6               	movwf	??i1_lcd_gotoxy
  3749  0896  0876               	movf	??i1_lcd_gotoxy,w
  3750  0897  07F8               	addwf	i1lcd_gotoxy@address,f
  3751                           
  3752                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  3753  0898  0878               	movf	i1lcd_gotoxy@address,w
  3754  0899  3880               	iorlw	128
  3755  089A  00F6               	movwf	??i1_lcd_gotoxy
  3756  089B  0876               	movf	??i1_lcd_gotoxy,w
  3757  089C  00F2               	movwf	i1lcd_envia_byte@n
  3758  089D  3000               	movlw	0
  3759  089E  120A  158A  21F6   	fcall	i1_lcd_envia_byte
  3760  08A1  0008               	return
  3761  08A2                     __end_ofi1_lcd_gotoxy:	
  3762                           
  3763                           	psect	text19
  3764  09F6                     __ptext19:	
  3765 ;; *************** function i1_lcd_envia_byte *****************
  3766 ;; Defined at:
  3767 ;;		line 53 in file "lcd_4bit.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;  address         1    wreg     unsigned char 
  3770 ;;  n               1    2[COMMON] unsigned char 
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;  address         1    4[COMMON] unsigned char 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;		None               void
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, pclath, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         1       0       0       0       0
  3783 ;;      Locals:         1       0       0       0       0
  3784 ;;      Temps:          1       0       0       0       0
  3785 ;;      Totals:         3       0       0       0       0
  3786 ;;Total ram usage:        3 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    1
  3789 ;; This function calls:
  3790 ;;		i1_lcd_envia_nibble
  3791 ;; This function is called by:
  3792 ;;		i1_lcd_gotoxy
  3793 ;;		i1_lcd_putc
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function i1_lcd_envia_byte
  3799  09F6                     i1_lcd_envia_byte:	
  3800                           
  3801                           ;incstack = 0
  3802 ;; hardware stack exceeded
  3803                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  3804                           ;i1lcd_envia_byte@address stored from wreg
  3805  09F6  00F4               	movwf	i1lcd_envia_byte@address
  3806                           
  3807                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  3808  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  3809  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  3810  09F9  1286               	bcf	6,5	;volatile
  3811                           
  3812                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  3813  09FA  3063               	movlw	99
  3814  09FB  00F3               	movwf	??i1_lcd_envia_byte
  3815  09FC                     u404_27:	
  3816  09FC  0BF3               	decfsz	??i1_lcd_envia_byte,f
  3817  09FD  29FC               	goto	u404_27
  3818  09FE  29FF               	nop2	;nop
  3819                           
  3820                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  3821  09FF  0874               	movf	i1lcd_envia_byte@address,w
  3822  0A00  1903               	btfsc	3,2
  3823  0A01  2A06               	goto	i1l176
  3824  0A02  1283               	bcf	3,5	;RP0=0, select bank0
  3825  0A03  1303               	bcf	3,6	;RP1=0, select bank0
  3826  0A04  1686               	bsf	6,5	;volatile
  3827  0A05  2A09               	goto	i1l177
  3828  0A06                     i1l176:	
  3829                           
  3830                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  3831  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  3833  0A08  1286               	bcf	6,5	;volatile
  3834  0A09                     i1l177:	
  3835                           
  3836                           ;lcd_4bit.c: 61: _delay(1);
  3837  0A09  0000               	nop
  3838                           
  3839                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  3840  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  3841  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  3842  0A0C  1206               	bcf	6,4	;volatile
  3843                           
  3844                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  3845  0A0D  0872               	movf	i1lcd_envia_byte@n,w
  3846  0A0E  00F3               	movwf	??i1_lcd_envia_byte
  3847  0A0F  3004               	movlw	4
  3848  0A10                     u199_25:	
  3849  0A10  1003               	clrc
  3850  0A11  0CF3               	rrf	??i1_lcd_envia_byte,f
  3851  0A12  3EFF               	addlw	-1
  3852  0A13  1D03               	skipz
  3853  0A14  2A10               	goto	u199_25
  3854  0A15  0873               	movf	??i1_lcd_envia_byte,w
  3855  0A16  120A  158A  22E5  120A  158A  	fcall	i1_lcd_envia_nibble
  3856                           
  3857                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  3858  0A1B  0872               	movf	i1lcd_envia_byte@n,w
  3859  0A1C  390F               	andlw	15
  3860  0A1D  120A  158A  22E5   	fcall	i1_lcd_envia_nibble
  3861  0A20  0008               	return
  3862  0A21                     __end_ofi1_lcd_envia_byte:	
  3863                           
  3864                           	psect	text20
  3865  0AE5                     __ptext20:	
  3866 ;; *************** function i1_lcd_envia_nibble *****************
  3867 ;; Defined at:
  3868 ;;		line 39 in file "lcd_4bit.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  n               1    wreg     unsigned char 
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  n               1    1[COMMON] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;		None               void
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3882 ;;      Params:         0       0       0       0       0
  3883 ;;      Locals:         1       0       0       0       0
  3884 ;;      Temps:          1       0       0       0       0
  3885 ;;      Totals:         2       0       0       0       0
  3886 ;;Total ram usage:        2 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		i1_lcd_envia_byte
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           
  3896                           ;psect for function i1_lcd_envia_nibble
  3897  0AE5                     i1_lcd_envia_nibble:	
  3898                           
  3899                           ;incstack = 0
  3900 ;; hardware stack exceeded
  3901                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  3902                           ;i1lcd_envia_nibble@n stored from wreg
  3903  0AE5  00F1               	movwf	i1lcd_envia_nibble@n
  3904                           
  3905                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  3906  0AE6  3000               	movlw	0
  3907  0AE7  1871               	btfsc	i1lcd_envia_nibble@n,0
  3908  0AE8  3001               	movlw	1
  3909  0AE9  00F0               	movwf	??i1_lcd_envia_nibble
  3910  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
  3912  0AEC  0806               	movf	6,w	;volatile
  3913  0AED  0670               	xorwf	??i1_lcd_envia_nibble,w
  3914  0AEE  39FE               	andlw	-2
  3915  0AEF  0670               	xorwf	??i1_lcd_envia_nibble,w
  3916  0AF0  0086               	movwf	6	;volatile
  3917                           
  3918                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  3919  0AF1  3000               	movlw	0
  3920  0AF2  18F1               	btfsc	i1lcd_envia_nibble@n,1
  3921  0AF3  3001               	movlw	1
  3922  0AF4  00F0               	movwf	??i1_lcd_envia_nibble
  3923  0AF5  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3924  0AF6  0806               	movf	6,w	;volatile
  3925  0AF7  0670               	xorwf	??i1_lcd_envia_nibble,w
  3926  0AF8  39FD               	andlw	-3
  3927  0AF9  0670               	xorwf	??i1_lcd_envia_nibble,w
  3928  0AFA  0086               	movwf	6	;volatile
  3929                           
  3930                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  3931  0AFB  3000               	movlw	0
  3932  0AFC  1971               	btfsc	i1lcd_envia_nibble@n,2
  3933  0AFD  3001               	movlw	1
  3934  0AFE  00F0               	movwf	??i1_lcd_envia_nibble
  3935  0AFF  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3936  0B00  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3937  0B01  0806               	movf	6,w	;volatile
  3938  0B02  0670               	xorwf	??i1_lcd_envia_nibble,w
  3939  0B03  39FB               	andlw	-5
  3940  0B04  0670               	xorwf	??i1_lcd_envia_nibble,w
  3941  0B05  0086               	movwf	6	;volatile
  3942                           
  3943                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  3944  0B06  3000               	movlw	0
  3945  0B07  19F1               	btfsc	i1lcd_envia_nibble@n,3
  3946  0B08  3001               	movlw	1
  3947  0B09  00F0               	movwf	??i1_lcd_envia_nibble
  3948  0B0A  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3949  0B0B  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3950  0B0C  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3951  0B0D  0806               	movf	6,w	;volatile
  3952  0B0E  0670               	xorwf	??i1_lcd_envia_nibble,w
  3953  0B0F  39F7               	andlw	-9
  3954  0B10  0670               	xorwf	??i1_lcd_envia_nibble,w
  3955  0B11  0086               	movwf	6	;volatile
  3956                           
  3957                           ;lcd_4bit.c: 46: _delay(1);
  3958  0B12  0000               	nop
  3959                           
  3960                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  3961  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  3962  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  3963  0B15  1606               	bsf	6,4	;volatile
  3964                           
  3965                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  3966  0B16  3003               	movlw	3
  3967  0B17  00F0               	movwf	??i1_lcd_envia_nibble
  3968  0B18                     u405_27:	
  3969  0B18  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  3970  0B19  2B18               	goto	u405_27
  3971                           
  3972                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  3973  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  3974  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  3975  0B1C  1206               	bcf	6,4	;volatile
  3976  0B1D  0008               	return
  3977  0B1E                     __end_ofi1_lcd_envia_nibble:	
  3978                           
  3979                           	psect	text21
  3980  0618                     __ptext21:	
  3981 ;; *************** function _ftoa *****************
  3982 ;; Defined at:
  3983 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftoa.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  f               3   36[BANK0 ] float 
  3986 ;;  status          1   39[BANK0 ] PTR int 
  3987 ;;		 -> ISR@status2(2), ISR@status(2), 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;  l               4   45[BANK0 ] unsigned long 
  3990 ;;  rem             4   41[BANK0 ] unsigned long 
  3991 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  3992 ;;		 -> ftoa@buf(17), 
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      PTR unsigned char 
  3995 ;; Registers used:
  3996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4002 ;;      Params:         0       4       0       0       0
  4003 ;;      Locals:         0       9       0       0       0
  4004 ;;      Temps:          0       1       0       0       0
  4005 ;;      Totals:         0      14       0       0       0
  4006 ;;Total ram usage:       14 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    3
  4009 ;; This function calls:
  4010 ;;		___ftge
  4011 ;;		___ftmul
  4012 ;;		___ftneg
  4013 ;;		___ftsub
  4014 ;;		___fttol
  4015 ;;		___lltoft
  4016 ;;		_sprintf
  4017 ;; This function is called by:
  4018 ;;		_ISR
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _ftoa
  4024  0618                     _ftoa:	
  4025                           
  4026                           ;incstack = 0
  4027 ;; hardware stack exceeded
  4028                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4029  0618  30A7               	movlw	ftoa@buf& (0+255)
  4030  0619  1283               	bcf	3,5	;RP0=0, select bank0
  4031  061A  1303               	bcf	3,6	;RP1=0, select bank0
  4032  061B  00C8               	movwf	??_ftoa
  4033  061C  0848               	movf	??_ftoa,w
  4034  061D  00D1               	movwf	ftoa@cp
  4035  061E  0844               	movf	ftoa@f,w
  4036  061F  00F0               	movwf	___ftge@ff1
  4037  0620  0845               	movf	ftoa@f+1,w
  4038  0621  00F1               	movwf	___ftge@ff1+1
  4039  0622  0846               	movf	ftoa@f+2,w
  4040  0623  00F2               	movwf	___ftge@ff1+2
  4041  0624  3000               	movlw	0
  4042  0625  00F3               	movwf	___ftge@ff2
  4043  0626  3000               	movlw	0
  4044  0627  00F4               	movwf	___ftge@ff2+1
  4045  0628  3000               	movlw	0
  4046  0629  00F5               	movwf	___ftge@ff2+2
  4047  062A  120A  158A  25D5  120A  118A  	fcall	___ftge
  4048  062F  1803               	btfsc	3,0
  4049  0630  2E51               	goto	i1l2600
  4050  0631  302D               	movlw	45
  4051  0632  1283               	bcf	3,5	;RP0=0, select bank0
  4052  0633  1303               	bcf	3,6	;RP1=0, select bank0
  4053  0634  00C8               	movwf	??_ftoa
  4054  0635  0851               	movf	ftoa@cp,w
  4055  0636  0084               	movwf	4
  4056  0637  0848               	movf	??_ftoa,w
  4057  0638  1383               	bcf	3,7	;select IRP bank0
  4058  0639  0080               	movwf	0
  4059  063A  3001               	movlw	1
  4060  063B  00C8               	movwf	??_ftoa
  4061  063C  0848               	movf	??_ftoa,w
  4062  063D  07D1               	addwf	ftoa@cp,f
  4063  063E  0844               	movf	ftoa@f,w
  4064  063F  00F0               	movwf	___ftneg@f1
  4065  0640  0845               	movf	ftoa@f+1,w
  4066  0641  00F1               	movwf	___ftneg@f1+1
  4067  0642  0846               	movf	ftoa@f+2,w
  4068  0643  00F2               	movwf	___ftneg@f1+2
  4069  0644  160A  118A  27AF  120A  118A  	fcall	___ftneg
  4070  0649  0870               	movf	?___ftneg,w
  4071  064A  1283               	bcf	3,5	;RP0=0, select bank0
  4072  064B  1303               	bcf	3,6	;RP1=0, select bank0
  4073  064C  00C4               	movwf	ftoa@f
  4074  064D  0871               	movf	?___ftneg+1,w
  4075  064E  00C5               	movwf	ftoa@f+1
  4076  064F  0872               	movf	?___ftneg+2,w
  4077  0650  00C6               	movwf	ftoa@f+2
  4078  0651                     i1l2600:	
  4079  0651  1283               	bcf	3,5	;RP0=0, select bank0
  4080  0652  1303               	bcf	3,6	;RP1=0, select bank0
  4081  0653  0844               	movf	ftoa@f,w
  4082  0654  00B0               	movwf	___fttol@f1
  4083  0655  0845               	movf	ftoa@f+1,w
  4084  0656  00B1               	movwf	___fttol@f1+1
  4085  0657  0846               	movf	ftoa@f+2,w
  4086  0658  00B2               	movwf	___fttol@f1+2
  4087  0659  120A  158A  2772  120A  118A  	fcall	___fttol
  4088  065E  1283               	bcf	3,5	;RP0=0, select bank0
  4089  065F  1303               	bcf	3,6	;RP1=0, select bank0
  4090  0660  0833               	movf	?___fttol+3,w
  4091  0661  00D0               	movwf	ftoa@l+3
  4092  0662  0832               	movf	?___fttol+2,w
  4093  0663  00CF               	movwf	ftoa@l+2
  4094  0664  0831               	movf	?___fttol+1,w
  4095  0665  00CE               	movwf	ftoa@l+1
  4096  0666  0830               	movf	?___fttol,w
  4097  0667  00CD               	movwf	ftoa@l
  4098  0668  0850               	movf	ftoa@l+3,w
  4099  0669  00FB               	movwf	___lltoft@c+3
  4100  066A  084F               	movf	ftoa@l+2,w
  4101  066B  00FA               	movwf	___lltoft@c+2
  4102  066C  084E               	movf	ftoa@l+1,w
  4103  066D  00F9               	movwf	___lltoft@c+1
  4104  066E  084D               	movf	ftoa@l,w
  4105  066F  00F8               	movwf	___lltoft@c
  4106  0670  120A  158A  21CB  120A  118A  	fcall	___lltoft
  4107  0675  0878               	movf	?___lltoft,w
  4108  0676  1283               	bcf	3,5	;RP0=0, select bank0
  4109  0677  1303               	bcf	3,6	;RP1=0, select bank0
  4110  0678  00A7               	movwf	___ftsub@f2
  4111  0679  0879               	movf	?___lltoft+1,w
  4112  067A  00A8               	movwf	___ftsub@f2+1
  4113  067B  087A               	movf	?___lltoft+2,w
  4114  067C  00A9               	movwf	___ftsub@f2+2
  4115  067D  0844               	movf	ftoa@f,w
  4116  067E  00AA               	movwf	___ftsub@f1
  4117  067F  0845               	movf	ftoa@f+1,w
  4118  0680  00AB               	movwf	___ftsub@f1+1
  4119  0681  0846               	movf	ftoa@f+2,w
  4120  0682  00AC               	movwf	___ftsub@f1+2
  4121  0683  120A  158A  20BD  120A  118A  	fcall	___ftsub
  4122  0688  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0689  1303               	bcf	3,6	;RP1=0, select bank0
  4124  068A  0827               	movf	?___ftsub,w
  4125  068B  00C4               	movwf	ftoa@f
  4126  068C  0828               	movf	?___ftsub+1,w
  4127  068D  00C5               	movwf	ftoa@f+1
  4128  068E  0829               	movf	?___ftsub+2,w
  4129  068F  00C6               	movwf	ftoa@f+2
  4130  0690  0844               	movf	ftoa@f,w
  4131  0691  00A3               	movwf	___ftmul@f2
  4132  0692  0845               	movf	ftoa@f+1,w
  4133  0693  00A4               	movwf	___ftmul@f2+1
  4134  0694  0846               	movf	ftoa@f+2,w
  4135  0695  00A5               	movwf	___ftmul@f2+2
  4136  0696  3024               	movlw	36
  4137  0697  00A0               	movwf	___ftmul@f1
  4138  0698  3074               	movlw	116
  4139  0699  00A1               	movwf	___ftmul@f1+1
  4140  069A  3049               	movlw	73
  4141  069B  00A2               	movwf	___ftmul@f1+2
  4142  069C  120A  118A  2545  120A  118A  	fcall	___ftmul
  4143  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  4144  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  4145  06A3  0820               	movf	?___ftmul,w
  4146  06A4  00B0               	movwf	___fttol@f1
  4147  06A5  0821               	movf	?___ftmul+1,w
  4148  06A6  00B1               	movwf	___fttol@f1+1
  4149  06A7  0822               	movf	?___ftmul+2,w
  4150  06A8  00B2               	movwf	___fttol@f1+2
  4151  06A9  120A  158A  2772  120A  118A  	fcall	___fttol
  4152  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  4153  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  4154  06B0  0833               	movf	?___fttol+3,w
  4155  06B1  00CC               	movwf	ftoa@rem+3
  4156  06B2  0832               	movf	?___fttol+2,w
  4157  06B3  00CB               	movwf	ftoa@rem+2
  4158  06B4  0831               	movf	?___fttol+1,w
  4159  06B5  00CA               	movwf	ftoa@rem+1
  4160  06B6  0830               	movf	?___fttol,w
  4161  06B7  00C9               	movwf	ftoa@rem
  4162  06B8  3065               	movlw	(STR_6-__stringbase)& (0+255)
  4163  06B9  00C8               	movwf	??_ftoa
  4164  06BA  0848               	movf	??_ftoa,w
  4165  06BB  00AA               	movwf	sprintf@f
  4166  06BC  0850               	movf	ftoa@l+3,w
  4167  06BD  00AE               	movwf	?_sprintf+4
  4168  06BE  084F               	movf	ftoa@l+2,w
  4169  06BF  00AD               	movwf	?_sprintf+3
  4170  06C0  084E               	movf	ftoa@l+1,w
  4171  06C1  00AC               	movwf	?_sprintf+2
  4172  06C2  084D               	movf	ftoa@l,w
  4173  06C3  00AB               	movwf	?_sprintf+1
  4174  06C4  084C               	movf	ftoa@rem+3,w
  4175  06C5  00B2               	movwf	?_sprintf+8
  4176  06C6  084B               	movf	ftoa@rem+2,w
  4177  06C7  00B1               	movwf	?_sprintf+7
  4178  06C8  084A               	movf	ftoa@rem+1,w
  4179  06C9  00B0               	movwf	?_sprintf+6
  4180  06CA  0849               	movf	ftoa@rem,w
  4181  06CB  00AF               	movwf	?_sprintf+5
  4182  06CC  0851               	movf	ftoa@cp,w
  4183  06CD  120A  118A  203D   	fcall	_sprintf
  4184  06D0  30A7               	movlw	ftoa@buf& (0+255)
  4185  06D1  0008               	return
  4186  06D2                     __end_of_ftoa:	
  4187                           
  4188                           	psect	text22
  4189  003D                     __ptext22:	
  4190 ;; *************** function _sprintf *****************
  4191 ;; Defined at:
  4192 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  sp              1    wreg     PTR unsigned char 
  4195 ;;		 -> ftoa@buf(17), 
  4196 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4197 ;;		 -> STR_6(11), 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4200 ;;		 -> ftoa@buf(17), 
  4201 ;;  _val            4   26[BANK0 ] struct .
  4202 ;;  prec            2   33[BANK0 ] int 
  4203 ;;  width           2   31[BANK0 ] int 
  4204 ;;  c               1   35[BANK0 ] char 
  4205 ;;  ap              1   25[BANK0 ] PTR void [1]
  4206 ;;		 -> ?_sprintf(2), 
  4207 ;;  flag            1   24[BANK0 ] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  2   10[BANK0 ] int 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4217 ;;      Params:         0       9       0       0       0
  4218 ;;      Locals:         0      12       0       0       0
  4219 ;;      Temps:          0       5       0       0       0
  4220 ;;      Totals:         0      26       0       0       0
  4221 ;;Total ram usage:       26 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    1
  4224 ;; This function calls:
  4225 ;;		___lldiv
  4226 ;;		___llmod
  4227 ;;		___wmul
  4228 ;;		_isdigit
  4229 ;; This function is called by:
  4230 ;;		_ftoa
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           
  4235                           ;psect for function _sprintf
  4236  003D                     _sprintf:	
  4237                           
  4238                           ;incstack = 0
  4239 ;; hardware stack exceeded
  4240                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4241                           ;sprintf@sp stored from wreg
  4242  003D  1283               	bcf	3,5	;RP0=0, select bank0
  4243  003E  1303               	bcf	3,6	;RP1=0, select bank0
  4244  003F  00BE               	movwf	sprintf@sp
  4245                           
  4246                           ;doprnt.c: 494: va_list ap;
  4247                           ;doprnt.c: 499: signed char c;
  4248                           ;doprnt.c: 501: int width;
  4249                           ;doprnt.c: 504: int prec;
  4250                           ;doprnt.c: 508: unsigned char flag;
  4251                           ;doprnt.c: 527: union {
  4252                           ;doprnt.c: 528: unsigned long _val;
  4253                           ;doprnt.c: 529: struct {
  4254                           ;doprnt.c: 530: const char * _cp;
  4255                           ;doprnt.c: 531: unsigned _len;
  4256                           ;doprnt.c: 532: } _str;
  4257                           ;doprnt.c: 533: } _val;
  4258                           ;doprnt.c: 542: *ap = __va_start();
  4259  0040  302B               	movlw	(?_sprintf+1)& (0+255)
  4260  0041  00B3               	movwf	??_sprintf
  4261  0042  0833               	movf	??_sprintf,w
  4262  0043  00B9               	movwf	sprintf@ap
  4263  0044                     i1l2322:	
  4264                           ;doprnt.c: 545: while(c = *f++) {
  4265                           
  4266  0044  3001               	movlw	1
  4267  0045  07AA               	addwf	sprintf@f,f
  4268  0046  30FF               	movlw	-1
  4269  0047  072A               	addwf	sprintf@f,w
  4270  0048  0084               	movwf	4
  4271  0049  120A  158A  200A  120A  118A  	fcall	stringdir
  4272  004E  00B3               	movwf	??_sprintf
  4273  004F  0833               	movf	??_sprintf,w
  4274  0050  00C3               	movwf	sprintf@c
  4275  0051  08C3               	movf	sprintf@c,f
  4276  0052  1903               	btfsc	3,2
  4277  0053  2A74               	goto	i1l2324
  4278                           
  4279                           ;doprnt.c: 547: if(c != '%')
  4280  0054  0843               	movf	sprintf@c,w
  4281  0055  3A25               	xorlw	37
  4282  0056  1903               	skipnz
  4283  0057  2864               	goto	i1l2232
  4284                           
  4285                           ;doprnt.c: 549: {
  4286                           ;doprnt.c: 550: ((*sp++ = (c)));
  4287  0058  0843               	movf	sprintf@c,w
  4288  0059  00B3               	movwf	??_sprintf
  4289  005A  083E               	movf	sprintf@sp,w
  4290  005B  0084               	movwf	4
  4291  005C  0833               	movf	??_sprintf,w
  4292  005D  1383               	bcf	3,7	;select IRP bank0
  4293  005E  0080               	movwf	0
  4294  005F  3001               	movlw	1
  4295  0060  00B3               	movwf	??_sprintf
  4296  0061  0833               	movf	??_sprintf,w
  4297  0062  07BE               	addwf	sprintf@sp,f
  4298                           
  4299                           ;doprnt.c: 551: continue;
  4300  0063  2844               	goto	i1l2322
  4301  0064                     i1l2232:	
  4302                           
  4303                           ;doprnt.c: 552: }
  4304                           ;doprnt.c: 555: width = 0;
  4305  0064  01BF               	clrf	sprintf@width
  4306  0065  01C0               	clrf	sprintf@width+1
  4307                           
  4308                           ;doprnt.c: 557: flag = 0;
  4309  0066  01B8               	clrf	sprintf@flag
  4310                           
  4311                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4312  0067  082A               	movf	sprintf@f,w
  4313  0068  0084               	movwf	4
  4314  0069  120A  158A  200A  120A  118A  	fcall	stringdir
  4315  006E  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4316  0073  1C03               	btfss	3,0
  4317  0074  28B7               	goto	i1l2246
  4318                           
  4319                           ;doprnt.c: 607: width = 0;
  4320  0075  1283               	bcf	3,5	;RP0=0, select bank0
  4321  0076  1303               	bcf	3,6	;RP1=0, select bank0
  4322  0077  01BF               	clrf	sprintf@width
  4323  0078  01C0               	clrf	sprintf@width+1
  4324  0079                     i1l2238:	
  4325                           ;doprnt.c: 608: do {
  4326                           
  4327                           
  4328                           ;doprnt.c: 609: width *= 10;
  4329  0079  300A               	movlw	10
  4330  007A  00F0               	movwf	___wmul@multiplier
  4331  007B  3000               	movlw	0
  4332  007C  00F1               	movwf	___wmul@multiplier+1
  4333  007D  1283               	bcf	3,5	;RP0=0, select bank0
  4334  007E  1303               	bcf	3,6	;RP1=0, select bank0
  4335  007F  0840               	movf	sprintf@width+1,w
  4336  0080  01F3               	clrf	___wmul@multiplicand+1
  4337  0081  07F3               	addwf	___wmul@multiplicand+1,f
  4338  0082  083F               	movf	sprintf@width,w
  4339  0083  01F2               	clrf	___wmul@multiplicand
  4340  0084  07F2               	addwf	___wmul@multiplicand,f
  4341  0085  120A  158A  215C  120A  118A  	fcall	___wmul
  4342  008A  0871               	movf	?___wmul+1,w
  4343  008B  1283               	bcf	3,5	;RP0=0, select bank0
  4344  008C  1303               	bcf	3,6	;RP1=0, select bank0
  4345  008D  01C0               	clrf	sprintf@width+1
  4346  008E  07C0               	addwf	sprintf@width+1,f
  4347  008F  0870               	movf	?___wmul,w
  4348  0090  01BF               	clrf	sprintf@width
  4349  0091  07BF               	addwf	sprintf@width,f
  4350                           
  4351                           ;doprnt.c: 610: width += *f++ - '0';
  4352  0092  082A               	movf	sprintf@f,w
  4353  0093  0084               	movwf	4
  4354  0094  120A  158A  200A  120A  118A  	fcall	stringdir
  4355  0099  3ED0               	addlw	208
  4356  009A  00B3               	movwf	??_sprintf
  4357  009B  30FF               	movlw	255
  4358  009C  1803               	skipnc
  4359  009D  3000               	movlw	0
  4360  009E  00B4               	movwf	??_sprintf+1
  4361  009F  0833               	movf	??_sprintf,w
  4362  00A0  07BF               	addwf	sprintf@width,f
  4363  00A1  1803               	skipnc
  4364  00A2  0AC0               	incf	sprintf@width+1,f
  4365  00A3  0834               	movf	??_sprintf+1,w
  4366  00A4  07C0               	addwf	sprintf@width+1,f
  4367  00A5  3001               	movlw	1
  4368  00A6  00B3               	movwf	??_sprintf
  4369  00A7  0833               	movf	??_sprintf,w
  4370  00A8  07AA               	addwf	sprintf@f,f
  4371                           
  4372                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4373  00A9  082A               	movf	sprintf@f,w
  4374  00AA  0084               	movwf	4
  4375  00AB  120A  158A  200A  120A  118A  	fcall	stringdir
  4376  00B0  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4377  00B5  1803               	btfsc	3,0
  4378  00B6  2879               	goto	i1l2238
  4379  00B7                     i1l2246:	
  4380                           
  4381                           ;doprnt.c: 617: }
  4382                           ;doprnt.c: 620: if(*f == '.') {
  4383  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  4384  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  4385  00B9  082A               	movf	sprintf@f,w
  4386  00BA  0084               	movwf	4
  4387  00BB  120A  158A  200A  120A  118A  	fcall	stringdir
  4388  00C0  3A2E               	xorlw	46
  4389  00C1  1D03               	skipz
  4390  00C2  2905               	goto	i1l2258
  4391                           
  4392                           ;doprnt.c: 622: f++;
  4393  00C3  3001               	movlw	1
  4394  00C4  00B3               	movwf	??_sprintf
  4395  00C5  0833               	movf	??_sprintf,w
  4396  00C6  07AA               	addwf	sprintf@f,f
  4397                           
  4398                           ;doprnt.c: 629: {
  4399                           ;doprnt.c: 630: prec = 0;
  4400  00C7  01C1               	clrf	sprintf@prec
  4401  00C8  01C2               	clrf	sprintf@prec+1
  4402  00C9                     i1l2256:	
  4403                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4404                           
  4405  00C9  082A               	movf	sprintf@f,w
  4406  00CA  0084               	movwf	4
  4407  00CB  120A  158A  200A  120A  118A  	fcall	stringdir
  4408  00D0  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4409  00D5  1C03               	btfss	3,0
  4410  00D6  2911               	goto	i1l2264
  4411                           
  4412                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4413  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4414  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  4415  00D9  0842               	movf	sprintf@prec+1,w
  4416  00DA  01F1               	clrf	___wmul@multiplier+1
  4417  00DB  07F1               	addwf	___wmul@multiplier+1,f
  4418  00DC  0841               	movf	sprintf@prec,w
  4419  00DD  01F0               	clrf	___wmul@multiplier
  4420  00DE  07F0               	addwf	___wmul@multiplier,f
  4421  00DF  300A               	movlw	10
  4422  00E0  00F2               	movwf	___wmul@multiplicand
  4423  00E1  3000               	movlw	0
  4424  00E2  00F3               	movwf	___wmul@multiplicand+1
  4425  00E3  120A  158A  215C  120A  118A  	fcall	___wmul
  4426  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  4427  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  4428  00EA  082A               	movf	sprintf@f,w
  4429  00EB  0084               	movwf	4
  4430  00EC  120A  158A  200A  120A  118A  	fcall	stringdir
  4431  00F1  0770               	addwf	?___wmul,w
  4432  00F2  00B3               	movwf	??_sprintf
  4433  00F3  3000               	movlw	0
  4434  00F4  1803               	skipnc
  4435  00F5  3001               	movlw	1
  4436  00F6  0771               	addwf	?___wmul+1,w
  4437  00F7  00B4               	movwf	??_sprintf+1
  4438  00F8  0833               	movf	??_sprintf,w
  4439  00F9  3ED0               	addlw	208
  4440  00FA  00C1               	movwf	sprintf@prec
  4441  00FB  0834               	movf	??_sprintf+1,w
  4442  00FC  1803               	skipnc
  4443  00FD  3E01               	addlw	1
  4444  00FE  3EFF               	addlw	255
  4445  00FF  00C2               	movwf	sprintf@prec+1
  4446  0100  3001               	movlw	1
  4447  0101  00B3               	movwf	??_sprintf
  4448  0102  0833               	movf	??_sprintf,w
  4449  0103  07AA               	addwf	sprintf@f,f
  4450  0104  28C9               	goto	i1l2256
  4451  0105                     i1l2258:	
  4452                           ;doprnt.c: 633: }
  4453                           ;doprnt.c: 634: } else {
  4454                           
  4455                           
  4456                           ;doprnt.c: 635: prec = 0;
  4457  0105  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0106  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0107  01C1               	clrf	sprintf@prec
  4460  0108  01C2               	clrf	sprintf@prec+1
  4461                           
  4462                           ;doprnt.c: 644: switch(c = *f++) {
  4463                           
  4464                           ;doprnt.c: 639: }
  4465                           ;doprnt.c: 642: loop:
  4466  0109  2911               	goto	i1l2264
  4467  010A                     i1l256:	
  4468                           ;doprnt.c: 650: case 'l':
  4469                           
  4470                           ;doprnt.c: 647: goto alldone;
  4471                           
  4472                           ;doprnt.c: 646: case 0:
  4473                           
  4474                           
  4475                           ;doprnt.c: 652: flag |= 0x10;
  4476  010A  1638               	bsf	sprintf@flag,4
  4477                           
  4478                           ;doprnt.c: 653: goto loop;
  4479  010B  2911               	goto	i1l2264
  4480  010C                     i1l2260:	
  4481                           ;doprnt.c: 826: case 'u':
  4482                           
  4483                           ;doprnt.c: 822: continue;
  4484                           
  4485                           ;doprnt.c: 811: default:
  4486                           
  4487                           
  4488                           ;doprnt.c: 827: flag |= 0xC0;
  4489  010C  30C0               	movlw	192
  4490  010D  00B3               	movwf	??_sprintf
  4491  010E  0833               	movf	??_sprintf,w
  4492  010F  04B8               	iorwf	sprintf@flag,f
  4493                           
  4494                           ;doprnt.c: 831: }
  4495                           
  4496                           ;doprnt.c: 828: break;
  4497  0110  2928               	goto	i1l259
  4498  0111                     i1l2264:	
  4499  0111  3001               	movlw	1
  4500  0112  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0113  1303               	bcf	3,6	;RP1=0, select bank0
  4502  0114  07AA               	addwf	sprintf@f,f
  4503  0115  30FF               	movlw	-1
  4504  0116  072A               	addwf	sprintf@f,w
  4505  0117  0084               	movwf	4
  4506  0118  120A  158A  200A  120A  118A  	fcall	stringdir
  4507  011D  00C3               	movwf	sprintf@c
  4508                           
  4509                           ; Switch size 1, requested type "space"
  4510                           ; Number of cases is 3, Range of values is 0 to 117
  4511                           ; switch strategies available:
  4512                           ; Name         Instructions Cycles
  4513                           ; simple_byte           10     6 (average)
  4514                           ; jumptable            260     6 (fixed)
  4515                           ;	Chosen strategy is simple_byte
  4516  011E  3A00               	xorlw	0	; case 0
  4517  011F  1903               	skipnz
  4518  0120  2A74               	goto	i1l2324
  4519  0121  3A6C               	xorlw	108	; case 108
  4520  0122  1903               	skipnz
  4521  0123  290A               	goto	i1l256
  4522  0124  3A19               	xorlw	25	; case 117
  4523  0125  1903               	skipnz
  4524  0126  290C               	goto	i1l2260
  4525  0127  2844               	goto	i1l2322
  4526  0128                     i1l259:	
  4527                           
  4528                           ;doprnt.c: 1282: {
  4529                           ;doprnt.c: 1290: if(flag & 0x10)
  4530  0128  1E38               	btfss	sprintf@flag,4
  4531  0129  293A               	goto	i1l2270
  4532                           
  4533                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  4534  012A  0839               	movf	sprintf@ap,w
  4535  012B  0084               	movwf	4
  4536  012C  1383               	bcf	3,7	;select IRP bank0
  4537  012D  0800               	movf	0,w
  4538  012E  00BA               	movwf	sprintf@_val
  4539  012F  0A84               	incf	4,f
  4540  0130  0800               	movf	0,w
  4541  0131  00BB               	movwf	sprintf@_val+1
  4542  0132  0A84               	incf	4,f
  4543  0133  0800               	movf	0,w
  4544  0134  00BC               	movwf	sprintf@_val+2
  4545  0135  0A84               	incf	4,f
  4546  0136  0800               	movf	0,w
  4547  0137  00BD               	movwf	sprintf@_val+3
  4548  0138  3004               	movlw	4
  4549  0139  2949               	goto	L3
  4550  013A                     i1l2270:	
  4551                           
  4552                           ;doprnt.c: 1292: else
  4553                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4554  013A  0839               	movf	sprintf@ap,w
  4555  013B  0084               	movwf	4
  4556  013C  1383               	bcf	3,7	;select IRP bank0
  4557  013D  0800               	movf	0,w
  4558  013E  00B3               	movwf	??_sprintf
  4559  013F  0A84               	incf	4,f
  4560  0140  0800               	movf	0,w
  4561  0141  00B4               	movwf	??_sprintf+1
  4562  0142  0833               	movf	??_sprintf,w
  4563  0143  00BA               	movwf	sprintf@_val
  4564  0144  0834               	movf	??_sprintf+1,w
  4565  0145  00BB               	movwf	sprintf@_val+1
  4566  0146  01BC               	clrf	sprintf@_val+2
  4567  0147  01BD               	clrf	sprintf@_val+3
  4568  0148  3002               	movlw	2
  4569  0149                     L3:	
  4570  0149  00B3               	movwf	??_sprintf
  4571  014A  0833               	movf	??_sprintf,w
  4572  014B  07B9               	addwf	sprintf@ap,f
  4573                           
  4574                           ;doprnt.c: 1296: }
  4575                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4576  014C  0842               	movf	sprintf@prec+1,w
  4577  014D  0441               	iorwf	sprintf@prec,w
  4578  014E  1D03               	skipz
  4579  014F  295C               	goto	i1l2280
  4580  0150  083D               	movf	sprintf@_val+3,w
  4581  0151  043C               	iorwf	sprintf@_val+2,w
  4582  0152  043B               	iorwf	sprintf@_val+1,w
  4583  0153  043A               	iorwf	sprintf@_val,w
  4584  0154  1D03               	skipz
  4585  0155  295C               	goto	i1l2280
  4586                           
  4587                           ;doprnt.c: 1300: prec++;
  4588  0156  3001               	movlw	1
  4589  0157  07C1               	addwf	sprintf@prec,f
  4590  0158  1803               	skipnc
  4591  0159  0AC2               	incf	sprintf@prec+1,f
  4592  015A  3000               	movlw	0
  4593  015B  07C2               	addwf	sprintf@prec+1,f
  4594  015C                     i1l2280:	
  4595                           
  4596                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4597  015C  01C3               	clrf	sprintf@c
  4598  015D  0AC3               	incf	sprintf@c,f
  4599  015E  0843               	movf	sprintf@c,w
  4600  015F  3A0A               	xorlw	10
  4601  0160  1903               	btfsc	3,2
  4602  0161  299E               	goto	i1l2292
  4603  0162                     i1l2284:	
  4604                           
  4605                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4606  0162  0843               	movf	sprintf@c,w
  4607  0163  00B3               	movwf	??_sprintf
  4608  0164  3001               	movlw	1
  4609  0165                     u273_25:	
  4610  0165  1003               	clrc
  4611  0166  0DB3               	rlf	??_sprintf,f
  4612  0167  3EFF               	addlw	-1
  4613  0168  1D03               	skipz
  4614  0169  2965               	goto	u273_25
  4615  016A  1003               	clrc
  4616  016B  0D33               	rlf	??_sprintf,w
  4617  016C  3E01               	addlw	low (_dpowers-__stringbase)
  4618  016D  0084               	movwf	4
  4619  016E  120A  158A  200A  120A  118A  	fcall	stringdir
  4620  0173  00B4               	movwf	??_sprintf+1
  4621  0174  120A  158A  200A  120A  118A  	fcall	stringdir
  4622  0179  00B5               	movwf	??_sprintf+2
  4623  017A  120A  158A  200A  120A  118A  	fcall	stringdir
  4624  017F  00B6               	movwf	??_sprintf+3
  4625  0180  120A  158A  200A  120A  118A  	fcall	stringdir
  4626  0185  00B7               	movwf	??_sprintf+4
  4627  0186  0837               	movf	??_sprintf+4,w
  4628  0187  023D               	subwf	sprintf@_val+3,w
  4629  0188  1D03               	skipz
  4630  0189  2994               	goto	u274_25
  4631  018A  0836               	movf	??_sprintf+3,w
  4632  018B  023C               	subwf	sprintf@_val+2,w
  4633  018C  1D03               	skipz
  4634  018D  2994               	goto	u274_25
  4635  018E  0835               	movf	??_sprintf+2,w
  4636  018F  023B               	subwf	sprintf@_val+1,w
  4637  0190  1D03               	skipz
  4638  0191  2994               	goto	u274_25
  4639  0192  0834               	movf	??_sprintf+1,w
  4640  0193  023A               	subwf	sprintf@_val,w
  4641  0194                     u274_25:	
  4642  0194  1C03               	btfss	3,0
  4643  0195  299E               	goto	i1l2292
  4644                           
  4645                           ;doprnt.c: 1316: break;
  4646  0196  3001               	movlw	1
  4647  0197  00B3               	movwf	??_sprintf
  4648  0198  0833               	movf	??_sprintf,w
  4649  0199  07C3               	addwf	sprintf@c,f
  4650  019A  0843               	movf	sprintf@c,w
  4651  019B  3A0A               	xorlw	10
  4652  019C  1D03               	skipz
  4653  019D  2962               	goto	i1l2284
  4654  019E                     i1l2292:	
  4655                           
  4656                           ;doprnt.c: 1348: if(c < prec)
  4657  019E  0843               	movf	sprintf@c,w
  4658  019F  00B3               	movwf	??_sprintf
  4659  01A0  01B4               	clrf	??_sprintf+1
  4660  01A1  1BB3               	btfsc	??_sprintf,7
  4661  01A2  03B4               	decf	??_sprintf+1,f
  4662  01A3  0834               	movf	??_sprintf+1,w
  4663  01A4  3A80               	xorlw	128
  4664  01A5  00B5               	movwf	??_sprintf+2
  4665  01A6  0842               	movf	sprintf@prec+1,w
  4666  01A7  3A80               	xorlw	128
  4667  01A8  0235               	subwf	??_sprintf+2,w
  4668  01A9  1D03               	skipz
  4669  01AA  29AD               	goto	u276_25
  4670  01AB  0841               	movf	sprintf@prec,w
  4671  01AC  0233               	subwf	??_sprintf,w
  4672  01AD                     u276_25:	
  4673  01AD  1803               	skipnc
  4674  01AE  29B6               	goto	i1l2296
  4675                           
  4676                           ;doprnt.c: 1349: c = prec;
  4677  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  4678  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  4679  01B1  0841               	movf	sprintf@prec,w
  4680  01B2  00B3               	movwf	??_sprintf
  4681  01B3  0833               	movf	??_sprintf,w
  4682  01B4  00C3               	movwf	sprintf@c
  4683  01B5  29D0               	goto	i1l2300
  4684  01B6                     i1l2296:	
  4685                           
  4686                           ;doprnt.c: 1350: else if(prec < c)
  4687  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  4688  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  4689  01B8  0843               	movf	sprintf@c,w
  4690  01B9  00B3               	movwf	??_sprintf
  4691  01BA  01B4               	clrf	??_sprintf+1
  4692  01BB  1BB3               	btfsc	??_sprintf,7
  4693  01BC  03B4               	decf	??_sprintf+1,f
  4694  01BD  0842               	movf	sprintf@prec+1,w
  4695  01BE  3A80               	xorlw	128
  4696  01BF  00B5               	movwf	??_sprintf+2
  4697  01C0  0834               	movf	??_sprintf+1,w
  4698  01C1  3A80               	xorlw	128
  4699  01C2  0235               	subwf	??_sprintf+2,w
  4700  01C3  1D03               	skipz
  4701  01C4  29C7               	goto	u277_25
  4702  01C5  0833               	movf	??_sprintf,w
  4703  01C6  0241               	subwf	sprintf@prec,w
  4704  01C7                     u277_25:	
  4705  01C7  1803               	skipnc
  4706  01C8  29D0               	goto	i1l2300
  4707                           
  4708                           ;doprnt.c: 1351: prec = c;
  4709  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  4710  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  4711  01CB  0843               	movf	sprintf@c,w
  4712  01CC  00C1               	movwf	sprintf@prec
  4713  01CD  01C2               	clrf	sprintf@prec+1
  4714  01CE  1BC1               	btfsc	sprintf@prec,7
  4715  01CF  03C2               	decf	sprintf@prec+1,f
  4716  01D0                     i1l2300:	
  4717                           
  4718                           ;doprnt.c: 1390: if(width > c)
  4719  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  4720  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  4721  01D2  0843               	movf	sprintf@c,w
  4722  01D3  00B3               	movwf	??_sprintf
  4723  01D4  01B4               	clrf	??_sprintf+1
  4724  01D5  1BB3               	btfsc	??_sprintf,7
  4725  01D6  03B4               	decf	??_sprintf+1,f
  4726  01D7  0834               	movf	??_sprintf+1,w
  4727  01D8  3A80               	xorlw	128
  4728  01D9  00B5               	movwf	??_sprintf+2
  4729  01DA  0840               	movf	sprintf@width+1,w
  4730  01DB  3A80               	xorlw	128
  4731  01DC  0235               	subwf	??_sprintf+2,w
  4732  01DD  1D03               	skipz
  4733  01DE  29E1               	goto	u278_25
  4734  01DF  083F               	movf	sprintf@width,w
  4735  01E0  0233               	subwf	??_sprintf,w
  4736  01E1                     u278_25:	
  4737  01E1  1803               	skipnc
  4738  01E2  29F1               	goto	i1l2304
  4739                           
  4740                           ;doprnt.c: 1391: width -= c;
  4741  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  4742  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  4743  01E5  0843               	movf	sprintf@c,w
  4744  01E6  00B3               	movwf	??_sprintf
  4745  01E7  01B4               	clrf	??_sprintf+1
  4746  01E8  1BB3               	btfsc	??_sprintf,7
  4747  01E9  03B4               	decf	??_sprintf+1,f
  4748  01EA  0833               	movf	??_sprintf,w
  4749  01EB  02BF               	subwf	sprintf@width,f
  4750  01EC  0834               	movf	??_sprintf+1,w
  4751  01ED  1C03               	skipc
  4752  01EE  03C0               	decf	sprintf@width+1,f
  4753  01EF  02C0               	subwf	sprintf@width+1,f
  4754  01F0  29F5               	goto	i1l2306
  4755  01F1                     i1l2304:	
  4756                           
  4757                           ;doprnt.c: 1392: else
  4758                           ;doprnt.c: 1393: width = 0;
  4759  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  4760  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  4761  01F3  01BF               	clrf	sprintf@width
  4762  01F4  01C0               	clrf	sprintf@width+1
  4763  01F5                     i1l2306:	
  4764                           
  4765                           ;doprnt.c: 1431: {
  4766                           ;doprnt.c: 1433: if(width
  4767                           ;doprnt.c: 1437: )
  4768  01F5  0840               	movf	sprintf@width+1,w
  4769  01F6  043F               	iorwf	sprintf@width,w
  4770  01F7  1903               	skipnz
  4771  01F8  2A65               	goto	i1l2320
  4772                           
  4773                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4774                           
  4775                           ;doprnt.c: 1438: do
  4776  01F9  3020               	movlw	32
  4777  01FA  00B3               	movwf	??_sprintf
  4778  01FB  083E               	movf	sprintf@sp,w
  4779  01FC  0084               	movwf	4
  4780  01FD  0833               	movf	??_sprintf,w
  4781  01FE  1383               	bcf	3,7	;select IRP bank0
  4782  01FF  0080               	movwf	0
  4783  0200  3001               	movlw	1
  4784  0201  00B3               	movwf	??_sprintf
  4785  0202  0833               	movf	??_sprintf,w
  4786  0203  07BE               	addwf	sprintf@sp,f
  4787                           
  4788                           ;doprnt.c: 1440: while(--width);
  4789  0204  30FF               	movlw	255
  4790  0205  07BF               	addwf	sprintf@width,f
  4791  0206  1803               	skipnc
  4792  0207  0AC0               	incf	sprintf@width+1,f
  4793  0208  30FF               	movlw	255
  4794  0209  07C0               	addwf	sprintf@width+1,f
  4795  020A  29F5               	goto	i1l2306
  4796  020B                     i1l2314:	
  4797                           ;doprnt.c: 1478: }
  4798                           ;doprnt.c: 1483: while(prec--) {
  4799                           
  4800                           
  4801                           ;doprnt.c: 1487: {
  4802                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4803  020B  3000               	movlw	0
  4804  020C  00A3               	movwf	___llmod@divisor+3
  4805  020D  3000               	movlw	0
  4806  020E  00A2               	movwf	___llmod@divisor+2
  4807  020F  3000               	movlw	0
  4808  0210  00A1               	movwf	___llmod@divisor+1
  4809  0211  300A               	movlw	10
  4810  0212  00A0               	movwf	___llmod@divisor
  4811  0213  0841               	movf	sprintf@prec,w
  4812  0214  00B3               	movwf	??_sprintf
  4813  0215  3001               	movlw	1
  4814  0216                     u281_25:	
  4815  0216  1003               	clrc
  4816  0217  0DB3               	rlf	??_sprintf,f
  4817  0218  3EFF               	addlw	-1
  4818  0219  1D03               	skipz
  4819  021A  2A16               	goto	u281_25
  4820  021B  1003               	clrc
  4821  021C  0D33               	rlf	??_sprintf,w
  4822  021D  3E01               	addlw	low (_dpowers-__stringbase)
  4823  021E  0084               	movwf	4
  4824  021F  120A  158A  200A  120A  118A  	fcall	stringdir
  4825  0224  00F0               	movwf	___lldiv@divisor
  4826  0225  120A  158A  200A  120A  118A  	fcall	stringdir
  4827  022A  00F1               	movwf	___lldiv@divisor+1
  4828  022B  120A  158A  200A  120A  118A  	fcall	stringdir
  4829  0230  00F2               	movwf	___lldiv@divisor+2
  4830  0231  120A  158A  200A  120A  118A  	fcall	stringdir
  4831  0236  00F3               	movwf	___lldiv@divisor+3
  4832  0237  083D               	movf	sprintf@_val+3,w
  4833  0238  00F7               	movwf	___lldiv@dividend+3
  4834  0239  083C               	movf	sprintf@_val+2,w
  4835  023A  00F6               	movwf	___lldiv@dividend+2
  4836  023B  083B               	movf	sprintf@_val+1,w
  4837  023C  00F5               	movwf	___lldiv@dividend+1
  4838  023D  083A               	movf	sprintf@_val,w
  4839  023E  00F4               	movwf	___lldiv@dividend
  4840  023F  120A  158A  2632  120A  118A  	fcall	___lldiv
  4841  0244  0873               	movf	?___lldiv+3,w
  4842  0245  1283               	bcf	3,5	;RP0=0, select bank0
  4843  0246  1303               	bcf	3,6	;RP1=0, select bank0
  4844  0247  00A7               	movwf	___llmod@dividend+3
  4845  0248  0872               	movf	?___lldiv+2,w
  4846  0249  00A6               	movwf	___llmod@dividend+2
  4847  024A  0871               	movf	?___lldiv+1,w
  4848  024B  00A5               	movwf	___llmod@dividend+1
  4849  024C  0870               	movf	?___lldiv,w
  4850  024D  00A4               	movwf	___llmod@dividend
  4851  024E  120A  158A  242C  120A  118A  	fcall	___llmod
  4852  0253  1283               	bcf	3,5	;RP0=0, select bank0
  4853  0254  1303               	bcf	3,6	;RP1=0, select bank0
  4854  0255  0820               	movf	?___llmod,w
  4855  0256  3E30               	addlw	48
  4856  0257  00B4               	movwf	??_sprintf+1
  4857  0258  0834               	movf	??_sprintf+1,w
  4858  0259  00C3               	movwf	sprintf@c
  4859                           
  4860                           ;doprnt.c: 1532: }
  4861                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4862  025A  0843               	movf	sprintf@c,w
  4863  025B  00B3               	movwf	??_sprintf
  4864  025C  083E               	movf	sprintf@sp,w
  4865  025D  0084               	movwf	4
  4866  025E  0833               	movf	??_sprintf,w
  4867  025F  1383               	bcf	3,7	;select IRP bank0
  4868  0260  0080               	movwf	0
  4869  0261  3001               	movlw	1
  4870  0262  00B3               	movwf	??_sprintf
  4871  0263  0833               	movf	??_sprintf,w
  4872  0264  07BE               	addwf	sprintf@sp,f
  4873  0265                     i1l2320:	
  4874  0265  30FF               	movlw	255
  4875  0266  07C1               	addwf	sprintf@prec,f
  4876  0267  1803               	skipnc
  4877  0268  0AC2               	incf	sprintf@prec+1,f
  4878  0269  30FF               	movlw	255
  4879  026A  07C2               	addwf	sprintf@prec+1,f
  4880  026B  30FF               	movlw	255
  4881  026C  0642               	xorwf	sprintf@prec+1,w
  4882  026D  1D03               	skipz
  4883  026E  2A71               	goto	u282_25
  4884  026F  30FF               	movlw	255
  4885  0270  0641               	xorwf	sprintf@prec,w
  4886  0271                     u282_25:	
  4887  0271  1903               	btfsc	3,2
  4888  0272  2844               	goto	i1l2322
  4889  0273  2A0B               	goto	i1l2314
  4890  0274                     i1l2324:	
  4891                           ;doprnt.c: 1534: }
  4892                           ;doprnt.c: 1542: }
  4893                           ;doprnt.c: 1544: alldone:
  4894                           
  4895                           
  4896                           ;doprnt.c: 1547: *sp = 0;
  4897  0274  083E               	movf	sprintf@sp,w
  4898  0275  0084               	movwf	4
  4899  0276  1383               	bcf	3,7	;select IRP bank0
  4900  0277  0180               	clrf	0
  4901  0278  0008               	return
  4902  0279                     __end_of_sprintf:	
  4903                           ;doprnt.c: 1549: return 0;
  4904                           ;	Return value of _sprintf is never used
  4905                           
  4906                           
  4907                           	psect	text23
  4908  07F2                     __ptext23:	
  4909 ;; *************** function _isdigit *****************
  4910 ;; Defined at:
  4911 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\isdigit.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  c               1    wreg     unsigned char 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  c               1    1[COMMON] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4925 ;;      Params:         0       0       0       0       0
  4926 ;;      Locals:         2       0       0       0       0
  4927 ;;      Temps:          0       0       0       0       0
  4928 ;;      Totals:         2       0       0       0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_sprintf
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           
  4939                           ;psect for function _isdigit
  4940  07F2                     _isdigit:	
  4941                           
  4942                           ;incstack = 0
  4943 ;; hardware stack exceeded
  4944                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4945                           ;isdigit@c stored from wreg
  4946  07F2  00F1               	movwf	isdigit@c
  4947  07F3  01F0               	clrf	_isdigit$880
  4948  07F4  303A               	movlw	58
  4949  07F5  0271               	subwf	isdigit@c,w
  4950  07F6  1803               	skipnc
  4951  07F7  2FFE               	goto	i1l2012
  4952  07F8  3030               	movlw	48
  4953  07F9  0271               	subwf	isdigit@c,w
  4954  07FA  1C03               	skipc
  4955  07FB  2FFE               	goto	i1l2012
  4956  07FC  01F0               	clrf	_isdigit$880
  4957  07FD  0AF0               	incf	_isdigit$880,f
  4958  07FE                     i1l2012:	
  4959  07FE  0C70               	rrf	_isdigit$880,w
  4960  07FF  0008               	return
  4961  0800                     __end_of_isdigit:	
  4962                           
  4963                           	psect	text24
  4964  095C                     __ptext24:	
  4965 ;; *************** function ___wmul *****************
  4966 ;; Defined at:
  4967 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  multiplier      2    0[COMMON] unsigned int 
  4970 ;;  multiplicand    2    2[COMMON] unsigned int 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  product         2    4[COMMON] unsigned int 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  2    0[COMMON] unsigned int 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4982 ;;      Params:         4       0       0       0       0
  4983 ;;      Locals:         2       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0
  4985 ;;      Totals:         6       0       0       0       0
  4986 ;;Total ram usage:        6 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_sprintf
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           
  4996                           ;psect for function ___wmul
  4997  095C                     ___wmul:	
  4998                           
  4999                           ;incstack = 0
  5000 ;; hardware stack exceeded
  5001                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5002  095C  01F4               	clrf	___wmul@product
  5003  095D  01F5               	clrf	___wmul@product+1
  5004  095E                     i1l2018:	
  5005  095E  1C70               	btfss	___wmul@multiplier,0
  5006  095F  2966               	goto	i1l362
  5007  0960  0872               	movf	___wmul@multiplicand,w
  5008  0961  07F4               	addwf	___wmul@product,f
  5009  0962  1803               	skipnc
  5010  0963  0AF5               	incf	___wmul@product+1,f
  5011  0964  0873               	movf	___wmul@multiplicand+1,w
  5012  0965  07F5               	addwf	___wmul@product+1,f
  5013  0966                     i1l362:	
  5014  0966  3001               	movlw	1
  5015  0967                     u217_25:	
  5016  0967  1003               	clrc
  5017  0968  0DF2               	rlf	___wmul@multiplicand,f
  5018  0969  0DF3               	rlf	___wmul@multiplicand+1,f
  5019  096A  3EFF               	addlw	-1
  5020  096B  1D03               	skipz
  5021  096C  2967               	goto	u217_25
  5022  096D  3001               	movlw	1
  5023  096E                     u218_25:	
  5024  096E  1003               	clrc
  5025  096F  0CF1               	rrf	___wmul@multiplier+1,f
  5026  0970  0CF0               	rrf	___wmul@multiplier,f
  5027  0971  3EFF               	addlw	-1
  5028  0972  1D03               	skipz
  5029  0973  296E               	goto	u218_25
  5030  0974  0871               	movf	___wmul@multiplier+1,w
  5031  0975  0470               	iorwf	___wmul@multiplier,w
  5032  0976  1D03               	skipz
  5033  0977  295E               	goto	i1l2018
  5034  0978  0875               	movf	___wmul@product+1,w
  5035  0979  01F1               	clrf	?___wmul+1
  5036  097A  07F1               	addwf	?___wmul+1,f
  5037  097B  0874               	movf	___wmul@product,w
  5038  097C  01F0               	clrf	?___wmul
  5039  097D  07F0               	addwf	?___wmul,f
  5040  097E  0008               	return
  5041  097F                     __end_of___wmul:	
  5042                           
  5043                           	psect	text25
  5044  0C2C                     __ptext25:	
  5045 ;; *************** function ___llmod *****************
  5046 ;; Defined at:
  5047 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\llmod.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  divisor         4    0[BANK0 ] unsigned long 
  5050 ;;  dividend        4    4[BANK0 ] unsigned long 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  counter         1    9[BANK0 ] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  4    0[BANK0 ] unsigned long 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5062 ;;      Params:         0       8       0       0       0
  5063 ;;      Locals:         0       1       0       0       0
  5064 ;;      Temps:          0       1       0       0       0
  5065 ;;      Totals:         0      10       0       0       0
  5066 ;;Total ram usage:       10 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_sprintf
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           
  5076                           ;psect for function ___llmod
  5077  0C2C                     ___llmod:	
  5078                           
  5079                           ;incstack = 0
  5080 ;; hardware stack exceeded
  5081                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5082  0C2C  1283               	bcf	3,5	;RP0=0, select bank0
  5083  0C2D  1303               	bcf	3,6	;RP1=0, select bank0
  5084  0C2E  0823               	movf	___llmod@divisor+3,w
  5085  0C2F  0422               	iorwf	___llmod@divisor+2,w
  5086  0C30  0421               	iorwf	___llmod@divisor+1,w
  5087  0C31  0420               	iorwf	___llmod@divisor,w
  5088  0C32  1903               	skipnz
  5089  0C33  2C71               	goto	i1l2140
  5090  0C34  01A9               	clrf	___llmod@counter
  5091  0C35  0AA9               	incf	___llmod@counter,f
  5092  0C36                     i1l2130:	
  5093  0C36  1BA3               	btfsc	___llmod@divisor+3,7
  5094  0C37  2C46               	goto	i1l2132
  5095  0C38  3001               	movlw	1
  5096  0C39  00A8               	movwf	??___llmod
  5097  0C3A                     u252_25:	
  5098  0C3A  1003               	clrc
  5099  0C3B  0DA0               	rlf	___llmod@divisor,f
  5100  0C3C  0DA1               	rlf	___llmod@divisor+1,f
  5101  0C3D  0DA2               	rlf	___llmod@divisor+2,f
  5102  0C3E  0DA3               	rlf	___llmod@divisor+3,f
  5103  0C3F  0BA8               	decfsz	??___llmod,f
  5104  0C40  2C3A               	goto	u252_25
  5105  0C41  3001               	movlw	1
  5106  0C42  00A8               	movwf	??___llmod
  5107  0C43  0828               	movf	??___llmod,w
  5108  0C44  07A9               	addwf	___llmod@counter,f
  5109  0C45  2C36               	goto	i1l2130
  5110  0C46                     i1l2132:	
  5111  0C46  0823               	movf	___llmod@divisor+3,w
  5112  0C47  0227               	subwf	___llmod@dividend+3,w
  5113  0C48  1D03               	skipz
  5114  0C49  2C54               	goto	u254_25
  5115  0C4A  0822               	movf	___llmod@divisor+2,w
  5116  0C4B  0226               	subwf	___llmod@dividend+2,w
  5117  0C4C  1D03               	skipz
  5118  0C4D  2C54               	goto	u254_25
  5119  0C4E  0821               	movf	___llmod@divisor+1,w
  5120  0C4F  0225               	subwf	___llmod@dividend+1,w
  5121  0C50  1D03               	skipz
  5122  0C51  2C54               	goto	u254_25
  5123  0C52  0820               	movf	___llmod@divisor,w
  5124  0C53  0224               	subwf	___llmod@dividend,w
  5125  0C54                     u254_25:	
  5126  0C54  1C03               	skipc
  5127  0C55  2C64               	goto	i1l2136
  5128  0C56  0820               	movf	___llmod@divisor,w
  5129  0C57  02A4               	subwf	___llmod@dividend,f
  5130  0C58  0821               	movf	___llmod@divisor+1,w
  5131  0C59  1C03               	skipc
  5132  0C5A  0F21               	incfsz	___llmod@divisor+1,w
  5133  0C5B  02A5               	subwf	___llmod@dividend+1,f
  5134  0C5C  0822               	movf	___llmod@divisor+2,w
  5135  0C5D  1C03               	skipc
  5136  0C5E  0F22               	incfsz	___llmod@divisor+2,w
  5137  0C5F  02A6               	subwf	___llmod@dividend+2,f
  5138  0C60  0823               	movf	___llmod@divisor+3,w
  5139  0C61  1C03               	skipc
  5140  0C62  0F23               	incfsz	___llmod@divisor+3,w
  5141  0C63  02A7               	subwf	___llmod@dividend+3,f
  5142  0C64                     i1l2136:	
  5143  0C64  3001               	movlw	1
  5144  0C65                     u255_25:	
  5145  0C65  1003               	clrc
  5146  0C66  0CA3               	rrf	___llmod@divisor+3,f
  5147  0C67  0CA2               	rrf	___llmod@divisor+2,f
  5148  0C68  0CA1               	rrf	___llmod@divisor+1,f
  5149  0C69  0CA0               	rrf	___llmod@divisor,f
  5150  0C6A  3EFF               	addlw	-1
  5151  0C6B  1D03               	skipz
  5152  0C6C  2C65               	goto	u255_25
  5153  0C6D  3001               	movlw	1
  5154  0C6E  02A9               	subwf	___llmod@counter,f
  5155  0C6F  1D03               	btfss	3,2
  5156  0C70  2C46               	goto	i1l2132
  5157  0C71                     i1l2140:	
  5158  0C71  0827               	movf	___llmod@dividend+3,w
  5159  0C72  00A3               	movwf	?___llmod+3
  5160  0C73  0826               	movf	___llmod@dividend+2,w
  5161  0C74  00A2               	movwf	?___llmod+2
  5162  0C75  0825               	movf	___llmod@dividend+1,w
  5163  0C76  00A1               	movwf	?___llmod+1
  5164  0C77  0824               	movf	___llmod@dividend,w
  5165  0C78  00A0               	movwf	?___llmod
  5166  0C79  0008               	return
  5167  0C7A                     __end_of___llmod:	
  5168                           
  5169                           	psect	text26
  5170  0E32                     __ptext26:	
  5171 ;; *************** function ___lldiv *****************
  5172 ;; Defined at:
  5173 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  divisor         4    0[COMMON] unsigned long 
  5176 ;;  dividend        4    4[COMMON] unsigned long 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  quotient        4    9[COMMON] unsigned long 
  5179 ;;  counter         1   13[COMMON] unsigned char 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  4    0[COMMON] unsigned long 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5189 ;;      Params:         8       0       0       0       0
  5190 ;;      Locals:         5       0       0       0       0
  5191 ;;      Temps:          1       0       0       0       0
  5192 ;;      Totals:        14       0       0       0       0
  5193 ;;Total ram usage:       14 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_sprintf
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           
  5203                           ;psect for function ___lldiv
  5204  0E32                     ___lldiv:	
  5205                           
  5206                           ;incstack = 0
  5207 ;; hardware stack exceeded
  5208                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5209  0E32  3000               	movlw	0
  5210  0E33  00FC               	movwf	___lldiv@quotient+3
  5211  0E34  3000               	movlw	0
  5212  0E35  00FB               	movwf	___lldiv@quotient+2
  5213  0E36  3000               	movlw	0
  5214  0E37  00FA               	movwf	___lldiv@quotient+1
  5215  0E38  3000               	movlw	0
  5216  0E39  00F9               	movwf	___lldiv@quotient
  5217  0E3A  0873               	movf	___lldiv@divisor+3,w
  5218  0E3B  0472               	iorwf	___lldiv@divisor+2,w
  5219  0E3C  0471               	iorwf	___lldiv@divisor+1,w
  5220  0E3D  0470               	iorwf	___lldiv@divisor,w
  5221  0E3E  1903               	skipnz
  5222  0E3F  2E87               	goto	i1l2120
  5223  0E40  01FD               	clrf	___lldiv@counter
  5224  0E41  0AFD               	incf	___lldiv@counter,f
  5225  0E42                     i1l2106:	
  5226  0E42  1BF3               	btfsc	___lldiv@divisor+3,7
  5227  0E43  2E52               	goto	i1l2108
  5228  0E44  3001               	movlw	1
  5229  0E45  00F8               	movwf	??___lldiv
  5230  0E46                     u245_25:	
  5231  0E46  1003               	clrc
  5232  0E47  0DF0               	rlf	___lldiv@divisor,f
  5233  0E48  0DF1               	rlf	___lldiv@divisor+1,f
  5234  0E49  0DF2               	rlf	___lldiv@divisor+2,f
  5235  0E4A  0DF3               	rlf	___lldiv@divisor+3,f
  5236  0E4B  0BF8               	decfsz	??___lldiv,f
  5237  0E4C  2E46               	goto	u245_25
  5238  0E4D  3001               	movlw	1
  5239  0E4E  00F8               	movwf	??___lldiv
  5240  0E4F  0878               	movf	??___lldiv,w
  5241  0E50  07FD               	addwf	___lldiv@counter,f
  5242  0E51  2E42               	goto	i1l2106
  5243  0E52                     i1l2108:	
  5244  0E52  3001               	movlw	1
  5245  0E53  00F8               	movwf	??___lldiv
  5246  0E54                     u247_25:	
  5247  0E54  1003               	clrc
  5248  0E55  0DF9               	rlf	___lldiv@quotient,f
  5249  0E56  0DFA               	rlf	___lldiv@quotient+1,f
  5250  0E57  0DFB               	rlf	___lldiv@quotient+2,f
  5251  0E58  0DFC               	rlf	___lldiv@quotient+3,f
  5252  0E59  0BF8               	decfsz	??___lldiv,f
  5253  0E5A  2E54               	goto	u247_25
  5254  0E5B  0873               	movf	___lldiv@divisor+3,w
  5255  0E5C  0277               	subwf	___lldiv@dividend+3,w
  5256  0E5D  1D03               	skipz
  5257  0E5E  2E69               	goto	u248_25
  5258  0E5F  0872               	movf	___lldiv@divisor+2,w
  5259  0E60  0276               	subwf	___lldiv@dividend+2,w
  5260  0E61  1D03               	skipz
  5261  0E62  2E69               	goto	u248_25
  5262  0E63  0871               	movf	___lldiv@divisor+1,w
  5263  0E64  0275               	subwf	___lldiv@dividend+1,w
  5264  0E65  1D03               	skipz
  5265  0E66  2E69               	goto	u248_25
  5266  0E67  0870               	movf	___lldiv@divisor,w
  5267  0E68  0274               	subwf	___lldiv@dividend,w
  5268  0E69                     u248_25:	
  5269  0E69  1C03               	skipc
  5270  0E6A  2E7A               	goto	i1l2116
  5271  0E6B  0870               	movf	___lldiv@divisor,w
  5272  0E6C  02F4               	subwf	___lldiv@dividend,f
  5273  0E6D  0871               	movf	___lldiv@divisor+1,w
  5274  0E6E  1C03               	skipc
  5275  0E6F  0F71               	incfsz	___lldiv@divisor+1,w
  5276  0E70  02F5               	subwf	___lldiv@dividend+1,f
  5277  0E71  0872               	movf	___lldiv@divisor+2,w
  5278  0E72  1C03               	skipc
  5279  0E73  0F72               	incfsz	___lldiv@divisor+2,w
  5280  0E74  02F6               	subwf	___lldiv@dividend+2,f
  5281  0E75  0873               	movf	___lldiv@divisor+3,w
  5282  0E76  1C03               	skipc
  5283  0E77  0F73               	incfsz	___lldiv@divisor+3,w
  5284  0E78  02F7               	subwf	___lldiv@dividend+3,f
  5285  0E79  1479               	bsf	___lldiv@quotient,0
  5286  0E7A                     i1l2116:	
  5287  0E7A  3001               	movlw	1
  5288  0E7B                     u249_25:	
  5289  0E7B  1003               	clrc
  5290  0E7C  0CF3               	rrf	___lldiv@divisor+3,f
  5291  0E7D  0CF2               	rrf	___lldiv@divisor+2,f
  5292  0E7E  0CF1               	rrf	___lldiv@divisor+1,f
  5293  0E7F  0CF0               	rrf	___lldiv@divisor,f
  5294  0E80  3EFF               	addlw	-1
  5295  0E81  1D03               	skipz
  5296  0E82  2E7B               	goto	u249_25
  5297  0E83  3001               	movlw	1
  5298  0E84  02FD               	subwf	___lldiv@counter,f
  5299  0E85  1D03               	btfss	3,2
  5300  0E86  2E52               	goto	i1l2108
  5301  0E87                     i1l2120:	
  5302  0E87  087C               	movf	___lldiv@quotient+3,w
  5303  0E88  00F3               	movwf	?___lldiv+3
  5304  0E89  087B               	movf	___lldiv@quotient+2,w
  5305  0E8A  00F2               	movwf	?___lldiv+2
  5306  0E8B  087A               	movf	___lldiv@quotient+1,w
  5307  0E8C  00F1               	movwf	?___lldiv+1
  5308  0E8D  0879               	movf	___lldiv@quotient,w
  5309  0E8E  00F0               	movwf	?___lldiv
  5310  0E8F  0008               	return
  5311  0E90                     __end_of___lldiv:	
  5312                           
  5313                           	psect	text27
  5314  09CB                     __ptext27:	
  5315 ;; *************** function ___lltoft *****************
  5316 ;; Defined at:
  5317 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lltoft.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  c               4    8[COMMON] unsigned long 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  exp             1   13[COMMON] unsigned char 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  3    8[COMMON] float 
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0, pclath, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5331 ;;      Params:         4       0       0       0       0
  5332 ;;      Locals:         1       0       0       0       0
  5333 ;;      Temps:          1       0       0       0       0
  5334 ;;      Totals:         6       0       0       0       0
  5335 ;;Total ram usage:        6 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    1
  5338 ;; This function calls:
  5339 ;;		___ftpack
  5340 ;; This function is called by:
  5341 ;;		_ftoa
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           
  5346                           ;psect for function ___lltoft
  5347  09CB                     ___lltoft:	
  5348                           
  5349                           ;incstack = 0
  5350 ;; hardware stack exceeded
  5351                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5352  09CB  308E               	movlw	142
  5353  09CC  00FC               	movwf	??___lltoft
  5354  09CD  087C               	movf	??___lltoft,w
  5355  09CE  00FD               	movwf	___lltoft@exp
  5356  09CF                     i1l2460:	
  5357  09CF  30FF               	movlw	255
  5358  09D0  057B               	andwf	___lltoft@c+3,w
  5359  09D1  1903               	btfsc	3,2
  5360  09D2  29E1               	goto	i1l2462
  5361  09D3  3001               	movlw	1
  5362  09D4                     u314_25:	
  5363  09D4  1003               	clrc
  5364  09D5  0CFB               	rrf	___lltoft@c+3,f
  5365  09D6  0CFA               	rrf	___lltoft@c+2,f
  5366  09D7  0CF9               	rrf	___lltoft@c+1,f
  5367  09D8  0CF8               	rrf	___lltoft@c,f
  5368  09D9  3EFF               	addlw	-1
  5369  09DA  1D03               	skipz
  5370  09DB  29D4               	goto	u314_25
  5371  09DC  3001               	movlw	1
  5372  09DD  00FC               	movwf	??___lltoft
  5373  09DE  087C               	movf	??___lltoft,w
  5374  09DF  07FD               	addwf	___lltoft@exp,f
  5375  09E0  29CF               	goto	i1l2460
  5376  09E1                     i1l2462:	
  5377  09E1  0878               	movf	___lltoft@c,w
  5378  09E2  00F0               	movwf	___ftpack@arg
  5379  09E3  0879               	movf	___lltoft@c+1,w
  5380  09E4  00F1               	movwf	___ftpack@arg+1
  5381  09E5  087A               	movf	___lltoft@c+2,w
  5382  09E6  00F2               	movwf	___ftpack@arg+2
  5383  09E7  087D               	movf	___lltoft@exp,w
  5384  09E8  00FC               	movwf	??___lltoft
  5385  09E9  087C               	movf	??___lltoft,w
  5386  09EA  00F3               	movwf	___ftpack@exp
  5387  09EB  01F4               	clrf	___ftpack@sign
  5388  09EC  120A  118A  278A   	fcall	___ftpack
  5389  09EF  0870               	movf	?___ftpack,w
  5390  09F0  00F8               	movwf	?___lltoft
  5391  09F1  0871               	movf	?___ftpack+1,w
  5392  09F2  00F9               	movwf	?___lltoft+1
  5393  09F3  0872               	movf	?___ftpack+2,w
  5394  09F4  00FA               	movwf	?___lltoft+2
  5395  09F5  0008               	return
  5396  09F6                     __end_of___lltoft:	
  5397                           
  5398                           	psect	text28
  5399  0F72                     __ptext28:	
  5400 ;; *************** function ___fttol *****************
  5401 ;; Defined at:
  5402 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  f1              3   16[BANK0 ] float 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  lval            4   25[BANK0 ] unsigned long 
  5407 ;;  exp1            1   29[BANK0 ] unsigned char 
  5408 ;;  sign1           1   24[BANK0 ] unsigned char 
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  4   16[BANK0 ] long 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5418 ;;      Params:         0       4       0       0       0
  5419 ;;      Locals:         0       6       0       0       0
  5420 ;;      Temps:          0       4       0       0       0
  5421 ;;      Totals:         0      14       0       0       0
  5422 ;;Total ram usage:       14 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; This function calls:
  5425 ;;		Nothing
  5426 ;; This function is called by:
  5427 ;;		_ISR
  5428 ;;		_ftoa
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function ___fttol
  5434  0F72                     ___fttol:	
  5435                           
  5436                           ;incstack = 0
  5437 ;; hardware stack exceeded
  5438                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5439  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  5440  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  5441  0F74  0830               	movf	___fttol@f1,w
  5442  0F75  00B4               	movwf	??___fttol
  5443  0F76  0831               	movf	___fttol@f1+1,w
  5444  0F77  00B5               	movwf	??___fttol+1
  5445  0F78  0832               	movf	___fttol@f1+2,w
  5446  0F79  00B6               	movwf	??___fttol+2
  5447  0F7A  1003               	clrc
  5448  0F7B  0D35               	rlf	??___fttol+1,w
  5449  0F7C  0D36               	rlf	??___fttol+2,w
  5450  0F7D  00B7               	movwf	??___fttol+3
  5451  0F7E  0837               	movf	??___fttol+3,w
  5452  0F7F  00BD               	movwf	___fttol@exp1
  5453  0F80  08BD               	movf	___fttol@exp1,f
  5454  0F81  1D03               	skipz
  5455  0F82  2F8C               	goto	i1l2418
  5456  0F83  3000               	movlw	0
  5457  0F84  00B3               	movwf	?___fttol+3
  5458  0F85  3000               	movlw	0
  5459  0F86  00B2               	movwf	?___fttol+2
  5460  0F87  3000               	movlw	0
  5461  0F88  00B1               	movwf	?___fttol+1
  5462  0F89  3000               	movlw	0
  5463  0F8A  00B0               	movwf	?___fttol
  5464  0F8B  0008               	return
  5465  0F8C                     i1l2418:	
  5466  0F8C  0830               	movf	___fttol@f1,w
  5467  0F8D  00B4               	movwf	??___fttol
  5468  0F8E  0831               	movf	___fttol@f1+1,w
  5469  0F8F  00B5               	movwf	??___fttol+1
  5470  0F90  0832               	movf	___fttol@f1+2,w
  5471  0F91  00B6               	movwf	??___fttol+2
  5472  0F92  3017               	movlw	23
  5473  0F93                     u305_25:	
  5474  0F93  1003               	clrc
  5475  0F94  0CB6               	rrf	??___fttol+2,f
  5476  0F95  0CB5               	rrf	??___fttol+1,f
  5477  0F96  0CB4               	rrf	??___fttol,f
  5478  0F97  3EFF               	addlw	-1
  5479  0F98  1D03               	skipz
  5480  0F99  2F93               	goto	u305_25
  5481  0F9A  0834               	movf	??___fttol,w
  5482  0F9B  00B7               	movwf	??___fttol+3
  5483  0F9C  0837               	movf	??___fttol+3,w
  5484  0F9D  00B8               	movwf	___fttol@sign1
  5485  0F9E  17B1               	bsf	___fttol@f1+1,7
  5486  0F9F  30FF               	movlw	255
  5487  0FA0  05B0               	andwf	___fttol@f1,f
  5488  0FA1  30FF               	movlw	255
  5489  0FA2  05B1               	andwf	___fttol@f1+1,f
  5490  0FA3  3000               	movlw	0
  5491  0FA4  05B2               	andwf	___fttol@f1+2,f
  5492  0FA5  0830               	movf	___fttol@f1,w
  5493  0FA6  00B9               	movwf	___fttol@lval
  5494  0FA7  0831               	movf	___fttol@f1+1,w
  5495  0FA8  00BA               	movwf	___fttol@lval+1
  5496  0FA9  0832               	movf	___fttol@f1+2,w
  5497  0FAA  00BB               	movwf	___fttol@lval+2
  5498  0FAB  01BC               	clrf	___fttol@lval+3
  5499  0FAC  308E               	movlw	142
  5500  0FAD  02BD               	subwf	___fttol@exp1,f
  5501  0FAE  1FBD               	btfss	___fttol@exp1,7
  5502  0FAF  2FCE               	goto	i1l2438
  5503  0FB0  083D               	movf	___fttol@exp1,w
  5504  0FB1  3A80               	xorlw	128
  5505  0FB2  3E8F               	addlw	143
  5506  0FB3  1803               	skipnc
  5507  0FB4  2FBE               	goto	i1l2436
  5508  0FB5  3000               	movlw	0
  5509  0FB6  00B3               	movwf	?___fttol+3
  5510  0FB7  3000               	movlw	0
  5511  0FB8  00B2               	movwf	?___fttol+2
  5512  0FB9  3000               	movlw	0
  5513  0FBA  00B1               	movwf	?___fttol+1
  5514  0FBB  3000               	movlw	0
  5515  0FBC  00B0               	movwf	?___fttol
  5516  0FBD  0008               	return
  5517  0FBE                     i1l2436:	
  5518  0FBE  3001               	movlw	1
  5519  0FBF                     u308_25:	
  5520  0FBF  1003               	clrc
  5521  0FC0  0CBC               	rrf	___fttol@lval+3,f
  5522  0FC1  0CBB               	rrf	___fttol@lval+2,f
  5523  0FC2  0CBA               	rrf	___fttol@lval+1,f
  5524  0FC3  0CB9               	rrf	___fttol@lval,f
  5525  0FC4  3EFF               	addlw	-1
  5526  0FC5  1D03               	skipz
  5527  0FC6  2FBF               	goto	u308_25
  5528  0FC7  3001               	movlw	1
  5529  0FC8  00B4               	movwf	??___fttol
  5530  0FC9  0834               	movf	??___fttol,w
  5531  0FCA  07BD               	addwf	___fttol@exp1,f
  5532  0FCB  1903               	btfsc	3,2
  5533  0FCC  2FE9               	goto	i1l2448
  5534  0FCD  2FBE               	goto	i1l2436
  5535  0FCE                     i1l2438:	
  5536  0FCE  3018               	movlw	24
  5537  0FCF  023D               	subwf	___fttol@exp1,w
  5538  0FD0  1C03               	skipc
  5539  0FD1  2FE6               	goto	i1l2446
  5540  0FD2  3000               	movlw	0
  5541  0FD3  00B3               	movwf	?___fttol+3
  5542  0FD4  3000               	movlw	0
  5543  0FD5  00B2               	movwf	?___fttol+2
  5544  0FD6  3000               	movlw	0
  5545  0FD7  00B1               	movwf	?___fttol+1
  5546  0FD8  3000               	movlw	0
  5547  0FD9  00B0               	movwf	?___fttol
  5548  0FDA  0008               	return
  5549  0FDB                     i1l2444:	
  5550  0FDB  3001               	movlw	1
  5551  0FDC  00B4               	movwf	??___fttol
  5552  0FDD                     u311_25:	
  5553  0FDD  1003               	clrc
  5554  0FDE  0DB9               	rlf	___fttol@lval,f
  5555  0FDF  0DBA               	rlf	___fttol@lval+1,f
  5556  0FE0  0DBB               	rlf	___fttol@lval+2,f
  5557  0FE1  0DBC               	rlf	___fttol@lval+3,f
  5558  0FE2  0BB4               	decfsz	??___fttol,f
  5559  0FE3  2FDD               	goto	u311_25
  5560  0FE4  3001               	movlw	1
  5561  0FE5  02BD               	subwf	___fttol@exp1,f
  5562  0FE6                     i1l2446:	
  5563  0FE6  08BD               	movf	___fttol@exp1,f
  5564  0FE7  1D03               	skipz
  5565  0FE8  2FDB               	goto	i1l2444
  5566  0FE9                     i1l2448:	
  5567  0FE9  0838               	movf	___fttol@sign1,w
  5568  0FEA  1903               	btfsc	3,2
  5569  0FEB  2FF7               	goto	i1l2452
  5570  0FEC  09B9               	comf	___fttol@lval,f
  5571  0FED  09BA               	comf	___fttol@lval+1,f
  5572  0FEE  09BB               	comf	___fttol@lval+2,f
  5573  0FEF  09BC               	comf	___fttol@lval+3,f
  5574  0FF0  0AB9               	incf	___fttol@lval,f
  5575  0FF1  1903               	skipnz
  5576  0FF2  0ABA               	incf	___fttol@lval+1,f
  5577  0FF3  1903               	skipnz
  5578  0FF4  0ABB               	incf	___fttol@lval+2,f
  5579  0FF5  1903               	skipnz
  5580  0FF6  0ABC               	incf	___fttol@lval+3,f
  5581  0FF7                     i1l2452:	
  5582  0FF7  083C               	movf	___fttol@lval+3,w
  5583  0FF8  00B3               	movwf	?___fttol+3
  5584  0FF9  083B               	movf	___fttol@lval+2,w
  5585  0FFA  00B2               	movwf	?___fttol+2
  5586  0FFB  083A               	movf	___fttol@lval+1,w
  5587  0FFC  00B1               	movwf	?___fttol+1
  5588  0FFD  0839               	movf	___fttol@lval,w
  5589  0FFE  00B0               	movwf	?___fttol
  5590  0FFF  0008               	return
  5591  1000                     __end_of___fttol:	
  5592                           
  5593                           	psect	text29
  5594  08BD                     __ptext29:	
  5595 ;; *************** function ___ftsub *****************
  5596 ;; Defined at:
  5597 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftsub.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  f2              3    7[BANK0 ] float 
  5600 ;;  f1              3   10[BANK0 ] float 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;		None
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  3    7[BANK0 ] float 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0, pclath, cstack
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5612 ;;      Params:         0       6       0       0       0
  5613 ;;      Locals:         0       0       0       0       0
  5614 ;;      Temps:          0       0       0       0       0
  5615 ;;      Totals:         0       6       0       0       0
  5616 ;;Total ram usage:        6 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    2
  5619 ;; This function calls:
  5620 ;;		___ftadd
  5621 ;; This function is called by:
  5622 ;;		_ftoa
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function ___ftsub
  5628  08BD                     ___ftsub:	
  5629                           
  5630                           ;incstack = 0
  5631 ;; hardware stack exceeded
  5632                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5633  08BD  3080               	movlw	128
  5634  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  5635  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  5636  08C0  06A9               	xorwf	___ftsub@f2+2,f
  5637  08C1  082A               	movf	___ftsub@f1,w
  5638  08C2  00F8               	movwf	___ftadd@f1
  5639  08C3  082B               	movf	___ftsub@f1+1,w
  5640  08C4  00F9               	movwf	___ftadd@f1+1
  5641  08C5  082C               	movf	___ftsub@f1+2,w
  5642  08C6  00FA               	movwf	___ftadd@f1+2
  5643  08C7  0827               	movf	___ftsub@f2,w
  5644  08C8  00FB               	movwf	___ftadd@f2
  5645  08C9  0828               	movf	___ftsub@f2+1,w
  5646  08CA  00FC               	movwf	___ftadd@f2+1
  5647  08CB  0829               	movf	___ftsub@f2+2,w
  5648  08CC  00FD               	movwf	___ftadd@f2+2
  5649  08CD  120A  118A  243E   	fcall	___ftadd
  5650  08D0  0878               	movf	?___ftadd,w
  5651  08D1  1283               	bcf	3,5	;RP0=0, select bank0
  5652  08D2  1303               	bcf	3,6	;RP1=0, select bank0
  5653  08D3  00A7               	movwf	?___ftsub
  5654  08D4  0879               	movf	?___ftadd+1,w
  5655  08D5  00A8               	movwf	?___ftsub+1
  5656  08D6  087A               	movf	?___ftadd+2,w
  5657  08D7  00A9               	movwf	?___ftsub+2
  5658  08D8  0008               	return
  5659  08D9                     __end_of___ftsub:	
  5660                           
  5661                           	psect	text30
  5662  043E                     __ptext30:	
  5663 ;; *************** function ___ftadd *****************
  5664 ;; Defined at:
  5665 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  f1              3    8[COMMON] float 
  5668 ;;  f2              3   11[COMMON] float 
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;  exp1            1    6[BANK0 ] unsigned char 
  5671 ;;  exp2            1    5[BANK0 ] unsigned char 
  5672 ;;  sign            1    4[BANK0 ] unsigned char 
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  3    8[COMMON] float 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2, status,0, pclath, cstack
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5682 ;;      Params:         6       0       0       0       0
  5683 ;;      Locals:         0       3       0       0       0
  5684 ;;      Temps:          0       4       0       0       0
  5685 ;;      Totals:         6       7       0       0       0
  5686 ;;Total ram usage:       13 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    1
  5689 ;; This function calls:
  5690 ;;		___ftpack
  5691 ;; This function is called by:
  5692 ;;		___ftsub
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           
  5697                           ;psect for function ___ftadd
  5698  043E                     ___ftadd:	
  5699                           
  5700                           ;incstack = 0
  5701 ;; hardware stack exceeded
  5702                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5703  043E  0878               	movf	___ftadd@f1,w
  5704  043F  1283               	bcf	3,5	;RP0=0, select bank0
  5705  0440  1303               	bcf	3,6	;RP1=0, select bank0
  5706  0441  00A0               	movwf	??___ftadd
  5707  0442  0879               	movf	___ftadd@f1+1,w
  5708  0443  00A1               	movwf	??___ftadd+1
  5709  0444  087A               	movf	___ftadd@f1+2,w
  5710  0445  00A2               	movwf	??___ftadd+2
  5711  0446  1003               	clrc
  5712  0447  0D21               	rlf	??___ftadd+1,w
  5713  0448  0D22               	rlf	??___ftadd+2,w
  5714  0449  00A3               	movwf	??___ftadd+3
  5715  044A  0823               	movf	??___ftadd+3,w
  5716  044B  00A6               	movwf	___ftadd@exp1
  5717  044C  087B               	movf	___ftadd@f2,w
  5718  044D  00A0               	movwf	??___ftadd
  5719  044E  087C               	movf	___ftadd@f2+1,w
  5720  044F  00A1               	movwf	??___ftadd+1
  5721  0450  087D               	movf	___ftadd@f2+2,w
  5722  0451  00A2               	movwf	??___ftadd+2
  5723  0452  1003               	clrc
  5724  0453  0D21               	rlf	??___ftadd+1,w
  5725  0454  0D22               	rlf	??___ftadd+2,w
  5726  0455  00A3               	movwf	??___ftadd+3
  5727  0456  0823               	movf	??___ftadd+3,w
  5728  0457  00A5               	movwf	___ftadd@exp2
  5729  0458  0826               	movf	___ftadd@exp1,w
  5730  0459  1903               	btfsc	3,2
  5731  045A  2C67               	goto	i1l2036
  5732  045B  0825               	movf	___ftadd@exp2,w
  5733  045C  0226               	subwf	___ftadd@exp1,w
  5734  045D  1803               	skipnc
  5735  045E  2C6E               	goto	i1l2040
  5736  045F  0326               	decf	___ftadd@exp1,w
  5737  0460  3AFF               	xorlw	255
  5738  0461  0725               	addwf	___ftadd@exp2,w
  5739  0462  00A0               	movwf	??___ftadd
  5740  0463  3019               	movlw	25
  5741  0464  0220               	subwf	??___ftadd,w
  5742  0465  1C03               	skipc
  5743  0466  2C6E               	goto	i1l2040
  5744  0467                     i1l2036:	
  5745  0467  087B               	movf	___ftadd@f2,w
  5746  0468  00F8               	movwf	?___ftadd
  5747  0469  087C               	movf	___ftadd@f2+1,w
  5748  046A  00F9               	movwf	?___ftadd+1
  5749  046B  087D               	movf	___ftadd@f2+2,w
  5750  046C  00FA               	movwf	?___ftadd+2
  5751  046D  0008               	return
  5752  046E                     i1l2040:	
  5753  046E  0825               	movf	___ftadd@exp2,w
  5754  046F  1903               	btfsc	3,2
  5755  0470  0008               	return
  5756  0471  0826               	movf	___ftadd@exp1,w
  5757  0472  0225               	subwf	___ftadd@exp2,w
  5758  0473  1803               	skipnc
  5759  0474  2C7D               	goto	i1l2046
  5760  0475  0325               	decf	___ftadd@exp2,w
  5761  0476  3AFF               	xorlw	255
  5762  0477  0726               	addwf	___ftadd@exp1,w
  5763  0478  00A0               	movwf	??___ftadd
  5764  0479  3019               	movlw	25
  5765  047A  0220               	subwf	??___ftadd,w
  5766  047B  1803               	btfsc	3,0
  5767  047C  0008               	return
  5768  047D                     i1l2046:	
  5769  047D  3006               	movlw	6
  5770  047E  00A0               	movwf	??___ftadd
  5771  047F  0820               	movf	??___ftadd,w
  5772  0480  00A4               	movwf	___ftadd@sign
  5773  0481  1BFA               	btfsc	___ftadd@f1+2,7
  5774  0482  17A4               	bsf	___ftadd@sign,7
  5775  0483  1BFD               	btfsc	___ftadd@f2+2,7
  5776  0484  1724               	bsf	___ftadd@sign,6
  5777  0485  17F9               	bsf	___ftadd@f1+1,7
  5778  0486  30FF               	movlw	255
  5779  0487  05F8               	andwf	___ftadd@f1,f
  5780  0488  30FF               	movlw	255
  5781  0489  05F9               	andwf	___ftadd@f1+1,f
  5782  048A  3000               	movlw	0
  5783  048B  05FA               	andwf	___ftadd@f1+2,f
  5784  048C  17FC               	bsf	___ftadd@f2+1,7
  5785  048D  30FF               	movlw	255
  5786  048E  05FB               	andwf	___ftadd@f2,f
  5787  048F  30FF               	movlw	255
  5788  0490  05FC               	andwf	___ftadd@f2+1,f
  5789  0491  3000               	movlw	0
  5790  0492  05FD               	andwf	___ftadd@f2+2,f
  5791  0493  0825               	movf	___ftadd@exp2,w
  5792  0494  0226               	subwf	___ftadd@exp1,w
  5793  0495  1803               	skipnc
  5794  0496  2CBD               	goto	i1l2068
  5795  0497                     i1l2058:	
  5796  0497  3001               	movlw	1
  5797  0498                     u229_25:	
  5798  0498  1003               	clrc
  5799  0499  0DFB               	rlf	___ftadd@f2,f
  5800  049A  0DFC               	rlf	___ftadd@f2+1,f
  5801  049B  0DFD               	rlf	___ftadd@f2+2,f
  5802  049C  3EFF               	addlw	-1
  5803  049D  1D03               	skipz
  5804  049E  2C98               	goto	u229_25
  5805  049F  3001               	movlw	1
  5806  04A0  02A5               	subwf	___ftadd@exp2,f
  5807  04A1  0825               	movf	___ftadd@exp2,w
  5808  04A2  0626               	xorwf	___ftadd@exp1,w
  5809  04A3  1903               	skipnz
  5810  04A4  2CB8               	goto	i1l2066
  5811  04A5  3001               	movlw	1
  5812  04A6  02A4               	subwf	___ftadd@sign,f
  5813  04A7  0824               	movf	___ftadd@sign,w
  5814  04A8  3907               	andlw	7
  5815  04A9  1903               	btfsc	3,2
  5816  04AA  2CB8               	goto	i1l2066
  5817  04AB  2C97               	goto	i1l2058
  5818  04AC                     i1l2064:	
  5819  04AC  3001               	movlw	1
  5820  04AD                     u232_25:	
  5821  04AD  1003               	clrc
  5822  04AE  0CFA               	rrf	___ftadd@f1+2,f
  5823  04AF  0CF9               	rrf	___ftadd@f1+1,f
  5824  04B0  0CF8               	rrf	___ftadd@f1,f
  5825  04B1  3EFF               	addlw	-1
  5826  04B2  1D03               	skipz
  5827  04B3  2CAD               	goto	u232_25
  5828  04B4  3001               	movlw	1
  5829  04B5  00A0               	movwf	??___ftadd
  5830  04B6  0820               	movf	??___ftadd,w
  5831  04B7  07A6               	addwf	___ftadd@exp1,f
  5832  04B8                     i1l2066:	
  5833  04B8  0826               	movf	___ftadd@exp1,w
  5834  04B9  0625               	xorwf	___ftadd@exp2,w
  5835  04BA  1903               	btfsc	3,2
  5836  04BB  2CE6               	goto	i1l552
  5837  04BC  2CAC               	goto	i1l2064
  5838  04BD                     i1l2068:	
  5839  04BD  0826               	movf	___ftadd@exp1,w
  5840  04BE  0225               	subwf	___ftadd@exp2,w
  5841  04BF  1803               	skipnc
  5842  04C0  2CE6               	goto	i1l552
  5843  04C1                     i1l2070:	
  5844  04C1  3001               	movlw	1
  5845  04C2                     u235_25:	
  5846  04C2  1003               	clrc
  5847  04C3  0DF8               	rlf	___ftadd@f1,f
  5848  04C4  0DF9               	rlf	___ftadd@f1+1,f
  5849  04C5  0DFA               	rlf	___ftadd@f1+2,f
  5850  04C6  3EFF               	addlw	-1
  5851  04C7  1D03               	skipz
  5852  04C8  2CC2               	goto	u235_25
  5853  04C9  3001               	movlw	1
  5854  04CA  02A6               	subwf	___ftadd@exp1,f
  5855  04CB  0825               	movf	___ftadd@exp2,w
  5856  04CC  0626               	xorwf	___ftadd@exp1,w
  5857  04CD  1903               	skipnz
  5858  04CE  2CE2               	goto	i1l2078
  5859  04CF  3001               	movlw	1
  5860  04D0  02A4               	subwf	___ftadd@sign,f
  5861  04D1  0824               	movf	___ftadd@sign,w
  5862  04D2  3907               	andlw	7
  5863  04D3  1903               	btfsc	3,2
  5864  04D4  2CE2               	goto	i1l2078
  5865  04D5  2CC1               	goto	i1l2070
  5866  04D6                     i1l2076:	
  5867  04D6  3001               	movlw	1
  5868  04D7                     u238_25:	
  5869  04D7  1003               	clrc
  5870  04D8  0CFD               	rrf	___ftadd@f2+2,f
  5871  04D9  0CFC               	rrf	___ftadd@f2+1,f
  5872  04DA  0CFB               	rrf	___ftadd@f2,f
  5873  04DB  3EFF               	addlw	-1
  5874  04DC  1D03               	skipz
  5875  04DD  2CD7               	goto	u238_25
  5876  04DE  3001               	movlw	1
  5877  04DF  00A0               	movwf	??___ftadd
  5878  04E0  0820               	movf	??___ftadd,w
  5879  04E1  07A5               	addwf	___ftadd@exp2,f
  5880  04E2                     i1l2078:	
  5881  04E2  0826               	movf	___ftadd@exp1,w
  5882  04E3  0625               	xorwf	___ftadd@exp2,w
  5883  04E4  1D03               	skipz
  5884  04E5  2CD6               	goto	i1l2076
  5885  04E6                     i1l552:	
  5886  04E6  1FA4               	btfss	___ftadd@sign,7
  5887  04E7  2CF8               	goto	i1l2082
  5888  04E8  30FF               	movlw	255
  5889  04E9  06F8               	xorwf	___ftadd@f1,f
  5890  04EA  30FF               	movlw	255
  5891  04EB  06F9               	xorwf	___ftadd@f1+1,f
  5892  04EC  30FF               	movlw	255
  5893  04ED  06FA               	xorwf	___ftadd@f1+2,f
  5894  04EE  3001               	movlw	1
  5895  04EF  07F8               	addwf	___ftadd@f1,f
  5896  04F0  3000               	movlw	0
  5897  04F1  1803               	skipnc
  5898  04F2  3001               	movlw	1
  5899  04F3  07F9               	addwf	___ftadd@f1+1,f
  5900  04F4  3000               	movlw	0
  5901  04F5  1803               	skipnc
  5902  04F6  3001               	movlw	1
  5903  04F7  07FA               	addwf	___ftadd@f1+2,f
  5904  04F8                     i1l2082:	
  5905  04F8  1F24               	btfss	___ftadd@sign,6
  5906  04F9  2D0A               	goto	i1l2086
  5907  04FA  30FF               	movlw	255
  5908  04FB  06FB               	xorwf	___ftadd@f2,f
  5909  04FC  30FF               	movlw	255
  5910  04FD  06FC               	xorwf	___ftadd@f2+1,f
  5911  04FE  30FF               	movlw	255
  5912  04FF  06FD               	xorwf	___ftadd@f2+2,f
  5913  0500  3001               	movlw	1
  5914  0501  07FB               	addwf	___ftadd@f2,f
  5915  0502  3000               	movlw	0
  5916  0503  1803               	skipnc
  5917  0504  3001               	movlw	1
  5918  0505  07FC               	addwf	___ftadd@f2+1,f
  5919  0506  3000               	movlw	0
  5920  0507  1803               	skipnc
  5921  0508  3001               	movlw	1
  5922  0509  07FD               	addwf	___ftadd@f2+2,f
  5923  050A                     i1l2086:	
  5924  050A  01A4               	clrf	___ftadd@sign
  5925  050B  0878               	movf	___ftadd@f1,w
  5926  050C  07FB               	addwf	___ftadd@f2,f
  5927  050D  0879               	movf	___ftadd@f1+1,w
  5928  050E  1103               	clrz
  5929  050F  1803               	skipnc
  5930  0510  0A79               	incf	___ftadd@f1+1,w
  5931  0511  1D03               	btfss	3,2
  5932  0512  07FC               	addwf	___ftadd@f2+1,f
  5933  0513  087A               	movf	___ftadd@f1+2,w
  5934  0514  1103               	clrz
  5935  0515  1803               	skipnc
  5936  0516  0A7A               	incf	___ftadd@f1+2,w
  5937  0517  1D03               	btfss	3,2
  5938  0518  07FD               	addwf	___ftadd@f2+2,f
  5939  0519  1FFD               	btfss	___ftadd@f2+2,7
  5940  051A  2D2D               	goto	i1l2096
  5941  051B  30FF               	movlw	255
  5942  051C  06FB               	xorwf	___ftadd@f2,f
  5943  051D  30FF               	movlw	255
  5944  051E  06FC               	xorwf	___ftadd@f2+1,f
  5945  051F  30FF               	movlw	255
  5946  0520  06FD               	xorwf	___ftadd@f2+2,f
  5947  0521  3001               	movlw	1
  5948  0522  07FB               	addwf	___ftadd@f2,f
  5949  0523  3000               	movlw	0
  5950  0524  1803               	skipnc
  5951  0525  3001               	movlw	1
  5952  0526  07FC               	addwf	___ftadd@f2+1,f
  5953  0527  3000               	movlw	0
  5954  0528  1803               	skipnc
  5955  0529  3001               	movlw	1
  5956  052A  07FD               	addwf	___ftadd@f2+2,f
  5957  052B  01A4               	clrf	___ftadd@sign
  5958  052C  0AA4               	incf	___ftadd@sign,f
  5959  052D                     i1l2096:	
  5960  052D  087B               	movf	___ftadd@f2,w
  5961  052E  00F0               	movwf	___ftpack@arg
  5962  052F  087C               	movf	___ftadd@f2+1,w
  5963  0530  00F1               	movwf	___ftpack@arg+1
  5964  0531  087D               	movf	___ftadd@f2+2,w
  5965  0532  00F2               	movwf	___ftpack@arg+2
  5966  0533  0826               	movf	___ftadd@exp1,w
  5967  0534  00A0               	movwf	??___ftadd
  5968  0535  0820               	movf	??___ftadd,w
  5969  0536  00F3               	movwf	___ftpack@exp
  5970  0537  0824               	movf	___ftadd@sign,w
  5971  0538  00A1               	movwf	??___ftadd+1
  5972  0539  0821               	movf	??___ftadd+1,w
  5973  053A  00F4               	movwf	___ftpack@sign
  5974  053B  120A  118A  278A   	fcall	___ftpack
  5975  053E  0870               	movf	?___ftpack,w
  5976  053F  00F8               	movwf	?___ftadd
  5977  0540  0871               	movf	?___ftpack+1,w
  5978  0541  00F9               	movwf	?___ftadd+1
  5979  0542  0872               	movf	?___ftpack+2,w
  5980  0543  00FA               	movwf	?___ftadd+2
  5981  0544  0008               	return
  5982  0545                     __end_of___ftadd:	
  5983                           
  5984                           	psect	text31
  5985  17AF                     __ptext31:	
  5986 ;; *************** function ___ftneg *****************
  5987 ;; Defined at:
  5988 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  f1              3    0[COMMON] float 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  3    0[COMMON] float 
  5995 ;; Registers used:
  5996 ;;		wreg
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6002 ;;      Params:         3       0       0       0       0
  6003 ;;      Locals:         0       0       0       0       0
  6004 ;;      Temps:          0       0       0       0       0
  6005 ;;      Totals:         3       0       0       0       0
  6006 ;;Total ram usage:        3 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; This function calls:
  6009 ;;		Nothing
  6010 ;; This function is called by:
  6011 ;;		_ftoa
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           
  6016                           ;psect for function ___ftneg
  6017  17AF                     ___ftneg:	
  6018                           
  6019                           ;incstack = 0
  6020 ;; hardware stack exceeded
  6021                           ; Regs used in ___ftneg: [wreg]
  6022  17AF  0872               	movf	___ftneg@f1+2,w
  6023  17B0  0471               	iorwf	___ftneg@f1+1,w
  6024  17B1  0470               	iorwf	___ftneg@f1,w
  6025  17B2  1903               	skipnz
  6026  17B3  0008               	return
  6027  17B4  3080               	movlw	128
  6028  17B5  06F2               	xorwf	___ftneg@f1+2,f
  6029  17B6  0008               	return
  6030  17B7                     __end_of___ftneg:	
  6031                           
  6032                           	psect	text32
  6033  0545                     __ptext32:	
  6034 ;; *************** function ___ftmul *****************
  6035 ;; Defined at:
  6036 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  f1              3    0[BANK0 ] float 
  6039 ;;  f2              3    3[BANK0 ] float 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6042 ;;  sign            1   15[BANK0 ] unsigned char 
  6043 ;;  cntr            1   14[BANK0 ] unsigned char 
  6044 ;;  exp             1   10[BANK0 ] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  3    0[BANK0 ] float 
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0, pclath, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6054 ;;      Params:         0       6       0       0       0
  6055 ;;      Locals:         0       6       0       0       0
  6056 ;;      Temps:          0       4       0       0       0
  6057 ;;      Totals:         0      16       0       0       0
  6058 ;;Total ram usage:       16 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    1
  6061 ;; This function calls:
  6062 ;;		___ftpack
  6063 ;; This function is called by:
  6064 ;;		_ISR
  6065 ;;		_ftoa
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function ___ftmul
  6071  0545                     ___ftmul:	
  6072                           
  6073                           ;incstack = 0
  6074 ;; hardware stack exceeded
  6075                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6076  0545  1283               	bcf	3,5	;RP0=0, select bank0
  6077  0546  1303               	bcf	3,6	;RP1=0, select bank0
  6078  0547  0820               	movf	___ftmul@f1,w
  6079  0548  00A6               	movwf	??___ftmul
  6080  0549  0821               	movf	___ftmul@f1+1,w
  6081  054A  00A7               	movwf	??___ftmul+1
  6082  054B  0822               	movf	___ftmul@f1+2,w
  6083  054C  00A8               	movwf	??___ftmul+2
  6084  054D  1003               	clrc
  6085  054E  0D27               	rlf	??___ftmul+1,w
  6086  054F  0D28               	rlf	??___ftmul+2,w
  6087  0550  00A9               	movwf	??___ftmul+3
  6088  0551  0829               	movf	??___ftmul+3,w
  6089  0552  00AA               	movwf	___ftmul@exp
  6090  0553  08AA               	movf	___ftmul@exp,f
  6091  0554  1D03               	skipz
  6092  0555  2D5D               	goto	i1l2354
  6093  0556  3000               	movlw	0
  6094  0557  00A0               	movwf	?___ftmul
  6095  0558  3000               	movlw	0
  6096  0559  00A1               	movwf	?___ftmul+1
  6097  055A  3000               	movlw	0
  6098  055B  00A2               	movwf	?___ftmul+2
  6099  055C  0008               	return
  6100  055D                     i1l2354:	
  6101  055D  0823               	movf	___ftmul@f2,w
  6102  055E  00A6               	movwf	??___ftmul
  6103  055F  0824               	movf	___ftmul@f2+1,w
  6104  0560  00A7               	movwf	??___ftmul+1
  6105  0561  0825               	movf	___ftmul@f2+2,w
  6106  0562  00A8               	movwf	??___ftmul+2
  6107  0563  1003               	clrc
  6108  0564  0D27               	rlf	??___ftmul+1,w
  6109  0565  0D28               	rlf	??___ftmul+2,w
  6110  0566  00A9               	movwf	??___ftmul+3
  6111  0567  0829               	movf	??___ftmul+3,w
  6112  0568  00AF               	movwf	___ftmul@sign
  6113  0569  08AF               	movf	___ftmul@sign,f
  6114  056A  1D03               	skipz
  6115  056B  2D73               	goto	i1l2360
  6116  056C  3000               	movlw	0
  6117  056D  00A0               	movwf	?___ftmul
  6118  056E  3000               	movlw	0
  6119  056F  00A1               	movwf	?___ftmul+1
  6120  0570  3000               	movlw	0
  6121  0571  00A2               	movwf	?___ftmul+2
  6122  0572  0008               	return
  6123  0573                     i1l2360:	
  6124  0573  082F               	movf	___ftmul@sign,w
  6125  0574  3E7B               	addlw	123
  6126  0575  00A6               	movwf	??___ftmul
  6127  0576  0826               	movf	??___ftmul,w
  6128  0577  07AA               	addwf	___ftmul@exp,f
  6129  0578  0820               	movf	___ftmul@f1,w
  6130  0579  00A6               	movwf	??___ftmul
  6131  057A  0821               	movf	___ftmul@f1+1,w
  6132  057B  00A7               	movwf	??___ftmul+1
  6133  057C  0822               	movf	___ftmul@f1+2,w
  6134  057D  00A8               	movwf	??___ftmul+2
  6135  057E  3010               	movlw	16
  6136  057F                     u291_25:	
  6137  057F  1003               	clrc
  6138  0580  0CA8               	rrf	??___ftmul+2,f
  6139  0581  0CA7               	rrf	??___ftmul+1,f
  6140  0582  0CA6               	rrf	??___ftmul,f
  6141  0583  3EFF               	addlw	-1
  6142  0584  1D03               	skipz
  6143  0585  2D7F               	goto	u291_25
  6144  0586  0826               	movf	??___ftmul,w
  6145  0587  00A9               	movwf	??___ftmul+3
  6146  0588  0829               	movf	??___ftmul+3,w
  6147  0589  00AF               	movwf	___ftmul@sign
  6148  058A  0823               	movf	___ftmul@f2,w
  6149  058B  00A6               	movwf	??___ftmul
  6150  058C  0824               	movf	___ftmul@f2+1,w
  6151  058D  00A7               	movwf	??___ftmul+1
  6152  058E  0825               	movf	___ftmul@f2+2,w
  6153  058F  00A8               	movwf	??___ftmul+2
  6154  0590  3010               	movlw	16
  6155  0591                     u292_25:	
  6156  0591  1003               	clrc
  6157  0592  0CA8               	rrf	??___ftmul+2,f
  6158  0593  0CA7               	rrf	??___ftmul+1,f
  6159  0594  0CA6               	rrf	??___ftmul,f
  6160  0595  3EFF               	addlw	-1
  6161  0596  1D03               	skipz
  6162  0597  2D91               	goto	u292_25
  6163  0598  0826               	movf	??___ftmul,w
  6164  0599  00A9               	movwf	??___ftmul+3
  6165  059A  0829               	movf	??___ftmul+3,w
  6166  059B  06AF               	xorwf	___ftmul@sign,f
  6167  059C  3080               	movlw	128
  6168  059D  00A6               	movwf	??___ftmul
  6169  059E  0826               	movf	??___ftmul,w
  6170  059F  05AF               	andwf	___ftmul@sign,f
  6171  05A0  17A1               	bsf	___ftmul@f1+1,7
  6172  05A1  17A4               	bsf	___ftmul@f2+1,7
  6173  05A2  30FF               	movlw	255
  6174  05A3  05A3               	andwf	___ftmul@f2,f
  6175  05A4  30FF               	movlw	255
  6176  05A5  05A4               	andwf	___ftmul@f2+1,f
  6177  05A6  3000               	movlw	0
  6178  05A7  05A5               	andwf	___ftmul@f2+2,f
  6179  05A8  3000               	movlw	0
  6180  05A9  00AB               	movwf	___ftmul@f3_as_product
  6181  05AA  3000               	movlw	0
  6182  05AB  00AC               	movwf	___ftmul@f3_as_product+1
  6183  05AC  3000               	movlw	0
  6184  05AD  00AD               	movwf	___ftmul@f3_as_product+2
  6185  05AE  3007               	movlw	7
  6186  05AF  00A6               	movwf	??___ftmul
  6187  05B0  0826               	movf	??___ftmul,w
  6188  05B1  00AE               	movwf	___ftmul@cntr
  6189  05B2                     i1l2372:	
  6190  05B2  1C20               	btfss	___ftmul@f1,0
  6191  05B3  2DC2               	goto	i1l2376
  6192  05B4  0823               	movf	___ftmul@f2,w
  6193  05B5  07AB               	addwf	___ftmul@f3_as_product,f
  6194  05B6  0824               	movf	___ftmul@f2+1,w
  6195  05B7  1103               	clrz
  6196  05B8  1803               	skipnc
  6197  05B9  0A24               	incf	___ftmul@f2+1,w
  6198  05BA  1D03               	btfss	3,2
  6199  05BB  07AC               	addwf	___ftmul@f3_as_product+1,f
  6200  05BC  0825               	movf	___ftmul@f2+2,w
  6201  05BD  1103               	clrz
  6202  05BE  1803               	skipnc
  6203  05BF  0A25               	incf	___ftmul@f2+2,w
  6204  05C0  1D03               	btfss	3,2
  6205  05C1  07AD               	addwf	___ftmul@f3_as_product+2,f
  6206  05C2                     i1l2376:	
  6207  05C2  3001               	movlw	1
  6208  05C3                     u295_25:	
  6209  05C3  1003               	clrc
  6210  05C4  0CA2               	rrf	___ftmul@f1+2,f
  6211  05C5  0CA1               	rrf	___ftmul@f1+1,f
  6212  05C6  0CA0               	rrf	___ftmul@f1,f
  6213  05C7  3EFF               	addlw	-1
  6214  05C8  1D03               	skipz
  6215  05C9  2DC3               	goto	u295_25
  6216  05CA  3001               	movlw	1
  6217  05CB                     u296_25:	
  6218  05CB  1003               	clrc
  6219  05CC  0DA3               	rlf	___ftmul@f2,f
  6220  05CD  0DA4               	rlf	___ftmul@f2+1,f
  6221  05CE  0DA5               	rlf	___ftmul@f2+2,f
  6222  05CF  3EFF               	addlw	-1
  6223  05D0  1D03               	skipz
  6224  05D1  2DCB               	goto	u296_25
  6225  05D2  3001               	movlw	1
  6226  05D3  02AE               	subwf	___ftmul@cntr,f
  6227  05D4  1D03               	btfss	3,2
  6228  05D5  2DB2               	goto	i1l2372
  6229  05D6  3009               	movlw	9
  6230  05D7  00A6               	movwf	??___ftmul
  6231  05D8  0826               	movf	??___ftmul,w
  6232  05D9  00AE               	movwf	___ftmul@cntr
  6233  05DA                     i1l2384:	
  6234  05DA  1C20               	btfss	___ftmul@f1,0
  6235  05DB  2DEA               	goto	i1l2388
  6236  05DC  0823               	movf	___ftmul@f2,w
  6237  05DD  07AB               	addwf	___ftmul@f3_as_product,f
  6238  05DE  0824               	movf	___ftmul@f2+1,w
  6239  05DF  1103               	clrz
  6240  05E0  1803               	skipnc
  6241  05E1  0A24               	incf	___ftmul@f2+1,w
  6242  05E2  1D03               	btfss	3,2
  6243  05E3  07AC               	addwf	___ftmul@f3_as_product+1,f
  6244  05E4  0825               	movf	___ftmul@f2+2,w
  6245  05E5  1103               	clrz
  6246  05E6  1803               	skipnc
  6247  05E7  0A25               	incf	___ftmul@f2+2,w
  6248  05E8  1D03               	btfss	3,2
  6249  05E9  07AD               	addwf	___ftmul@f3_as_product+2,f
  6250  05EA                     i1l2388:	
  6251  05EA  3001               	movlw	1
  6252  05EB                     u300_25:	
  6253  05EB  1003               	clrc
  6254  05EC  0CA2               	rrf	___ftmul@f1+2,f
  6255  05ED  0CA1               	rrf	___ftmul@f1+1,f
  6256  05EE  0CA0               	rrf	___ftmul@f1,f
  6257  05EF  3EFF               	addlw	-1
  6258  05F0  1D03               	skipz
  6259  05F1  2DEB               	goto	u300_25
  6260  05F2  3001               	movlw	1
  6261  05F3                     u301_25:	
  6262  05F3  1003               	clrc
  6263  05F4  0CAD               	rrf	___ftmul@f3_as_product+2,f
  6264  05F5  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6265  05F6  0CAB               	rrf	___ftmul@f3_as_product,f
  6266  05F7  3EFF               	addlw	-1
  6267  05F8  1D03               	skipz
  6268  05F9  2DF3               	goto	u301_25
  6269  05FA  3001               	movlw	1
  6270  05FB  02AE               	subwf	___ftmul@cntr,f
  6271  05FC  1D03               	btfss	3,2
  6272  05FD  2DDA               	goto	i1l2384
  6273  05FE  082B               	movf	___ftmul@f3_as_product,w
  6274  05FF  00F0               	movwf	___ftpack@arg
  6275  0600  082C               	movf	___ftmul@f3_as_product+1,w
  6276  0601  00F1               	movwf	___ftpack@arg+1
  6277  0602  082D               	movf	___ftmul@f3_as_product+2,w
  6278  0603  00F2               	movwf	___ftpack@arg+2
  6279  0604  082A               	movf	___ftmul@exp,w
  6280  0605  00A6               	movwf	??___ftmul
  6281  0606  0826               	movf	??___ftmul,w
  6282  0607  00F3               	movwf	___ftpack@exp
  6283  0608  082F               	movf	___ftmul@sign,w
  6284  0609  00A7               	movwf	??___ftmul+1
  6285  060A  0827               	movf	??___ftmul+1,w
  6286  060B  00F4               	movwf	___ftpack@sign
  6287  060C  120A  118A  278A   	fcall	___ftpack
  6288  060F  0870               	movf	?___ftpack,w
  6289  0610  1283               	bcf	3,5	;RP0=0, select bank0
  6290  0611  1303               	bcf	3,6	;RP1=0, select bank0
  6291  0612  00A0               	movwf	?___ftmul
  6292  0613  0871               	movf	?___ftpack+1,w
  6293  0614  00A1               	movwf	?___ftmul+1
  6294  0615  0872               	movf	?___ftpack+2,w
  6295  0616  00A2               	movwf	?___ftmul+2
  6296  0617  0008               	return
  6297  0618                     __end_of___ftmul:	
  6298                           
  6299                           	psect	text33
  6300  0DD5                     __ptext33:	
  6301 ;; *************** function ___ftge *****************
  6302 ;; Defined at:
  6303 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftge.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;  ff1             3    0[COMMON] float 
  6306 ;;  ff2             3    3[COMMON] float 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;		None               void
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6318 ;;      Params:         6       0       0       0       0
  6319 ;;      Locals:         0       0       0       0       0
  6320 ;;      Temps:          6       0       0       0       0
  6321 ;;      Totals:        12       0       0       0       0
  6322 ;;Total ram usage:       12 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_ftoa
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function ___ftge
  6333  0DD5                     ___ftge:	
  6334                           
  6335                           ;incstack = 0
  6336 ;; hardware stack exceeded
  6337                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6338  0DD5  1FF2               	btfss	___ftge@ff1+2,7
  6339  0DD6  2DFC               	goto	i1l2332
  6340  0DD7  3000               	movlw	0
  6341  0DD8  00F6               	movwf	??___ftge
  6342  0DD9  3000               	movlw	0
  6343  0DDA  00F7               	movwf	??___ftge+1
  6344  0DDB  3080               	movlw	128
  6345  0DDC  00F8               	movwf	??___ftge+2
  6346  0DDD  0970               	comf	___ftge@ff1,w
  6347  0DDE  00F9               	movwf	??___ftge+3
  6348  0DDF  0971               	comf	___ftge@ff1+1,w
  6349  0DE0  00FA               	movwf	??___ftge+4
  6350  0DE1  0972               	comf	___ftge@ff1+2,w
  6351  0DE2  00FB               	movwf	??___ftge+5
  6352  0DE3  0AF9               	incf	??___ftge+3,f
  6353  0DE4  1903               	skipnz
  6354  0DE5  0AFA               	incf	??___ftge+4,f
  6355  0DE6  1903               	skipnz
  6356  0DE7  0AFB               	incf	??___ftge+5,f
  6357  0DE8  0879               	movf	??___ftge+3,w
  6358  0DE9  07F6               	addwf	??___ftge,f
  6359  0DEA  087A               	movf	??___ftge+4,w
  6360  0DEB  1803               	skipnc
  6361  0DEC  0F7A               	incfsz	??___ftge+4,w
  6362  0DED  2DEF               	goto	u285_21
  6363  0DEE  2DF0               	goto	u285_22
  6364  0DEF                     u285_21:	
  6365  0DEF  07F7               	addwf	??___ftge+1,f
  6366  0DF0                     u285_22:	
  6367  0DF0  087B               	movf	??___ftge+5,w
  6368  0DF1  1803               	skipnc
  6369  0DF2  0F7B               	incfsz	??___ftge+5,w
  6370  0DF3  2DF5               	goto	u285_23
  6371  0DF4  2DF6               	goto	u285_24
  6372  0DF5                     u285_23:	
  6373  0DF5  07F8               	addwf	??___ftge+2,f
  6374  0DF6                     u285_24:	
  6375  0DF6  0876               	movf	??___ftge,w
  6376  0DF7  00F0               	movwf	___ftge@ff1
  6377  0DF8  0877               	movf	??___ftge+1,w
  6378  0DF9  00F1               	movwf	___ftge@ff1+1
  6379  0DFA  0878               	movf	??___ftge+2,w
  6380  0DFB  00F2               	movwf	___ftge@ff1+2
  6381  0DFC                     i1l2332:	
  6382  0DFC  1FF5               	btfss	___ftge@ff2+2,7
  6383  0DFD  2E23               	goto	i1l2336
  6384  0DFE  3000               	movlw	0
  6385  0DFF  00F6               	movwf	??___ftge
  6386  0E00  3000               	movlw	0
  6387  0E01  00F7               	movwf	??___ftge+1
  6388  0E02  3080               	movlw	128
  6389  0E03  00F8               	movwf	??___ftge+2
  6390  0E04  0973               	comf	___ftge@ff2,w
  6391  0E05  00F9               	movwf	??___ftge+3
  6392  0E06  0974               	comf	___ftge@ff2+1,w
  6393  0E07  00FA               	movwf	??___ftge+4
  6394  0E08  0975               	comf	___ftge@ff2+2,w
  6395  0E09  00FB               	movwf	??___ftge+5
  6396  0E0A  0AF9               	incf	??___ftge+3,f
  6397  0E0B  1903               	skipnz
  6398  0E0C  0AFA               	incf	??___ftge+4,f
  6399  0E0D  1903               	skipnz
  6400  0E0E  0AFB               	incf	??___ftge+5,f
  6401  0E0F  0879               	movf	??___ftge+3,w
  6402  0E10  07F6               	addwf	??___ftge,f
  6403  0E11  087A               	movf	??___ftge+4,w
  6404  0E12  1803               	skipnc
  6405  0E13  0F7A               	incfsz	??___ftge+4,w
  6406  0E14  2E16               	goto	u287_21
  6407  0E15  2E17               	goto	u287_22
  6408  0E16                     u287_21:	
  6409  0E16  07F7               	addwf	??___ftge+1,f
  6410  0E17                     u287_22:	
  6411  0E17  087B               	movf	??___ftge+5,w
  6412  0E18  1803               	skipnc
  6413  0E19  0F7B               	incfsz	??___ftge+5,w
  6414  0E1A  2E1C               	goto	u287_23
  6415  0E1B  2E1D               	goto	u287_24
  6416  0E1C                     u287_23:	
  6417  0E1C  07F8               	addwf	??___ftge+2,f
  6418  0E1D                     u287_24:	
  6419  0E1D  0876               	movf	??___ftge,w
  6420  0E1E  00F3               	movwf	___ftge@ff2
  6421  0E1F  0877               	movf	??___ftge+1,w
  6422  0E20  00F4               	movwf	___ftge@ff2+1
  6423  0E21  0878               	movf	??___ftge+2,w
  6424  0E22  00F5               	movwf	___ftge@ff2+2
  6425  0E23                     i1l2336:	
  6426  0E23  3080               	movlw	128
  6427  0E24  06F2               	xorwf	___ftge@ff1+2,f
  6428  0E25  3080               	movlw	128
  6429  0E26  06F5               	xorwf	___ftge@ff2+2,f
  6430  0E27  0875               	movf	___ftge@ff2+2,w
  6431  0E28  0272               	subwf	___ftge@ff1+2,w
  6432  0E29  1D03               	skipz
  6433  0E2A  0008               	return
  6434  0E2B  0874               	movf	___ftge@ff2+1,w
  6435  0E2C  0271               	subwf	___ftge@ff1+1,w
  6436  0E2D  1D03               	skipz
  6437  0E2E  0008               	return
  6438  0E2F  0873               	movf	___ftge@ff2,w
  6439  0E30  0270               	subwf	___ftge@ff1,w
  6440  0E31  0008               	return
  6441  0E32                     __end_of___ftge:	
  6442                           
  6443                           	psect	text34
  6444  0939                     __ptext34:	
  6445 ;; *************** function _active *****************
  6446 ;; Defined at:
  6447 ;;		line 144 in file "main.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  input           1    wreg     unsigned char 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  input           1    2[COMMON] unsigned char 
  6452 ;; Return value:  Size  Location     Type
  6453 ;;		None               void
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0, pclath, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6461 ;;      Params:         0       0       0       0       0
  6462 ;;      Locals:         1       0       0       0       0
  6463 ;;      Temps:          1       0       0       0       0
  6464 ;;      Totals:         2       0       0       0       0
  6465 ;;Total ram usage:        2 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    1
  6468 ;; This function calls:
  6469 ;;		i1_USARTWriteChar
  6470 ;; This function is called by:
  6471 ;;		_ISR
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _active
  6477  0939                     _active:	
  6478                           
  6479                           ;incstack = 0
  6480 ;; hardware stack exceeded
  6481                           ; Regs used in _active: [wreg+status,2+status,0+pclath+cstack]
  6482                           ;active@input stored from wreg
  6483  0939  00F2               	movwf	active@input
  6484                           
  6485                           ;main.c: 146: if (input == 'B') {
  6486  093A  0872               	movf	active@input,w
  6487  093B  3A42               	xorlw	66
  6488  093C  1D03               	skipz
  6489  093D  2947               	goto	i1l2514
  6490                           
  6491                           ;main.c: 148: PORTDbits.RD2 = 0;
  6492  093E  1283               	bcf	3,5	;RP0=0, select bank0
  6493  093F  1303               	bcf	3,6	;RP1=0, select bank0
  6494  0940  1108               	bcf	8,2	;volatile
  6495                           
  6496                           ;main.c: 149: PORTDbits.RD3 = 1;
  6497  0941  1588               	bsf	8,3	;volatile
  6498                           
  6499                           ;main.c: 150: USARTWriteChar('B');
  6500  0942  3042               	movlw	66
  6501  0943  160A  118A  27A7   	fcall	i1_USARTWriteChar
  6502                           
  6503                           ;main.c: 152: } else if (input == 'b') {
  6504  0946  0008               	return
  6505  0947                     i1l2514:	
  6506  0947  0872               	movf	active@input,w
  6507  0948  3A62               	xorlw	98
  6508  0949  1D03               	skipz
  6509  094A  2954               	goto	i1l2520
  6510                           
  6511                           ;main.c: 154: PORTDbits.RD2 = 1;
  6512  094B  1283               	bcf	3,5	;RP0=0, select bank0
  6513  094C  1303               	bcf	3,6	;RP1=0, select bank0
  6514  094D  1508               	bsf	8,2	;volatile
  6515                           
  6516                           ;main.c: 155: PORTDbits.RD3 = 0;
  6517  094E  1188               	bcf	8,3	;volatile
  6518                           
  6519                           ;main.c: 156: USARTWriteChar('b');
  6520  094F  3062               	movlw	98
  6521  0950  160A  118A  27A7   	fcall	i1_USARTWriteChar
  6522                           
  6523                           ;main.c: 158: } else if (input = 'M') {
  6524  0953  0008               	return
  6525  0954                     i1l2520:	
  6526  0954  304D               	movlw	77
  6527  0955  00F1               	movwf	??_active
  6528  0956  0871               	movf	??_active,w
  6529  0957  00F2               	movwf	active@input
  6530                           
  6531                           ;main.c: 160: PORTDbits.RD6 = 0;
  6532  0958  1283               	bcf	3,5	;RP0=0, select bank0
  6533  0959  1303               	bcf	3,6	;RP1=0, select bank0
  6534  095A  1308               	bcf	8,6	;volatile
  6535                           
  6536                           ;main.c: 162: } else if (input == 'm') {
  6537  095B  0008               	return
  6538  095C                     __end_of_active:	
  6539                           ;main.c: 175: USARTWriteChar('l');
  6540                           
  6541                           ;main.c: 174: PORTDbits.RD7 = 0;
  6542                           
  6543                           ;main.c: 172: } else if (input == 'l') {
  6544                           
  6545                           ;main.c: 170: USARTWriteChar('L');
  6546                           
  6547                           ;main.c: 169: PORTDbits.RD7 = 1;
  6548                           
  6549                           ;main.c: 167: } else if (input == 'L') {
  6550                           
  6551                           ;main.c: 165: USARTWriteChar('m');
  6552                           
  6553                           ;main.c: 164: PORTDbits.RD6 = 1;
  6554                           
  6555                           
  6556                           	psect	text35
  6557  06D2                     __ptext35:	
  6558 ;; *************** function ___ftdiv *****************
  6559 ;; Defined at:
  6560 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  f2              3   16[BANK0 ] float 
  6563 ;;  f1              3   19[BANK0 ] float 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  f3              3   27[BANK0 ] float 
  6566 ;;  sign            1   31[BANK0 ] unsigned char 
  6567 ;;  exp             1   30[BANK0 ] unsigned char 
  6568 ;;  cntr            1   26[BANK0 ] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  3   16[BANK0 ] float 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0, pclath, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6578 ;;      Params:         0       6       0       0       0
  6579 ;;      Locals:         0       6       0       0       0
  6580 ;;      Temps:          0       4       0       0       0
  6581 ;;      Totals:         0      16       0       0       0
  6582 ;;Total ram usage:       16 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    1
  6585 ;; This function calls:
  6586 ;;		___ftpack
  6587 ;; This function is called by:
  6588 ;;		_ISR
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function ___ftdiv
  6594  06D2                     ___ftdiv:	
  6595                           
  6596                           ;incstack = 0
  6597 ;; hardware stack exceeded
  6598                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6599  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  6600  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  6601  06D4  0833               	movf	___ftdiv@f1,w
  6602  06D5  00B6               	movwf	??___ftdiv
  6603  06D6  0834               	movf	___ftdiv@f1+1,w
  6604  06D7  00B7               	movwf	??___ftdiv+1
  6605  06D8  0835               	movf	___ftdiv@f1+2,w
  6606  06D9  00B8               	movwf	??___ftdiv+2
  6607  06DA  1003               	clrc
  6608  06DB  0D37               	rlf	??___ftdiv+1,w
  6609  06DC  0D38               	rlf	??___ftdiv+2,w
  6610  06DD  00B9               	movwf	??___ftdiv+3
  6611  06DE  0839               	movf	??___ftdiv+3,w
  6612  06DF  00BE               	movwf	___ftdiv@exp
  6613  06E0  08BE               	movf	___ftdiv@exp,f
  6614  06E1  1D03               	skipz
  6615  06E2  2EEA               	goto	i1l2754
  6616  06E3  3000               	movlw	0
  6617  06E4  00B0               	movwf	?___ftdiv
  6618  06E5  3000               	movlw	0
  6619  06E6  00B1               	movwf	?___ftdiv+1
  6620  06E7  3000               	movlw	0
  6621  06E8  00B2               	movwf	?___ftdiv+2
  6622  06E9  0008               	return
  6623  06EA                     i1l2754:	
  6624  06EA  0830               	movf	___ftdiv@f2,w
  6625  06EB  00B6               	movwf	??___ftdiv
  6626  06EC  0831               	movf	___ftdiv@f2+1,w
  6627  06ED  00B7               	movwf	??___ftdiv+1
  6628  06EE  0832               	movf	___ftdiv@f2+2,w
  6629  06EF  00B8               	movwf	??___ftdiv+2
  6630  06F0  1003               	clrc
  6631  06F1  0D37               	rlf	??___ftdiv+1,w
  6632  06F2  0D38               	rlf	??___ftdiv+2,w
  6633  06F3  00B9               	movwf	??___ftdiv+3
  6634  06F4  0839               	movf	??___ftdiv+3,w
  6635  06F5  00BF               	movwf	___ftdiv@sign
  6636  06F6  08BF               	movf	___ftdiv@sign,f
  6637  06F7  1D03               	skipz
  6638  06F8  2F00               	goto	i1l2760
  6639  06F9  3000               	movlw	0
  6640  06FA  00B0               	movwf	?___ftdiv
  6641  06FB  3000               	movlw	0
  6642  06FC  00B1               	movwf	?___ftdiv+1
  6643  06FD  3000               	movlw	0
  6644  06FE  00B2               	movwf	?___ftdiv+2
  6645  06FF  0008               	return
  6646  0700                     i1l2760:	
  6647  0700  3000               	movlw	0
  6648  0701  00BB               	movwf	___ftdiv@f3
  6649  0702  3000               	movlw	0
  6650  0703  00BC               	movwf	___ftdiv@f3+1
  6651  0704  3000               	movlw	0
  6652  0705  00BD               	movwf	___ftdiv@f3+2
  6653  0706  3089               	movlw	137
  6654  0707  073F               	addwf	___ftdiv@sign,w
  6655  0708  00B6               	movwf	??___ftdiv
  6656  0709  0836               	movf	??___ftdiv,w
  6657  070A  02BE               	subwf	___ftdiv@exp,f
  6658  070B  0833               	movf	___ftdiv@f1,w
  6659  070C  00B6               	movwf	??___ftdiv
  6660  070D  0834               	movf	___ftdiv@f1+1,w
  6661  070E  00B7               	movwf	??___ftdiv+1
  6662  070F  0835               	movf	___ftdiv@f1+2,w
  6663  0710  00B8               	movwf	??___ftdiv+2
  6664  0711  3010               	movlw	16
  6665  0712                     u355_25:	
  6666  0712  1003               	clrc
  6667  0713  0CB8               	rrf	??___ftdiv+2,f
  6668  0714  0CB7               	rrf	??___ftdiv+1,f
  6669  0715  0CB6               	rrf	??___ftdiv,f
  6670  0716  3EFF               	addlw	-1
  6671  0717  1D03               	skipz
  6672  0718  2F12               	goto	u355_25
  6673  0719  0836               	movf	??___ftdiv,w
  6674  071A  00B9               	movwf	??___ftdiv+3
  6675  071B  0839               	movf	??___ftdiv+3,w
  6676  071C  00BF               	movwf	___ftdiv@sign
  6677  071D  0830               	movf	___ftdiv@f2,w
  6678  071E  00B6               	movwf	??___ftdiv
  6679  071F  0831               	movf	___ftdiv@f2+1,w
  6680  0720  00B7               	movwf	??___ftdiv+1
  6681  0721  0832               	movf	___ftdiv@f2+2,w
  6682  0722  00B8               	movwf	??___ftdiv+2
  6683  0723  3010               	movlw	16
  6684  0724                     u356_25:	
  6685  0724  1003               	clrc
  6686  0725  0CB8               	rrf	??___ftdiv+2,f
  6687  0726  0CB7               	rrf	??___ftdiv+1,f
  6688  0727  0CB6               	rrf	??___ftdiv,f
  6689  0728  3EFF               	addlw	-1
  6690  0729  1D03               	skipz
  6691  072A  2F24               	goto	u356_25
  6692  072B  0836               	movf	??___ftdiv,w
  6693  072C  00B9               	movwf	??___ftdiv+3
  6694  072D  0839               	movf	??___ftdiv+3,w
  6695  072E  06BF               	xorwf	___ftdiv@sign,f
  6696  072F  3080               	movlw	128
  6697  0730  00B6               	movwf	??___ftdiv
  6698  0731  0836               	movf	??___ftdiv,w
  6699  0732  05BF               	andwf	___ftdiv@sign,f
  6700  0733  17B4               	bsf	___ftdiv@f1+1,7
  6701  0734  30FF               	movlw	255
  6702  0735  05B3               	andwf	___ftdiv@f1,f
  6703  0736  30FF               	movlw	255
  6704  0737  05B4               	andwf	___ftdiv@f1+1,f
  6705  0738  3000               	movlw	0
  6706  0739  05B5               	andwf	___ftdiv@f1+2,f
  6707  073A  17B1               	bsf	___ftdiv@f2+1,7
  6708  073B  30FF               	movlw	255
  6709  073C  05B0               	andwf	___ftdiv@f2,f
  6710  073D  30FF               	movlw	255
  6711  073E  05B1               	andwf	___ftdiv@f2+1,f
  6712  073F  3000               	movlw	0
  6713  0740  05B2               	andwf	___ftdiv@f2+2,f
  6714  0741  3018               	movlw	24
  6715  0742  00B6               	movwf	??___ftdiv
  6716  0743  0836               	movf	??___ftdiv,w
  6717  0744  00BA               	movwf	___ftdiv@cntr
  6718  0745                     i1l2774:	
  6719  0745  3001               	movlw	1
  6720  0746                     u357_25:	
  6721  0746  1003               	clrc
  6722  0747  0DBB               	rlf	___ftdiv@f3,f
  6723  0748  0DBC               	rlf	___ftdiv@f3+1,f
  6724  0749  0DBD               	rlf	___ftdiv@f3+2,f
  6725  074A  3EFF               	addlw	-1
  6726  074B  1D03               	skipz
  6727  074C  2F46               	goto	u357_25
  6728  074D  0832               	movf	___ftdiv@f2+2,w
  6729  074E  0235               	subwf	___ftdiv@f1+2,w
  6730  074F  1D03               	skipz
  6731  0750  2F57               	goto	u358_25
  6732  0751  0831               	movf	___ftdiv@f2+1,w
  6733  0752  0234               	subwf	___ftdiv@f1+1,w
  6734  0753  1D03               	skipz
  6735  0754  2F57               	goto	u358_25
  6736  0755  0830               	movf	___ftdiv@f2,w
  6737  0756  0233               	subwf	___ftdiv@f1,w
  6738  0757                     u358_25:	
  6739  0757  1C03               	skipc
  6740  0758  2F64               	goto	i1l2782
  6741  0759  0830               	movf	___ftdiv@f2,w
  6742  075A  02B3               	subwf	___ftdiv@f1,f
  6743  075B  0831               	movf	___ftdiv@f2+1,w
  6744  075C  1C03               	skipc
  6745  075D  0F31               	incfsz	___ftdiv@f2+1,w
  6746  075E  02B4               	subwf	___ftdiv@f1+1,f
  6747  075F  0832               	movf	___ftdiv@f2+2,w
  6748  0760  1C03               	skipc
  6749  0761  0A32               	incf	___ftdiv@f2+2,w
  6750  0762  02B5               	subwf	___ftdiv@f1+2,f
  6751  0763  143B               	bsf	___ftdiv@f3,0
  6752  0764                     i1l2782:	
  6753  0764  3001               	movlw	1
  6754  0765                     u359_25:	
  6755  0765  1003               	clrc
  6756  0766  0DB3               	rlf	___ftdiv@f1,f
  6757  0767  0DB4               	rlf	___ftdiv@f1+1,f
  6758  0768  0DB5               	rlf	___ftdiv@f1+2,f
  6759  0769  3EFF               	addlw	-1
  6760  076A  1D03               	skipz
  6761  076B  2F65               	goto	u359_25
  6762  076C  3001               	movlw	1
  6763  076D  02BA               	subwf	___ftdiv@cntr,f
  6764  076E  1D03               	btfss	3,2
  6765  076F  2F45               	goto	i1l2774
  6766  0770  083B               	movf	___ftdiv@f3,w
  6767  0771  00F0               	movwf	___ftpack@arg
  6768  0772  083C               	movf	___ftdiv@f3+1,w
  6769  0773  00F1               	movwf	___ftpack@arg+1
  6770  0774  083D               	movf	___ftdiv@f3+2,w
  6771  0775  00F2               	movwf	___ftpack@arg+2
  6772  0776  083E               	movf	___ftdiv@exp,w
  6773  0777  00B6               	movwf	??___ftdiv
  6774  0778  0836               	movf	??___ftdiv,w
  6775  0779  00F3               	movwf	___ftpack@exp
  6776  077A  083F               	movf	___ftdiv@sign,w
  6777  077B  00B7               	movwf	??___ftdiv+1
  6778  077C  0837               	movf	??___ftdiv+1,w
  6779  077D  00F4               	movwf	___ftpack@sign
  6780  077E  120A  118A  278A   	fcall	___ftpack
  6781  0781  0870               	movf	?___ftpack,w
  6782  0782  1283               	bcf	3,5	;RP0=0, select bank0
  6783  0783  1303               	bcf	3,6	;RP1=0, select bank0
  6784  0784  00B0               	movwf	?___ftdiv
  6785  0785  0871               	movf	?___ftpack+1,w
  6786  0786  00B1               	movwf	?___ftdiv+1
  6787  0787  0872               	movf	?___ftpack+2,w
  6788  0788  00B2               	movwf	?___ftdiv+2
  6789  0789  0008               	return
  6790  078A                     __end_of___ftdiv:	
  6791                           
  6792                           	psect	text36
  6793  08F5                     __ptext36:	
  6794 ;; *************** function ___awtoft *****************
  6795 ;; Defined at:
  6796 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  c               2    8[COMMON] int 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  sign            1   13[COMMON] unsigned char 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  3    8[COMMON] float 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0, pclath, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6810 ;;      Params:         3       0       0       0       0
  6811 ;;      Locals:         1       0       0       0       0
  6812 ;;      Temps:          2       0       0       0       0
  6813 ;;      Totals:         6       0       0       0       0
  6814 ;;Total ram usage:        6 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    1
  6817 ;; This function calls:
  6818 ;;		___ftpack
  6819 ;; This function is called by:
  6820 ;;		_ISR
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function ___awtoft
  6826  08F5                     ___awtoft:	
  6827                           
  6828                           ;incstack = 0
  6829 ;; hardware stack exceeded
  6830                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6831  08F5  01FD               	clrf	___awtoft@sign
  6832  08F6  1FF9               	btfss	___awtoft@c+1,7
  6833  08F7  28FF               	goto	i1l2744
  6834  08F8  09F8               	comf	___awtoft@c,f
  6835  08F9  09F9               	comf	___awtoft@c+1,f
  6836  08FA  0AF8               	incf	___awtoft@c,f
  6837  08FB  1903               	skipnz
  6838  08FC  0AF9               	incf	___awtoft@c+1,f
  6839  08FD  01FD               	clrf	___awtoft@sign
  6840  08FE  0AFD               	incf	___awtoft@sign,f
  6841  08FF                     i1l2744:	
  6842  08FF  0878               	movf	___awtoft@c,w
  6843  0900  00F0               	movwf	___ftpack@arg
  6844  0901  0879               	movf	___awtoft@c+1,w
  6845  0902  00F1               	movwf	___ftpack@arg+1
  6846  0903  01F2               	clrf	___ftpack@arg+2
  6847  0904  308E               	movlw	142
  6848  0905  00FB               	movwf	??___awtoft
  6849  0906  087B               	movf	??___awtoft,w
  6850  0907  00F3               	movwf	___ftpack@exp
  6851  0908  087D               	movf	___awtoft@sign,w
  6852  0909  00FC               	movwf	??___awtoft+1
  6853  090A  087C               	movf	??___awtoft+1,w
  6854  090B  00F4               	movwf	___ftpack@sign
  6855  090C  120A  118A  278A   	fcall	___ftpack
  6856  090F  0870               	movf	?___ftpack,w
  6857  0910  00F8               	movwf	?___awtoft
  6858  0911  0871               	movf	?___ftpack+1,w
  6859  0912  00F9               	movwf	?___awtoft+1
  6860  0913  0872               	movf	?___ftpack+2,w
  6861  0914  00FA               	movwf	?___awtoft+2
  6862  0915  0008               	return
  6863  0916                     __end_of___awtoft:	
  6864                           
  6865                           	psect	text37
  6866  078A                     __ptext37:	
  6867 ;; *************** function ___ftpack *****************
  6868 ;; Defined at:
  6869 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  arg             3    0[COMMON] unsigned um
  6872 ;;  exp             1    3[COMMON] unsigned char 
  6873 ;;  sign            1    4[COMMON] unsigned char 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;		None
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  3    0[COMMON] float 
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6885 ;;      Params:         5       0       0       0       0
  6886 ;;      Locals:         0       0       0       0       0
  6887 ;;      Temps:          3       0       0       0       0
  6888 ;;      Totals:         8       0       0       0       0
  6889 ;;Total ram usage:        8 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		___awtoft
  6895 ;;		___ftadd
  6896 ;;		___ftdiv
  6897 ;;		___ftmul
  6898 ;;		___lltoft
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           
  6903                           ;psect for function ___ftpack
  6904  078A                     ___ftpack:	
  6905                           
  6906                           ;incstack = 0
  6907 ;; hardware stack exceeded
  6908                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6909  078A  0873               	movf	___ftpack@exp,w
  6910  078B  1903               	btfsc	3,2
  6911  078C  2F92               	goto	i1l1948
  6912  078D  0872               	movf	___ftpack@arg+2,w
  6913  078E  0471               	iorwf	___ftpack@arg+1,w
  6914  078F  0470               	iorwf	___ftpack@arg,w
  6915  0790  1D03               	skipz
  6916  0791  2FA5               	goto	i1l1954
  6917  0792                     i1l1948:	
  6918  0792  3000               	movlw	0
  6919  0793  00F0               	movwf	?___ftpack
  6920  0794  3000               	movlw	0
  6921  0795  00F1               	movwf	?___ftpack+1
  6922  0796  3000               	movlw	0
  6923  0797  00F2               	movwf	?___ftpack+2
  6924  0798  0008               	return
  6925  0799                     i1l1952:	
  6926  0799  3001               	movlw	1
  6927  079A  00F5               	movwf	??___ftpack
  6928  079B  0875               	movf	??___ftpack,w
  6929  079C  07F3               	addwf	___ftpack@exp,f
  6930  079D  3001               	movlw	1
  6931  079E                     u203_25:	
  6932  079E  1003               	clrc
  6933  079F  0CF2               	rrf	___ftpack@arg+2,f
  6934  07A0  0CF1               	rrf	___ftpack@arg+1,f
  6935  07A1  0CF0               	rrf	___ftpack@arg,f
  6936  07A2  3EFF               	addlw	-1
  6937  07A3  1D03               	skipz
  6938  07A4  2F9E               	goto	u203_25
  6939  07A5                     i1l1954:	
  6940  07A5  30FE               	movlw	254
  6941  07A6  0572               	andwf	___ftpack@arg+2,w
  6942  07A7  1903               	btfsc	3,2
  6943  07A8  2FC0               	goto	i1l523
  6944  07A9  2F99               	goto	i1l1952
  6945  07AA                     i1l1956:	
  6946  07AA  3001               	movlw	1
  6947  07AB  00F5               	movwf	??___ftpack
  6948  07AC  0875               	movf	??___ftpack,w
  6949  07AD  07F3               	addwf	___ftpack@exp,f
  6950  07AE  3001               	movlw	1
  6951  07AF  07F0               	addwf	___ftpack@arg,f
  6952  07B0  3000               	movlw	0
  6953  07B1  1803               	skipnc
  6954  07B2  3001               	movlw	1
  6955  07B3  07F1               	addwf	___ftpack@arg+1,f
  6956  07B4  3000               	movlw	0
  6957  07B5  1803               	skipnc
  6958  07B6  3001               	movlw	1
  6959  07B7  07F2               	addwf	___ftpack@arg+2,f
  6960  07B8  3001               	movlw	1
  6961  07B9                     u205_25:	
  6962  07B9  1003               	clrc
  6963  07BA  0CF2               	rrf	___ftpack@arg+2,f
  6964  07BB  0CF1               	rrf	___ftpack@arg+1,f
  6965  07BC  0CF0               	rrf	___ftpack@arg,f
  6966  07BD  3EFF               	addlw	-1
  6967  07BE  1D03               	skipz
  6968  07BF  2FB9               	goto	u205_25
  6969  07C0                     i1l523:	
  6970  07C0  30FF               	movlw	255
  6971  07C1  0572               	andwf	___ftpack@arg+2,w
  6972  07C2  1903               	btfsc	3,2
  6973  07C3  2FCF               	goto	i1l1964
  6974  07C4  2FAA               	goto	i1l1956
  6975  07C5                     i1l1962:	
  6976  07C5  3001               	movlw	1
  6977  07C6  02F3               	subwf	___ftpack@exp,f
  6978  07C7  3001               	movlw	1
  6979  07C8                     u207_25:	
  6980  07C8  1003               	clrc
  6981  07C9  0DF0               	rlf	___ftpack@arg,f
  6982  07CA  0DF1               	rlf	___ftpack@arg+1,f
  6983  07CB  0DF2               	rlf	___ftpack@arg+2,f
  6984  07CC  3EFF               	addlw	-1
  6985  07CD  1D03               	skipz
  6986  07CE  2FC8               	goto	u207_25
  6987  07CF                     i1l1964:	
  6988  07CF  1FF1               	btfss	___ftpack@arg+1,7
  6989  07D0  2FC5               	goto	i1l1962
  6990  07D1  1873               	btfsc	___ftpack@exp,0
  6991  07D2  2FD9               	goto	i1l529
  6992  07D3  30FF               	movlw	255
  6993  07D4  05F0               	andwf	___ftpack@arg,f
  6994  07D5  307F               	movlw	127
  6995  07D6  05F1               	andwf	___ftpack@arg+1,f
  6996  07D7  30FF               	movlw	255
  6997  07D8  05F2               	andwf	___ftpack@arg+2,f
  6998  07D9                     i1l529:	
  6999  07D9  1003               	clrc
  7000  07DA  0CF3               	rrf	___ftpack@exp,f
  7001  07DB  0873               	movf	___ftpack@exp,w
  7002  07DC  00F5               	movwf	??___ftpack
  7003  07DD  01F6               	clrf	??___ftpack+1
  7004  07DE  01F7               	clrf	??___ftpack+2
  7005  07DF  3010               	movlw	16
  7006  07E0                     u210_25:	
  7007  07E0  1003               	clrc
  7008  07E1  0DF5               	rlf	??___ftpack,f
  7009  07E2  0DF6               	rlf	??___ftpack+1,f
  7010  07E3  0DF7               	rlf	??___ftpack+2,f
  7011  07E4  3EFF               	addlw	-1
  7012  07E5  1D03               	skipz
  7013  07E6  2FE0               	goto	u210_25
  7014  07E7  0875               	movf	??___ftpack,w
  7015  07E8  04F0               	iorwf	___ftpack@arg,f
  7016  07E9  0876               	movf	??___ftpack+1,w
  7017  07EA  04F1               	iorwf	___ftpack@arg+1,f
  7018  07EB  0877               	movf	??___ftpack+2,w
  7019  07EC  04F2               	iorwf	___ftpack@arg+2,f
  7020  07ED  0874               	movf	___ftpack@sign,w
  7021  07EE  1903               	btfsc	3,2
  7022  07EF  0008               	return
  7023  07F0  17F2               	bsf	___ftpack@arg+2,7
  7024  07F1  0008               	return
  7025  07F2                     __end_of___ftpack:	
  7026                           
  7027                           	psect	text38
  7028  0C7A                     __ptext38:	
  7029 ;; *************** function ___awmod *****************
  7030 ;; Defined at:
  7031 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awmod.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;  divisor         2    9[COMMON] int 
  7034 ;;  dividend        2   11[COMMON] int 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  sign            1    1[BANK0 ] unsigned char 
  7037 ;;  counter         1    0[BANK0 ] unsigned char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  2    9[COMMON] int 
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7047 ;;      Params:         4       0       0       0       0
  7048 ;;      Locals:         0       2       0       0       0
  7049 ;;      Temps:          1       0       0       0       0
  7050 ;;      Totals:         5       2       0       0       0
  7051 ;;Total ram usage:        7 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_ISR
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           
  7061                           ;psect for function ___awmod
  7062  0C7A                     ___awmod:	
  7063                           
  7064                           ;incstack = 0
  7065                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7066  0C7A  1283               	bcf	3,5	;RP0=0, select bank0
  7067  0C7B  1303               	bcf	3,6	;RP1=0, select bank0
  7068  0C7C  01A1               	clrf	___awmod@sign
  7069  0C7D  1FFC               	btfss	___awmod@dividend+1,7
  7070  0C7E  2C86               	goto	i1l2706
  7071  0C7F  09FB               	comf	___awmod@dividend,f
  7072  0C80  09FC               	comf	___awmod@dividend+1,f
  7073  0C81  0AFB               	incf	___awmod@dividend,f
  7074  0C82  1903               	skipnz
  7075  0C83  0AFC               	incf	___awmod@dividend+1,f
  7076  0C84  01A1               	clrf	___awmod@sign
  7077  0C85  0AA1               	incf	___awmod@sign,f
  7078  0C86                     i1l2706:	
  7079  0C86  1FFA               	btfss	___awmod@divisor+1,7
  7080  0C87  2C8D               	goto	i1l2710
  7081  0C88  09F9               	comf	___awmod@divisor,f
  7082  0C89  09FA               	comf	___awmod@divisor+1,f
  7083  0C8A  0AF9               	incf	___awmod@divisor,f
  7084  0C8B  1903               	skipnz
  7085  0C8C  0AFA               	incf	___awmod@divisor+1,f
  7086  0C8D                     i1l2710:	
  7087  0C8D  087A               	movf	___awmod@divisor+1,w
  7088  0C8E  0479               	iorwf	___awmod@divisor,w
  7089  0C8F  1903               	skipnz
  7090  0C90  2CBA               	goto	i1l2728
  7091  0C91  01A0               	clrf	___awmod@counter
  7092  0C92  0AA0               	incf	___awmod@counter,f
  7093  0C93                     i1l2718:	
  7094  0C93  1BFA               	btfsc	___awmod@divisor+1,7
  7095  0C94  2CA1               	goto	i1l2720
  7096  0C95  3001               	movlw	1
  7097  0C96                     u346_25:	
  7098  0C96  1003               	clrc
  7099  0C97  0DF9               	rlf	___awmod@divisor,f
  7100  0C98  0DFA               	rlf	___awmod@divisor+1,f
  7101  0C99  3EFF               	addlw	-1
  7102  0C9A  1D03               	skipz
  7103  0C9B  2C96               	goto	u346_25
  7104  0C9C  3001               	movlw	1
  7105  0C9D  00FD               	movwf	??___awmod
  7106  0C9E  087D               	movf	??___awmod,w
  7107  0C9F  07A0               	addwf	___awmod@counter,f
  7108  0CA0  2C93               	goto	i1l2718
  7109  0CA1                     i1l2720:	
  7110  0CA1  087A               	movf	___awmod@divisor+1,w
  7111  0CA2  027C               	subwf	___awmod@dividend+1,w
  7112  0CA3  1D03               	skipz
  7113  0CA4  2CA7               	goto	u348_25
  7114  0CA5  0879               	movf	___awmod@divisor,w
  7115  0CA6  027B               	subwf	___awmod@dividend,w
  7116  0CA7                     u348_25:	
  7117  0CA7  1C03               	skipc
  7118  0CA8  2CAF               	goto	i1l2724
  7119  0CA9  0879               	movf	___awmod@divisor,w
  7120  0CAA  02FB               	subwf	___awmod@dividend,f
  7121  0CAB  087A               	movf	___awmod@divisor+1,w
  7122  0CAC  1C03               	skipc
  7123  0CAD  03FC               	decf	___awmod@dividend+1,f
  7124  0CAE  02FC               	subwf	___awmod@dividend+1,f
  7125  0CAF                     i1l2724:	
  7126  0CAF  3001               	movlw	1
  7127  0CB0                     u349_25:	
  7128  0CB0  1003               	clrc
  7129  0CB1  0CFA               	rrf	___awmod@divisor+1,f
  7130  0CB2  0CF9               	rrf	___awmod@divisor,f
  7131  0CB3  3EFF               	addlw	-1
  7132  0CB4  1D03               	skipz
  7133  0CB5  2CB0               	goto	u349_25
  7134  0CB6  3001               	movlw	1
  7135  0CB7  02A0               	subwf	___awmod@counter,f
  7136  0CB8  1D03               	btfss	3,2
  7137  0CB9  2CA1               	goto	i1l2720
  7138  0CBA                     i1l2728:	
  7139  0CBA  0821               	movf	___awmod@sign,w
  7140  0CBB  1903               	btfsc	3,2
  7141  0CBC  2CC2               	goto	i1l2732
  7142  0CBD  09FB               	comf	___awmod@dividend,f
  7143  0CBE  09FC               	comf	___awmod@dividend+1,f
  7144  0CBF  0AFB               	incf	___awmod@dividend,f
  7145  0CC0  1903               	skipnz
  7146  0CC1  0AFC               	incf	___awmod@dividend+1,f
  7147  0CC2                     i1l2732:	
  7148  0CC2  087C               	movf	___awmod@dividend+1,w
  7149  0CC3  01FA               	clrf	?___awmod+1
  7150  0CC4  07FA               	addwf	?___awmod+1,f
  7151  0CC5  087B               	movf	___awmod@dividend,w
  7152  0CC6  01F9               	clrf	?___awmod
  7153  0CC7  07F9               	addwf	?___awmod,f
  7154  0CC8  0008               	return
  7155  0CC9                     __end_of___awmod:	
  7156                           
  7157                           	psect	text39
  7158  0D7A                     __ptext39:	
  7159 ;; *************** function ___awdiv *****************
  7160 ;; Defined at:
  7161 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  divisor         2    0[COMMON] int 
  7164 ;;  dividend        2    2[COMMON] int 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  quotient        2    7[COMMON] int 
  7167 ;;  sign            1    6[COMMON] unsigned char 
  7168 ;;  counter         1    5[COMMON] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  2    0[COMMON] int 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7178 ;;      Params:         4       0       0       0       0
  7179 ;;      Locals:         4       0       0       0       0
  7180 ;;      Temps:          1       0       0       0       0
  7181 ;;      Totals:         9       0       0       0       0
  7182 ;;Total ram usage:        9 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		_ISR
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function ___awdiv
  7193  0D7A                     ___awdiv:	
  7194                           
  7195                           ;incstack = 0
  7196                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7197  0D7A  01F6               	clrf	___awdiv@sign
  7198  0D7B  1FF1               	btfss	___awdiv@divisor+1,7
  7199  0D7C  2D84               	goto	i1l2662
  7200  0D7D  09F0               	comf	___awdiv@divisor,f
  7201  0D7E  09F1               	comf	___awdiv@divisor+1,f
  7202  0D7F  0AF0               	incf	___awdiv@divisor,f
  7203  0D80  1903               	skipnz
  7204  0D81  0AF1               	incf	___awdiv@divisor+1,f
  7205  0D82  01F6               	clrf	___awdiv@sign
  7206  0D83  0AF6               	incf	___awdiv@sign,f
  7207  0D84                     i1l2662:	
  7208  0D84  1FF3               	btfss	___awdiv@dividend+1,7
  7209  0D85  2D8F               	goto	i1l2668
  7210  0D86  09F2               	comf	___awdiv@dividend,f
  7211  0D87  09F3               	comf	___awdiv@dividend+1,f
  7212  0D88  0AF2               	incf	___awdiv@dividend,f
  7213  0D89  1903               	skipnz
  7214  0D8A  0AF3               	incf	___awdiv@dividend+1,f
  7215  0D8B  3001               	movlw	1
  7216  0D8C  00F4               	movwf	??___awdiv
  7217  0D8D  0874               	movf	??___awdiv,w
  7218  0D8E  06F6               	xorwf	___awdiv@sign,f
  7219  0D8F                     i1l2668:	
  7220  0D8F  01F7               	clrf	___awdiv@quotient
  7221  0D90  01F8               	clrf	___awdiv@quotient+1
  7222  0D91  0871               	movf	___awdiv@divisor+1,w
  7223  0D92  0470               	iorwf	___awdiv@divisor,w
  7224  0D93  1903               	skipnz
  7225  0D94  2DC6               	goto	i1l2690
  7226  0D95  01F5               	clrf	___awdiv@counter
  7227  0D96  0AF5               	incf	___awdiv@counter,f
  7228  0D97                     i1l2678:	
  7229  0D97  1BF1               	btfsc	___awdiv@divisor+1,7
  7230  0D98  2DA5               	goto	i1l2680
  7231  0D99  3001               	movlw	1
  7232  0D9A                     u336_25:	
  7233  0D9A  1003               	clrc
  7234  0D9B  0DF0               	rlf	___awdiv@divisor,f
  7235  0D9C  0DF1               	rlf	___awdiv@divisor+1,f
  7236  0D9D  3EFF               	addlw	-1
  7237  0D9E  1D03               	skipz
  7238  0D9F  2D9A               	goto	u336_25
  7239  0DA0  3001               	movlw	1
  7240  0DA1  00F4               	movwf	??___awdiv
  7241  0DA2  0874               	movf	??___awdiv,w
  7242  0DA3  07F5               	addwf	___awdiv@counter,f
  7243  0DA4  2D97               	goto	i1l2678
  7244  0DA5                     i1l2680:	
  7245  0DA5  3001               	movlw	1
  7246  0DA6                     u338_25:	
  7247  0DA6  1003               	clrc
  7248  0DA7  0DF7               	rlf	___awdiv@quotient,f
  7249  0DA8  0DF8               	rlf	___awdiv@quotient+1,f
  7250  0DA9  3EFF               	addlw	-1
  7251  0DAA  1D03               	skipz
  7252  0DAB  2DA6               	goto	u338_25
  7253  0DAC  0871               	movf	___awdiv@divisor+1,w
  7254  0DAD  0273               	subwf	___awdiv@dividend+1,w
  7255  0DAE  1D03               	skipz
  7256  0DAF  2DB2               	goto	u339_25
  7257  0DB0  0870               	movf	___awdiv@divisor,w
  7258  0DB1  0272               	subwf	___awdiv@dividend,w
  7259  0DB2                     u339_25:	
  7260  0DB2  1C03               	skipc
  7261  0DB3  2DBB               	goto	i1l2686
  7262  0DB4  0870               	movf	___awdiv@divisor,w
  7263  0DB5  02F2               	subwf	___awdiv@dividend,f
  7264  0DB6  0871               	movf	___awdiv@divisor+1,w
  7265  0DB7  1C03               	skipc
  7266  0DB8  03F3               	decf	___awdiv@dividend+1,f
  7267  0DB9  02F3               	subwf	___awdiv@dividend+1,f
  7268  0DBA  1477               	bsf	___awdiv@quotient,0
  7269  0DBB                     i1l2686:	
  7270  0DBB  3001               	movlw	1
  7271  0DBC                     u340_25:	
  7272  0DBC  1003               	clrc
  7273  0DBD  0CF1               	rrf	___awdiv@divisor+1,f
  7274  0DBE  0CF0               	rrf	___awdiv@divisor,f
  7275  0DBF  3EFF               	addlw	-1
  7276  0DC0  1D03               	skipz
  7277  0DC1  2DBC               	goto	u340_25
  7278  0DC2  3001               	movlw	1
  7279  0DC3  02F5               	subwf	___awdiv@counter,f
  7280  0DC4  1D03               	btfss	3,2
  7281  0DC5  2DA5               	goto	i1l2680
  7282  0DC6                     i1l2690:	
  7283  0DC6  0876               	movf	___awdiv@sign,w
  7284  0DC7  1903               	btfsc	3,2
  7285  0DC8  2DCE               	goto	i1l2694
  7286  0DC9  09F7               	comf	___awdiv@quotient,f
  7287  0DCA  09F8               	comf	___awdiv@quotient+1,f
  7288  0DCB  0AF7               	incf	___awdiv@quotient,f
  7289  0DCC  1903               	skipnz
  7290  0DCD  0AF8               	incf	___awdiv@quotient+1,f
  7291  0DCE                     i1l2694:	
  7292  0DCE  0878               	movf	___awdiv@quotient+1,w
  7293  0DCF  01F1               	clrf	?___awdiv+1
  7294  0DD0  07F1               	addwf	?___awdiv+1,f
  7295  0DD1  0877               	movf	___awdiv@quotient,w
  7296  0DD2  01F0               	clrf	?___awdiv
  7297  0DD3  07F0               	addwf	?___awdiv,f
  7298  0DD4  0008               	return
  7299  0DD5                     __end_of___awdiv:	
  7300                           
  7301                           	psect	text40
  7302  08A2                     __ptext40:	
  7303 ;; *************** function _USARTReceiveChar *****************
  7304 ;; Defined at:
  7305 ;;		line 86 in file "main.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;		None
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  USARTData       1    4[COMMON] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      unsigned char 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7319 ;;      Params:         0       0       0       0       0
  7320 ;;      Locals:         1       0       0       0       0
  7321 ;;      Temps:          1       0       0       0       0
  7322 ;;      Totals:         2       0       0       0       0
  7323 ;;Total ram usage:        2 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    2
  7326 ;; This function calls:
  7327 ;;		i1_USARTWriteString
  7328 ;; This function is called by:
  7329 ;;		_ISR
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function _USARTReceiveChar
  7335  08A2                     _USARTReceiveChar:	
  7336                           
  7337                           ;main.c: 87: unsigned char USARTData;
  7338                           ;main.c: 89: if (!OERR)
  7339                           
  7340                           ;incstack = 0
  7341 ;; hardware stack exceeded
  7342                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7343  08A2  1283               	bcf	3,5	;RP0=0, select bank0
  7344  08A3  1303               	bcf	3,6	;RP1=0, select bank0
  7345  08A4  1898               	btfsc	24,1	;volatile
  7346  08A5  28AB               	goto	i1l2488
  7347                           
  7348                           ;main.c: 90: {
  7349                           ;main.c: 91: USARTData = RCREG;
  7350  08A6  081A               	movf	26,w	;volatile
  7351  08A7  00F3               	movwf	??_USARTReceiveChar
  7352  08A8  0873               	movf	??_USARTReceiveChar,w
  7353  08A9  00F4               	movwf	USARTReceiveChar@USARTData
  7354  08AA  28BA               	goto	i1l2496
  7355  08AB                     i1l2488:	
  7356                           ;main.c: 93: } else {
  7357                           
  7358                           ;main.c: 92: PIR1bits.RCIF = 0;
  7359                           
  7360                           
  7361                           ;main.c: 94: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7362  08AB  302D               	movlw	low (STR_1-__stringbase)
  7363  08AC  00F1               	movwf	i1USARTWriteString@str
  7364  08AD  3080               	movlw	128
  7365  08AE  00F2               	movwf	i1USARTWriteString@str+1
  7366  08AF  120A  158A  2116   	fcall	i1_USARTWriteString
  7367                           
  7368                           ;main.c: 96: RCSTAbits.CREN = 0;
  7369  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  7370  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  7371  08B4  1218               	bcf	24,4	;volatile
  7372                           
  7373                           ;main.c: 97: USARTData = RCREG;
  7374  08B5  081A               	movf	26,w	;volatile
  7375  08B6  00F3               	movwf	??_USARTReceiveChar
  7376  08B7  0873               	movf	??_USARTReceiveChar,w
  7377  08B8  00F4               	movwf	USARTReceiveChar@USARTData
  7378                           
  7379                           ;main.c: 98: RCSTAbits.CREN = 1;
  7380  08B9  1618               	bsf	24,4	;volatile
  7381  08BA                     i1l2496:	
  7382                           
  7383                           ;main.c: 99: PIR1bits.RCIF = 0;
  7384  08BA  128C               	bcf	12,5	;volatile
  7385                           
  7386                           ;main.c: 100: }
  7387                           ;main.c: 102: return (USARTData);
  7388  08BB  0874               	movf	USARTReceiveChar@USARTData,w
  7389  08BC  0008               	return
  7390  08BD                     __end_of_USARTReceiveChar:	
  7391                           
  7392                           	psect	text41
  7393  0916                     __ptext41:	
  7394 ;; *************** function i1_USARTWriteString *****************
  7395 ;; Defined at:
  7396 ;;		line 75 in file "main.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;  str             2    1[COMMON] PTR const unsigned char 
  7399 ;;		 -> STR_5(16), sendString@array(40), STR_1(40), 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;		None
  7402 ;; Return value:  Size  Location     Type
  7403 ;;		None               void
  7404 ;; Registers used:
  7405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7411 ;;      Params:         2       0       0       0       0
  7412 ;;      Locals:         0       0       0       0       0
  7413 ;;      Temps:          0       0       0       0       0
  7414 ;;      Totals:         2       0       0       0       0
  7415 ;;Total ram usage:        2 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    1
  7418 ;; This function calls:
  7419 ;;		i1_USARTWriteChar
  7420 ;; This function is called by:
  7421 ;;		_USARTReceiveChar
  7422 ;;		_sendString
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           
  7427                           ;psect for function i1_USARTWriteString
  7428  0916                     i1_USARTWriteString:	
  7429  0916                     i1l2472:	
  7430                           ;main.c: 77: while (*str != '\0') {
  7431                           
  7432                           ;incstack = 0
  7433 ;; hardware stack exceeded
  7434                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7435                           
  7436  0916  0872               	movf	i1USARTWriteString@str+1,w
  7437  0917  1283               	bcf	3,5	;RP0=0, select bank0
  7438  0918  1303               	bcf	3,6	;RP1=0, select bank0
  7439  0919  00FF               	movwf	127
  7440  091A  0871               	movf	i1USARTWriteString@str,w
  7441  091B  0084               	movwf	4
  7442  091C  120A  158A  2000  120A  158A  	fcall	stringtab
  7443  0921  3800               	iorlw	0
  7444  0922  1903               	btfsc	3,2
  7445  0923  0008               	return
  7446                           
  7447                           ;main.c: 79: USARTWriteChar(*str);
  7448  0924  0872               	movf	i1USARTWriteString@str+1,w
  7449  0925  1283               	bcf	3,5	;RP0=0, select bank0
  7450  0926  1303               	bcf	3,6	;RP1=0, select bank0
  7451  0927  00FF               	movwf	127
  7452  0928  0871               	movf	i1USARTWriteString@str,w
  7453  0929  0084               	movwf	4
  7454  092A  120A  158A  2000  120A  158A  	fcall	stringtab
  7455  092F  160A  118A  27A7  120A  158A  	fcall	i1_USARTWriteChar
  7456                           
  7457                           ;main.c: 80: str++;
  7458  0934  3001               	movlw	1
  7459  0935  07F1               	addwf	i1USARTWriteString@str,f
  7460  0936  1803               	skipnc
  7461  0937  0AF2               	incf	i1USARTWriteString@str+1,f
  7462  0938  2916               	goto	i1l2472
  7463  0939                     __end_ofi1_USARTWriteString:	
  7464                           
  7465                           	psect	text42
  7466  17A7                     __ptext42:	
  7467 ;; *************** function i1_USARTWriteChar *****************
  7468 ;; Defined at:
  7469 ;;		line 68 in file "main.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  USARTData       1    wreg     unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  USARTData       1    0[COMMON] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7483 ;;      Params:         0       0       0       0       0
  7484 ;;      Locals:         1       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0
  7486 ;;      Totals:         1       0       0       0       0
  7487 ;;Total ram usage:        1 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; This function calls:
  7490 ;;		Nothing
  7491 ;; This function is called by:
  7492 ;;		_active
  7493 ;;		i1_USARTWriteString
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           
  7498                           ;psect for function i1_USARTWriteChar
  7499  17A7                     i1_USARTWriteChar:	
  7500                           
  7501                           ;incstack = 0
  7502 ;; hardware stack exceeded
  7503                           ; Regs used in i1_USARTWriteChar: [wreg]
  7504                           ;i1USARTWriteChar@USARTData stored from wreg
  7505  17A7  00F0               	movwf	i1USARTWriteChar@USARTData
  7506  17A8                     i1l68:	
  7507                           ;main.c: 69: while (!PIR1bits.TXIF);
  7508                           
  7509  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  7510  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  7511  17AA  1E0C               	btfss	12,4	;volatile
  7512  17AB  2FA8               	goto	i1l68
  7513                           
  7514                           ;main.c: 70: TXREG = USARTData;
  7515  17AC  0870               	movf	i1USARTWriteChar@USARTData,w
  7516  17AD  0099               	movwf	25	;volatile
  7517  17AE  0008               	return
  7518  17AF                     __end_ofi1_USARTWriteChar:	
  7519  007E                     btemp	set	126	;btemp
  7520  007E                     wtemp	set	126
  7521  007E                     wtemp0	set	126
  7522  0080                     wtemp1	set	128
  7523  0082                     wtemp2	set	130
  7524  0084                     wtemp3	set	132
  7525  0086                     wtemp4	set	134
  7526  0088                     wtemp5	set	136
  7527  007F                     wtemp6	set	127
  7528  007E                     ttemp	set	126
  7529  007E                     ttemp0	set	126
  7530  0081                     ttemp1	set	129
  7531  0084                     ttemp2	set	132
  7532  0087                     ttemp3	set	135
  7533  007F                     ttemp4	set	127
  7534  007E                     ltemp	set	126
  7535  007E                     ltemp0	set	126
  7536  0082                     ltemp1	set	130
  7537  0086                     ltemp2	set	134
  7538  0080                     ltemp3	set	128


Data Sizes:
    Strings     76
    Constant    44
    Data        18
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      79
    BANK1            80     20      60
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK0[2]), ISR@status(BANK0[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_6(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S672$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK1[17]), STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> progressBar@aux(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    progressBar@result	PTR unsigned char  size(1) Largest target is 16
		 -> progressBar@aux(BANK0[16]), 

    sendString@envio	PTR unsigned char  size(1) Largest target is 40
		 -> sendString@array(BANK0[40]), 

    sendString@send	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_5(CODE[16]), sendString@array(BANK0[40]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod
    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    _sendString->i1_USARTWriteString
    _progressBar->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    _active->i1_USARTWriteChar
    ___awtoft->___ftpack
    ___awmod->___awdiv
    _USARTReceiveChar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_inicialize
    _inicialize->_lcd_escreve_string
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTWriteString->_USARTWriteChar
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3771
                                             17 BANK1      3     3      0
                            _ADCRead
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    3663
                                             14 BANK1      3     3      0
                            _ADCInit
                           _LCDClear
                   _USARTWriteString
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    1922
                                             12 BANK1      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    1661
                                              9 BANK1      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1     951
                                              5 BANK1      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0     868
                                              5 BANK1      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTWriteString                                     2     0      2     207
                                              1 BANK1      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     666
                                              5 BANK1      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     666
                                              2 BANK1      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0      88
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 23    23      0   24574
                                             50 BANK0     23    23      0
                   _USARTReceiveChar
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             _active
                               _ftoa
                        _progressBar
                         _sendString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) _sendString                                          45    45      0     474
                                              3 COMMON     1     1      0
                                              0 BANK0     44    44      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _progressBar                                         25    23      2    1093
                                              0 BANK0     25    23      2
               i1_lcd_escreve_string
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) _active                                               2     2      0     133
                                              1 COMMON     2     2      0
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              7     3      4     680
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     684
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     143
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (9) i1_USARTWriteString                                   2     0      2     119
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (10) i1_USARTWriteChar                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTWriteString
       _USARTWriteChar
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _active
     i1_USARTWriteChar
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _progressBar
     i1_lcd_escreve_string
       i1_lcd_putc
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
         i1_lcd_gotoxy
           i1_lcd_envia_byte
             i1_lcd_envia_nibble
   _sendString
     i1_USARTWriteString
       i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     14      3C       7       75.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      99      12        0.0%
ABS                  0      0      99       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Nov 04 00:58:01 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l68 17C2  
                           l88 0A4B                   ___awdiv@sign 0076                             fsr 0004  
          ___wmul@multiplicand 0072                   ___ftadd@exp1 0026                   ___ftadd@exp2 0025  
                 ___ftadd@sign 0024                            l140 09C8                            l141 09C6  
                          l176 0AC6                            l177 0AC9              i1lcd_envia_byte@n 0072  
                 __CFG_CPD$OFF 0000                            _ISR 0279                            fsr0 0004  
              __end_of_ADCInit 1800                __end_of_ADCRead 0A4E                            indf 0000  
                 ___awmod@sign 0021                   __CFG_FOSC$HS 0000                     i1_lcd_putc 0B1E  
                  lcd_gotoxy@x 00BF                    lcd_gotoxy@y 00BD                   __CFG_LVP$OFF 0000  
                         ?_ISR 0070                   ___ftdiv@cntr 003A                   ___ftdiv@sign 003F  
                         l2002 0BD2                           l2200 0ED1                           l2170 0A4E  
                         l2180 0A7F                           l2192 0EB6                           l1940 08E6  
                         l1938 08E5                           l1990 0B9D                           l2848 09A7  
                         l1994 0BB1                           l1996 0BBC                           l1998 0BC7  
                         STR_1 083C                           STR_2 087F                           STR_3 0886  
                         STR_4 0864                           STR_5 0864                           STR_6 0874  
                         u4007 0D74                           u4017 0A45                           u1975 0AD2  
                         u3907 0F2D                           u3917 0F3D                           u3927 0F67  
                         u3937 0BAB                           u3947 0EAA                           i1l68 17A8  
                         u3957 0EC2                           u3967 0B69                           u3887 09BA  
                         u3977 0B7E                           u3897 0F1A                           _OERR 00C1  
                         u3987 0B93                           u3997 0ABA                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 17CC                           _main 09A2                           _ftoa 0618  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E                   ___ftmul@cntr 002E  
                 ___ftmul@sign 002F                          ??_ISR 0052               __end_of_LCDClear 0B99  
                 ___fttol@exp1 003D                   ___fttol@lval 0039     __end_of_lcd_escreve_string 0AB0  
                        ?_main 0070                          ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A  
              __end_of___awdiv 0DD5                __end_of___ftadd 0545                  __CFG_WDTE$OFF 0000  
              __end_of___awmod 0CC9      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 078A  
              __end_of___ftneg 17B7                __end_of___lldiv 0E90                __end_of___ftmul 0618  
              ___awdiv@divisor 0070                __end_of___llmod 0C7A                __end_of___ftsub 08D9  
              __end_of___fttol 1000                          i1l132 0431                          i1l256 010A  
                        i1l176 0A06                          i1l177 0A09                          i1l362 0966  
                        i1l523 07C0                          i1l259 0128                          i1l552 04E6  
                        i1l529 07D9                ___awdiv@counter 0075                          _RCREG 001A  
                        _SPBRG 0099            i1lcd_envia_nibble@n 0071                          _TRISA 0085  
                        _TXREG 0019                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
         i1_lcd_escreve_string 097F                  ___awtoft@sign 007D                __end_of_dpowers 0838  
              __end_of_isdigit 0800                  ___ftpack@sign 0074                          ftoa@f 0044  
                        ftoa@l 004D                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                 progressBar@i 0036                ?_USARTWriteChar 0070                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 0279               i1_lcd_envia_byte 09F6                __initialization 0015  
                 i1_lcd_gotoxy 0888                   __end_of_main 09CB                   __end_of_ftoa 06D2  
                  i1lcd_putc@c 007B                      ??_ADCInit 00B8                      ??_ADCRead 00BA  
    __size_of_lcd_envia_nibble 0059                         ??_main 00C9                         ??_ftoa 0048  
                ___fttol@sign1 0038             i1_USARTWriteString 0916                         ISR@buf 0058  
                       ISR@per 0068                         ISR@pre 005D        USARTWriteChar@USARTData 00B8  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 00B8  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             ___awdiv@dividend 0072               __end_of___awtoft 0916               __end_of___ftpack 07F2  
          ?i1_USARTWriteString 0071               __end_of___lltoft 09F6                         i1l2012 07FE  
                       i1l2040 046E                         i1l2120 0E87                         i1l2106 0E42  
                       i1l2130 0C36                         i1l2018 095E                         i1l2036 0467  
                       i1l2116 0E7A                         i1l2108 0E52                         i1l2132 0C46  
                       i1l2140 0C71                         i1l2300 01D0                         i1l2070 04C1  
                       i1l2046 047D                         i1l2150 0B20                         i1l2064 04AC  
                       i1l2136 0C64                         i1l2320 0265                         i1l2304 01F1  
                       i1l2232 0064                         i1l2082 04F8                         i1l2066 04B8  
                       i1l2058 0497                         i1l2314 020B                         i1l2306 01F5  
                       i1l2322 0044                         i1l2154 0B32                         i1l2162 0B4D  
                       i1l2332 0DFC                         i1l2076 04D6                         i1l2068 04BD  
                       i1l2260 010C                         i1l2324 0274                         i1l2156 0B3B  
                       i1l2086 050A                         i1l2078 04E2                         i1l2270 013A  
                       i1l2238 0079                         i1l2246 00B7                         i1l2158 0B44  
                       i1l2520 0954                         i1l2336 0E23                         i1l2360 0573  
                       i1l2096 052D                         i1l2280 015C                         i1l2264 0111  
                       i1l2256 00C9                         i1l2600 0651                         i1l2514 0947  
                       i1l2354 055D                         i1l2418 0F8C                         i1l2258 0105  
                       i1l2372 05B2                         i1l2452 0FF7                         i1l2444 0FDB  
                       i1l2436 0FBE                         i1l2460 09CF                         i1l2292 019E  
                       i1l2284 0162                         i1l2710 0C8D                         i1l2446 0FE6  
                       i1l2438 0FCE                         i1l2462 09E1                         i1l2550 0CDE  
                       i1l2472 0916                         i1l2720 0CA1                         i1l2384 05DA  
                       i1l2376 05C2                         i1l2448 0FE9                         i1l2296 01B6  
                       i1l2480 097F                         i1l2560 0CFA                         i1l2706 0C86  
                       i1l2562 0CCE                         i1l2732 0CC2                         i1l2724 0CAF  
                       i1l2388 05EA                         i1l2564 0D01                         i1l2556 0CEC  
                       u210_25 07E0                         i1l2662 0D84                         i1l2718 0C93  
                       i1l2582 0BF9                         i1l2496 08BA                         i1l2488 08AB  
                       i1l2680 0DA5                         i1l2728 0CBA                         i1l1952 0799  
                       i1l2744 08FF                         i1l2760 0700                         i1l2584 0C0F  
                       i1l2568 0D13                         i1l2690 0DC6                         i1l1962 07C5  
                       i1l1954 07A5                         i1l2754 06EA                         i1l2834 0404  
                       i1l2842 0425                         i1l2668 0D8F                         i1l1964 07CF  
                       i1l1956 07AA                         i1l1948 0792                         i1l1980 0893  
                       u203_25 079E                         i1l2694 0DCE                         i1l2686 0DBB  
                       i1l2678 0D97                         i1l2782 0764                         i1l2774 0745  
                       i1l2838 0415                         i1l1978 0892                         u300_25 05EB  
                       u205_25 07B9                         u301_25 05F3                         u207_25 07C8  
                       u311_25 0FDD                         u232_25 04AD                         u305_25 0F93  
                       u217_25 0967                         u330_20 0BEC                         u314_25 09D4  
                       u218_25 096E                         u402_27 0C24                         u235_25 04C2  
                       u403_27 0B2C                         u340_25 0DBC                         u308_25 0FBF  
                       u252_25 0C3A                         u404_27 09FC                         u229_25 0498  
                       u245_25 0E46                         u405_27 0B18                         u238_25 04D7  
                       u254_25 0C54                         u247_25 0E54                         u255_25 0C65  
                       u336_25 0D9A                         u248_25 0E69                         u249_25 0E7B  
                       u281_25 0216                         u273_25 0165                         u329_25 0D0A  
                       u338_25 0DA6                         u346_25 0C96                         u282_25 0271  
                       u274_25 0194                         u362_25 03FE                         u339_25 0DB2  
                       u355_25 0712                         u291_25 057F                         u363_25 040F  
                       u348_25 0CA7                         u356_25 0724                         u292_25 0591  
                       u276_25 01AD                         u285_21 0DEF                         u285_22 0DF0  
                       u285_23 0DF5                         u285_24 0DF6                         u349_25 0CB0  
                       u357_25 0746                         u277_25 01C7                         u358_25 0757  
                       u278_25 01E1                         u287_21 0E16                         u287_22 0E17  
                       u287_23 0E1C                         u287_24 0E1D                         u359_25 0765  
                       u295_25 05C3                         u199_25 0A10                         u296_25 05CB  
    i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066               __end_of_lcd_putc 0BE0  
                       ___ftge 0DD5                         ___wmul 095C                      ??___awdiv 0074  
                    ??___ftadd 0020                      ??___awmod 007D                         _active 0939  
                    ??___ftdiv 0036                      ??___ftneg 0073                      ??___lldiv 0078  
                    ??___ftmul 0026                      ??___llmod 0028                      ??___ftsub 007E  
                    ??___fttol 0034           ??i1_USARTWriteString 0073       __end_of_USARTWriteString 0A7F  
             ___awdiv@quotient 0077                ___awmod@divisor 0079               ??_lcd_envia_byte 00BB  
              ___awmod@counter 0020                         ftoa@cp 0051          ___ftmul@f3_as_product 002B  
                    ??_isdigit 0070                         saved_w 007E          i1lcd_escreve_string@y 007C  
                    ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 0B1E              ?_USARTReceiveChar 0070  
                    ?_LCDClear 0070        __end_of__initialization 0039             ??_USARTReceiveChar 0073  
                   ___ftadd@f1 0078                     ___ftadd@f2 007B                     ___ftge@ff1 0070  
                   ___ftge@ff2 0073                     ___ftdiv@f1 0033                     ___ftdiv@f2 0030  
                   ___ftdiv@f3 003B                   ?_progressBar 0020                     ___ftneg@f1 0070  
                   ___awtoft@c 0078                     ___ftmul@f1 0020                     ___ftmul@f2 0023  
                   ___ftsub@f1 002A                     ___ftsub@f2 0027                     ___fttol@f1 0030  
               __pcstackCOMMON 0070                   __pidataBANK0 17A5                   __pidataBANK1 17CC  
          __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078               i1_USARTWriteChar 17A7  
                _init_lcd_4bit 0E90         ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 00C0  
                 sprintf@width 003F                     __pbssBANK0 0069                     __pbssBANK1 00A0  
                   ??_LCDClear 00BD                      ISR@input2 0065                      ISR@preint 0060  
                    ISR@status 0059      USARTReceiveChar@USARTData 0074                     __pmaintext 09A2  
                      ?___ftge 0070                        ?___wmul 0070                        ?_active 0070  
                   __pintentry 0004                        _ADCInit 17ED                        _ADCRead 0A21  
                    ?___awtoft 0078                      ?___ftpack 0070               _lcd_envia_nibble 0D21  
                    ?___lltoft 0078                 ?_init_lcd_4bit 0070                     _lcd_gotoxy 08D9  
     __end_ofi1_lcd_envia_byte 0A21               ??_USARTWriteChar 00B8                    sendString@x 004A  
           _lcd_escreve_string 0A7F                      ?_lcd_putc 0070                     __stringtab 0800  
          ?_lcd_escreve_string 00C4                        _Display 00A0                      _ADCResult 0069  
                   _inicialize 0EF6                __size_of___ftge 005D                        ___awdiv 0D7A  
        i1USARTWriteString@str 0071                        ___ftadd 043E                        ___awmod 0C7A  
                      ___ftdiv 06D2                        ___ftneg 17AF                        ___lldiv 0E32  
              __size_of___wmul 0023                        ___ftmul 0545                        ___llmod 0C2C  
                      ___ftsub 08BD                        ___fttol 0F72                __size_of_active 0023  
                   ??___awtoft 007B                     ??___ftpack 0075                        _flag_an 006D  
                   ??___lltoft 007C                        __ptext1 0EF6                        __ptext2 0A7F  
                      __ptext3 0B99                        __ptext4 08D9                        __ptext5 0E90  
                      __ptext6 0A4E                        __ptext7 17BF                        __ptext8 0B59  
                      __ptext9 0AB0           ??_lcd_escreve_string 00C6                   __size_of_ISR 01C5  
                      _dpowers 0810                        _isdigit 07F2               ___awmod@dividend 007B  
              lcd_envia_byte@n 00BA                   ??i1_lcd_putc 0079                     _recipiente 006B  
                      _sprintf 003D                        clrloop0 17B8                     ??_lcd_putc 00C1  
         end_of_initialization 0039                        ftoa@buf 00A7                        ftoa@rem 0049  
      i1lcd_envia_byte@address 0074                     _sendString 0CC9                ___lldiv@divisor 0070  
               progressBar@aux 0026                ___lldiv@counter 007D                      _RCSTAbits 0018  
         __size_of_progressBar 004C             __end_ofi1_lcd_putc 0B59                ??_init_lcd_4bit 00BD  
            ?_USARTWriteString 00B9                      _PORTAbits 0005                      _PORTBbits 0006  
                    _PORTCbits 0007                      _PORTDbits 0008             ??_USARTWriteString 00BB  
                    _TRISBbits 0086                      _TRISCbits 0087                      _TRISDbits 0088  
                  ?_lcd_gotoxy 00BD                _LCD_INIT_STRING 0838                    ___ftdiv@exp 003E  
     __end_ofi1_USARTWriteChar 17AF                      _TXSTAbits 0098              __size_of_LCDClear 0040  
                  ?_inicialize 0070                    ___ftmul@exp 002A             i1_lcd_envia_nibble 0AE5  
    __size_of_USARTReceiveChar 001B                 __end_of___ftge 0E32    __size_ofi1_USARTWriteString 0023  
               __end_of___wmul 097F                 __end_of_active 095C            ?i1_lcd_envia_nibble 0070  
          start_initialization 0015                    __end_of_ISR 043E                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075           ??i1_lcd_envia_nibble 0070  
                  ?_sendString 0070       __end_of_lcd_envia_nibble 0D7A          lcd_envia_byte@address 00BC  
              ___llmod@divisor 0020                ___llmod@counter 0029                       ??___ftge 0076  
          __size_of_lcd_gotoxy 001C                       ??___wmul 0074                     init_fetch0 17DC  
                     ??_active 0071                    __pdataBANK0 006D                    __pdataBANK1 00CC  
                     ?_ADCInit 0070                       ?_ADCRead 00B8        __end_of_LCD_INIT_STRING 083C  
            __size_of___awtoft 0021              __size_of___ftpack 0068              __size_of___lltoft 002B  
                    ___latbits 0002                  __pcstackBANK0 0020                  __pcstackBANK1 00B8  
          __end_of__stringdata 0888            __size_of_inicialize 007C  __size_ofi1_lcd_escreve_string 0023  
            ?i1_lcd_envia_byte 0072        __size_of_lcd_envia_byte 0035             ??i1_lcd_envia_byte 0073  
                  sprintf@_val 003A                    sprintf@flag 0038              __size_of_lcd_putc 0047  
                  sprintf@prec 0041                     ISR@status2 005B                       ISR@input 0062  
                ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078                       ?___awdiv 0070  
                     ?___ftadd 0078                       ?___awmod 0079                       ?___ftdiv 0030  
                     ?___ftneg 0070                       ?___lldiv 0070                       ?___ftmul 0020  
                     ?___llmod 0020                       ?___ftsub 0027                       ?___fttol 0030  
                    __pstrings 0800            __size_of_sendString 0058                       ?_isdigit 0070  
               init_lcd_4bit@i 00BF                       ?_sprintf 002A              progressBar@preint 0020  
            progressBar@result 0038                       _LCDClear 0B59              interrupt_function 0004  
               ___wmul@product 0074                      clear_ram0 17B7                       _PIE1bits 008C  
            lcd_envia_nibble@n 00B9                 ??i1_lcd_gotoxy 0076                       _PIR1bits 000C  
             _USARTReceiveChar 08A2               __size_of_ADCInit 0013               __size_of_ADCRead 002D  
                   _ADCON0bits 001F                    __stringbase 080F                     _ADCON1bits 009F  
                  __stringdata 083C              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 00C3                   ??_lcd_gotoxy 00BE            lcd_escreve_string@y 00C4  
    __size_of_USARTWriteString 0031              ?i1_USARTWriteChar 0070                  ??_progressBar 0022  
      __size_of_USARTWriteChar 000D                   ??_inicialize 00C6             ??i1_USARTWriteChar 0070  
           __end_of_lcd_gotoxy 08F5               __size_of___awdiv 005B               __size_of___ftadd 0107  
             __size_of___awmod 004F               __size_of___ftdiv 00B8               __size_of___ftneg 0008  
             __size_of___lldiv 005E               __size_of___ftmul 00D3               __size_of___llmod 004E  
             __size_of___ftsub 001C               __size_of___fttol 008E                       ___awtoft 08F5  
                     ___ftpack 078A             __end_of__stringtab 0810                       ___lltoft 09CB  
                  _isdigit$880 0070          __end_of_init_lcd_4bit 0EF6               progressBar@F1341 00CC  
             __size_of_isdigit 000E                    active@input 0072                       __ptext10 0D21  
                     __ptext11 17ED                       __ptext20 0AE5                       __ptext12 0A21  
                     __ptext21 0618                       __ptext13 0279                       __ptext30 043E  
                     __ptext22 003D                       __ptext14 0CC9                       __ptext31 17AF  
                     __ptext23 07F2                       __ptext15 0BE0                       __ptext40 08A2  
                     __ptext32 0545                       __ptext24 095C                       __ptext16 097F  
                     __ptext41 0916                       __ptext33 0DD5                       __ptext25 0C2C  
                     __ptext17 0B1E                       __ptext42 17A7                       __ptext34 0939  
                     __ptext26 0E32                       __ptext18 0888                       __ptext35 06D2  
                     __ptext27 09CB                       __ptext19 09F6                       __ptext36 08F5  
                     __ptext28 0F72                       __ptext37 078A                       __ptext29 08BD  
                     __ptext38 0C7A                       __ptext39 0D7A                 _lcd_envia_byte 0AB0  
           __end_of_inicialize 0F72                       _lcd_putc 0B99               __size_of_sprintf 023C  
                 ??_sendString 0073                  __size_of_main 0029                  __size_of_ftoa 00BA  
            ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 00B8     __end_ofi1_USARTWriteString 0939  
          __end_of_progressBar 0C2C             __end_of_sendString 0D21                     _INTCONbits 000B  
       __end_of_lcd_envia_byte 0AE5           __end_ofi1_lcd_gotoxy 08A2                       init_ram0 17E0  
                     isdigit@c 0071                       intlevel1 0000                      sprintf@ap 0039  
                    sprintf@sp 003E    __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074  
                    stringcode 080A                sendString@array 0020                sendString@envio 0048  
 __end_ofi1_lcd_escreve_string 09A2      __size_ofi1_lcd_envia_byte 002B            USARTWriteString@str 00B9  
                     sprintf@c 0043                       sprintf@f 002A               ___lldiv@quotient 0079  
              ?_lcd_envia_byte 00BA                       stringdir 080A                       stringtab 0800  
               sendString@send 0049       __end_of_USARTReceiveChar 08BD               _USARTWriteString 0A4E  
               _USARTWriteChar 17BF                    _progressBar 0BE0  
