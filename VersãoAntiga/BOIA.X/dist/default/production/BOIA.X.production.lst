

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 05 20:19:25 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	dabs	1,0x7E,2
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0088                     	;# 
   100  0089                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  010F                     	;# 
   118  018C                     	;# 
   119  018D                     	;# 
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001D                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  0081                     	;# 
   156  0085                     	;# 
   157  0086                     	;# 
   158  0087                     	;# 
   159  0088                     	;# 
   160  0089                     	;# 
   161  008C                     	;# 
   162  008D                     	;# 
   163  008E                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0094                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180                           
   181                           	psect	idataBANK0
   182  088D                     __pidataBANK0:	
   183                           
   184                           ;initializer for _flag_an
   185  088D  34FF               	retlw	255
   186  088E  34FF               	retlw	255
   187                           
   188                           	psect	idataBANK1
   189  17DF                     __pidataBANK1:	
   190                           
   191                           ;initializer for progressBar@F1341
   192  17DF  3420               	retlw	32
   193  17E0  3420               	retlw	32
   194  17E1  3420               	retlw	32
   195  17E2  3420               	retlw	32
   196  17E3  3420               	retlw	32
   197  17E4  3420               	retlw	32
   198  17E5  3420               	retlw	32
   199  17E6  3420               	retlw	32
   200  17E7  3420               	retlw	32
   201  17E8  3420               	retlw	32
   202  17E9  3420               	retlw	32
   203  17EA  3420               	retlw	32
   204  17EB  3420               	retlw	32
   205  17EC  3420               	retlw	32
   206  17ED  3420               	retlw	32
   207  17EE  3420               	retlw	32
   208                           
   209                           	psect	strings
   210  0800                     __pstrings:	
   211  0800                     stringtab:	
   212  0800                     __stringtab:	
   213                           
   214                           ;	String table - string pointers are 1 byte each
   215  0800  1BFF               	btfsc	btemp+1,7
   216  0801  280A               	ljmp	stringcode
   217  0802  1383               	bcf	3,7
   218  0803  187F               	btfsc	btemp+1,0
   219  0804  1783               	bsf	3,7
   220  0805  0800               	movf	0,w
   221  0806  0A84               	incf	4,f
   222  0807  1903               	skipnz
   223  0808  0AFF               	incf	btemp+1,f
   224  0809  0008               	return
   225  080A                     stringcode:	
   226  080A                     stringdir:	
   227  080A  3008               	movlw	high stringdir
   228  080B  008A               	movwf	10
   229  080C  0804               	movf	4,w
   230  080D  0A84               	incf	4,f
   231  080E  0782               	addwf	2,f
   232  080F                     __stringbase:	
   233  080F  3400               	retlw	0
   234  0810                     __end_of__stringtab:	
   235  0810                     _dpowers:	
   236  0810  3401               	retlw	1
   237  0811  3400               	retlw	0
   238  0812  3400               	retlw	0
   239  0813  3400               	retlw	0
   240  0814  340A               	retlw	10
   241  0815  3400               	retlw	0
   242  0816  3400               	retlw	0
   243  0817  3400               	retlw	0
   244  0818  3464               	retlw	100
   245  0819  3400               	retlw	0
   246  081A  3400               	retlw	0
   247  081B  3400               	retlw	0
   248  081C  34E8               	retlw	232
   249  081D  3403               	retlw	3
   250  081E  3400               	retlw	0
   251  081F  3400               	retlw	0
   252  0820  3410               	retlw	16
   253  0821  3427               	retlw	39
   254  0822  3400               	retlw	0
   255  0823  3400               	retlw	0
   256  0824  34A0               	retlw	160
   257  0825  3486               	retlw	134
   258  0826  3401               	retlw	1
   259  0827  3400               	retlw	0
   260  0828  3440               	retlw	64
   261  0829  3442               	retlw	66
   262  082A  340F               	retlw	15
   263  082B  3400               	retlw	0
   264  082C  3480               	retlw	128
   265  082D  3496               	retlw	150
   266  082E  3498               	retlw	152
   267  082F  3400               	retlw	0
   268  0830  3400               	retlw	0
   269  0831  34E1               	retlw	225
   270  0832  34F5               	retlw	245
   271  0833  3405               	retlw	5
   272  0834  3400               	retlw	0
   273  0835  34CA               	retlw	202
   274  0836  349A               	retlw	154
   275  0837  343B               	retlw	59
   276  0838                     __end_of_dpowers:	
   277  0838                     _LCD_INIT_STRING:	
   278  0838  341C               	retlw	28
   279  0839  340C               	retlw	12
   280  083A  3401               	retlw	1
   281  083B  3406               	retlw	6
   282  083C                     __end_of_LCD_INIT_STRING:	
   283  001F                     _ADCON0bits	set	31
   284  001E                     _ADRESH	set	30
   285  000B                     _INTCONbits	set	11
   286  000C                     _PIR1bits	set	12
   287  0005                     _PORTAbits	set	5
   288  0006                     _PORTBbits	set	6
   289  0007                     _PORTCbits	set	7
   290  0008                     _PORTDbits	set	8
   291  001A                     _RCREG	set	26
   292  0018                     _RCSTAbits	set	24
   293  0019                     _TXREG	set	25
   294  00C1                     _OERR	set	193
   295  009F                     _ADCON1bits	set	159
   296  009E                     _ADRESL	set	158
   297  008C                     _PIE1bits	set	140
   298  0099                     _SPBRG	set	153
   299  0085                     _TRISA	set	133
   300  0086                     _TRISBbits	set	134
   301  0087                     _TRISCbits	set	135
   302  0088                     _TRISDbits	set	136
   303  0098                     _TXSTAbits	set	152
   304  083C                     __stringdata:	
   305  083C                     STR_1:	
   306  083C  340A               	retlw	10
   307  083D  340D               	retlw	13
   308  083E  3420               	retlw	32	;' '
   309  083F  342D               	retlw	45	;'-'
   310  0840  342D               	retlw	45	;'-'
   311  0841  342D               	retlw	45	;'-'
   312  0842  342D               	retlw	45	;'-'
   313  0843  342D               	retlw	45	;'-'
   314  0844  342D               	retlw	45	;'-'
   315  0845  342D               	retlw	45	;'-'
   316  0846  3420               	retlw	32	;' '
   317  0847  3445               	retlw	69	;'E'
   318  0848  3453               	retlw	83	;'S'
   319  0849  3454               	retlw	84	;'T'
   320  084A  344F               	retlw	79	;'O'
   321  084B  3455               	retlw	85	;'U'
   322  084C  3452               	retlw	82	;'R'
   323  084D  344F               	retlw	79	;'O'
   324  084E  3420               	retlw	32	;' '
   325  084F  3444               	retlw	68	;'D'
   326  0850  3445               	retlw	69	;'E'
   327  0851  3420               	retlw	32	;' '
   328  0852  3450               	retlw	80	;'P'
   329  0853  3449               	retlw	73	;'I'
   330  0854  344C               	retlw	76	;'L'
   331  0855  3448               	retlw	72	;'H'
   332  0856  3441               	retlw	65	;'A'
   333  0857  3420               	retlw	32	;' '
   334  0858  342D               	retlw	45	;'-'
   335  0859  342D               	retlw	45	;'-'
   336  085A  342D               	retlw	45	;'-'
   337  085B  342D               	retlw	45	;'-'
   338  085C  342D               	retlw	45	;'-'
   339  085D  342D               	retlw	45	;'-'
   340  085E  342D               	retlw	45	;'-'
   341  085F  3420               	retlw	32	;' '
   342  0860  340A               	retlw	10
   343  0861  340D               	retlw	13
   344  0862  3420               	retlw	32	;' '
   345  0863  3400               	retlw	0
   346  0864                     STR_4:	
   347  0864  340C               	retlw	12
   348  0865  344C               	retlw	76	;'L'
   349  0866  346F               	retlw	111	;'o'
   350  0867  3461               	retlw	97	;'a'
   351  0868  3464               	retlw	100	;'d'
   352  0869  3469               	retlw	105	;'i'
   353  086A  346E               	retlw	110	;'n'
   354  086B  3467               	retlw	103	;'g'
   355  086C  3420               	retlw	32	;' '
   356  086D  3450               	retlw	80	;'P'
   357  086E  3449               	retlw	73	;'I'
   358  086F  3443               	retlw	67	;'C'
   359  0870  342E               	retlw	46	;'.'
   360  0871  342E               	retlw	46	;'.'
   361  0872  342E               	retlw	46	;'.'
   362  0873  3400               	retlw	0
   363  0874                     STR_7:	
   364  0874  3425               	retlw	37	;'%'
   365  0875  346C               	retlw	108	;'l'
   366  0876  3475               	retlw	117	;'u'
   367  0877  342E               	retlw	46	;'.'
   368  0878  3425               	retlw	37	;'%'
   369  0879  3436               	retlw	54	;'6'
   370  087A  342E               	retlw	46	;'.'
   371  087B  3436               	retlw	54	;'6'
   372  087C  346C               	retlw	108	;'l'
   373  087D  3475               	retlw	117	;'u'
   374  087E  3400               	retlw	0
   375  087F                     STR_2:	
   376  087F  344E               	retlw	78	;'N'
   377  0880  3469               	retlw	105	;'i'
   378  0881  3476               	retlw	118	;'v'
   379  0882  3465               	retlw	101	;'e'
   380  0883  346C               	retlw	108	;'l'
   381  0884  343A               	retlw	58	;':'
   382  0885  3400               	retlw	0
   383  0886                     STR_6:	
   384  0886  346C               	retlw	108	;'l'
   385  0887  346F               	retlw	111	;'o'
   386  0888  346F               	retlw	111	;'o'
   387  0889  3470               	retlw	112	;'p'
   388  088A  3400               	retlw	0
   389  088B                     STR_3:	
   390  088B  3425               	retlw	37	;'%'
   391  088C  3400               	retlw	0
   392  088D                     __end_of__stringdata:	
   393                           
   394                           ; #config settings
   395  0000                     
   396                           	psect	cinit
   397  0015                     start_initialization:	
   398  0015                     __initialization:	
   399                           
   400                           ; Clear objects allocated to BANK0
   401  0015  01E9               	clrf	__pbssBANK0& (0+127)
   402  0016  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   403  0017  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   404  0018  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   405                           
   406                           ; Clear objects allocated to BANK1
   407  0019  1383               	bcf	3,7	;select IRP bank0
   408  001A  30A0               	movlw	low __pbssBANK1
   409  001B  0084               	movwf	4
   410  001C  30B8               	movlw	low (__pbssBANK1+24)
   411  001D  160A  118A  27D7  120A  118A  	fcall	clear_ram0
   412                           
   413                           ; Initialize objects allocated to BANK1
   414  0022  30D9               	movlw	low (__pdataBANK1+16)
   415  0023  00FD               	movwf	btemp+-1
   416  0024  3017               	movlw	high __pidataBANK1
   417  0025  00FE               	movwf	btemp
   418  0026  30DF               	movlw	low __pidataBANK1
   419  0027  00FF               	movwf	btemp+1
   420  0028  30C9               	movlw	low __pdataBANK1
   421  0029  0084               	movwf	4
   422  002A  160A  118A  27F3  120A  118A  	fcall	init_ram0
   423                           
   424                           ; Initialize objects allocated to BANK0
   425  002F  120A  158A  208D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   426  0034  00ED               	movwf	__pdataBANK0& (0+127)
   427  0035  120A  158A  208E   	fcall	__pidataBANK0+1	;fetch initializer
   428  0038  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   429  0039                     end_of_initialization:	
   430                           ;End of C runtime variable initialization code
   431                           
   432  0039                     __end_of__initialization:	
   433  0039  0183               	clrf	3
   434  003A  120A  158A  2EEF   	ljmp	_main	;jump to C main() function
   435                           
   436                           	psect	bssBANK0
   437  0069                     __pbssBANK0:	
   438  0069                     _ADCResult:	
   439  0069                     	ds	2
   440  006B                     _recipiente:	
   441  006B                     	ds	2
   442                           
   443                           	psect	dataBANK0
   444  006D                     __pdataBANK0:	
   445  006D                     _flag_an:	
   446  006D                     	ds	2
   447                           
   448                           	psect	bssBANK1
   449  00A0                     __pbssBANK1:	
   450  00A0                     _Display:	
   451  00A0                     	ds	7
   452  00A7                     ftoa@buf:	
   453  00A7                     	ds	17
   454                           
   455                           	psect	dataBANK1
   456  00C9                     __pdataBANK1:	
   457  00C9                     progressBar@F1341:	
   458  00C9                     	ds	16
   459                           
   460                           	psect	clrtext
   461  17D7                     clear_ram0:	
   462                           ;	Called with FSR containing the base address, and
   463                           ;	W with the last address+1
   464                           
   465  17D7  0064               	clrwdt	;clear the watchdog before getting into this loop
   466  17D8                     clrloop0:	
   467  17D8  0180               	clrf	0	;clear RAM location pointed to by FSR
   468  17D9  0A84               	incf	4,f	;increment pointer
   469  17DA  0604               	xorwf	4,w	;XOR with final address
   470  17DB  1903               	btfsc	3,2	;have we reached the end yet?
   471  17DC  3400               	retlw	0	;all done for this memory range, return
   472  17DD  0604               	xorwf	4,w	;XOR again to restore value
   473  17DE  2FD8               	goto	clrloop0	;do the next byte
   474                           
   475                           	psect	inittext
   476  17EF                     init_fetch0:	
   477                           ;	Called with low address in FSR and high address in W
   478                           
   479  17EF  087E               	movf	126,w
   480  17F0  008A               	movwf	10
   481  17F1  087F               	movf	127,w
   482  17F2  0082               	movwf	2
   483  17F3                     init_ram0:	
   484                           ;Called with:
   485                           ;	high address of idata address in btemp 
   486                           ;	low address of idata address in btemp+1 
   487                           ;	low address of data in FSR
   488                           ;	high address + 1 of data in btemp-1
   489                           
   490  17F3  27EF  160A  118A   	fcall	init_fetch0
   491  17F6  0080               	movwf	0
   492  17F7  0A84               	incf	4,f
   493  17F8  0804               	movf	4,w
   494  17F9  067D               	xorwf	125,w
   495  17FA  1903               	btfsc	3,2
   496  17FB  3400               	retlw	0
   497  17FC  0AFF               	incf	127,f
   498  17FD  1903               	btfsc	3,2
   499  17FE  0AFE               	incf	126,f
   500  17FF  2FF3               	goto	init_ram0
   501                           
   502                           	psect	cstackBANK1
   503  00B8                     __pcstackBANK1:	
   504  00B8                     ??_lcd_envia_nibble:	
   505  00B8                     ??_USARTWriteChar:	
   506                           ; 0 bytes @ 0x0
   507                           
   508  00B8                     ??_ADCInit:	
   509                           ; 0 bytes @ 0x0
   510                           
   511  00B8                     USARTWriteChar@USARTData:	
   512                           ; 0 bytes @ 0x0
   513                           
   514                           
   515                           ; 1 bytes @ 0x0
   516  00B8                     	ds	1
   517  00B9                     ?_USARTWriteString:	
   518  00B9                     lcd_envia_nibble@n:	
   519                           ; 0 bytes @ 0x1
   520                           
   521  00B9                     USARTWriteString@str:	
   522                           ; 1 bytes @ 0x1
   523                           
   524                           
   525                           ; 2 bytes @ 0x1
   526  00B9                     	ds	1
   527  00BA                     ?_lcd_envia_byte:	
   528  00BA                     lcd_envia_byte@n:	
   529                           ; 0 bytes @ 0x2
   530                           
   531                           
   532                           ; 1 bytes @ 0x2
   533  00BA                     	ds	1
   534  00BB                     ??_lcd_envia_byte:	
   535  00BB                     ??_USARTWriteString:	
   536                           ; 0 bytes @ 0x3
   537                           
   538                           
   539                           ; 0 bytes @ 0x3
   540  00BB                     	ds	1
   541  00BC                     lcd_envia_byte@address:	
   542                           
   543                           ; 1 bytes @ 0x4
   544  00BC                     	ds	1
   545  00BD                     ?_lcd_gotoxy:	
   546  00BD                     ??_init_lcd_4bit:	
   547                           ; 0 bytes @ 0x5
   548                           
   549  00BD                     ??_LCDClear:	
   550                           ; 0 bytes @ 0x5
   551                           
   552  00BD                     lcd_gotoxy@y:	
   553                           ; 0 bytes @ 0x5
   554                           
   555                           
   556                           ; 1 bytes @ 0x5
   557  00BD                     	ds	1
   558  00BE                     ??_lcd_gotoxy:	
   559                           
   560                           ; 0 bytes @ 0x6
   561  00BE                     	ds	1
   562  00BF                     init_lcd_4bit@i:	
   563  00BF                     lcd_gotoxy@x:	
   564                           ; 1 bytes @ 0x7
   565                           
   566                           
   567                           ; 1 bytes @ 0x7
   568  00BF                     	ds	1
   569  00C0                     lcd_gotoxy@address:	
   570                           
   571                           ; 1 bytes @ 0x8
   572  00C0                     	ds	1
   573  00C1                     ??_lcd_putc:	
   574                           
   575                           ; 0 bytes @ 0x9
   576  00C1                     	ds	2
   577  00C3                     lcd_putc@c:	
   578                           
   579                           ; 1 bytes @ 0xB
   580  00C3                     	ds	1
   581  00C4                     ?_lcd_escreve_string:	
   582  00C4                     lcd_escreve_string@y:	
   583                           ; 0 bytes @ 0xC
   584                           
   585                           
   586                           ; 2 bytes @ 0xC
   587  00C4                     	ds	2
   588  00C6                     ??_lcd_escreve_string:	
   589  00C6                     ??_main:	
   590                           ; 0 bytes @ 0xE
   591                           
   592                           
   593                           ; 0 bytes @ 0xE
   594  00C6                     	ds	3
   595                           
   596                           	psect	cstackCOMMON
   597  0070                     __pcstackCOMMON:	
   598  0070                     ?_init_lcd_4bit:	
   599  0070                     ?_LCDClear:	
   600                           ; 0 bytes @ 0x0
   601                           
   602  0070                     ?_lcd_envia_nibble:	
   603                           ; 0 bytes @ 0x0
   604                           
   605  0070                     ?_isdigit:	
   606                           ; 0 bytes @ 0x0
   607                           
   608  0070                     ??_isdigit:	
   609                           ; 1 bit 
   610                           
   611  0070                     ?_USARTWriteChar:	
   612                           ; 0 bytes @ 0x0
   613                           
   614  0070                     ?_ADCInit:	
   615                           ; 0 bytes @ 0x0
   616                           
   617  0070                     ?_active:	
   618                           ; 0 bytes @ 0x0
   619                           
   620  0070                     ?_sendString:	
   621                           ; 0 bytes @ 0x0
   622                           
   623  0070                     ?_ISR:	
   624                           ; 0 bytes @ 0x0
   625                           
   626  0070                     ?_main:	
   627                           ; 0 bytes @ 0x0
   628                           
   629  0070                     ?_lcd_putc:	
   630                           ; 0 bytes @ 0x0
   631                           
   632  0070                     ?___ftge:	
   633                           ; 0 bytes @ 0x0
   634                           
   635  0070                     ?i1_USARTWriteChar:	
   636                           ; 1 bit 
   637                           
   638  0070                     ??i1_USARTWriteChar:	
   639                           ; 0 bytes @ 0x0
   640                           
   641  0070                     ?i1_lcd_envia_nibble:	
   642                           ; 0 bytes @ 0x0
   643                           
   644  0070                     ??i1_lcd_envia_nibble:	
   645                           ; 0 bytes @ 0x0
   646                           
   647  0070                     ?i1_lcd_putc:	
   648                           ; 0 bytes @ 0x0
   649                           
   650  0070                     ?_USARTReceiveChar:	
   651                           ; 0 bytes @ 0x0
   652                           
   653  0070                     ?___wmul:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?___awdiv:	
   657                           ; 2 bytes @ 0x0
   658                           
   659  0070                     ?___ftpack:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0070                     ?___ftneg:	
   663                           ; 3 bytes @ 0x0
   664                           
   665  0070                     ?___lldiv:	
   666                           ; 3 bytes @ 0x0
   667                           
   668  0070                     _isdigit$879:	
   669                           ; 4 bytes @ 0x0
   670                           
   671  0070                     i1USARTWriteChar@USARTData:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ___wmul@multiplier:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ___awdiv@divisor:	
   678                           ; 2 bytes @ 0x0
   679                           
   680  0070                     ___ftpack@arg:	
   681                           ; 2 bytes @ 0x0
   682                           
   683  0070                     ___ftge@ff1:	
   684                           ; 3 bytes @ 0x0
   685                           
   686  0070                     ___ftneg@f1:	
   687                           ; 3 bytes @ 0x0
   688                           
   689  0070                     ___lldiv@divisor:	
   690                           ; 3 bytes @ 0x0
   691                           
   692                           
   693                           ; 4 bytes @ 0x0
   694  0070                     	ds	1
   695  0071                     ??_active:	
   696  0071                     ?i1_USARTWriteString:	
   697                           ; 0 bytes @ 0x1
   698                           
   699  0071                     active@input:	
   700                           ; 0 bytes @ 0x1
   701                           
   702  0071                     isdigit@c:	
   703                           ; 1 bytes @ 0x1
   704                           
   705  0071                     i1lcd_envia_nibble@n:	
   706                           ; 1 bytes @ 0x1
   707                           
   708  0071                     i1USARTWriteString@str:	
   709                           ; 1 bytes @ 0x1
   710                           
   711                           
   712                           ; 2 bytes @ 0x1
   713  0071                     	ds	1
   714  0072                     ?i1_lcd_envia_byte:	
   715  0072                     i1lcd_envia_byte@n:	
   716                           ; 0 bytes @ 0x2
   717                           
   718  0072                     ___wmul@multiplicand:	
   719                           ; 1 bytes @ 0x2
   720                           
   721  0072                     ___awdiv@dividend:	
   722                           ; 2 bytes @ 0x2
   723                           
   724                           
   725                           ; 2 bytes @ 0x2
   726  0072                     	ds	1
   727  0073                     ??_USARTReceiveChar:	
   728  0073                     ??_sendString:	
   729                           ; 0 bytes @ 0x3
   730                           
   731  0073                     ??___ftneg:	
   732                           ; 0 bytes @ 0x3
   733                           
   734  0073                     ??i1_USARTWriteString:	
   735                           ; 0 bytes @ 0x3
   736                           
   737  0073                     ??i1_lcd_envia_byte:	
   738                           ; 0 bytes @ 0x3
   739                           
   740  0073                     ___ftpack@exp:	
   741                           ; 0 bytes @ 0x3
   742                           
   743  0073                     ___ftge@ff2:	
   744                           ; 1 bytes @ 0x3
   745                           
   746                           
   747                           ; 3 bytes @ 0x3
   748  0073                     	ds	1
   749  0074                     ??___wmul:	
   750  0074                     ??___awdiv:	
   751                           ; 0 bytes @ 0x4
   752                           
   753  0074                     USARTReceiveChar@USARTData:	
   754                           ; 0 bytes @ 0x4
   755                           
   756  0074                     ___ftpack@sign:	
   757                           ; 1 bytes @ 0x4
   758                           
   759  0074                     i1lcd_envia_byte@address:	
   760                           ; 1 bytes @ 0x4
   761                           
   762  0074                     ___wmul@product:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  0074                     ___lldiv@dividend:	
   766                           ; 2 bytes @ 0x4
   767                           
   768                           
   769                           ; 4 bytes @ 0x4
   770  0074                     	ds	1
   771  0075                     ??___ftpack:	
   772  0075                     ?i1_lcd_gotoxy:	
   773                           ; 0 bytes @ 0x5
   774                           
   775  0075                     ___awdiv@counter:	
   776                           ; 0 bytes @ 0x5
   777                           
   778  0075                     i1lcd_gotoxy@y:	
   779                           ; 1 bytes @ 0x5
   780                           
   781                           
   782                           ; 1 bytes @ 0x5
   783  0075                     	ds	1
   784  0076                     ??___ftge:	
   785  0076                     ??i1_lcd_gotoxy:	
   786                           ; 0 bytes @ 0x6
   787                           
   788  0076                     ___awdiv@sign:	
   789                           ; 0 bytes @ 0x6
   790                           
   791                           
   792                           ; 1 bytes @ 0x6
   793  0076                     	ds	1
   794  0077                     i1lcd_gotoxy@x:	
   795  0077                     ___awdiv@quotient:	
   796                           ; 1 bytes @ 0x7
   797                           
   798                           
   799                           ; 2 bytes @ 0x7
   800  0077                     	ds	1
   801  0078                     ??___lldiv:	
   802  0078                     ?___awtoft:	
   803                           ; 0 bytes @ 0x8
   804                           
   805  0078                     ?___ftadd:	
   806                           ; 3 bytes @ 0x8
   807                           
   808  0078                     ?___lltoft:	
   809                           ; 3 bytes @ 0x8
   810                           
   811  0078                     i1lcd_gotoxy@address:	
   812                           ; 3 bytes @ 0x8
   813                           
   814  0078                     ___awtoft@c:	
   815                           ; 1 bytes @ 0x8
   816                           
   817  0078                     ___ftadd@f1:	
   818                           ; 2 bytes @ 0x8
   819                           
   820  0078                     ___lltoft@c:	
   821                           ; 3 bytes @ 0x8
   822                           
   823                           
   824                           ; 4 bytes @ 0x8
   825  0078                     	ds	1
   826  0079                     ??i1_lcd_putc:	
   827  0079                     ?___awmod:	
   828                           ; 0 bytes @ 0x9
   829                           
   830  0079                     ___awmod@divisor:	
   831                           ; 2 bytes @ 0x9
   832                           
   833  0079                     ___lldiv@quotient:	
   834                           ; 2 bytes @ 0x9
   835                           
   836                           
   837                           ; 4 bytes @ 0x9
   838  0079                     	ds	2
   839  007B                     ??___awtoft:	
   840  007B                     i1lcd_putc@c:	
   841                           ; 0 bytes @ 0xB
   842                           
   843  007B                     ___awmod@dividend:	
   844                           ; 1 bytes @ 0xB
   845                           
   846  007B                     ___ftadd@f2:	
   847                           ; 2 bytes @ 0xB
   848                           
   849                           
   850                           ; 3 bytes @ 0xB
   851  007B                     	ds	1
   852  007C                     ??___lltoft:	
   853  007C                     ?i1_lcd_escreve_string:	
   854                           ; 0 bytes @ 0xC
   855                           
   856  007C                     i1lcd_escreve_string@y:	
   857                           ; 0 bytes @ 0xC
   858                           
   859                           
   860                           ; 2 bytes @ 0xC
   861  007C                     	ds	1
   862  007D                     ??___awmod:	
   863  007D                     ___awtoft@sign:	
   864                           ; 0 bytes @ 0xD
   865                           
   866  007D                     ___lldiv@counter:	
   867                           ; 1 bytes @ 0xD
   868                           
   869  007D                     ___lltoft@exp:	
   870                           ; 1 bytes @ 0xD
   871                           
   872                           
   873                           ; 1 bytes @ 0xD
   874  007D                     	ds	1
   875  007E                     ??___ftsub:	
   876  007E                     ??i1_lcd_escreve_string:	
   877                           ; 0 bytes @ 0xE
   878                           
   879                           
   880                           	psect	cstackBANK0
   881  0020                     __pcstackBANK0:	
   882                           ; 0 bytes @ 0xE
   883                           
   884  0020                     ?_progressBar:	
   885  0020                     ??___ftadd:	
   886                           ; 0 bytes @ 0x0
   887                           
   888  0020                     ?___ftmul:	
   889                           ; 0 bytes @ 0x0
   890                           
   891  0020                     ?___llmod:	
   892                           ; 3 bytes @ 0x0
   893                           
   894  0020                     ___awmod@counter:	
   895                           ; 4 bytes @ 0x0
   896                           
   897  0020                     progressBar@preint:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0020                     ___ftmul@f1:	
   901                           ; 2 bytes @ 0x0
   902                           
   903  0020                     ___llmod@divisor:	
   904                           ; 3 bytes @ 0x0
   905                           
   906  0020                     sendString@array:	
   907                           ; 4 bytes @ 0x0
   908                           
   909                           
   910                           ; 40 bytes @ 0x0
   911  0020                     	ds	1
   912  0021                     ___awmod@sign:	
   913                           
   914                           ; 1 bytes @ 0x1
   915  0021                     	ds	1
   916  0022                     ??_progressBar:	
   917                           
   918                           ; 0 bytes @ 0x2
   919  0022                     	ds	1
   920  0023                     ___ftmul@f2:	
   921                           
   922                           ; 3 bytes @ 0x3
   923  0023                     	ds	1
   924  0024                     ___ftadd@sign:	
   925  0024                     ___llmod@dividend:	
   926                           ; 1 bytes @ 0x4
   927                           
   928                           
   929                           ; 4 bytes @ 0x4
   930  0024                     	ds	1
   931  0025                     ___ftadd@exp2:	
   932                           
   933                           ; 1 bytes @ 0x5
   934  0025                     	ds	1
   935  0026                     ??___ftmul:	
   936  0026                     ___ftadd@exp1:	
   937                           ; 0 bytes @ 0x6
   938                           
   939  0026                     progressBar@aux:	
   940                           ; 1 bytes @ 0x6
   941                           
   942                           
   943                           ; 16 bytes @ 0x6
   944  0026                     	ds	1
   945  0027                     ?___ftsub:	
   946  0027                     ___ftsub@f2:	
   947                           ; 3 bytes @ 0x7
   948                           
   949                           
   950                           ; 3 bytes @ 0x7
   951  0027                     	ds	1
   952  0028                     ??___llmod:	
   953                           
   954                           ; 0 bytes @ 0x8
   955  0028                     	ds	1
   956  0029                     ___llmod@counter:	
   957                           
   958                           ; 1 bytes @ 0x9
   959  0029                     	ds	1
   960  002A                     ?_sprintf:	
   961  002A                     sprintf@f:	
   962                           ; 2 bytes @ 0xA
   963                           
   964  002A                     ___ftmul@exp:	
   965                           ; 1 bytes @ 0xA
   966                           
   967  002A                     ___ftsub@f1:	
   968                           ; 1 bytes @ 0xA
   969                           
   970                           
   971                           ; 3 bytes @ 0xA
   972  002A                     	ds	1
   973  002B                     ___ftmul@f3_as_product:	
   974                           
   975                           ; 3 bytes @ 0xB
   976  002B                     	ds	3
   977  002E                     ___ftmul@cntr:	
   978                           
   979                           ; 1 bytes @ 0xE
   980  002E                     	ds	1
   981  002F                     ___ftmul@sign:	
   982                           
   983                           ; 1 bytes @ 0xF
   984  002F                     	ds	1
   985  0030                     ?___ftdiv:	
   986  0030                     ?___fttol:	
   987                           ; 3 bytes @ 0x10
   988                           
   989  0030                     ___ftdiv@f2:	
   990                           ; 4 bytes @ 0x10
   991                           
   992  0030                     ___fttol@f1:	
   993                           ; 3 bytes @ 0x10
   994                           
   995                           
   996                           ; 3 bytes @ 0x10
   997  0030                     	ds	3
   998  0033                     ??_sprintf:	
   999  0033                     ___ftdiv@f1:	
  1000                           ; 0 bytes @ 0x13
  1001                           
  1002                           
  1003                           ; 3 bytes @ 0x13
  1004  0033                     	ds	1
  1005  0034                     ??___fttol:	
  1006                           
  1007                           ; 0 bytes @ 0x14
  1008  0034                     	ds	2
  1009  0036                     ??___ftdiv:	
  1010  0036                     progressBar@i:	
  1011                           ; 0 bytes @ 0x16
  1012                           
  1013                           
  1014                           ; 2 bytes @ 0x16
  1015  0036                     	ds	2
  1016  0038                     progressBar@result:	
  1017  0038                     sprintf@flag:	
  1018                           ; 1 bytes @ 0x18
  1019                           
  1020  0038                     ___fttol@sign1:	
  1021                           ; 1 bytes @ 0x18
  1022                           
  1023                           
  1024                           ; 1 bytes @ 0x18
  1025  0038                     	ds	1
  1026  0039                     sprintf@ap:	
  1027  0039                     ___fttol@lval:	
  1028                           ; 1 bytes @ 0x19
  1029                           
  1030                           
  1031                           ; 4 bytes @ 0x19
  1032  0039                     	ds	1
  1033  003A                     ___ftdiv@cntr:	
  1034  003A                     sprintf@_val:	
  1035                           ; 1 bytes @ 0x1A
  1036                           
  1037                           
  1038                           ; 4 bytes @ 0x1A
  1039  003A                     	ds	1
  1040  003B                     ___ftdiv@f3:	
  1041                           
  1042                           ; 3 bytes @ 0x1B
  1043  003B                     	ds	2
  1044  003D                     ___fttol@exp1:	
  1045                           
  1046                           ; 1 bytes @ 0x1D
  1047  003D                     	ds	1
  1048  003E                     sprintf@sp:	
  1049  003E                     ___ftdiv@exp:	
  1050                           ; 1 bytes @ 0x1E
  1051                           
  1052                           
  1053                           ; 1 bytes @ 0x1E
  1054  003E                     	ds	1
  1055  003F                     ___ftdiv@sign:	
  1056  003F                     sprintf@width:	
  1057                           ; 1 bytes @ 0x1F
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x1F
  1061  003F                     	ds	2
  1062  0041                     sprintf@prec:	
  1063                           
  1064                           ; 2 bytes @ 0x21
  1065  0041                     	ds	2
  1066  0043                     sprintf@c:	
  1067                           
  1068                           ; 1 bytes @ 0x23
  1069  0043                     	ds	1
  1070  0044                     ?_ftoa:	
  1071  0044                     ftoa@f:	
  1072                           ; 1 bytes @ 0x24
  1073                           
  1074                           
  1075                           ; 3 bytes @ 0x24
  1076  0044                     	ds	3
  1077  0047                     ftoa@status:	
  1078                           
  1079                           ; 1 bytes @ 0x27
  1080  0047                     	ds	1
  1081  0048                     ??_ftoa:	
  1082  0048                     sendString@envio:	
  1083                           ; 0 bytes @ 0x28
  1084                           
  1085                           
  1086                           ; 1 bytes @ 0x28
  1087  0048                     	ds	1
  1088  0049                     sendString@send:	
  1089  0049                     ftoa@rem:	
  1090                           ; 1 bytes @ 0x29
  1091                           
  1092                           
  1093                           ; 4 bytes @ 0x29
  1094  0049                     	ds	1
  1095  004A                     sendString@x:	
  1096                           
  1097                           ; 2 bytes @ 0x2A
  1098  004A                     	ds	3
  1099  004D                     ftoa@l:	
  1100                           
  1101                           ; 4 bytes @ 0x2D
  1102  004D                     	ds	4
  1103  0051                     ftoa@cp:	
  1104                           
  1105                           ; 1 bytes @ 0x31
  1106  0051                     	ds	1
  1107  0052                     ??_ISR:	
  1108                           
  1109                           ; 0 bytes @ 0x32
  1110  0052                     	ds	6
  1111  0058                     ISR@buf:	
  1112                           
  1113                           ; 1 bytes @ 0x38
  1114  0058                     	ds	1
  1115  0059                     ISR@status:	
  1116                           
  1117                           ; 2 bytes @ 0x39
  1118  0059                     	ds	2
  1119  005B                     ISR@status2:	
  1120                           
  1121                           ; 2 bytes @ 0x3B
  1122  005B                     	ds	2
  1123  005D                     ISR@pre:	
  1124                           
  1125                           ; 3 bytes @ 0x3D
  1126  005D                     	ds	3
  1127  0060                     ISR@preint:	
  1128                           
  1129                           ; 2 bytes @ 0x40
  1130  0060                     	ds	2
  1131  0062                     ISR@input:	
  1132                           
  1133                           ; 3 bytes @ 0x42
  1134  0062                     	ds	3
  1135  0065                     ISR@input2:	
  1136                           
  1137                           ; 3 bytes @ 0x45
  1138  0065                     	ds	3
  1139  0068                     ISR@per:	
  1140                           
  1141                           ; 1 bytes @ 0x48
  1142  0068                     	ds	1
  1143                           
  1144                           	psect	maintext
  1145  0EEF                     __pmaintext:	
  1146 ;;
  1147 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1148 ;;
  1149 ;; *************** function _main *****************
  1150 ;; Defined at:
  1151 ;;		line 335 in file "main.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;		None               void
  1158 ;; Registers used:
  1159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 17F/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       0       0       0       0
  1166 ;;      Locals:         0       0       0       0       0
  1167 ;;      Temps:          0       0       3       0       0
  1168 ;;      Totals:         0       0       3       0       0
  1169 ;;Total ram usage:        3 bytes
  1170 ;; Hardware stack levels required when called:   12
  1171 ;; This function calls:
  1172 ;;		_ADCInit
  1173 ;;		_LCDClear
  1174 ;;		_USARTWriteString
  1175 ;;		_init_lcd_4bit
  1176 ;;		_lcd_escreve_string
  1177 ;; This function is called by:
  1178 ;;		Startup code after reset
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _main
  1184  0EEF                     _main:	
  1185                           
  1186                           ;main.c: 338: TRISA = 0b11111111;
  1187                           
  1188                           ;incstack = 0
  1189 ;; hardware stack exceeded
  1190                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1191  0EEF  30FF               	movlw	255
  1192  0EF0  1683               	bsf	3,5	;RP0=1, select bank1
  1193  0EF1  1303               	bcf	3,6	;RP1=0, select bank1
  1194  0EF2  0085               	movwf	5	;volatile
  1195                           
  1196                           ;main.c: 339: PORTAbits.RA0 = 0;
  1197  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  1198  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  1199  0EF5  1005               	bcf	5,0	;volatile
  1200                           
  1201                           ;main.c: 340: TRISDbits.TRISD2 = 0;
  1202  0EF6  1683               	bsf	3,5	;RP0=1, select bank1
  1203  0EF7  1303               	bcf	3,6	;RP1=0, select bank1
  1204  0EF8  1108               	bcf	8,2	;volatile
  1205                           
  1206                           ;main.c: 341: PORTDbits.RD2 = 1;
  1207  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  1208  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  1209  0EFB  1508               	bsf	8,2	;volatile
  1210                           
  1211                           ;main.c: 342: TRISDbits.TRISD3 = 0;
  1212  0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  1213  0EFD  1303               	bcf	3,6	;RP1=0, select bank1
  1214  0EFE  1188               	bcf	8,3	;volatile
  1215                           
  1216                           ;main.c: 343: PORTDbits.RD3 = 0;
  1217  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0F01  1188               	bcf	8,3	;volatile
  1220                           
  1221                           ;main.c: 345: TRISCbits.TRISC0 = 1;
  1222  0F02  1683               	bsf	3,5	;RP0=1, select bank1
  1223  0F03  1303               	bcf	3,6	;RP1=0, select bank1
  1224  0F04  1407               	bsf	7,0	;volatile
  1225                           
  1226                           ;main.c: 346: PORTCbits.RC0 = 0;
  1227  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  1228  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  1229  0F07  1007               	bcf	7,0	;volatile
  1230                           
  1231                           ;main.c: 351: PORTCbits.RC3 = 0;
  1232  0F08  1187               	bcf	7,3	;volatile
  1233                           
  1234                           ;main.c: 352: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1235  0F09  3033               	movlw	51
  1236  0F0A  1683               	bsf	3,5	;RP0=1, select bank1
  1237  0F0B  1303               	bcf	3,6	;RP1=0, select bank1
  1238  0F0C  00C8               	movwf	(??_main^(0+128)+2)
  1239  0F0D  30BC               	movlw	188
  1240  0F0E  00C7               	movwf	(??_main^(0+128)+1)
  1241  0F0F  3010               	movlw	16
  1242  0F10  00C6               	movwf	??_main^(0+128)
  1243  0F11                     u3887:	
  1244  0F11  0BC6               	decfsz	??_main^(0+128),f
  1245  0F12  2F11               	goto	u3887
  1246  0F13  0BC7               	decfsz	(??_main^(0+128)+1),f
  1247  0F14  2F11               	goto	u3887
  1248  0F15  0BC8               	decfsz	(??_main^(0+128)+2),f
  1249  0F16  2F11               	goto	u3887
  1250                           
  1251                           ;main.c: 353: init_lcd_4bit();
  1252  0F17  120A  158A  2689  120A  158A  	fcall	_init_lcd_4bit
  1253                           
  1254                           ;main.c: 354: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1255  0F1C  3033               	movlw	51
  1256  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  1257  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  1258  0F1F  00C8               	movwf	(??_main^(0+128)+2)
  1259  0F20  30BC               	movlw	188
  1260  0F21  00C7               	movwf	(??_main^(0+128)+1)
  1261  0F22  3010               	movlw	16
  1262  0F23  00C6               	movwf	??_main^(0+128)
  1263  0F24                     u3897:	
  1264  0F24  0BC6               	decfsz	??_main^(0+128),f
  1265  0F25  2F24               	goto	u3897
  1266  0F26  0BC7               	decfsz	(??_main^(0+128)+1),f
  1267  0F27  2F24               	goto	u3897
  1268  0F28  0BC8               	decfsz	(??_main^(0+128)+2),f
  1269  0F29  2F24               	goto	u3897
  1270                           
  1271                           ;main.c: 355: INTCONbits.PEIE = 1;
  1272  0F2A  170B               	bsf	11,6	;volatile
  1273                           
  1274                           ;main.c: 356: INTCONbits.GIE = 1;
  1275  0F2B  178B               	bsf	11,7	;volatile
  1276                           
  1277                           ;main.c: 357: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1278  0F2C  301A               	movlw	26
  1279  0F2D  1683               	bsf	3,5	;RP0=1, select bank1
  1280  0F2E  1303               	bcf	3,6	;RP1=0, select bank1
  1281  0F2F  00C8               	movwf	(??_main^(0+128)+2)
  1282  0F30  305E               	movlw	94
  1283  0F31  00C7               	movwf	(??_main^(0+128)+1)
  1284  0F32  3086               	movlw	134
  1285  0F33  00C6               	movwf	??_main^(0+128)
  1286  0F34                     u3907:	
  1287  0F34  0BC6               	decfsz	??_main^(0+128),f
  1288  0F35  2F34               	goto	u3907
  1289  0F36  0BC7               	decfsz	(??_main^(0+128)+1),f
  1290  0F37  2F34               	goto	u3907
  1291  0F38  0BC8               	decfsz	(??_main^(0+128)+2),f
  1292  0F39  2F34               	goto	u3907
  1293  0F3A  0000               	nop
  1294                           
  1295                           ;main.c: 358: ADCInit();
  1296  0F3B  120A  158A  209C  120A  158A  	fcall	_ADCInit
  1297                           
  1298                           ;main.c: 359: lcd_escreve_string("\fLoading PIC...");
  1299  0F40  3055               	movlw	low (STR_4-__stringbase)
  1300  0F41  1683               	bsf	3,5	;RP0=1, select bank1
  1301  0F42  1303               	bcf	3,6	;RP1=0, select bank1
  1302  0F43  00C4               	movwf	lcd_escreve_string@y^(0+128)
  1303  0F44  3080               	movlw	128
  1304  0F45  00C5               	movwf	(lcd_escreve_string@y+1)^(0+128)
  1305  0F46  120A  158A  222D  120A  158A  	fcall	_lcd_escreve_string
  1306                           
  1307                           ;main.c: 361: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1308  0F4B  307F               	movlw	127
  1309  0F4C  1683               	bsf	3,5	;RP0=1, select bank1
  1310  0F4D  1303               	bcf	3,6	;RP1=0, select bank1
  1311  0F4E  00C8               	movwf	(??_main^(0+128)+2)
  1312  0F4F  30D4               	movlw	212
  1313  0F50  00C7               	movwf	(??_main^(0+128)+1)
  1314  0F51  30AE               	movlw	174
  1315  0F52  00C6               	movwf	??_main^(0+128)
  1316  0F53                     u3917:	
  1317  0F53  0BC6               	decfsz	??_main^(0+128),f
  1318  0F54  2F53               	goto	u3917
  1319  0F55  0BC7               	decfsz	(??_main^(0+128)+1),f
  1320  0F56  2F53               	goto	u3917
  1321  0F57  0BC8               	decfsz	(??_main^(0+128)+2),f
  1322  0F58  2F53               	goto	u3917
  1323  0F59  2F5A               	nop2
  1324                           
  1325                           ;main.c: 362: LCDClear();
  1326  0F5A  120A  158A  2307  120A  158A  	fcall	_LCDClear
  1327                           
  1328                           ;main.c: 364: if (PORTCbits.RC0 == 1) {
  1329  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0F61  1C07               	btfss	7,0	;volatile
  1332  0F62  2F6F               	goto	l142
  1333  0F63                     l2903:	
  1334                           ;main.c: 365: while (1) {
  1335                           
  1336                           
  1337                           ;main.c: 366: USARTWriteString("loop");
  1338  0F63  3077               	movlw	low (STR_6-__stringbase)
  1339  0F64  1683               	bsf	3,5	;RP0=1, select bank1
  1340  0F65  1303               	bcf	3,6	;RP1=0, select bank1
  1341  0F66  00B9               	movwf	USARTWriteString@str^(0+128)
  1342  0F67  3080               	movlw	128
  1343  0F68  00BA               	movwf	(USARTWriteString@str+1)^(0+128)
  1344  0F69  120A  158A  21FC  120A  158A  	fcall	_USARTWriteString
  1345  0F6E  2F63               	goto	l2903
  1346  0F6F                     l142:	
  1347  0F6F  120A  118A  2812   	ljmp	start
  1348  0F72                     __end_of_main:	
  1349                           
  1350                           	psect	text1
  1351  0A2D                     __ptext1:	
  1352 ;; *************** function _lcd_escreve_string *****************
  1353 ;; Defined at:
  1354 ;;		line 168 in file "lcd_4bit.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  y               2   12[BANK1 ] PTR const unsigned char 
  1357 ;;		 -> ftoa@buf(17), STR_5(16), STR_4(16), STR_3(2), 
  1358 ;;		 -> STR_2(7), progressBar@aux(16), 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1370 ;;      Params:         0       0       2       0       0
  1371 ;;      Locals:         0       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0
  1373 ;;      Totals:         0       0       2       0       0
  1374 ;;Total ram usage:        2 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:   11
  1377 ;; This function calls:
  1378 ;;		_lcd_putc
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;;		_inicialize
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _lcd_escreve_string
  1387  0A2D                     _lcd_escreve_string:	
  1388  0A2D                     l2565:	
  1389                           ;lcd_4bit.c: 170: while(*y!='\0')
  1390                           
  1391                           ;incstack = 0
  1392 ;; hardware stack exceeded
  1393                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1394                           
  1395  0A2D  1683               	bsf	3,5	;RP0=1, select bank1
  1396  0A2E  1303               	bcf	3,6	;RP1=0, select bank1
  1397  0A2F  0845               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1398  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0A32  00FF               	movwf	127
  1401  0A33  1683               	bsf	3,5	;RP0=1, select bank1
  1402  0A34  1303               	bcf	3,6	;RP1=0, select bank1
  1403  0A35  0844               	movf	lcd_escreve_string@y^(0+128),w
  1404  0A36  0084               	movwf	4
  1405  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  1406  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  1407  0A39  120A  158A  2000  120A  158A  	fcall	stringtab
  1408  0A3E  3800               	iorlw	0
  1409  0A3F  1903               	btfsc	3,2
  1410  0A40  0008               	return
  1411                           
  1412                           ;lcd_4bit.c: 171: {
  1413                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1414  0A41  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0A42  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0A43  0845               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1417  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0A46  00FF               	movwf	127
  1420  0A47  1683               	bsf	3,5	;RP0=1, select bank1
  1421  0A48  1303               	bcf	3,6	;RP1=0, select bank1
  1422  0A49  0844               	movf	lcd_escreve_string@y^(0+128),w
  1423  0A4A  0084               	movwf	4
  1424  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0A4D  120A  158A  2000  120A  158A  	fcall	stringtab
  1427  0A52  120A  158A  2347  120A  158A  	fcall	_lcd_putc
  1428                           
  1429                           ;lcd_4bit.c: 173: y++;
  1430  0A57  3001               	movlw	1
  1431  0A58  1683               	bsf	3,5	;RP0=1, select bank1
  1432  0A59  1303               	bcf	3,6	;RP1=0, select bank1
  1433  0A5A  07C4               	addwf	lcd_escreve_string@y^(0+128),f
  1434  0A5B  1803               	skipnc
  1435  0A5C  0AC5               	incf	(lcd_escreve_string@y+1)^(0+128),f
  1436  0A5D  2A2D               	goto	l2565
  1437  0A5E                     __end_of_lcd_escreve_string:	
  1438                           
  1439                           	psect	text2
  1440  0B47                     __ptext2:	
  1441 ;; *************** function _lcd_putc *****************
  1442 ;; Defined at:
  1443 ;;		line 82 in file "lcd_4bit.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  c               1    wreg     unsigned char 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  c               1   11[BANK1 ] unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;		None               void
  1450 ;; Registers used:
  1451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       0       0       0       0
  1458 ;;      Locals:         0       0       1       0       0
  1459 ;;      Temps:          0       0       2       0       0
  1460 ;;      Totals:         0       0       3       0       0
  1461 ;;Total ram usage:        3 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:   10
  1464 ;; This function calls:
  1465 ;;		_lcd_envia_byte
  1466 ;;		_lcd_gotoxy
  1467 ;; This function is called by:
  1468 ;;		_lcd_escreve_string
  1469 ;;		_lcd_escreve_p
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           
  1474                           ;psect for function _lcd_putc
  1475  0B47                     _lcd_putc:	
  1476                           
  1477                           ;incstack = 0
  1478 ;; hardware stack exceeded
  1479                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1480                           ;lcd_putc@c stored from wreg
  1481  0B47  1683               	bsf	3,5	;RP0=1, select bank1
  1482  0B48  1303               	bcf	3,6	;RP1=0, select bank1
  1483  0B49  00C3               	movwf	lcd_putc@c^(0+128)
  1484                           
  1485                           ;lcd_4bit.c: 84: switch(c)
  1486  0B4A  2B80               	goto	l2185
  1487  0B4B                     l2173:	
  1488                           ;lcd_4bit.c: 85: {
  1489                           ;lcd_4bit.c: 86: case '\f':
  1490                           
  1491                           
  1492                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1493  0B4B  01BA               	clrf	lcd_envia_byte@n^(0+128)
  1494  0B4C  0ABA               	incf	lcd_envia_byte@n^(0+128),f
  1495  0B4D  3000               	movlw	0
  1496  0B4E  120A  158A  225E  120A  158A  	fcall	_lcd_envia_byte
  1497                           
  1498                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1499  0B53  300D               	movlw	13
  1500  0B54  1683               	bsf	3,5	;RP0=1, select bank1
  1501  0B55  1303               	bcf	3,6	;RP1=0, select bank1
  1502  0B56  00C2               	movwf	(??_lcd_putc^(0+128)+1)
  1503  0B57  30FB               	movlw	251
  1504  0B58  00C1               	movwf	??_lcd_putc^(0+128)
  1505  0B59                     u3927:	
  1506  0B59  0BC1               	decfsz	??_lcd_putc^(0+128),f
  1507  0B5A  2B59               	goto	u3927
  1508  0B5B  0BC2               	decfsz	(??_lcd_putc^(0+128)+1),f
  1509  0B5C  2B59               	goto	u3927
  1510  0B5D  2B5E               	nop2
  1511                           
  1512                           ;lcd_4bit.c: 89: break;
  1513  0B5E  0008               	return
  1514  0B5F                     l2177:	
  1515                           ;lcd_4bit.c: 91: case '\n':
  1516                           
  1517                           
  1518                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1519  0B5F  3002               	movlw	2
  1520  0B60  1683               	bsf	3,5	;RP0=1, select bank1
  1521  0B61  1303               	bcf	3,6	;RP1=0, select bank1
  1522  0B62  00C1               	movwf	??_lcd_putc^(0+128)
  1523  0B63  0841               	movf	??_lcd_putc^(0+128),w
  1524  0B64  00BD               	movwf	lcd_gotoxy@y^(0+128)
  1525  0B65  3001               	movlw	1
  1526  0B66  120A  158A  2100   	fcall	_lcd_gotoxy
  1527                           
  1528                           ;lcd_4bit.c: 93: break;
  1529  0B69  0008               	return
  1530  0B6A                     l2179:	
  1531                           ;lcd_4bit.c: 95: case '\b':
  1532                           
  1533                           
  1534                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1535  0B6A  3010               	movlw	16
  1536  0B6B  1683               	bsf	3,5	;RP0=1, select bank1
  1537  0B6C  1303               	bcf	3,6	;RP1=0, select bank1
  1538  0B6D  00C1               	movwf	??_lcd_putc^(0+128)
  1539  0B6E  0841               	movf	??_lcd_putc^(0+128),w
  1540  0B6F  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1541  0B70  3000               	movlw	0
  1542  0B71  120A  158A  225E   	fcall	_lcd_envia_byte
  1543                           
  1544                           ;lcd_4bit.c: 97: break;
  1545  0B74  0008               	return
  1546  0B75                     l2181:	
  1547                           ;lcd_4bit.c: 99: default:
  1548                           
  1549                           
  1550                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1551  0B75  1683               	bsf	3,5	;RP0=1, select bank1
  1552  0B76  1303               	bcf	3,6	;RP1=0, select bank1
  1553  0B77  0843               	movf	lcd_putc@c^(0+128),w
  1554  0B78  00C1               	movwf	??_lcd_putc^(0+128)
  1555  0B79  0841               	movf	??_lcd_putc^(0+128),w
  1556  0B7A  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1557  0B7B  3001               	movlw	1
  1558  0B7C  120A  158A  225E   	fcall	_lcd_envia_byte
  1559                           
  1560                           ;lcd_4bit.c: 102: }
  1561                           
  1562                           ;lcd_4bit.c: 101: break;
  1563  0B7F  0008               	return
  1564  0B80                     l2185:	
  1565  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  1566  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  1567  0B82  0843               	movf	lcd_putc@c^(0+128),w
  1568                           
  1569                           ; Switch size 1, requested type "space"
  1570                           ; Number of cases is 3, Range of values is 8 to 12
  1571                           ; switch strategies available:
  1572                           ; Name         Instructions Cycles
  1573                           ; simple_byte           10     6 (average)
  1574                           ; direct_byte           26    11 (fixed)
  1575                           ; jumptable            263     9 (fixed)
  1576                           ;	Chosen strategy is simple_byte
  1577  0B83  3A08               	xorlw	8	; case 8
  1578  0B84  1903               	skipnz
  1579  0B85  2B6A               	goto	l2179
  1580  0B86  3A02               	xorlw	2	; case 10
  1581  0B87  1903               	skipnz
  1582  0B88  2B5F               	goto	l2177
  1583  0B89  3A06               	xorlw	6	; case 12
  1584  0B8A  1903               	skipnz
  1585  0B8B  2B4B               	goto	l2173
  1586  0B8C  2B75               	goto	l2181
  1587  0B8D  0008               	return
  1588  0B8E                     __end_of_lcd_putc:	
  1589                           
  1590                           	psect	text3
  1591  0900                     __ptext3:	
  1592 ;; *************** function _lcd_gotoxy *****************
  1593 ;; Defined at:
  1594 ;;		line 70 in file "lcd_4bit.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  x               1    wreg     unsigned char 
  1597 ;;  y               1    5[BANK1 ] unsigned char 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  x               1    7[BANK1 ] unsigned char 
  1600 ;;  address         1    8[BANK1 ] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;		None               void
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0, pclath, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1610 ;;      Params:         0       0       1       0       0
  1611 ;;      Locals:         0       0       2       0       0
  1612 ;;      Temps:          0       0       1       0       0
  1613 ;;      Totals:         0       0       4       0       0
  1614 ;;Total ram usage:        4 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    9
  1617 ;; This function calls:
  1618 ;;		_lcd_envia_byte
  1619 ;; This function is called by:
  1620 ;;		_lcd_putc
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           
  1625                           ;psect for function _lcd_gotoxy
  1626  0900                     _lcd_gotoxy:	
  1627                           
  1628                           ;incstack = 0
  1629 ;; hardware stack exceeded
  1630                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1631                           ;lcd_gotoxy@x stored from wreg
  1632  0900  1683               	bsf	3,5	;RP0=1, select bank1
  1633  0901  1303               	bcf	3,6	;RP1=0, select bank1
  1634  0902  00BF               	movwf	lcd_gotoxy@x^(0+128)
  1635                           
  1636                           ;lcd_4bit.c: 72: unsigned char address;
  1637                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1638  0903  083D               	movf	lcd_gotoxy@y^(0+128),w
  1639  0904  3A01               	xorlw	1
  1640  0905  1903               	skipnz
  1641  0906  290C               	goto	l2001
  1642  0907  3040               	movlw	64
  1643  0908  00BE               	movwf	??_lcd_gotoxy^(0+128)
  1644  0909  083E               	movf	??_lcd_gotoxy^(0+128),w
  1645  090A  00C0               	movwf	lcd_gotoxy@address^(0+128)
  1646  090B  290D               	goto	l2003
  1647  090C                     l2001:	
  1648                           
  1649                           ;lcd_4bit.c: 75: else address=0;
  1650  090C  01C0               	clrf	lcd_gotoxy@address^(0+128)
  1651  090D                     l2003:	
  1652                           
  1653                           ;lcd_4bit.c: 77: address += x-1;
  1654  090D  083F               	movf	lcd_gotoxy@x^(0+128),w
  1655  090E  3EFF               	addlw	255
  1656  090F  00BE               	movwf	??_lcd_gotoxy^(0+128)
  1657  0910  083E               	movf	??_lcd_gotoxy^(0+128),w
  1658  0911  07C0               	addwf	lcd_gotoxy@address^(0+128),f
  1659                           
  1660                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1661  0912  0840               	movf	lcd_gotoxy@address^(0+128),w
  1662  0913  3880               	iorlw	128
  1663  0914  00BE               	movwf	??_lcd_gotoxy^(0+128)
  1664  0915  083E               	movf	??_lcd_gotoxy^(0+128),w
  1665  0916  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1666  0917  3000               	movlw	0
  1667  0918  120A  158A  225E   	fcall	_lcd_envia_byte
  1668  091B  0008               	return
  1669  091C                     __end_of_lcd_gotoxy:	
  1670                           
  1671                           	psect	text4
  1672  0E89                     __ptext4:	
  1673 ;; *************** function _init_lcd_4bit *****************
  1674 ;; Defined at:
  1675 ;;		line 6 in file "lcd_4bit.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;		None
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  i               1    7[BANK1 ] unsigned char 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;		None               void
  1682 ;; Registers used:
  1683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1689 ;;      Params:         0       0       0       0       0
  1690 ;;      Locals:         0       0       1       0       0
  1691 ;;      Temps:          0       0       2       0       0
  1692 ;;      Totals:         0       0       3       0       0
  1693 ;;Total ram usage:        3 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    9
  1696 ;; This function calls:
  1697 ;;		_lcd_envia_byte
  1698 ;;		_lcd_envia_nibble
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;;		_inicialize
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _init_lcd_4bit
  1707  0E89                     _init_lcd_4bit:	
  1708                           
  1709                           ;lcd_4bit.c: 8: unsigned char i;
  1710                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1711                           
  1712                           ;incstack = 0
  1713 ;; hardware stack exceeded
  1714                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1715  0E89  1683               	bsf	3,5	;RP0=1, select bank1
  1716  0E8A  1303               	bcf	3,6	;RP1=0, select bank1
  1717  0E8B  1206               	bcf	6,4	;volatile
  1718                           
  1719                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1720  0E8C  1286               	bcf	6,5	;volatile
  1721                           
  1722                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1723  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  1724  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  1725  0E8F  1206               	bcf	6,4	;volatile
  1726                           
  1727                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1728  0E90  1286               	bcf	6,5	;volatile
  1729                           
  1730                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1731  0E91  1683               	bsf	3,5	;RP0=1, select bank1
  1732  0E92  1303               	bcf	3,6	;RP1=0, select bank1
  1733  0E93  1006               	bcf	6,0	;volatile
  1734                           
  1735                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1736  0E94  1086               	bcf	6,1	;volatile
  1737                           
  1738                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1739  0E95  1106               	bcf	6,2	;volatile
  1740                           
  1741                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1742  0E96  1186               	bcf	6,3	;volatile
  1743                           
  1744                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1745  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  1746  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  1747  0E99  1006               	bcf	6,0	;volatile
  1748                           
  1749                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1750  0E9A  1086               	bcf	6,1	;volatile
  1751                           
  1752                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1753  0E9B  1106               	bcf	6,2	;volatile
  1754                           
  1755                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1756  0E9C  1186               	bcf	6,3	;volatile
  1757                           
  1758                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1759  0E9D  3062               	movlw	98
  1760  0E9E  1683               	bsf	3,5	;RP0=1, select bank1
  1761  0E9F  1303               	bcf	3,6	;RP1=0, select bank1
  1762  0EA0  00BE               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1763  0EA1  3065               	movlw	101
  1764  0EA2  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1765  0EA3                     u3937:	
  1766  0EA3  0BBD               	decfsz	??_init_lcd_4bit^(0+128),f
  1767  0EA4  2EA3               	goto	u3937
  1768  0EA5  0BBE               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1769  0EA6  2EA3               	goto	u3937
  1770  0EA7  2EA8               	nop2
  1771                           
  1772                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1773  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  1774  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  1775  0EAA  01BF               	clrf	init_lcd_4bit@i^(0+128)
  1776  0EAB  3003               	movlw	3
  1777  0EAC  023F               	subwf	init_lcd_4bit@i^(0+128),w
  1778  0EAD  1803               	btfsc	3,0
  1779  0EAE  2ECA               	goto	l2607
  1780  0EAF                     l2599:	
  1781                           
  1782                           ;lcd_4bit.c: 26: {
  1783                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1784  0EAF  3003               	movlw	3
  1785  0EB0  120A  158A  251A  120A  158A  	fcall	_lcd_envia_nibble
  1786                           
  1787                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1788  0EB5  3021               	movlw	33
  1789  0EB6  1683               	bsf	3,5	;RP0=1, select bank1
  1790  0EB7  1303               	bcf	3,6	;RP1=0, select bank1
  1791  0EB8  00BE               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1792  0EB9  3076               	movlw	118
  1793  0EBA  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1794  0EBB                     u3947:	
  1795  0EBB  0BBD               	decfsz	??_init_lcd_4bit^(0+128),f
  1796  0EBC  2EBB               	goto	u3947
  1797  0EBD  0BBE               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1798  0EBE  2EBB               	goto	u3947
  1799  0EBF  0000               	nop
  1800  0EC0  3001               	movlw	1
  1801  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  1802  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  1803  0EC3  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1804  0EC4  083D               	movf	??_init_lcd_4bit^(0+128),w
  1805  0EC5  07BF               	addwf	init_lcd_4bit@i^(0+128),f
  1806  0EC6  3003               	movlw	3
  1807  0EC7  023F               	subwf	init_lcd_4bit@i^(0+128),w
  1808  0EC8  1C03               	skipc
  1809  0EC9  2EAF               	goto	l2599
  1810  0ECA                     l2607:	
  1811                           
  1812                           ;lcd_4bit.c: 29: }
  1813                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1814  0ECA  3002               	movlw	2
  1815  0ECB  120A  158A  251A  120A  158A  	fcall	_lcd_envia_nibble
  1816                           
  1817                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1818  0ED0  1683               	bsf	3,5	;RP0=1, select bank1
  1819  0ED1  1303               	bcf	3,6	;RP1=0, select bank1
  1820  0ED2  01BF               	clrf	init_lcd_4bit@i^(0+128)
  1821  0ED3                     L1:	
  1822  0ED3  3004               	movlw	4
  1823  0ED4  023F               	subwf	init_lcd_4bit@i^(0+128),w
  1824  0ED5  1803               	btfsc	3,0
  1825  0ED6  0008               	return
  1826                           
  1827                           ;lcd_4bit.c: 33: {
  1828                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1829  0ED7  083F               	movf	init_lcd_4bit@i^(0+128),w
  1830  0ED8  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1831  0ED9  0084               	movwf	4
  1832  0EDA  120A  158A  200A  120A  158A  	fcall	stringdir
  1833  0EDF  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1834  0EE0  083D               	movf	??_init_lcd_4bit^(0+128),w
  1835  0EE1  00BA               	movwf	lcd_envia_byte@n^(0+128)
  1836  0EE2  3000               	movlw	0
  1837  0EE3  120A  158A  225E  120A  158A  	fcall	_lcd_envia_byte
  1838  0EE8  3001               	movlw	1
  1839  0EE9  1683               	bsf	3,5	;RP0=1, select bank1
  1840  0EEA  1303               	bcf	3,6	;RP1=0, select bank1
  1841  0EEB  00BD               	movwf	??_init_lcd_4bit^(0+128)
  1842  0EEC  083D               	movf	??_init_lcd_4bit^(0+128),w
  1843  0EED  07BF               	addwf	init_lcd_4bit@i^(0+128),f
  1844  0EEE  2ED3               	goto	L1
  1845  0EEF                     __end_of_init_lcd_4bit:	
  1846                           
  1847                           	psect	text5
  1848  09FC                     __ptext5:	
  1849 ;; *************** function _USARTWriteString *****************
  1850 ;; Defined at:
  1851 ;;		line 75 in file "main.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  str             2    1[BANK1 ] PTR const unsigned char 
  1854 ;;		 -> STR_6(5), sendString@array(40), STR_1(40), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;		None               void
  1859 ;; Registers used:
  1860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1866 ;;      Params:         0       0       2       0       0
  1867 ;;      Locals:         0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0
  1869 ;;      Totals:         0       0       2       0       0
  1870 ;;Total ram usage:        2 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    8
  1873 ;; This function calls:
  1874 ;;		_USARTWriteChar
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _USARTWriteString
  1882  09FC                     _USARTWriteString:	
  1883  09FC                     l2451:	
  1884                           ;main.c: 77: while (*str != '\0') {
  1885                           
  1886                           ;incstack = 0
  1887 ;; hardware stack exceeded
  1888                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1889                           
  1890  09FC  1683               	bsf	3,5	;RP0=1, select bank1
  1891  09FD  1303               	bcf	3,6	;RP1=0, select bank1
  1892  09FE  083A               	movf	(USARTWriteString@str+1)^(0+128),w
  1893  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0A01  00FF               	movwf	127
  1896  0A02  1683               	bsf	3,5	;RP0=1, select bank1
  1897  0A03  1303               	bcf	3,6	;RP1=0, select bank1
  1898  0A04  0839               	movf	USARTWriteString@str^(0+128),w
  1899  0A05  0084               	movwf	4
  1900  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0A08  120A  158A  2000  120A  158A  	fcall	stringtab
  1903  0A0D  3800               	iorlw	0
  1904  0A0E  1903               	btfsc	3,2
  1905  0A0F  0008               	return
  1906                           
  1907                           ;main.c: 79: USARTWriteChar(*str);
  1908  0A10  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0A11  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0A12  083A               	movf	(USARTWriteString@str+1)^(0+128),w
  1911  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0A15  00FF               	movwf	127
  1914  0A16  1683               	bsf	3,5	;RP0=1, select bank1
  1915  0A17  1303               	bcf	3,6	;RP1=0, select bank1
  1916  0A18  0839               	movf	USARTWriteString@str^(0+128),w
  1917  0A19  0084               	movwf	4
  1918  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  1919  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  1920  0A1C  120A  158A  2000  120A  158A  	fcall	stringtab
  1921  0A21  120A  158A  208F  120A  158A  	fcall	_USARTWriteChar
  1922                           
  1923                           ;main.c: 80: str++;
  1924  0A26  3001               	movlw	1
  1925  0A27  1683               	bsf	3,5	;RP0=1, select bank1
  1926  0A28  1303               	bcf	3,6	;RP1=0, select bank1
  1927  0A29  07B9               	addwf	USARTWriteString@str^(0+128),f
  1928  0A2A  1803               	skipnc
  1929  0A2B  0ABA               	incf	(USARTWriteString@str+1)^(0+128),f
  1930  0A2C  29FC               	goto	l2451
  1931  0A2D                     __end_of_USARTWriteString:	
  1932                           
  1933                           	psect	text6
  1934  088F                     __ptext6:	
  1935 ;; *************** function _USARTWriteChar *****************
  1936 ;; Defined at:
  1937 ;;		line 68 in file "main.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  USARTData       1    wreg     unsigned char 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  USARTData       1    0[BANK1 ] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         0       0       0       0       0
  1952 ;;      Locals:         0       0       1       0       0
  1953 ;;      Temps:          0       0       0       0       0
  1954 ;;      Totals:         0       0       1       0       0
  1955 ;;Total ram usage:        1 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    7
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_USARTWriteString
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           
  1966                           ;psect for function _USARTWriteChar
  1967  088F                     _USARTWriteChar:	
  1968                           
  1969                           ;incstack = 0
  1970 ;; hardware stack exceeded
  1971                           ; Regs used in _USARTWriteChar: [wreg]
  1972                           ;USARTWriteChar@USARTData stored from wreg
  1973  088F  1683               	bsf	3,5	;RP0=1, select bank1
  1974  0890  1303               	bcf	3,6	;RP1=0, select bank1
  1975  0891  00B8               	movwf	USARTWriteChar@USARTData^(0+128)
  1976  0892                     l68:	
  1977                           ;main.c: 69: while (!PIR1bits.TXIF);
  1978                           
  1979  0892  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0893  1E0C               	btfss	12,4	;volatile
  1981  0894  2892               	goto	l68
  1982                           
  1983                           ;main.c: 70: TXREG = USARTData;
  1984  0895  1683               	bsf	3,5	;RP0=1, select bank1
  1985  0896  1303               	bcf	3,6	;RP1=0, select bank1
  1986  0897  0838               	movf	USARTWriteChar@USARTData^(0+128),w
  1987  0898  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0899  1303               	bcf	3,6	;RP1=0, select bank0
  1989  089A  0099               	movwf	25	;volatile
  1990  089B  0008               	return
  1991  089C                     __end_of_USARTWriteChar:	
  1992                           
  1993                           	psect	text7
  1994  0B07                     __ptext7:	
  1995 ;; *************** function _LCDClear *****************
  1996 ;; Defined at:
  1997 ;;		line 179 in file "lcd_4bit.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;		None               void
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, pclath, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2011 ;;      Params:         0       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0
  2013 ;;      Temps:          0       0       2       0       0
  2014 ;;      Totals:         0       0       2       0       0
  2015 ;;Total ram usage:        2 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    9
  2018 ;; This function calls:
  2019 ;;		_lcd_envia_byte
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;;		_inicialize
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           
  2027                           ;psect for function _LCDClear
  2028  0B07                     _LCDClear:	
  2029                           
  2030                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2031                           
  2032                           ;incstack = 0
  2033 ;; hardware stack exceeded
  2034                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2035  0B07  1683               	bsf	3,5	;RP0=1, select bank1
  2036  0B08  1303               	bcf	3,6	;RP1=0, select bank1
  2037  0B09  01BA               	clrf	lcd_envia_byte@n^(0+128)
  2038  0B0A  0ABA               	incf	lcd_envia_byte@n^(0+128),f
  2039  0B0B  3000               	movlw	0
  2040  0B0C  120A  158A  225E  120A  158A  	fcall	_lcd_envia_byte
  2041                           
  2042                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2043  0B11  3041               	movlw	65
  2044  0B12  1683               	bsf	3,5	;RP0=1, select bank1
  2045  0B13  1303               	bcf	3,6	;RP1=0, select bank1
  2046  0B14  00BE               	movwf	(??_LCDClear^(0+128)+1)
  2047  0B15  30EE               	movlw	238
  2048  0B16  00BD               	movwf	??_LCDClear^(0+128)
  2049  0B17                     u3957:	
  2050  0B17  0BBD               	decfsz	??_LCDClear^(0+128),f
  2051  0B18  2B17               	goto	u3957
  2052  0B19  0BBE               	decfsz	(??_LCDClear^(0+128)+1),f
  2053  0B1A  2B17               	goto	u3957
  2054  0B1B  0000               	nop
  2055                           
  2056                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2057  0B1C  300C               	movlw	12
  2058  0B1D  1683               	bsf	3,5	;RP0=1, select bank1
  2059  0B1E  1303               	bcf	3,6	;RP1=0, select bank1
  2060  0B1F  00BD               	movwf	??_LCDClear^(0+128)
  2061  0B20  083D               	movf	??_LCDClear^(0+128),w
  2062  0B21  00BA               	movwf	lcd_envia_byte@n^(0+128)
  2063  0B22  3000               	movlw	0
  2064  0B23  120A  158A  225E  120A  158A  	fcall	_lcd_envia_byte
  2065                           
  2066                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2067  0B28  30F9               	movlw	249
  2068  0B29  1683               	bsf	3,5	;RP0=1, select bank1
  2069  0B2A  1303               	bcf	3,6	;RP1=0, select bank1
  2070  0B2B  00BD               	movwf	??_LCDClear^(0+128)
  2071  0B2C                     u3967:	
  2072  0B2C  0000               	nop
  2073  0B2D  0BBD               	decfsz	??_LCDClear^(0+128),f
  2074  0B2E  2B2C               	goto	u3967
  2075  0B2F  2B30               	nop2	;nop
  2076  0B30  0000               	nop
  2077                           
  2078                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2079  0B31  3006               	movlw	6
  2080  0B32  1683               	bsf	3,5	;RP0=1, select bank1
  2081  0B33  1303               	bcf	3,6	;RP1=0, select bank1
  2082  0B34  00BD               	movwf	??_LCDClear^(0+128)
  2083  0B35  083D               	movf	??_LCDClear^(0+128),w
  2084  0B36  00BA               	movwf	lcd_envia_byte@n^(0+128)
  2085  0B37  3000               	movlw	0
  2086  0B38  120A  158A  225E  120A  158A  	fcall	_lcd_envia_byte
  2087                           
  2088                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2089  0B3D  30F9               	movlw	249
  2090  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  2092  0B40  00BD               	movwf	??_LCDClear^(0+128)
  2093  0B41                     u3977:	
  2094  0B41  0000               	nop
  2095  0B42  0BBD               	decfsz	??_LCDClear^(0+128),f
  2096  0B43  2B41               	goto	u3977
  2097  0B44  2B45               	nop2	;nop
  2098  0B45  0000               	nop
  2099  0B46  0008               	return
  2100  0B47                     __end_of_LCDClear:	
  2101                           
  2102                           	psect	text8
  2103  0A5E                     __ptext8:	
  2104 ;; *************** function _lcd_envia_byte *****************
  2105 ;; Defined at:
  2106 ;;		line 53 in file "lcd_4bit.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  address         1    wreg     unsigned char 
  2109 ;;  n               1    2[BANK1 ] unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  address         1    4[BANK1 ] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;		None               void
  2114 ;; Registers used:
  2115 ;;		wreg, status,2, status,0, pclath, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2121 ;;      Params:         0       0       1       0       0
  2122 ;;      Locals:         0       0       1       0       0
  2123 ;;      Temps:          0       0       1       0       0
  2124 ;;      Totals:         0       0       3       0       0
  2125 ;;Total ram usage:        3 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    8
  2128 ;; This function calls:
  2129 ;;		_lcd_envia_nibble
  2130 ;; This function is called by:
  2131 ;;		_init_lcd_4bit
  2132 ;;		_lcd_gotoxy
  2133 ;;		_lcd_putc
  2134 ;;		_LCDClear
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           
  2139                           ;psect for function _lcd_envia_byte
  2140  0A5E                     _lcd_envia_byte:	
  2141                           
  2142                           ;incstack = 0
  2143 ;; hardware stack exceeded
  2144                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2145                           ;lcd_envia_byte@address stored from wreg
  2146  0A5E  1683               	bsf	3,5	;RP0=1, select bank1
  2147  0A5F  1303               	bcf	3,6	;RP1=0, select bank1
  2148  0A60  00BC               	movwf	lcd_envia_byte@address^(0+128)
  2149                           
  2150                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2151  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0A63  1286               	bcf	6,5	;volatile
  2154                           
  2155                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2156  0A64  3063               	movlw	99
  2157  0A65  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0A66  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0A67  00BB               	movwf	??_lcd_envia_byte^(0+128)
  2160  0A68                     u3987:	
  2161  0A68  0BBB               	decfsz	??_lcd_envia_byte^(0+128),f
  2162  0A69  2A68               	goto	u3987
  2163  0A6A  2A6B               	nop2	;nop
  2164                           
  2165                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2166  0A6B  1683               	bsf	3,5	;RP0=1, select bank1
  2167  0A6C  1303               	bcf	3,6	;RP1=0, select bank1
  2168  0A6D  083C               	movf	lcd_envia_byte@address^(0+128),w
  2169  0A6E  1903               	btfsc	3,2
  2170  0A6F  2A74               	goto	l173
  2171  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  2173  0A72  1686               	bsf	6,5	;volatile
  2174  0A73  2A77               	goto	l174
  2175  0A74                     l173:	
  2176                           
  2177                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2178  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0A76  1286               	bcf	6,5	;volatile
  2181  0A77                     l174:	
  2182                           
  2183                           ;lcd_4bit.c: 61: _delay(1);
  2184  0A77  0000               	nop
  2185                           
  2186                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2187  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0A7A  1206               	bcf	6,4	;volatile
  2190                           
  2191                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2192  0A7B  1683               	bsf	3,5	;RP0=1, select bank1
  2193  0A7C  1303               	bcf	3,6	;RP1=0, select bank1
  2194  0A7D  083A               	movf	lcd_envia_byte@n^(0+128),w
  2195  0A7E  00BB               	movwf	??_lcd_envia_byte^(0+128)
  2196  0A7F  3004               	movlw	4
  2197  0A80                     u1995:	
  2198  0A80  1003               	clrc
  2199  0A81  0CBB               	rrf	??_lcd_envia_byte^(0+128),f
  2200  0A82  3EFF               	addlw	-1
  2201  0A83  1D03               	skipz
  2202  0A84  2A80               	goto	u1995
  2203  0A85  083B               	movf	??_lcd_envia_byte^(0+128),w
  2204  0A86  120A  158A  251A  120A  158A  	fcall	_lcd_envia_nibble
  2205                           
  2206                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2207  0A8B  1683               	bsf	3,5	;RP0=1, select bank1
  2208  0A8C  1303               	bcf	3,6	;RP1=0, select bank1
  2209  0A8D  083A               	movf	lcd_envia_byte@n^(0+128),w
  2210  0A8E  390F               	andlw	15
  2211  0A8F  120A  158A  251A   	fcall	_lcd_envia_nibble
  2212  0A92  0008               	return
  2213  0A93                     __end_of_lcd_envia_byte:	
  2214                           
  2215                           	psect	text9
  2216  0D1A                     __ptext9:	
  2217 ;; *************** function _lcd_envia_nibble *****************
  2218 ;; Defined at:
  2219 ;;		line 39 in file "lcd_4bit.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  n               1    wreg     unsigned char 
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  n               1    1[BANK1 ] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;		None               void
  2226 ;; Registers used:
  2227 ;;		wreg, status,2, status,0
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2233 ;;      Params:         0       0       0       0       0
  2234 ;;      Locals:         0       0       1       0       0
  2235 ;;      Temps:          0       0       1       0       0
  2236 ;;      Totals:         0       0       2       0       0
  2237 ;;Total ram usage:        2 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    7
  2240 ;; This function calls:
  2241 ;;		Nothing
  2242 ;; This function is called by:
  2243 ;;		_init_lcd_4bit
  2244 ;;		_lcd_envia_byte
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function _lcd_envia_nibble
  2250  0D1A                     _lcd_envia_nibble:	
  2251                           
  2252                           ;incstack = 0
  2253 ;; hardware stack exceeded
  2254                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2255                           ;lcd_envia_nibble@n stored from wreg
  2256  0D1A  1683               	bsf	3,5	;RP0=1, select bank1
  2257  0D1B  1303               	bcf	3,6	;RP1=0, select bank1
  2258  0D1C  00B9               	movwf	lcd_envia_nibble@n^(0+128)
  2259                           
  2260                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2261  0D1D  3000               	movlw	0
  2262  0D1E  1839               	btfsc	lcd_envia_nibble@n^(0+128),0
  2263  0D1F  3001               	movlw	1
  2264  0D20  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2265  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  2267  0D23  0806               	movf	6,w	;volatile
  2268  0D24  1683               	bsf	3,5	;RP0=1, select bank1
  2269  0D25  1303               	bcf	3,6	;RP1=0, select bank1
  2270  0D26  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2271  0D27  39FE               	andlw	-2
  2272  0D28  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2273  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  2275  0D2B  0086               	movwf	6	;volatile
  2276                           
  2277                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2278  0D2C  3000               	movlw	0
  2279  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
  2280  0D2E  1303               	bcf	3,6	;RP1=0, select bank1
  2281  0D2F  18B9               	btfsc	lcd_envia_nibble@n^(0+128),1
  2282  0D30  3001               	movlw	1
  2283  0D31  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2284  0D32  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2285  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0D35  0806               	movf	6,w	;volatile
  2288  0D36  1683               	bsf	3,5	;RP0=1, select bank1
  2289  0D37  1303               	bcf	3,6	;RP1=0, select bank1
  2290  0D38  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2291  0D39  39FD               	andlw	-3
  2292  0D3A  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2293  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  2294  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  2295  0D3D  0086               	movwf	6	;volatile
  2296                           
  2297                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2298  0D3E  3000               	movlw	0
  2299  0D3F  1683               	bsf	3,5	;RP0=1, select bank1
  2300  0D40  1303               	bcf	3,6	;RP1=0, select bank1
  2301  0D41  1939               	btfsc	lcd_envia_nibble@n^(0+128),2
  2302  0D42  3001               	movlw	1
  2303  0D43  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2304  0D44  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2305  0D45  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2306  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0D48  0806               	movf	6,w	;volatile
  2309  0D49  1683               	bsf	3,5	;RP0=1, select bank1
  2310  0D4A  1303               	bcf	3,6	;RP1=0, select bank1
  2311  0D4B  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2312  0D4C  39FB               	andlw	-5
  2313  0D4D  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2314  0D4E  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0D4F  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0D50  0086               	movwf	6	;volatile
  2317                           
  2318                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2319  0D51  3000               	movlw	0
  2320  0D52  1683               	bsf	3,5	;RP0=1, select bank1
  2321  0D53  1303               	bcf	3,6	;RP1=0, select bank1
  2322  0D54  19B9               	btfsc	lcd_envia_nibble@n^(0+128),3
  2323  0D55  3001               	movlw	1
  2324  0D56  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2325  0D57  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2326  0D58  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2327  0D59  0DB8               	rlf	??_lcd_envia_nibble^(0+128),f
  2328  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  2329  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  2330  0D5C  0806               	movf	6,w	;volatile
  2331  0D5D  1683               	bsf	3,5	;RP0=1, select bank1
  2332  0D5E  1303               	bcf	3,6	;RP1=0, select bank1
  2333  0D5F  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2334  0D60  39F7               	andlw	-9
  2335  0D61  0638               	xorwf	??_lcd_envia_nibble^(0+128),w
  2336  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0D64  0086               	movwf	6	;volatile
  2339                           
  2340                           ;lcd_4bit.c: 46: _delay(1);
  2341  0D65  0000               	nop
  2342                           
  2343                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2344  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0D68  1606               	bsf	6,4	;volatile
  2347                           
  2348                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2349  0D69  3003               	movlw	3
  2350  0D6A  1683               	bsf	3,5	;RP0=1, select bank1
  2351  0D6B  1303               	bcf	3,6	;RP1=0, select bank1
  2352  0D6C  00B8               	movwf	??_lcd_envia_nibble^(0+128)
  2353  0D6D                     u3997:	
  2354  0D6D  0BB8               	decfsz	??_lcd_envia_nibble^(0+128),f
  2355  0D6E  2D6D               	goto	u3997
  2356                           
  2357                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2358  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  2360  0D71  1206               	bcf	6,4	;volatile
  2361  0D72  0008               	return
  2362  0D73                     __end_of_lcd_envia_nibble:	
  2363                           
  2364                           	psect	text10
  2365  089C                     __ptext10:	
  2366 ;; *************** function _ADCInit *****************
  2367 ;; Defined at:
  2368 ;;		line 110 in file "main.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		None
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2382 ;;      Params:         0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    7
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;;		_inicialize
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           
  2398                           ;psect for function _ADCInit
  2399  089C                     _ADCInit:	
  2400                           
  2401                           ;main.c: 112: ADCON1bits.ADFM = 1;
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _ADCInit: []
  2405  089C  1683               	bsf	3,5	;RP0=1, select bank1
  2406  089D  1303               	bcf	3,6	;RP1=0, select bank1
  2407  089E  179F               	bsf	31,7	;volatile
  2408                           
  2409                           ;main.c: 113: ADCON1bits.PCFG3 = 0;
  2410  089F  119F               	bcf	31,3	;volatile
  2411                           
  2412                           ;main.c: 114: ADCON1bits.PCFG2 = 0;
  2413  08A0  111F               	bcf	31,2	;volatile
  2414                           
  2415                           ;main.c: 115: ADCON1bits.PCFG1 = 0;
  2416  08A1  109F               	bcf	31,1	;volatile
  2417                           
  2418                           ;main.c: 116: ADCON1bits.PCFG0 = 0;
  2419  08A2  101F               	bcf	31,0	;volatile
  2420                           
  2421                           ;main.c: 119: ADCON0bits.ADCS1 = 1;
  2422  08A3  1283               	bcf	3,5	;RP0=0, select bank0
  2423  08A4  1303               	bcf	3,6	;RP1=0, select bank0
  2424  08A5  179F               	bsf	31,7	;volatile
  2425                           
  2426                           ;main.c: 120: ADCON0bits.ADCS0 = 0;
  2427  08A6  131F               	bcf	31,6	;volatile
  2428                           
  2429                           ;main.c: 121: ADCON0bits.ADON = 1;
  2430  08A7  141F               	bsf	31,0	;volatile
  2431                           
  2432                           ;main.c: 124: PIE1bits.ADIE = 1;
  2433  08A8  1683               	bsf	3,5	;RP0=1, select bank1
  2434  08A9  1303               	bcf	3,6	;RP1=0, select bank1
  2435  08AA  170C               	bsf	12,6	;volatile
  2436                           
  2437                           ;main.c: 125: PIR1bits.ADIF = 0;
  2438  08AB  1283               	bcf	3,5	;RP0=0, select bank0
  2439  08AC  1303               	bcf	3,6	;RP1=0, select bank0
  2440  08AD  130C               	bcf	12,6	;volatile
  2441  08AE  0008               	return
  2442  08AF                     __end_of_ADCInit:	
  2443                           
  2444                           	psect	text11
  2445  0279                     __ptext11:	
  2446 ;; *************** function _ISR *****************
  2447 ;; Defined at:
  2448 ;;		line 236 in file "main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  input2          3   69[BANK0 ] float 
  2453 ;;  input           3   66[BANK0 ] float 
  2454 ;;  pre             3   61[BANK0 ] float 
  2455 ;;  preint          2   64[BANK0 ] int 
  2456 ;;  status2         2   59[BANK0 ] int 
  2457 ;;  status          2   57[BANK0 ] int 
  2458 ;;  per             1   72[BANK0 ] PTR unsigned char 
  2459 ;;		 -> ftoa@buf(17), 
  2460 ;;  buf             1   56[BANK0 ] PTR unsigned char 
  2461 ;;		 -> ftoa@buf(17), 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2471 ;;      Params:         0       0       0       0       0
  2472 ;;      Locals:         0      17       0       0       0
  2473 ;;      Temps:          0       6       0       0       0
  2474 ;;      Totals:         0      23       0       0       0
  2475 ;;Total ram usage:       23 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    6
  2478 ;; This function calls:
  2479 ;;		_USARTReceiveChar
  2480 ;;		___awdiv
  2481 ;;		___awmod
  2482 ;;		___awtoft
  2483 ;;		___ftdiv
  2484 ;;		___ftmul
  2485 ;;		___fttol
  2486 ;;		_active
  2487 ;;		_ftoa
  2488 ;;		_progressBar
  2489 ;;		_sendString
  2490 ;;		i1_lcd_escreve_string
  2491 ;;		i1_lcd_gotoxy
  2492 ;; This function is called by:
  2493 ;;		Interrupt level 1
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _ISR
  2499  0279                     _ISR:	
  2500                           
  2501                           ;main.c: 239: if (PIR1bits.ADIF) {
  2502  0279  1F0C               	btfss	12,6	;volatile
  2503  027A  2C25               	goto	i1l2825
  2504                           
  2505                           ;main.c: 241: ADCResult = ((ADRESH << 8) + ADRESL);
  2506  027B  081E               	movf	30,w	;volatile
  2507  027C  01EA               	clrf	_ADCResult+1
  2508  027D  07EA               	addwf	_ADCResult+1,f
  2509  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2510  027F  1303               	bcf	3,6	;RP1=0, select bank1
  2511  0280  081E               	movf	30,w	;volatile
  2512  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2513  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2514  0283  01E9               	clrf	_ADCResult
  2515  0284  07E9               	addwf	_ADCResult,f
  2516                           
  2517                           ;main.c: 244: char * buf;
  2518                           ;main.c: 245: char * per;
  2519                           ;main.c: 248: float input;
  2520                           ;main.c: 249: float input2;
  2521                           ;main.c: 250: float pre;
  2522                           ;main.c: 251: int preint;
  2523                           ;main.c: 252: int status;
  2524                           ;main.c: 253: int status2;
  2525                           ;main.c: 256: input = ADCResult * 0.0048828125;
  2526  0285  3000               	movlw	0
  2527  0286  00A0               	movwf	___ftmul@f1
  2528  0287  30A0               	movlw	160
  2529  0288  00A1               	movwf	___ftmul@f1+1
  2530  0289  303B               	movlw	59
  2531  028A  00A2               	movwf	___ftmul@f1+2
  2532  028B  086A               	movf	_ADCResult+1,w
  2533  028C  01F9               	clrf	___awtoft@c+1
  2534  028D  07F9               	addwf	___awtoft@c+1,f
  2535  028E  0869               	movf	_ADCResult,w
  2536  028F  01F8               	clrf	___awtoft@c
  2537  0290  07F8               	addwf	___awtoft@c,f
  2538  0291  120A  158A  211C  120A  118A  	fcall	___awtoft
  2539  0296  0878               	movf	?___awtoft,w
  2540  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2541  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2542  0299  00A3               	movwf	___ftmul@f2
  2543  029A  0879               	movf	?___awtoft+1,w
  2544  029B  00A4               	movwf	___ftmul@f2+1
  2545  029C  087A               	movf	?___awtoft+2,w
  2546  029D  00A5               	movwf	___ftmul@f2+2
  2547  029E  120A  118A  2545  120A  118A  	fcall	___ftmul
  2548  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2549  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2550  02A5  0820               	movf	?___ftmul,w
  2551  02A6  00E2               	movwf	ISR@input
  2552  02A7  0821               	movf	?___ftmul+1,w
  2553  02A8  00E3               	movwf	ISR@input+1
  2554  02A9  0822               	movf	?___ftmul+2,w
  2555  02AA  00E4               	movwf	ISR@input+2
  2556                           
  2557                           ;main.c: 257: buf = ftoa(input, &status);
  2558  02AB  0862               	movf	ISR@input,w
  2559  02AC  00C4               	movwf	ftoa@f
  2560  02AD  0863               	movf	ISR@input+1,w
  2561  02AE  00C5               	movwf	ftoa@f+1
  2562  02AF  0864               	movf	ISR@input+2,w
  2563  02B0  00C6               	movwf	ftoa@f+2
  2564  02B1  3059               	movlw	ISR@status& (0+255)
  2565  02B2  00D2               	movwf	??_ISR
  2566  02B3  0852               	movf	??_ISR,w
  2567  02B4  00C7               	movwf	ftoa@status
  2568  02B5  120A  118A  2618  120A  118A  	fcall	_ftoa
  2569  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2570  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2571  02BC  00D3               	movwf	??_ISR+1
  2572  02BD  0853               	movf	??_ISR+1,w
  2573  02BE  00D8               	movwf	ISR@buf
  2574                           
  2575                           ;main.c: 261: Display[0] = (ADCResult / 1000) + 48;
  2576  02BF  30E8               	movlw	232
  2577  02C0  00F0               	movwf	___awdiv@divisor
  2578  02C1  3003               	movlw	3
  2579  02C2  00F1               	movwf	___awdiv@divisor+1
  2580  02C3  086A               	movf	_ADCResult+1,w
  2581  02C4  01F3               	clrf	___awdiv@dividend+1
  2582  02C5  07F3               	addwf	___awdiv@dividend+1,f
  2583  02C6  0869               	movf	_ADCResult,w
  2584  02C7  01F2               	clrf	___awdiv@dividend
  2585  02C8  07F2               	addwf	___awdiv@dividend,f
  2586  02C9  120A  158A  2573  120A  118A  	fcall	___awdiv
  2587  02CE  0870               	movf	?___awdiv,w
  2588  02CF  3E30               	addlw	48
  2589  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2590  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2591  02D2  00D2               	movwf	??_ISR
  2592  02D3  0852               	movf	??_ISR,w
  2593  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  2594  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  2595  02D6  00A0               	movwf	_Display^(0+128)
  2596                           
  2597                           ;main.c: 262: Display[1] = ((ADCResult / 100) % 10) + 48;
  2598  02D7  300A               	movlw	10
  2599  02D8  00F9               	movwf	___awmod@divisor
  2600  02D9  3000               	movlw	0
  2601  02DA  00FA               	movwf	___awmod@divisor+1
  2602  02DB  3064               	movlw	100
  2603  02DC  00F0               	movwf	___awdiv@divisor
  2604  02DD  3000               	movlw	0
  2605  02DE  00F1               	movwf	___awdiv@divisor+1
  2606  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  2607  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  2608  02E1  086A               	movf	_ADCResult+1,w
  2609  02E2  01F3               	clrf	___awdiv@dividend+1
  2610  02E3  07F3               	addwf	___awdiv@dividend+1,f
  2611  02E4  0869               	movf	_ADCResult,w
  2612  02E5  01F2               	clrf	___awdiv@dividend
  2613  02E6  07F2               	addwf	___awdiv@dividend,f
  2614  02E7  120A  158A  2573  120A  118A  	fcall	___awdiv
  2615  02EC  0871               	movf	?___awdiv+1,w
  2616  02ED  01FC               	clrf	___awmod@dividend+1
  2617  02EE  07FC               	addwf	___awmod@dividend+1,f
  2618  02EF  0870               	movf	?___awdiv,w
  2619  02F0  01FB               	clrf	___awmod@dividend
  2620  02F1  07FB               	addwf	___awmod@dividend,f
  2621  02F2  120A  158A  2473  120A  118A  	fcall	___awmod
  2622  02F7  0879               	movf	?___awmod,w
  2623  02F8  3E30               	addlw	48
  2624  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2625  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2626  02FB  00D2               	movwf	??_ISR
  2627  02FC  0852               	movf	??_ISR,w
  2628  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2629  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  2630  02FF  00A1               	movwf	(_Display^(0+128)+1)
  2631                           
  2632                           ;main.c: 263: Display[2] = ((ADCResult / 10) % 10) + 48;
  2633  0300  300A               	movlw	10
  2634  0301  00F9               	movwf	___awmod@divisor
  2635  0302  3000               	movlw	0
  2636  0303  00FA               	movwf	___awmod@divisor+1
  2637  0304  300A               	movlw	10
  2638  0305  00F0               	movwf	___awdiv@divisor
  2639  0306  3000               	movlw	0
  2640  0307  00F1               	movwf	___awdiv@divisor+1
  2641  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2643  030A  086A               	movf	_ADCResult+1,w
  2644  030B  01F3               	clrf	___awdiv@dividend+1
  2645  030C  07F3               	addwf	___awdiv@dividend+1,f
  2646  030D  0869               	movf	_ADCResult,w
  2647  030E  01F2               	clrf	___awdiv@dividend
  2648  030F  07F2               	addwf	___awdiv@dividend,f
  2649  0310  120A  158A  2573  120A  118A  	fcall	___awdiv
  2650  0315  0871               	movf	?___awdiv+1,w
  2651  0316  01FC               	clrf	___awmod@dividend+1
  2652  0317  07FC               	addwf	___awmod@dividend+1,f
  2653  0318  0870               	movf	?___awdiv,w
  2654  0319  01FB               	clrf	___awmod@dividend
  2655  031A  07FB               	addwf	___awmod@dividend,f
  2656  031B  120A  158A  2473  120A  118A  	fcall	___awmod
  2657  0320  0879               	movf	?___awmod,w
  2658  0321  3E30               	addlw	48
  2659  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2660  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2661  0324  00D2               	movwf	??_ISR
  2662  0325  0852               	movf	??_ISR,w
  2663  0326  1683               	bsf	3,5	;RP0=1, select bank1
  2664  0327  1303               	bcf	3,6	;RP1=0, select bank1
  2665  0328  00A2               	movwf	(_Display^(0+128)+2)
  2666                           
  2667                           ;main.c: 264: Display[3] = (ADCResult % 10) + 48;
  2668  0329  300A               	movlw	10
  2669  032A  00F9               	movwf	___awmod@divisor
  2670  032B  3000               	movlw	0
  2671  032C  00FA               	movwf	___awmod@divisor+1
  2672  032D  1283               	bcf	3,5	;RP0=0, select bank0
  2673  032E  1303               	bcf	3,6	;RP1=0, select bank0
  2674  032F  086A               	movf	_ADCResult+1,w
  2675  0330  01FC               	clrf	___awmod@dividend+1
  2676  0331  07FC               	addwf	___awmod@dividend+1,f
  2677  0332  0869               	movf	_ADCResult,w
  2678  0333  01FB               	clrf	___awmod@dividend
  2679  0334  07FB               	addwf	___awmod@dividend,f
  2680  0335  120A  158A  2473  120A  118A  	fcall	___awmod
  2681  033A  0879               	movf	?___awmod,w
  2682  033B  3E30               	addlw	48
  2683  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2684  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2685  033E  00D2               	movwf	??_ISR
  2686  033F  0852               	movf	??_ISR,w
  2687  0340  1683               	bsf	3,5	;RP0=1, select bank1
  2688  0341  1303               	bcf	3,6	;RP1=0, select bank1
  2689  0342  00A3               	movwf	(_Display^(0+128)+3)
  2690                           
  2691                           ;main.c: 266: lcd_gotoxy(0, 1);
  2692  0343  01F5               	clrf	i1lcd_gotoxy@y
  2693  0344  0AF5               	incf	i1lcd_gotoxy@y,f
  2694  0345  3000               	movlw	0
  2695  0346  120A  158A  20AF  120A  118A  	fcall	i1_lcd_gotoxy
  2696                           
  2697                           ;main.c: 267: lcd_escreve_string("Nivel:");
  2698  034B  3070               	movlw	low (STR_2-__stringbase)
  2699  034C  00FC               	movwf	i1lcd_escreve_string@y
  2700  034D  3080               	movlw	128
  2701  034E  00FD               	movwf	i1lcd_escreve_string@y+1
  2702  034F  120A  158A  2183  120A  118A  	fcall	i1_lcd_escreve_string
  2703                           
  2704                           ;main.c: 268: lcd_gotoxy(7, 1);
  2705  0354  01F5               	clrf	i1lcd_gotoxy@y
  2706  0355  0AF5               	incf	i1lcd_gotoxy@y,f
  2707  0356  3007               	movlw	7
  2708  0357  120A  158A  20AF  120A  118A  	fcall	i1_lcd_gotoxy
  2709                           
  2710                           ;main.c: 269: input2 = ((input * 100) / 1);
  2711  035C  3000               	movlw	0
  2712  035D  1283               	bcf	3,5	;RP0=0, select bank0
  2713  035E  1303               	bcf	3,6	;RP1=0, select bank0
  2714  035F  00B0               	movwf	___ftdiv@f2
  2715  0360  3080               	movlw	128
  2716  0361  00B1               	movwf	___ftdiv@f2+1
  2717  0362  303F               	movlw	63
  2718  0363  00B2               	movwf	___ftdiv@f2+2
  2719  0364  3000               	movlw	0
  2720  0365  00A0               	movwf	___ftmul@f1
  2721  0366  30C8               	movlw	200
  2722  0367  00A1               	movwf	___ftmul@f1+1
  2723  0368  3042               	movlw	66
  2724  0369  00A2               	movwf	___ftmul@f1+2
  2725  036A  0862               	movf	ISR@input,w
  2726  036B  00A3               	movwf	___ftmul@f2
  2727  036C  0863               	movf	ISR@input+1,w
  2728  036D  00A4               	movwf	___ftmul@f2+1
  2729  036E  0864               	movf	ISR@input+2,w
  2730  036F  00A5               	movwf	___ftmul@f2+2
  2731  0370  120A  118A  2545  120A  118A  	fcall	___ftmul
  2732  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0377  0820               	movf	?___ftmul,w
  2735  0378  00B3               	movwf	___ftdiv@f1
  2736  0379  0821               	movf	?___ftmul+1,w
  2737  037A  00B4               	movwf	___ftdiv@f1+1
  2738  037B  0822               	movf	?___ftmul+2,w
  2739  037C  00B5               	movwf	___ftdiv@f1+2
  2740  037D  120A  118A  26D2  120A  118A  	fcall	___ftdiv
  2741  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2742  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2743  0384  0830               	movf	?___ftdiv,w
  2744  0385  00E5               	movwf	ISR@input2
  2745  0386  0831               	movf	?___ftdiv+1,w
  2746  0387  00E6               	movwf	ISR@input2+1
  2747  0388  0832               	movf	?___ftdiv+2,w
  2748  0389  00E7               	movwf	ISR@input2+2
  2749                           
  2750                           ;main.c: 270: per = ftoa(input2, &status2);
  2751  038A  0865               	movf	ISR@input2,w
  2752  038B  00C4               	movwf	ftoa@f
  2753  038C  0866               	movf	ISR@input2+1,w
  2754  038D  00C5               	movwf	ftoa@f+1
  2755  038E  0867               	movf	ISR@input2+2,w
  2756  038F  00C6               	movwf	ftoa@f+2
  2757  0390  305B               	movlw	ISR@status2& (0+255)
  2758  0391  00D2               	movwf	??_ISR
  2759  0392  0852               	movf	??_ISR,w
  2760  0393  00C7               	movwf	ftoa@status
  2761  0394  120A  118A  2618  120A  118A  	fcall	_ftoa
  2762  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2763  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2764  039B  00D3               	movwf	??_ISR+1
  2765  039C  0853               	movf	??_ISR+1,w
  2766  039D  00E8               	movwf	ISR@per
  2767                           
  2768                           ;main.c: 271: lcd_escreve_string(per);
  2769  039E  0868               	movf	ISR@per,w
  2770  039F  00FC               	movwf	i1lcd_escreve_string@y
  2771  03A0  3000               	movlw	0
  2772  03A1  00FD               	movwf	i1lcd_escreve_string@y+1
  2773  03A2  120A  158A  2183  120A  118A  	fcall	i1_lcd_escreve_string
  2774                           
  2775                           ;main.c: 273: sendString(per);
  2776  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2777  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2778  03A9  0868               	movf	ISR@per,w
  2779  03AA  120A  158A  24C2  120A  118A  	fcall	_sendString
  2780                           
  2781                           ;main.c: 275: lcd_gotoxy(16, 1);
  2782  03AF  01F5               	clrf	i1lcd_gotoxy@y
  2783  03B0  0AF5               	incf	i1lcd_gotoxy@y,f
  2784  03B1  3010               	movlw	16
  2785  03B2  120A  158A  20AF  120A  118A  	fcall	i1_lcd_gotoxy
  2786                           
  2787                           ;main.c: 276: lcd_escreve_string("%");
  2788  03B7  307C               	movlw	low (STR_3-__stringbase)
  2789  03B8  00FC               	movwf	i1lcd_escreve_string@y
  2790  03B9  3080               	movlw	128
  2791  03BA  00FD               	movwf	i1lcd_escreve_string@y+1
  2792  03BB  120A  158A  2183  120A  118A  	fcall	i1_lcd_escreve_string
  2793                           
  2794                           ;main.c: 277: lcd_gotoxy(0, 0);
  2795  03C0  01F5               	clrf	i1lcd_gotoxy@y
  2796  03C1  3000               	movlw	0
  2797  03C2  120A  158A  20AF  120A  118A  	fcall	i1_lcd_gotoxy
  2798                           
  2799                           ;main.c: 278: pre = input2 * 0.16;
  2800  03C7  30D7               	movlw	215
  2801  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2802  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  2803  03CA  00A0               	movwf	___ftmul@f1
  2804  03CB  3023               	movlw	35
  2805  03CC  00A1               	movwf	___ftmul@f1+1
  2806  03CD  303E               	movlw	62
  2807  03CE  00A2               	movwf	___ftmul@f1+2
  2808  03CF  0865               	movf	ISR@input2,w
  2809  03D0  00A3               	movwf	___ftmul@f2
  2810  03D1  0866               	movf	ISR@input2+1,w
  2811  03D2  00A4               	movwf	___ftmul@f2+1
  2812  03D3  0867               	movf	ISR@input2+2,w
  2813  03D4  00A5               	movwf	___ftmul@f2+2
  2814  03D5  120A  118A  2545  120A  118A  	fcall	___ftmul
  2815  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2816  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2817  03DC  0820               	movf	?___ftmul,w
  2818  03DD  00DD               	movwf	ISR@pre
  2819  03DE  0821               	movf	?___ftmul+1,w
  2820  03DF  00DE               	movwf	ISR@pre+1
  2821  03E0  0822               	movf	?___ftmul+2,w
  2822  03E1  00DF               	movwf	ISR@pre+2
  2823                           
  2824                           ;main.c: 279: preint = (int) pre;
  2825  03E2  085D               	movf	ISR@pre,w
  2826  03E3  00B0               	movwf	___fttol@f1
  2827  03E4  085E               	movf	ISR@pre+1,w
  2828  03E5  00B1               	movwf	___fttol@f1+1
  2829  03E6  085F               	movf	ISR@pre+2,w
  2830  03E7  00B2               	movwf	___fttol@f1+2
  2831  03E8  120A  158A  2772  120A  118A  	fcall	___fttol
  2832  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2833  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2834  03EF  0831               	movf	?___fttol+1,w
  2835  03F0  01E1               	clrf	ISR@preint+1
  2836  03F1  07E1               	addwf	ISR@preint+1,f
  2837  03F2  0830               	movf	?___fttol,w
  2838  03F3  01E0               	clrf	ISR@preint
  2839  03F4  07E0               	addwf	ISR@preint,f
  2840                           
  2841                           ;main.c: 282: if (ADCResult < 200) {
  2842  03F5  086A               	movf	_ADCResult+1,w
  2843  03F6  3A80               	xorlw	128
  2844  03F7  00FF               	movwf	127
  2845  03F8  3080               	movlw	128
  2846  03F9  027F               	subwf	127,w
  2847  03FA  1D03               	skipz
  2848  03FB  2BFE               	goto	u363_25
  2849  03FC  30C8               	movlw	200
  2850  03FD  0269               	subwf	_ADCResult,w
  2851  03FE                     u363_25:	
  2852  03FE  1803               	skipnc
  2853  03FF  2C04               	goto	i1l2817
  2854                           
  2855                           ;main.c: 283: PORTDbits.RD2 = 0;
  2856  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2857  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2858  0402  1108               	bcf	8,2	;volatile
  2859                           
  2860                           ;main.c: 284: PORTDbits.RD3 = 1;
  2861  0403  1588               	bsf	8,3	;volatile
  2862  0404                     i1l2817:	
  2863                           
  2864                           ;main.c: 285: }
  2865                           ;main.c: 287: if (ADCResult > 200) {
  2866  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2867  0405  1303               	bcf	3,6	;RP1=0, select bank0
  2868  0406  086A               	movf	_ADCResult+1,w
  2869  0407  3A80               	xorlw	128
  2870  0408  00FF               	movwf	127
  2871  0409  3080               	movlw	128
  2872  040A  027F               	subwf	127,w
  2873  040B  1D03               	skipz
  2874  040C  2C0F               	goto	u364_25
  2875  040D  30C9               	movlw	201
  2876  040E  0269               	subwf	_ADCResult,w
  2877  040F                     u364_25:	
  2878  040F  1C03               	skipc
  2879  0410  2C15               	goto	i1l2821
  2880                           
  2881                           ;main.c: 288: PORTDbits.RD2 = 1;
  2882  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0412  1303               	bcf	3,6	;RP1=0, select bank0
  2884  0413  1508               	bsf	8,2	;volatile
  2885                           
  2886                           ;main.c: 289: PORTDbits.RD3 = 0;
  2887  0414  1188               	bcf	8,3	;volatile
  2888  0415                     i1l2821:	
  2889                           
  2890                           ;main.c: 290: }
  2891                           ;main.c: 292: progressBar(preint);
  2892  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0417  0861               	movf	ISR@preint+1,w
  2895  0418  01A1               	clrf	progressBar@preint+1
  2896  0419  07A1               	addwf	progressBar@preint+1,f
  2897  041A  0860               	movf	ISR@preint,w
  2898  041B  01A0               	clrf	progressBar@preint
  2899  041C  07A0               	addwf	progressBar@preint,f
  2900  041D  120A  158A  23D9  120A  118A  	fcall	_progressBar
  2901                           
  2902                           ;main.c: 294: PIR1bits.ADIF = 0;
  2903  0422  1283               	bcf	3,5	;RP0=0, select bank0
  2904  0423  1303               	bcf	3,6	;RP1=0, select bank0
  2905  0424  130C               	bcf	12,6	;volatile
  2906  0425                     i1l2825:	
  2907                           
  2908                           ;main.c: 295: }
  2909                           ;main.c: 297: if (PIR1bits.RCIF) {
  2910  0425  1E8C               	btfss	12,5	;volatile
  2911  0426  2C31               	goto	i1l132
  2912                           
  2913                           ;main.c: 299: active(USARTReceiveChar());
  2914  0427  120A  158A  20C9  120A  118A  	fcall	_USARTReceiveChar
  2915  042C  120A  158A  238E  120A  118A  	fcall	_active
  2916  0431                     i1l132:	
  2917  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0433  0857               	movf	??_ISR+5,w
  2920  0434  00FF               	movwf	127
  2921  0435  0856               	movf	??_ISR+4,w
  2922  0436  008A               	movwf	10
  2923  0437  0855               	movf	??_ISR+3,w
  2924  0438  0084               	movwf	4
  2925  0439  0E54               	swapf	(??_ISR+2)^0,w
  2926  043A  0083               	movwf	3
  2927  043B  0EFE               	swapf	126,f
  2928  043C  0E7E               	swapf	126,w
  2929  043D  0009               	retfie
  2930  043E                     __end_of_ISR:	
  2931                           
  2932                           	psect	intentry
  2933  0004                     __pintentry:	
  2934                           ;incstack = 0
  2935 ;; hardware stack exceeded
  2936                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2937                           
  2938  0004                     interrupt_function:	
  2939  007E                     saved_w	set	btemp
  2940  0004  00FE               	movwf	btemp
  2941  0005  0E03               	swapf	3,w
  2942  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2943  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2944  0008  00D4               	movwf	??_ISR+2
  2945  0009  0804               	movf	4,w
  2946  000A  00D5               	movwf	??_ISR+3
  2947  000B  080A               	movf	10,w
  2948  000C  00D6               	movwf	??_ISR+4
  2949  000D  087F               	movf	btemp+1,w
  2950  000E  00D7               	movwf	??_ISR+5
  2951  000F  120A  118A  2A79   	ljmp	_ISR
  2952                           
  2953                           	psect	text12
  2954  0CC2                     __ptext12:	
  2955 ;; *************** function _sendString *****************
  2956 ;; Defined at:
  2957 ;;		line 185 in file "main.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  send            1    wreg     PTR const unsigned char 
  2960 ;;		 -> ftoa@buf(17), 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  send            1   41[BANK0 ] PTR const unsigned char 
  2963 ;;		 -> ftoa@buf(17), 
  2964 ;;  array          40    0[BANK0 ] unsigned char [40]
  2965 ;;  x               2   42[BANK0 ] int 
  2966 ;;  envio           1   40[BANK0 ] PTR unsigned char 
  2967 ;;		 -> sendString@array(40), 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2977 ;;      Params:         0       0       0       0       0
  2978 ;;      Locals:         0      44       0       0       0
  2979 ;;      Temps:          1       0       0       0       0
  2980 ;;      Totals:         1      44       0       0       0
  2981 ;;Total ram usage:       45 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    2
  2984 ;; This function calls:
  2985 ;;		i1_USARTWriteString
  2986 ;; This function is called by:
  2987 ;;		_ISR
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function _sendString
  2993  0CC2                     _sendString:	
  2994                           
  2995                           ;incstack = 0
  2996 ;; hardware stack exceeded
  2997                           ; Regs used in _sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2998                           ;sendString@send stored from wreg
  2999  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  3000  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  3001  0CC4  00C9               	movwf	sendString@send
  3002                           
  3003                           ;main.c: 186: int x = 0;
  3004  0CC5  01CA               	clrf	sendString@x
  3005  0CC6  01CB               	clrf	sendString@x+1
  3006  0CC7                     i1l2531:	
  3007                           ;main.c: 187: char array[40];
  3008                           ;main.c: 188: char * envio;
  3009                           ;main.c: 190: while (*send != '\0') {
  3010                           
  3011  0CC7  0849               	movf	sendString@send,w
  3012  0CC8  0084               	movwf	4
  3013  0CC9  1383               	bcf	3,7	;select IRP bank0
  3014  0CCA  0880               	movf	0,f
  3015  0CCB  1903               	btfsc	3,2
  3016  0CCC  2CFA               	goto	i1l2533
  3017                           
  3018                           ;main.c: 191: if (x == 0) {
  3019  0CCD  084B               	movf	sendString@x+1,w
  3020  0CCE  044A               	iorwf	sendString@x,w
  3021  0CCF  1D03               	skipz
  3022  0CD0  2CE5               	goto	i1l2525
  3023                           
  3024                           ;main.c: 192: if (recipiente == 0) {
  3025  0CD1  086C               	movf	_recipiente+1,w
  3026  0CD2  046B               	iorwf	_recipiente,w
  3027  0CD3  1D03               	skipz
  3028  0CD4  2CD7               	goto	i1l2519
  3029                           
  3030                           ;main.c: 193: array[x] = 'S';
  3031  0CD5  3053               	movlw	83
  3032  0CD6  2CDD               	goto	L2
  3033  0CD7                     i1l2519:	
  3034                           ;main.c: 194: } else if (recipiente == 1) {
  3035                           
  3036  0CD7  3001               	movlw	1
  3037  0CD8  066B               	xorwf	_recipiente,w
  3038  0CD9  046C               	iorwf	_recipiente+1,w
  3039  0CDA  1D03               	skipz
  3040  0CDB  2CF3               	goto	i1l2529
  3041                           
  3042                           ;main.c: 195: array[x] = 'I';
  3043  0CDC  3049               	movlw	73
  3044  0CDD                     L2:	
  3045  0CDD  00F3               	movwf	??_sendString
  3046  0CDE  084A               	movf	sendString@x,w
  3047  0CDF  3E20               	addlw	sendString@array& (0+255)
  3048  0CE0  0084               	movwf	4
  3049  0CE1  0873               	movf	??_sendString,w
  3050  0CE2  1383               	bcf	3,7	;select IRP bank0
  3051  0CE3  0080               	movwf	0
  3052  0CE4  2CF3               	goto	i1l2529
  3053  0CE5                     i1l2525:	
  3054                           ;main.c: 198: } else {
  3055                           
  3056                           ;main.c: 196: }
  3057                           ;main.c: 197: x++;
  3058                           
  3059                           
  3060                           ;main.c: 199: array[x] = *send;
  3061  0CE5  0849               	movf	sendString@send,w
  3062  0CE6  0084               	movwf	4
  3063  0CE7  1383               	bcf	3,7	;select IRP bank0
  3064  0CE8  0800               	movf	0,w
  3065  0CE9  00F3               	movwf	??_sendString
  3066  0CEA  084A               	movf	sendString@x,w
  3067  0CEB  3E20               	addlw	sendString@array& (0+255)
  3068  0CEC  0084               	movwf	4
  3069  0CED  0873               	movf	??_sendString,w
  3070  0CEE  0080               	movwf	0
  3071                           
  3072                           ;main.c: 200: send++;
  3073  0CEF  3001               	movlw	1
  3074  0CF0  00F3               	movwf	??_sendString
  3075  0CF1  0873               	movf	??_sendString,w
  3076  0CF2  07C9               	addwf	sendString@send,f
  3077  0CF3                     i1l2529:	
  3078                           
  3079                           ;main.c: 201: x++;
  3080  0CF3  3001               	movlw	1
  3081  0CF4  07CA               	addwf	sendString@x,f
  3082  0CF5  1803               	skipnc
  3083  0CF6  0ACB               	incf	sendString@x+1,f
  3084  0CF7  3000               	movlw	0
  3085  0CF8  07CB               	addwf	sendString@x+1,f
  3086  0CF9  2CC7               	goto	i1l2531
  3087  0CFA                     i1l2533:	
  3088                           
  3089                           ;main.c: 202: }
  3090                           ;main.c: 203: }
  3091                           ;main.c: 205: if (x < 39) {
  3092  0CFA  084B               	movf	sendString@x+1,w
  3093  0CFB  3A80               	xorlw	128
  3094  0CFC  00FF               	movwf	127
  3095  0CFD  3080               	movlw	128
  3096  0CFE  027F               	subwf	127,w
  3097  0CFF  1D03               	skipz
  3098  0D00  2D03               	goto	u324_25
  3099  0D01  3027               	movlw	39
  3100  0D02  024A               	subwf	sendString@x,w
  3101  0D03                     u324_25:	
  3102  0D03  1803               	skipnc
  3103  0D04  2D0C               	goto	i1l2537
  3104                           
  3105                           ;main.c: 206: array[x] = '\0';
  3106  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  3107  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  3108  0D07  084A               	movf	sendString@x,w
  3109  0D08  3E20               	addlw	sendString@array& (0+255)
  3110  0D09  0084               	movwf	4
  3111  0D0A  1383               	bcf	3,7	;select IRP bank0
  3112  0D0B  0180               	clrf	0
  3113  0D0C                     i1l2537:	
  3114                           
  3115                           ;main.c: 207: }
  3116                           ;main.c: 209: envio = &array;
  3117  0D0C  3020               	movlw	sendString@array& (0+255)
  3118  0D0D  00F3               	movwf	??_sendString
  3119  0D0E  0873               	movf	??_sendString,w
  3120  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  3121  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  3122  0D11  00C8               	movwf	sendString@envio
  3123                           
  3124                           ;main.c: 210: USARTWriteString(envio);
  3125  0D12  0848               	movf	sendString@envio,w
  3126  0D13  00F1               	movwf	i1USARTWriteString@str
  3127  0D14  3000               	movlw	0
  3128  0D15  00F2               	movwf	i1USARTWriteString@str+1
  3129  0D16  120A  158A  213D   	fcall	i1_USARTWriteString
  3130  0D19  0008               	return
  3131  0D1A                     __end_of_sendString:	
  3132                           
  3133                           	psect	text13
  3134  0BD9                     __ptext13:	
  3135 ;; *************** function _progressBar *****************
  3136 ;; Defined at:
  3137 ;;		line 217 in file "main.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  preint          2    0[BANK0 ] int 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  aux            16    6[BANK0 ] unsigned char [16]
  3142 ;;  i               2   22[BANK0 ] int 
  3143 ;;  result          1   24[BANK0 ] PTR unsigned char 
  3144 ;;		 -> progressBar@aux(16), 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;		None               void
  3147 ;; Registers used:
  3148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3154 ;;      Params:         0       2       0       0       0
  3155 ;;      Locals:         0      19       0       0       0
  3156 ;;      Temps:          0       4       0       0       0
  3157 ;;      Totals:         0      25       0       0       0
  3158 ;;Total ram usage:       25 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    5
  3161 ;; This function calls:
  3162 ;;		i1_lcd_escreve_string
  3163 ;; This function is called by:
  3164 ;;		_ISR
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _progressBar
  3170  0BD9                     _progressBar:	
  3171                           
  3172                           ;main.c: 218: int i = 0;
  3173                           
  3174                           ;incstack = 0
  3175 ;; hardware stack exceeded
  3176                           ; Regs used in _progressBar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3177  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  3178  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  3179  0BDB  01B6               	clrf	progressBar@i
  3180  0BDC  01B7               	clrf	progressBar@i+1
  3181                           
  3182                           ;main.c: 219: unsigned char *result;
  3183                           ;main.c: 220: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
  3184                           ;main.c: 221: ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
  3185  0BDD  3026               	movlw	progressBar@aux& (0+255)
  3186  0BDE  0084               	movwf	4
  3187  0BDF  30C9               	movlw	low progressBar@F1341
  3188  0BE0  00A2               	movwf	??_progressBar
  3189  0BE1  0804               	movf	4,w
  3190  0BE2  00A3               	movwf	??_progressBar+1
  3191  0BE3  3010               	movlw	16
  3192  0BE4  00A4               	movwf	??_progressBar+2
  3193  0BE5                     u325_20:	
  3194  0BE5  0822               	movf	??_progressBar,w
  3195  0BE6  0084               	movwf	4
  3196  0BE7  1383               	bcf	3,7	;select IRP bank1
  3197  0BE8  0800               	movf	0,w
  3198  0BE9  00A5               	movwf	??_progressBar+3
  3199  0BEA  0AA2               	incf	??_progressBar,f
  3200  0BEB  0823               	movf	??_progressBar+1,w
  3201  0BEC  0084               	movwf	4
  3202  0BED  0825               	movf	??_progressBar+3,w
  3203  0BEE  0080               	movwf	0
  3204  0BEF  0AA3               	incf	??_progressBar+1,f
  3205  0BF0  0BA4               	decfsz	??_progressBar+2,f
  3206  0BF1  2BE5               	goto	u325_20
  3207  0BF2                     i1l2551:	
  3208                           ;main.c: 224: while (preint >= 0) {
  3209                           
  3210  0BF2  1BA1               	btfsc	progressBar@preint+1,7
  3211  0BF3  2C08               	goto	i1l2553
  3212                           
  3213                           ;main.c: 225: aux[i] = 0xFF;
  3214  0BF4  30FF               	movlw	255
  3215  0BF5  00A2               	movwf	??_progressBar
  3216  0BF6  0836               	movf	progressBar@i,w
  3217  0BF7  3E26               	addlw	progressBar@aux& (0+255)
  3218  0BF8  0084               	movwf	4
  3219  0BF9  0822               	movf	??_progressBar,w
  3220  0BFA  0080               	movwf	0
  3221                           
  3222                           ;main.c: 226: preint--;
  3223  0BFB  30FF               	movlw	255
  3224  0BFC  07A0               	addwf	progressBar@preint,f
  3225  0BFD  1803               	skipnc
  3226  0BFE  0AA1               	incf	progressBar@preint+1,f
  3227  0BFF  30FF               	movlw	255
  3228  0C00  07A1               	addwf	progressBar@preint+1,f
  3229                           
  3230                           ;main.c: 227: i++;
  3231  0C01  3001               	movlw	1
  3232  0C02  07B6               	addwf	progressBar@i,f
  3233  0C03  1803               	skipnc
  3234  0C04  0AB7               	incf	progressBar@i+1,f
  3235  0C05  3000               	movlw	0
  3236  0C06  07B7               	addwf	progressBar@i+1,f
  3237  0C07  2BF2               	goto	i1l2551
  3238  0C08                     i1l2553:	
  3239                           
  3240                           ;main.c: 228: }
  3241                           ;main.c: 229: result = &aux;
  3242  0C08  3026               	movlw	progressBar@aux& (0+255)
  3243  0C09  00A2               	movwf	??_progressBar
  3244  0C0A  0822               	movf	??_progressBar,w
  3245  0C0B  00B8               	movwf	progressBar@result
  3246                           
  3247                           ;main.c: 230: lcd_escreve_string(result);
  3248  0C0C  0838               	movf	progressBar@result,w
  3249  0C0D  00FC               	movwf	i1lcd_escreve_string@y
  3250  0C0E  3000               	movlw	0
  3251  0C0F  00FD               	movwf	i1lcd_escreve_string@y+1
  3252  0C10  120A  158A  2183  120A  158A  	fcall	i1_lcd_escreve_string
  3253                           
  3254                           ;main.c: 231: _delay((unsigned long)((200)*(20000000/4000.0)));
  3255  0C15  3006               	movlw	6
  3256  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  3258  0C18  00A4               	movwf	??_progressBar+2
  3259  0C19  3013               	movlw	19
  3260  0C1A  00A3               	movwf	??_progressBar+1
  3261  0C1B  30B1               	movlw	177
  3262  0C1C  00A2               	movwf	??_progressBar
  3263  0C1D                     u400_27:	
  3264  0C1D  0BA2               	decfsz	??_progressBar,f
  3265  0C1E  2C1D               	goto	u400_27
  3266  0C1F  0BA3               	decfsz	??_progressBar+1,f
  3267  0C20  2C1D               	goto	u400_27
  3268  0C21  0BA4               	decfsz	??_progressBar+2,f
  3269  0C22  2C1D               	goto	u400_27
  3270  0C23  2C24               	nop2
  3271  0C24  0008               	return
  3272  0C25                     __end_of_progressBar:	
  3273                           
  3274                           	psect	text14
  3275  0983                     __ptext14:	
  3276 ;; *************** function i1_lcd_escreve_string *****************
  3277 ;; Defined at:
  3278 ;;		line 168 in file "lcd_4bit.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  y               2   12[COMMON] PTR const unsigned char 
  3281 ;;		 -> ftoa@buf(17), STR_5(16), STR_4(16), STR_3(2), 
  3282 ;;		 -> STR_2(7), progressBar@aux(16), 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;		None               void
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3294 ;;      Params:         2       0       0       0       0
  3295 ;;      Locals:         0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0
  3297 ;;      Totals:         2       0       0       0       0
  3298 ;;Total ram usage:        2 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    4
  3301 ;; This function calls:
  3302 ;;		i1_lcd_putc
  3303 ;; This function is called by:
  3304 ;;		_progressBar
  3305 ;;		_ISR
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           
  3310                           ;psect for function i1_lcd_escreve_string
  3311  0983                     i1_lcd_escreve_string:	
  3312  0983                     i1l2443:	
  3313                           ;lcd_4bit.c: 170: while(*y!='\0')
  3314                           
  3315                           ;incstack = 0
  3316 ;; hardware stack exceeded
  3317                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3318                           
  3319  0983  087D               	movf	i1lcd_escreve_string@y+1,w
  3320  0984  1283               	bcf	3,5	;RP0=0, select bank0
  3321  0985  1303               	bcf	3,6	;RP1=0, select bank0
  3322  0986  00FF               	movwf	127
  3323  0987  087C               	movf	i1lcd_escreve_string@y,w
  3324  0988  0084               	movwf	4
  3325  0989  120A  158A  2000  120A  158A  	fcall	stringtab
  3326  098E  3800               	iorlw	0
  3327  098F  1903               	btfsc	3,2
  3328  0990  0008               	return
  3329                           
  3330                           ;lcd_4bit.c: 171: {
  3331                           ;lcd_4bit.c: 172: lcd_putc(*y);
  3332  0991  087D               	movf	i1lcd_escreve_string@y+1,w
  3333  0992  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0993  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0994  00FF               	movwf	127
  3336  0995  087C               	movf	i1lcd_escreve_string@y,w
  3337  0996  0084               	movwf	4
  3338  0997  120A  158A  2000  120A  158A  	fcall	stringtab
  3339  099C  120A  158A  22CC  120A  158A  	fcall	i1_lcd_putc
  3340                           
  3341                           ;lcd_4bit.c: 173: y++;
  3342  09A1  3001               	movlw	1
  3343  09A2  07FC               	addwf	i1lcd_escreve_string@y,f
  3344  09A3  1803               	skipnc
  3345  09A4  0AFD               	incf	i1lcd_escreve_string@y+1,f
  3346  09A5  2983               	goto	i1l2443
  3347  09A6                     __end_ofi1_lcd_escreve_string:	
  3348                           
  3349                           	psect	text15
  3350  0ACC                     __ptext15:	
  3351 ;; *************** function i1_lcd_putc *****************
  3352 ;; Defined at:
  3353 ;;		line 82 in file "lcd_4bit.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  c               1    wreg     unsigned char 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  c               1   11[COMMON] unsigned char 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;		None               void
  3360 ;; Registers used:
  3361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3367 ;;      Params:         0       0       0       0       0
  3368 ;;      Locals:         1       0       0       0       0
  3369 ;;      Temps:          2       0       0       0       0
  3370 ;;      Totals:         3       0       0       0       0
  3371 ;;Total ram usage:        3 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    3
  3374 ;; This function calls:
  3375 ;;		i1_lcd_envia_byte
  3376 ;;		i1_lcd_gotoxy
  3377 ;; This function is called by:
  3378 ;;		i1_lcd_escreve_string
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           
  3383                           ;psect for function i1_lcd_putc
  3384  0ACC                     i1_lcd_putc:	
  3385                           
  3386                           ;incstack = 0
  3387 ;; hardware stack exceeded
  3388                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3389                           ;i1lcd_putc@c stored from wreg
  3390  0ACC  00FB               	movwf	i1lcd_putc@c
  3391                           
  3392                           ;lcd_4bit.c: 84: switch(c)
  3393  0ACD  2AFB               	goto	i1l2165
  3394  0ACE                     i1l2153:	
  3395                           ;lcd_4bit.c: 85: {
  3396                           ;lcd_4bit.c: 86: case '\f':
  3397                           
  3398                           
  3399                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  3400  0ACE  01F2               	clrf	i1lcd_envia_byte@n
  3401  0ACF  0AF2               	incf	i1lcd_envia_byte@n,f
  3402  0AD0  3000               	movlw	0
  3403  0AD1  120A  158A  21D1  120A  158A  	fcall	i1_lcd_envia_byte
  3404                           
  3405                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3406  0AD6  300D               	movlw	13
  3407  0AD7  00FA               	movwf	??i1_lcd_putc+1
  3408  0AD8  30FB               	movlw	251
  3409  0AD9  00F9               	movwf	??i1_lcd_putc
  3410  0ADA                     u401_27:	
  3411  0ADA  0BF9               	decfsz	??i1_lcd_putc,f
  3412  0ADB  2ADA               	goto	u401_27
  3413  0ADC  0BFA               	decfsz	??i1_lcd_putc+1,f
  3414  0ADD  2ADA               	goto	u401_27
  3415  0ADE  2ADF               	nop2
  3416                           
  3417                           ;lcd_4bit.c: 89: break;
  3418  0ADF  0008               	return
  3419  0AE0                     i1l2157:	
  3420                           ;lcd_4bit.c: 91: case '\n':
  3421                           
  3422                           
  3423                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  3424  0AE0  3002               	movlw	2
  3425  0AE1  00F9               	movwf	??i1_lcd_putc
  3426  0AE2  0879               	movf	??i1_lcd_putc,w
  3427  0AE3  00F5               	movwf	i1lcd_gotoxy@y
  3428  0AE4  3001               	movlw	1
  3429  0AE5  120A  158A  20AF   	fcall	i1_lcd_gotoxy
  3430                           
  3431                           ;lcd_4bit.c: 93: break;
  3432  0AE8  0008               	return
  3433  0AE9                     i1l2159:	
  3434                           ;lcd_4bit.c: 95: case '\b':
  3435                           
  3436                           
  3437                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  3438  0AE9  3010               	movlw	16
  3439  0AEA  00F9               	movwf	??i1_lcd_putc
  3440  0AEB  0879               	movf	??i1_lcd_putc,w
  3441  0AEC  00F2               	movwf	i1lcd_envia_byte@n
  3442  0AED  3000               	movlw	0
  3443  0AEE  120A  158A  21D1   	fcall	i1_lcd_envia_byte
  3444                           
  3445                           ;lcd_4bit.c: 97: break;
  3446  0AF1  0008               	return
  3447  0AF2                     i1l2161:	
  3448                           ;lcd_4bit.c: 99: default:
  3449                           
  3450                           
  3451                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  3452  0AF2  087B               	movf	i1lcd_putc@c,w
  3453  0AF3  00F9               	movwf	??i1_lcd_putc
  3454  0AF4  0879               	movf	??i1_lcd_putc,w
  3455  0AF5  00F2               	movwf	i1lcd_envia_byte@n
  3456  0AF6  3001               	movlw	1
  3457  0AF7  120A  158A  21D1   	fcall	i1_lcd_envia_byte
  3458                           
  3459                           ;lcd_4bit.c: 102: }
  3460                           
  3461                           ;lcd_4bit.c: 101: break;
  3462  0AFA  0008               	return
  3463  0AFB                     i1l2165:	
  3464  0AFB  087B               	movf	i1lcd_putc@c,w
  3465                           
  3466                           ; Switch size 1, requested type "space"
  3467                           ; Number of cases is 3, Range of values is 8 to 12
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte           10     6 (average)
  3471                           ; direct_byte           26    11 (fixed)
  3472                           ; jumptable            263     9 (fixed)
  3473                           ;	Chosen strategy is simple_byte
  3474  0AFC  3A08               	xorlw	8	; case 8
  3475  0AFD  1903               	skipnz
  3476  0AFE  2AE9               	goto	i1l2159
  3477  0AFF  3A02               	xorlw	2	; case 10
  3478  0B00  1903               	skipnz
  3479  0B01  2AE0               	goto	i1l2157
  3480  0B02  3A06               	xorlw	6	; case 12
  3481  0B03  1903               	skipnz
  3482  0B04  2ACE               	goto	i1l2153
  3483  0B05  2AF2               	goto	i1l2161
  3484  0B06  0008               	return
  3485  0B07                     __end_ofi1_lcd_putc:	
  3486                           
  3487                           	psect	text16
  3488  08AF                     __ptext16:	
  3489 ;; *************** function i1_lcd_gotoxy *****************
  3490 ;; Defined at:
  3491 ;;		line 70 in file "lcd_4bit.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  x               1    wreg     unsigned char 
  3494 ;;  y               1    5[COMMON] unsigned char 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  x               1    7[COMMON] unsigned char 
  3497 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, pclath, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3507 ;;      Params:         1       0       0       0       0
  3508 ;;      Locals:         2       0       0       0       0
  3509 ;;      Temps:          1       0       0       0       0
  3510 ;;      Totals:         4       0       0       0       0
  3511 ;;Total ram usage:        4 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    2
  3514 ;; This function calls:
  3515 ;;		i1_lcd_envia_byte
  3516 ;; This function is called by:
  3517 ;;		_ISR
  3518 ;;		i1_lcd_putc
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           
  3523                           ;psect for function i1_lcd_gotoxy
  3524  08AF                     i1_lcd_gotoxy:	
  3525                           
  3526                           ;incstack = 0
  3527 ;; hardware stack exceeded
  3528                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  3529                           ;i1lcd_gotoxy@x stored from wreg
  3530  08AF  00F7               	movwf	i1lcd_gotoxy@x
  3531                           
  3532                           ;lcd_4bit.c: 72: unsigned char address;
  3533                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  3534  08B0  0875               	movf	i1lcd_gotoxy@y,w
  3535  08B1  3A01               	xorlw	1
  3536  08B2  1903               	skipnz
  3537  08B3  28B9               	goto	i1l1991
  3538  08B4  3040               	movlw	64
  3539  08B5  00F6               	movwf	??i1_lcd_gotoxy
  3540  08B6  0876               	movf	??i1_lcd_gotoxy,w
  3541  08B7  00F8               	movwf	i1lcd_gotoxy@address
  3542  08B8  28BA               	goto	i1l1993
  3543  08B9                     i1l1991:	
  3544                           
  3545                           ;lcd_4bit.c: 75: else address=0;
  3546  08B9  01F8               	clrf	i1lcd_gotoxy@address
  3547  08BA                     i1l1993:	
  3548                           
  3549                           ;lcd_4bit.c: 77: address += x-1;
  3550  08BA  0877               	movf	i1lcd_gotoxy@x,w
  3551  08BB  3EFF               	addlw	255
  3552  08BC  00F6               	movwf	??i1_lcd_gotoxy
  3553  08BD  0876               	movf	??i1_lcd_gotoxy,w
  3554  08BE  07F8               	addwf	i1lcd_gotoxy@address,f
  3555                           
  3556                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  3557  08BF  0878               	movf	i1lcd_gotoxy@address,w
  3558  08C0  3880               	iorlw	128
  3559  08C1  00F6               	movwf	??i1_lcd_gotoxy
  3560  08C2  0876               	movf	??i1_lcd_gotoxy,w
  3561  08C3  00F2               	movwf	i1lcd_envia_byte@n
  3562  08C4  3000               	movlw	0
  3563  08C5  120A  158A  21D1   	fcall	i1_lcd_envia_byte
  3564  08C8  0008               	return
  3565  08C9                     __end_ofi1_lcd_gotoxy:	
  3566                           
  3567                           	psect	text17
  3568  09D1                     __ptext17:	
  3569 ;; *************** function i1_lcd_envia_byte *****************
  3570 ;; Defined at:
  3571 ;;		line 53 in file "lcd_4bit.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  address         1    wreg     unsigned char 
  3574 ;;  n               1    2[COMMON] unsigned char 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  address         1    4[COMMON] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3586 ;;      Params:         1       0       0       0       0
  3587 ;;      Locals:         1       0       0       0       0
  3588 ;;      Temps:          1       0       0       0       0
  3589 ;;      Totals:         3       0       0       0       0
  3590 ;;Total ram usage:        3 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    1
  3593 ;; This function calls:
  3594 ;;		i1_lcd_envia_nibble
  3595 ;; This function is called by:
  3596 ;;		i1_lcd_gotoxy
  3597 ;;		i1_lcd_putc
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           
  3602                           ;psect for function i1_lcd_envia_byte
  3603  09D1                     i1_lcd_envia_byte:	
  3604                           
  3605                           ;incstack = 0
  3606 ;; hardware stack exceeded
  3607                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  3608                           ;i1lcd_envia_byte@address stored from wreg
  3609  09D1  00F4               	movwf	i1lcd_envia_byte@address
  3610                           
  3611                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  3612  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  3613  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  3614  09D4  1286               	bcf	6,5	;volatile
  3615                           
  3616                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  3617  09D5  3063               	movlw	99
  3618  09D6  00F3               	movwf	??i1_lcd_envia_byte
  3619  09D7                     u402_27:	
  3620  09D7  0BF3               	decfsz	??i1_lcd_envia_byte,f
  3621  09D8  29D7               	goto	u402_27
  3622  09D9  29DA               	nop2	;nop
  3623                           
  3624                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  3625  09DA  0874               	movf	i1lcd_envia_byte@address,w
  3626  09DB  1903               	btfsc	3,2
  3627  09DC  29E1               	goto	i1l173
  3628  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  3629  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  3630  09DF  1686               	bsf	6,5	;volatile
  3631  09E0  29E4               	goto	i1l174
  3632  09E1                     i1l173:	
  3633                           
  3634                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  3635  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  3636  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  3637  09E3  1286               	bcf	6,5	;volatile
  3638  09E4                     i1l174:	
  3639                           
  3640                           ;lcd_4bit.c: 61: _delay(1);
  3641  09E4  0000               	nop
  3642                           
  3643                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  3644  09E5  1283               	bcf	3,5	;RP0=0, select bank0
  3645  09E6  1303               	bcf	3,6	;RP1=0, select bank0
  3646  09E7  1206               	bcf	6,4	;volatile
  3647                           
  3648                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  3649  09E8  0872               	movf	i1lcd_envia_byte@n,w
  3650  09E9  00F3               	movwf	??i1_lcd_envia_byte
  3651  09EA  3004               	movlw	4
  3652  09EB                     u197_25:	
  3653  09EB  1003               	clrc
  3654  09EC  0CF3               	rrf	??i1_lcd_envia_byte,f
  3655  09ED  3EFF               	addlw	-1
  3656  09EE  1D03               	skipz
  3657  09EF  29EB               	goto	u197_25
  3658  09F0  0873               	movf	??i1_lcd_envia_byte,w
  3659  09F1  120A  158A  2293  120A  158A  	fcall	i1_lcd_envia_nibble
  3660                           
  3661                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  3662  09F6  0872               	movf	i1lcd_envia_byte@n,w
  3663  09F7  390F               	andlw	15
  3664  09F8  120A  158A  2293   	fcall	i1_lcd_envia_nibble
  3665  09FB  0008               	return
  3666  09FC                     __end_ofi1_lcd_envia_byte:	
  3667                           
  3668                           	psect	text18
  3669  0A93                     __ptext18:	
  3670 ;; *************** function i1_lcd_envia_nibble *****************
  3671 ;; Defined at:
  3672 ;;		line 39 in file "lcd_4bit.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  n               1    wreg     unsigned char 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  n               1    1[COMMON] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;		None               void
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3686 ;;      Params:         0       0       0       0       0
  3687 ;;      Locals:         1       0       0       0       0
  3688 ;;      Temps:          1       0       0       0       0
  3689 ;;      Totals:         2       0       0       0       0
  3690 ;;Total ram usage:        2 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		i1_lcd_envia_byte
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function i1_lcd_envia_nibble
  3701  0A93                     i1_lcd_envia_nibble:	
  3702                           
  3703                           ;incstack = 0
  3704 ;; hardware stack exceeded
  3705                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  3706                           ;i1lcd_envia_nibble@n stored from wreg
  3707  0A93  00F1               	movwf	i1lcd_envia_nibble@n
  3708                           
  3709                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  3710  0A94  3000               	movlw	0
  3711  0A95  1871               	btfsc	i1lcd_envia_nibble@n,0
  3712  0A96  3001               	movlw	1
  3713  0A97  00F0               	movwf	??i1_lcd_envia_nibble
  3714  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  3715  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  3716  0A9A  0806               	movf	6,w	;volatile
  3717  0A9B  0670               	xorwf	??i1_lcd_envia_nibble,w
  3718  0A9C  39FE               	andlw	-2
  3719  0A9D  0670               	xorwf	??i1_lcd_envia_nibble,w
  3720  0A9E  0086               	movwf	6	;volatile
  3721                           
  3722                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  3723  0A9F  3000               	movlw	0
  3724  0AA0  18F1               	btfsc	i1lcd_envia_nibble@n,1
  3725  0AA1  3001               	movlw	1
  3726  0AA2  00F0               	movwf	??i1_lcd_envia_nibble
  3727  0AA3  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3728  0AA4  0806               	movf	6,w	;volatile
  3729  0AA5  0670               	xorwf	??i1_lcd_envia_nibble,w
  3730  0AA6  39FD               	andlw	-3
  3731  0AA7  0670               	xorwf	??i1_lcd_envia_nibble,w
  3732  0AA8  0086               	movwf	6	;volatile
  3733                           
  3734                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  3735  0AA9  3000               	movlw	0
  3736  0AAA  1971               	btfsc	i1lcd_envia_nibble@n,2
  3737  0AAB  3001               	movlw	1
  3738  0AAC  00F0               	movwf	??i1_lcd_envia_nibble
  3739  0AAD  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3740  0AAE  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3741  0AAF  0806               	movf	6,w	;volatile
  3742  0AB0  0670               	xorwf	??i1_lcd_envia_nibble,w
  3743  0AB1  39FB               	andlw	-5
  3744  0AB2  0670               	xorwf	??i1_lcd_envia_nibble,w
  3745  0AB3  0086               	movwf	6	;volatile
  3746                           
  3747                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  3748  0AB4  3000               	movlw	0
  3749  0AB5  19F1               	btfsc	i1lcd_envia_nibble@n,3
  3750  0AB6  3001               	movlw	1
  3751  0AB7  00F0               	movwf	??i1_lcd_envia_nibble
  3752  0AB8  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3753  0AB9  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3754  0ABA  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3755  0ABB  0806               	movf	6,w	;volatile
  3756  0ABC  0670               	xorwf	??i1_lcd_envia_nibble,w
  3757  0ABD  39F7               	andlw	-9
  3758  0ABE  0670               	xorwf	??i1_lcd_envia_nibble,w
  3759  0ABF  0086               	movwf	6	;volatile
  3760                           
  3761                           ;lcd_4bit.c: 46: _delay(1);
  3762  0AC0  0000               	nop
  3763                           
  3764                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  3765  0AC1  1283               	bcf	3,5	;RP0=0, select bank0
  3766  0AC2  1303               	bcf	3,6	;RP1=0, select bank0
  3767  0AC3  1606               	bsf	6,4	;volatile
  3768                           
  3769                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  3770  0AC4  3003               	movlw	3
  3771  0AC5  00F0               	movwf	??i1_lcd_envia_nibble
  3772  0AC6                     u403_27:	
  3773  0AC6  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  3774  0AC7  2AC6               	goto	u403_27
  3775                           
  3776                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  3777  0AC8  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0AC9  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0ACA  1206               	bcf	6,4	;volatile
  3780  0ACB  0008               	return
  3781  0ACC                     __end_ofi1_lcd_envia_nibble:	
  3782                           
  3783                           	psect	text19
  3784  0618                     __ptext19:	
  3785 ;; *************** function _ftoa *****************
  3786 ;; Defined at:
  3787 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  f               3   36[BANK0 ] float 
  3790 ;;  status          1   39[BANK0 ] PTR int 
  3791 ;;		 -> ISR@status2(2), ISR@status(2), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  l               4   45[BANK0 ] unsigned long 
  3794 ;;  rem             4   41[BANK0 ] unsigned long 
  3795 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  3796 ;;		 -> ftoa@buf(17), 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      PTR unsigned char 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         0       4       0       0       0
  3807 ;;      Locals:         0       9       0       0       0
  3808 ;;      Temps:          0       1       0       0       0
  3809 ;;      Totals:         0      14       0       0       0
  3810 ;;Total ram usage:       14 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    3
  3813 ;; This function calls:
  3814 ;;		___ftge
  3815 ;;		___ftmul
  3816 ;;		___ftneg
  3817 ;;		___ftsub
  3818 ;;		___fttol
  3819 ;;		___lltoft
  3820 ;;		_sprintf
  3821 ;; This function is called by:
  3822 ;;		_ISR
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           
  3827                           ;psect for function _ftoa
  3828  0618                     _ftoa:	
  3829                           
  3830                           ;incstack = 0
  3831 ;; hardware stack exceeded
  3832                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3833  0618  30A7               	movlw	ftoa@buf& (0+255)
  3834  0619  1283               	bcf	3,5	;RP0=0, select bank0
  3835  061A  1303               	bcf	3,6	;RP1=0, select bank0
  3836  061B  00C8               	movwf	??_ftoa
  3837  061C  0848               	movf	??_ftoa,w
  3838  061D  00D1               	movwf	ftoa@cp
  3839  061E  0844               	movf	ftoa@f,w
  3840  061F  00F0               	movwf	___ftge@ff1
  3841  0620  0845               	movf	ftoa@f+1,w
  3842  0621  00F1               	movwf	___ftge@ff1+1
  3843  0622  0846               	movf	ftoa@f+2,w
  3844  0623  00F2               	movwf	___ftge@ff1+2
  3845  0624  3000               	movlw	0
  3846  0625  00F3               	movwf	___ftge@ff2
  3847  0626  3000               	movlw	0
  3848  0627  00F4               	movwf	___ftge@ff2+1
  3849  0628  3000               	movlw	0
  3850  0629  00F5               	movwf	___ftge@ff2+2
  3851  062A  120A  158A  25CE  120A  118A  	fcall	___ftge
  3852  062F  1803               	btfsc	3,0
  3853  0630  2E51               	goto	i1l2577
  3854  0631  302D               	movlw	45
  3855  0632  1283               	bcf	3,5	;RP0=0, select bank0
  3856  0633  1303               	bcf	3,6	;RP1=0, select bank0
  3857  0634  00C8               	movwf	??_ftoa
  3858  0635  0851               	movf	ftoa@cp,w
  3859  0636  0084               	movwf	4
  3860  0637  0848               	movf	??_ftoa,w
  3861  0638  1383               	bcf	3,7	;select IRP bank0
  3862  0639  0080               	movwf	0
  3863  063A  3001               	movlw	1
  3864  063B  00C8               	movwf	??_ftoa
  3865  063C  0848               	movf	??_ftoa,w
  3866  063D  07D1               	addwf	ftoa@cp,f
  3867  063E  0844               	movf	ftoa@f,w
  3868  063F  00F0               	movwf	___ftneg@f1
  3869  0640  0845               	movf	ftoa@f+1,w
  3870  0641  00F1               	movwf	___ftneg@f1+1
  3871  0642  0846               	movf	ftoa@f+2,w
  3872  0643  00F2               	movwf	___ftneg@f1+2
  3873  0644  160A  118A  27CF  120A  118A  	fcall	___ftneg
  3874  0649  0870               	movf	?___ftneg,w
  3875  064A  1283               	bcf	3,5	;RP0=0, select bank0
  3876  064B  1303               	bcf	3,6	;RP1=0, select bank0
  3877  064C  00C4               	movwf	ftoa@f
  3878  064D  0871               	movf	?___ftneg+1,w
  3879  064E  00C5               	movwf	ftoa@f+1
  3880  064F  0872               	movf	?___ftneg+2,w
  3881  0650  00C6               	movwf	ftoa@f+2
  3882  0651                     i1l2577:	
  3883  0651  1283               	bcf	3,5	;RP0=0, select bank0
  3884  0652  1303               	bcf	3,6	;RP1=0, select bank0
  3885  0653  0844               	movf	ftoa@f,w
  3886  0654  00B0               	movwf	___fttol@f1
  3887  0655  0845               	movf	ftoa@f+1,w
  3888  0656  00B1               	movwf	___fttol@f1+1
  3889  0657  0846               	movf	ftoa@f+2,w
  3890  0658  00B2               	movwf	___fttol@f1+2
  3891  0659  120A  158A  2772  120A  118A  	fcall	___fttol
  3892  065E  1283               	bcf	3,5	;RP0=0, select bank0
  3893  065F  1303               	bcf	3,6	;RP1=0, select bank0
  3894  0660  0833               	movf	?___fttol+3,w
  3895  0661  00D0               	movwf	ftoa@l+3
  3896  0662  0832               	movf	?___fttol+2,w
  3897  0663  00CF               	movwf	ftoa@l+2
  3898  0664  0831               	movf	?___fttol+1,w
  3899  0665  00CE               	movwf	ftoa@l+1
  3900  0666  0830               	movf	?___fttol,w
  3901  0667  00CD               	movwf	ftoa@l
  3902  0668  0850               	movf	ftoa@l+3,w
  3903  0669  00FB               	movwf	___lltoft@c+3
  3904  066A  084F               	movf	ftoa@l+2,w
  3905  066B  00FA               	movwf	___lltoft@c+2
  3906  066C  084E               	movf	ftoa@l+1,w
  3907  066D  00F9               	movwf	___lltoft@c+1
  3908  066E  084D               	movf	ftoa@l,w
  3909  066F  00F8               	movwf	___lltoft@c
  3910  0670  120A  158A  21A6  120A  118A  	fcall	___lltoft
  3911  0675  0878               	movf	?___lltoft,w
  3912  0676  1283               	bcf	3,5	;RP0=0, select bank0
  3913  0677  1303               	bcf	3,6	;RP1=0, select bank0
  3914  0678  00A7               	movwf	___ftsub@f2
  3915  0679  0879               	movf	?___lltoft+1,w
  3916  067A  00A8               	movwf	___ftsub@f2+1
  3917  067B  087A               	movf	?___lltoft+2,w
  3918  067C  00A9               	movwf	___ftsub@f2+2
  3919  067D  0844               	movf	ftoa@f,w
  3920  067E  00AA               	movwf	___ftsub@f1
  3921  067F  0845               	movf	ftoa@f+1,w
  3922  0680  00AB               	movwf	___ftsub@f1+1
  3923  0681  0846               	movf	ftoa@f+2,w
  3924  0682  00AC               	movwf	___ftsub@f1+2
  3925  0683  120A  158A  20E4  120A  118A  	fcall	___ftsub
  3926  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3927  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3928  068A  0827               	movf	?___ftsub,w
  3929  068B  00C4               	movwf	ftoa@f
  3930  068C  0828               	movf	?___ftsub+1,w
  3931  068D  00C5               	movwf	ftoa@f+1
  3932  068E  0829               	movf	?___ftsub+2,w
  3933  068F  00C6               	movwf	ftoa@f+2
  3934  0690  0844               	movf	ftoa@f,w
  3935  0691  00A3               	movwf	___ftmul@f2
  3936  0692  0845               	movf	ftoa@f+1,w
  3937  0693  00A4               	movwf	___ftmul@f2+1
  3938  0694  0846               	movf	ftoa@f+2,w
  3939  0695  00A5               	movwf	___ftmul@f2+2
  3940  0696  3024               	movlw	36
  3941  0697  00A0               	movwf	___ftmul@f1
  3942  0698  3074               	movlw	116
  3943  0699  00A1               	movwf	___ftmul@f1+1
  3944  069A  3049               	movlw	73
  3945  069B  00A2               	movwf	___ftmul@f1+2
  3946  069C  120A  118A  2545  120A  118A  	fcall	___ftmul
  3947  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  3948  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  3949  06A3  0820               	movf	?___ftmul,w
  3950  06A4  00B0               	movwf	___fttol@f1
  3951  06A5  0821               	movf	?___ftmul+1,w
  3952  06A6  00B1               	movwf	___fttol@f1+1
  3953  06A7  0822               	movf	?___ftmul+2,w
  3954  06A8  00B2               	movwf	___fttol@f1+2
  3955  06A9  120A  158A  2772  120A  118A  	fcall	___fttol
  3956  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  3957  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  3958  06B0  0833               	movf	?___fttol+3,w
  3959  06B1  00CC               	movwf	ftoa@rem+3
  3960  06B2  0832               	movf	?___fttol+2,w
  3961  06B3  00CB               	movwf	ftoa@rem+2
  3962  06B4  0831               	movf	?___fttol+1,w
  3963  06B5  00CA               	movwf	ftoa@rem+1
  3964  06B6  0830               	movf	?___fttol,w
  3965  06B7  00C9               	movwf	ftoa@rem
  3966  06B8  3065               	movlw	(STR_7-__stringbase)& (0+255)
  3967  06B9  00C8               	movwf	??_ftoa
  3968  06BA  0848               	movf	??_ftoa,w
  3969  06BB  00AA               	movwf	sprintf@f
  3970  06BC  0850               	movf	ftoa@l+3,w
  3971  06BD  00AE               	movwf	?_sprintf+4
  3972  06BE  084F               	movf	ftoa@l+2,w
  3973  06BF  00AD               	movwf	?_sprintf+3
  3974  06C0  084E               	movf	ftoa@l+1,w
  3975  06C1  00AC               	movwf	?_sprintf+2
  3976  06C2  084D               	movf	ftoa@l,w
  3977  06C3  00AB               	movwf	?_sprintf+1
  3978  06C4  084C               	movf	ftoa@rem+3,w
  3979  06C5  00B2               	movwf	?_sprintf+8
  3980  06C6  084B               	movf	ftoa@rem+2,w
  3981  06C7  00B1               	movwf	?_sprintf+7
  3982  06C8  084A               	movf	ftoa@rem+1,w
  3983  06C9  00B0               	movwf	?_sprintf+6
  3984  06CA  0849               	movf	ftoa@rem,w
  3985  06CB  00AF               	movwf	?_sprintf+5
  3986  06CC  0851               	movf	ftoa@cp,w
  3987  06CD  120A  118A  203D   	fcall	_sprintf
  3988  06D0  30A7               	movlw	ftoa@buf& (0+255)
  3989  06D1  0008               	return
  3990  06D2                     __end_of_ftoa:	
  3991                           
  3992                           	psect	text20
  3993  003D                     __ptext20:	
  3994 ;; *************** function _sprintf *****************
  3995 ;; Defined at:
  3996 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  sp              1    wreg     PTR unsigned char 
  3999 ;;		 -> ftoa@buf(17), 
  4000 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4001 ;;		 -> STR_7(11), 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4004 ;;		 -> ftoa@buf(17), 
  4005 ;;  _val            4   26[BANK0 ] struct .
  4006 ;;  prec            2   33[BANK0 ] int 
  4007 ;;  width           2   31[BANK0 ] int 
  4008 ;;  c               1   35[BANK0 ] char 
  4009 ;;  ap              1   25[BANK0 ] PTR void [1]
  4010 ;;		 -> ?_sprintf(2), 
  4011 ;;  flag            1   24[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  2   10[BANK0 ] int 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4021 ;;      Params:         0       9       0       0       0
  4022 ;;      Locals:         0      12       0       0       0
  4023 ;;      Temps:          0       5       0       0       0
  4024 ;;      Totals:         0      26       0       0       0
  4025 ;;Total ram usage:       26 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    1
  4028 ;; This function calls:
  4029 ;;		___lldiv
  4030 ;;		___llmod
  4031 ;;		___wmul
  4032 ;;		_isdigit
  4033 ;; This function is called by:
  4034 ;;		_ftoa
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _sprintf
  4040  003D                     _sprintf:	
  4041                           
  4042                           ;incstack = 0
  4043 ;; hardware stack exceeded
  4044                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4045                           ;sprintf@sp stored from wreg
  4046  003D  1283               	bcf	3,5	;RP0=0, select bank0
  4047  003E  1303               	bcf	3,6	;RP1=0, select bank0
  4048  003F  00BE               	movwf	sprintf@sp
  4049                           
  4050                           ;doprnt.c: 494: va_list ap;
  4051                           ;doprnt.c: 499: signed char c;
  4052                           ;doprnt.c: 501: int width;
  4053                           ;doprnt.c: 504: int prec;
  4054                           ;doprnt.c: 508: unsigned char flag;
  4055                           ;doprnt.c: 527: union {
  4056                           ;doprnt.c: 528: unsigned long _val;
  4057                           ;doprnt.c: 529: struct {
  4058                           ;doprnt.c: 530: const char * _cp;
  4059                           ;doprnt.c: 531: unsigned _len;
  4060                           ;doprnt.c: 532: } _str;
  4061                           ;doprnt.c: 533: } _val;
  4062                           ;doprnt.c: 542: *ap = __va_start();
  4063  0040  302B               	movlw	(?_sprintf+1)& (0+255)
  4064  0041  00B3               	movwf	??_sprintf
  4065  0042  0833               	movf	??_sprintf,w
  4066  0043  00B9               	movwf	sprintf@ap
  4067  0044                     i1l2285:	
  4068                           ;doprnt.c: 545: while(c = *f++) {
  4069                           
  4070  0044  3001               	movlw	1
  4071  0045  07AA               	addwf	sprintf@f,f
  4072  0046  30FF               	movlw	-1
  4073  0047  072A               	addwf	sprintf@f,w
  4074  0048  0084               	movwf	4
  4075  0049  120A  158A  200A  120A  118A  	fcall	stringdir
  4076  004E  00B3               	movwf	??_sprintf
  4077  004F  0833               	movf	??_sprintf,w
  4078  0050  00C3               	movwf	sprintf@c
  4079  0051  08C3               	movf	sprintf@c,f
  4080  0052  1903               	btfsc	3,2
  4081  0053  2A74               	goto	i1l2287
  4082                           
  4083                           ;doprnt.c: 547: if(c != '%')
  4084  0054  0843               	movf	sprintf@c,w
  4085  0055  3A25               	xorlw	37
  4086  0056  1903               	skipnz
  4087  0057  2864               	goto	i1l2195
  4088                           
  4089                           ;doprnt.c: 549: {
  4090                           ;doprnt.c: 550: ((*sp++ = (c)));
  4091  0058  0843               	movf	sprintf@c,w
  4092  0059  00B3               	movwf	??_sprintf
  4093  005A  083E               	movf	sprintf@sp,w
  4094  005B  0084               	movwf	4
  4095  005C  0833               	movf	??_sprintf,w
  4096  005D  1383               	bcf	3,7	;select IRP bank0
  4097  005E  0080               	movwf	0
  4098  005F  3001               	movlw	1
  4099  0060  00B3               	movwf	??_sprintf
  4100  0061  0833               	movf	??_sprintf,w
  4101  0062  07BE               	addwf	sprintf@sp,f
  4102                           
  4103                           ;doprnt.c: 551: continue;
  4104  0063  2844               	goto	i1l2285
  4105  0064                     i1l2195:	
  4106                           
  4107                           ;doprnt.c: 552: }
  4108                           ;doprnt.c: 555: width = 0;
  4109  0064  01BF               	clrf	sprintf@width
  4110  0065  01C0               	clrf	sprintf@width+1
  4111                           
  4112                           ;doprnt.c: 557: flag = 0;
  4113  0066  01B8               	clrf	sprintf@flag
  4114                           
  4115                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4116  0067  082A               	movf	sprintf@f,w
  4117  0068  0084               	movwf	4
  4118  0069  120A  158A  200A  120A  118A  	fcall	stringdir
  4119  006E  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4120  0073  1C03               	btfss	3,0
  4121  0074  28B7               	goto	i1l2209
  4122                           
  4123                           ;doprnt.c: 607: width = 0;
  4124  0075  1283               	bcf	3,5	;RP0=0, select bank0
  4125  0076  1303               	bcf	3,6	;RP1=0, select bank0
  4126  0077  01BF               	clrf	sprintf@width
  4127  0078  01C0               	clrf	sprintf@width+1
  4128  0079                     i1l2201:	
  4129                           ;doprnt.c: 608: do {
  4130                           
  4131                           
  4132                           ;doprnt.c: 609: width *= 10;
  4133  0079  300A               	movlw	10
  4134  007A  00F0               	movwf	___wmul@multiplier
  4135  007B  3000               	movlw	0
  4136  007C  00F1               	movwf	___wmul@multiplier+1
  4137  007D  1283               	bcf	3,5	;RP0=0, select bank0
  4138  007E  1303               	bcf	3,6	;RP1=0, select bank0
  4139  007F  0840               	movf	sprintf@width+1,w
  4140  0080  01F3               	clrf	___wmul@multiplicand+1
  4141  0081  07F3               	addwf	___wmul@multiplicand+1,f
  4142  0082  083F               	movf	sprintf@width,w
  4143  0083  01F2               	clrf	___wmul@multiplicand
  4144  0084  07F2               	addwf	___wmul@multiplicand,f
  4145  0085  120A  158A  2160  120A  118A  	fcall	___wmul
  4146  008A  0871               	movf	?___wmul+1,w
  4147  008B  1283               	bcf	3,5	;RP0=0, select bank0
  4148  008C  1303               	bcf	3,6	;RP1=0, select bank0
  4149  008D  01C0               	clrf	sprintf@width+1
  4150  008E  07C0               	addwf	sprintf@width+1,f
  4151  008F  0870               	movf	?___wmul,w
  4152  0090  01BF               	clrf	sprintf@width
  4153  0091  07BF               	addwf	sprintf@width,f
  4154                           
  4155                           ;doprnt.c: 610: width += *f++ - '0';
  4156  0092  082A               	movf	sprintf@f,w
  4157  0093  0084               	movwf	4
  4158  0094  120A  158A  200A  120A  118A  	fcall	stringdir
  4159  0099  3ED0               	addlw	208
  4160  009A  00B3               	movwf	??_sprintf
  4161  009B  30FF               	movlw	255
  4162  009C  1803               	skipnc
  4163  009D  3000               	movlw	0
  4164  009E  00B4               	movwf	??_sprintf+1
  4165  009F  0833               	movf	??_sprintf,w
  4166  00A0  07BF               	addwf	sprintf@width,f
  4167  00A1  1803               	skipnc
  4168  00A2  0AC0               	incf	sprintf@width+1,f
  4169  00A3  0834               	movf	??_sprintf+1,w
  4170  00A4  07C0               	addwf	sprintf@width+1,f
  4171  00A5  3001               	movlw	1
  4172  00A6  00B3               	movwf	??_sprintf
  4173  00A7  0833               	movf	??_sprintf,w
  4174  00A8  07AA               	addwf	sprintf@f,f
  4175                           
  4176                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4177  00A9  082A               	movf	sprintf@f,w
  4178  00AA  0084               	movwf	4
  4179  00AB  120A  158A  200A  120A  118A  	fcall	stringdir
  4180  00B0  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4181  00B5  1803               	btfsc	3,0
  4182  00B6  2879               	goto	i1l2201
  4183  00B7                     i1l2209:	
  4184                           
  4185                           ;doprnt.c: 617: }
  4186                           ;doprnt.c: 620: if(*f == '.') {
  4187  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  4188  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  4189  00B9  082A               	movf	sprintf@f,w
  4190  00BA  0084               	movwf	4
  4191  00BB  120A  158A  200A  120A  118A  	fcall	stringdir
  4192  00C0  3A2E               	xorlw	46
  4193  00C1  1D03               	skipz
  4194  00C2  2905               	goto	i1l2221
  4195                           
  4196                           ;doprnt.c: 622: f++;
  4197  00C3  3001               	movlw	1
  4198  00C4  00B3               	movwf	??_sprintf
  4199  00C5  0833               	movf	??_sprintf,w
  4200  00C6  07AA               	addwf	sprintf@f,f
  4201                           
  4202                           ;doprnt.c: 629: {
  4203                           ;doprnt.c: 630: prec = 0;
  4204  00C7  01C1               	clrf	sprintf@prec
  4205  00C8  01C2               	clrf	sprintf@prec+1
  4206  00C9                     i1l2219:	
  4207                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4208                           
  4209  00C9  082A               	movf	sprintf@f,w
  4210  00CA  0084               	movwf	4
  4211  00CB  120A  158A  200A  120A  118A  	fcall	stringdir
  4212  00D0  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4213  00D5  1C03               	btfss	3,0
  4214  00D6  2911               	goto	i1l2227
  4215                           
  4216                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4217  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4218  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  4219  00D9  0842               	movf	sprintf@prec+1,w
  4220  00DA  01F1               	clrf	___wmul@multiplier+1
  4221  00DB  07F1               	addwf	___wmul@multiplier+1,f
  4222  00DC  0841               	movf	sprintf@prec,w
  4223  00DD  01F0               	clrf	___wmul@multiplier
  4224  00DE  07F0               	addwf	___wmul@multiplier,f
  4225  00DF  300A               	movlw	10
  4226  00E0  00F2               	movwf	___wmul@multiplicand
  4227  00E1  3000               	movlw	0
  4228  00E2  00F3               	movwf	___wmul@multiplicand+1
  4229  00E3  120A  158A  2160  120A  118A  	fcall	___wmul
  4230  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  4231  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  4232  00EA  082A               	movf	sprintf@f,w
  4233  00EB  0084               	movwf	4
  4234  00EC  120A  158A  200A  120A  118A  	fcall	stringdir
  4235  00F1  0770               	addwf	?___wmul,w
  4236  00F2  00B3               	movwf	??_sprintf
  4237  00F3  3000               	movlw	0
  4238  00F4  1803               	skipnc
  4239  00F5  3001               	movlw	1
  4240  00F6  0771               	addwf	?___wmul+1,w
  4241  00F7  00B4               	movwf	??_sprintf+1
  4242  00F8  0833               	movf	??_sprintf,w
  4243  00F9  3ED0               	addlw	208
  4244  00FA  00C1               	movwf	sprintf@prec
  4245  00FB  0834               	movf	??_sprintf+1,w
  4246  00FC  1803               	skipnc
  4247  00FD  3E01               	addlw	1
  4248  00FE  3EFF               	addlw	255
  4249  00FF  00C2               	movwf	sprintf@prec+1
  4250  0100  3001               	movlw	1
  4251  0101  00B3               	movwf	??_sprintf
  4252  0102  0833               	movf	??_sprintf,w
  4253  0103  07AA               	addwf	sprintf@f,f
  4254  0104  28C9               	goto	i1l2219
  4255  0105                     i1l2221:	
  4256                           ;doprnt.c: 633: }
  4257                           ;doprnt.c: 634: } else {
  4258                           
  4259                           
  4260                           ;doprnt.c: 635: prec = 0;
  4261  0105  1283               	bcf	3,5	;RP0=0, select bank0
  4262  0106  1303               	bcf	3,6	;RP1=0, select bank0
  4263  0107  01C1               	clrf	sprintf@prec
  4264  0108  01C2               	clrf	sprintf@prec+1
  4265                           
  4266                           ;doprnt.c: 644: switch(c = *f++) {
  4267                           
  4268                           ;doprnt.c: 639: }
  4269                           ;doprnt.c: 642: loop:
  4270  0109  2911               	goto	i1l2227
  4271  010A                     i1l253:	
  4272                           ;doprnt.c: 650: case 'l':
  4273                           
  4274                           ;doprnt.c: 647: goto alldone;
  4275                           
  4276                           ;doprnt.c: 646: case 0:
  4277                           
  4278                           
  4279                           ;doprnt.c: 652: flag |= 0x10;
  4280  010A  1638               	bsf	sprintf@flag,4
  4281                           
  4282                           ;doprnt.c: 653: goto loop;
  4283  010B  2911               	goto	i1l2227
  4284  010C                     i1l2223:	
  4285                           ;doprnt.c: 826: case 'u':
  4286                           
  4287                           ;doprnt.c: 822: continue;
  4288                           
  4289                           ;doprnt.c: 811: default:
  4290                           
  4291                           
  4292                           ;doprnt.c: 827: flag |= 0xC0;
  4293  010C  30C0               	movlw	192
  4294  010D  00B3               	movwf	??_sprintf
  4295  010E  0833               	movf	??_sprintf,w
  4296  010F  04B8               	iorwf	sprintf@flag,f
  4297                           
  4298                           ;doprnt.c: 831: }
  4299                           
  4300                           ;doprnt.c: 828: break;
  4301  0110  2928               	goto	i1l256
  4302  0111                     i1l2227:	
  4303  0111  3001               	movlw	1
  4304  0112  1283               	bcf	3,5	;RP0=0, select bank0
  4305  0113  1303               	bcf	3,6	;RP1=0, select bank0
  4306  0114  07AA               	addwf	sprintf@f,f
  4307  0115  30FF               	movlw	-1
  4308  0116  072A               	addwf	sprintf@f,w
  4309  0117  0084               	movwf	4
  4310  0118  120A  158A  200A  120A  118A  	fcall	stringdir
  4311  011D  00C3               	movwf	sprintf@c
  4312                           
  4313                           ; Switch size 1, requested type "space"
  4314                           ; Number of cases is 3, Range of values is 0 to 117
  4315                           ; switch strategies available:
  4316                           ; Name         Instructions Cycles
  4317                           ; simple_byte           10     6 (average)
  4318                           ; jumptable            260     6 (fixed)
  4319                           ;	Chosen strategy is simple_byte
  4320  011E  3A00               	xorlw	0	; case 0
  4321  011F  1903               	skipnz
  4322  0120  2A74               	goto	i1l2287
  4323  0121  3A6C               	xorlw	108	; case 108
  4324  0122  1903               	skipnz
  4325  0123  290A               	goto	i1l253
  4326  0124  3A19               	xorlw	25	; case 117
  4327  0125  1903               	skipnz
  4328  0126  290C               	goto	i1l2223
  4329  0127  2844               	goto	i1l2285
  4330  0128                     i1l256:	
  4331                           
  4332                           ;doprnt.c: 1282: {
  4333                           ;doprnt.c: 1290: if(flag & 0x10)
  4334  0128  1E38               	btfss	sprintf@flag,4
  4335  0129  293A               	goto	i1l2233
  4336                           
  4337                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  4338  012A  0839               	movf	sprintf@ap,w
  4339  012B  0084               	movwf	4
  4340  012C  1383               	bcf	3,7	;select IRP bank0
  4341  012D  0800               	movf	0,w
  4342  012E  00BA               	movwf	sprintf@_val
  4343  012F  0A84               	incf	4,f
  4344  0130  0800               	movf	0,w
  4345  0131  00BB               	movwf	sprintf@_val+1
  4346  0132  0A84               	incf	4,f
  4347  0133  0800               	movf	0,w
  4348  0134  00BC               	movwf	sprintf@_val+2
  4349  0135  0A84               	incf	4,f
  4350  0136  0800               	movf	0,w
  4351  0137  00BD               	movwf	sprintf@_val+3
  4352  0138  3004               	movlw	4
  4353  0139  2949               	goto	L3
  4354  013A                     i1l2233:	
  4355                           
  4356                           ;doprnt.c: 1292: else
  4357                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4358  013A  0839               	movf	sprintf@ap,w
  4359  013B  0084               	movwf	4
  4360  013C  1383               	bcf	3,7	;select IRP bank0
  4361  013D  0800               	movf	0,w
  4362  013E  00B3               	movwf	??_sprintf
  4363  013F  0A84               	incf	4,f
  4364  0140  0800               	movf	0,w
  4365  0141  00B4               	movwf	??_sprintf+1
  4366  0142  0833               	movf	??_sprintf,w
  4367  0143  00BA               	movwf	sprintf@_val
  4368  0144  0834               	movf	??_sprintf+1,w
  4369  0145  00BB               	movwf	sprintf@_val+1
  4370  0146  01BC               	clrf	sprintf@_val+2
  4371  0147  01BD               	clrf	sprintf@_val+3
  4372  0148  3002               	movlw	2
  4373  0149                     L3:	
  4374  0149  00B3               	movwf	??_sprintf
  4375  014A  0833               	movf	??_sprintf,w
  4376  014B  07B9               	addwf	sprintf@ap,f
  4377                           
  4378                           ;doprnt.c: 1296: }
  4379                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4380  014C  0842               	movf	sprintf@prec+1,w
  4381  014D  0441               	iorwf	sprintf@prec,w
  4382  014E  1D03               	skipz
  4383  014F  295C               	goto	i1l2243
  4384  0150  083D               	movf	sprintf@_val+3,w
  4385  0151  043C               	iorwf	sprintf@_val+2,w
  4386  0152  043B               	iorwf	sprintf@_val+1,w
  4387  0153  043A               	iorwf	sprintf@_val,w
  4388  0154  1D03               	skipz
  4389  0155  295C               	goto	i1l2243
  4390                           
  4391                           ;doprnt.c: 1300: prec++;
  4392  0156  3001               	movlw	1
  4393  0157  07C1               	addwf	sprintf@prec,f
  4394  0158  1803               	skipnc
  4395  0159  0AC2               	incf	sprintf@prec+1,f
  4396  015A  3000               	movlw	0
  4397  015B  07C2               	addwf	sprintf@prec+1,f
  4398  015C                     i1l2243:	
  4399                           
  4400                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4401  015C  01C3               	clrf	sprintf@c
  4402  015D  0AC3               	incf	sprintf@c,f
  4403  015E  0843               	movf	sprintf@c,w
  4404  015F  3A0A               	xorlw	10
  4405  0160  1903               	btfsc	3,2
  4406  0161  299E               	goto	i1l2255
  4407  0162                     i1l2247:	
  4408                           
  4409                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4410  0162  0843               	movf	sprintf@c,w
  4411  0163  00B3               	movwf	??_sprintf
  4412  0164  3001               	movlw	1
  4413  0165                     u267_25:	
  4414  0165  1003               	clrc
  4415  0166  0DB3               	rlf	??_sprintf,f
  4416  0167  3EFF               	addlw	-1
  4417  0168  1D03               	skipz
  4418  0169  2965               	goto	u267_25
  4419  016A  1003               	clrc
  4420  016B  0D33               	rlf	??_sprintf,w
  4421  016C  3E01               	addlw	low (_dpowers-__stringbase)
  4422  016D  0084               	movwf	4
  4423  016E  120A  158A  200A  120A  118A  	fcall	stringdir
  4424  0173  00B4               	movwf	??_sprintf+1
  4425  0174  120A  158A  200A  120A  118A  	fcall	stringdir
  4426  0179  00B5               	movwf	??_sprintf+2
  4427  017A  120A  158A  200A  120A  118A  	fcall	stringdir
  4428  017F  00B6               	movwf	??_sprintf+3
  4429  0180  120A  158A  200A  120A  118A  	fcall	stringdir
  4430  0185  00B7               	movwf	??_sprintf+4
  4431  0186  0837               	movf	??_sprintf+4,w
  4432  0187  023D               	subwf	sprintf@_val+3,w
  4433  0188  1D03               	skipz
  4434  0189  2994               	goto	u268_25
  4435  018A  0836               	movf	??_sprintf+3,w
  4436  018B  023C               	subwf	sprintf@_val+2,w
  4437  018C  1D03               	skipz
  4438  018D  2994               	goto	u268_25
  4439  018E  0835               	movf	??_sprintf+2,w
  4440  018F  023B               	subwf	sprintf@_val+1,w
  4441  0190  1D03               	skipz
  4442  0191  2994               	goto	u268_25
  4443  0192  0834               	movf	??_sprintf+1,w
  4444  0193  023A               	subwf	sprintf@_val,w
  4445  0194                     u268_25:	
  4446  0194  1C03               	btfss	3,0
  4447  0195  299E               	goto	i1l2255
  4448                           
  4449                           ;doprnt.c: 1316: break;
  4450  0196  3001               	movlw	1
  4451  0197  00B3               	movwf	??_sprintf
  4452  0198  0833               	movf	??_sprintf,w
  4453  0199  07C3               	addwf	sprintf@c,f
  4454  019A  0843               	movf	sprintf@c,w
  4455  019B  3A0A               	xorlw	10
  4456  019C  1D03               	skipz
  4457  019D  2962               	goto	i1l2247
  4458  019E                     i1l2255:	
  4459                           
  4460                           ;doprnt.c: 1348: if(c < prec)
  4461  019E  0843               	movf	sprintf@c,w
  4462  019F  00B3               	movwf	??_sprintf
  4463  01A0  01B4               	clrf	??_sprintf+1
  4464  01A1  1BB3               	btfsc	??_sprintf,7
  4465  01A2  03B4               	decf	??_sprintf+1,f
  4466  01A3  0834               	movf	??_sprintf+1,w
  4467  01A4  3A80               	xorlw	128
  4468  01A5  00B5               	movwf	??_sprintf+2
  4469  01A6  0842               	movf	sprintf@prec+1,w
  4470  01A7  3A80               	xorlw	128
  4471  01A8  0235               	subwf	??_sprintf+2,w
  4472  01A9  1D03               	skipz
  4473  01AA  29AD               	goto	u270_25
  4474  01AB  0841               	movf	sprintf@prec,w
  4475  01AC  0233               	subwf	??_sprintf,w
  4476  01AD                     u270_25:	
  4477  01AD  1803               	skipnc
  4478  01AE  29B6               	goto	i1l2259
  4479                           
  4480                           ;doprnt.c: 1349: c = prec;
  4481  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  4482  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  4483  01B1  0841               	movf	sprintf@prec,w
  4484  01B2  00B3               	movwf	??_sprintf
  4485  01B3  0833               	movf	??_sprintf,w
  4486  01B4  00C3               	movwf	sprintf@c
  4487  01B5  29D0               	goto	i1l2263
  4488  01B6                     i1l2259:	
  4489                           
  4490                           ;doprnt.c: 1350: else if(prec < c)
  4491  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  4492  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  4493  01B8  0843               	movf	sprintf@c,w
  4494  01B9  00B3               	movwf	??_sprintf
  4495  01BA  01B4               	clrf	??_sprintf+1
  4496  01BB  1BB3               	btfsc	??_sprintf,7
  4497  01BC  03B4               	decf	??_sprintf+1,f
  4498  01BD  0842               	movf	sprintf@prec+1,w
  4499  01BE  3A80               	xorlw	128
  4500  01BF  00B5               	movwf	??_sprintf+2
  4501  01C0  0834               	movf	??_sprintf+1,w
  4502  01C1  3A80               	xorlw	128
  4503  01C2  0235               	subwf	??_sprintf+2,w
  4504  01C3  1D03               	skipz
  4505  01C4  29C7               	goto	u271_25
  4506  01C5  0833               	movf	??_sprintf,w
  4507  01C6  0241               	subwf	sprintf@prec,w
  4508  01C7                     u271_25:	
  4509  01C7  1803               	skipnc
  4510  01C8  29D0               	goto	i1l2263
  4511                           
  4512                           ;doprnt.c: 1351: prec = c;
  4513  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  4514  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  4515  01CB  0843               	movf	sprintf@c,w
  4516  01CC  00C1               	movwf	sprintf@prec
  4517  01CD  01C2               	clrf	sprintf@prec+1
  4518  01CE  1BC1               	btfsc	sprintf@prec,7
  4519  01CF  03C2               	decf	sprintf@prec+1,f
  4520  01D0                     i1l2263:	
  4521                           
  4522                           ;doprnt.c: 1390: if(width > c)
  4523  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  4524  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  4525  01D2  0843               	movf	sprintf@c,w
  4526  01D3  00B3               	movwf	??_sprintf
  4527  01D4  01B4               	clrf	??_sprintf+1
  4528  01D5  1BB3               	btfsc	??_sprintf,7
  4529  01D6  03B4               	decf	??_sprintf+1,f
  4530  01D7  0834               	movf	??_sprintf+1,w
  4531  01D8  3A80               	xorlw	128
  4532  01D9  00B5               	movwf	??_sprintf+2
  4533  01DA  0840               	movf	sprintf@width+1,w
  4534  01DB  3A80               	xorlw	128
  4535  01DC  0235               	subwf	??_sprintf+2,w
  4536  01DD  1D03               	skipz
  4537  01DE  29E1               	goto	u272_25
  4538  01DF  083F               	movf	sprintf@width,w
  4539  01E0  0233               	subwf	??_sprintf,w
  4540  01E1                     u272_25:	
  4541  01E1  1803               	skipnc
  4542  01E2  29F1               	goto	i1l2267
  4543                           
  4544                           ;doprnt.c: 1391: width -= c;
  4545  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  4546  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  4547  01E5  0843               	movf	sprintf@c,w
  4548  01E6  00B3               	movwf	??_sprintf
  4549  01E7  01B4               	clrf	??_sprintf+1
  4550  01E8  1BB3               	btfsc	??_sprintf,7
  4551  01E9  03B4               	decf	??_sprintf+1,f
  4552  01EA  0833               	movf	??_sprintf,w
  4553  01EB  02BF               	subwf	sprintf@width,f
  4554  01EC  0834               	movf	??_sprintf+1,w
  4555  01ED  1C03               	skipc
  4556  01EE  03C0               	decf	sprintf@width+1,f
  4557  01EF  02C0               	subwf	sprintf@width+1,f
  4558  01F0  29F5               	goto	i1l2269
  4559  01F1                     i1l2267:	
  4560                           
  4561                           ;doprnt.c: 1392: else
  4562                           ;doprnt.c: 1393: width = 0;
  4563  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  4564  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  4565  01F3  01BF               	clrf	sprintf@width
  4566  01F4  01C0               	clrf	sprintf@width+1
  4567  01F5                     i1l2269:	
  4568                           
  4569                           ;doprnt.c: 1431: {
  4570                           ;doprnt.c: 1433: if(width
  4571                           ;doprnt.c: 1437: )
  4572  01F5  0840               	movf	sprintf@width+1,w
  4573  01F6  043F               	iorwf	sprintf@width,w
  4574  01F7  1903               	skipnz
  4575  01F8  2A65               	goto	i1l2283
  4576                           
  4577                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4578                           
  4579                           ;doprnt.c: 1438: do
  4580  01F9  3020               	movlw	32
  4581  01FA  00B3               	movwf	??_sprintf
  4582  01FB  083E               	movf	sprintf@sp,w
  4583  01FC  0084               	movwf	4
  4584  01FD  0833               	movf	??_sprintf,w
  4585  01FE  1383               	bcf	3,7	;select IRP bank0
  4586  01FF  0080               	movwf	0
  4587  0200  3001               	movlw	1
  4588  0201  00B3               	movwf	??_sprintf
  4589  0202  0833               	movf	??_sprintf,w
  4590  0203  07BE               	addwf	sprintf@sp,f
  4591                           
  4592                           ;doprnt.c: 1440: while(--width);
  4593  0204  30FF               	movlw	255
  4594  0205  07BF               	addwf	sprintf@width,f
  4595  0206  1803               	skipnc
  4596  0207  0AC0               	incf	sprintf@width+1,f
  4597  0208  30FF               	movlw	255
  4598  0209  07C0               	addwf	sprintf@width+1,f
  4599  020A  29F5               	goto	i1l2269
  4600  020B                     i1l2277:	
  4601                           ;doprnt.c: 1478: }
  4602                           ;doprnt.c: 1483: while(prec--) {
  4603                           
  4604                           
  4605                           ;doprnt.c: 1487: {
  4606                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4607  020B  3000               	movlw	0
  4608  020C  00A3               	movwf	___llmod@divisor+3
  4609  020D  3000               	movlw	0
  4610  020E  00A2               	movwf	___llmod@divisor+2
  4611  020F  3000               	movlw	0
  4612  0210  00A1               	movwf	___llmod@divisor+1
  4613  0211  300A               	movlw	10
  4614  0212  00A0               	movwf	___llmod@divisor
  4615  0213  0841               	movf	sprintf@prec,w
  4616  0214  00B3               	movwf	??_sprintf
  4617  0215  3001               	movlw	1
  4618  0216                     u275_25:	
  4619  0216  1003               	clrc
  4620  0217  0DB3               	rlf	??_sprintf,f
  4621  0218  3EFF               	addlw	-1
  4622  0219  1D03               	skipz
  4623  021A  2A16               	goto	u275_25
  4624  021B  1003               	clrc
  4625  021C  0D33               	rlf	??_sprintf,w
  4626  021D  3E01               	addlw	low (_dpowers-__stringbase)
  4627  021E  0084               	movwf	4
  4628  021F  120A  158A  200A  120A  118A  	fcall	stringdir
  4629  0224  00F0               	movwf	___lldiv@divisor
  4630  0225  120A  158A  200A  120A  118A  	fcall	stringdir
  4631  022A  00F1               	movwf	___lldiv@divisor+1
  4632  022B  120A  158A  200A  120A  118A  	fcall	stringdir
  4633  0230  00F2               	movwf	___lldiv@divisor+2
  4634  0231  120A  158A  200A  120A  118A  	fcall	stringdir
  4635  0236  00F3               	movwf	___lldiv@divisor+3
  4636  0237  083D               	movf	sprintf@_val+3,w
  4637  0238  00F7               	movwf	___lldiv@dividend+3
  4638  0239  083C               	movf	sprintf@_val+2,w
  4639  023A  00F6               	movwf	___lldiv@dividend+2
  4640  023B  083B               	movf	sprintf@_val+1,w
  4641  023C  00F5               	movwf	___lldiv@dividend+1
  4642  023D  083A               	movf	sprintf@_val,w
  4643  023E  00F4               	movwf	___lldiv@dividend
  4644  023F  120A  158A  262B  120A  118A  	fcall	___lldiv
  4645  0244  0873               	movf	?___lldiv+3,w
  4646  0245  1283               	bcf	3,5	;RP0=0, select bank0
  4647  0246  1303               	bcf	3,6	;RP1=0, select bank0
  4648  0247  00A7               	movwf	___llmod@dividend+3
  4649  0248  0872               	movf	?___lldiv+2,w
  4650  0249  00A6               	movwf	___llmod@dividend+2
  4651  024A  0871               	movf	?___lldiv+1,w
  4652  024B  00A5               	movwf	___llmod@dividend+1
  4653  024C  0870               	movf	?___lldiv,w
  4654  024D  00A4               	movwf	___llmod@dividend
  4655  024E  120A  158A  2425  120A  118A  	fcall	___llmod
  4656  0253  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0254  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0255  0820               	movf	?___llmod,w
  4659  0256  3E30               	addlw	48
  4660  0257  00B4               	movwf	??_sprintf+1
  4661  0258  0834               	movf	??_sprintf+1,w
  4662  0259  00C3               	movwf	sprintf@c
  4663                           
  4664                           ;doprnt.c: 1532: }
  4665                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4666  025A  0843               	movf	sprintf@c,w
  4667  025B  00B3               	movwf	??_sprintf
  4668  025C  083E               	movf	sprintf@sp,w
  4669  025D  0084               	movwf	4
  4670  025E  0833               	movf	??_sprintf,w
  4671  025F  1383               	bcf	3,7	;select IRP bank0
  4672  0260  0080               	movwf	0
  4673  0261  3001               	movlw	1
  4674  0262  00B3               	movwf	??_sprintf
  4675  0263  0833               	movf	??_sprintf,w
  4676  0264  07BE               	addwf	sprintf@sp,f
  4677  0265                     i1l2283:	
  4678  0265  30FF               	movlw	255
  4679  0266  07C1               	addwf	sprintf@prec,f
  4680  0267  1803               	skipnc
  4681  0268  0AC2               	incf	sprintf@prec+1,f
  4682  0269  30FF               	movlw	255
  4683  026A  07C2               	addwf	sprintf@prec+1,f
  4684  026B  30FF               	movlw	255
  4685  026C  0642               	xorwf	sprintf@prec+1,w
  4686  026D  1D03               	skipz
  4687  026E  2A71               	goto	u276_25
  4688  026F  30FF               	movlw	255
  4689  0270  0641               	xorwf	sprintf@prec,w
  4690  0271                     u276_25:	
  4691  0271  1903               	btfsc	3,2
  4692  0272  2844               	goto	i1l2285
  4693  0273  2A0B               	goto	i1l2277
  4694  0274                     i1l2287:	
  4695                           ;doprnt.c: 1534: }
  4696                           ;doprnt.c: 1542: }
  4697                           ;doprnt.c: 1544: alldone:
  4698                           
  4699                           
  4700                           ;doprnt.c: 1547: *sp = 0;
  4701  0274  083E               	movf	sprintf@sp,w
  4702  0275  0084               	movwf	4
  4703  0276  1383               	bcf	3,7	;select IRP bank0
  4704  0277  0180               	clrf	0
  4705  0278  0008               	return
  4706  0279                     __end_of_sprintf:	
  4707                           ;doprnt.c: 1549: return 0;
  4708                           ;	Return value of _sprintf is never used
  4709                           
  4710                           
  4711                           	psect	text21
  4712  07F2                     __ptext21:	
  4713 ;; *************** function _isdigit *****************
  4714 ;; Defined at:
  4715 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  c               1    wreg     unsigned char 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  c               1    1[COMMON] unsigned char 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;		None               void
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4729 ;;      Params:         0       0       0       0       0
  4730 ;;      Locals:         2       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0
  4732 ;;      Totals:         2       0       0       0       0
  4733 ;;Total ram usage:        2 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_sprintf
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _isdigit
  4744  07F2                     _isdigit:	
  4745                           
  4746                           ;incstack = 0
  4747 ;; hardware stack exceeded
  4748                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4749                           ;isdigit@c stored from wreg
  4750  07F2  00F1               	movwf	isdigit@c
  4751  07F3  01F0               	clrf	_isdigit$879
  4752  07F4  303A               	movlw	58
  4753  07F5  0271               	subwf	isdigit@c,w
  4754  07F6  1803               	skipnc
  4755  07F7  2FFE               	goto	i1l2015
  4756  07F8  3030               	movlw	48
  4757  07F9  0271               	subwf	isdigit@c,w
  4758  07FA  1C03               	skipc
  4759  07FB  2FFE               	goto	i1l2015
  4760  07FC  01F0               	clrf	_isdigit$879
  4761  07FD  0AF0               	incf	_isdigit$879,f
  4762  07FE                     i1l2015:	
  4763  07FE  0C70               	rrf	_isdigit$879,w
  4764  07FF  0008               	return
  4765  0800                     __end_of_isdigit:	
  4766                           
  4767                           	psect	text22
  4768  0960                     __ptext22:	
  4769 ;; *************** function ___wmul *****************
  4770 ;; Defined at:
  4771 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;  multiplier      2    0[COMMON] unsigned int 
  4774 ;;  multiplicand    2    2[COMMON] unsigned int 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  product         2    4[COMMON] unsigned int 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  2    0[COMMON] unsigned int 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4786 ;;      Params:         4       0       0       0       0
  4787 ;;      Locals:         2       0       0       0       0
  4788 ;;      Temps:          0       0       0       0       0
  4789 ;;      Totals:         6       0       0       0       0
  4790 ;;Total ram usage:        6 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; This function calls:
  4793 ;;		Nothing
  4794 ;; This function is called by:
  4795 ;;		_sprintf
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function ___wmul
  4801  0960                     ___wmul:	
  4802                           
  4803                           ;incstack = 0
  4804 ;; hardware stack exceeded
  4805                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4806  0960  01F4               	clrf	___wmul@product
  4807  0961  01F5               	clrf	___wmul@product+1
  4808  0962                     i1l2021:	
  4809  0962  1C70               	btfss	___wmul@multiplier,0
  4810  0963  296A               	goto	i1l359
  4811  0964  0872               	movf	___wmul@multiplicand,w
  4812  0965  07F4               	addwf	___wmul@product,f
  4813  0966  1803               	skipnc
  4814  0967  0AF5               	incf	___wmul@product+1,f
  4815  0968  0873               	movf	___wmul@multiplicand+1,w
  4816  0969  07F5               	addwf	___wmul@product+1,f
  4817  096A                     i1l359:	
  4818  096A  3001               	movlw	1
  4819  096B                     u216_25:	
  4820  096B  1003               	clrc
  4821  096C  0DF2               	rlf	___wmul@multiplicand,f
  4822  096D  0DF3               	rlf	___wmul@multiplicand+1,f
  4823  096E  3EFF               	addlw	-1
  4824  096F  1D03               	skipz
  4825  0970  296B               	goto	u216_25
  4826  0971  3001               	movlw	1
  4827  0972                     u217_25:	
  4828  0972  1003               	clrc
  4829  0973  0CF1               	rrf	___wmul@multiplier+1,f
  4830  0974  0CF0               	rrf	___wmul@multiplier,f
  4831  0975  3EFF               	addlw	-1
  4832  0976  1D03               	skipz
  4833  0977  2972               	goto	u217_25
  4834  0978  0871               	movf	___wmul@multiplier+1,w
  4835  0979  0470               	iorwf	___wmul@multiplier,w
  4836  097A  1D03               	skipz
  4837  097B  2962               	goto	i1l2021
  4838  097C  0875               	movf	___wmul@product+1,w
  4839  097D  01F1               	clrf	?___wmul+1
  4840  097E  07F1               	addwf	?___wmul+1,f
  4841  097F  0874               	movf	___wmul@product,w
  4842  0980  01F0               	clrf	?___wmul
  4843  0981  07F0               	addwf	?___wmul,f
  4844  0982  0008               	return
  4845  0983                     __end_of___wmul:	
  4846                           
  4847                           	psect	text23
  4848  0C25                     __ptext23:	
  4849 ;; *************** function ___llmod *****************
  4850 ;; Defined at:
  4851 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  divisor         4    0[BANK0 ] unsigned long 
  4854 ;;  dividend        4    4[BANK0 ] unsigned long 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  counter         1    9[BANK0 ] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  4    0[BANK0 ] unsigned long 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4866 ;;      Params:         0       8       0       0       0
  4867 ;;      Locals:         0       1       0       0       0
  4868 ;;      Temps:          0       1       0       0       0
  4869 ;;      Totals:         0      10       0       0       0
  4870 ;;Total ram usage:       10 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_sprintf
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function ___llmod
  4881  0C25                     ___llmod:	
  4882                           
  4883                           ;incstack = 0
  4884 ;; hardware stack exceeded
  4885                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4886  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  4887  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  4888  0C27  0823               	movf	___llmod@divisor+3,w
  4889  0C28  0422               	iorwf	___llmod@divisor+2,w
  4890  0C29  0421               	iorwf	___llmod@divisor+1,w
  4891  0C2A  0420               	iorwf	___llmod@divisor,w
  4892  0C2B  1903               	skipnz
  4893  0C2C  2C6A               	goto	i1l2143
  4894  0C2D  01A9               	clrf	___llmod@counter
  4895  0C2E  0AA9               	incf	___llmod@counter,f
  4896  0C2F                     i1l2133:	
  4897  0C2F  1BA3               	btfsc	___llmod@divisor+3,7
  4898  0C30  2C3F               	goto	i1l2135
  4899  0C31  3001               	movlw	1
  4900  0C32  00A8               	movwf	??___llmod
  4901  0C33                     u251_25:	
  4902  0C33  1003               	clrc
  4903  0C34  0DA0               	rlf	___llmod@divisor,f
  4904  0C35  0DA1               	rlf	___llmod@divisor+1,f
  4905  0C36  0DA2               	rlf	___llmod@divisor+2,f
  4906  0C37  0DA3               	rlf	___llmod@divisor+3,f
  4907  0C38  0BA8               	decfsz	??___llmod,f
  4908  0C39  2C33               	goto	u251_25
  4909  0C3A  3001               	movlw	1
  4910  0C3B  00A8               	movwf	??___llmod
  4911  0C3C  0828               	movf	??___llmod,w
  4912  0C3D  07A9               	addwf	___llmod@counter,f
  4913  0C3E  2C2F               	goto	i1l2133
  4914  0C3F                     i1l2135:	
  4915  0C3F  0823               	movf	___llmod@divisor+3,w
  4916  0C40  0227               	subwf	___llmod@dividend+3,w
  4917  0C41  1D03               	skipz
  4918  0C42  2C4D               	goto	u253_25
  4919  0C43  0822               	movf	___llmod@divisor+2,w
  4920  0C44  0226               	subwf	___llmod@dividend+2,w
  4921  0C45  1D03               	skipz
  4922  0C46  2C4D               	goto	u253_25
  4923  0C47  0821               	movf	___llmod@divisor+1,w
  4924  0C48  0225               	subwf	___llmod@dividend+1,w
  4925  0C49  1D03               	skipz
  4926  0C4A  2C4D               	goto	u253_25
  4927  0C4B  0820               	movf	___llmod@divisor,w
  4928  0C4C  0224               	subwf	___llmod@dividend,w
  4929  0C4D                     u253_25:	
  4930  0C4D  1C03               	skipc
  4931  0C4E  2C5D               	goto	i1l2139
  4932  0C4F  0820               	movf	___llmod@divisor,w
  4933  0C50  02A4               	subwf	___llmod@dividend,f
  4934  0C51  0821               	movf	___llmod@divisor+1,w
  4935  0C52  1C03               	skipc
  4936  0C53  0F21               	incfsz	___llmod@divisor+1,w
  4937  0C54  02A5               	subwf	___llmod@dividend+1,f
  4938  0C55  0822               	movf	___llmod@divisor+2,w
  4939  0C56  1C03               	skipc
  4940  0C57  0F22               	incfsz	___llmod@divisor+2,w
  4941  0C58  02A6               	subwf	___llmod@dividend+2,f
  4942  0C59  0823               	movf	___llmod@divisor+3,w
  4943  0C5A  1C03               	skipc
  4944  0C5B  0F23               	incfsz	___llmod@divisor+3,w
  4945  0C5C  02A7               	subwf	___llmod@dividend+3,f
  4946  0C5D                     i1l2139:	
  4947  0C5D  3001               	movlw	1
  4948  0C5E                     u254_25:	
  4949  0C5E  1003               	clrc
  4950  0C5F  0CA3               	rrf	___llmod@divisor+3,f
  4951  0C60  0CA2               	rrf	___llmod@divisor+2,f
  4952  0C61  0CA1               	rrf	___llmod@divisor+1,f
  4953  0C62  0CA0               	rrf	___llmod@divisor,f
  4954  0C63  3EFF               	addlw	-1
  4955  0C64  1D03               	skipz
  4956  0C65  2C5E               	goto	u254_25
  4957  0C66  3001               	movlw	1
  4958  0C67  02A9               	subwf	___llmod@counter,f
  4959  0C68  1D03               	btfss	3,2
  4960  0C69  2C3F               	goto	i1l2135
  4961  0C6A                     i1l2143:	
  4962  0C6A  0827               	movf	___llmod@dividend+3,w
  4963  0C6B  00A3               	movwf	?___llmod+3
  4964  0C6C  0826               	movf	___llmod@dividend+2,w
  4965  0C6D  00A2               	movwf	?___llmod+2
  4966  0C6E  0825               	movf	___llmod@dividend+1,w
  4967  0C6F  00A1               	movwf	?___llmod+1
  4968  0C70  0824               	movf	___llmod@dividend,w
  4969  0C71  00A0               	movwf	?___llmod
  4970  0C72  0008               	return
  4971  0C73                     __end_of___llmod:	
  4972                           
  4973                           	psect	text24
  4974  0E2B                     __ptext24:	
  4975 ;; *************** function ___lldiv *****************
  4976 ;; Defined at:
  4977 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  divisor         4    0[COMMON] unsigned long 
  4980 ;;  dividend        4    4[COMMON] unsigned long 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  quotient        4    9[COMMON] unsigned long 
  4983 ;;  counter         1   13[COMMON] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  4    0[COMMON] unsigned long 
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4993 ;;      Params:         8       0       0       0       0
  4994 ;;      Locals:         5       0       0       0       0
  4995 ;;      Temps:          1       0       0       0       0
  4996 ;;      Totals:        14       0       0       0       0
  4997 ;;Total ram usage:       14 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_sprintf
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function ___lldiv
  5008  0E2B                     ___lldiv:	
  5009                           
  5010                           ;incstack = 0
  5011 ;; hardware stack exceeded
  5012                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5013  0E2B  3000               	movlw	0
  5014  0E2C  00FC               	movwf	___lldiv@quotient+3
  5015  0E2D  3000               	movlw	0
  5016  0E2E  00FB               	movwf	___lldiv@quotient+2
  5017  0E2F  3000               	movlw	0
  5018  0E30  00FA               	movwf	___lldiv@quotient+1
  5019  0E31  3000               	movlw	0
  5020  0E32  00F9               	movwf	___lldiv@quotient
  5021  0E33  0873               	movf	___lldiv@divisor+3,w
  5022  0E34  0472               	iorwf	___lldiv@divisor+2,w
  5023  0E35  0471               	iorwf	___lldiv@divisor+1,w
  5024  0E36  0470               	iorwf	___lldiv@divisor,w
  5025  0E37  1903               	skipnz
  5026  0E38  2E80               	goto	i1l2123
  5027  0E39  01FD               	clrf	___lldiv@counter
  5028  0E3A  0AFD               	incf	___lldiv@counter,f
  5029  0E3B                     i1l2109:	
  5030  0E3B  1BF3               	btfsc	___lldiv@divisor+3,7
  5031  0E3C  2E4B               	goto	i1l2111
  5032  0E3D  3001               	movlw	1
  5033  0E3E  00F8               	movwf	??___lldiv
  5034  0E3F                     u244_25:	
  5035  0E3F  1003               	clrc
  5036  0E40  0DF0               	rlf	___lldiv@divisor,f
  5037  0E41  0DF1               	rlf	___lldiv@divisor+1,f
  5038  0E42  0DF2               	rlf	___lldiv@divisor+2,f
  5039  0E43  0DF3               	rlf	___lldiv@divisor+3,f
  5040  0E44  0BF8               	decfsz	??___lldiv,f
  5041  0E45  2E3F               	goto	u244_25
  5042  0E46  3001               	movlw	1
  5043  0E47  00F8               	movwf	??___lldiv
  5044  0E48  0878               	movf	??___lldiv,w
  5045  0E49  07FD               	addwf	___lldiv@counter,f
  5046  0E4A  2E3B               	goto	i1l2109
  5047  0E4B                     i1l2111:	
  5048  0E4B  3001               	movlw	1
  5049  0E4C  00F8               	movwf	??___lldiv
  5050  0E4D                     u246_25:	
  5051  0E4D  1003               	clrc
  5052  0E4E  0DF9               	rlf	___lldiv@quotient,f
  5053  0E4F  0DFA               	rlf	___lldiv@quotient+1,f
  5054  0E50  0DFB               	rlf	___lldiv@quotient+2,f
  5055  0E51  0DFC               	rlf	___lldiv@quotient+3,f
  5056  0E52  0BF8               	decfsz	??___lldiv,f
  5057  0E53  2E4D               	goto	u246_25
  5058  0E54  0873               	movf	___lldiv@divisor+3,w
  5059  0E55  0277               	subwf	___lldiv@dividend+3,w
  5060  0E56  1D03               	skipz
  5061  0E57  2E62               	goto	u247_25
  5062  0E58  0872               	movf	___lldiv@divisor+2,w
  5063  0E59  0276               	subwf	___lldiv@dividend+2,w
  5064  0E5A  1D03               	skipz
  5065  0E5B  2E62               	goto	u247_25
  5066  0E5C  0871               	movf	___lldiv@divisor+1,w
  5067  0E5D  0275               	subwf	___lldiv@dividend+1,w
  5068  0E5E  1D03               	skipz
  5069  0E5F  2E62               	goto	u247_25
  5070  0E60  0870               	movf	___lldiv@divisor,w
  5071  0E61  0274               	subwf	___lldiv@dividend,w
  5072  0E62                     u247_25:	
  5073  0E62  1C03               	skipc
  5074  0E63  2E73               	goto	i1l2119
  5075  0E64  0870               	movf	___lldiv@divisor,w
  5076  0E65  02F4               	subwf	___lldiv@dividend,f
  5077  0E66  0871               	movf	___lldiv@divisor+1,w
  5078  0E67  1C03               	skipc
  5079  0E68  0F71               	incfsz	___lldiv@divisor+1,w
  5080  0E69  02F5               	subwf	___lldiv@dividend+1,f
  5081  0E6A  0872               	movf	___lldiv@divisor+2,w
  5082  0E6B  1C03               	skipc
  5083  0E6C  0F72               	incfsz	___lldiv@divisor+2,w
  5084  0E6D  02F6               	subwf	___lldiv@dividend+2,f
  5085  0E6E  0873               	movf	___lldiv@divisor+3,w
  5086  0E6F  1C03               	skipc
  5087  0E70  0F73               	incfsz	___lldiv@divisor+3,w
  5088  0E71  02F7               	subwf	___lldiv@dividend+3,f
  5089  0E72  1479               	bsf	___lldiv@quotient,0
  5090  0E73                     i1l2119:	
  5091  0E73  3001               	movlw	1
  5092  0E74                     u248_25:	
  5093  0E74  1003               	clrc
  5094  0E75  0CF3               	rrf	___lldiv@divisor+3,f
  5095  0E76  0CF2               	rrf	___lldiv@divisor+2,f
  5096  0E77  0CF1               	rrf	___lldiv@divisor+1,f
  5097  0E78  0CF0               	rrf	___lldiv@divisor,f
  5098  0E79  3EFF               	addlw	-1
  5099  0E7A  1D03               	skipz
  5100  0E7B  2E74               	goto	u248_25
  5101  0E7C  3001               	movlw	1
  5102  0E7D  02FD               	subwf	___lldiv@counter,f
  5103  0E7E  1D03               	btfss	3,2
  5104  0E7F  2E4B               	goto	i1l2111
  5105  0E80                     i1l2123:	
  5106  0E80  087C               	movf	___lldiv@quotient+3,w
  5107  0E81  00F3               	movwf	?___lldiv+3
  5108  0E82  087B               	movf	___lldiv@quotient+2,w
  5109  0E83  00F2               	movwf	?___lldiv+2
  5110  0E84  087A               	movf	___lldiv@quotient+1,w
  5111  0E85  00F1               	movwf	?___lldiv+1
  5112  0E86  0879               	movf	___lldiv@quotient,w
  5113  0E87  00F0               	movwf	?___lldiv
  5114  0E88  0008               	return
  5115  0E89                     __end_of___lldiv:	
  5116                           
  5117                           	psect	text25
  5118  09A6                     __ptext25:	
  5119 ;; *************** function ___lltoft *****************
  5120 ;; Defined at:
  5121 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  c               4    8[COMMON] unsigned long 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  exp             1   13[COMMON] unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  3    8[COMMON] float 
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0, pclath, cstack
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5135 ;;      Params:         4       0       0       0       0
  5136 ;;      Locals:         1       0       0       0       0
  5137 ;;      Temps:          1       0       0       0       0
  5138 ;;      Totals:         6       0       0       0       0
  5139 ;;Total ram usage:        6 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    1
  5142 ;; This function calls:
  5143 ;;		___ftpack
  5144 ;; This function is called by:
  5145 ;;		_ftoa
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function ___lltoft
  5151  09A6                     ___lltoft:	
  5152                           
  5153                           ;incstack = 0
  5154 ;; hardware stack exceeded
  5155                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5156  09A6  308E               	movlw	142
  5157  09A7  00FC               	movwf	??___lltoft
  5158  09A8  087C               	movf	??___lltoft,w
  5159  09A9  00FD               	movwf	___lltoft@exp
  5160  09AA                     i1l2423:	
  5161  09AA  30FF               	movlw	255
  5162  09AB  057B               	andwf	___lltoft@c+3,w
  5163  09AC  1903               	btfsc	3,2
  5164  09AD  29BC               	goto	i1l2425
  5165  09AE  3001               	movlw	1
  5166  09AF                     u308_25:	
  5167  09AF  1003               	clrc
  5168  09B0  0CFB               	rrf	___lltoft@c+3,f
  5169  09B1  0CFA               	rrf	___lltoft@c+2,f
  5170  09B2  0CF9               	rrf	___lltoft@c+1,f
  5171  09B3  0CF8               	rrf	___lltoft@c,f
  5172  09B4  3EFF               	addlw	-1
  5173  09B5  1D03               	skipz
  5174  09B6  29AF               	goto	u308_25
  5175  09B7  3001               	movlw	1
  5176  09B8  00FC               	movwf	??___lltoft
  5177  09B9  087C               	movf	??___lltoft,w
  5178  09BA  07FD               	addwf	___lltoft@exp,f
  5179  09BB  29AA               	goto	i1l2423
  5180  09BC                     i1l2425:	
  5181  09BC  0878               	movf	___lltoft@c,w
  5182  09BD  00F0               	movwf	___ftpack@arg
  5183  09BE  0879               	movf	___lltoft@c+1,w
  5184  09BF  00F1               	movwf	___ftpack@arg+1
  5185  09C0  087A               	movf	___lltoft@c+2,w
  5186  09C1  00F2               	movwf	___ftpack@arg+2
  5187  09C2  087D               	movf	___lltoft@exp,w
  5188  09C3  00FC               	movwf	??___lltoft
  5189  09C4  087C               	movf	??___lltoft,w
  5190  09C5  00F3               	movwf	___ftpack@exp
  5191  09C6  01F4               	clrf	___ftpack@sign
  5192  09C7  120A  118A  278A   	fcall	___ftpack
  5193  09CA  0870               	movf	?___ftpack,w
  5194  09CB  00F8               	movwf	?___lltoft
  5195  09CC  0871               	movf	?___ftpack+1,w
  5196  09CD  00F9               	movwf	?___lltoft+1
  5197  09CE  0872               	movf	?___ftpack+2,w
  5198  09CF  00FA               	movwf	?___lltoft+2
  5199  09D0  0008               	return
  5200  09D1                     __end_of___lltoft:	
  5201                           
  5202                           	psect	text26
  5203  0F72                     __ptext26:	
  5204 ;; *************** function ___fttol *****************
  5205 ;; Defined at:
  5206 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  f1              3   16[BANK0 ] float 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  lval            4   25[BANK0 ] unsigned long 
  5211 ;;  exp1            1   29[BANK0 ] unsigned char 
  5212 ;;  sign1           1   24[BANK0 ] unsigned char 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  4   16[BANK0 ] long 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5222 ;;      Params:         0       4       0       0       0
  5223 ;;      Locals:         0       6       0       0       0
  5224 ;;      Temps:          0       4       0       0       0
  5225 ;;      Totals:         0      14       0       0       0
  5226 ;;Total ram usage:       14 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_ISR
  5232 ;;		_ftoa
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           
  5237                           ;psect for function ___fttol
  5238  0F72                     ___fttol:	
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5242  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  5243  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  5244  0F74  0830               	movf	___fttol@f1,w
  5245  0F75  00B4               	movwf	??___fttol
  5246  0F76  0831               	movf	___fttol@f1+1,w
  5247  0F77  00B5               	movwf	??___fttol+1
  5248  0F78  0832               	movf	___fttol@f1+2,w
  5249  0F79  00B6               	movwf	??___fttol+2
  5250  0F7A  1003               	clrc
  5251  0F7B  0D35               	rlf	??___fttol+1,w
  5252  0F7C  0D36               	rlf	??___fttol+2,w
  5253  0F7D  00B7               	movwf	??___fttol+3
  5254  0F7E  0837               	movf	??___fttol+3,w
  5255  0F7F  00BD               	movwf	___fttol@exp1
  5256  0F80  08BD               	movf	___fttol@exp1,f
  5257  0F81  1D03               	skipz
  5258  0F82  2F8C               	goto	i1l2381
  5259  0F83  3000               	movlw	0
  5260  0F84  00B3               	movwf	?___fttol+3
  5261  0F85  3000               	movlw	0
  5262  0F86  00B2               	movwf	?___fttol+2
  5263  0F87  3000               	movlw	0
  5264  0F88  00B1               	movwf	?___fttol+1
  5265  0F89  3000               	movlw	0
  5266  0F8A  00B0               	movwf	?___fttol
  5267  0F8B  0008               	return
  5268  0F8C                     i1l2381:	
  5269  0F8C  0830               	movf	___fttol@f1,w
  5270  0F8D  00B4               	movwf	??___fttol
  5271  0F8E  0831               	movf	___fttol@f1+1,w
  5272  0F8F  00B5               	movwf	??___fttol+1
  5273  0F90  0832               	movf	___fttol@f1+2,w
  5274  0F91  00B6               	movwf	??___fttol+2
  5275  0F92  3017               	movlw	23
  5276  0F93                     u299_25:	
  5277  0F93  1003               	clrc
  5278  0F94  0CB6               	rrf	??___fttol+2,f
  5279  0F95  0CB5               	rrf	??___fttol+1,f
  5280  0F96  0CB4               	rrf	??___fttol,f
  5281  0F97  3EFF               	addlw	-1
  5282  0F98  1D03               	skipz
  5283  0F99  2F93               	goto	u299_25
  5284  0F9A  0834               	movf	??___fttol,w
  5285  0F9B  00B7               	movwf	??___fttol+3
  5286  0F9C  0837               	movf	??___fttol+3,w
  5287  0F9D  00B8               	movwf	___fttol@sign1
  5288  0F9E  17B1               	bsf	___fttol@f1+1,7
  5289  0F9F  30FF               	movlw	255
  5290  0FA0  05B0               	andwf	___fttol@f1,f
  5291  0FA1  30FF               	movlw	255
  5292  0FA2  05B1               	andwf	___fttol@f1+1,f
  5293  0FA3  3000               	movlw	0
  5294  0FA4  05B2               	andwf	___fttol@f1+2,f
  5295  0FA5  0830               	movf	___fttol@f1,w
  5296  0FA6  00B9               	movwf	___fttol@lval
  5297  0FA7  0831               	movf	___fttol@f1+1,w
  5298  0FA8  00BA               	movwf	___fttol@lval+1
  5299  0FA9  0832               	movf	___fttol@f1+2,w
  5300  0FAA  00BB               	movwf	___fttol@lval+2
  5301  0FAB  01BC               	clrf	___fttol@lval+3
  5302  0FAC  308E               	movlw	142
  5303  0FAD  02BD               	subwf	___fttol@exp1,f
  5304  0FAE  1FBD               	btfss	___fttol@exp1,7
  5305  0FAF  2FCE               	goto	i1l2401
  5306  0FB0  083D               	movf	___fttol@exp1,w
  5307  0FB1  3A80               	xorlw	128
  5308  0FB2  3E8F               	addlw	143
  5309  0FB3  1803               	skipnc
  5310  0FB4  2FBE               	goto	i1l2399
  5311  0FB5  3000               	movlw	0
  5312  0FB6  00B3               	movwf	?___fttol+3
  5313  0FB7  3000               	movlw	0
  5314  0FB8  00B2               	movwf	?___fttol+2
  5315  0FB9  3000               	movlw	0
  5316  0FBA  00B1               	movwf	?___fttol+1
  5317  0FBB  3000               	movlw	0
  5318  0FBC  00B0               	movwf	?___fttol
  5319  0FBD  0008               	return
  5320  0FBE                     i1l2399:	
  5321  0FBE  3001               	movlw	1
  5322  0FBF                     u302_25:	
  5323  0FBF  1003               	clrc
  5324  0FC0  0CBC               	rrf	___fttol@lval+3,f
  5325  0FC1  0CBB               	rrf	___fttol@lval+2,f
  5326  0FC2  0CBA               	rrf	___fttol@lval+1,f
  5327  0FC3  0CB9               	rrf	___fttol@lval,f
  5328  0FC4  3EFF               	addlw	-1
  5329  0FC5  1D03               	skipz
  5330  0FC6  2FBF               	goto	u302_25
  5331  0FC7  3001               	movlw	1
  5332  0FC8  00B4               	movwf	??___fttol
  5333  0FC9  0834               	movf	??___fttol,w
  5334  0FCA  07BD               	addwf	___fttol@exp1,f
  5335  0FCB  1903               	btfsc	3,2
  5336  0FCC  2FE9               	goto	i1l2411
  5337  0FCD  2FBE               	goto	i1l2399
  5338  0FCE                     i1l2401:	
  5339  0FCE  3018               	movlw	24
  5340  0FCF  023D               	subwf	___fttol@exp1,w
  5341  0FD0  1C03               	skipc
  5342  0FD1  2FE6               	goto	i1l2409
  5343  0FD2  3000               	movlw	0
  5344  0FD3  00B3               	movwf	?___fttol+3
  5345  0FD4  3000               	movlw	0
  5346  0FD5  00B2               	movwf	?___fttol+2
  5347  0FD6  3000               	movlw	0
  5348  0FD7  00B1               	movwf	?___fttol+1
  5349  0FD8  3000               	movlw	0
  5350  0FD9  00B0               	movwf	?___fttol
  5351  0FDA  0008               	return
  5352  0FDB                     i1l2407:	
  5353  0FDB  3001               	movlw	1
  5354  0FDC  00B4               	movwf	??___fttol
  5355  0FDD                     u305_25:	
  5356  0FDD  1003               	clrc
  5357  0FDE  0DB9               	rlf	___fttol@lval,f
  5358  0FDF  0DBA               	rlf	___fttol@lval+1,f
  5359  0FE0  0DBB               	rlf	___fttol@lval+2,f
  5360  0FE1  0DBC               	rlf	___fttol@lval+3,f
  5361  0FE2  0BB4               	decfsz	??___fttol,f
  5362  0FE3  2FDD               	goto	u305_25
  5363  0FE4  3001               	movlw	1
  5364  0FE5  02BD               	subwf	___fttol@exp1,f
  5365  0FE6                     i1l2409:	
  5366  0FE6  08BD               	movf	___fttol@exp1,f
  5367  0FE7  1D03               	skipz
  5368  0FE8  2FDB               	goto	i1l2407
  5369  0FE9                     i1l2411:	
  5370  0FE9  0838               	movf	___fttol@sign1,w
  5371  0FEA  1903               	btfsc	3,2
  5372  0FEB  2FF7               	goto	i1l2415
  5373  0FEC  09B9               	comf	___fttol@lval,f
  5374  0FED  09BA               	comf	___fttol@lval+1,f
  5375  0FEE  09BB               	comf	___fttol@lval+2,f
  5376  0FEF  09BC               	comf	___fttol@lval+3,f
  5377  0FF0  0AB9               	incf	___fttol@lval,f
  5378  0FF1  1903               	skipnz
  5379  0FF2  0ABA               	incf	___fttol@lval+1,f
  5380  0FF3  1903               	skipnz
  5381  0FF4  0ABB               	incf	___fttol@lval+2,f
  5382  0FF5  1903               	skipnz
  5383  0FF6  0ABC               	incf	___fttol@lval+3,f
  5384  0FF7                     i1l2415:	
  5385  0FF7  083C               	movf	___fttol@lval+3,w
  5386  0FF8  00B3               	movwf	?___fttol+3
  5387  0FF9  083B               	movf	___fttol@lval+2,w
  5388  0FFA  00B2               	movwf	?___fttol+2
  5389  0FFB  083A               	movf	___fttol@lval+1,w
  5390  0FFC  00B1               	movwf	?___fttol+1
  5391  0FFD  0839               	movf	___fttol@lval,w
  5392  0FFE  00B0               	movwf	?___fttol
  5393  0FFF  0008               	return
  5394  1000                     __end_of___fttol:	
  5395                           
  5396                           	psect	text27
  5397  08E4                     __ptext27:	
  5398 ;; *************** function ___ftsub *****************
  5399 ;; Defined at:
  5400 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;  f2              3    7[BANK0 ] float 
  5403 ;;  f1              3   10[BANK0 ] float 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  3    7[BANK0 ] float 
  5408 ;; Registers used:
  5409 ;;		wreg, status,2, status,0, pclath, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5415 ;;      Params:         0       6       0       0       0
  5416 ;;      Locals:         0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0
  5418 ;;      Totals:         0       6       0       0       0
  5419 ;;Total ram usage:        6 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    2
  5422 ;; This function calls:
  5423 ;;		___ftadd
  5424 ;; This function is called by:
  5425 ;;		_ftoa
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function ___ftsub
  5431  08E4                     ___ftsub:	
  5432                           
  5433                           ;incstack = 0
  5434 ;; hardware stack exceeded
  5435                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5436  08E4  3080               	movlw	128
  5437  08E5  1283               	bcf	3,5	;RP0=0, select bank0
  5438  08E6  1303               	bcf	3,6	;RP1=0, select bank0
  5439  08E7  06A9               	xorwf	___ftsub@f2+2,f
  5440  08E8  082A               	movf	___ftsub@f1,w
  5441  08E9  00F8               	movwf	___ftadd@f1
  5442  08EA  082B               	movf	___ftsub@f1+1,w
  5443  08EB  00F9               	movwf	___ftadd@f1+1
  5444  08EC  082C               	movf	___ftsub@f1+2,w
  5445  08ED  00FA               	movwf	___ftadd@f1+2
  5446  08EE  0827               	movf	___ftsub@f2,w
  5447  08EF  00FB               	movwf	___ftadd@f2
  5448  08F0  0828               	movf	___ftsub@f2+1,w
  5449  08F1  00FC               	movwf	___ftadd@f2+1
  5450  08F2  0829               	movf	___ftsub@f2+2,w
  5451  08F3  00FD               	movwf	___ftadd@f2+2
  5452  08F4  120A  118A  243E   	fcall	___ftadd
  5453  08F7  0878               	movf	?___ftadd,w
  5454  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  5455  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  5456  08FA  00A7               	movwf	?___ftsub
  5457  08FB  0879               	movf	?___ftadd+1,w
  5458  08FC  00A8               	movwf	?___ftsub+1
  5459  08FD  087A               	movf	?___ftadd+2,w
  5460  08FE  00A9               	movwf	?___ftsub+2
  5461  08FF  0008               	return
  5462  0900                     __end_of___ftsub:	
  5463                           
  5464                           	psect	text28
  5465  043E                     __ptext28:	
  5466 ;; *************** function ___ftadd *****************
  5467 ;; Defined at:
  5468 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  f1              3    8[COMMON] float 
  5471 ;;  f2              3   11[COMMON] float 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  exp1            1    6[BANK0 ] unsigned char 
  5474 ;;  exp2            1    5[BANK0 ] unsigned char 
  5475 ;;  sign            1    4[BANK0 ] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  3    8[COMMON] float 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0, pclath, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5485 ;;      Params:         6       0       0       0       0
  5486 ;;      Locals:         0       3       0       0       0
  5487 ;;      Temps:          0       4       0       0       0
  5488 ;;      Totals:         6       7       0       0       0
  5489 ;;Total ram usage:       13 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    1
  5492 ;; This function calls:
  5493 ;;		___ftpack
  5494 ;; This function is called by:
  5495 ;;		___ftsub
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function ___ftadd
  5501  043E                     ___ftadd:	
  5502                           
  5503                           ;incstack = 0
  5504 ;; hardware stack exceeded
  5505                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5506  043E  0878               	movf	___ftadd@f1,w
  5507  043F  1283               	bcf	3,5	;RP0=0, select bank0
  5508  0440  1303               	bcf	3,6	;RP1=0, select bank0
  5509  0441  00A0               	movwf	??___ftadd
  5510  0442  0879               	movf	___ftadd@f1+1,w
  5511  0443  00A1               	movwf	??___ftadd+1
  5512  0444  087A               	movf	___ftadd@f1+2,w
  5513  0445  00A2               	movwf	??___ftadd+2
  5514  0446  1003               	clrc
  5515  0447  0D21               	rlf	??___ftadd+1,w
  5516  0448  0D22               	rlf	??___ftadd+2,w
  5517  0449  00A3               	movwf	??___ftadd+3
  5518  044A  0823               	movf	??___ftadd+3,w
  5519  044B  00A6               	movwf	___ftadd@exp1
  5520  044C  087B               	movf	___ftadd@f2,w
  5521  044D  00A0               	movwf	??___ftadd
  5522  044E  087C               	movf	___ftadd@f2+1,w
  5523  044F  00A1               	movwf	??___ftadd+1
  5524  0450  087D               	movf	___ftadd@f2+2,w
  5525  0451  00A2               	movwf	??___ftadd+2
  5526  0452  1003               	clrc
  5527  0453  0D21               	rlf	??___ftadd+1,w
  5528  0454  0D22               	rlf	??___ftadd+2,w
  5529  0455  00A3               	movwf	??___ftadd+3
  5530  0456  0823               	movf	??___ftadd+3,w
  5531  0457  00A5               	movwf	___ftadd@exp2
  5532  0458  0826               	movf	___ftadd@exp1,w
  5533  0459  1903               	btfsc	3,2
  5534  045A  2C67               	goto	i1l2039
  5535  045B  0825               	movf	___ftadd@exp2,w
  5536  045C  0226               	subwf	___ftadd@exp1,w
  5537  045D  1803               	skipnc
  5538  045E  2C6E               	goto	i1l2043
  5539  045F  0326               	decf	___ftadd@exp1,w
  5540  0460  3AFF               	xorlw	255
  5541  0461  0725               	addwf	___ftadd@exp2,w
  5542  0462  00A0               	movwf	??___ftadd
  5543  0463  3019               	movlw	25
  5544  0464  0220               	subwf	??___ftadd,w
  5545  0465  1C03               	skipc
  5546  0466  2C6E               	goto	i1l2043
  5547  0467                     i1l2039:	
  5548  0467  087B               	movf	___ftadd@f2,w
  5549  0468  00F8               	movwf	?___ftadd
  5550  0469  087C               	movf	___ftadd@f2+1,w
  5551  046A  00F9               	movwf	?___ftadd+1
  5552  046B  087D               	movf	___ftadd@f2+2,w
  5553  046C  00FA               	movwf	?___ftadd+2
  5554  046D  0008               	return
  5555  046E                     i1l2043:	
  5556  046E  0825               	movf	___ftadd@exp2,w
  5557  046F  1903               	btfsc	3,2
  5558  0470  0008               	return
  5559  0471  0826               	movf	___ftadd@exp1,w
  5560  0472  0225               	subwf	___ftadd@exp2,w
  5561  0473  1803               	skipnc
  5562  0474  2C7D               	goto	i1l2049
  5563  0475  0325               	decf	___ftadd@exp2,w
  5564  0476  3AFF               	xorlw	255
  5565  0477  0726               	addwf	___ftadd@exp1,w
  5566  0478  00A0               	movwf	??___ftadd
  5567  0479  3019               	movlw	25
  5568  047A  0220               	subwf	??___ftadd,w
  5569  047B  1803               	btfsc	3,0
  5570  047C  0008               	return
  5571  047D                     i1l2049:	
  5572  047D  3006               	movlw	6
  5573  047E  00A0               	movwf	??___ftadd
  5574  047F  0820               	movf	??___ftadd,w
  5575  0480  00A4               	movwf	___ftadd@sign
  5576  0481  1BFA               	btfsc	___ftadd@f1+2,7
  5577  0482  17A4               	bsf	___ftadd@sign,7
  5578  0483  1BFD               	btfsc	___ftadd@f2+2,7
  5579  0484  1724               	bsf	___ftadd@sign,6
  5580  0485  17F9               	bsf	___ftadd@f1+1,7
  5581  0486  30FF               	movlw	255
  5582  0487  05F8               	andwf	___ftadd@f1,f
  5583  0488  30FF               	movlw	255
  5584  0489  05F9               	andwf	___ftadd@f1+1,f
  5585  048A  3000               	movlw	0
  5586  048B  05FA               	andwf	___ftadd@f1+2,f
  5587  048C  17FC               	bsf	___ftadd@f2+1,7
  5588  048D  30FF               	movlw	255
  5589  048E  05FB               	andwf	___ftadd@f2,f
  5590  048F  30FF               	movlw	255
  5591  0490  05FC               	andwf	___ftadd@f2+1,f
  5592  0491  3000               	movlw	0
  5593  0492  05FD               	andwf	___ftadd@f2+2,f
  5594  0493  0825               	movf	___ftadd@exp2,w
  5595  0494  0226               	subwf	___ftadd@exp1,w
  5596  0495  1803               	skipnc
  5597  0496  2CBD               	goto	i1l2071
  5598  0497                     i1l2061:	
  5599  0497  3001               	movlw	1
  5600  0498                     u228_25:	
  5601  0498  1003               	clrc
  5602  0499  0DFB               	rlf	___ftadd@f2,f
  5603  049A  0DFC               	rlf	___ftadd@f2+1,f
  5604  049B  0DFD               	rlf	___ftadd@f2+2,f
  5605  049C  3EFF               	addlw	-1
  5606  049D  1D03               	skipz
  5607  049E  2C98               	goto	u228_25
  5608  049F  3001               	movlw	1
  5609  04A0  02A5               	subwf	___ftadd@exp2,f
  5610  04A1  0825               	movf	___ftadd@exp2,w
  5611  04A2  0626               	xorwf	___ftadd@exp1,w
  5612  04A3  1903               	skipnz
  5613  04A4  2CB8               	goto	i1l2069
  5614  04A5  3001               	movlw	1
  5615  04A6  02A4               	subwf	___ftadd@sign,f
  5616  04A7  0824               	movf	___ftadd@sign,w
  5617  04A8  3907               	andlw	7
  5618  04A9  1903               	btfsc	3,2
  5619  04AA  2CB8               	goto	i1l2069
  5620  04AB  2C97               	goto	i1l2061
  5621  04AC                     i1l2067:	
  5622  04AC  3001               	movlw	1
  5623  04AD                     u231_25:	
  5624  04AD  1003               	clrc
  5625  04AE  0CFA               	rrf	___ftadd@f1+2,f
  5626  04AF  0CF9               	rrf	___ftadd@f1+1,f
  5627  04B0  0CF8               	rrf	___ftadd@f1,f
  5628  04B1  3EFF               	addlw	-1
  5629  04B2  1D03               	skipz
  5630  04B3  2CAD               	goto	u231_25
  5631  04B4  3001               	movlw	1
  5632  04B5  00A0               	movwf	??___ftadd
  5633  04B6  0820               	movf	??___ftadd,w
  5634  04B7  07A6               	addwf	___ftadd@exp1,f
  5635  04B8                     i1l2069:	
  5636  04B8  0826               	movf	___ftadd@exp1,w
  5637  04B9  0625               	xorwf	___ftadd@exp2,w
  5638  04BA  1903               	btfsc	3,2
  5639  04BB  2CE6               	goto	i1l549
  5640  04BC  2CAC               	goto	i1l2067
  5641  04BD                     i1l2071:	
  5642  04BD  0826               	movf	___ftadd@exp1,w
  5643  04BE  0225               	subwf	___ftadd@exp2,w
  5644  04BF  1803               	skipnc
  5645  04C0  2CE6               	goto	i1l549
  5646  04C1                     i1l2073:	
  5647  04C1  3001               	movlw	1
  5648  04C2                     u234_25:	
  5649  04C2  1003               	clrc
  5650  04C3  0DF8               	rlf	___ftadd@f1,f
  5651  04C4  0DF9               	rlf	___ftadd@f1+1,f
  5652  04C5  0DFA               	rlf	___ftadd@f1+2,f
  5653  04C6  3EFF               	addlw	-1
  5654  04C7  1D03               	skipz
  5655  04C8  2CC2               	goto	u234_25
  5656  04C9  3001               	movlw	1
  5657  04CA  02A6               	subwf	___ftadd@exp1,f
  5658  04CB  0825               	movf	___ftadd@exp2,w
  5659  04CC  0626               	xorwf	___ftadd@exp1,w
  5660  04CD  1903               	skipnz
  5661  04CE  2CE2               	goto	i1l2081
  5662  04CF  3001               	movlw	1
  5663  04D0  02A4               	subwf	___ftadd@sign,f
  5664  04D1  0824               	movf	___ftadd@sign,w
  5665  04D2  3907               	andlw	7
  5666  04D3  1903               	btfsc	3,2
  5667  04D4  2CE2               	goto	i1l2081
  5668  04D5  2CC1               	goto	i1l2073
  5669  04D6                     i1l2079:	
  5670  04D6  3001               	movlw	1
  5671  04D7                     u237_25:	
  5672  04D7  1003               	clrc
  5673  04D8  0CFD               	rrf	___ftadd@f2+2,f
  5674  04D9  0CFC               	rrf	___ftadd@f2+1,f
  5675  04DA  0CFB               	rrf	___ftadd@f2,f
  5676  04DB  3EFF               	addlw	-1
  5677  04DC  1D03               	skipz
  5678  04DD  2CD7               	goto	u237_25
  5679  04DE  3001               	movlw	1
  5680  04DF  00A0               	movwf	??___ftadd
  5681  04E0  0820               	movf	??___ftadd,w
  5682  04E1  07A5               	addwf	___ftadd@exp2,f
  5683  04E2                     i1l2081:	
  5684  04E2  0826               	movf	___ftadd@exp1,w
  5685  04E3  0625               	xorwf	___ftadd@exp2,w
  5686  04E4  1D03               	skipz
  5687  04E5  2CD6               	goto	i1l2079
  5688  04E6                     i1l549:	
  5689  04E6  1FA4               	btfss	___ftadd@sign,7
  5690  04E7  2CF8               	goto	i1l2085
  5691  04E8  30FF               	movlw	255
  5692  04E9  06F8               	xorwf	___ftadd@f1,f
  5693  04EA  30FF               	movlw	255
  5694  04EB  06F9               	xorwf	___ftadd@f1+1,f
  5695  04EC  30FF               	movlw	255
  5696  04ED  06FA               	xorwf	___ftadd@f1+2,f
  5697  04EE  3001               	movlw	1
  5698  04EF  07F8               	addwf	___ftadd@f1,f
  5699  04F0  3000               	movlw	0
  5700  04F1  1803               	skipnc
  5701  04F2  3001               	movlw	1
  5702  04F3  07F9               	addwf	___ftadd@f1+1,f
  5703  04F4  3000               	movlw	0
  5704  04F5  1803               	skipnc
  5705  04F6  3001               	movlw	1
  5706  04F7  07FA               	addwf	___ftadd@f1+2,f
  5707  04F8                     i1l2085:	
  5708  04F8  1F24               	btfss	___ftadd@sign,6
  5709  04F9  2D0A               	goto	i1l2089
  5710  04FA  30FF               	movlw	255
  5711  04FB  06FB               	xorwf	___ftadd@f2,f
  5712  04FC  30FF               	movlw	255
  5713  04FD  06FC               	xorwf	___ftadd@f2+1,f
  5714  04FE  30FF               	movlw	255
  5715  04FF  06FD               	xorwf	___ftadd@f2+2,f
  5716  0500  3001               	movlw	1
  5717  0501  07FB               	addwf	___ftadd@f2,f
  5718  0502  3000               	movlw	0
  5719  0503  1803               	skipnc
  5720  0504  3001               	movlw	1
  5721  0505  07FC               	addwf	___ftadd@f2+1,f
  5722  0506  3000               	movlw	0
  5723  0507  1803               	skipnc
  5724  0508  3001               	movlw	1
  5725  0509  07FD               	addwf	___ftadd@f2+2,f
  5726  050A                     i1l2089:	
  5727  050A  01A4               	clrf	___ftadd@sign
  5728  050B  0878               	movf	___ftadd@f1,w
  5729  050C  07FB               	addwf	___ftadd@f2,f
  5730  050D  0879               	movf	___ftadd@f1+1,w
  5731  050E  1103               	clrz
  5732  050F  1803               	skipnc
  5733  0510  0A79               	incf	___ftadd@f1+1,w
  5734  0511  1D03               	btfss	3,2
  5735  0512  07FC               	addwf	___ftadd@f2+1,f
  5736  0513  087A               	movf	___ftadd@f1+2,w
  5737  0514  1103               	clrz
  5738  0515  1803               	skipnc
  5739  0516  0A7A               	incf	___ftadd@f1+2,w
  5740  0517  1D03               	btfss	3,2
  5741  0518  07FD               	addwf	___ftadd@f2+2,f
  5742  0519  1FFD               	btfss	___ftadd@f2+2,7
  5743  051A  2D2D               	goto	i1l2099
  5744  051B  30FF               	movlw	255
  5745  051C  06FB               	xorwf	___ftadd@f2,f
  5746  051D  30FF               	movlw	255
  5747  051E  06FC               	xorwf	___ftadd@f2+1,f
  5748  051F  30FF               	movlw	255
  5749  0520  06FD               	xorwf	___ftadd@f2+2,f
  5750  0521  3001               	movlw	1
  5751  0522  07FB               	addwf	___ftadd@f2,f
  5752  0523  3000               	movlw	0
  5753  0524  1803               	skipnc
  5754  0525  3001               	movlw	1
  5755  0526  07FC               	addwf	___ftadd@f2+1,f
  5756  0527  3000               	movlw	0
  5757  0528  1803               	skipnc
  5758  0529  3001               	movlw	1
  5759  052A  07FD               	addwf	___ftadd@f2+2,f
  5760  052B  01A4               	clrf	___ftadd@sign
  5761  052C  0AA4               	incf	___ftadd@sign,f
  5762  052D                     i1l2099:	
  5763  052D  087B               	movf	___ftadd@f2,w
  5764  052E  00F0               	movwf	___ftpack@arg
  5765  052F  087C               	movf	___ftadd@f2+1,w
  5766  0530  00F1               	movwf	___ftpack@arg+1
  5767  0531  087D               	movf	___ftadd@f2+2,w
  5768  0532  00F2               	movwf	___ftpack@arg+2
  5769  0533  0826               	movf	___ftadd@exp1,w
  5770  0534  00A0               	movwf	??___ftadd
  5771  0535  0820               	movf	??___ftadd,w
  5772  0536  00F3               	movwf	___ftpack@exp
  5773  0537  0824               	movf	___ftadd@sign,w
  5774  0538  00A1               	movwf	??___ftadd+1
  5775  0539  0821               	movf	??___ftadd+1,w
  5776  053A  00F4               	movwf	___ftpack@sign
  5777  053B  120A  118A  278A   	fcall	___ftpack
  5778  053E  0870               	movf	?___ftpack,w
  5779  053F  00F8               	movwf	?___ftadd
  5780  0540  0871               	movf	?___ftpack+1,w
  5781  0541  00F9               	movwf	?___ftadd+1
  5782  0542  0872               	movf	?___ftpack+2,w
  5783  0543  00FA               	movwf	?___ftadd+2
  5784  0544  0008               	return
  5785  0545                     __end_of___ftadd:	
  5786                           
  5787                           	psect	text29
  5788  17CF                     __ptext29:	
  5789 ;; *************** function ___ftneg *****************
  5790 ;; Defined at:
  5791 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  f1              3    0[COMMON] float 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  3    0[COMMON] float 
  5798 ;; Registers used:
  5799 ;;		wreg
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5805 ;;      Params:         3       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0
  5808 ;;      Totals:         3       0       0       0       0
  5809 ;;Total ram usage:        3 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_ftoa
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function ___ftneg
  5820  17CF                     ___ftneg:	
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in ___ftneg: [wreg]
  5824  17CF  0872               	movf	___ftneg@f1+2,w
  5825  17D0  0471               	iorwf	___ftneg@f1+1,w
  5826  17D1  0470               	iorwf	___ftneg@f1,w
  5827  17D2  1903               	skipnz
  5828  17D3  0008               	return
  5829  17D4  3080               	movlw	128
  5830  17D5  06F2               	xorwf	___ftneg@f1+2,f
  5831  17D6  0008               	return
  5832  17D7                     __end_of___ftneg:	
  5833                           
  5834                           	psect	text30
  5835  0545                     __ptext30:	
  5836 ;; *************** function ___ftmul *****************
  5837 ;; Defined at:
  5838 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  f1              3    0[BANK0 ] float 
  5841 ;;  f2              3    3[BANK0 ] float 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  5844 ;;  sign            1   15[BANK0 ] unsigned char 
  5845 ;;  cntr            1   14[BANK0 ] unsigned char 
  5846 ;;  exp             1   10[BANK0 ] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  3    0[BANK0 ] float 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, pclath, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5856 ;;      Params:         0       6       0       0       0
  5857 ;;      Locals:         0       6       0       0       0
  5858 ;;      Temps:          0       4       0       0       0
  5859 ;;      Totals:         0      16       0       0       0
  5860 ;;Total ram usage:       16 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    1
  5863 ;; This function calls:
  5864 ;;		___ftpack
  5865 ;; This function is called by:
  5866 ;;		_ISR
  5867 ;;		_ftoa
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           
  5872                           ;psect for function ___ftmul
  5873  0545                     ___ftmul:	
  5874                           
  5875                           ;incstack = 0
  5876 ;; hardware stack exceeded
  5877                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5878  0545  1283               	bcf	3,5	;RP0=0, select bank0
  5879  0546  1303               	bcf	3,6	;RP1=0, select bank0
  5880  0547  0820               	movf	___ftmul@f1,w
  5881  0548  00A6               	movwf	??___ftmul
  5882  0549  0821               	movf	___ftmul@f1+1,w
  5883  054A  00A7               	movwf	??___ftmul+1
  5884  054B  0822               	movf	___ftmul@f1+2,w
  5885  054C  00A8               	movwf	??___ftmul+2
  5886  054D  1003               	clrc
  5887  054E  0D27               	rlf	??___ftmul+1,w
  5888  054F  0D28               	rlf	??___ftmul+2,w
  5889  0550  00A9               	movwf	??___ftmul+3
  5890  0551  0829               	movf	??___ftmul+3,w
  5891  0552  00AA               	movwf	___ftmul@exp
  5892  0553  08AA               	movf	___ftmul@exp,f
  5893  0554  1D03               	skipz
  5894  0555  2D5D               	goto	i1l2317
  5895  0556  3000               	movlw	0
  5896  0557  00A0               	movwf	?___ftmul
  5897  0558  3000               	movlw	0
  5898  0559  00A1               	movwf	?___ftmul+1
  5899  055A  3000               	movlw	0
  5900  055B  00A2               	movwf	?___ftmul+2
  5901  055C  0008               	return
  5902  055D                     i1l2317:	
  5903  055D  0823               	movf	___ftmul@f2,w
  5904  055E  00A6               	movwf	??___ftmul
  5905  055F  0824               	movf	___ftmul@f2+1,w
  5906  0560  00A7               	movwf	??___ftmul+1
  5907  0561  0825               	movf	___ftmul@f2+2,w
  5908  0562  00A8               	movwf	??___ftmul+2
  5909  0563  1003               	clrc
  5910  0564  0D27               	rlf	??___ftmul+1,w
  5911  0565  0D28               	rlf	??___ftmul+2,w
  5912  0566  00A9               	movwf	??___ftmul+3
  5913  0567  0829               	movf	??___ftmul+3,w
  5914  0568  00AF               	movwf	___ftmul@sign
  5915  0569  08AF               	movf	___ftmul@sign,f
  5916  056A  1D03               	skipz
  5917  056B  2D73               	goto	i1l2323
  5918  056C  3000               	movlw	0
  5919  056D  00A0               	movwf	?___ftmul
  5920  056E  3000               	movlw	0
  5921  056F  00A1               	movwf	?___ftmul+1
  5922  0570  3000               	movlw	0
  5923  0571  00A2               	movwf	?___ftmul+2
  5924  0572  0008               	return
  5925  0573                     i1l2323:	
  5926  0573  082F               	movf	___ftmul@sign,w
  5927  0574  3E7B               	addlw	123
  5928  0575  00A6               	movwf	??___ftmul
  5929  0576  0826               	movf	??___ftmul,w
  5930  0577  07AA               	addwf	___ftmul@exp,f
  5931  0578  0820               	movf	___ftmul@f1,w
  5932  0579  00A6               	movwf	??___ftmul
  5933  057A  0821               	movf	___ftmul@f1+1,w
  5934  057B  00A7               	movwf	??___ftmul+1
  5935  057C  0822               	movf	___ftmul@f1+2,w
  5936  057D  00A8               	movwf	??___ftmul+2
  5937  057E  3010               	movlw	16
  5938  057F                     u285_25:	
  5939  057F  1003               	clrc
  5940  0580  0CA8               	rrf	??___ftmul+2,f
  5941  0581  0CA7               	rrf	??___ftmul+1,f
  5942  0582  0CA6               	rrf	??___ftmul,f
  5943  0583  3EFF               	addlw	-1
  5944  0584  1D03               	skipz
  5945  0585  2D7F               	goto	u285_25
  5946  0586  0826               	movf	??___ftmul,w
  5947  0587  00A9               	movwf	??___ftmul+3
  5948  0588  0829               	movf	??___ftmul+3,w
  5949  0589  00AF               	movwf	___ftmul@sign
  5950  058A  0823               	movf	___ftmul@f2,w
  5951  058B  00A6               	movwf	??___ftmul
  5952  058C  0824               	movf	___ftmul@f2+1,w
  5953  058D  00A7               	movwf	??___ftmul+1
  5954  058E  0825               	movf	___ftmul@f2+2,w
  5955  058F  00A8               	movwf	??___ftmul+2
  5956  0590  3010               	movlw	16
  5957  0591                     u286_25:	
  5958  0591  1003               	clrc
  5959  0592  0CA8               	rrf	??___ftmul+2,f
  5960  0593  0CA7               	rrf	??___ftmul+1,f
  5961  0594  0CA6               	rrf	??___ftmul,f
  5962  0595  3EFF               	addlw	-1
  5963  0596  1D03               	skipz
  5964  0597  2D91               	goto	u286_25
  5965  0598  0826               	movf	??___ftmul,w
  5966  0599  00A9               	movwf	??___ftmul+3
  5967  059A  0829               	movf	??___ftmul+3,w
  5968  059B  06AF               	xorwf	___ftmul@sign,f
  5969  059C  3080               	movlw	128
  5970  059D  00A6               	movwf	??___ftmul
  5971  059E  0826               	movf	??___ftmul,w
  5972  059F  05AF               	andwf	___ftmul@sign,f
  5973  05A0  17A1               	bsf	___ftmul@f1+1,7
  5974  05A1  17A4               	bsf	___ftmul@f2+1,7
  5975  05A2  30FF               	movlw	255
  5976  05A3  05A3               	andwf	___ftmul@f2,f
  5977  05A4  30FF               	movlw	255
  5978  05A5  05A4               	andwf	___ftmul@f2+1,f
  5979  05A6  3000               	movlw	0
  5980  05A7  05A5               	andwf	___ftmul@f2+2,f
  5981  05A8  3000               	movlw	0
  5982  05A9  00AB               	movwf	___ftmul@f3_as_product
  5983  05AA  3000               	movlw	0
  5984  05AB  00AC               	movwf	___ftmul@f3_as_product+1
  5985  05AC  3000               	movlw	0
  5986  05AD  00AD               	movwf	___ftmul@f3_as_product+2
  5987  05AE  3007               	movlw	7
  5988  05AF  00A6               	movwf	??___ftmul
  5989  05B0  0826               	movf	??___ftmul,w
  5990  05B1  00AE               	movwf	___ftmul@cntr
  5991  05B2                     i1l2335:	
  5992  05B2  1C20               	btfss	___ftmul@f1,0
  5993  05B3  2DC2               	goto	i1l2339
  5994  05B4  0823               	movf	___ftmul@f2,w
  5995  05B5  07AB               	addwf	___ftmul@f3_as_product,f
  5996  05B6  0824               	movf	___ftmul@f2+1,w
  5997  05B7  1103               	clrz
  5998  05B8  1803               	skipnc
  5999  05B9  0A24               	incf	___ftmul@f2+1,w
  6000  05BA  1D03               	btfss	3,2
  6001  05BB  07AC               	addwf	___ftmul@f3_as_product+1,f
  6002  05BC  0825               	movf	___ftmul@f2+2,w
  6003  05BD  1103               	clrz
  6004  05BE  1803               	skipnc
  6005  05BF  0A25               	incf	___ftmul@f2+2,w
  6006  05C0  1D03               	btfss	3,2
  6007  05C1  07AD               	addwf	___ftmul@f3_as_product+2,f
  6008  05C2                     i1l2339:	
  6009  05C2  3001               	movlw	1
  6010  05C3                     u289_25:	
  6011  05C3  1003               	clrc
  6012  05C4  0CA2               	rrf	___ftmul@f1+2,f
  6013  05C5  0CA1               	rrf	___ftmul@f1+1,f
  6014  05C6  0CA0               	rrf	___ftmul@f1,f
  6015  05C7  3EFF               	addlw	-1
  6016  05C8  1D03               	skipz
  6017  05C9  2DC3               	goto	u289_25
  6018  05CA  3001               	movlw	1
  6019  05CB                     u290_25:	
  6020  05CB  1003               	clrc
  6021  05CC  0DA3               	rlf	___ftmul@f2,f
  6022  05CD  0DA4               	rlf	___ftmul@f2+1,f
  6023  05CE  0DA5               	rlf	___ftmul@f2+2,f
  6024  05CF  3EFF               	addlw	-1
  6025  05D0  1D03               	skipz
  6026  05D1  2DCB               	goto	u290_25
  6027  05D2  3001               	movlw	1
  6028  05D3  02AE               	subwf	___ftmul@cntr,f
  6029  05D4  1D03               	btfss	3,2
  6030  05D5  2DB2               	goto	i1l2335
  6031  05D6  3009               	movlw	9
  6032  05D7  00A6               	movwf	??___ftmul
  6033  05D8  0826               	movf	??___ftmul,w
  6034  05D9  00AE               	movwf	___ftmul@cntr
  6035  05DA                     i1l2347:	
  6036  05DA  1C20               	btfss	___ftmul@f1,0
  6037  05DB  2DEA               	goto	i1l2351
  6038  05DC  0823               	movf	___ftmul@f2,w
  6039  05DD  07AB               	addwf	___ftmul@f3_as_product,f
  6040  05DE  0824               	movf	___ftmul@f2+1,w
  6041  05DF  1103               	clrz
  6042  05E0  1803               	skipnc
  6043  05E1  0A24               	incf	___ftmul@f2+1,w
  6044  05E2  1D03               	btfss	3,2
  6045  05E3  07AC               	addwf	___ftmul@f3_as_product+1,f
  6046  05E4  0825               	movf	___ftmul@f2+2,w
  6047  05E5  1103               	clrz
  6048  05E6  1803               	skipnc
  6049  05E7  0A25               	incf	___ftmul@f2+2,w
  6050  05E8  1D03               	btfss	3,2
  6051  05E9  07AD               	addwf	___ftmul@f3_as_product+2,f
  6052  05EA                     i1l2351:	
  6053  05EA  3001               	movlw	1
  6054  05EB                     u294_25:	
  6055  05EB  1003               	clrc
  6056  05EC  0CA2               	rrf	___ftmul@f1+2,f
  6057  05ED  0CA1               	rrf	___ftmul@f1+1,f
  6058  05EE  0CA0               	rrf	___ftmul@f1,f
  6059  05EF  3EFF               	addlw	-1
  6060  05F0  1D03               	skipz
  6061  05F1  2DEB               	goto	u294_25
  6062  05F2  3001               	movlw	1
  6063  05F3                     u295_25:	
  6064  05F3  1003               	clrc
  6065  05F4  0CAD               	rrf	___ftmul@f3_as_product+2,f
  6066  05F5  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6067  05F6  0CAB               	rrf	___ftmul@f3_as_product,f
  6068  05F7  3EFF               	addlw	-1
  6069  05F8  1D03               	skipz
  6070  05F9  2DF3               	goto	u295_25
  6071  05FA  3001               	movlw	1
  6072  05FB  02AE               	subwf	___ftmul@cntr,f
  6073  05FC  1D03               	btfss	3,2
  6074  05FD  2DDA               	goto	i1l2347
  6075  05FE  082B               	movf	___ftmul@f3_as_product,w
  6076  05FF  00F0               	movwf	___ftpack@arg
  6077  0600  082C               	movf	___ftmul@f3_as_product+1,w
  6078  0601  00F1               	movwf	___ftpack@arg+1
  6079  0602  082D               	movf	___ftmul@f3_as_product+2,w
  6080  0603  00F2               	movwf	___ftpack@arg+2
  6081  0604  082A               	movf	___ftmul@exp,w
  6082  0605  00A6               	movwf	??___ftmul
  6083  0606  0826               	movf	??___ftmul,w
  6084  0607  00F3               	movwf	___ftpack@exp
  6085  0608  082F               	movf	___ftmul@sign,w
  6086  0609  00A7               	movwf	??___ftmul+1
  6087  060A  0827               	movf	??___ftmul+1,w
  6088  060B  00F4               	movwf	___ftpack@sign
  6089  060C  120A  118A  278A   	fcall	___ftpack
  6090  060F  0870               	movf	?___ftpack,w
  6091  0610  1283               	bcf	3,5	;RP0=0, select bank0
  6092  0611  1303               	bcf	3,6	;RP1=0, select bank0
  6093  0612  00A0               	movwf	?___ftmul
  6094  0613  0871               	movf	?___ftpack+1,w
  6095  0614  00A1               	movwf	?___ftmul+1
  6096  0615  0872               	movf	?___ftpack+2,w
  6097  0616  00A2               	movwf	?___ftmul+2
  6098  0617  0008               	return
  6099  0618                     __end_of___ftmul:	
  6100                           
  6101                           	psect	text31
  6102  0DCE                     __ptext31:	
  6103 ;; *************** function ___ftge *****************
  6104 ;; Defined at:
  6105 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;  ff1             3    0[COMMON] float 
  6108 ;;  ff2             3    3[COMMON] float 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6120 ;;      Params:         6       0       0       0       0
  6121 ;;      Locals:         0       0       0       0       0
  6122 ;;      Temps:          6       0       0       0       0
  6123 ;;      Totals:        12       0       0       0       0
  6124 ;;Total ram usage:       12 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_ftoa
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           
  6134                           ;psect for function ___ftge
  6135  0DCE                     ___ftge:	
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6139  0DCE  1FF2               	btfss	___ftge@ff1+2,7
  6140  0DCF  2DF5               	goto	i1l2295
  6141  0DD0  3000               	movlw	0
  6142  0DD1  00F6               	movwf	??___ftge
  6143  0DD2  3000               	movlw	0
  6144  0DD3  00F7               	movwf	??___ftge+1
  6145  0DD4  3080               	movlw	128
  6146  0DD5  00F8               	movwf	??___ftge+2
  6147  0DD6  0970               	comf	___ftge@ff1,w
  6148  0DD7  00F9               	movwf	??___ftge+3
  6149  0DD8  0971               	comf	___ftge@ff1+1,w
  6150  0DD9  00FA               	movwf	??___ftge+4
  6151  0DDA  0972               	comf	___ftge@ff1+2,w
  6152  0DDB  00FB               	movwf	??___ftge+5
  6153  0DDC  0AF9               	incf	??___ftge+3,f
  6154  0DDD  1903               	skipnz
  6155  0DDE  0AFA               	incf	??___ftge+4,f
  6156  0DDF  1903               	skipnz
  6157  0DE0  0AFB               	incf	??___ftge+5,f
  6158  0DE1  0879               	movf	??___ftge+3,w
  6159  0DE2  07F6               	addwf	??___ftge,f
  6160  0DE3  087A               	movf	??___ftge+4,w
  6161  0DE4  1803               	skipnc
  6162  0DE5  0F7A               	incfsz	??___ftge+4,w
  6163  0DE6  2DE8               	goto	u279_21
  6164  0DE7  2DE9               	goto	u279_22
  6165  0DE8                     u279_21:	
  6166  0DE8  07F7               	addwf	??___ftge+1,f
  6167  0DE9                     u279_22:	
  6168  0DE9  087B               	movf	??___ftge+5,w
  6169  0DEA  1803               	skipnc
  6170  0DEB  0F7B               	incfsz	??___ftge+5,w
  6171  0DEC  2DEE               	goto	u279_23
  6172  0DED  2DEF               	goto	u279_24
  6173  0DEE                     u279_23:	
  6174  0DEE  07F8               	addwf	??___ftge+2,f
  6175  0DEF                     u279_24:	
  6176  0DEF  0876               	movf	??___ftge,w
  6177  0DF0  00F0               	movwf	___ftge@ff1
  6178  0DF1  0877               	movf	??___ftge+1,w
  6179  0DF2  00F1               	movwf	___ftge@ff1+1
  6180  0DF3  0878               	movf	??___ftge+2,w
  6181  0DF4  00F2               	movwf	___ftge@ff1+2
  6182  0DF5                     i1l2295:	
  6183  0DF5  1FF5               	btfss	___ftge@ff2+2,7
  6184  0DF6  2E1C               	goto	i1l2299
  6185  0DF7  3000               	movlw	0
  6186  0DF8  00F6               	movwf	??___ftge
  6187  0DF9  3000               	movlw	0
  6188  0DFA  00F7               	movwf	??___ftge+1
  6189  0DFB  3080               	movlw	128
  6190  0DFC  00F8               	movwf	??___ftge+2
  6191  0DFD  0973               	comf	___ftge@ff2,w
  6192  0DFE  00F9               	movwf	??___ftge+3
  6193  0DFF  0974               	comf	___ftge@ff2+1,w
  6194  0E00  00FA               	movwf	??___ftge+4
  6195  0E01  0975               	comf	___ftge@ff2+2,w
  6196  0E02  00FB               	movwf	??___ftge+5
  6197  0E03  0AF9               	incf	??___ftge+3,f
  6198  0E04  1903               	skipnz
  6199  0E05  0AFA               	incf	??___ftge+4,f
  6200  0E06  1903               	skipnz
  6201  0E07  0AFB               	incf	??___ftge+5,f
  6202  0E08  0879               	movf	??___ftge+3,w
  6203  0E09  07F6               	addwf	??___ftge,f
  6204  0E0A  087A               	movf	??___ftge+4,w
  6205  0E0B  1803               	skipnc
  6206  0E0C  0F7A               	incfsz	??___ftge+4,w
  6207  0E0D  2E0F               	goto	u281_21
  6208  0E0E  2E10               	goto	u281_22
  6209  0E0F                     u281_21:	
  6210  0E0F  07F7               	addwf	??___ftge+1,f
  6211  0E10                     u281_22:	
  6212  0E10  087B               	movf	??___ftge+5,w
  6213  0E11  1803               	skipnc
  6214  0E12  0F7B               	incfsz	??___ftge+5,w
  6215  0E13  2E15               	goto	u281_23
  6216  0E14  2E16               	goto	u281_24
  6217  0E15                     u281_23:	
  6218  0E15  07F8               	addwf	??___ftge+2,f
  6219  0E16                     u281_24:	
  6220  0E16  0876               	movf	??___ftge,w
  6221  0E17  00F3               	movwf	___ftge@ff2
  6222  0E18  0877               	movf	??___ftge+1,w
  6223  0E19  00F4               	movwf	___ftge@ff2+1
  6224  0E1A  0878               	movf	??___ftge+2,w
  6225  0E1B  00F5               	movwf	___ftge@ff2+2
  6226  0E1C                     i1l2299:	
  6227  0E1C  3080               	movlw	128
  6228  0E1D  06F2               	xorwf	___ftge@ff1+2,f
  6229  0E1E  3080               	movlw	128
  6230  0E1F  06F5               	xorwf	___ftge@ff2+2,f
  6231  0E20  0875               	movf	___ftge@ff2+2,w
  6232  0E21  0272               	subwf	___ftge@ff1+2,w
  6233  0E22  1D03               	skipz
  6234  0E23  0008               	return
  6235  0E24  0874               	movf	___ftge@ff2+1,w
  6236  0E25  0271               	subwf	___ftge@ff1+1,w
  6237  0E26  1D03               	skipz
  6238  0E27  0008               	return
  6239  0E28  0873               	movf	___ftge@ff2,w
  6240  0E29  0270               	subwf	___ftge@ff1,w
  6241  0E2A  0008               	return
  6242  0E2B                     __end_of___ftge:	
  6243                           
  6244                           	psect	text32
  6245  0B8E                     __ptext32:	
  6246 ;; *************** function _active *****************
  6247 ;; Defined at:
  6248 ;;		line 144 in file "main.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  input           1    wreg     unsigned char 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  input           1    1[COMMON] unsigned char 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6262 ;;      Params:         0       0       0       0       0
  6263 ;;      Locals:         1       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0
  6265 ;;      Totals:         1       0       0       0       0
  6266 ;;Total ram usage:        1 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    1
  6269 ;; This function calls:
  6270 ;;		i1_USARTWriteChar
  6271 ;; This function is called by:
  6272 ;;		_ISR
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           
  6277                           ;psect for function _active
  6278  0B8E                     _active:	
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in _active: [wreg+status,2+status,0+pclath+cstack]
  6282                           ;active@input stored from wreg
  6283  0B8E  00F1               	movwf	active@input
  6284                           
  6285                           ;main.c: 146: if (input == 'B') {
  6286  0B8F  0871               	movf	active@input,w
  6287  0B90  3A42               	xorlw	66
  6288  0B91  1D03               	skipz
  6289  0B92  2B9C               	goto	i1l2481
  6290                           
  6291                           ;main.c: 148: PORTDbits.RD2 = 0;
  6292  0B93  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0B94  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0B95  1108               	bcf	8,2	;volatile
  6295                           
  6296                           ;main.c: 149: PORTDbits.RD3 = 1;
  6297  0B96  1588               	bsf	8,3	;volatile
  6298                           
  6299                           ;main.c: 150: USARTWriteChar('B');
  6300  0B97  3042               	movlw	66
  6301  0B98  160A  118A  27C7   	fcall	i1_USARTWriteChar
  6302                           
  6303                           ;main.c: 152: } else if (input == 'b') {
  6304  0B9B  0008               	return
  6305  0B9C                     i1l2481:	
  6306  0B9C  0871               	movf	active@input,w
  6307  0B9D  3A62               	xorlw	98
  6308  0B9E  1D03               	skipz
  6309  0B9F  2BA9               	goto	i1l2487
  6310                           
  6311                           ;main.c: 154: PORTDbits.RD2 = 1;
  6312  0BA0  1283               	bcf	3,5	;RP0=0, select bank0
  6313  0BA1  1303               	bcf	3,6	;RP1=0, select bank0
  6314  0BA2  1508               	bsf	8,2	;volatile
  6315                           
  6316                           ;main.c: 155: PORTDbits.RD3 = 0;
  6317  0BA3  1188               	bcf	8,3	;volatile
  6318                           
  6319                           ;main.c: 156: USARTWriteChar('b');
  6320  0BA4  3062               	movlw	98
  6321  0BA5  160A  118A  27C7   	fcall	i1_USARTWriteChar
  6322                           
  6323                           ;main.c: 158: } else if (input == 'M') {
  6324  0BA8  0008               	return
  6325  0BA9                     i1l2487:	
  6326  0BA9  0871               	movf	active@input,w
  6327  0BAA  3A4D               	xorlw	77
  6328  0BAB  1D03               	skipz
  6329  0BAC  2BB5               	goto	i1l2493
  6330                           
  6331                           ;main.c: 160: PORTDbits.RD6 = 0;
  6332  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  6333  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  6334  0BAF  1308               	bcf	8,6	;volatile
  6335                           
  6336                           ;main.c: 161: USARTWriteChar('M');
  6337  0BB0  304D               	movlw	77
  6338  0BB1  160A  118A  27C7   	fcall	i1_USARTWriteChar
  6339                           
  6340                           ;main.c: 163: } else if (input == 'm') {
  6341  0BB4  0008               	return
  6342  0BB5                     i1l2493:	
  6343  0BB5  0871               	movf	active@input,w
  6344  0BB6  3A6D               	xorlw	109
  6345  0BB7  1D03               	skipz
  6346  0BB8  2BC1               	goto	i1l2499
  6347                           
  6348                           ;main.c: 165: PORTDbits.RD6 = 1;
  6349  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  6350  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  6351  0BBB  1708               	bsf	8,6	;volatile
  6352                           
  6353                           ;main.c: 166: USARTWriteChar('m');
  6354  0BBC  306D               	movlw	109
  6355  0BBD  160A  118A  27C7   	fcall	i1_USARTWriteChar
  6356                           
  6357                           ;main.c: 168: } else if (input == 'L') {
  6358  0BC0  0008               	return
  6359  0BC1                     i1l2499:	
  6360  0BC1  0871               	movf	active@input,w
  6361  0BC2  3A4C               	xorlw	76
  6362  0BC3  1D03               	skipz
  6363  0BC4  2BCD               	goto	i1l2505
  6364                           
  6365                           ;main.c: 170: PORTCbits.RC0 = 1;
  6366  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
  6367  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
  6368  0BC7  1407               	bsf	7,0	;volatile
  6369                           
  6370                           ;main.c: 171: USARTWriteChar('L');
  6371  0BC8  304C               	movlw	76
  6372  0BC9  160A  118A  27C7   	fcall	i1_USARTWriteChar
  6373                           
  6374                           ;main.c: 173: } else if (input == 'l') {
  6375  0BCC  0008               	return
  6376  0BCD                     i1l2505:	
  6377  0BCD  0871               	movf	active@input,w
  6378  0BCE  3A6C               	xorlw	108
  6379  0BCF  1D03               	skipz
  6380  0BD0  0008               	return
  6381                           
  6382                           ;main.c: 175: PORTCbits.RC0 = 0;
  6383  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  6384  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  6385  0BD3  1007               	bcf	7,0	;volatile
  6386                           
  6387                           ;main.c: 176: USARTWriteChar('l');
  6388  0BD4  306C               	movlw	108
  6389  0BD5  160A  118A  27C7   	fcall	i1_USARTWriteChar
  6390  0BD8  0008               	return
  6391  0BD9                     __end_of_active:	
  6392                           
  6393                           	psect	text33
  6394  06D2                     __ptext33:	
  6395 ;; *************** function ___ftdiv *****************
  6396 ;; Defined at:
  6397 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  f2              3   16[BANK0 ] float 
  6400 ;;  f1              3   19[BANK0 ] float 
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  f3              3   27[BANK0 ] float 
  6403 ;;  sign            1   31[BANK0 ] unsigned char 
  6404 ;;  exp             1   30[BANK0 ] unsigned char 
  6405 ;;  cntr            1   26[BANK0 ] unsigned char 
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  3   16[BANK0 ] float 
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, status,0, pclath, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6415 ;;      Params:         0       6       0       0       0
  6416 ;;      Locals:         0       6       0       0       0
  6417 ;;      Temps:          0       4       0       0       0
  6418 ;;      Totals:         0      16       0       0       0
  6419 ;;Total ram usage:       16 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    1
  6422 ;; This function calls:
  6423 ;;		___ftpack
  6424 ;; This function is called by:
  6425 ;;		_ISR
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function ___ftdiv
  6431  06D2                     ___ftdiv:	
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6435  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  6436  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  6437  06D4  0833               	movf	___ftdiv@f1,w
  6438  06D5  00B6               	movwf	??___ftdiv
  6439  06D6  0834               	movf	___ftdiv@f1+1,w
  6440  06D7  00B7               	movwf	??___ftdiv+1
  6441  06D8  0835               	movf	___ftdiv@f1+2,w
  6442  06D9  00B8               	movwf	??___ftdiv+2
  6443  06DA  1003               	clrc
  6444  06DB  0D37               	rlf	??___ftdiv+1,w
  6445  06DC  0D38               	rlf	??___ftdiv+2,w
  6446  06DD  00B9               	movwf	??___ftdiv+3
  6447  06DE  0839               	movf	??___ftdiv+3,w
  6448  06DF  00BE               	movwf	___ftdiv@exp
  6449  06E0  08BE               	movf	___ftdiv@exp,f
  6450  06E1  1D03               	skipz
  6451  06E2  2EEA               	goto	i1l2731
  6452  06E3  3000               	movlw	0
  6453  06E4  00B0               	movwf	?___ftdiv
  6454  06E5  3000               	movlw	0
  6455  06E6  00B1               	movwf	?___ftdiv+1
  6456  06E7  3000               	movlw	0
  6457  06E8  00B2               	movwf	?___ftdiv+2
  6458  06E9  0008               	return
  6459  06EA                     i1l2731:	
  6460  06EA  0830               	movf	___ftdiv@f2,w
  6461  06EB  00B6               	movwf	??___ftdiv
  6462  06EC  0831               	movf	___ftdiv@f2+1,w
  6463  06ED  00B7               	movwf	??___ftdiv+1
  6464  06EE  0832               	movf	___ftdiv@f2+2,w
  6465  06EF  00B8               	movwf	??___ftdiv+2
  6466  06F0  1003               	clrc
  6467  06F1  0D37               	rlf	??___ftdiv+1,w
  6468  06F2  0D38               	rlf	??___ftdiv+2,w
  6469  06F3  00B9               	movwf	??___ftdiv+3
  6470  06F4  0839               	movf	??___ftdiv+3,w
  6471  06F5  00BF               	movwf	___ftdiv@sign
  6472  06F6  08BF               	movf	___ftdiv@sign,f
  6473  06F7  1D03               	skipz
  6474  06F8  2F00               	goto	i1l2737
  6475  06F9  3000               	movlw	0
  6476  06FA  00B0               	movwf	?___ftdiv
  6477  06FB  3000               	movlw	0
  6478  06FC  00B1               	movwf	?___ftdiv+1
  6479  06FD  3000               	movlw	0
  6480  06FE  00B2               	movwf	?___ftdiv+2
  6481  06FF  0008               	return
  6482  0700                     i1l2737:	
  6483  0700  3000               	movlw	0
  6484  0701  00BB               	movwf	___ftdiv@f3
  6485  0702  3000               	movlw	0
  6486  0703  00BC               	movwf	___ftdiv@f3+1
  6487  0704  3000               	movlw	0
  6488  0705  00BD               	movwf	___ftdiv@f3+2
  6489  0706  3089               	movlw	137
  6490  0707  073F               	addwf	___ftdiv@sign,w
  6491  0708  00B6               	movwf	??___ftdiv
  6492  0709  0836               	movf	??___ftdiv,w
  6493  070A  02BE               	subwf	___ftdiv@exp,f
  6494  070B  0833               	movf	___ftdiv@f1,w
  6495  070C  00B6               	movwf	??___ftdiv
  6496  070D  0834               	movf	___ftdiv@f1+1,w
  6497  070E  00B7               	movwf	??___ftdiv+1
  6498  070F  0835               	movf	___ftdiv@f1+2,w
  6499  0710  00B8               	movwf	??___ftdiv+2
  6500  0711  3010               	movlw	16
  6501  0712                     u355_25:	
  6502  0712  1003               	clrc
  6503  0713  0CB8               	rrf	??___ftdiv+2,f
  6504  0714  0CB7               	rrf	??___ftdiv+1,f
  6505  0715  0CB6               	rrf	??___ftdiv,f
  6506  0716  3EFF               	addlw	-1
  6507  0717  1D03               	skipz
  6508  0718  2F12               	goto	u355_25
  6509  0719  0836               	movf	??___ftdiv,w
  6510  071A  00B9               	movwf	??___ftdiv+3
  6511  071B  0839               	movf	??___ftdiv+3,w
  6512  071C  00BF               	movwf	___ftdiv@sign
  6513  071D  0830               	movf	___ftdiv@f2,w
  6514  071E  00B6               	movwf	??___ftdiv
  6515  071F  0831               	movf	___ftdiv@f2+1,w
  6516  0720  00B7               	movwf	??___ftdiv+1
  6517  0721  0832               	movf	___ftdiv@f2+2,w
  6518  0722  00B8               	movwf	??___ftdiv+2
  6519  0723  3010               	movlw	16
  6520  0724                     u356_25:	
  6521  0724  1003               	clrc
  6522  0725  0CB8               	rrf	??___ftdiv+2,f
  6523  0726  0CB7               	rrf	??___ftdiv+1,f
  6524  0727  0CB6               	rrf	??___ftdiv,f
  6525  0728  3EFF               	addlw	-1
  6526  0729  1D03               	skipz
  6527  072A  2F24               	goto	u356_25
  6528  072B  0836               	movf	??___ftdiv,w
  6529  072C  00B9               	movwf	??___ftdiv+3
  6530  072D  0839               	movf	??___ftdiv+3,w
  6531  072E  06BF               	xorwf	___ftdiv@sign,f
  6532  072F  3080               	movlw	128
  6533  0730  00B6               	movwf	??___ftdiv
  6534  0731  0836               	movf	??___ftdiv,w
  6535  0732  05BF               	andwf	___ftdiv@sign,f
  6536  0733  17B4               	bsf	___ftdiv@f1+1,7
  6537  0734  30FF               	movlw	255
  6538  0735  05B3               	andwf	___ftdiv@f1,f
  6539  0736  30FF               	movlw	255
  6540  0737  05B4               	andwf	___ftdiv@f1+1,f
  6541  0738  3000               	movlw	0
  6542  0739  05B5               	andwf	___ftdiv@f1+2,f
  6543  073A  17B1               	bsf	___ftdiv@f2+1,7
  6544  073B  30FF               	movlw	255
  6545  073C  05B0               	andwf	___ftdiv@f2,f
  6546  073D  30FF               	movlw	255
  6547  073E  05B1               	andwf	___ftdiv@f2+1,f
  6548  073F  3000               	movlw	0
  6549  0740  05B2               	andwf	___ftdiv@f2+2,f
  6550  0741  3018               	movlw	24
  6551  0742  00B6               	movwf	??___ftdiv
  6552  0743  0836               	movf	??___ftdiv,w
  6553  0744  00BA               	movwf	___ftdiv@cntr
  6554  0745                     i1l2751:	
  6555  0745  3001               	movlw	1
  6556  0746                     u357_25:	
  6557  0746  1003               	clrc
  6558  0747  0DBB               	rlf	___ftdiv@f3,f
  6559  0748  0DBC               	rlf	___ftdiv@f3+1,f
  6560  0749  0DBD               	rlf	___ftdiv@f3+2,f
  6561  074A  3EFF               	addlw	-1
  6562  074B  1D03               	skipz
  6563  074C  2F46               	goto	u357_25
  6564  074D  0832               	movf	___ftdiv@f2+2,w
  6565  074E  0235               	subwf	___ftdiv@f1+2,w
  6566  074F  1D03               	skipz
  6567  0750  2F57               	goto	u358_25
  6568  0751  0831               	movf	___ftdiv@f2+1,w
  6569  0752  0234               	subwf	___ftdiv@f1+1,w
  6570  0753  1D03               	skipz
  6571  0754  2F57               	goto	u358_25
  6572  0755  0830               	movf	___ftdiv@f2,w
  6573  0756  0233               	subwf	___ftdiv@f1,w
  6574  0757                     u358_25:	
  6575  0757  1C03               	skipc
  6576  0758  2F64               	goto	i1l2759
  6577  0759  0830               	movf	___ftdiv@f2,w
  6578  075A  02B3               	subwf	___ftdiv@f1,f
  6579  075B  0831               	movf	___ftdiv@f2+1,w
  6580  075C  1C03               	skipc
  6581  075D  0F31               	incfsz	___ftdiv@f2+1,w
  6582  075E  02B4               	subwf	___ftdiv@f1+1,f
  6583  075F  0832               	movf	___ftdiv@f2+2,w
  6584  0760  1C03               	skipc
  6585  0761  0A32               	incf	___ftdiv@f2+2,w
  6586  0762  02B5               	subwf	___ftdiv@f1+2,f
  6587  0763  143B               	bsf	___ftdiv@f3,0
  6588  0764                     i1l2759:	
  6589  0764  3001               	movlw	1
  6590  0765                     u359_25:	
  6591  0765  1003               	clrc
  6592  0766  0DB3               	rlf	___ftdiv@f1,f
  6593  0767  0DB4               	rlf	___ftdiv@f1+1,f
  6594  0768  0DB5               	rlf	___ftdiv@f1+2,f
  6595  0769  3EFF               	addlw	-1
  6596  076A  1D03               	skipz
  6597  076B  2F65               	goto	u359_25
  6598  076C  3001               	movlw	1
  6599  076D  02BA               	subwf	___ftdiv@cntr,f
  6600  076E  1D03               	btfss	3,2
  6601  076F  2F45               	goto	i1l2751
  6602  0770  083B               	movf	___ftdiv@f3,w
  6603  0771  00F0               	movwf	___ftpack@arg
  6604  0772  083C               	movf	___ftdiv@f3+1,w
  6605  0773  00F1               	movwf	___ftpack@arg+1
  6606  0774  083D               	movf	___ftdiv@f3+2,w
  6607  0775  00F2               	movwf	___ftpack@arg+2
  6608  0776  083E               	movf	___ftdiv@exp,w
  6609  0777  00B6               	movwf	??___ftdiv
  6610  0778  0836               	movf	??___ftdiv,w
  6611  0779  00F3               	movwf	___ftpack@exp
  6612  077A  083F               	movf	___ftdiv@sign,w
  6613  077B  00B7               	movwf	??___ftdiv+1
  6614  077C  0837               	movf	??___ftdiv+1,w
  6615  077D  00F4               	movwf	___ftpack@sign
  6616  077E  120A  118A  278A   	fcall	___ftpack
  6617  0781  0870               	movf	?___ftpack,w
  6618  0782  1283               	bcf	3,5	;RP0=0, select bank0
  6619  0783  1303               	bcf	3,6	;RP1=0, select bank0
  6620  0784  00B0               	movwf	?___ftdiv
  6621  0785  0871               	movf	?___ftpack+1,w
  6622  0786  00B1               	movwf	?___ftdiv+1
  6623  0787  0872               	movf	?___ftpack+2,w
  6624  0788  00B2               	movwf	?___ftdiv+2
  6625  0789  0008               	return
  6626  078A                     __end_of___ftdiv:	
  6627                           
  6628                           	psect	text34
  6629  091C                     __ptext34:	
  6630 ;; *************** function ___awtoft *****************
  6631 ;; Defined at:
  6632 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  c               2    8[COMMON] int 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  sign            1   13[COMMON] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  3    8[COMMON] float 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, pclath, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6646 ;;      Params:         3       0       0       0       0
  6647 ;;      Locals:         1       0       0       0       0
  6648 ;;      Temps:          2       0       0       0       0
  6649 ;;      Totals:         6       0       0       0       0
  6650 ;;Total ram usage:        6 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    1
  6653 ;; This function calls:
  6654 ;;		___ftpack
  6655 ;; This function is called by:
  6656 ;;		_ISR
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function ___awtoft
  6662  091C                     ___awtoft:	
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6666  091C  01FD               	clrf	___awtoft@sign
  6667  091D  1FF9               	btfss	___awtoft@c+1,7
  6668  091E  2926               	goto	i1l2721
  6669  091F  09F8               	comf	___awtoft@c,f
  6670  0920  09F9               	comf	___awtoft@c+1,f
  6671  0921  0AF8               	incf	___awtoft@c,f
  6672  0922  1903               	skipnz
  6673  0923  0AF9               	incf	___awtoft@c+1,f
  6674  0924  01FD               	clrf	___awtoft@sign
  6675  0925  0AFD               	incf	___awtoft@sign,f
  6676  0926                     i1l2721:	
  6677  0926  0878               	movf	___awtoft@c,w
  6678  0927  00F0               	movwf	___ftpack@arg
  6679  0928  0879               	movf	___awtoft@c+1,w
  6680  0929  00F1               	movwf	___ftpack@arg+1
  6681  092A  01F2               	clrf	___ftpack@arg+2
  6682  092B  308E               	movlw	142
  6683  092C  00FB               	movwf	??___awtoft
  6684  092D  087B               	movf	??___awtoft,w
  6685  092E  00F3               	movwf	___ftpack@exp
  6686  092F  087D               	movf	___awtoft@sign,w
  6687  0930  00FC               	movwf	??___awtoft+1
  6688  0931  087C               	movf	??___awtoft+1,w
  6689  0932  00F4               	movwf	___ftpack@sign
  6690  0933  120A  118A  278A   	fcall	___ftpack
  6691  0936  0870               	movf	?___ftpack,w
  6692  0937  00F8               	movwf	?___awtoft
  6693  0938  0871               	movf	?___ftpack+1,w
  6694  0939  00F9               	movwf	?___awtoft+1
  6695  093A  0872               	movf	?___ftpack+2,w
  6696  093B  00FA               	movwf	?___awtoft+2
  6697  093C  0008               	return
  6698  093D                     __end_of___awtoft:	
  6699                           
  6700                           	psect	text35
  6701  078A                     __ptext35:	
  6702 ;; *************** function ___ftpack *****************
  6703 ;; Defined at:
  6704 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  arg             3    0[COMMON] unsigned um
  6707 ;;  exp             1    3[COMMON] unsigned char 
  6708 ;;  sign            1    4[COMMON] unsigned char 
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  3    0[COMMON] float 
  6713 ;; Registers used:
  6714 ;;		wreg, status,2, status,0
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6720 ;;      Params:         5       0       0       0       0
  6721 ;;      Locals:         0       0       0       0       0
  6722 ;;      Temps:          3       0       0       0       0
  6723 ;;      Totals:         8       0       0       0       0
  6724 ;;Total ram usage:        8 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; This function calls:
  6727 ;;		Nothing
  6728 ;; This function is called by:
  6729 ;;		___awtoft
  6730 ;;		___ftadd
  6731 ;;		___ftdiv
  6732 ;;		___ftmul
  6733 ;;		___lltoft
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function ___ftpack
  6739  078A                     ___ftpack:	
  6740                           
  6741                           ;incstack = 0
  6742 ;; hardware stack exceeded
  6743                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6744  078A  0873               	movf	___ftpack@exp,w
  6745  078B  1903               	btfsc	3,2
  6746  078C  2F92               	goto	i1l1961
  6747  078D  0872               	movf	___ftpack@arg+2,w
  6748  078E  0471               	iorwf	___ftpack@arg+1,w
  6749  078F  0470               	iorwf	___ftpack@arg,w
  6750  0790  1D03               	skipz
  6751  0791  2FA5               	goto	i1l1967
  6752  0792                     i1l1961:	
  6753  0792  3000               	movlw	0
  6754  0793  00F0               	movwf	?___ftpack
  6755  0794  3000               	movlw	0
  6756  0795  00F1               	movwf	?___ftpack+1
  6757  0796  3000               	movlw	0
  6758  0797  00F2               	movwf	?___ftpack+2
  6759  0798  0008               	return
  6760  0799                     i1l1965:	
  6761  0799  3001               	movlw	1
  6762  079A  00F5               	movwf	??___ftpack
  6763  079B  0875               	movf	??___ftpack,w
  6764  079C  07F3               	addwf	___ftpack@exp,f
  6765  079D  3001               	movlw	1
  6766  079E                     u202_25:	
  6767  079E  1003               	clrc
  6768  079F  0CF2               	rrf	___ftpack@arg+2,f
  6769  07A0  0CF1               	rrf	___ftpack@arg+1,f
  6770  07A1  0CF0               	rrf	___ftpack@arg,f
  6771  07A2  3EFF               	addlw	-1
  6772  07A3  1D03               	skipz
  6773  07A4  2F9E               	goto	u202_25
  6774  07A5                     i1l1967:	
  6775  07A5  30FE               	movlw	254
  6776  07A6  0572               	andwf	___ftpack@arg+2,w
  6777  07A7  1903               	btfsc	3,2
  6778  07A8  2FC0               	goto	i1l520
  6779  07A9  2F99               	goto	i1l1965
  6780  07AA                     i1l1969:	
  6781  07AA  3001               	movlw	1
  6782  07AB  00F5               	movwf	??___ftpack
  6783  07AC  0875               	movf	??___ftpack,w
  6784  07AD  07F3               	addwf	___ftpack@exp,f
  6785  07AE  3001               	movlw	1
  6786  07AF  07F0               	addwf	___ftpack@arg,f
  6787  07B0  3000               	movlw	0
  6788  07B1  1803               	skipnc
  6789  07B2  3001               	movlw	1
  6790  07B3  07F1               	addwf	___ftpack@arg+1,f
  6791  07B4  3000               	movlw	0
  6792  07B5  1803               	skipnc
  6793  07B6  3001               	movlw	1
  6794  07B7  07F2               	addwf	___ftpack@arg+2,f
  6795  07B8  3001               	movlw	1
  6796  07B9                     u204_25:	
  6797  07B9  1003               	clrc
  6798  07BA  0CF2               	rrf	___ftpack@arg+2,f
  6799  07BB  0CF1               	rrf	___ftpack@arg+1,f
  6800  07BC  0CF0               	rrf	___ftpack@arg,f
  6801  07BD  3EFF               	addlw	-1
  6802  07BE  1D03               	skipz
  6803  07BF  2FB9               	goto	u204_25
  6804  07C0                     i1l520:	
  6805  07C0  30FF               	movlw	255
  6806  07C1  0572               	andwf	___ftpack@arg+2,w
  6807  07C2  1903               	btfsc	3,2
  6808  07C3  2FCF               	goto	i1l1977
  6809  07C4  2FAA               	goto	i1l1969
  6810  07C5                     i1l1975:	
  6811  07C5  3001               	movlw	1
  6812  07C6  02F3               	subwf	___ftpack@exp,f
  6813  07C7  3001               	movlw	1
  6814  07C8                     u206_25:	
  6815  07C8  1003               	clrc
  6816  07C9  0DF0               	rlf	___ftpack@arg,f
  6817  07CA  0DF1               	rlf	___ftpack@arg+1,f
  6818  07CB  0DF2               	rlf	___ftpack@arg+2,f
  6819  07CC  3EFF               	addlw	-1
  6820  07CD  1D03               	skipz
  6821  07CE  2FC8               	goto	u206_25
  6822  07CF                     i1l1977:	
  6823  07CF  1FF1               	btfss	___ftpack@arg+1,7
  6824  07D0  2FC5               	goto	i1l1975
  6825  07D1  1873               	btfsc	___ftpack@exp,0
  6826  07D2  2FD9               	goto	i1l526
  6827  07D3  30FF               	movlw	255
  6828  07D4  05F0               	andwf	___ftpack@arg,f
  6829  07D5  307F               	movlw	127
  6830  07D6  05F1               	andwf	___ftpack@arg+1,f
  6831  07D7  30FF               	movlw	255
  6832  07D8  05F2               	andwf	___ftpack@arg+2,f
  6833  07D9                     i1l526:	
  6834  07D9  1003               	clrc
  6835  07DA  0CF3               	rrf	___ftpack@exp,f
  6836  07DB  0873               	movf	___ftpack@exp,w
  6837  07DC  00F5               	movwf	??___ftpack
  6838  07DD  01F6               	clrf	??___ftpack+1
  6839  07DE  01F7               	clrf	??___ftpack+2
  6840  07DF  3010               	movlw	16
  6841  07E0                     u209_25:	
  6842  07E0  1003               	clrc
  6843  07E1  0DF5               	rlf	??___ftpack,f
  6844  07E2  0DF6               	rlf	??___ftpack+1,f
  6845  07E3  0DF7               	rlf	??___ftpack+2,f
  6846  07E4  3EFF               	addlw	-1
  6847  07E5  1D03               	skipz
  6848  07E6  2FE0               	goto	u209_25
  6849  07E7  0875               	movf	??___ftpack,w
  6850  07E8  04F0               	iorwf	___ftpack@arg,f
  6851  07E9  0876               	movf	??___ftpack+1,w
  6852  07EA  04F1               	iorwf	___ftpack@arg+1,f
  6853  07EB  0877               	movf	??___ftpack+2,w
  6854  07EC  04F2               	iorwf	___ftpack@arg+2,f
  6855  07ED  0874               	movf	___ftpack@sign,w
  6856  07EE  1903               	btfsc	3,2
  6857  07EF  0008               	return
  6858  07F0  17F2               	bsf	___ftpack@arg+2,7
  6859  07F1  0008               	return
  6860  07F2                     __end_of___ftpack:	
  6861                           
  6862                           	psect	text36
  6863  0C73                     __ptext36:	
  6864 ;; *************** function ___awmod *****************
  6865 ;; Defined at:
  6866 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awmod.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  divisor         2    9[COMMON] int 
  6869 ;;  dividend        2   11[COMMON] int 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;  sign            1    1[BANK0 ] unsigned char 
  6872 ;;  counter         1    0[BANK0 ] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  2    9[COMMON] int 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6882 ;;      Params:         4       0       0       0       0
  6883 ;;      Locals:         0       2       0       0       0
  6884 ;;      Temps:          1       0       0       0       0
  6885 ;;      Totals:         5       2       0       0       0
  6886 ;;Total ram usage:        7 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_ISR
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           
  6896                           ;psect for function ___awmod
  6897  0C73                     ___awmod:	
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6901  0C73  1283               	bcf	3,5	;RP0=0, select bank0
  6902  0C74  1303               	bcf	3,6	;RP1=0, select bank0
  6903  0C75  01A1               	clrf	___awmod@sign
  6904  0C76  1FFC               	btfss	___awmod@dividend+1,7
  6905  0C77  2C7F               	goto	i1l2683
  6906  0C78  09FB               	comf	___awmod@dividend,f
  6907  0C79  09FC               	comf	___awmod@dividend+1,f
  6908  0C7A  0AFB               	incf	___awmod@dividend,f
  6909  0C7B  1903               	skipnz
  6910  0C7C  0AFC               	incf	___awmod@dividend+1,f
  6911  0C7D  01A1               	clrf	___awmod@sign
  6912  0C7E  0AA1               	incf	___awmod@sign,f
  6913  0C7F                     i1l2683:	
  6914  0C7F  1FFA               	btfss	___awmod@divisor+1,7
  6915  0C80  2C86               	goto	i1l2687
  6916  0C81  09F9               	comf	___awmod@divisor,f
  6917  0C82  09FA               	comf	___awmod@divisor+1,f
  6918  0C83  0AF9               	incf	___awmod@divisor,f
  6919  0C84  1903               	skipnz
  6920  0C85  0AFA               	incf	___awmod@divisor+1,f
  6921  0C86                     i1l2687:	
  6922  0C86  087A               	movf	___awmod@divisor+1,w
  6923  0C87  0479               	iorwf	___awmod@divisor,w
  6924  0C88  1903               	skipnz
  6925  0C89  2CB3               	goto	i1l2705
  6926  0C8A  01A0               	clrf	___awmod@counter
  6927  0C8B  0AA0               	incf	___awmod@counter,f
  6928  0C8C                     i1l2695:	
  6929  0C8C  1BFA               	btfsc	___awmod@divisor+1,7
  6930  0C8D  2C9A               	goto	i1l2697
  6931  0C8E  3001               	movlw	1
  6932  0C8F                     u346_25:	
  6933  0C8F  1003               	clrc
  6934  0C90  0DF9               	rlf	___awmod@divisor,f
  6935  0C91  0DFA               	rlf	___awmod@divisor+1,f
  6936  0C92  3EFF               	addlw	-1
  6937  0C93  1D03               	skipz
  6938  0C94  2C8F               	goto	u346_25
  6939  0C95  3001               	movlw	1
  6940  0C96  00FD               	movwf	??___awmod
  6941  0C97  087D               	movf	??___awmod,w
  6942  0C98  07A0               	addwf	___awmod@counter,f
  6943  0C99  2C8C               	goto	i1l2695
  6944  0C9A                     i1l2697:	
  6945  0C9A  087A               	movf	___awmod@divisor+1,w
  6946  0C9B  027C               	subwf	___awmod@dividend+1,w
  6947  0C9C  1D03               	skipz
  6948  0C9D  2CA0               	goto	u348_25
  6949  0C9E  0879               	movf	___awmod@divisor,w
  6950  0C9F  027B               	subwf	___awmod@dividend,w
  6951  0CA0                     u348_25:	
  6952  0CA0  1C03               	skipc
  6953  0CA1  2CA8               	goto	i1l2701
  6954  0CA2  0879               	movf	___awmod@divisor,w
  6955  0CA3  02FB               	subwf	___awmod@dividend,f
  6956  0CA4  087A               	movf	___awmod@divisor+1,w
  6957  0CA5  1C03               	skipc
  6958  0CA6  03FC               	decf	___awmod@dividend+1,f
  6959  0CA7  02FC               	subwf	___awmod@dividend+1,f
  6960  0CA8                     i1l2701:	
  6961  0CA8  3001               	movlw	1
  6962  0CA9                     u349_25:	
  6963  0CA9  1003               	clrc
  6964  0CAA  0CFA               	rrf	___awmod@divisor+1,f
  6965  0CAB  0CF9               	rrf	___awmod@divisor,f
  6966  0CAC  3EFF               	addlw	-1
  6967  0CAD  1D03               	skipz
  6968  0CAE  2CA9               	goto	u349_25
  6969  0CAF  3001               	movlw	1
  6970  0CB0  02A0               	subwf	___awmod@counter,f
  6971  0CB1  1D03               	btfss	3,2
  6972  0CB2  2C9A               	goto	i1l2697
  6973  0CB3                     i1l2705:	
  6974  0CB3  0821               	movf	___awmod@sign,w
  6975  0CB4  1903               	btfsc	3,2
  6976  0CB5  2CBB               	goto	i1l2709
  6977  0CB6  09FB               	comf	___awmod@dividend,f
  6978  0CB7  09FC               	comf	___awmod@dividend+1,f
  6979  0CB8  0AFB               	incf	___awmod@dividend,f
  6980  0CB9  1903               	skipnz
  6981  0CBA  0AFC               	incf	___awmod@dividend+1,f
  6982  0CBB                     i1l2709:	
  6983  0CBB  087C               	movf	___awmod@dividend+1,w
  6984  0CBC  01FA               	clrf	?___awmod+1
  6985  0CBD  07FA               	addwf	?___awmod+1,f
  6986  0CBE  087B               	movf	___awmod@dividend,w
  6987  0CBF  01F9               	clrf	?___awmod
  6988  0CC0  07F9               	addwf	?___awmod,f
  6989  0CC1  0008               	return
  6990  0CC2                     __end_of___awmod:	
  6991                           
  6992                           	psect	text37
  6993  0D73                     __ptext37:	
  6994 ;; *************** function ___awdiv *****************
  6995 ;; Defined at:
  6996 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awdiv.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  divisor         2    0[COMMON] int 
  6999 ;;  dividend        2    2[COMMON] int 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;  quotient        2    7[COMMON] int 
  7002 ;;  sign            1    6[COMMON] unsigned char 
  7003 ;;  counter         1    5[COMMON] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  2    0[COMMON] int 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7013 ;;      Params:         4       0       0       0       0
  7014 ;;      Locals:         4       0       0       0       0
  7015 ;;      Temps:          1       0       0       0       0
  7016 ;;      Totals:         9       0       0       0       0
  7017 ;;Total ram usage:        9 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_ISR
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function ___awdiv
  7028  0D73                     ___awdiv:	
  7029                           
  7030                           ;incstack = 0
  7031                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7032  0D73  01F6               	clrf	___awdiv@sign
  7033  0D74  1FF1               	btfss	___awdiv@divisor+1,7
  7034  0D75  2D7D               	goto	i1l2639
  7035  0D76  09F0               	comf	___awdiv@divisor,f
  7036  0D77  09F1               	comf	___awdiv@divisor+1,f
  7037  0D78  0AF0               	incf	___awdiv@divisor,f
  7038  0D79  1903               	skipnz
  7039  0D7A  0AF1               	incf	___awdiv@divisor+1,f
  7040  0D7B  01F6               	clrf	___awdiv@sign
  7041  0D7C  0AF6               	incf	___awdiv@sign,f
  7042  0D7D                     i1l2639:	
  7043  0D7D  1FF3               	btfss	___awdiv@dividend+1,7
  7044  0D7E  2D88               	goto	i1l2645
  7045  0D7F  09F2               	comf	___awdiv@dividend,f
  7046  0D80  09F3               	comf	___awdiv@dividend+1,f
  7047  0D81  0AF2               	incf	___awdiv@dividend,f
  7048  0D82  1903               	skipnz
  7049  0D83  0AF3               	incf	___awdiv@dividend+1,f
  7050  0D84  3001               	movlw	1
  7051  0D85  00F4               	movwf	??___awdiv
  7052  0D86  0874               	movf	??___awdiv,w
  7053  0D87  06F6               	xorwf	___awdiv@sign,f
  7054  0D88                     i1l2645:	
  7055  0D88  01F7               	clrf	___awdiv@quotient
  7056  0D89  01F8               	clrf	___awdiv@quotient+1
  7057  0D8A  0871               	movf	___awdiv@divisor+1,w
  7058  0D8B  0470               	iorwf	___awdiv@divisor,w
  7059  0D8C  1903               	skipnz
  7060  0D8D  2DBF               	goto	i1l2667
  7061  0D8E  01F5               	clrf	___awdiv@counter
  7062  0D8F  0AF5               	incf	___awdiv@counter,f
  7063  0D90                     i1l2655:	
  7064  0D90  1BF1               	btfsc	___awdiv@divisor+1,7
  7065  0D91  2D9E               	goto	i1l2657
  7066  0D92  3001               	movlw	1
  7067  0D93                     u336_25:	
  7068  0D93  1003               	clrc
  7069  0D94  0DF0               	rlf	___awdiv@divisor,f
  7070  0D95  0DF1               	rlf	___awdiv@divisor+1,f
  7071  0D96  3EFF               	addlw	-1
  7072  0D97  1D03               	skipz
  7073  0D98  2D93               	goto	u336_25
  7074  0D99  3001               	movlw	1
  7075  0D9A  00F4               	movwf	??___awdiv
  7076  0D9B  0874               	movf	??___awdiv,w
  7077  0D9C  07F5               	addwf	___awdiv@counter,f
  7078  0D9D  2D90               	goto	i1l2655
  7079  0D9E                     i1l2657:	
  7080  0D9E  3001               	movlw	1
  7081  0D9F                     u338_25:	
  7082  0D9F  1003               	clrc
  7083  0DA0  0DF7               	rlf	___awdiv@quotient,f
  7084  0DA1  0DF8               	rlf	___awdiv@quotient+1,f
  7085  0DA2  3EFF               	addlw	-1
  7086  0DA3  1D03               	skipz
  7087  0DA4  2D9F               	goto	u338_25
  7088  0DA5  0871               	movf	___awdiv@divisor+1,w
  7089  0DA6  0273               	subwf	___awdiv@dividend+1,w
  7090  0DA7  1D03               	skipz
  7091  0DA8  2DAB               	goto	u339_25
  7092  0DA9  0870               	movf	___awdiv@divisor,w
  7093  0DAA  0272               	subwf	___awdiv@dividend,w
  7094  0DAB                     u339_25:	
  7095  0DAB  1C03               	skipc
  7096  0DAC  2DB4               	goto	i1l2663
  7097  0DAD  0870               	movf	___awdiv@divisor,w
  7098  0DAE  02F2               	subwf	___awdiv@dividend,f
  7099  0DAF  0871               	movf	___awdiv@divisor+1,w
  7100  0DB0  1C03               	skipc
  7101  0DB1  03F3               	decf	___awdiv@dividend+1,f
  7102  0DB2  02F3               	subwf	___awdiv@dividend+1,f
  7103  0DB3  1477               	bsf	___awdiv@quotient,0
  7104  0DB4                     i1l2663:	
  7105  0DB4  3001               	movlw	1
  7106  0DB5                     u340_25:	
  7107  0DB5  1003               	clrc
  7108  0DB6  0CF1               	rrf	___awdiv@divisor+1,f
  7109  0DB7  0CF0               	rrf	___awdiv@divisor,f
  7110  0DB8  3EFF               	addlw	-1
  7111  0DB9  1D03               	skipz
  7112  0DBA  2DB5               	goto	u340_25
  7113  0DBB  3001               	movlw	1
  7114  0DBC  02F5               	subwf	___awdiv@counter,f
  7115  0DBD  1D03               	btfss	3,2
  7116  0DBE  2D9E               	goto	i1l2657
  7117  0DBF                     i1l2667:	
  7118  0DBF  0876               	movf	___awdiv@sign,w
  7119  0DC0  1903               	btfsc	3,2
  7120  0DC1  2DC7               	goto	i1l2671
  7121  0DC2  09F7               	comf	___awdiv@quotient,f
  7122  0DC3  09F8               	comf	___awdiv@quotient+1,f
  7123  0DC4  0AF7               	incf	___awdiv@quotient,f
  7124  0DC5  1903               	skipnz
  7125  0DC6  0AF8               	incf	___awdiv@quotient+1,f
  7126  0DC7                     i1l2671:	
  7127  0DC7  0878               	movf	___awdiv@quotient+1,w
  7128  0DC8  01F1               	clrf	?___awdiv+1
  7129  0DC9  07F1               	addwf	?___awdiv+1,f
  7130  0DCA  0877               	movf	___awdiv@quotient,w
  7131  0DCB  01F0               	clrf	?___awdiv
  7132  0DCC  07F0               	addwf	?___awdiv,f
  7133  0DCD  0008               	return
  7134  0DCE                     __end_of___awdiv:	
  7135                           
  7136                           	psect	text38
  7137  08C9                     __ptext38:	
  7138 ;; *************** function _USARTReceiveChar *****************
  7139 ;; Defined at:
  7140 ;;		line 86 in file "main.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;		None
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  USARTData       1    4[COMMON] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      unsigned char 
  7147 ;; Registers used:
  7148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7154 ;;      Params:         0       0       0       0       0
  7155 ;;      Locals:         1       0       0       0       0
  7156 ;;      Temps:          1       0       0       0       0
  7157 ;;      Totals:         2       0       0       0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    2
  7161 ;; This function calls:
  7162 ;;		i1_USARTWriteString
  7163 ;; This function is called by:
  7164 ;;		_ISR
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _USARTReceiveChar
  7170  08C9                     _USARTReceiveChar:	
  7171                           
  7172                           ;main.c: 87: unsigned char USARTData;
  7173                           ;main.c: 89: if (!OERR)
  7174                           
  7175                           ;incstack = 0
  7176 ;; hardware stack exceeded
  7177                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7178  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  7179  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  7180  08CB  1898               	btfsc	24,1	;volatile
  7181  08CC  28D2               	goto	i1l2459
  7182                           
  7183                           ;main.c: 90: {
  7184                           ;main.c: 91: USARTData = RCREG;
  7185  08CD  081A               	movf	26,w	;volatile
  7186  08CE  00F3               	movwf	??_USARTReceiveChar
  7187  08CF  0873               	movf	??_USARTReceiveChar,w
  7188  08D0  00F4               	movwf	USARTReceiveChar@USARTData
  7189  08D1  28E1               	goto	i1l2467
  7190  08D2                     i1l2459:	
  7191                           ;main.c: 93: } else {
  7192                           
  7193                           ;main.c: 92: PIR1bits.RCIF = 0;
  7194                           
  7195                           
  7196                           ;main.c: 94: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7197  08D2  302D               	movlw	low (STR_1-__stringbase)
  7198  08D3  00F1               	movwf	i1USARTWriteString@str
  7199  08D4  3080               	movlw	128
  7200  08D5  00F2               	movwf	i1USARTWriteString@str+1
  7201  08D6  120A  158A  213D   	fcall	i1_USARTWriteString
  7202                           
  7203                           ;main.c: 96: RCSTAbits.CREN = 0;
  7204  08D9  1283               	bcf	3,5	;RP0=0, select bank0
  7205  08DA  1303               	bcf	3,6	;RP1=0, select bank0
  7206  08DB  1218               	bcf	24,4	;volatile
  7207                           
  7208                           ;main.c: 97: USARTData = RCREG;
  7209  08DC  081A               	movf	26,w	;volatile
  7210  08DD  00F3               	movwf	??_USARTReceiveChar
  7211  08DE  0873               	movf	??_USARTReceiveChar,w
  7212  08DF  00F4               	movwf	USARTReceiveChar@USARTData
  7213                           
  7214                           ;main.c: 98: RCSTAbits.CREN = 1;
  7215  08E0  1618               	bsf	24,4	;volatile
  7216  08E1                     i1l2467:	
  7217                           
  7218                           ;main.c: 99: PIR1bits.RCIF = 0;
  7219  08E1  128C               	bcf	12,5	;volatile
  7220                           
  7221                           ;main.c: 100: }
  7222                           ;main.c: 102: return (USARTData);
  7223  08E2  0874               	movf	USARTReceiveChar@USARTData,w
  7224  08E3  0008               	return
  7225  08E4                     __end_of_USARTReceiveChar:	
  7226                           
  7227                           	psect	text39
  7228  093D                     __ptext39:	
  7229 ;; *************** function i1_USARTWriteString *****************
  7230 ;; Defined at:
  7231 ;;		line 75 in file "main.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  str             2    1[COMMON] PTR const unsigned char 
  7234 ;;		 -> STR_6(5), sendString@array(40), STR_1(40), 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;		None               void
  7239 ;; Registers used:
  7240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7246 ;;      Params:         2       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0
  7249 ;;      Totals:         2       0       0       0       0
  7250 ;;Total ram usage:        2 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    1
  7253 ;; This function calls:
  7254 ;;		i1_USARTWriteChar
  7255 ;; This function is called by:
  7256 ;;		_USARTReceiveChar
  7257 ;;		_sendString
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function i1_USARTWriteString
  7263  093D                     i1_USARTWriteString:	
  7264  093D                     i1l2435:	
  7265                           ;main.c: 77: while (*str != '\0') {
  7266                           
  7267                           ;incstack = 0
  7268 ;; hardware stack exceeded
  7269                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7270                           
  7271  093D  0872               	movf	i1USARTWriteString@str+1,w
  7272  093E  1283               	bcf	3,5	;RP0=0, select bank0
  7273  093F  1303               	bcf	3,6	;RP1=0, select bank0
  7274  0940  00FF               	movwf	127
  7275  0941  0871               	movf	i1USARTWriteString@str,w
  7276  0942  0084               	movwf	4
  7277  0943  120A  158A  2000  120A  158A  	fcall	stringtab
  7278  0948  3800               	iorlw	0
  7279  0949  1903               	btfsc	3,2
  7280  094A  0008               	return
  7281                           
  7282                           ;main.c: 79: USARTWriteChar(*str);
  7283  094B  0872               	movf	i1USARTWriteString@str+1,w
  7284  094C  1283               	bcf	3,5	;RP0=0, select bank0
  7285  094D  1303               	bcf	3,6	;RP1=0, select bank0
  7286  094E  00FF               	movwf	127
  7287  094F  0871               	movf	i1USARTWriteString@str,w
  7288  0950  0084               	movwf	4
  7289  0951  120A  158A  2000  120A  158A  	fcall	stringtab
  7290  0956  160A  118A  27C7  120A  158A  	fcall	i1_USARTWriteChar
  7291                           
  7292                           ;main.c: 80: str++;
  7293  095B  3001               	movlw	1
  7294  095C  07F1               	addwf	i1USARTWriteString@str,f
  7295  095D  1803               	skipnc
  7296  095E  0AF2               	incf	i1USARTWriteString@str+1,f
  7297  095F  293D               	goto	i1l2435
  7298  0960                     __end_ofi1_USARTWriteString:	
  7299                           
  7300                           	psect	text40
  7301  17C7                     __ptext40:	
  7302 ;; *************** function i1_USARTWriteChar *****************
  7303 ;; Defined at:
  7304 ;;		line 68 in file "main.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  USARTData       1    wreg     unsigned char 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  USARTData       1    0[COMMON] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;		None               void
  7311 ;; Registers used:
  7312 ;;		wreg
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7318 ;;      Params:         0       0       0       0       0
  7319 ;;      Locals:         1       0       0       0       0
  7320 ;;      Temps:          0       0       0       0       0
  7321 ;;      Totals:         1       0       0       0       0
  7322 ;;Total ram usage:        1 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_active
  7328 ;;		i1_USARTWriteString
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function i1_USARTWriteChar
  7334  17C7                     i1_USARTWriteChar:	
  7335                           
  7336                           ;incstack = 0
  7337 ;; hardware stack exceeded
  7338                           ; Regs used in i1_USARTWriteChar: [wreg]
  7339                           ;i1USARTWriteChar@USARTData stored from wreg
  7340  17C7  00F0               	movwf	i1USARTWriteChar@USARTData
  7341  17C8                     i1l68:	
  7342                           ;main.c: 69: while (!PIR1bits.TXIF);
  7343                           
  7344  17C8  1283               	bcf	3,5	;RP0=0, select bank0
  7345  17C9  1303               	bcf	3,6	;RP1=0, select bank0
  7346  17CA  1E0C               	btfss	12,4	;volatile
  7347  17CB  2FC8               	goto	i1l68
  7348                           
  7349                           ;main.c: 70: TXREG = USARTData;
  7350  17CC  0870               	movf	i1USARTWriteChar@USARTData,w
  7351  17CD  0099               	movwf	25	;volatile
  7352  17CE  0008               	return
  7353  17CF                     __end_ofi1_USARTWriteChar:	
  7354  007E                     btemp	set	126	;btemp
  7355  007E                     wtemp	set	126
  7356  007E                     wtemp0	set	126
  7357  0080                     wtemp1	set	128
  7358  0082                     wtemp2	set	130
  7359  0084                     wtemp3	set	132
  7360  0086                     wtemp4	set	134
  7361  0088                     wtemp5	set	136
  7362  007F                     wtemp6	set	127
  7363  007E                     ttemp	set	126
  7364  007E                     ttemp0	set	126
  7365  0081                     ttemp1	set	129
  7366  0084                     ttemp2	set	132
  7367  0087                     ttemp3	set	135
  7368  007F                     ttemp4	set	127
  7369  007E                     ltemp	set	126
  7370  007E                     ltemp0	set	126
  7371  0082                     ltemp1	set	130
  7372  0086                     ltemp2	set	134
  7373  0080                     ltemp3	set	128


Data Sizes:
    Strings     81
    Constant    44
    Data        18
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      79
    BANK1            80     17      57
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK0[2]), ISR@status(BANK0[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_7(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S671$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK1[17]), STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[2]), 
		 -> STR_2(CODE[7]), progressBar@aux(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    progressBar@result	PTR unsigned char  size(1) Largest target is 16
		 -> progressBar@aux(BANK0[16]), 

    sendString@envio	PTR unsigned char  size(1) Largest target is 40
		 -> sendString@array(BANK0[40]), 

    sendString@send	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_6(CODE[5]), sendString@array(BANK0[40]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod
    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    _sendString->i1_USARTWriteString
    _progressBar->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    _active->i1_USARTWriteChar
    ___awtoft->___ftpack
    ___awmod->___awdiv
    _USARTReceiveChar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_lcd_escreve_string
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTWriteString->_USARTWriteChar
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3727
                                             14 BANK1      3     3      0
                            _ADCInit
                           _LCDClear
                   _USARTWriteString
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_string                                   2     0      2    1986
                                             12 BANK1      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             3     3      0    1661
                                              9 BANK1      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           4     3      1     951
                                              5 BANK1      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (1) _init_lcd_4bit                                        3     3      0     868
                                              5 BANK1      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (1) _USARTWriteString                                     2     0      2     207
                                              1 BANK1      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTWriteChar                                       1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             2     2      0     666
                                              5 BANK1      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_envia_byte                                       3     2      1     666
                                              2 BANK1      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_nibble                                     2     2      0      88
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 23    23      0   24595
                                             50 BANK0     23    23      0
                   _USARTReceiveChar
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             _active
                               _ftoa
                        _progressBar
                         _sendString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (7) _sendString                                          45    45      0     474
                                              3 COMMON     1     1      0
                                              0 BANK0     44    44      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (7) _progressBar                                         25    23      2    1093
                                              0 BANK0     25    23      2
               i1_lcd_escreve_string
 ---------------------------------------------------------------------------------
 (7) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (8) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (7) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (8) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_nibble                                   2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (8) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (7) _active                                               1     1      0     154
                                              1 COMMON     1     1      0
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              7     3      4     680
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              9     5      4     684
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (7) _USARTReceiveChar                                     2     2      0     143
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteString                                   2     0      2     119
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _LCDClear
     _lcd_envia_byte
       _lcd_envia_nibble
   _USARTWriteString
     _USARTWriteChar
   _init_lcd_4bit
     _lcd_envia_byte
       _lcd_envia_nibble
     _lcd_envia_nibble
   _lcd_escreve_string
     _lcd_putc
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_gotoxy
         _lcd_envia_byte
           _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _active
     i1_USARTWriteChar
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _progressBar
     i1_lcd_escreve_string
       i1_lcd_putc
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
         i1_lcd_gotoxy
           i1_lcd_envia_byte
             i1_lcd_envia_nibble
   _sendString
     i1_USARTWriteString
       i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     11      39       7       71.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      96      12        0.0%
ABS                  0      0      96       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 05 20:19:25 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l68 0892  
                 ___awdiv@sign 0076                             fsr 0004            ___wmul@multiplicand 0072  
                 ___ftadd@exp1 0026                   ___ftadd@exp2 0025                   ___ftadd@sign 0024  
                          l142 0F6F                            l173 0A74                            l174 0A77  
            i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000                            _ISR 0279  
                          fsr0 0004                __end_of_ADCInit 08AF                            indf 0000  
                 ___awmod@sign 0021                   __CFG_FOSC$HS 0000                     i1_lcd_putc 0ACC  
                  lcd_gotoxy@x 00BF                    lcd_gotoxy@y 00BD                   __CFG_LVP$OFF 0000  
                         ?_ISR 0070                   ___ftdiv@cntr 003A                   ___ftdiv@sign 003F  
                         l2001 090C                           l2003 090D                           l2181 0B75  
                         l2173 0B4B                           l2177 0B5F                           l2185 0B80  
                         l2451 09FC                           l2179 0B6A                           l2607 0ECA  
                         l2565 0A2D                           l2903 0F63                           l2599 0EAF  
                         STR_1 083C                           STR_2 087F                           STR_3 088B  
                         STR_4 0864                           STR_5 0864                           STR_6 0886  
                         STR_7 0874                           u1995 0A80                           u3907 0F34  
                         u3917 0F53                           u3927 0B59                           u3937 0EA3  
                         u3947 0EBB                           i1l68 17C8                           u3957 0B17  
                         u3967 0B2C                           u3887 0F11                           u3977 0B41  
                         u3897 0F24                           _OERR 00C1                           u3987 0A68  
                         u3997 0D6D                   __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 089C  
                         _main 0EEF                           _ftoa 0618                   ___ftpack@arg 0070  
                 ___ftpack@exp 0073                           btemp 007E                  __CFG_BOREN$ON 0000  
                         ltemp 007E                           start 0012                           ttemp 007E  
                         wtemp 007E                   ___ftmul@cntr 002E                   ___ftmul@sign 002F  
                        ??_ISR 0052               __end_of_LCDClear 0B47                   ___fttol@exp1 003D  
                 ___fttol@lval 0039     __end_of_lcd_escreve_string 0A5E                          ?_main 0070  
                        ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A                __end_of___awdiv 0DCE  
              __end_of___ftadd 0545                  __CFG_WDTE$OFF 0000                __end_of___awmod 0CC2  
    __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 078A                __end_of___ftneg 17D7  
              __end_of___lldiv 0E89                __end_of___ftmul 0618                ___awdiv@divisor 0070  
              __end_of___llmod 0C73                __end_of___ftsub 0900                __end_of___fttol 1000  
                        i1l132 0431                          i1l253 010A                          i1l173 09E1  
                        i1l174 09E4                          i1l520 07C0                          i1l256 0128  
                        i1l526 07D9                          i1l359 096A                          i1l549 04E6  
              ___awdiv@counter 0075                          _RCREG 001A                          _SPBRG 0099  
          i1lcd_envia_nibble@n 0071                          _TRISA 0085                          _TXREG 0019  
                __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D           i1_lcd_escreve_string 0983  
                ___awtoft@sign 007D                __end_of_dpowers 0838                __end_of_isdigit 0800  
                ___ftpack@sign 0074                          ftoa@f 0044                          ftoa@l 004D  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                   progressBar@i 0036  
              ?_USARTWriteChar 0070                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __end_of_sprintf 0279  
             i1_lcd_envia_byte 09D1                __initialization 0015                   i1_lcd_gotoxy 08AF  
                 __end_of_main 0F72                   __end_of_ftoa 06D2                    i1lcd_putc@c 007B  
                    ??_ADCInit 00B8      __size_of_lcd_envia_nibble 0059                         ??_main 00C6  
                       ??_ftoa 0048                  ___fttol@sign1 0038             i1_USARTWriteString 093D  
                       ISR@buf 0058                         ISR@per 0068                         ISR@pre 005D  
      USARTWriteChar@USARTData 00B8          ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             ___awdiv@dividend 0072               __end_of___awtoft 093D               __end_of___ftpack 07F2  
          ?i1_USARTWriteString 0071               __end_of___lltoft 09D1                         i1l2021 0962  
                       i1l2111 0E4B                         i1l2015 07FE                         i1l2201 0079  
                       i1l2043 046E                         i1l2123 0E80                         i1l2061 0497  
                       i1l2109 0E3B                         i1l2133 0C2F                         i1l2221 0105  
                       i1l2071 04BD                         i1l2039 0467                         i1l2119 0E73  
                       i1l2135 0C3F                         i1l2143 0C6A                         i1l2223 010C  
                       i1l2081 04E2                         i1l2073 04C1                         i1l2049 047D  
                       i1l2401 0FCE                         i1l2233 013A                         i1l2209 00B7  
                       i1l2161 0AF2                         i1l2153 0ACE                         i1l2323 0573  
                       i1l2067 04AC                         i1l2411 0FE9                         i1l2139 0C5D  
                       i1l2243 015C                         i1l2227 0111                         i1l2219 00C9  
                       i1l2317 055D                         i1l2085 04F8                         i1l2069 04B8  
                       i1l2157 0AE0                         i1l2165 0AFB                         i1l2351 05EA  
                       i1l2335 05B2                         i1l2079 04D6                         i1l2415 0FF7  
                       i1l2407 0FDB                         i1l2423 09AA                         i1l2263 01D0  
                       i1l2255 019E                         i1l2247 0162                         i1l2159 0AE9  
                       i1l2505 0BCD                         i1l2089 050A                         i1l2409 0FE6  
                       i1l2425 09BC                         i1l2435 093D                         i1l2347 05DA  
                       i1l2339 05C2                         i1l2099 052D                         i1l2283 0265  
                       i1l2267 01F1                         i1l2259 01B6                         i1l2195 0064  
                       i1l2443 0983                         i1l2531 0CC7                         i1l2701 0CA8  
                       i1l2381 0F8C                         i1l2277 020B                         i1l2269 01F5  
                       i1l2285 0044                         i1l2533 0CFA                         i1l2525 0CE5  
                       i1l2295 0DF5                         i1l2287 0274                         i1l2551 0BF2  
                       i1l2519 0CD7                         i1l2705 0CB3                         i1l2721 0926  
                       i1l2481 0B9C                         i1l2553 0C08                         i1l2537 0D0C  
                       i1l2529 0CF3                         i1l2467 08E1                         i1l2459 08D2  
                       i1l2731 06EA                         i1l2299 0E1C                         i1l2645 0D88  
                       i1l2709 0CBB                         u202_25 079E                         i1l2493 0BB5  
                       i1l2821 0415                         i1l2671 0DC7                         i1l2663 0DB4  
                       i1l2655 0D90                         i1l2639 0D7D                         i1l2751 0745  
                       i1l2487 0BA9                         i1l2399 0FBE                         i1l2657 0D9E  
                       i1l1961 0792                         i1l2737 0700                         i1l2577 0651  
                       i1l2817 0404                         i1l2825 0425                         i1l2667 0DBF  
                       i1l2683 0C7F                         i1l2499 0BC1                         i1l1965 0799  
                       i1l2695 0C8C                         i1l2687 0C86                         i1l1975 07C5  
                       i1l1967 07A5                         i1l2759 0764                         i1l1991 08B9  
                       i1l2697 0C9A                         i1l1977 07CF                         i1l1969 07AA  
                       i1l1993 08BA                         u204_25 07B9                         u206_25 07C8  
                       u302_25 0FBF                         u231_25 04AD                         u216_25 096B  
                       u400_27 0C1D                         u209_25 07E0                         u305_25 0FDD  
                       u217_25 0972                         u401_27 0ADA                         u234_25 04C2  
                       u402_27 09D7                         u251_25 0C33                         u403_27 0AC6  
                       u340_25 0DB5                         u228_25 0498                         u308_25 09AF  
                       u244_25 0E3F                         u324_25 0D03                         u325_20 0BE5  
                       u237_25 04D7                         u253_25 0C4D                         u246_25 0E4D  
                       u254_25 0C5E                         u270_25 01AD                         u247_25 0E62  
                       u271_25 01C7                         u336_25 0D93                         u248_25 0E74  
                       u272_25 01E1                         u281_21 0E0F                         u281_22 0E10  
                       u281_23 0E15                         u281_24 0E16                         u338_25 0D9F  
                       u346_25 0C8F                         u290_25 05CB                         u339_25 0DAB  
                       u355_25 0712                         u275_25 0216                         u267_25 0165  
                       u363_25 03FE                         u348_25 0CA0                         u356_25 0724  
                       u276_25 0271                         u268_25 0194                         u364_25 040F  
                       u349_25 0CA9                         u357_25 0746                         u285_25 057F  
                       u197_25 09EB                         u358_25 0757                         u294_25 05EB  
                       u286_25 0591                         u279_21 0DE8                         u279_22 0DE9  
                       u279_23 0DEE                         u279_24 0DEF                         u359_25 0765  
                       u295_25 05F3                         u289_25 05C3                         u299_25 0F93  
    i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066               __end_of_lcd_putc 0B8E  
                       ___ftge 0DCE                         ___wmul 0960                      ??___awdiv 0074  
                    ??___ftadd 0020                      ??___awmod 007D                         _active 0B8E  
                    ??___ftdiv 0036                      ??___ftneg 0073                      ??___lldiv 0078  
                    ??___ftmul 0026                      ??___llmod 0028                      ??___ftsub 007E  
                    ??___fttol 0034           ??i1_USARTWriteString 0073       __end_of_USARTWriteString 0A2D  
             ___awdiv@quotient 0077                ___awmod@divisor 0079               ??_lcd_envia_byte 00BB  
              ___awmod@counter 0020                         ftoa@cp 0051          ___ftmul@f3_as_product 002B  
                    ??_isdigit 0070                         saved_w 007E          i1lcd_escreve_string@y 007C  
                    ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 0ACC              ?_USARTReceiveChar 0070  
                    ?_LCDClear 0070        __end_of__initialization 0039             ??_USARTReceiveChar 0073  
                   ___ftadd@f1 0078                     ___ftadd@f2 007B                     ___ftge@ff1 0070  
                   ___ftge@ff2 0073                     ___ftdiv@f1 0033                     ___ftdiv@f2 0030  
                   ___ftdiv@f3 003B                   ?_progressBar 0020                     ___ftneg@f1 0070  
                   ___awtoft@c 0078                     ___ftmul@f1 0020                     ___ftmul@f2 0023  
                   ___ftsub@f1 002A                     ___ftsub@f2 0027                     ___fttol@f1 0030  
               __pcstackCOMMON 0070                   __pidataBANK0 088D                   __pidataBANK1 17DF  
          __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078               i1_USARTWriteChar 17C7  
                _init_lcd_4bit 0E89         ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 00C0  
                 sprintf@width 003F                     __pbssBANK0 0069                     __pbssBANK1 00A0  
                   ??_LCDClear 00BD                      ISR@input2 0065                      ISR@preint 0060  
                    ISR@status 0059      USARTReceiveChar@USARTData 0074                     __pmaintext 0EEF  
                      ?___ftge 0070                        ?___wmul 0070                        ?_active 0070  
                   __pintentry 0004                        _ADCInit 089C                      ?___awtoft 0078  
                    ?___ftpack 0070               _lcd_envia_nibble 0D1A                      ?___lltoft 0078  
               ?_init_lcd_4bit 0070                     _lcd_gotoxy 0900       __end_ofi1_lcd_envia_byte 09FC  
             ??_USARTWriteChar 00B8                    sendString@x 004A             _lcd_escreve_string 0A2D  
                    ?_lcd_putc 0070                     __stringtab 0800            ?_lcd_escreve_string 00C4  
                      _Display 00A0                      _ADCResult 0069                __size_of___ftge 005D  
                      ___awdiv 0D73          i1USARTWriteString@str 0071                        ___ftadd 043E  
                      ___awmod 0C73                        ___ftdiv 06D2                        ___ftneg 17CF  
                      ___lldiv 0E2B                __size_of___wmul 0023                        ___ftmul 0545  
                      ___llmod 0C25                        ___ftsub 08E4                        ___fttol 0F72  
              __size_of_active 004B                     ??___awtoft 007B                     ??___ftpack 0075  
                      _flag_an 006D                     ??___lltoft 007C                        __ptext1 0A2D  
                      __ptext2 0B47                        __ptext3 0900                        __ptext4 0E89  
                      __ptext5 09FC                        __ptext6 088F                        __ptext7 0B07  
                      __ptext8 0A5E                        __ptext9 0D1A           ??_lcd_escreve_string 00C6  
                 __size_of_ISR 01C5                        _dpowers 0810                        _isdigit 07F2  
             ___awmod@dividend 007B                lcd_envia_byte@n 00BA                   ??i1_lcd_putc 0079  
                   _recipiente 006B                        _sprintf 003D                        clrloop0 17D8  
                   ??_lcd_putc 00C1           end_of_initialization 0039                        ftoa@buf 00A7  
                      ftoa@rem 0049        i1lcd_envia_byte@address 0074                     _sendString 0CC2  
              ___lldiv@divisor 0070                 progressBar@aux 0026                ___lldiv@counter 007D  
                    _RCSTAbits 0018           __size_of_progressBar 004C             __end_ofi1_lcd_putc 0B07  
              ??_init_lcd_4bit 00BD              ?_USARTWriteString 00B9                      _PORTAbits 0005  
                    _PORTBbits 0006                      _PORTCbits 0007                      _PORTDbits 0008  
           ??_USARTWriteString 00BB                      _TRISBbits 0086                      _TRISCbits 0087  
                    _TRISDbits 0088                    ?_lcd_gotoxy 00BD                _LCD_INIT_STRING 0838  
                  ___ftdiv@exp 003E       __end_ofi1_USARTWriteChar 17CF                      _TXSTAbits 0098  
            __size_of_LCDClear 0040                    ___ftmul@exp 002A             i1_lcd_envia_nibble 0A93  
    __size_of_USARTReceiveChar 001B                 __end_of___ftge 0E2B    __size_ofi1_USARTWriteString 0023  
               __end_of___wmul 0983                 __end_of_active 0BD9            ?i1_lcd_envia_nibble 0070  
          start_initialization 0015                    __end_of_ISR 043E                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075           ??i1_lcd_envia_nibble 0070  
                  ?_sendString 0070       __end_of_lcd_envia_nibble 0D73          lcd_envia_byte@address 00BC  
              ___llmod@divisor 0020                ___llmod@counter 0029                       ??___ftge 0076  
          __size_of_lcd_gotoxy 001C                       ??___wmul 0074                     init_fetch0 17EF  
                     ??_active 0071                    __pdataBANK0 006D                    __pdataBANK1 00C9  
                     ?_ADCInit 0070        __end_of_LCD_INIT_STRING 083C              __size_of___awtoft 0021  
            __size_of___ftpack 0068              __size_of___lltoft 002B                      ___latbits 0002  
                __pcstackBANK0 0020                  __pcstackBANK1 00B8            __end_of__stringdata 088D  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                     ISR@status2 005B  
                     ISR@input 0062                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___awdiv 0070                       ?___ftadd 0078                       ?___awmod 0079  
                     ?___ftdiv 0030                       ?___ftneg 0070                       ?___lldiv 0070  
                     ?___ftmul 0020                       ?___llmod 0020                       ?___ftsub 0027  
                     ?___fttol 0030                      __pstrings 0800            __size_of_sendString 0058  
                     ?_isdigit 0070                 init_lcd_4bit@i 00BF                       ?_sprintf 002A  
            progressBar@preint 0020              progressBar@result 0038                       _LCDClear 0B07  
            interrupt_function 0004                 ___wmul@product 0074                      clear_ram0 17D7  
                     _PIE1bits 008C              lcd_envia_nibble@n 00B9                 ??i1_lcd_gotoxy 0076  
                     _PIR1bits 000C               _USARTReceiveChar 08C9               __size_of_ADCInit 0013  
                   _ADCON0bits 001F                    __stringbase 080F                     _ADCON1bits 009F  
                  __stringdata 083C              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 00C3                   ??_lcd_gotoxy 00BE            lcd_escreve_string@y 00C4  
    __size_of_USARTWriteString 0031              ?i1_USARTWriteChar 0070                  ??_progressBar 0022  
      __size_of_USARTWriteChar 000D             ??i1_USARTWriteChar 0070             __end_of_lcd_gotoxy 091C  
             __size_of___awdiv 005B               __size_of___ftadd 0107               __size_of___awmod 004F  
             __size_of___ftdiv 00B8               __size_of___ftneg 0008               __size_of___lldiv 005E  
             __size_of___ftmul 00D3               __size_of___llmod 004E               __size_of___ftsub 001C  
             __size_of___fttol 008E                       ___awtoft 091C                       ___ftpack 078A  
           __end_of__stringtab 0810                       ___lltoft 09A6                    _isdigit$879 0070  
        __end_of_init_lcd_4bit 0EEF               progressBar@F1341 00C9               __size_of_isdigit 000E  
                  active@input 0071                       __ptext10 089C                       __ptext11 0279  
                     __ptext20 003D                       __ptext12 0CC2                       __ptext21 07F2  
                     __ptext13 0BD9                       __ptext30 0545                       __ptext22 0960  
                     __ptext14 0983                       __ptext31 0DCE                       __ptext23 0C25  
                     __ptext15 0ACC                       __ptext40 17C7                       __ptext32 0B8E  
                     __ptext24 0E2B                       __ptext16 08AF                       __ptext33 06D2  
                     __ptext25 09A6                       __ptext17 09D1                       __ptext34 091C  
                     __ptext26 0F72                       __ptext18 0A93                       __ptext35 078A  
                     __ptext27 08E4                       __ptext19 0618                       __ptext36 0C73  
                     __ptext28 043E                       __ptext37 0D73                       __ptext29 17CF  
                     __ptext38 08C9                       __ptext39 093D                 _lcd_envia_byte 0A5E  
                     _lcd_putc 0B47               __size_of_sprintf 023C                   ??_sendString 0073  
                __size_of_main 0083                  __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070  
           ??_lcd_envia_nibble 00B8     __end_ofi1_USARTWriteString 0960            __end_of_progressBar 0C25  
           __end_of_sendString 0D1A                     _INTCONbits 000B         __end_of_lcd_envia_byte 0A93  
         __end_ofi1_lcd_gotoxy 08C9                       init_ram0 17F3                       isdigit@c 0071  
                     intlevel1 0000                      sprintf@ap 0039                      sprintf@sp 003E  
  __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074                      stringcode 080A  
              sendString@array 0020                sendString@envio 0048   __end_ofi1_lcd_escreve_string 09A6  
    __size_ofi1_lcd_envia_byte 002B            USARTWriteString@str 00B9                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                ?_lcd_envia_byte 00BA  
                     stringdir 080A                       stringtab 0800                 sendString@send 0049  
     __end_of_USARTReceiveChar 08E4               _USARTWriteString 09FC                 _USARTWriteChar 088F  
                  _progressBar 0BD9  
