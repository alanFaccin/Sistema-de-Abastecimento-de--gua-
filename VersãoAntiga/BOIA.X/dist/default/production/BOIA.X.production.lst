

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Nov 04 00:31:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0086                     	;# 
   159  0087                     	;# 
   160  0088                     	;# 
   161  0089                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181                           
   182                           	psect	idataBANK0
   183  0803                     __pidataBANK0:	
   184                           
   185                           ;initializer for _flag_an
   186  0803  34FF               	retlw	255
   187  0804  34FF               	retlw	255
   188                           
   189                           	psect	idataBANK1
   190  173E                     __pidataBANK1:	
   191                           
   192                           ;initializer for ISR@F1351
   193  173E  3420               	retlw	32
   194  173F  3420               	retlw	32
   195  1740  3420               	retlw	32
   196  1741  3420               	retlw	32
   197  1742  3420               	retlw	32
   198  1743  3420               	retlw	32
   199  1744  3420               	retlw	32
   200  1745  3420               	retlw	32
   201  1746  3420               	retlw	32
   202  1747  3420               	retlw	32
   203  1748  3420               	retlw	32
   204  1749  3420               	retlw	32
   205  174A  3420               	retlw	32
   206  174B  3420               	retlw	32
   207  174C  3420               	retlw	32
   208  174D  3420               	retlw	32
   209                           
   210                           	psect	strings
   211  0700                     __pstrings:	
   212  0700                     stringtab:	
   213  0700                     __stringtab:	
   214                           
   215                           ;	String table - string pointers are 1 byte each
   216  0700  1BFF               	btfsc	btemp+1,7
   217  0701  2F0A               	ljmp	stringcode
   218  0702  1383               	bcf	3,7
   219  0703  187F               	btfsc	btemp+1,0
   220  0704  1783               	bsf	3,7
   221  0705  0800               	movf	0,w
   222  0706  0A84               	incf	4,f
   223  0707  1903               	skipnz
   224  0708  0AFF               	incf	btemp+1,f
   225  0709  0008               	return
   226  070A                     stringcode:	
   227  070A                     stringdir:	
   228  070A  3007               	movlw	high stringdir
   229  070B  008A               	movwf	10
   230  070C  0804               	movf	4,w
   231  070D  0A84               	incf	4,f
   232  070E  0782               	addwf	2,f
   233  070F                     __stringbase:	
   234  070F  3400               	retlw	0
   235  0710                     __end_of__stringtab:	
   236  0710                     _dpowers:	
   237  0710  3401               	retlw	1
   238  0711  3400               	retlw	0
   239  0712  3400               	retlw	0
   240  0713  3400               	retlw	0
   241  0714  340A               	retlw	10
   242  0715  3400               	retlw	0
   243  0716  3400               	retlw	0
   244  0717  3400               	retlw	0
   245  0718  3464               	retlw	100
   246  0719  3400               	retlw	0
   247  071A  3400               	retlw	0
   248  071B  3400               	retlw	0
   249  071C  34E8               	retlw	232
   250  071D  3403               	retlw	3
   251  071E  3400               	retlw	0
   252  071F  3400               	retlw	0
   253  0720  3410               	retlw	16
   254  0721  3427               	retlw	39
   255  0722  3400               	retlw	0
   256  0723  3400               	retlw	0
   257  0724  34A0               	retlw	160
   258  0725  3486               	retlw	134
   259  0726  3401               	retlw	1
   260  0727  3400               	retlw	0
   261  0728  3440               	retlw	64
   262  0729  3442               	retlw	66
   263  072A  340F               	retlw	15
   264  072B  3400               	retlw	0
   265  072C  3480               	retlw	128
   266  072D  3496               	retlw	150
   267  072E  3498               	retlw	152
   268  072F  3400               	retlw	0
   269  0730  3400               	retlw	0
   270  0731  34E1               	retlw	225
   271  0732  34F5               	retlw	245
   272  0733  3405               	retlw	5
   273  0734  3400               	retlw	0
   274  0735  34CA               	retlw	202
   275  0736  349A               	retlw	154
   276  0737  343B               	retlw	59
   277  0738                     __end_of_dpowers:	
   278  0738                     _LCD_INIT_STRING:	
   279  0738  341C               	retlw	28
   280  0739  340C               	retlw	12
   281  073A  3401               	retlw	1
   282  073B  3406               	retlw	6
   283  073C                     __end_of_LCD_INIT_STRING:	
   284  001F                     _ADCON0bits	set	31
   285  001E                     _ADRESH	set	30
   286  000B                     _INTCONbits	set	11
   287  000C                     _PIR1bits	set	12
   288  0005                     _PORTAbits	set	5
   289  0006                     _PORTBbits	set	6
   290  0007                     _PORTCbits	set	7
   291  0008                     _PORTDbits	set	8
   292  001A                     _RCREG	set	26
   293  0018                     _RCSTAbits	set	24
   294  0019                     _TXREG	set	25
   295  00C1                     _OERR	set	193
   296  009F                     _ADCON1bits	set	159
   297  009E                     _ADRESL	set	158
   298  008C                     _PIE1bits	set	140
   299  0099                     _SPBRG	set	153
   300  0085                     _TRISA	set	133
   301  0086                     _TRISBbits	set	134
   302  0087                     _TRISCbits	set	135
   303  0088                     _TRISDbits	set	136
   304  0098                     _TXSTAbits	set	152
   305  073C                     __stringdata:	
   306  073C                     STR_4:	
   307  073C  340A               	retlw	10
   308  073D  340D               	retlw	13
   309  073E  3420               	retlw	32	;' '
   310  073F  3445               	retlw	69	;'E'
   311  0740  346E               	retlw	110	;'n'
   312  0741  3474               	retlw	116	;'t'
   313  0742  3472               	retlw	114	;'r'
   314  0743  346F               	retlw	111	;'o'
   315  0744  3475               	retlw	117	;'u'
   316  0745  3420               	retlw	32	;' '
   317  0746  346E               	retlw	110	;'n'
   318  0747  3461               	retlw	97	;'a'
   319  0748  3420               	retlw	32	;' '
   320  0749  3466               	retlw	102	;'f'
   321  074A  3475               	retlw	117	;'u'
   322  074B  346E               	retlw	110	;'n'
   323  074C  3463               	retlw	99	;'c'
   324  074D  3461               	retlw	97	;'a'
   325  074E  346F               	retlw	111	;'o'
   326  074F  3420               	retlw	32	;' '
   327  0750  3464               	retlw	100	;'d'
   328  0751  3465               	retlw	101	;'e'
   329  0752  3420               	retlw	32	;' '
   330  0753  3449               	retlw	73	;'I'
   331  0754  346E               	retlw	110	;'n'
   332  0755  3474               	retlw	116	;'t'
   333  0756  3465               	retlw	101	;'e'
   334  0757  3472               	retlw	114	;'r'
   335  0758  3472               	retlw	114	;'r'
   336  0759  3475               	retlw	117	;'u'
   337  075A  3470               	retlw	112	;'p'
   338  075B  3463               	retlw	99	;'c'
   339  075C  3461               	retlw	97	;'a'
   340  075D  346F               	retlw	111	;'o'
   341  075E  3420               	retlw	32	;' '
   342  075F  3464               	retlw	100	;'d'
   343  0760  3461               	retlw	97	;'a'
   344  0761  3420               	retlw	32	;' '
   345  0762  3455               	retlw	85	;'U'
   346  0763  3453               	retlw	83	;'S'
   347  0764  3441               	retlw	65	;'A'
   348  0765  3452               	retlw	82	;'R'
   349  0766  3454               	retlw	84	;'T'
   350  0767  3400               	retlw	0
   351  0768                     STR_1:	
   352  0768  340A               	retlw	10
   353  0769  340D               	retlw	13
   354  076A  3420               	retlw	32	;' '
   355  076B  342D               	retlw	45	;'-'
   356  076C  342D               	retlw	45	;'-'
   357  076D  342D               	retlw	45	;'-'
   358  076E  342D               	retlw	45	;'-'
   359  076F  342D               	retlw	45	;'-'
   360  0770  342D               	retlw	45	;'-'
   361  0771  342D               	retlw	45	;'-'
   362  0772  3420               	retlw	32	;' '
   363  0773  3445               	retlw	69	;'E'
   364  0774  3453               	retlw	83	;'S'
   365  0775  3454               	retlw	84	;'T'
   366  0776  344F               	retlw	79	;'O'
   367  0777  3455               	retlw	85	;'U'
   368  0778  3452               	retlw	82	;'R'
   369  0779  344F               	retlw	79	;'O'
   370  077A  3420               	retlw	32	;' '
   371  077B  3444               	retlw	68	;'D'
   372  077C  3445               	retlw	69	;'E'
   373  077D  3420               	retlw	32	;' '
   374  077E  3450               	retlw	80	;'P'
   375  077F  3449               	retlw	73	;'I'
   376  0780  344C               	retlw	76	;'L'
   377  0781  3448               	retlw	72	;'H'
   378  0782  3441               	retlw	65	;'A'
   379  0783  3420               	retlw	32	;' '
   380  0784  342D               	retlw	45	;'-'
   381  0785  342D               	retlw	45	;'-'
   382  0786  342D               	retlw	45	;'-'
   383  0787  342D               	retlw	45	;'-'
   384  0788  342D               	retlw	45	;'-'
   385  0789  342D               	retlw	45	;'-'
   386  078A  342D               	retlw	45	;'-'
   387  078B  3420               	retlw	32	;' '
   388  078C  340A               	retlw	10
   389  078D  340D               	retlw	13
   390  078E  3420               	retlw	32	;' '
   391  078F  3400               	retlw	0
   392  0790                     STR_5:	
   393  0790  340A               	retlw	10
   394  0791  340D               	retlw	13
   395  0792  3420               	retlw	32	;' '
   396  0793  3443               	retlw	67	;'C'
   397  0794  3461               	retlw	97	;'a'
   398  0795  3472               	retlw	114	;'r'
   399  0796  3461               	retlw	97	;'a'
   400  0797  3463               	retlw	99	;'c'
   401  0798  3474               	retlw	116	;'t'
   402  0799  3465               	retlw	101	;'e'
   403  079A  3472               	retlw	114	;'r'
   404  079B  3420               	retlw	32	;' '
   405  079C  3444               	retlw	68	;'D'
   406  079D  3469               	retlw	105	;'i'
   407  079E  3467               	retlw	103	;'g'
   408  079F  3469               	retlw	105	;'i'
   409  07A0  3474               	retlw	116	;'t'
   410  07A1  3461               	retlw	97	;'a'
   411  07A2  3464               	retlw	100	;'d'
   412  07A3  346F               	retlw	111	;'o'
   413  07A4  3420               	retlw	32	;' '
   414  07A5  343A               	retlw	58	;':'
   415  07A6  3400               	retlw	0
   416  07A7                     STR_6:	
   417  07A7  340C               	retlw	12
   418  07A8  344C               	retlw	76	;'L'
   419  07A9  346F               	retlw	111	;'o'
   420  07AA  3461               	retlw	97	;'a'
   421  07AB  3464               	retlw	100	;'d'
   422  07AC  3469               	retlw	105	;'i'
   423  07AD  346E               	retlw	110	;'n'
   424  07AE  3467               	retlw	103	;'g'
   425  07AF  3420               	retlw	32	;' '
   426  07B0  3450               	retlw	80	;'P'
   427  07B1  3449               	retlw	73	;'I'
   428  07B2  3443               	retlw	67	;'C'
   429  07B3  342E               	retlw	46	;'.'
   430  07B4  342E               	retlw	46	;'.'
   431  07B5  342E               	retlw	46	;'.'
   432  07B6  3400               	retlw	0
   433  07B7                     STR_8:	
   434  07B7  3425               	retlw	37	;'%'
   435  07B8  346C               	retlw	108	;'l'
   436  07B9  3475               	retlw	117	;'u'
   437  07BA  342E               	retlw	46	;'.'
   438  07BB  3425               	retlw	37	;'%'
   439  07BC  3436               	retlw	54	;'6'
   440  07BD  342E               	retlw	46	;'.'
   441  07BE  3436               	retlw	54	;'6'
   442  07BF  346C               	retlw	108	;'l'
   443  07C0  3475               	retlw	117	;'u'
   444  07C1  3400               	retlw	0
   445  07C2                     STR_2:	
   446  07C2  344E               	retlw	78	;'N'
   447  07C3  3469               	retlw	105	;'i'
   448  07C4  3476               	retlw	118	;'v'
   449  07C5  3465               	retlw	101	;'e'
   450  07C6  346C               	retlw	108	;'l'
   451  07C7  343A               	retlw	58	;':'
   452  07C8  3400               	retlw	0
   453  07C9                     STR_3:	
   454  07C9  3425               	retlw	37	;'%'
   455  07CA  3400               	retlw	0
   456  07CB                     __end_of__stringdata:	
   457                           
   458                           ; #config settings
   459  0000                     
   460                           	psect	cinit
   461  0015                     start_initialization:	
   462  0015                     __initialization:	
   463                           
   464                           ; Clear objects allocated to BANK0
   465  0015  1383               	bcf	3,7	;select IRP bank0
   466  0016  305A               	movlw	low __pbssBANK0
   467  0017  0084               	movwf	4
   468  0018  306D               	movlw	low (__pbssBANK0+19)
   469  0019  120A  158A  2005  120A  118A  	fcall	clear_ram0
   470                           
   471                           ; Clear objects allocated to BANK1
   472  001E  30D4               	movlw	low __pbssBANK1
   473  001F  0084               	movwf	4
   474  0020  30DD               	movlw	low (__pbssBANK1+9)
   475  0021  120A  158A  2005  120A  118A  	fcall	clear_ram0
   476                           
   477                           ; Initialize objects allocated to BANK1
   478  0026  30D4               	movlw	low (__pdataBANK1+16)
   479  0027  00FD               	movwf	btemp+-1
   480  0028  3017               	movlw	high __pidataBANK1
   481  0029  00FE               	movwf	btemp
   482  002A  303E               	movlw	low __pidataBANK1
   483  002B  00FF               	movwf	btemp+1
   484  002C  30C4               	movlw	low __pdataBANK1
   485  002D  0084               	movwf	4
   486  002E  160A  118A  2752  120A  118A  	fcall	init_ram0
   487                           
   488                           ; Initialize objects allocated to BANK0
   489  0033  120A  158A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   490  0038  00ED               	movwf	__pdataBANK0& (0+127)
   491  0039  120A  158A  2004   	fcall	__pidataBANK0+1	;fetch initializer
   492  003C  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   493  003D                     end_of_initialization:	
   494                           ;End of C runtime variable initialization code
   495                           
   496  003D                     __end_of__initialization:	
   497  003D  0183               	clrf	3
   498  003E  120A  158A  2876   	ljmp	_main	;jump to C main() function
   499                           
   500                           	psect	bssBANK0
   501  005A                     __pbssBANK0:	
   502  005A                     _recipiente:	
   503  005A                     	ds	2
   504  005C                     ftoa@buf:	
   505  005C                     	ds	17
   506                           
   507                           	psect	dataBANK0
   508  006D                     __pdataBANK0:	
   509  006D                     _flag_an:	
   510  006D                     	ds	2
   511                           
   512                           	psect	bssBANK1
   513  00D4                     __pbssBANK1:	
   514  00D4                     _Display:	
   515  00D4                     	ds	7
   516  00DB                     _ADCResult:	
   517  00DB                     	ds	2
   518                           
   519                           	psect	dataBANK1
   520  00C4                     __pdataBANK1:	
   521  00C4                     ISR@F1351:	
   522  00C4                     	ds	16
   523                           
   524                           	psect	clrtext
   525  0805                     clear_ram0:	
   526                           ;	Called with FSR containing the base address, and
   527                           ;	W with the last address+1
   528                           
   529  0805  0064               	clrwdt	;clear the watchdog before getting into this loop
   530  0806                     clrloop0:	
   531  0806  0180               	clrf	0	;clear RAM location pointed to by FSR
   532  0807  0A84               	incf	4,f	;increment pointer
   533  0808  0604               	xorwf	4,w	;XOR with final address
   534  0809  1903               	btfsc	3,2	;have we reached the end yet?
   535  080A  3400               	retlw	0	;all done for this memory range, return
   536  080B  0604               	xorwf	4,w	;XOR again to restore value
   537  080C  2806               	goto	clrloop0	;do the next byte
   538                           
   539                           	psect	inittext
   540  174E                     init_fetch0:	
   541                           ;	Called with low address in FSR and high address in W
   542                           
   543  174E  087E               	movf	126,w
   544  174F  008A               	movwf	10
   545  1750  087F               	movf	127,w
   546  1751  0082               	movwf	2
   547  1752                     init_ram0:	
   548                           ;Called with:
   549                           ;	high address of idata address in btemp 
   550                           ;	low address of idata address in btemp+1 
   551                           ;	low address of data in FSR
   552                           ;	high address + 1 of data in btemp-1
   553                           
   554  1752  274E  160A  118A   	fcall	init_fetch0
   555  1755  0080               	movwf	0
   556  1756  0A84               	incf	4,f
   557  1757  0804               	movf	4,w
   558  1758  067D               	xorwf	125,w
   559  1759  1903               	btfsc	3,2
   560  175A  3400               	retlw	0
   561  175B  0AFF               	incf	127,f
   562  175C  1903               	btfsc	3,2
   563  175D  0AFE               	incf	126,f
   564  175E  2F52               	goto	init_ram0
   565                           
   566                           	psect	cstackBANK3
   567  0190                     __pcstackBANK3:	
   568  0190                     ??_lcd_envia_nibble:	
   569  0190                     ??_USARTWriteChar:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0190                     ??_ADCInit:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0190                     ?_ADCRead:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0190                     USARTWriteChar@USARTData:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0190                     ADCRead@ch:	
   582                           ; 1 bytes @ 0x0
   583                           
   584                           
   585                           ; 2 bytes @ 0x0
   586  0190                     	ds	1
   587  0191                     ?_USARTWriteString:	
   588  0191                     lcd_envia_nibble@n:	
   589                           ; 0 bytes @ 0x1
   590                           
   591  0191                     USARTWriteString@str:	
   592                           ; 1 bytes @ 0x1
   593                           
   594                           
   595                           ; 2 bytes @ 0x1
   596  0191                     	ds	1
   597  0192                     ?_lcd_envia_byte:	
   598  0192                     ??_ADCRead:	
   599                           ; 0 bytes @ 0x2
   600                           
   601  0192                     lcd_envia_byte@n:	
   602                           ; 0 bytes @ 0x2
   603                           
   604                           
   605                           ; 1 bytes @ 0x2
   606  0192                     	ds	1
   607  0193                     ??_lcd_envia_byte:	
   608  0193                     ??_USARTWriteString:	
   609                           ; 0 bytes @ 0x3
   610                           
   611                           
   612                           ; 0 bytes @ 0x3
   613  0193                     	ds	1
   614  0194                     lcd_envia_byte@address:	
   615                           
   616                           ; 1 bytes @ 0x4
   617  0194                     	ds	1
   618  0195                     ?_lcd_gotoxy:	
   619  0195                     ??_init_lcd_4bit:	
   620                           ; 0 bytes @ 0x5
   621                           
   622  0195                     ??_LCDClear:	
   623                           ; 0 bytes @ 0x5
   624                           
   625  0195                     lcd_gotoxy@y:	
   626                           ; 0 bytes @ 0x5
   627                           
   628                           
   629                           ; 1 bytes @ 0x5
   630  0195                     	ds	1
   631  0196                     ??_lcd_gotoxy:	
   632                           
   633                           ; 0 bytes @ 0x6
   634  0196                     	ds	1
   635  0197                     init_lcd_4bit@i:	
   636  0197                     lcd_gotoxy@x:	
   637                           ; 1 bytes @ 0x7
   638                           
   639                           
   640                           ; 1 bytes @ 0x7
   641  0197                     	ds	1
   642  0198                     lcd_gotoxy@address:	
   643                           
   644                           ; 1 bytes @ 0x8
   645  0198                     	ds	1
   646  0199                     ??_lcd_putc:	
   647                           
   648                           ; 0 bytes @ 0x9
   649  0199                     	ds	2
   650  019B                     lcd_putc@c:	
   651                           
   652                           ; 1 bytes @ 0xB
   653  019B                     	ds	1
   654  019C                     ?_lcd_escreve_string:	
   655  019C                     lcd_escreve_string@y:	
   656                           ; 0 bytes @ 0xC
   657                           
   658                           
   659                           ; 2 bytes @ 0xC
   660  019C                     	ds	2
   661  019E                     ??_lcd_escreve_string:	
   662  019E                     ??_inicialize:	
   663                           ; 0 bytes @ 0xE
   664                           
   665                           
   666                           ; 0 bytes @ 0xE
   667  019E                     	ds	3
   668  01A1                     ??_main:	
   669                           
   670                           ; 0 bytes @ 0x11
   671  01A1                     	ds	3
   672                           
   673                           	psect	cstackBANK1
   674  00A0                     __pcstackBANK1:	
   675  00A0                     ISR@aux:	
   676                           
   677                           ; 16 bytes @ 0x0
   678  00A0                     	ds	16
   679  00B0                     ISR@buf:	
   680                           
   681                           ; 1 bytes @ 0x10
   682  00B0                     	ds	1
   683  00B1                     ISR@status:	
   684                           
   685                           ; 2 bytes @ 0x11
   686  00B1                     	ds	2
   687  00B3                     ISR@status2:	
   688                           
   689                           ; 2 bytes @ 0x13
   690  00B3                     	ds	2
   691  00B5                     ISR@pre:	
   692                           
   693                           ; 3 bytes @ 0x15
   694  00B5                     	ds	3
   695  00B8                     ISR@preint:	
   696                           
   697                           ; 2 bytes @ 0x18
   698  00B8                     	ds	2
   699  00BA                     ISR@i:	
   700                           
   701                           ; 2 bytes @ 0x1A
   702  00BA                     	ds	2
   703  00BC                     ISR@result:	
   704                           
   705                           ; 1 bytes @ 0x1C
   706  00BC                     	ds	1
   707  00BD                     ISR@input:	
   708                           
   709                           ; 3 bytes @ 0x1D
   710  00BD                     	ds	3
   711  00C0                     ISR@input2:	
   712                           
   713                           ; 3 bytes @ 0x20
   714  00C0                     	ds	3
   715  00C3                     ISR@per:	
   716                           
   717                           ; 1 bytes @ 0x23
   718  00C3                     	ds	1
   719                           
   720                           	psect	cstackCOMMON
   721  0070                     __pcstackCOMMON:	
   722  0070                     ?_init_lcd_4bit:	
   723  0070                     ?_LCDClear:	
   724                           ; 0 bytes @ 0x0
   725                           
   726  0070                     ?_lcd_envia_nibble:	
   727                           ; 0 bytes @ 0x0
   728                           
   729  0070                     ?_isdigit:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0070                     ??_isdigit:	
   733                           ; 1 bit 
   734                           
   735  0070                     ?_USARTWriteChar:	
   736                           ; 0 bytes @ 0x0
   737                           
   738  0070                     ?_ADCInit:	
   739                           ; 0 bytes @ 0x0
   740                           
   741  0070                     ?_sendString:	
   742                           ; 0 bytes @ 0x0
   743                           
   744  0070                     ?_ISR:	
   745                           ; 0 bytes @ 0x0
   746                           
   747  0070                     ?_inicialize:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_main:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_lcd_putc:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ?___ftge:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?i1_USARTWriteChar:	
   760                           ; 1 bit 
   761                           
   762  0070                     ??i1_USARTWriteChar:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?i1_lcd_envia_nibble:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ??i1_lcd_envia_nibble:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?i1_lcd_putc:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_USARTReceiveChar:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?___wmul:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0070                     ?___awdiv:	
   781                           ; 2 bytes @ 0x0
   782                           
   783  0070                     ?___ftpack:	
   784                           ; 2 bytes @ 0x0
   785                           
   786  0070                     ?___ftneg:	
   787                           ; 3 bytes @ 0x0
   788                           
   789  0070                     ?___lldiv:	
   790                           ; 3 bytes @ 0x0
   791                           
   792  0070                     _isdigit$879:	
   793                           ; 4 bytes @ 0x0
   794                           
   795  0070                     i1USARTWriteChar@USARTData:	
   796                           ; 1 bytes @ 0x0
   797                           
   798  0070                     ___wmul@multiplier:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  0070                     ___awdiv@divisor:	
   802                           ; 2 bytes @ 0x0
   803                           
   804  0070                     ___ftpack@arg:	
   805                           ; 2 bytes @ 0x0
   806                           
   807  0070                     ___ftge@ff1:	
   808                           ; 3 bytes @ 0x0
   809                           
   810  0070                     ___ftneg@f1:	
   811                           ; 3 bytes @ 0x0
   812                           
   813  0070                     ___lldiv@divisor:	
   814                           ; 3 bytes @ 0x0
   815                           
   816                           
   817                           ; 4 bytes @ 0x0
   818  0070                     	ds	1
   819  0071                     ?i1_USARTWriteString:	
   820  0071                     isdigit@c:	
   821                           ; 0 bytes @ 0x1
   822                           
   823  0071                     i1lcd_envia_nibble@n:	
   824                           ; 1 bytes @ 0x1
   825                           
   826  0071                     i1USARTWriteString@str:	
   827                           ; 1 bytes @ 0x1
   828                           
   829                           
   830                           ; 2 bytes @ 0x1
   831  0071                     	ds	1
   832  0072                     ?i1_lcd_envia_byte:	
   833  0072                     i1lcd_envia_byte@n:	
   834                           ; 0 bytes @ 0x2
   835                           
   836  0072                     ___wmul@multiplicand:	
   837                           ; 1 bytes @ 0x2
   838                           
   839  0072                     ___awdiv@dividend:	
   840                           ; 2 bytes @ 0x2
   841                           
   842                           
   843                           ; 2 bytes @ 0x2
   844  0072                     	ds	1
   845  0073                     ??_USARTReceiveChar:	
   846  0073                     ??_sendString:	
   847                           ; 0 bytes @ 0x3
   848                           
   849  0073                     ??___ftneg:	
   850                           ; 0 bytes @ 0x3
   851                           
   852  0073                     ??i1_USARTWriteString:	
   853                           ; 0 bytes @ 0x3
   854                           
   855  0073                     ??i1_lcd_envia_byte:	
   856                           ; 0 bytes @ 0x3
   857                           
   858  0073                     ___ftpack@exp:	
   859                           ; 0 bytes @ 0x3
   860                           
   861  0073                     ___ftge@ff2:	
   862                           ; 1 bytes @ 0x3
   863                           
   864                           
   865                           ; 3 bytes @ 0x3
   866  0073                     	ds	1
   867  0074                     ??___wmul:	
   868  0074                     ??___awdiv:	
   869                           ; 0 bytes @ 0x4
   870                           
   871  0074                     USARTReceiveChar@USARTData:	
   872                           ; 0 bytes @ 0x4
   873                           
   874  0074                     ___ftpack@sign:	
   875                           ; 1 bytes @ 0x4
   876                           
   877  0074                     i1lcd_envia_byte@address:	
   878                           ; 1 bytes @ 0x4
   879                           
   880  0074                     ___wmul@product:	
   881                           ; 1 bytes @ 0x4
   882                           
   883  0074                     ___lldiv@dividend:	
   884                           ; 2 bytes @ 0x4
   885                           
   886                           
   887                           ; 4 bytes @ 0x4
   888  0074                     	ds	1
   889  0075                     ??___ftpack:	
   890  0075                     ?i1_lcd_gotoxy:	
   891                           ; 0 bytes @ 0x5
   892                           
   893  0075                     ___awdiv@counter:	
   894                           ; 0 bytes @ 0x5
   895                           
   896  0075                     i1lcd_gotoxy@y:	
   897                           ; 1 bytes @ 0x5
   898                           
   899                           
   900                           ; 1 bytes @ 0x5
   901  0075                     	ds	1
   902  0076                     ??___ftge:	
   903  0076                     ??i1_lcd_gotoxy:	
   904                           ; 0 bytes @ 0x6
   905                           
   906  0076                     ___awdiv@sign:	
   907                           ; 0 bytes @ 0x6
   908                           
   909                           
   910                           ; 1 bytes @ 0x6
   911  0076                     	ds	1
   912  0077                     i1lcd_gotoxy@x:	
   913  0077                     ___awdiv@quotient:	
   914                           ; 1 bytes @ 0x7
   915                           
   916                           
   917                           ; 2 bytes @ 0x7
   918  0077                     	ds	1
   919  0078                     ??___lldiv:	
   920  0078                     ?___awtoft:	
   921                           ; 0 bytes @ 0x8
   922                           
   923  0078                     ?___ftadd:	
   924                           ; 3 bytes @ 0x8
   925                           
   926  0078                     ?___lltoft:	
   927                           ; 3 bytes @ 0x8
   928                           
   929  0078                     i1lcd_gotoxy@address:	
   930                           ; 3 bytes @ 0x8
   931                           
   932  0078                     ___awtoft@c:	
   933                           ; 1 bytes @ 0x8
   934                           
   935  0078                     ___ftadd@f1:	
   936                           ; 2 bytes @ 0x8
   937                           
   938  0078                     ___lltoft@c:	
   939                           ; 3 bytes @ 0x8
   940                           
   941                           
   942                           ; 4 bytes @ 0x8
   943  0078                     	ds	1
   944  0079                     ??i1_lcd_putc:	
   945  0079                     ?___awmod:	
   946                           ; 0 bytes @ 0x9
   947                           
   948  0079                     ___awmod@divisor:	
   949                           ; 2 bytes @ 0x9
   950                           
   951  0079                     ___lldiv@quotient:	
   952                           ; 2 bytes @ 0x9
   953                           
   954                           
   955                           ; 4 bytes @ 0x9
   956  0079                     	ds	2
   957  007B                     ??___awtoft:	
   958  007B                     i1lcd_putc@c:	
   959                           ; 0 bytes @ 0xB
   960                           
   961  007B                     ___awmod@dividend:	
   962                           ; 1 bytes @ 0xB
   963                           
   964  007B                     ___ftadd@f2:	
   965                           ; 2 bytes @ 0xB
   966                           
   967                           
   968                           ; 3 bytes @ 0xB
   969  007B                     	ds	1
   970  007C                     ??___lltoft:	
   971  007C                     ?i1_lcd_escreve_string:	
   972                           ; 0 bytes @ 0xC
   973                           
   974  007C                     i1lcd_escreve_string@y:	
   975                           ; 0 bytes @ 0xC
   976                           
   977                           
   978                           ; 2 bytes @ 0xC
   979  007C                     	ds	1
   980  007D                     ??___awmod:	
   981  007D                     ___awtoft@sign:	
   982                           ; 0 bytes @ 0xD
   983                           
   984  007D                     ___lldiv@counter:	
   985                           ; 1 bytes @ 0xD
   986                           
   987  007D                     ___lltoft@exp:	
   988                           ; 1 bytes @ 0xD
   989                           
   990                           
   991                           ; 1 bytes @ 0xD
   992  007D                     	ds	1
   993  007E                     ??___ftsub:	
   994  007E                     ??i1_lcd_escreve_string:	
   995                           ; 0 bytes @ 0xE
   996                           
   997                           
   998                           	psect	cstackBANK0
   999  0020                     __pcstackBANK0:	
  1000                           ; 0 bytes @ 0xE
  1001                           
  1002  0020                     ??___ftadd:	
  1003  0020                     ?___ftmul:	
  1004                           ; 0 bytes @ 0x0
  1005                           
  1006  0020                     ?___llmod:	
  1007                           ; 3 bytes @ 0x0
  1008                           
  1009  0020                     ___awmod@counter:	
  1010                           ; 4 bytes @ 0x0
  1011                           
  1012  0020                     ___ftmul@f1:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0020                     ___llmod@divisor:	
  1016                           ; 3 bytes @ 0x0
  1017                           
  1018  0020                     sendString@array:	
  1019                           ; 4 bytes @ 0x0
  1020                           
  1021                           
  1022                           ; 40 bytes @ 0x0
  1023  0020                     	ds	1
  1024  0021                     ___awmod@sign:	
  1025                           
  1026                           ; 1 bytes @ 0x1
  1027  0021                     	ds	2
  1028  0023                     ___ftmul@f2:	
  1029                           
  1030                           ; 3 bytes @ 0x3
  1031  0023                     	ds	1
  1032  0024                     ___ftadd@sign:	
  1033  0024                     ___llmod@dividend:	
  1034                           ; 1 bytes @ 0x4
  1035                           
  1036                           
  1037                           ; 4 bytes @ 0x4
  1038  0024                     	ds	1
  1039  0025                     ___ftadd@exp2:	
  1040                           
  1041                           ; 1 bytes @ 0x5
  1042  0025                     	ds	1
  1043  0026                     ??___ftmul:	
  1044  0026                     ___ftadd@exp1:	
  1045                           ; 0 bytes @ 0x6
  1046                           
  1047                           
  1048                           ; 1 bytes @ 0x6
  1049  0026                     	ds	1
  1050  0027                     ?___ftsub:	
  1051  0027                     ___ftsub@f2:	
  1052                           ; 3 bytes @ 0x7
  1053                           
  1054                           
  1055                           ; 3 bytes @ 0x7
  1056  0027                     	ds	1
  1057  0028                     ??___llmod:	
  1058                           
  1059                           ; 0 bytes @ 0x8
  1060  0028                     	ds	1
  1061  0029                     ___llmod@counter:	
  1062                           
  1063                           ; 1 bytes @ 0x9
  1064  0029                     	ds	1
  1065  002A                     ?_sprintf:	
  1066  002A                     sprintf@f:	
  1067                           ; 2 bytes @ 0xA
  1068                           
  1069  002A                     ___ftmul@exp:	
  1070                           ; 1 bytes @ 0xA
  1071                           
  1072  002A                     ___ftsub@f1:	
  1073                           ; 1 bytes @ 0xA
  1074                           
  1075                           
  1076                           ; 3 bytes @ 0xA
  1077  002A                     	ds	1
  1078  002B                     ___ftmul@f3_as_product:	
  1079                           
  1080                           ; 3 bytes @ 0xB
  1081  002B                     	ds	3
  1082  002E                     ___ftmul@cntr:	
  1083                           
  1084                           ; 1 bytes @ 0xE
  1085  002E                     	ds	1
  1086  002F                     ___ftmul@sign:	
  1087                           
  1088                           ; 1 bytes @ 0xF
  1089  002F                     	ds	1
  1090  0030                     ?___ftdiv:	
  1091  0030                     ?___fttol:	
  1092                           ; 3 bytes @ 0x10
  1093                           
  1094  0030                     ___ftdiv@f2:	
  1095                           ; 4 bytes @ 0x10
  1096                           
  1097  0030                     ___fttol@f1:	
  1098                           ; 3 bytes @ 0x10
  1099                           
  1100                           
  1101                           ; 3 bytes @ 0x10
  1102  0030                     	ds	3
  1103  0033                     ??_sprintf:	
  1104  0033                     ___ftdiv@f1:	
  1105                           ; 0 bytes @ 0x13
  1106                           
  1107                           
  1108                           ; 3 bytes @ 0x13
  1109  0033                     	ds	1
  1110  0034                     ??___fttol:	
  1111                           
  1112                           ; 0 bytes @ 0x14
  1113  0034                     	ds	2
  1114  0036                     ??___ftdiv:	
  1115                           
  1116                           ; 0 bytes @ 0x16
  1117  0036                     	ds	2
  1118  0038                     sprintf@flag:	
  1119  0038                     ___fttol@sign1:	
  1120                           ; 1 bytes @ 0x18
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0x18
  1124  0038                     	ds	1
  1125  0039                     sprintf@ap:	
  1126  0039                     ___fttol@lval:	
  1127                           ; 1 bytes @ 0x19
  1128                           
  1129                           
  1130                           ; 4 bytes @ 0x19
  1131  0039                     	ds	1
  1132  003A                     ___ftdiv@cntr:	
  1133  003A                     sprintf@_val:	
  1134                           ; 1 bytes @ 0x1A
  1135                           
  1136                           
  1137                           ; 4 bytes @ 0x1A
  1138  003A                     	ds	1
  1139  003B                     ___ftdiv@f3:	
  1140                           
  1141                           ; 3 bytes @ 0x1B
  1142  003B                     	ds	2
  1143  003D                     ___fttol@exp1:	
  1144                           
  1145                           ; 1 bytes @ 0x1D
  1146  003D                     	ds	1
  1147  003E                     sprintf@sp:	
  1148  003E                     ___ftdiv@exp:	
  1149                           ; 1 bytes @ 0x1E
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0x1E
  1153  003E                     	ds	1
  1154  003F                     ___ftdiv@sign:	
  1155  003F                     sprintf@width:	
  1156                           ; 1 bytes @ 0x1F
  1157                           
  1158                           
  1159                           ; 2 bytes @ 0x1F
  1160  003F                     	ds	2
  1161  0041                     sprintf@prec:	
  1162                           
  1163                           ; 2 bytes @ 0x21
  1164  0041                     	ds	2
  1165  0043                     sprintf@c:	
  1166                           
  1167                           ; 1 bytes @ 0x23
  1168  0043                     	ds	1
  1169  0044                     ?_ftoa:	
  1170  0044                     ftoa@f:	
  1171                           ; 1 bytes @ 0x24
  1172                           
  1173                           
  1174                           ; 3 bytes @ 0x24
  1175  0044                     	ds	3
  1176  0047                     ftoa@status:	
  1177                           
  1178                           ; 1 bytes @ 0x27
  1179  0047                     	ds	1
  1180  0048                     ??_ftoa:	
  1181  0048                     sendString@envio:	
  1182                           ; 0 bytes @ 0x28
  1183                           
  1184                           
  1185                           ; 1 bytes @ 0x28
  1186  0048                     	ds	1
  1187  0049                     sendString@send:	
  1188  0049                     ftoa@rem:	
  1189                           ; 1 bytes @ 0x29
  1190                           
  1191                           
  1192                           ; 4 bytes @ 0x29
  1193  0049                     	ds	1
  1194  004A                     sendString@x:	
  1195                           
  1196                           ; 2 bytes @ 0x2A
  1197  004A                     	ds	3
  1198  004D                     ftoa@l:	
  1199                           
  1200                           ; 4 bytes @ 0x2D
  1201  004D                     	ds	4
  1202  0051                     ftoa@cp:	
  1203                           
  1204                           ; 1 bytes @ 0x31
  1205  0051                     	ds	1
  1206  0052                     ??_ISR:	
  1207                           
  1208                           ; 0 bytes @ 0x32
  1209  0052                     	ds	8
  1210                           
  1211                           	psect	maintext
  1212  0876                     __pmaintext:	
  1213 ;;
  1214 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1215 ;;
  1216 ;; *************** function _main *****************
  1217 ;; Defined at:
  1218 ;;		line 302 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;		None               void
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 17F/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0
  1234 ;;      Temps:          0       0       0       3       0
  1235 ;;      Totals:         0       0       0       3       0
  1236 ;;Total ram usage:        3 bytes
  1237 ;; Hardware stack levels required when called:   12
  1238 ;; This function calls:
  1239 ;;		_ADCRead
  1240 ;;		_inicialize
  1241 ;; This function is called by:
  1242 ;;		Startup code after reset
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _main
  1248  0876                     _main:	
  1249                           
  1250                           ;main.c: 304: inicialize();
  1251                           
  1252                           ;incstack = 0
  1253 ;; hardware stack exceeded
  1254                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1255  0876  120A  158A  2584  120A  158A  	fcall	_inicialize
  1256  087B                     l3037:	
  1257                           ;main.c: 306: while (1) {
  1258                           
  1259                           
  1260                           ;main.c: 307: ADCRead(0);
  1261  087B  3000               	movlw	0
  1262  087C  1683               	bsf	3,5	;RP0=1, select bank3
  1263  087D  1703               	bsf	3,6	;RP1=1, select bank3
  1264  087E  0090               	movwf	ADCRead@ch^(0+384)
  1265  087F  3000               	movlw	0
  1266  0880  0091               	movwf	(ADCRead@ch^(0+384)+1)
  1267  0881  120A  118A  26D2  120A  158A  	fcall	_ADCRead
  1268                           
  1269                           ;main.c: 308: _delay((unsigned long)((300)*(20000000/4000.0)));
  1270  0886  3008               	movlw	8
  1271  0887  1683               	bsf	3,5	;RP0=1, select bank3
  1272  0888  1703               	bsf	3,6	;RP1=1, select bank3
  1273  0889  00A3               	movwf	(??_main^(0+384)+2)
  1274  088A  309D               	movlw	157
  1275  088B  00A2               	movwf	(??_main^(0+384)+1)
  1276  088C  300B               	movlw	11
  1277  088D  00A1               	movwf	??_main^(0+384)
  1278  088E                     u4127:	
  1279  088E  0BA1               	decfsz	??_main^(0+384),f
  1280  088F  288E               	goto	u4127
  1281  0890  0BA2               	decfsz	(??_main^(0+384)+1),f
  1282  0891  288E               	goto	u4127
  1283  0892  0BA3               	decfsz	(??_main^(0+384)+2),f
  1284  0893  288E               	goto	u4127
  1285  0894  2895               	nop2
  1286                           
  1287                           ;main.c: 309: if (PORTCbits.RC3 == 1) {
  1288  0895  1283               	bcf	3,5	;RP0=0, select bank0
  1289  0896  1303               	bcf	3,6	;RP1=0, select bank0
  1290  0897  1987               	btfsc	7,3	;volatile
  1291  0898  289C               	goto	l123
  1292  0899  287B               	goto	l3037
  1293  089A                     l124:	
  1294                           ;main.c: 310: while (PORTCbits.RC3 == 1) {
  1295                           
  1296                           
  1297                           ;main.c: 311: PORTDbits.RD2 = 1;
  1298  089A  1508               	bsf	8,2	;volatile
  1299                           
  1300                           ;main.c: 312: PORTDbits.RD3 = 0;
  1301  089B  1188               	bcf	8,3	;volatile
  1302  089C                     l123:	
  1303  089C  1D87               	btfss	7,3	;volatile
  1304  089D  287B               	goto	l3037
  1305  089E  289A               	goto	l124
  1306  089F                     __end_of_main:	
  1307                           
  1308                           	psect	text1
  1309  0D84                     __ptext1:	
  1310 ;; *************** function _inicialize *****************
  1311 ;; Defined at:
  1312 ;;		line 276 in file "main.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;		None
  1317 ;; Return value:  Size  Location     Type
  1318 ;;		None               void
  1319 ;; Registers used:
  1320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1326 ;;      Params:         0       0       0       0       0
  1327 ;;      Locals:         0       0       0       0       0
  1328 ;;      Temps:          0       0       0       3       0
  1329 ;;      Totals:         0       0       0       3       0
  1330 ;;Total ram usage:        3 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:   11
  1333 ;; This function calls:
  1334 ;;		_ADCInit
  1335 ;;		_LCDClear
  1336 ;;		_USARTWriteString
  1337 ;;		_init_lcd_4bit
  1338 ;;		_lcd_escreve_string
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _inicialize
  1346  0D84                     _inicialize:	
  1347                           
  1348                           ;main.c: 277: TRISA = 0b11111111;
  1349                           
  1350                           ;incstack = 0
  1351 ;; hardware stack exceeded
  1352                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1353  0D84  30FF               	movlw	255
  1354  0D85  1683               	bsf	3,5	;RP0=1, select bank1
  1355  0D86  1303               	bcf	3,6	;RP1=0, select bank1
  1356  0D87  0085               	movwf	5	;volatile
  1357                           
  1358                           ;main.c: 278: PORTAbits.RA0 = 0;
  1359  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0D8A  1005               	bcf	5,0	;volatile
  1362                           
  1363                           ;main.c: 279: TRISDbits.TRISD2 = 0;
  1364  0D8B  1683               	bsf	3,5	;RP0=1, select bank1
  1365  0D8C  1303               	bcf	3,6	;RP1=0, select bank1
  1366  0D8D  1108               	bcf	8,2	;volatile
  1367                           
  1368                           ;main.c: 280: PORTDbits.RD2 = 1;
  1369  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0D90  1508               	bsf	8,2	;volatile
  1372                           
  1373                           ;main.c: 281: TRISDbits.TRISD3 = 0;
  1374  0D91  1683               	bsf	3,5	;RP0=1, select bank1
  1375  0D92  1303               	bcf	3,6	;RP1=0, select bank1
  1376  0D93  1188               	bcf	8,3	;volatile
  1377                           
  1378                           ;main.c: 282: PORTDbits.RD3 = 0;
  1379  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  1380  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  1381  0D96  1188               	bcf	8,3	;volatile
  1382                           
  1383                           ;main.c: 284: TRISCbits.TRISC0 = 1;
  1384  0D97  1683               	bsf	3,5	;RP0=1, select bank1
  1385  0D98  1303               	bcf	3,6	;RP1=0, select bank1
  1386  0D99  1407               	bsf	7,0	;volatile
  1387                           
  1388                           ;main.c: 285: TRISCbits.TRISC1 = 1;
  1389  0D9A  1487               	bsf	7,1	;volatile
  1390                           
  1391                           ;main.c: 286: TRISCbits.TRISC2 = 1;
  1392  0D9B  1507               	bsf	7,2	;volatile
  1393                           
  1394                           ;main.c: 287: TRISCbits.TRISC3 = 1;
  1395  0D9C  1587               	bsf	7,3	;volatile
  1396                           
  1397                           ;main.c: 288: PORTCbits.RC3 = 0;
  1398  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0D9F  1187               	bcf	7,3	;volatile
  1401                           
  1402                           ;main.c: 289: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1403  0DA0  3033               	movlw	51
  1404  0DA1  1683               	bsf	3,5	;RP0=1, select bank3
  1405  0DA2  1703               	bsf	3,6	;RP1=1, select bank3
  1406  0DA3  00A0               	movwf	(??_inicialize^(0+384)+2)
  1407  0DA4  30BC               	movlw	188
  1408  0DA5  009F               	movwf	(??_inicialize^(0+384)+1)
  1409  0DA6  3010               	movlw	16
  1410  0DA7  009E               	movwf	??_inicialize^(0+384)
  1411  0DA8                     u4137:	
  1412  0DA8  0B9E               	decfsz	??_inicialize^(0+384),f
  1413  0DA9  2DA8               	goto	u4137
  1414  0DAA  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1415  0DAB  2DA8               	goto	u4137
  1416  0DAC  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1417  0DAD  2DA8               	goto	u4137
  1418                           
  1419                           ;main.c: 290: init_lcd_4bit();
  1420  0DAE  120A  158A  24B6  120A  158A  	fcall	_init_lcd_4bit
  1421                           
  1422                           ;main.c: 291: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1423  0DB3  3033               	movlw	51
  1424  0DB4  1683               	bsf	3,5	;RP0=1, select bank3
  1425  0DB5  1703               	bsf	3,6	;RP1=1, select bank3
  1426  0DB6  00A0               	movwf	(??_inicialize^(0+384)+2)
  1427  0DB7  30BC               	movlw	188
  1428  0DB8  009F               	movwf	(??_inicialize^(0+384)+1)
  1429  0DB9  3010               	movlw	16
  1430  0DBA  009E               	movwf	??_inicialize^(0+384)
  1431  0DBB                     u4147:	
  1432  0DBB  0B9E               	decfsz	??_inicialize^(0+384),f
  1433  0DBC  2DBB               	goto	u4147
  1434  0DBD  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1435  0DBE  2DBB               	goto	u4147
  1436  0DBF  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1437  0DC0  2DBB               	goto	u4147
  1438                           
  1439                           ;main.c: 292: INTCONbits.PEIE = 1;
  1440  0DC1  170B               	bsf	11,6	;volatile
  1441                           
  1442                           ;main.c: 293: INTCONbits.GIE = 1;
  1443  0DC2  178B               	bsf	11,7	;volatile
  1444                           
  1445                           ;main.c: 294: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1446  0DC3  301A               	movlw	26
  1447  0DC4  1683               	bsf	3,5	;RP0=1, select bank3
  1448  0DC5  1703               	bsf	3,6	;RP1=1, select bank3
  1449  0DC6  00A0               	movwf	(??_inicialize^(0+384)+2)
  1450  0DC7  305E               	movlw	94
  1451  0DC8  009F               	movwf	(??_inicialize^(0+384)+1)
  1452  0DC9  3086               	movlw	134
  1453  0DCA  009E               	movwf	??_inicialize^(0+384)
  1454  0DCB                     u4157:	
  1455  0DCB  0B9E               	decfsz	??_inicialize^(0+384),f
  1456  0DCC  2DCB               	goto	u4157
  1457  0DCD  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1458  0DCE  2DCB               	goto	u4157
  1459  0DCF  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1460  0DD0  2DCB               	goto	u4157
  1461  0DD1  0000               	nop
  1462                           
  1463                           ;main.c: 295: ADCInit();
  1464  0DD2  160A  118A  275F  120A  158A  	fcall	_ADCInit
  1465                           
  1466                           ;main.c: 296: lcd_escreve_string("\fLoading PIC...");
  1467  0DD7  3098               	movlw	low (STR_6-__stringbase)
  1468  0DD8  1683               	bsf	3,5	;RP0=1, select bank3
  1469  0DD9  1703               	bsf	3,6	;RP1=1, select bank3
  1470  0DDA  009C               	movwf	lcd_escreve_string@y^(0+384)
  1471  0DDB  3080               	movlw	128
  1472  0DDC  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1473  0DDD  120A  158A  2126  120A  158A  	fcall	_lcd_escreve_string
  1474                           
  1475                           ;main.c: 297: USARTWriteString("\fLoading PIC...");
  1476  0DE2  3098               	movlw	low (STR_6-__stringbase)
  1477  0DE3  1683               	bsf	3,5	;RP0=1, select bank3
  1478  0DE4  1703               	bsf	3,6	;RP1=1, select bank3
  1479  0DE5  0091               	movwf	USARTWriteString@str^(0+384)
  1480  0DE6  3080               	movlw	128
  1481  0DE7  0092               	movwf	(USARTWriteString@str+1)^(0+384)
  1482  0DE8  120A  158A  20F5  120A  158A  	fcall	_USARTWriteString
  1483                           
  1484                           ;main.c: 298: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1485  0DED  307F               	movlw	127
  1486  0DEE  1683               	bsf	3,5	;RP0=1, select bank3
  1487  0DEF  1703               	bsf	3,6	;RP1=1, select bank3
  1488  0DF0  00A0               	movwf	(??_inicialize^(0+384)+2)
  1489  0DF1  30D4               	movlw	212
  1490  0DF2  009F               	movwf	(??_inicialize^(0+384)+1)
  1491  0DF3  30AE               	movlw	174
  1492  0DF4  009E               	movwf	??_inicialize^(0+384)
  1493  0DF5                     u4167:	
  1494  0DF5  0B9E               	decfsz	??_inicialize^(0+384),f
  1495  0DF6  2DF5               	goto	u4167
  1496  0DF7  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1497  0DF8  2DF5               	goto	u4167
  1498  0DF9  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1499  0DFA  2DF5               	goto	u4167
  1500  0DFB  2DFC               	nop2
  1501                           
  1502                           ;main.c: 299: LCDClear();
  1503  0DFC  120A  158A  21CB   	fcall	_LCDClear
  1504  0DFF  0008               	return
  1505  0E00                     __end_of_inicialize:	
  1506                           
  1507                           	psect	text2
  1508  0926                     __ptext2:	
  1509 ;; *************** function _lcd_escreve_string *****************
  1510 ;; Defined at:
  1511 ;;		line 168 in file "lcd_4bit.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1514 ;;		 -> ftoa@buf(17), STR_6(16), STR_3(2), STR_2(7), 
  1515 ;;		 -> ISR@aux(16), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;		None               void
  1520 ;; Registers used:
  1521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1527 ;;      Params:         0       0       0       2       0
  1528 ;;      Locals:         0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0
  1530 ;;      Totals:         0       0       0       2       0
  1531 ;;Total ram usage:        2 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:   10
  1534 ;; This function calls:
  1535 ;;		_lcd_putc
  1536 ;; This function is called by:
  1537 ;;		_inicialize
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           
  1542                           ;psect for function _lcd_escreve_string
  1543  0926                     _lcd_escreve_string:	
  1544  0926                     l2943:	
  1545                           ;lcd_4bit.c: 170: while(*y!='\0')
  1546                           
  1547                           ;incstack = 0
  1548 ;; hardware stack exceeded
  1549                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1550                           
  1551  0926  1683               	bsf	3,5	;RP0=1, select bank3
  1552  0927  1703               	bsf	3,6	;RP1=1, select bank3
  1553  0928  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1554  0929  1283               	bcf	3,5	;RP0=0, select bank0
  1555  092A  1303               	bcf	3,6	;RP1=0, select bank0
  1556  092B  00FF               	movwf	127
  1557  092C  1683               	bsf	3,5	;RP0=1, select bank3
  1558  092D  1703               	bsf	3,6	;RP1=1, select bank3
  1559  092E  081C               	movf	lcd_escreve_string@y^(0+384),w
  1560  092F  0084               	movwf	4
  1561  0930  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0931  1303               	bcf	3,6	;RP1=0, select bank0
  1563  0932  120A  118A  2700  120A  158A  	fcall	stringtab
  1564  0937  3800               	iorlw	0
  1565  0938  1903               	btfsc	3,2
  1566  0939  0008               	return
  1567                           
  1568                           ;lcd_4bit.c: 171: {
  1569                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1570  093A  1683               	bsf	3,5	;RP0=1, select bank3
  1571  093B  1703               	bsf	3,6	;RP1=1, select bank3
  1572  093C  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1573  093D  1283               	bcf	3,5	;RP0=0, select bank0
  1574  093E  1303               	bcf	3,6	;RP1=0, select bank0
  1575  093F  00FF               	movwf	127
  1576  0940  1683               	bsf	3,5	;RP0=1, select bank3
  1577  0941  1703               	bsf	3,6	;RP1=1, select bank3
  1578  0942  081C               	movf	lcd_escreve_string@y^(0+384),w
  1579  0943  0084               	movwf	4
  1580  0944  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0945  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0946  120A  118A  2700  120A  158A  	fcall	stringtab
  1583  094B  120A  158A  220B  120A  158A  	fcall	_lcd_putc
  1584                           
  1585                           ;lcd_4bit.c: 173: y++;
  1586  0950  3001               	movlw	1
  1587  0951  1683               	bsf	3,5	;RP0=1, select bank3
  1588  0952  1703               	bsf	3,6	;RP1=1, select bank3
  1589  0953  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1590  0954  1803               	skipnc
  1591  0955  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1592  0956  2926               	goto	l2943
  1593  0957                     __end_of_lcd_escreve_string:	
  1594                           
  1595                           	psect	text3
  1596  0A0B                     __ptext3:	
  1597 ;; *************** function _lcd_putc *****************
  1598 ;; Defined at:
  1599 ;;		line 82 in file "lcd_4bit.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  c               1    wreg     unsigned char 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  c               1   11[BANK3 ] unsigned char 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;		None               void
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       0       0       1       0
  1615 ;;      Temps:          0       0       0       2       0
  1616 ;;      Totals:         0       0       0       3       0
  1617 ;;Total ram usage:        3 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    9
  1620 ;; This function calls:
  1621 ;;		_lcd_envia_byte
  1622 ;;		_lcd_gotoxy
  1623 ;; This function is called by:
  1624 ;;		_lcd_escreve_string
  1625 ;;		_lcd_escreve_p
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _lcd_putc
  1631  0A0B                     _lcd_putc:	
  1632                           
  1633                           ;incstack = 0
  1634 ;; hardware stack exceeded
  1635                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1636                           ;lcd_putc@c stored from wreg
  1637  0A0B  1683               	bsf	3,5	;RP0=1, select bank3
  1638  0A0C  1703               	bsf	3,6	;RP1=1, select bank3
  1639  0A0D  009B               	movwf	lcd_putc@c^(0+384)
  1640                           
  1641                           ;lcd_4bit.c: 84: switch(c)
  1642  0A0E  2A44               	goto	l2925
  1643  0A0F                     l2913:	
  1644                           ;lcd_4bit.c: 85: {
  1645                           ;lcd_4bit.c: 86: case '\f':
  1646                           
  1647                           
  1648                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1649  0A0F  0192               	clrf	lcd_envia_byte@n^(0+384)
  1650  0A10  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1651  0A11  3000               	movlw	0
  1652  0A12  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  1653                           
  1654                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1655  0A17  300D               	movlw	13
  1656  0A18  1683               	bsf	3,5	;RP0=1, select bank3
  1657  0A19  1703               	bsf	3,6	;RP1=1, select bank3
  1658  0A1A  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1659  0A1B  30FB               	movlw	251
  1660  0A1C  0099               	movwf	??_lcd_putc^(0+384)
  1661  0A1D                     u4177:	
  1662  0A1D  0B99               	decfsz	??_lcd_putc^(0+384),f
  1663  0A1E  2A1D               	goto	u4177
  1664  0A1F  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1665  0A20  2A1D               	goto	u4177
  1666  0A21  2A22               	nop2
  1667                           
  1668                           ;lcd_4bit.c: 89: break;
  1669  0A22  0008               	return
  1670  0A23                     l2917:	
  1671                           ;lcd_4bit.c: 91: case '\n':
  1672                           
  1673                           
  1674                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1675  0A23  3002               	movlw	2
  1676  0A24  1683               	bsf	3,5	;RP0=1, select bank3
  1677  0A25  1703               	bsf	3,6	;RP1=1, select bank3
  1678  0A26  0099               	movwf	??_lcd_putc^(0+384)
  1679  0A27  0819               	movf	??_lcd_putc^(0+384),w
  1680  0A28  0095               	movwf	lcd_gotoxy@y^(0+384)
  1681  0A29  3001               	movlw	1
  1682  0A2A  160A  118A  27C3   	fcall	_lcd_gotoxy
  1683                           
  1684                           ;lcd_4bit.c: 93: break;
  1685  0A2D  0008               	return
  1686  0A2E                     l2919:	
  1687                           ;lcd_4bit.c: 95: case '\b':
  1688                           
  1689                           
  1690                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1691  0A2E  3010               	movlw	16
  1692  0A2F  1683               	bsf	3,5	;RP0=1, select bank3
  1693  0A30  1703               	bsf	3,6	;RP1=1, select bank3
  1694  0A31  0099               	movwf	??_lcd_putc^(0+384)
  1695  0A32  0819               	movf	??_lcd_putc^(0+384),w
  1696  0A33  0092               	movwf	lcd_envia_byte@n^(0+384)
  1697  0A34  3000               	movlw	0
  1698  0A35  120A  118A  27CB   	fcall	_lcd_envia_byte
  1699                           
  1700                           ;lcd_4bit.c: 97: break;
  1701  0A38  0008               	return
  1702  0A39                     l2921:	
  1703                           ;lcd_4bit.c: 99: default:
  1704                           
  1705                           
  1706                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1707  0A39  1683               	bsf	3,5	;RP0=1, select bank3
  1708  0A3A  1703               	bsf	3,6	;RP1=1, select bank3
  1709  0A3B  081B               	movf	lcd_putc@c^(0+384),w
  1710  0A3C  0099               	movwf	??_lcd_putc^(0+384)
  1711  0A3D  0819               	movf	??_lcd_putc^(0+384),w
  1712  0A3E  0092               	movwf	lcd_envia_byte@n^(0+384)
  1713  0A3F  3001               	movlw	1
  1714  0A40  120A  118A  27CB   	fcall	_lcd_envia_byte
  1715                           
  1716                           ;lcd_4bit.c: 102: }
  1717                           
  1718                           ;lcd_4bit.c: 101: break;
  1719  0A43  0008               	return
  1720  0A44                     l2925:	
  1721  0A44  1683               	bsf	3,5	;RP0=1, select bank3
  1722  0A45  1703               	bsf	3,6	;RP1=1, select bank3
  1723  0A46  081B               	movf	lcd_putc@c^(0+384),w
  1724                           
  1725                           ; Switch size 1, requested type "space"
  1726                           ; Number of cases is 3, Range of values is 8 to 12
  1727                           ; switch strategies available:
  1728                           ; Name         Instructions Cycles
  1729                           ; simple_byte           10     6 (average)
  1730                           ; direct_byte           26    11 (fixed)
  1731                           ; jumptable            263     9 (fixed)
  1732                           ;	Chosen strategy is simple_byte
  1733  0A47  3A08               	xorlw	8	; case 8
  1734  0A48  1903               	skipnz
  1735  0A49  2A2E               	goto	l2919
  1736  0A4A  3A02               	xorlw	2	; case 10
  1737  0A4B  1903               	skipnz
  1738  0A4C  2A23               	goto	l2917
  1739  0A4D  3A06               	xorlw	6	; case 12
  1740  0A4E  1903               	skipnz
  1741  0A4F  2A0F               	goto	l2913
  1742  0A50  2A39               	goto	l2921
  1743  0A51  0008               	return
  1744  0A52                     __end_of_lcd_putc:	
  1745                           
  1746                           	psect	text4
  1747  17C3                     __ptext4:	
  1748 ;; *************** function _lcd_gotoxy *****************
  1749 ;; Defined at:
  1750 ;;		line 70 in file "lcd_4bit.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  x               1    wreg     unsigned char 
  1753 ;;  y               1    5[BANK3 ] unsigned char 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  x               1    7[BANK3 ] unsigned char 
  1756 ;;  address         1    8[BANK3 ] unsigned char 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;		None               void
  1759 ;; Registers used:
  1760 ;;		wreg, status,2, status,0, pclath, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1766 ;;      Params:         0       0       0       1       0
  1767 ;;      Locals:         0       0       0       2       0
  1768 ;;      Temps:          0       0       0       1       0
  1769 ;;      Totals:         0       0       0       4       0
  1770 ;;Total ram usage:        4 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    8
  1773 ;; This function calls:
  1774 ;;		_lcd_envia_byte
  1775 ;; This function is called by:
  1776 ;;		_lcd_putc
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           
  1781                           ;psect for function _lcd_gotoxy
  1782  17C3                     _lcd_gotoxy:	
  1783                           
  1784                           ;incstack = 0
  1785 ;; hardware stack exceeded
  1786                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1787                           ;lcd_gotoxy@x stored from wreg
  1788  17C3  1683               	bsf	3,5	;RP0=1, select bank3
  1789  17C4  1703               	bsf	3,6	;RP1=1, select bank3
  1790  17C5  0097               	movwf	lcd_gotoxy@x^(0+384)
  1791                           
  1792                           ;lcd_4bit.c: 72: unsigned char address;
  1793                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1794  17C6  0815               	movf	lcd_gotoxy@y^(0+384),w
  1795  17C7  3A01               	xorlw	1
  1796  17C8  1903               	skipnz
  1797  17C9  2FCF               	goto	l2901
  1798  17CA  3040               	movlw	64
  1799  17CB  0096               	movwf	??_lcd_gotoxy^(0+384)
  1800  17CC  0816               	movf	??_lcd_gotoxy^(0+384),w
  1801  17CD  0098               	movwf	lcd_gotoxy@address^(0+384)
  1802  17CE  2FD0               	goto	l2903
  1803  17CF                     l2901:	
  1804                           
  1805                           ;lcd_4bit.c: 75: else address=0;
  1806  17CF  0198               	clrf	lcd_gotoxy@address^(0+384)
  1807  17D0                     l2903:	
  1808                           
  1809                           ;lcd_4bit.c: 77: address += x-1;
  1810  17D0  0817               	movf	lcd_gotoxy@x^(0+384),w
  1811  17D1  3EFF               	addlw	255
  1812  17D2  0096               	movwf	??_lcd_gotoxy^(0+384)
  1813  17D3  0816               	movf	??_lcd_gotoxy^(0+384),w
  1814  17D4  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1815                           
  1816                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1817  17D5  0818               	movf	lcd_gotoxy@address^(0+384),w
  1818  17D6  3880               	iorlw	128
  1819  17D7  0096               	movwf	??_lcd_gotoxy^(0+384)
  1820  17D8  0816               	movf	??_lcd_gotoxy^(0+384),w
  1821  17D9  0092               	movwf	lcd_envia_byte@n^(0+384)
  1822  17DA  3000               	movlw	0
  1823  17DB  120A  118A  27CB   	fcall	_lcd_envia_byte
  1824  17DE  0008               	return
  1825  17DF                     __end_of_lcd_gotoxy:	
  1826                           
  1827                           	psect	text5
  1828  0CB6                     __ptext5:	
  1829 ;; *************** function _init_lcd_4bit *****************
  1830 ;; Defined at:
  1831 ;;		line 6 in file "lcd_4bit.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  i               1    7[BANK3 ] unsigned char 
  1836 ;; Return value:  Size  Location     Type
  1837 ;;		None               void
  1838 ;; Registers used:
  1839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1845 ;;      Params:         0       0       0       0       0
  1846 ;;      Locals:         0       0       0       1       0
  1847 ;;      Temps:          0       0       0       2       0
  1848 ;;      Totals:         0       0       0       3       0
  1849 ;;Total ram usage:        3 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    8
  1852 ;; This function calls:
  1853 ;;		_lcd_envia_byte
  1854 ;;		_lcd_envia_nibble
  1855 ;; This function is called by:
  1856 ;;		_inicialize
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           
  1861                           ;psect for function _init_lcd_4bit
  1862  0CB6                     _init_lcd_4bit:	
  1863                           
  1864                           ;lcd_4bit.c: 8: unsigned char i;
  1865                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1866                           
  1867                           ;incstack = 0
  1868 ;; hardware stack exceeded
  1869                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1870  0CB6  1683               	bsf	3,5	;RP0=1, select bank1
  1871  0CB7  1303               	bcf	3,6	;RP1=0, select bank1
  1872  0CB8  1206               	bcf	6,4	;volatile
  1873                           
  1874                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1875  0CB9  1286               	bcf	6,5	;volatile
  1876                           
  1877                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1878  0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0CBB  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0CBC  1206               	bcf	6,4	;volatile
  1881                           
  1882                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1883  0CBD  1286               	bcf	6,5	;volatile
  1884                           
  1885                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1886  0CBE  1683               	bsf	3,5	;RP0=1, select bank1
  1887  0CBF  1303               	bcf	3,6	;RP1=0, select bank1
  1888  0CC0  1006               	bcf	6,0	;volatile
  1889                           
  1890                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1891  0CC1  1086               	bcf	6,1	;volatile
  1892                           
  1893                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1894  0CC2  1106               	bcf	6,2	;volatile
  1895                           
  1896                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1897  0CC3  1186               	bcf	6,3	;volatile
  1898                           
  1899                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1900  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0CC6  1006               	bcf	6,0	;volatile
  1903                           
  1904                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1905  0CC7  1086               	bcf	6,1	;volatile
  1906                           
  1907                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1908  0CC8  1106               	bcf	6,2	;volatile
  1909                           
  1910                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1911  0CC9  1186               	bcf	6,3	;volatile
  1912                           
  1913                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1914  0CCA  3062               	movlw	98
  1915  0CCB  1683               	bsf	3,5	;RP0=1, select bank3
  1916  0CCC  1703               	bsf	3,6	;RP1=1, select bank3
  1917  0CCD  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1918  0CCE  3065               	movlw	101
  1919  0CCF  0095               	movwf	??_init_lcd_4bit^(0+384)
  1920  0CD0                     u4187:	
  1921  0CD0  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1922  0CD1  2CD0               	goto	u4187
  1923  0CD2  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1924  0CD3  2CD0               	goto	u4187
  1925  0CD4  2CD5               	nop2
  1926                           
  1927                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1928  0CD5  1683               	bsf	3,5	;RP0=1, select bank3
  1929  0CD6  1703               	bsf	3,6	;RP1=1, select bank3
  1930  0CD7  0197               	clrf	init_lcd_4bit@i^(0+384)
  1931  0CD8  3003               	movlw	3
  1932  0CD9  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1933  0CDA  1803               	btfsc	3,0
  1934  0CDB  2CF7               	goto	l2963
  1935  0CDC                     l2955:	
  1936                           
  1937                           ;lcd_4bit.c: 26: {
  1938                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1939  0CDC  3003               	movlw	3
  1940  0CDD  120A  158A  2347  120A  158A  	fcall	_lcd_envia_nibble
  1941                           
  1942                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1943  0CE2  3021               	movlw	33
  1944  0CE3  1683               	bsf	3,5	;RP0=1, select bank3
  1945  0CE4  1703               	bsf	3,6	;RP1=1, select bank3
  1946  0CE5  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1947  0CE6  3076               	movlw	118
  1948  0CE7  0095               	movwf	??_init_lcd_4bit^(0+384)
  1949  0CE8                     u4197:	
  1950  0CE8  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1951  0CE9  2CE8               	goto	u4197
  1952  0CEA  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1953  0CEB  2CE8               	goto	u4197
  1954  0CEC  0000               	nop
  1955  0CED  3001               	movlw	1
  1956  0CEE  1683               	bsf	3,5	;RP0=1, select bank3
  1957  0CEF  1703               	bsf	3,6	;RP1=1, select bank3
  1958  0CF0  0095               	movwf	??_init_lcd_4bit^(0+384)
  1959  0CF1  0815               	movf	??_init_lcd_4bit^(0+384),w
  1960  0CF2  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1961  0CF3  3003               	movlw	3
  1962  0CF4  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1963  0CF5  1C03               	skipc
  1964  0CF6  2CDC               	goto	l2955
  1965  0CF7                     l2963:	
  1966                           
  1967                           ;lcd_4bit.c: 29: }
  1968                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1969  0CF7  3002               	movlw	2
  1970  0CF8  120A  158A  2347  120A  158A  	fcall	_lcd_envia_nibble
  1971                           
  1972                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1973  0CFD  1683               	bsf	3,5	;RP0=1, select bank3
  1974  0CFE  1703               	bsf	3,6	;RP1=1, select bank3
  1975  0CFF  0197               	clrf	init_lcd_4bit@i^(0+384)
  1976  0D00                     L1:	
  1977  0D00  3004               	movlw	4
  1978  0D01  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1979  0D02  1803               	btfsc	3,0
  1980  0D03  0008               	return
  1981                           
  1982                           ;lcd_4bit.c: 33: {
  1983                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1984  0D04  0817               	movf	init_lcd_4bit@i^(0+384),w
  1985  0D05  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1986  0D06  0084               	movwf	4
  1987  0D07  120A  118A  270A  120A  158A  	fcall	stringdir
  1988  0D0C  0095               	movwf	??_init_lcd_4bit^(0+384)
  1989  0D0D  0815               	movf	??_init_lcd_4bit^(0+384),w
  1990  0D0E  0092               	movwf	lcd_envia_byte@n^(0+384)
  1991  0D0F  3000               	movlw	0
  1992  0D10  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  1993  0D15  3001               	movlw	1
  1994  0D16  1683               	bsf	3,5	;RP0=1, select bank3
  1995  0D17  1703               	bsf	3,6	;RP1=1, select bank3
  1996  0D18  0095               	movwf	??_init_lcd_4bit^(0+384)
  1997  0D19  0815               	movf	??_init_lcd_4bit^(0+384),w
  1998  0D1A  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1999  0D1B  2D00               	goto	L1
  2000  0D1C                     __end_of_init_lcd_4bit:	
  2001                           
  2002                           	psect	text6
  2003  08F5                     __ptext6:	
  2004 ;; *************** function _USARTWriteString *****************
  2005 ;; Defined at:
  2006 ;;		line 70 in file "main.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  str             2    1[BANK3 ] PTR const unsigned char 
  2009 ;;		 -> STR_7(16), STR_5(23), STR_4(44), sendString@array(40), 
  2010 ;;		 -> STR_1(40), 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;		None               void
  2015 ;; Registers used:
  2016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2022 ;;      Params:         0       0       0       2       0
  2023 ;;      Locals:         0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0
  2025 ;;      Totals:         0       0       0       2       0
  2026 ;;Total ram usage:        2 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    7
  2029 ;; This function calls:
  2030 ;;		_USARTWriteChar
  2031 ;; This function is called by:
  2032 ;;		_inicialize
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           
  2037                           ;psect for function _USARTWriteString
  2038  08F5                     _USARTWriteString:	
  2039  08F5                     l2933:	
  2040                           ;main.c: 72: while (*str != '\0') {
  2041                           
  2042                           ;incstack = 0
  2043 ;; hardware stack exceeded
  2044                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2045                           
  2046  08F5  1683               	bsf	3,5	;RP0=1, select bank3
  2047  08F6  1703               	bsf	3,6	;RP1=1, select bank3
  2048  08F7  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  2049  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  2050  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  2051  08FA  00FF               	movwf	127
  2052  08FB  1683               	bsf	3,5	;RP0=1, select bank3
  2053  08FC  1703               	bsf	3,6	;RP1=1, select bank3
  2054  08FD  0811               	movf	USARTWriteString@str^(0+384),w
  2055  08FE  0084               	movwf	4
  2056  08FF  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0900  1303               	bcf	3,6	;RP1=0, select bank0
  2058  0901  120A  118A  2700  120A  158A  	fcall	stringtab
  2059  0906  3800               	iorlw	0
  2060  0907  1903               	btfsc	3,2
  2061  0908  0008               	return
  2062                           
  2063                           ;main.c: 74: USARTWriteChar(*str);
  2064  0909  1683               	bsf	3,5	;RP0=1, select bank3
  2065  090A  1703               	bsf	3,6	;RP1=1, select bank3
  2066  090B  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  2067  090C  1283               	bcf	3,5	;RP0=0, select bank0
  2068  090D  1303               	bcf	3,6	;RP1=0, select bank0
  2069  090E  00FF               	movwf	127
  2070  090F  1683               	bsf	3,5	;RP0=1, select bank3
  2071  0910  1703               	bsf	3,6	;RP1=1, select bank3
  2072  0911  0811               	movf	USARTWriteString@str^(0+384),w
  2073  0912  0084               	movwf	4
  2074  0913  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0914  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0915  120A  118A  2700  120A  158A  	fcall	stringtab
  2077  091A  160A  118A  2730  120A  158A  	fcall	_USARTWriteChar
  2078                           
  2079                           ;main.c: 75: str++;
  2080  091F  3001               	movlw	1
  2081  0920  1683               	bsf	3,5	;RP0=1, select bank3
  2082  0921  1703               	bsf	3,6	;RP1=1, select bank3
  2083  0922  0791               	addwf	USARTWriteString@str^(0+384),f
  2084  0923  1803               	skipnc
  2085  0924  0A92               	incf	(USARTWriteString@str+1)^(0+384),f
  2086  0925  28F5               	goto	l2933
  2087  0926                     __end_of_USARTWriteString:	
  2088                           
  2089                           	psect	text7
  2090  1730                     __ptext7:	
  2091 ;; *************** function _USARTWriteChar *****************
  2092 ;; Defined at:
  2093 ;;		line 63 in file "main.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  USARTData       1    wreg     unsigned char 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  USARTData       1    0[BANK3 ] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;		None               void
  2100 ;; Registers used:
  2101 ;;		wreg
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2107 ;;      Params:         0       0       0       0       0
  2108 ;;      Locals:         0       0       0       1       0
  2109 ;;      Temps:          0       0       0       0       0
  2110 ;;      Totals:         0       0       0       1       0
  2111 ;;Total ram usage:        1 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    6
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_USARTWriteString
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           
  2122                           ;psect for function _USARTWriteChar
  2123  1730                     _USARTWriteChar:	
  2124                           
  2125                           ;incstack = 0
  2126 ;; hardware stack exceeded
  2127                           ; Regs used in _USARTWriteChar: [wreg]
  2128                           ;USARTWriteChar@USARTData stored from wreg
  2129  1730  1683               	bsf	3,5	;RP0=1, select bank3
  2130  1731  1703               	bsf	3,6	;RP1=1, select bank3
  2131  1732  0090               	movwf	USARTWriteChar@USARTData^(0+384)
  2132  1733                     l68:	
  2133                           ;main.c: 64: while (!PIR1bits.TXIF);
  2134                           
  2135  1733  1283               	bcf	3,5	;RP0=0, select bank0
  2136  1734  1303               	bcf	3,6	;RP1=0, select bank0
  2137  1735  1E0C               	btfss	12,4	;volatile
  2138  1736  2F33               	goto	l68
  2139                           
  2140                           ;main.c: 65: TXREG = USARTData;
  2141  1737  1683               	bsf	3,5	;RP0=1, select bank3
  2142  1738  1703               	bsf	3,6	;RP1=1, select bank3
  2143  1739  0810               	movf	USARTWriteChar@USARTData^(0+384),w
  2144  173A  1283               	bcf	3,5	;RP0=0, select bank0
  2145  173B  1303               	bcf	3,6	;RP1=0, select bank0
  2146  173C  0099               	movwf	25	;volatile
  2147  173D  0008               	return
  2148  173E                     __end_of_USARTWriteChar:	
  2149                           
  2150                           	psect	text8
  2151  09CB                     __ptext8:	
  2152 ;; *************** function _LCDClear *****************
  2153 ;; Defined at:
  2154 ;;		line 179 in file "lcd_4bit.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0, pclath, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2168 ;;      Params:         0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0
  2170 ;;      Temps:          0       0       0       2       0
  2171 ;;      Totals:         0       0       0       2       0
  2172 ;;Total ram usage:        2 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    8
  2175 ;; This function calls:
  2176 ;;		_lcd_envia_byte
  2177 ;; This function is called by:
  2178 ;;		_inicialize
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           
  2183                           ;psect for function _LCDClear
  2184  09CB                     _LCDClear:	
  2185                           
  2186                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2187                           
  2188                           ;incstack = 0
  2189 ;; hardware stack exceeded
  2190                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2191  09CB  1683               	bsf	3,5	;RP0=1, select bank3
  2192  09CC  1703               	bsf	3,6	;RP1=1, select bank3
  2193  09CD  0192               	clrf	lcd_envia_byte@n^(0+384)
  2194  09CE  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2195  09CF  3000               	movlw	0
  2196  09D0  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  2197                           
  2198                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2199  09D5  3041               	movlw	65
  2200  09D6  1683               	bsf	3,5	;RP0=1, select bank3
  2201  09D7  1703               	bsf	3,6	;RP1=1, select bank3
  2202  09D8  0096               	movwf	(??_LCDClear^(0+384)+1)
  2203  09D9  30EE               	movlw	238
  2204  09DA  0095               	movwf	??_LCDClear^(0+384)
  2205  09DB                     u4207:	
  2206  09DB  0B95               	decfsz	??_LCDClear^(0+384),f
  2207  09DC  29DB               	goto	u4207
  2208  09DD  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2209  09DE  29DB               	goto	u4207
  2210  09DF  0000               	nop
  2211                           
  2212                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2213  09E0  300C               	movlw	12
  2214  09E1  1683               	bsf	3,5	;RP0=1, select bank3
  2215  09E2  1703               	bsf	3,6	;RP1=1, select bank3
  2216  09E3  0095               	movwf	??_LCDClear^(0+384)
  2217  09E4  0815               	movf	??_LCDClear^(0+384),w
  2218  09E5  0092               	movwf	lcd_envia_byte@n^(0+384)
  2219  09E6  3000               	movlw	0
  2220  09E7  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  2221                           
  2222                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2223  09EC  30F9               	movlw	249
  2224  09ED  1683               	bsf	3,5	;RP0=1, select bank3
  2225  09EE  1703               	bsf	3,6	;RP1=1, select bank3
  2226  09EF  0095               	movwf	??_LCDClear^(0+384)
  2227  09F0                     u4217:	
  2228  09F0  0000               	nop
  2229  09F1  0B95               	decfsz	??_LCDClear^(0+384),f
  2230  09F2  29F0               	goto	u4217
  2231  09F3  29F4               	nop2	;nop
  2232  09F4  0000               	nop
  2233                           
  2234                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2235  09F5  3006               	movlw	6
  2236  09F6  1683               	bsf	3,5	;RP0=1, select bank3
  2237  09F7  1703               	bsf	3,6	;RP1=1, select bank3
  2238  09F8  0095               	movwf	??_LCDClear^(0+384)
  2239  09F9  0815               	movf	??_LCDClear^(0+384),w
  2240  09FA  0092               	movwf	lcd_envia_byte@n^(0+384)
  2241  09FB  3000               	movlw	0
  2242  09FC  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  2243                           
  2244                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2245  0A01  30F9               	movlw	249
  2246  0A02  1683               	bsf	3,5	;RP0=1, select bank3
  2247  0A03  1703               	bsf	3,6	;RP1=1, select bank3
  2248  0A04  0095               	movwf	??_LCDClear^(0+384)
  2249  0A05                     u4227:	
  2250  0A05  0000               	nop
  2251  0A06  0B95               	decfsz	??_LCDClear^(0+384),f
  2252  0A07  2A05               	goto	u4227
  2253  0A08  2A09               	nop2	;nop
  2254  0A09  0000               	nop
  2255  0A0A  0008               	return
  2256  0A0B                     __end_of_LCDClear:	
  2257                           
  2258                           	psect	text9
  2259  07CB                     __ptext9:	
  2260 ;; *************** function _lcd_envia_byte *****************
  2261 ;; Defined at:
  2262 ;;		line 53 in file "lcd_4bit.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  address         1    wreg     unsigned char 
  2265 ;;  n               1    2[BANK3 ] unsigned char 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  address         1    4[BANK3 ] unsigned char 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;		None               void
  2270 ;; Registers used:
  2271 ;;		wreg, status,2, status,0, pclath, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2277 ;;      Params:         0       0       0       1       0
  2278 ;;      Locals:         0       0       0       1       0
  2279 ;;      Temps:          0       0       0       1       0
  2280 ;;      Totals:         0       0       0       3       0
  2281 ;;Total ram usage:        3 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    7
  2284 ;; This function calls:
  2285 ;;		_lcd_envia_nibble
  2286 ;; This function is called by:
  2287 ;;		_init_lcd_4bit
  2288 ;;		_lcd_gotoxy
  2289 ;;		_lcd_putc
  2290 ;;		_LCDClear
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           
  2295                           ;psect for function _lcd_envia_byte
  2296  07CB                     _lcd_envia_byte:	
  2297                           
  2298                           ;incstack = 0
  2299 ;; hardware stack exceeded
  2300                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2301                           ;lcd_envia_byte@address stored from wreg
  2302  07CB  1683               	bsf	3,5	;RP0=1, select bank3
  2303  07CC  1703               	bsf	3,6	;RP1=1, select bank3
  2304  07CD  0094               	movwf	lcd_envia_byte@address^(0+384)
  2305                           
  2306                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2307  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  2308  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  2309  07D0  1286               	bcf	6,5	;volatile
  2310                           
  2311                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2312  07D1  3063               	movlw	99
  2313  07D2  1683               	bsf	3,5	;RP0=1, select bank3
  2314  07D3  1703               	bsf	3,6	;RP1=1, select bank3
  2315  07D4  0093               	movwf	??_lcd_envia_byte^(0+384)
  2316  07D5                     u4237:	
  2317  07D5  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2318  07D6  2FD5               	goto	u4237
  2319  07D7  2FD8               	nop2	;nop
  2320                           
  2321                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2322  07D8  1683               	bsf	3,5	;RP0=1, select bank3
  2323  07D9  1703               	bsf	3,6	;RP1=1, select bank3
  2324  07DA  0814               	movf	lcd_envia_byte@address^(0+384),w
  2325  07DB  1903               	btfsc	3,2
  2326  07DC  2FE1               	goto	l159
  2327  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  2328  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  2329  07DF  1686               	bsf	6,5	;volatile
  2330  07E0  2FE4               	goto	l160
  2331  07E1                     l159:	
  2332                           
  2333                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2334  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  2335  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  2336  07E3  1286               	bcf	6,5	;volatile
  2337  07E4                     l160:	
  2338                           
  2339                           ;lcd_4bit.c: 61: _delay(1);
  2340  07E4  0000               	nop
  2341                           
  2342                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2343  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  2344  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  2345  07E7  1206               	bcf	6,4	;volatile
  2346                           
  2347                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2348  07E8  1683               	bsf	3,5	;RP0=1, select bank3
  2349  07E9  1703               	bsf	3,6	;RP1=1, select bank3
  2350  07EA  0812               	movf	lcd_envia_byte@n^(0+384),w
  2351  07EB  0093               	movwf	??_lcd_envia_byte^(0+384)
  2352  07EC  3004               	movlw	4
  2353  07ED                     u3795:	
  2354  07ED  1003               	clrc
  2355  07EE  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2356  07EF  3EFF               	addlw	-1
  2357  07F0  1D03               	skipz
  2358  07F1  2FED               	goto	u3795
  2359  07F2  0813               	movf	??_lcd_envia_byte^(0+384),w
  2360  07F3  120A  158A  2347  120A  118A  	fcall	_lcd_envia_nibble
  2361                           
  2362                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2363  07F8  1683               	bsf	3,5	;RP0=1, select bank3
  2364  07F9  1703               	bsf	3,6	;RP1=1, select bank3
  2365  07FA  0812               	movf	lcd_envia_byte@n^(0+384),w
  2366  07FB  390F               	andlw	15
  2367  07FC  120A  158A  2347   	fcall	_lcd_envia_nibble
  2368  07FF  0008               	return
  2369  0800                     __end_of_lcd_envia_byte:	
  2370                           
  2371                           	psect	text10
  2372  0B47                     __ptext10:	
  2373 ;; *************** function _lcd_envia_nibble *****************
  2374 ;; Defined at:
  2375 ;;		line 39 in file "lcd_4bit.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  n               1    wreg     unsigned char 
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;  n               1    1[BANK3 ] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2389 ;;      Params:         0       0       0       0       0
  2390 ;;      Locals:         0       0       0       1       0
  2391 ;;      Temps:          0       0       0       1       0
  2392 ;;      Totals:         0       0       0       2       0
  2393 ;;Total ram usage:        2 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    6
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_init_lcd_4bit
  2400 ;;		_lcd_envia_byte
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _lcd_envia_nibble
  2406  0B47                     _lcd_envia_nibble:	
  2407                           
  2408                           ;incstack = 0
  2409 ;; hardware stack exceeded
  2410                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2411                           ;lcd_envia_nibble@n stored from wreg
  2412  0B47  1683               	bsf	3,5	;RP0=1, select bank3
  2413  0B48  1703               	bsf	3,6	;RP1=1, select bank3
  2414  0B49  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2415                           
  2416                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2417  0B4A  3000               	movlw	0
  2418  0B4B  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2419  0B4C  3001               	movlw	1
  2420  0B4D  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2421  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0B50  0806               	movf	6,w	;volatile
  2424  0B51  1683               	bsf	3,5	;RP0=1, select bank3
  2425  0B52  1703               	bsf	3,6	;RP1=1, select bank3
  2426  0B53  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2427  0B54  39FE               	andlw	-2
  2428  0B55  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2429  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  2430  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  2431  0B58  0086               	movwf	6	;volatile
  2432                           
  2433                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2434  0B59  3000               	movlw	0
  2435  0B5A  1683               	bsf	3,5	;RP0=1, select bank3
  2436  0B5B  1703               	bsf	3,6	;RP1=1, select bank3
  2437  0B5C  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2438  0B5D  3001               	movlw	1
  2439  0B5E  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2440  0B5F  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2441  0B60  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0B61  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0B62  0806               	movf	6,w	;volatile
  2444  0B63  1683               	bsf	3,5	;RP0=1, select bank3
  2445  0B64  1703               	bsf	3,6	;RP1=1, select bank3
  2446  0B65  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2447  0B66  39FD               	andlw	-3
  2448  0B67  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2449  0B68  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0B69  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0B6A  0086               	movwf	6	;volatile
  2452                           
  2453                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2454  0B6B  3000               	movlw	0
  2455  0B6C  1683               	bsf	3,5	;RP0=1, select bank3
  2456  0B6D  1703               	bsf	3,6	;RP1=1, select bank3
  2457  0B6E  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2458  0B6F  3001               	movlw	1
  2459  0B70  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2460  0B71  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2461  0B72  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2462  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  2464  0B75  0806               	movf	6,w	;volatile
  2465  0B76  1683               	bsf	3,5	;RP0=1, select bank3
  2466  0B77  1703               	bsf	3,6	;RP1=1, select bank3
  2467  0B78  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2468  0B79  39FB               	andlw	-5
  2469  0B7A  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2470  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  2471  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  2472  0B7D  0086               	movwf	6	;volatile
  2473                           
  2474                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2475  0B7E  3000               	movlw	0
  2476  0B7F  1683               	bsf	3,5	;RP0=1, select bank3
  2477  0B80  1703               	bsf	3,6	;RP1=1, select bank3
  2478  0B81  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2479  0B82  3001               	movlw	1
  2480  0B83  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2481  0B84  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2482  0B85  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2483  0B86  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2484  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0B89  0806               	movf	6,w	;volatile
  2487  0B8A  1683               	bsf	3,5	;RP0=1, select bank3
  2488  0B8B  1703               	bsf	3,6	;RP1=1, select bank3
  2489  0B8C  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2490  0B8D  39F7               	andlw	-9
  2491  0B8E  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2492  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0B91  0086               	movwf	6	;volatile
  2495                           
  2496                           ;lcd_4bit.c: 46: _delay(1);
  2497  0B92  0000               	nop
  2498                           
  2499                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2500  0B93  1283               	bcf	3,5	;RP0=0, select bank0
  2501  0B94  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0B95  1606               	bsf	6,4	;volatile
  2503                           
  2504                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2505  0B96  3003               	movlw	3
  2506  0B97  1683               	bsf	3,5	;RP0=1, select bank3
  2507  0B98  1703               	bsf	3,6	;RP1=1, select bank3
  2508  0B99  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2509  0B9A                     u4247:	
  2510  0B9A  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2511  0B9B  2B9A               	goto	u4247
  2512                           
  2513                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2514  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  2515  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  2516  0B9E  1206               	bcf	6,4	;volatile
  2517  0B9F  0008               	return
  2518  0BA0                     __end_of_lcd_envia_nibble:	
  2519                           
  2520                           	psect	text11
  2521  175F                     __ptext11:	
  2522 ;; *************** function _ADCInit *****************
  2523 ;; Defined at:
  2524 ;;		line 105 in file "main.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;		None               void
  2531 ;; Registers used:
  2532 ;;		None
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       0       0       0       0
  2539 ;;      Locals:         0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0
  2541 ;;      Totals:         0       0       0       0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    6
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_inicialize
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _ADCInit
  2554  175F                     _ADCInit:	
  2555                           
  2556                           ;main.c: 107: ADCON1bits.ADFM = 1;
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in _ADCInit: []
  2560  175F  1683               	bsf	3,5	;RP0=1, select bank1
  2561  1760  1303               	bcf	3,6	;RP1=0, select bank1
  2562  1761  179F               	bsf	31,7	;volatile
  2563                           
  2564                           ;main.c: 108: ADCON1bits.PCFG3 = 0;
  2565  1762  119F               	bcf	31,3	;volatile
  2566                           
  2567                           ;main.c: 109: ADCON1bits.PCFG2 = 0;
  2568  1763  111F               	bcf	31,2	;volatile
  2569                           
  2570                           ;main.c: 110: ADCON1bits.PCFG1 = 0;
  2571  1764  109F               	bcf	31,1	;volatile
  2572                           
  2573                           ;main.c: 111: ADCON1bits.PCFG0 = 0;
  2574  1765  101F               	bcf	31,0	;volatile
  2575                           
  2576                           ;main.c: 114: ADCON0bits.ADCS1 = 1;
  2577  1766  1283               	bcf	3,5	;RP0=0, select bank0
  2578  1767  1303               	bcf	3,6	;RP1=0, select bank0
  2579  1768  179F               	bsf	31,7	;volatile
  2580                           
  2581                           ;main.c: 115: ADCON0bits.ADCS0 = 0;
  2582  1769  131F               	bcf	31,6	;volatile
  2583                           
  2584                           ;main.c: 116: ADCON0bits.ADON = 1;
  2585  176A  141F               	bsf	31,0	;volatile
  2586                           
  2587                           ;main.c: 119: PIE1bits.ADIE = 1;
  2588  176B  1683               	bsf	3,5	;RP0=1, select bank1
  2589  176C  1303               	bcf	3,6	;RP1=0, select bank1
  2590  176D  170C               	bsf	12,6	;volatile
  2591                           
  2592                           ;main.c: 120: PIR1bits.ADIF = 0;
  2593  176E  1283               	bcf	3,5	;RP0=0, select bank0
  2594  176F  1303               	bcf	3,6	;RP1=0, select bank0
  2595  1770  130C               	bcf	12,6	;volatile
  2596  1771  0008               	return
  2597  1772                     __end_of_ADCInit:	
  2598                           
  2599                           	psect	text12
  2600  06D2                     __ptext12:	
  2601 ;; *************** function _ADCRead *****************
  2602 ;; Defined at:
  2603 ;;		line 124 in file "main.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  ch              2    0[BANK3 ] int 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2617 ;;      Params:         0       0       0       2       0
  2618 ;;      Locals:         0       0       0       0       0
  2619 ;;      Temps:          0       0       0       1       0
  2620 ;;      Totals:         0       0       0       3       0
  2621 ;;Total ram usage:        3 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    6
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           
  2632                           ;psect for function _ADCRead
  2633  06D2                     _ADCRead:	
  2634                           
  2635                           ;main.c: 126: ADCON0bits.CHS = ch;
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2639  06D2  1683               	bsf	3,5	;RP0=1, select bank3
  2640  06D3  1703               	bsf	3,6	;RP1=1, select bank3
  2641  06D4  0810               	movf	ADCRead@ch^(0+384),w
  2642  06D5  0092               	movwf	??_ADCRead^(0+384)
  2643  06D6  0D92               	rlf	??_ADCRead^(0+384),f
  2644  06D7  0D92               	rlf	??_ADCRead^(0+384),f
  2645  06D8  0D92               	rlf	??_ADCRead^(0+384),f
  2646  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  2647  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  2648  06DB  081F               	movf	31,w	;volatile
  2649  06DC  1683               	bsf	3,5	;RP0=1, select bank3
  2650  06DD  1703               	bsf	3,6	;RP1=1, select bank3
  2651  06DE  0612               	xorwf	??_ADCRead^(0+384),w
  2652  06DF  39C7               	andlw	-57
  2653  06E0  0612               	xorwf	??_ADCRead^(0+384),w
  2654  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  2655  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  2656  06E3  009F               	movwf	31	;volatile
  2657                           
  2658                           ;main.c: 127: recipiente = ch;
  2659  06E4  1683               	bsf	3,5	;RP0=1, select bank3
  2660  06E5  1703               	bsf	3,6	;RP1=1, select bank3
  2661  06E6  0811               	movf	(ADCRead@ch+1)^(0+384),w
  2662  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  2663  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  2664  06E9  01DB               	clrf	_recipiente+1
  2665  06EA  07DB               	addwf	_recipiente+1,f
  2666  06EB  1683               	bsf	3,5	;RP0=1, select bank3
  2667  06EC  1703               	bsf	3,6	;RP1=1, select bank3
  2668  06ED  0810               	movf	ADCRead@ch^(0+384),w
  2669  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  2670  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  2671  06F0  01DA               	clrf	_recipiente
  2672  06F1  07DA               	addwf	_recipiente,f
  2673                           
  2674                           ;main.c: 128: _delay((unsigned long)((25)*(20000000/4000000.0)));
  2675  06F2  3029               	movlw	41
  2676  06F3  1683               	bsf	3,5	;RP0=1, select bank3
  2677  06F4  1703               	bsf	3,6	;RP1=1, select bank3
  2678  06F5  0092               	movwf	??_ADCRead^(0+384)
  2679  06F6                     u4257:	
  2680  06F6  0B92               	decfsz	??_ADCRead^(0+384),f
  2681  06F7  2EF6               	goto	u4257
  2682  06F8  0000               	nop
  2683                           
  2684                           ;main.c: 129: ADCON0bits.GO = 1;
  2685  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  2686  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  2687  06FB  151F               	bsf	31,2	;volatile
  2688  06FC                     l88:	
  2689                           ;main.c: 130: while (ADCON0bits.GO_DONE);
  2690                           
  2691  06FC  1D1F               	btfss	31,2	;volatile
  2692  06FD  0008               	return
  2693  06FE  2EFC               	goto	l88
  2694  06FF                     __end_of_ADCRead:	
  2695                           
  2696                           	psect	text13
  2697  0041                     __ptext13:	
  2698 ;; *************** function _ISR *****************
  2699 ;; Defined at:
  2700 ;;		line 168 in file "main.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  aux            16    0[BANK1 ] unsigned char [16]
  2705 ;;  input2          3   32[BANK1 ] float 
  2706 ;;  input           3   29[BANK1 ] float 
  2707 ;;  pre             3   21[BANK1 ] float 
  2708 ;;  i               2   26[BANK1 ] int 
  2709 ;;  preint          2   24[BANK1 ] int 
  2710 ;;  status2         2   19[BANK1 ] int 
  2711 ;;  status          2   17[BANK1 ] int 
  2712 ;;  status3         2    0        int 
  2713 ;;  qtdc            2    0        PTR unsigned char 
  2714 ;;  teste           2    0        PTR unsigned char 
  2715 ;;  per             1   35[BANK1 ] PTR unsigned char 
  2716 ;;		 -> ftoa@buf(17), 
  2717 ;;  result          1   28[BANK1 ] PTR unsigned char 
  2718 ;;		 -> ISR@aux(16), 
  2719 ;;  buf             1   16[BANK1 ] PTR unsigned char 
  2720 ;;		 -> ftoa@buf(17), 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         0       0       0       0       0
  2731 ;;      Locals:         0       0      36       0       0
  2732 ;;      Temps:          0       8       0       0       0
  2733 ;;      Totals:         0       8      36       0       0
  2734 ;;Total ram usage:       44 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    5
  2737 ;; This function calls:
  2738 ;;		_USARTReceiveChar
  2739 ;;		___awdiv
  2740 ;;		___awmod
  2741 ;;		___awtoft
  2742 ;;		___ftdiv
  2743 ;;		___ftmul
  2744 ;;		___fttol
  2745 ;;		_ftoa
  2746 ;;		_sendString
  2747 ;;		i1_USARTWriteChar
  2748 ;;		i1_USARTWriteString
  2749 ;;		i1_lcd_escreve_string
  2750 ;;		i1_lcd_gotoxy
  2751 ;; This function is called by:
  2752 ;;		Interrupt level 1
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _ISR
  2758  0041                     _ISR:	
  2759                           
  2760                           ;main.c: 172: if (PIR1bits.ADIF) {
  2761  0041  1F0C               	btfss	12,6	;volatile
  2762  0042  2A91               	goto	i1l2753
  2763                           
  2764                           ;main.c: 174: ADCResult = ((ADRESH << 8) + ADRESL);
  2765  0043  081E               	movf	30,w	;volatile
  2766  0044  1683               	bsf	3,5	;RP0=1, select bank1
  2767  0045  1303               	bcf	3,6	;RP1=0, select bank1
  2768  0046  01DC               	clrf	(_ADCResult+1)^(0+128)
  2769  0047  07DC               	addwf	(_ADCResult+1)^(0+128),f
  2770  0048  081E               	movf	30,w	;volatile
  2771  0049  01DB               	clrf	_ADCResult^(0+128)
  2772  004A  07DB               	addwf	_ADCResult^(0+128),f
  2773                           
  2774                           ;main.c: 177: char * buf;
  2775                           ;main.c: 178: char * per;
  2776                           ;main.c: 179: char * teste;
  2777                           ;main.c: 180: char * qtdc;
  2778                           ;main.c: 181: float input;
  2779                           ;main.c: 182: float input2;
  2780                           ;main.c: 183: float pre;
  2781                           ;main.c: 184: int preint;
  2782                           ;main.c: 185: int status;
  2783                           ;main.c: 186: int status2;
  2784                           ;main.c: 187: int status3;
  2785                           ;main.c: 188: int i = 0;
  2786  004B  01BA               	clrf	ISR@i^(0+128)
  2787  004C  01BB               	clrf	(ISR@i+1)^(0+128)
  2788                           
  2789                           ;main.c: 189: unsigned char *result;
  2790                           ;main.c: 190: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  2791  004D  30A0               	movlw	ISR@aux& (0+255)
  2792  004E  0084               	movwf	4
  2793  004F  30C4               	movlw	low ISR@F1351
  2794  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2795  0051  1303               	bcf	3,6	;RP1=0, select bank0
  2796  0052  00D2               	movwf	??_ISR
  2797  0053  0804               	movf	4,w
  2798  0054  00D3               	movwf	??_ISR+1
  2799  0055  3010               	movlw	16
  2800  0056  00D4               	movwf	??_ISR+2
  2801  0057                     u350_20:	
  2802  0057  0852               	movf	??_ISR,w
  2803  0058  0084               	movwf	4
  2804  0059  1383               	bcf	3,7	;select IRP bank1
  2805  005A  0800               	movf	0,w
  2806  005B  00D5               	movwf	??_ISR+3
  2807  005C  0AD2               	incf	??_ISR,f
  2808  005D  0853               	movf	??_ISR+1,w
  2809  005E  0084               	movwf	4
  2810  005F  0855               	movf	??_ISR+3,w
  2811  0060  0080               	movwf	0
  2812  0061  0AD3               	incf	??_ISR+1,f
  2813  0062  0BD4               	decfsz	??_ISR+2,f
  2814  0063  2857               	goto	u350_20
  2815                           
  2816                           ;main.c: 192: input = ADCResult * 0.0048828125;
  2817  0064  3000               	movlw	0
  2818  0065  00A0               	movwf	___ftmul@f1
  2819  0066  30A0               	movlw	160
  2820  0067  00A1               	movwf	___ftmul@f1+1
  2821  0068  303B               	movlw	59
  2822  0069  00A2               	movwf	___ftmul@f1+2
  2823  006A  1683               	bsf	3,5	;RP0=1, select bank1
  2824  006B  1303               	bcf	3,6	;RP1=0, select bank1
  2825  006C  085C               	movf	(_ADCResult+1)^(0+128),w
  2826  006D  01F9               	clrf	___awtoft@c+1
  2827  006E  07F9               	addwf	___awtoft@c+1,f
  2828  006F  085B               	movf	_ADCResult^(0+128),w
  2829  0070  01F8               	clrf	___awtoft@c
  2830  0071  07F8               	addwf	___awtoft@c,f
  2831  0072  160A  118A  27DF  120A  118A  	fcall	___awtoft
  2832  0077  0878               	movf	?___awtoft,w
  2833  0078  1283               	bcf	3,5	;RP0=0, select bank0
  2834  0079  1303               	bcf	3,6	;RP1=0, select bank0
  2835  007A  00A3               	movwf	___ftmul@f2
  2836  007B  0879               	movf	?___awtoft+1,w
  2837  007C  00A4               	movwf	___ftmul@f2+1
  2838  007D  087A               	movf	?___awtoft+2,w
  2839  007E  00A5               	movwf	___ftmul@f2+2
  2840  007F  120A  118A  25FF  120A  118A  	fcall	___ftmul
  2841  0084  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0085  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0086  0820               	movf	?___ftmul,w
  2844  0087  1683               	bsf	3,5	;RP0=1, select bank1
  2845  0088  1303               	bcf	3,6	;RP1=0, select bank1
  2846  0089  00BD               	movwf	ISR@input^(0+128)
  2847  008A  1283               	bcf	3,5	;RP0=0, select bank0
  2848  008B  1303               	bcf	3,6	;RP1=0, select bank0
  2849  008C  0821               	movf	?___ftmul+1,w
  2850  008D  1683               	bsf	3,5	;RP0=1, select bank1
  2851  008E  1303               	bcf	3,6	;RP1=0, select bank1
  2852  008F  00BE               	movwf	(ISR@input+1)^(0+128)
  2853  0090  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0091  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0092  0822               	movf	?___ftmul+2,w
  2856  0093  1683               	bsf	3,5	;RP0=1, select bank1
  2857  0094  1303               	bcf	3,6	;RP1=0, select bank1
  2858  0095  00BF               	movwf	(ISR@input+2)^(0+128)
  2859                           
  2860                           ;main.c: 193: buf = ftoa(input, &status);
  2861  0096  083D               	movf	ISR@input^(0+128),w
  2862  0097  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0098  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0099  00C4               	movwf	ftoa@f
  2865  009A  1683               	bsf	3,5	;RP0=1, select bank1
  2866  009B  1303               	bcf	3,6	;RP1=0, select bank1
  2867  009C  083E               	movf	(ISR@input+1)^(0+128),w
  2868  009D  1283               	bcf	3,5	;RP0=0, select bank0
  2869  009E  1303               	bcf	3,6	;RP1=0, select bank0
  2870  009F  00C5               	movwf	ftoa@f+1
  2871  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  2872  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  2873  00A2  083F               	movf	(ISR@input+2)^(0+128),w
  2874  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  2875  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  2876  00A5  00C6               	movwf	ftoa@f+2
  2877  00A6  30B1               	movlw	ISR@status& (0+255)
  2878  00A7  00D2               	movwf	??_ISR
  2879  00A8  0852               	movf	??_ISR,w
  2880  00A9  00C7               	movwf	ftoa@status
  2881  00AA  120A  158A  2746  120A  118A  	fcall	_ftoa
  2882  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  2883  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  2884  00B1  00D3               	movwf	??_ISR+1
  2885  00B2  0853               	movf	??_ISR+1,w
  2886  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2887  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  2888  00B5  00B0               	movwf	ISR@buf^(0+128)
  2889                           
  2890                           ;main.c: 197: Display[0] = (ADCResult / 1000) + 48;
  2891  00B6  30E8               	movlw	232
  2892  00B7  00F0               	movwf	___awdiv@divisor
  2893  00B8  3003               	movlw	3
  2894  00B9  00F1               	movwf	___awdiv@divisor+1
  2895  00BA  085C               	movf	(_ADCResult+1)^(0+128),w
  2896  00BB  01F3               	clrf	___awdiv@dividend+1
  2897  00BC  07F3               	addwf	___awdiv@dividend+1,f
  2898  00BD  085B               	movf	_ADCResult^(0+128),w
  2899  00BE  01F2               	clrf	___awdiv@dividend
  2900  00BF  07F2               	addwf	___awdiv@dividend,f
  2901  00C0  120A  158A  23A0  120A  118A  	fcall	___awdiv
  2902  00C5  0870               	movf	?___awdiv,w
  2903  00C6  3E30               	addlw	48
  2904  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  2905  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  2906  00C9  00D2               	movwf	??_ISR
  2907  00CA  0852               	movf	??_ISR,w
  2908  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2909  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  2910  00CD  00D4               	movwf	_Display^(0+128)
  2911                           
  2912                           ;main.c: 198: Display[1] = ((ADCResult / 100) % 10) + 48;
  2913  00CE  300A               	movlw	10
  2914  00CF  00F9               	movwf	___awmod@divisor
  2915  00D0  3000               	movlw	0
  2916  00D1  00FA               	movwf	___awmod@divisor+1
  2917  00D2  3064               	movlw	100
  2918  00D3  00F0               	movwf	___awdiv@divisor
  2919  00D4  3000               	movlw	0
  2920  00D5  00F1               	movwf	___awdiv@divisor+1
  2921  00D6  085C               	movf	(_ADCResult+1)^(0+128),w
  2922  00D7  01F3               	clrf	___awdiv@dividend+1
  2923  00D8  07F3               	addwf	___awdiv@dividend+1,f
  2924  00D9  085B               	movf	_ADCResult^(0+128),w
  2925  00DA  01F2               	clrf	___awdiv@dividend
  2926  00DB  07F2               	addwf	___awdiv@dividend,f
  2927  00DC  120A  158A  23A0  120A  118A  	fcall	___awdiv
  2928  00E1  0871               	movf	?___awdiv+1,w
  2929  00E2  01FC               	clrf	___awmod@dividend+1
  2930  00E3  07FC               	addwf	___awmod@dividend+1,f
  2931  00E4  0870               	movf	?___awdiv,w
  2932  00E5  01FB               	clrf	___awmod@dividend
  2933  00E6  07FB               	addwf	___awmod@dividend,f
  2934  00E7  120A  158A  22A0  120A  118A  	fcall	___awmod
  2935  00EC  0879               	movf	?___awmod,w
  2936  00ED  3E30               	addlw	48
  2937  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  2938  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  2939  00F0  00D2               	movwf	??_ISR
  2940  00F1  0852               	movf	??_ISR,w
  2941  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  2942  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  2943  00F4  00D5               	movwf	(_Display^(0+128)+1)
  2944                           
  2945                           ;main.c: 199: Display[2] = ((ADCResult / 10) % 10) + 48;
  2946  00F5  300A               	movlw	10
  2947  00F6  00F9               	movwf	___awmod@divisor
  2948  00F7  3000               	movlw	0
  2949  00F8  00FA               	movwf	___awmod@divisor+1
  2950  00F9  300A               	movlw	10
  2951  00FA  00F0               	movwf	___awdiv@divisor
  2952  00FB  3000               	movlw	0
  2953  00FC  00F1               	movwf	___awdiv@divisor+1
  2954  00FD  085C               	movf	(_ADCResult+1)^(0+128),w
  2955  00FE  01F3               	clrf	___awdiv@dividend+1
  2956  00FF  07F3               	addwf	___awdiv@dividend+1,f
  2957  0100  085B               	movf	_ADCResult^(0+128),w
  2958  0101  01F2               	clrf	___awdiv@dividend
  2959  0102  07F2               	addwf	___awdiv@dividend,f
  2960  0103  120A  158A  23A0  120A  118A  	fcall	___awdiv
  2961  0108  0871               	movf	?___awdiv+1,w
  2962  0109  01FC               	clrf	___awmod@dividend+1
  2963  010A  07FC               	addwf	___awmod@dividend+1,f
  2964  010B  0870               	movf	?___awdiv,w
  2965  010C  01FB               	clrf	___awmod@dividend
  2966  010D  07FB               	addwf	___awmod@dividend,f
  2967  010E  120A  158A  22A0  120A  118A  	fcall	___awmod
  2968  0113  0879               	movf	?___awmod,w
  2969  0114  3E30               	addlw	48
  2970  0115  1283               	bcf	3,5	;RP0=0, select bank0
  2971  0116  1303               	bcf	3,6	;RP1=0, select bank0
  2972  0117  00D2               	movwf	??_ISR
  2973  0118  0852               	movf	??_ISR,w
  2974  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2975  011A  1303               	bcf	3,6	;RP1=0, select bank1
  2976  011B  00D6               	movwf	(_Display^(0+128)+2)
  2977                           
  2978                           ;main.c: 200: Display[3] = (ADCResult % 10) + 48;
  2979  011C  300A               	movlw	10
  2980  011D  00F9               	movwf	___awmod@divisor
  2981  011E  3000               	movlw	0
  2982  011F  00FA               	movwf	___awmod@divisor+1
  2983  0120  085C               	movf	(_ADCResult+1)^(0+128),w
  2984  0121  01FC               	clrf	___awmod@dividend+1
  2985  0122  07FC               	addwf	___awmod@dividend+1,f
  2986  0123  085B               	movf	_ADCResult^(0+128),w
  2987  0124  01FB               	clrf	___awmod@dividend
  2988  0125  07FB               	addwf	___awmod@dividend,f
  2989  0126  120A  158A  22A0  120A  118A  	fcall	___awmod
  2990  012B  0879               	movf	?___awmod,w
  2991  012C  3E30               	addlw	48
  2992  012D  1283               	bcf	3,5	;RP0=0, select bank0
  2993  012E  1303               	bcf	3,6	;RP1=0, select bank0
  2994  012F  00D2               	movwf	??_ISR
  2995  0130  0852               	movf	??_ISR,w
  2996  0131  1683               	bsf	3,5	;RP0=1, select bank1
  2997  0132  1303               	bcf	3,6	;RP1=0, select bank1
  2998  0133  00D7               	movwf	(_Display^(0+128)+3)
  2999                           
  3000                           ;main.c: 202: lcd_gotoxy(0, 1);
  3001  0134  01F5               	clrf	i1lcd_gotoxy@y
  3002  0135  0AF5               	incf	i1lcd_gotoxy@y,f
  3003  0136  3000               	movlw	0
  3004  0137  160A  118A  2772  120A  118A  	fcall	i1_lcd_gotoxy
  3005                           
  3006                           ;main.c: 203: lcd_escreve_string("Nivel:");
  3007  013C  30B3               	movlw	low (STR_2-__stringbase)
  3008  013D  00FC               	movwf	i1lcd_escreve_string@y
  3009  013E  3080               	movlw	128
  3010  013F  00FD               	movwf	i1lcd_escreve_string@y+1
  3011  0140  120A  158A  2053  120A  118A  	fcall	i1_lcd_escreve_string
  3012                           
  3013                           ;main.c: 204: lcd_gotoxy(7, 1);
  3014  0145  01F5               	clrf	i1lcd_gotoxy@y
  3015  0146  0AF5               	incf	i1lcd_gotoxy@y,f
  3016  0147  3007               	movlw	7
  3017  0148  160A  118A  2772  120A  118A  	fcall	i1_lcd_gotoxy
  3018                           
  3019                           ;main.c: 205: input2 = ((input * 100) / 1);
  3020  014D  3000               	movlw	0
  3021  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3022  014F  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0150  00B0               	movwf	___ftdiv@f2
  3024  0151  3080               	movlw	128
  3025  0152  00B1               	movwf	___ftdiv@f2+1
  3026  0153  303F               	movlw	63
  3027  0154  00B2               	movwf	___ftdiv@f2+2
  3028  0155  3000               	movlw	0
  3029  0156  00A0               	movwf	___ftmul@f1
  3030  0157  30C8               	movlw	200
  3031  0158  00A1               	movwf	___ftmul@f1+1
  3032  0159  3042               	movlw	66
  3033  015A  00A2               	movwf	___ftmul@f1+2
  3034  015B  1683               	bsf	3,5	;RP0=1, select bank1
  3035  015C  1303               	bcf	3,6	;RP1=0, select bank1
  3036  015D  083D               	movf	ISR@input^(0+128),w
  3037  015E  1283               	bcf	3,5	;RP0=0, select bank0
  3038  015F  1303               	bcf	3,6	;RP1=0, select bank0
  3039  0160  00A3               	movwf	___ftmul@f2
  3040  0161  1683               	bsf	3,5	;RP0=1, select bank1
  3041  0162  1303               	bcf	3,6	;RP1=0, select bank1
  3042  0163  083E               	movf	(ISR@input+1)^(0+128),w
  3043  0164  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0165  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0166  00A4               	movwf	___ftmul@f2+1
  3046  0167  1683               	bsf	3,5	;RP0=1, select bank1
  3047  0168  1303               	bcf	3,6	;RP1=0, select bank1
  3048  0169  083F               	movf	(ISR@input+2)^(0+128),w
  3049  016A  1283               	bcf	3,5	;RP0=0, select bank0
  3050  016B  1303               	bcf	3,6	;RP1=0, select bank0
  3051  016C  00A5               	movwf	___ftmul@f2+2
  3052  016D  120A  118A  25FF  120A  118A  	fcall	___ftmul
  3053  0172  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0173  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0174  0820               	movf	?___ftmul,w
  3056  0175  00B3               	movwf	___ftdiv@f1
  3057  0176  0821               	movf	?___ftmul+1,w
  3058  0177  00B4               	movwf	___ftdiv@f1+1
  3059  0178  0822               	movf	?___ftmul+2,w
  3060  0179  00B5               	movwf	___ftdiv@f1+2
  3061  017A  120A  158A  268E  120A  118A  	fcall	___ftdiv
  3062  017F  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0180  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0181  0830               	movf	?___ftdiv,w
  3065  0182  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0183  1303               	bcf	3,6	;RP1=0, select bank1
  3067  0184  00C0               	movwf	ISR@input2^(0+128)
  3068  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0186  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0187  0831               	movf	?___ftdiv+1,w
  3071  0188  1683               	bsf	3,5	;RP0=1, select bank1
  3072  0189  1303               	bcf	3,6	;RP1=0, select bank1
  3073  018A  00C1               	movwf	(ISR@input2+1)^(0+128)
  3074  018B  1283               	bcf	3,5	;RP0=0, select bank0
  3075  018C  1303               	bcf	3,6	;RP1=0, select bank0
  3076  018D  0832               	movf	?___ftdiv+2,w
  3077  018E  1683               	bsf	3,5	;RP0=1, select bank1
  3078  018F  1303               	bcf	3,6	;RP1=0, select bank1
  3079  0190  00C2               	movwf	(ISR@input2+2)^(0+128)
  3080                           
  3081                           ;main.c: 206: per = ftoa(input2, &status2);
  3082  0191  0840               	movf	ISR@input2^(0+128),w
  3083  0192  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0193  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0194  00C4               	movwf	ftoa@f
  3086  0195  1683               	bsf	3,5	;RP0=1, select bank1
  3087  0196  1303               	bcf	3,6	;RP1=0, select bank1
  3088  0197  0841               	movf	(ISR@input2+1)^(0+128),w
  3089  0198  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0199  1303               	bcf	3,6	;RP1=0, select bank0
  3091  019A  00C5               	movwf	ftoa@f+1
  3092  019B  1683               	bsf	3,5	;RP0=1, select bank1
  3093  019C  1303               	bcf	3,6	;RP1=0, select bank1
  3094  019D  0842               	movf	(ISR@input2+2)^(0+128),w
  3095  019E  1283               	bcf	3,5	;RP0=0, select bank0
  3096  019F  1303               	bcf	3,6	;RP1=0, select bank0
  3097  01A0  00C6               	movwf	ftoa@f+2
  3098  01A1  30B3               	movlw	ISR@status2& (0+255)
  3099  01A2  00D2               	movwf	??_ISR
  3100  01A3  0852               	movf	??_ISR,w
  3101  01A4  00C7               	movwf	ftoa@status
  3102  01A5  120A  158A  2746  120A  118A  	fcall	_ftoa
  3103  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  3104  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  3105  01AC  00D3               	movwf	??_ISR+1
  3106  01AD  0853               	movf	??_ISR+1,w
  3107  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  3108  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  3109  01B0  00C3               	movwf	ISR@per^(0+128)
  3110                           
  3111                           ;main.c: 207: lcd_escreve_string(per);
  3112  01B1  0843               	movf	ISR@per^(0+128),w
  3113  01B2  00FC               	movwf	i1lcd_escreve_string@y
  3114  01B3  3000               	movlw	0
  3115  01B4  00FD               	movwf	i1lcd_escreve_string@y+1
  3116  01B5  120A  158A  2053  120A  118A  	fcall	i1_lcd_escreve_string
  3117                           
  3118                           ;main.c: 209: sendString(per);
  3119  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  3120  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  3121  01BC  0843               	movf	ISR@per^(0+128),w
  3122  01BD  120A  158A  22EF  120A  118A  	fcall	_sendString
  3123                           
  3124                           ;main.c: 211: lcd_gotoxy(16, 1);
  3125  01C2  01F5               	clrf	i1lcd_gotoxy@y
  3126  01C3  0AF5               	incf	i1lcd_gotoxy@y,f
  3127  01C4  3010               	movlw	16
  3128  01C5  160A  118A  2772  120A  118A  	fcall	i1_lcd_gotoxy
  3129                           
  3130                           ;main.c: 212: lcd_escreve_string("%");
  3131  01CA  30BA               	movlw	low (STR_3-__stringbase)
  3132  01CB  00FC               	movwf	i1lcd_escreve_string@y
  3133  01CC  3080               	movlw	128
  3134  01CD  00FD               	movwf	i1lcd_escreve_string@y+1
  3135  01CE  120A  158A  2053  120A  118A  	fcall	i1_lcd_escreve_string
  3136                           
  3137                           ;main.c: 213: lcd_gotoxy(0, 0);
  3138  01D3  01F5               	clrf	i1lcd_gotoxy@y
  3139  01D4  3000               	movlw	0
  3140  01D5  160A  118A  2772  120A  118A  	fcall	i1_lcd_gotoxy
  3141                           
  3142                           ;main.c: 214: pre = input2 * 0.16;
  3143  01DA  30D7               	movlw	215
  3144  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  3145  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  3146  01DD  00A0               	movwf	___ftmul@f1
  3147  01DE  3023               	movlw	35
  3148  01DF  00A1               	movwf	___ftmul@f1+1
  3149  01E0  303E               	movlw	62
  3150  01E1  00A2               	movwf	___ftmul@f1+2
  3151  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  3152  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  3153  01E4  0840               	movf	ISR@input2^(0+128),w
  3154  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  3155  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  3156  01E7  00A3               	movwf	___ftmul@f2
  3157  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  3158  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  3159  01EA  0841               	movf	(ISR@input2+1)^(0+128),w
  3160  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  3161  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  3162  01ED  00A4               	movwf	___ftmul@f2+1
  3163  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  3164  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  3165  01F0  0842               	movf	(ISR@input2+2)^(0+128),w
  3166  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3167  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3168  01F3  00A5               	movwf	___ftmul@f2+2
  3169  01F4  120A  118A  25FF  120A  118A  	fcall	___ftmul
  3170  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  3171  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  3172  01FB  0820               	movf	?___ftmul,w
  3173  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  3174  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  3175  01FE  00B5               	movwf	ISR@pre^(0+128)
  3176  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  3177  0200  1303               	bcf	3,6	;RP1=0, select bank0
  3178  0201  0821               	movf	?___ftmul+1,w
  3179  0202  1683               	bsf	3,5	;RP0=1, select bank1
  3180  0203  1303               	bcf	3,6	;RP1=0, select bank1
  3181  0204  00B6               	movwf	(ISR@pre+1)^(0+128)
  3182  0205  1283               	bcf	3,5	;RP0=0, select bank0
  3183  0206  1303               	bcf	3,6	;RP1=0, select bank0
  3184  0207  0822               	movf	?___ftmul+2,w
  3185  0208  1683               	bsf	3,5	;RP0=1, select bank1
  3186  0209  1303               	bcf	3,6	;RP1=0, select bank1
  3187  020A  00B7               	movwf	(ISR@pre+2)^(0+128)
  3188                           
  3189                           ;main.c: 215: preint = (int) pre;
  3190  020B  0835               	movf	ISR@pre^(0+128),w
  3191  020C  1283               	bcf	3,5	;RP0=0, select bank0
  3192  020D  1303               	bcf	3,6	;RP1=0, select bank0
  3193  020E  00B0               	movwf	___fttol@f1
  3194  020F  1683               	bsf	3,5	;RP0=1, select bank1
  3195  0210  1303               	bcf	3,6	;RP1=0, select bank1
  3196  0211  0836               	movf	(ISR@pre+1)^(0+128),w
  3197  0212  1283               	bcf	3,5	;RP0=0, select bank0
  3198  0213  1303               	bcf	3,6	;RP1=0, select bank0
  3199  0214  00B1               	movwf	___fttol@f1+1
  3200  0215  1683               	bsf	3,5	;RP0=1, select bank1
  3201  0216  1303               	bcf	3,6	;RP1=0, select bank1
  3202  0217  0837               	movf	(ISR@pre+2)^(0+128),w
  3203  0218  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0219  1303               	bcf	3,6	;RP1=0, select bank0
  3205  021A  00B2               	movwf	___fttol@f1+2
  3206  021B  120A  158A  2600  120A  118A  	fcall	___fttol
  3207  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3208  0221  1303               	bcf	3,6	;RP1=0, select bank0
  3209  0222  0831               	movf	?___fttol+1,w
  3210  0223  1683               	bsf	3,5	;RP0=1, select bank1
  3211  0224  1303               	bcf	3,6	;RP1=0, select bank1
  3212  0225  01B9               	clrf	(ISR@preint+1)^(0+128)
  3213  0226  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3214  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0228  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0229  0830               	movf	?___fttol,w
  3217  022A  1683               	bsf	3,5	;RP0=1, select bank1
  3218  022B  1303               	bcf	3,6	;RP1=0, select bank1
  3219  022C  01B8               	clrf	ISR@preint^(0+128)
  3220  022D  07B8               	addwf	ISR@preint^(0+128),f
  3221                           
  3222                           ;main.c: 218: if (ADCResult < 200) {
  3223  022E  085C               	movf	(_ADCResult+1)^(0+128),w
  3224  022F  3A80               	xorlw	128
  3225  0230  00FF               	movwf	127
  3226  0231  3080               	movlw	128
  3227  0232  027F               	subwf	127,w
  3228  0233  1D03               	skipz
  3229  0234  2A37               	goto	u351_25
  3230  0235  30C8               	movlw	200
  3231  0236  025B               	subwf	_ADCResult^(0+128),w
  3232  0237                     u351_25:	
  3233  0237  1803               	skipnc
  3234  0238  2A3D               	goto	i1l2733
  3235                           
  3236                           ;main.c: 219: PORTDbits.RD2 = 0;
  3237  0239  1283               	bcf	3,5	;RP0=0, select bank0
  3238  023A  1303               	bcf	3,6	;RP1=0, select bank0
  3239  023B  1108               	bcf	8,2	;volatile
  3240                           
  3241                           ;main.c: 220: PORTDbits.RD3 = 1;
  3242  023C  1588               	bsf	8,3	;volatile
  3243  023D                     i1l2733:	
  3244                           
  3245                           ;main.c: 221: }
  3246                           ;main.c: 223: if (ADCResult > 200) {
  3247  023D  1683               	bsf	3,5	;RP0=1, select bank1
  3248  023E  1303               	bcf	3,6	;RP1=0, select bank1
  3249  023F  085C               	movf	(_ADCResult+1)^(0+128),w
  3250  0240  3A80               	xorlw	128
  3251  0241  00FF               	movwf	127
  3252  0242  3080               	movlw	128
  3253  0243  027F               	subwf	127,w
  3254  0244  1D03               	skipz
  3255  0245  2A48               	goto	u352_25
  3256  0246  30C9               	movlw	201
  3257  0247  025B               	subwf	_ADCResult^(0+128),w
  3258  0248                     u352_25:	
  3259  0248  1C03               	skipc
  3260  0249  2A4E               	goto	i1l2743
  3261                           
  3262                           ;main.c: 224: PORTDbits.RD2 = 1;
  3263  024A  1283               	bcf	3,5	;RP0=0, select bank0
  3264  024B  1303               	bcf	3,6	;RP1=0, select bank0
  3265  024C  1508               	bsf	8,2	;volatile
  3266                           
  3267                           ;main.c: 225: PORTDbits.RD3 = 0;
  3268  024D  1188               	bcf	8,3	;volatile
  3269  024E                     i1l2743:	
  3270                           ;main.c: 226: }
  3271                           ;main.c: 229: while (preint >= 0) {
  3272                           
  3273  024E  1683               	bsf	3,5	;RP0=1, select bank1
  3274  024F  1303               	bcf	3,6	;RP1=0, select bank1
  3275  0250  1BB9               	btfsc	(ISR@preint+1)^(0+128),7
  3276  0251  2A6E               	goto	i1l2745
  3277                           
  3278                           ;main.c: 230: aux[i] = 0xFF;
  3279  0252  30FF               	movlw	255
  3280  0253  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0254  00D2               	movwf	??_ISR
  3282  0255  1683               	bsf	3,5	;RP0=1, select bank1
  3283  0256  1303               	bcf	3,6	;RP1=0, select bank1
  3284  0257  083A               	movf	ISR@i^(0+128),w
  3285  0258  3EA0               	addlw	ISR@aux& (0+255)
  3286  0259  0084               	movwf	4
  3287  025A  1283               	bcf	3,5	;RP0=0, select bank0
  3288  025B  1303               	bcf	3,6	;RP1=0, select bank0
  3289  025C  0852               	movf	??_ISR,w
  3290  025D  1383               	bcf	3,7	;select IRP bank1
  3291  025E  0080               	movwf	0
  3292                           
  3293                           ;main.c: 231: preint--;
  3294  025F  30FF               	movlw	255
  3295  0260  1683               	bsf	3,5	;RP0=1, select bank1
  3296  0261  1303               	bcf	3,6	;RP1=0, select bank1
  3297  0262  07B8               	addwf	ISR@preint^(0+128),f
  3298  0263  1803               	skipnc
  3299  0264  0AB9               	incf	(ISR@preint+1)^(0+128),f
  3300  0265  30FF               	movlw	255
  3301  0266  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3302                           
  3303                           ;main.c: 232: i++;
  3304  0267  3001               	movlw	1
  3305  0268  07BA               	addwf	ISR@i^(0+128),f
  3306  0269  1803               	skipnc
  3307  026A  0ABB               	incf	(ISR@i+1)^(0+128),f
  3308  026B  3000               	movlw	0
  3309  026C  07BB               	addwf	(ISR@i+1)^(0+128),f
  3310  026D  2A4E               	goto	i1l2743
  3311  026E                     i1l2745:	
  3312                           
  3313                           ;main.c: 233: }
  3314                           ;main.c: 234: result = &aux;
  3315  026E  30A0               	movlw	ISR@aux& (0+255)
  3316  026F  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0270  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0271  00D2               	movwf	??_ISR
  3319  0272  0852               	movf	??_ISR,w
  3320  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3321  0274  1303               	bcf	3,6	;RP1=0, select bank1
  3322  0275  00BC               	movwf	ISR@result^(0+128)
  3323                           
  3324                           ;main.c: 236: lcd_escreve_string(result);
  3325  0276  083C               	movf	ISR@result^(0+128),w
  3326  0277  00FC               	movwf	i1lcd_escreve_string@y
  3327  0278  3000               	movlw	0
  3328  0279  00FD               	movwf	i1lcd_escreve_string@y+1
  3329  027A  120A  158A  2053  120A  118A  	fcall	i1_lcd_escreve_string
  3330                           
  3331                           ;main.c: 259: _delay((unsigned long)((200)*(20000000/4000.0)));
  3332  027F  3006               	movlw	6
  3333  0280  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0281  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0282  00D4               	movwf	??_ISR+2
  3336  0283  3013               	movlw	19
  3337  0284  00D3               	movwf	??_ISR+1
  3338  0285  30B1               	movlw	177
  3339  0286  00D2               	movwf	??_ISR
  3340  0287                     u426_27:	
  3341  0287  0BD2               	decfsz	??_ISR,f
  3342  0288  2A87               	goto	u426_27
  3343  0289  0BD3               	decfsz	??_ISR+1,f
  3344  028A  2A87               	goto	u426_27
  3345  028B  0BD4               	decfsz	??_ISR+2,f
  3346  028C  2A87               	goto	u426_27
  3347  028D  2A8E               	nop2
  3348                           
  3349                           ;main.c: 261: PIR1bits.ADIF = 0;
  3350  028E  1283               	bcf	3,5	;RP0=0, select bank0
  3351  028F  1303               	bcf	3,6	;RP1=0, select bank0
  3352  0290  130C               	bcf	12,6	;volatile
  3353  0291                     i1l2753:	
  3354                           
  3355                           ;main.c: 262: }
  3356                           ;main.c: 264: if (PIR1bits.RCIF) {
  3357  0291  1E8C               	btfss	12,5	;volatile
  3358  0292  2AAF               	goto	i1l115
  3359                           
  3360                           ;main.c: 265: USARTWriteString("\n\r Entrou na funcao de Interrupcao da USART");
  3361  0293  302D               	movlw	low (STR_4-__stringbase)
  3362  0294  00F1               	movwf	i1USARTWriteString@str
  3363  0295  3080               	movlw	128
  3364  0296  00F2               	movwf	i1USARTWriteString@str+1
  3365  0297  120A  158A  200D  120A  118A  	fcall	i1_USARTWriteString
  3366                           
  3367                           ;main.c: 266: USARTWriteString("\n\r Caracter Digitado :");
  3368  029C  3081               	movlw	low (STR_5-__stringbase)
  3369  029D  00F1               	movwf	i1USARTWriteString@str
  3370  029E  3080               	movlw	128
  3371  029F  00F2               	movwf	i1USARTWriteString@str+1
  3372  02A0  120A  158A  200D  120A  118A  	fcall	i1_USARTWriteString
  3373                           
  3374                           ;main.c: 267: USARTWriteChar(USARTReceiveChar());
  3375  02A5  160A  118A  278C  120A  118A  	fcall	_USARTReceiveChar
  3376  02AA  160A  118A  2712  120A  118A  	fcall	i1_USARTWriteChar
  3377  02AF                     i1l115:	
  3378  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  3379  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  3380  02B1  0859               	movf	??_ISR+7,w
  3381  02B2  00FF               	movwf	127
  3382  02B3  0858               	movf	??_ISR+6,w
  3383  02B4  008A               	movwf	10
  3384  02B5  0857               	movf	??_ISR+5,w
  3385  02B6  0084               	movwf	4
  3386  02B7  0E56               	swapf	(??_ISR+4)^0,w
  3387  02B8  0083               	movwf	3
  3388  02B9  0EFE               	swapf	126,f
  3389  02BA  0E7E               	swapf	126,w
  3390  02BB  0009               	retfie
  3391  02BC                     __end_of_ISR:	
  3392                           
  3393                           	psect	intentry
  3394  0004                     __pintentry:	
  3395                           ;incstack = 0
  3396 ;; hardware stack exceeded
  3397                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3398                           
  3399  0004                     interrupt_function:	
  3400  007E                     saved_w	set	btemp
  3401  0004  00FE               	movwf	btemp
  3402  0005  0E03               	swapf	3,w
  3403  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0008  00D6               	movwf	??_ISR+4
  3406  0009  0804               	movf	4,w
  3407  000A  00D7               	movwf	??_ISR+5
  3408  000B  080A               	movf	10,w
  3409  000C  00D8               	movwf	??_ISR+6
  3410  000D  087F               	movf	btemp+1,w
  3411  000E  00D9               	movwf	??_ISR+7
  3412  000F  120A  118A  2841   	ljmp	_ISR
  3413                           
  3414                           	psect	text14
  3415  0853                     __ptext14:	
  3416 ;; *************** function i1_lcd_escreve_string *****************
  3417 ;; Defined at:
  3418 ;;		line 168 in file "lcd_4bit.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;  y               2   12[COMMON] PTR const unsigned char 
  3421 ;;		 -> ftoa@buf(17), STR_6(16), STR_3(2), STR_2(7), 
  3422 ;;		 -> ISR@aux(16), 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;		None               void
  3427 ;; Registers used:
  3428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3434 ;;      Params:         2       0       0       0       0
  3435 ;;      Locals:         0       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0
  3437 ;;      Totals:         2       0       0       0       0
  3438 ;;Total ram usage:        2 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    4
  3441 ;; This function calls:
  3442 ;;		i1_lcd_putc
  3443 ;; This function is called by:
  3444 ;;		_ISR
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           
  3449                           ;psect for function i1_lcd_escreve_string
  3450  0853                     i1_lcd_escreve_string:	
  3451  0853                     i1l2683:	
  3452                           ;lcd_4bit.c: 170: while(*y!='\0')
  3453                           
  3454                           ;incstack = 0
  3455 ;; hardware stack exceeded
  3456                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3457                           
  3458  0853  087D               	movf	i1lcd_escreve_string@y+1,w
  3459  0854  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0855  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0856  00FF               	movwf	127
  3462  0857  087C               	movf	i1lcd_escreve_string@y,w
  3463  0858  0084               	movwf	4
  3464  0859  120A  118A  2700  120A  158A  	fcall	stringtab
  3465  085E  3800               	iorlw	0
  3466  085F  1903               	btfsc	3,2
  3467  0860  0008               	return
  3468                           
  3469                           ;lcd_4bit.c: 171: {
  3470                           ;lcd_4bit.c: 172: lcd_putc(*y);
  3471  0861  087D               	movf	i1lcd_escreve_string@y+1,w
  3472  0862  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0863  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0864  00FF               	movwf	127
  3475  0865  087C               	movf	i1lcd_escreve_string@y,w
  3476  0866  0084               	movwf	4
  3477  0867  120A  118A  2700  120A  158A  	fcall	stringtab
  3478  086C  120A  158A  2190  120A  158A  	fcall	i1_lcd_putc
  3479                           
  3480                           ;lcd_4bit.c: 173: y++;
  3481  0871  3001               	movlw	1
  3482  0872  07FC               	addwf	i1lcd_escreve_string@y,f
  3483  0873  1803               	skipnc
  3484  0874  0AFD               	incf	i1lcd_escreve_string@y+1,f
  3485  0875  2853               	goto	i1l2683
  3486  0876                     __end_ofi1_lcd_escreve_string:	
  3487                           
  3488                           	psect	text15
  3489  0990                     __ptext15:	
  3490 ;; *************** function i1_lcd_putc *****************
  3491 ;; Defined at:
  3492 ;;		line 82 in file "lcd_4bit.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  c               1    wreg     unsigned char 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  c               1   11[COMMON] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;		None               void
  3499 ;; Registers used:
  3500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3506 ;;      Params:         0       0       0       0       0
  3507 ;;      Locals:         1       0       0       0       0
  3508 ;;      Temps:          2       0       0       0       0
  3509 ;;      Totals:         3       0       0       0       0
  3510 ;;Total ram usage:        3 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    3
  3513 ;; This function calls:
  3514 ;;		i1_lcd_envia_byte
  3515 ;;		i1_lcd_gotoxy
  3516 ;; This function is called by:
  3517 ;;		i1_lcd_escreve_string
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           
  3522                           ;psect for function i1_lcd_putc
  3523  0990                     i1_lcd_putc:	
  3524                           
  3525                           ;incstack = 0
  3526 ;; hardware stack exceeded
  3527                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3528                           ;i1lcd_putc@c stored from wreg
  3529  0990  00FB               	movwf	i1lcd_putc@c
  3530                           
  3531                           ;lcd_4bit.c: 84: switch(c)
  3532  0991  29BF               	goto	i1l2419
  3533  0992                     i1l2407:	
  3534                           ;lcd_4bit.c: 85: {
  3535                           ;lcd_4bit.c: 86: case '\f':
  3536                           
  3537                           
  3538                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  3539  0992  01F2               	clrf	i1lcd_envia_byte@n
  3540  0993  0AF2               	incf	i1lcd_envia_byte@n,f
  3541  0994  3000               	movlw	0
  3542  0995  120A  158A  20CA  120A  158A  	fcall	i1_lcd_envia_byte
  3543                           
  3544                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3545  099A  300D               	movlw	13
  3546  099B  00FA               	movwf	??i1_lcd_putc+1
  3547  099C  30FB               	movlw	251
  3548  099D  00F9               	movwf	??i1_lcd_putc
  3549  099E                     u427_27:	
  3550  099E  0BF9               	decfsz	??i1_lcd_putc,f
  3551  099F  299E               	goto	u427_27
  3552  09A0  0BFA               	decfsz	??i1_lcd_putc+1,f
  3553  09A1  299E               	goto	u427_27
  3554  09A2  29A3               	nop2
  3555                           
  3556                           ;lcd_4bit.c: 89: break;
  3557  09A3  0008               	return
  3558  09A4                     i1l2411:	
  3559                           ;lcd_4bit.c: 91: case '\n':
  3560                           
  3561                           
  3562                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  3563  09A4  3002               	movlw	2
  3564  09A5  00F9               	movwf	??i1_lcd_putc
  3565  09A6  0879               	movf	??i1_lcd_putc,w
  3566  09A7  00F5               	movwf	i1lcd_gotoxy@y
  3567  09A8  3001               	movlw	1
  3568  09A9  160A  118A  2772   	fcall	i1_lcd_gotoxy
  3569                           
  3570                           ;lcd_4bit.c: 93: break;
  3571  09AC  0008               	return
  3572  09AD                     i1l2413:	
  3573                           ;lcd_4bit.c: 95: case '\b':
  3574                           
  3575                           
  3576                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  3577  09AD  3010               	movlw	16
  3578  09AE  00F9               	movwf	??i1_lcd_putc
  3579  09AF  0879               	movf	??i1_lcd_putc,w
  3580  09B0  00F2               	movwf	i1lcd_envia_byte@n
  3581  09B1  3000               	movlw	0
  3582  09B2  120A  158A  20CA   	fcall	i1_lcd_envia_byte
  3583                           
  3584                           ;lcd_4bit.c: 97: break;
  3585  09B5  0008               	return
  3586  09B6                     i1l2415:	
  3587                           ;lcd_4bit.c: 99: default:
  3588                           
  3589                           
  3590                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  3591  09B6  087B               	movf	i1lcd_putc@c,w
  3592  09B7  00F9               	movwf	??i1_lcd_putc
  3593  09B8  0879               	movf	??i1_lcd_putc,w
  3594  09B9  00F2               	movwf	i1lcd_envia_byte@n
  3595  09BA  3001               	movlw	1
  3596  09BB  120A  158A  20CA   	fcall	i1_lcd_envia_byte
  3597                           
  3598                           ;lcd_4bit.c: 102: }
  3599                           
  3600                           ;lcd_4bit.c: 101: break;
  3601  09BE  0008               	return
  3602  09BF                     i1l2419:	
  3603  09BF  087B               	movf	i1lcd_putc@c,w
  3604                           
  3605                           ; Switch size 1, requested type "space"
  3606                           ; Number of cases is 3, Range of values is 8 to 12
  3607                           ; switch strategies available:
  3608                           ; Name         Instructions Cycles
  3609                           ; simple_byte           10     6 (average)
  3610                           ; direct_byte           26    11 (fixed)
  3611                           ; jumptable            263     9 (fixed)
  3612                           ;	Chosen strategy is simple_byte
  3613  09C0  3A08               	xorlw	8	; case 8
  3614  09C1  1903               	skipnz
  3615  09C2  29AD               	goto	i1l2413
  3616  09C3  3A02               	xorlw	2	; case 10
  3617  09C4  1903               	skipnz
  3618  09C5  29A4               	goto	i1l2411
  3619  09C6  3A06               	xorlw	6	; case 12
  3620  09C7  1903               	skipnz
  3621  09C8  2992               	goto	i1l2407
  3622  09C9  29B6               	goto	i1l2415
  3623  09CA  0008               	return
  3624  09CB                     __end_ofi1_lcd_putc:	
  3625                           
  3626                           	psect	text16
  3627  1772                     __ptext16:	
  3628 ;; *************** function i1_lcd_gotoxy *****************
  3629 ;; Defined at:
  3630 ;;		line 70 in file "lcd_4bit.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  x               1    wreg     unsigned char 
  3633 ;;  y               1    5[COMMON] unsigned char 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  x               1    7[COMMON] unsigned char 
  3636 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3646 ;;      Params:         1       0       0       0       0
  3647 ;;      Locals:         2       0       0       0       0
  3648 ;;      Temps:          1       0       0       0       0
  3649 ;;      Totals:         4       0       0       0       0
  3650 ;;Total ram usage:        4 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    2
  3653 ;; This function calls:
  3654 ;;		i1_lcd_envia_byte
  3655 ;; This function is called by:
  3656 ;;		_ISR
  3657 ;;		i1_lcd_putc
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function i1_lcd_gotoxy
  3663  1772                     i1_lcd_gotoxy:	
  3664                           
  3665                           ;incstack = 0
  3666 ;; hardware stack exceeded
  3667                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  3668                           ;i1lcd_gotoxy@x stored from wreg
  3669  1772  00F7               	movwf	i1lcd_gotoxy@x
  3670                           
  3671                           ;lcd_4bit.c: 72: unsigned char address;
  3672                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  3673  1773  0875               	movf	i1lcd_gotoxy@y,w
  3674  1774  3A01               	xorlw	1
  3675  1775  1903               	skipnz
  3676  1776  2F7C               	goto	i1l2089
  3677  1777  3040               	movlw	64
  3678  1778  00F6               	movwf	??i1_lcd_gotoxy
  3679  1779  0876               	movf	??i1_lcd_gotoxy,w
  3680  177A  00F8               	movwf	i1lcd_gotoxy@address
  3681  177B  2F7D               	goto	i1l2091
  3682  177C                     i1l2089:	
  3683                           
  3684                           ;lcd_4bit.c: 75: else address=0;
  3685  177C  01F8               	clrf	i1lcd_gotoxy@address
  3686  177D                     i1l2091:	
  3687                           
  3688                           ;lcd_4bit.c: 77: address += x-1;
  3689  177D  0877               	movf	i1lcd_gotoxy@x,w
  3690  177E  3EFF               	addlw	255
  3691  177F  00F6               	movwf	??i1_lcd_gotoxy
  3692  1780  0876               	movf	??i1_lcd_gotoxy,w
  3693  1781  07F8               	addwf	i1lcd_gotoxy@address,f
  3694                           
  3695                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  3696  1782  0878               	movf	i1lcd_gotoxy@address,w
  3697  1783  3880               	iorlw	128
  3698  1784  00F6               	movwf	??i1_lcd_gotoxy
  3699  1785  0876               	movf	??i1_lcd_gotoxy,w
  3700  1786  00F2               	movwf	i1lcd_envia_byte@n
  3701  1787  3000               	movlw	0
  3702  1788  120A  158A  20CA   	fcall	i1_lcd_envia_byte
  3703  178B  0008               	return
  3704  178C                     __end_ofi1_lcd_gotoxy:	
  3705                           
  3706                           	psect	text17
  3707  08CA                     __ptext17:	
  3708 ;; *************** function i1_lcd_envia_byte *****************
  3709 ;; Defined at:
  3710 ;;		line 53 in file "lcd_4bit.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  address         1    wreg     unsigned char 
  3713 ;;  n               1    2[COMMON] unsigned char 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;  address         1    4[COMMON] unsigned char 
  3716 ;; Return value:  Size  Location     Type
  3717 ;;		None               void
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0, pclath, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3725 ;;      Params:         1       0       0       0       0
  3726 ;;      Locals:         1       0       0       0       0
  3727 ;;      Temps:          1       0       0       0       0
  3728 ;;      Totals:         3       0       0       0       0
  3729 ;;Total ram usage:        3 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    1
  3732 ;; This function calls:
  3733 ;;		i1_lcd_envia_nibble
  3734 ;; This function is called by:
  3735 ;;		i1_lcd_gotoxy
  3736 ;;		i1_lcd_putc
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           
  3741                           ;psect for function i1_lcd_envia_byte
  3742  08CA                     i1_lcd_envia_byte:	
  3743                           
  3744                           ;incstack = 0
  3745 ;; hardware stack exceeded
  3746                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  3747                           ;i1lcd_envia_byte@address stored from wreg
  3748  08CA  00F4               	movwf	i1lcd_envia_byte@address
  3749                           
  3750                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  3751  08CB  1283               	bcf	3,5	;RP0=0, select bank0
  3752  08CC  1303               	bcf	3,6	;RP1=0, select bank0
  3753  08CD  1286               	bcf	6,5	;volatile
  3754                           
  3755                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  3756  08CE  3063               	movlw	99
  3757  08CF  00F3               	movwf	??i1_lcd_envia_byte
  3758  08D0                     u428_27:	
  3759  08D0  0BF3               	decfsz	??i1_lcd_envia_byte,f
  3760  08D1  28D0               	goto	u428_27
  3761  08D2  28D3               	nop2	;nop
  3762                           
  3763                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  3764  08D3  0874               	movf	i1lcd_envia_byte@address,w
  3765  08D4  1903               	btfsc	3,2
  3766  08D5  28DA               	goto	i1l159
  3767  08D6  1283               	bcf	3,5	;RP0=0, select bank0
  3768  08D7  1303               	bcf	3,6	;RP1=0, select bank0
  3769  08D8  1686               	bsf	6,5	;volatile
  3770  08D9  28DD               	goto	i1l160
  3771  08DA                     i1l159:	
  3772                           
  3773                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  3774  08DA  1283               	bcf	3,5	;RP0=0, select bank0
  3775  08DB  1303               	bcf	3,6	;RP1=0, select bank0
  3776  08DC  1286               	bcf	6,5	;volatile
  3777  08DD                     i1l160:	
  3778                           
  3779                           ;lcd_4bit.c: 61: _delay(1);
  3780  08DD  0000               	nop
  3781                           
  3782                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  3783  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  3784  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  3785  08E0  1206               	bcf	6,4	;volatile
  3786                           
  3787                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  3788  08E1  0872               	movf	i1lcd_envia_byte@n,w
  3789  08E2  00F3               	movwf	??i1_lcd_envia_byte
  3790  08E3  3004               	movlw	4
  3791  08E4                     u206_25:	
  3792  08E4  1003               	clrc
  3793  08E5  0CF3               	rrf	??i1_lcd_envia_byte,f
  3794  08E6  3EFF               	addlw	-1
  3795  08E7  1D03               	skipz
  3796  08E8  28E4               	goto	u206_25
  3797  08E9  0873               	movf	??i1_lcd_envia_byte,w
  3798  08EA  120A  158A  2157  120A  158A  	fcall	i1_lcd_envia_nibble
  3799                           
  3800                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  3801  08EF  0872               	movf	i1lcd_envia_byte@n,w
  3802  08F0  390F               	andlw	15
  3803  08F1  120A  158A  2157   	fcall	i1_lcd_envia_nibble
  3804  08F4  0008               	return
  3805  08F5                     __end_ofi1_lcd_envia_byte:	
  3806                           
  3807                           	psect	text18
  3808  0957                     __ptext18:	
  3809 ;; *************** function i1_lcd_envia_nibble *****************
  3810 ;; Defined at:
  3811 ;;		line 39 in file "lcd_4bit.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  n               1    wreg     unsigned char 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  n               1    1[COMMON] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;		None               void
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3825 ;;      Params:         0       0       0       0       0
  3826 ;;      Locals:         1       0       0       0       0
  3827 ;;      Temps:          1       0       0       0       0
  3828 ;;      Totals:         2       0       0       0       0
  3829 ;;Total ram usage:        2 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		i1_lcd_envia_byte
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function i1_lcd_envia_nibble
  3840  0957                     i1_lcd_envia_nibble:	
  3841                           
  3842                           ;incstack = 0
  3843 ;; hardware stack exceeded
  3844                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  3845                           ;i1lcd_envia_nibble@n stored from wreg
  3846  0957  00F1               	movwf	i1lcd_envia_nibble@n
  3847                           
  3848                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  3849  0958  3000               	movlw	0
  3850  0959  1871               	btfsc	i1lcd_envia_nibble@n,0
  3851  095A  3001               	movlw	1
  3852  095B  00F0               	movwf	??i1_lcd_envia_nibble
  3853  095C  1283               	bcf	3,5	;RP0=0, select bank0
  3854  095D  1303               	bcf	3,6	;RP1=0, select bank0
  3855  095E  0806               	movf	6,w	;volatile
  3856  095F  0670               	xorwf	??i1_lcd_envia_nibble,w
  3857  0960  39FE               	andlw	-2
  3858  0961  0670               	xorwf	??i1_lcd_envia_nibble,w
  3859  0962  0086               	movwf	6	;volatile
  3860                           
  3861                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  3862  0963  3000               	movlw	0
  3863  0964  18F1               	btfsc	i1lcd_envia_nibble@n,1
  3864  0965  3001               	movlw	1
  3865  0966  00F0               	movwf	??i1_lcd_envia_nibble
  3866  0967  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3867  0968  0806               	movf	6,w	;volatile
  3868  0969  0670               	xorwf	??i1_lcd_envia_nibble,w
  3869  096A  39FD               	andlw	-3
  3870  096B  0670               	xorwf	??i1_lcd_envia_nibble,w
  3871  096C  0086               	movwf	6	;volatile
  3872                           
  3873                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  3874  096D  3000               	movlw	0
  3875  096E  1971               	btfsc	i1lcd_envia_nibble@n,2
  3876  096F  3001               	movlw	1
  3877  0970  00F0               	movwf	??i1_lcd_envia_nibble
  3878  0971  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3879  0972  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3880  0973  0806               	movf	6,w	;volatile
  3881  0974  0670               	xorwf	??i1_lcd_envia_nibble,w
  3882  0975  39FB               	andlw	-5
  3883  0976  0670               	xorwf	??i1_lcd_envia_nibble,w
  3884  0977  0086               	movwf	6	;volatile
  3885                           
  3886                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  3887  0978  3000               	movlw	0
  3888  0979  19F1               	btfsc	i1lcd_envia_nibble@n,3
  3889  097A  3001               	movlw	1
  3890  097B  00F0               	movwf	??i1_lcd_envia_nibble
  3891  097C  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3892  097D  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3893  097E  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3894  097F  0806               	movf	6,w	;volatile
  3895  0980  0670               	xorwf	??i1_lcd_envia_nibble,w
  3896  0981  39F7               	andlw	-9
  3897  0982  0670               	xorwf	??i1_lcd_envia_nibble,w
  3898  0983  0086               	movwf	6	;volatile
  3899                           
  3900                           ;lcd_4bit.c: 46: _delay(1);
  3901  0984  0000               	nop
  3902                           
  3903                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  3904  0985  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0986  1303               	bcf	3,6	;RP1=0, select bank0
  3906  0987  1606               	bsf	6,4	;volatile
  3907                           
  3908                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  3909  0988  3003               	movlw	3
  3910  0989  00F0               	movwf	??i1_lcd_envia_nibble
  3911  098A                     u429_27:	
  3912  098A  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  3913  098B  298A               	goto	u429_27
  3914                           
  3915                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  3916  098C  1283               	bcf	3,5	;RP0=0, select bank0
  3917  098D  1303               	bcf	3,6	;RP1=0, select bank0
  3918  098E  1206               	bcf	6,4	;volatile
  3919  098F  0008               	return
  3920  0990                     __end_ofi1_lcd_envia_nibble:	
  3921                           
  3922                           	psect	text19
  3923  0AEF                     __ptext19:	
  3924 ;; *************** function _sendString *****************
  3925 ;; Defined at:
  3926 ;;		line 138 in file "main.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  send            1    wreg     PTR const unsigned char 
  3929 ;;		 -> ftoa@buf(17), 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  send            1   41[BANK0 ] PTR const unsigned char 
  3932 ;;		 -> ftoa@buf(17), 
  3933 ;;  array          40    0[BANK0 ] unsigned char [40]
  3934 ;;  x               2   42[BANK0 ] int 
  3935 ;;  envio           1   40[BANK0 ] PTR unsigned char 
  3936 ;;		 -> sendString@array(40), 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;		None               void
  3939 ;; Registers used:
  3940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3946 ;;      Params:         0       0       0       0       0
  3947 ;;      Locals:         0      44       0       0       0
  3948 ;;      Temps:          1       0       0       0       0
  3949 ;;      Totals:         1      44       0       0       0
  3950 ;;Total ram usage:       45 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    2
  3953 ;; This function calls:
  3954 ;;		i1_USARTWriteString
  3955 ;; This function is called by:
  3956 ;;		_ISR
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _sendString
  3962  0AEF                     _sendString:	
  3963                           
  3964                           ;incstack = 0
  3965 ;; hardware stack exceeded
  3966                           ; Regs used in _sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3967                           ;sendString@send stored from wreg
  3968  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  3969  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  3970  0AF1  00C9               	movwf	sendString@send
  3971                           
  3972                           ;main.c: 139: int x = 0;
  3973  0AF2  01CA               	clrf	sendString@x
  3974  0AF3  01CB               	clrf	sendString@x+1
  3975  0AF4                     i1l2467:	
  3976                           ;main.c: 140: char array[40];
  3977                           ;main.c: 141: char * envio;
  3978                           ;main.c: 143: while (*send != '\0') {
  3979                           
  3980  0AF4  0849               	movf	sendString@send,w
  3981  0AF5  0084               	movwf	4
  3982  0AF6  1383               	bcf	3,7	;select IRP bank0
  3983  0AF7  0880               	movf	0,f
  3984  0AF8  1903               	btfsc	3,2
  3985  0AF9  2B27               	goto	i1l2469
  3986                           
  3987                           ;main.c: 144: if (x == 0) {
  3988  0AFA  084B               	movf	sendString@x+1,w
  3989  0AFB  044A               	iorwf	sendString@x,w
  3990  0AFC  1D03               	skipz
  3991  0AFD  2B12               	goto	i1l2461
  3992                           
  3993                           ;main.c: 145: if (recipiente == 0) {
  3994  0AFE  085B               	movf	_recipiente+1,w
  3995  0AFF  045A               	iorwf	_recipiente,w
  3996  0B00  1D03               	skipz
  3997  0B01  2B04               	goto	i1l2455
  3998                           
  3999                           ;main.c: 146: array[x] = 'S';
  4000  0B02  3053               	movlw	83
  4001  0B03  2B0A               	goto	L2
  4002  0B04                     i1l2455:	
  4003                           ;main.c: 147: } else if (recipiente == 1) {
  4004                           
  4005  0B04  3001               	movlw	1
  4006  0B05  065A               	xorwf	_recipiente,w
  4007  0B06  045B               	iorwf	_recipiente+1,w
  4008  0B07  1D03               	skipz
  4009  0B08  2B20               	goto	i1l2465
  4010                           
  4011                           ;main.c: 148: array[x] = 'I';
  4012  0B09  3049               	movlw	73
  4013  0B0A                     L2:	
  4014  0B0A  00F3               	movwf	??_sendString
  4015  0B0B  084A               	movf	sendString@x,w
  4016  0B0C  3E20               	addlw	sendString@array& (0+255)
  4017  0B0D  0084               	movwf	4
  4018  0B0E  0873               	movf	??_sendString,w
  4019  0B0F  1383               	bcf	3,7	;select IRP bank0
  4020  0B10  0080               	movwf	0
  4021  0B11  2B20               	goto	i1l2465
  4022  0B12                     i1l2461:	
  4023                           ;main.c: 151: } else {
  4024                           
  4025                           ;main.c: 149: }
  4026                           ;main.c: 150: x++;
  4027                           
  4028                           
  4029                           ;main.c: 152: array[x] = *send;
  4030  0B12  0849               	movf	sendString@send,w
  4031  0B13  0084               	movwf	4
  4032  0B14  1383               	bcf	3,7	;select IRP bank0
  4033  0B15  0800               	movf	0,w
  4034  0B16  00F3               	movwf	??_sendString
  4035  0B17  084A               	movf	sendString@x,w
  4036  0B18  3E20               	addlw	sendString@array& (0+255)
  4037  0B19  0084               	movwf	4
  4038  0B1A  0873               	movf	??_sendString,w
  4039  0B1B  0080               	movwf	0
  4040                           
  4041                           ;main.c: 153: send++;
  4042  0B1C  3001               	movlw	1
  4043  0B1D  00F3               	movwf	??_sendString
  4044  0B1E  0873               	movf	??_sendString,w
  4045  0B1F  07C9               	addwf	sendString@send,f
  4046  0B20                     i1l2465:	
  4047                           
  4048                           ;main.c: 154: x++;
  4049  0B20  3001               	movlw	1
  4050  0B21  07CA               	addwf	sendString@x,f
  4051  0B22  1803               	skipnc
  4052  0B23  0ACB               	incf	sendString@x+1,f
  4053  0B24  3000               	movlw	0
  4054  0B25  07CB               	addwf	sendString@x+1,f
  4055  0B26  2AF4               	goto	i1l2467
  4056  0B27                     i1l2469:	
  4057                           
  4058                           ;main.c: 155: }
  4059                           ;main.c: 156: }
  4060                           ;main.c: 158: if (x < 39) {
  4061  0B27  084B               	movf	sendString@x+1,w
  4062  0B28  3A80               	xorlw	128
  4063  0B29  00FF               	movwf	127
  4064  0B2A  3080               	movlw	128
  4065  0B2B  027F               	subwf	127,w
  4066  0B2C  1D03               	skipz
  4067  0B2D  2B30               	goto	u318_25
  4068  0B2E  3027               	movlw	39
  4069  0B2F  024A               	subwf	sendString@x,w
  4070  0B30                     u318_25:	
  4071  0B30  1803               	skipnc
  4072  0B31  2B39               	goto	i1l2473
  4073                           
  4074                           ;main.c: 159: array[x] = '\0';
  4075  0B32  1283               	bcf	3,5	;RP0=0, select bank0
  4076  0B33  1303               	bcf	3,6	;RP1=0, select bank0
  4077  0B34  084A               	movf	sendString@x,w
  4078  0B35  3E20               	addlw	sendString@array& (0+255)
  4079  0B36  0084               	movwf	4
  4080  0B37  1383               	bcf	3,7	;select IRP bank0
  4081  0B38  0180               	clrf	0
  4082  0B39                     i1l2473:	
  4083                           
  4084                           ;main.c: 160: }
  4085                           ;main.c: 162: envio = &array;
  4086  0B39  3020               	movlw	sendString@array& (0+255)
  4087  0B3A  00F3               	movwf	??_sendString
  4088  0B3B  0873               	movf	??_sendString,w
  4089  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  4090  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  4091  0B3E  00C8               	movwf	sendString@envio
  4092                           
  4093                           ;main.c: 163: USARTWriteString(envio);
  4094  0B3F  0848               	movf	sendString@envio,w
  4095  0B40  00F1               	movwf	i1USARTWriteString@str
  4096  0B41  3000               	movlw	0
  4097  0B42  00F2               	movwf	i1USARTWriteString@str+1
  4098  0B43  120A  158A  200D   	fcall	i1_USARTWriteString
  4099  0B46  0008               	return
  4100  0B47                     __end_of_sendString:	
  4101                           
  4102                           	psect	text20
  4103  0F46                     __ptext20:	
  4104 ;; *************** function _ftoa *****************
  4105 ;; Defined at:
  4106 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  f               3   36[BANK0 ] float 
  4109 ;;  status          1   39[BANK0 ] PTR int 
  4110 ;;		 -> ISR@status2(2), ISR@status(2), 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  l               4   45[BANK0 ] unsigned long 
  4113 ;;  rem             4   41[BANK0 ] unsigned long 
  4114 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4115 ;;		 -> ftoa@buf(17), 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      PTR unsigned char 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4125 ;;      Params:         0       4       0       0       0
  4126 ;;      Locals:         0       9       0       0       0
  4127 ;;      Temps:          0       1       0       0       0
  4128 ;;      Totals:         0      14       0       0       0
  4129 ;;Total ram usage:       14 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    3
  4132 ;; This function calls:
  4133 ;;		___ftge
  4134 ;;		___ftmul
  4135 ;;		___ftneg
  4136 ;;		___ftsub
  4137 ;;		___fttol
  4138 ;;		___lltoft
  4139 ;;		_sprintf
  4140 ;; This function is called by:
  4141 ;;		_ISR
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _ftoa
  4147  0F46                     _ftoa:	
  4148                           
  4149                           ;incstack = 0
  4150 ;; hardware stack exceeded
  4151                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4152  0F46  305C               	movlw	ftoa@buf& (0+255)
  4153  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  4154  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  4155  0F49  00C8               	movwf	??_ftoa
  4156  0F4A  0848               	movf	??_ftoa,w
  4157  0F4B  00D1               	movwf	ftoa@cp
  4158  0F4C  0844               	movf	ftoa@f,w
  4159  0F4D  00F0               	movwf	___ftge@ff1
  4160  0F4E  0845               	movf	ftoa@f+1,w
  4161  0F4F  00F1               	movwf	___ftge@ff1+1
  4162  0F50  0846               	movf	ftoa@f+2,w
  4163  0F51  00F2               	movwf	___ftge@ff1+2
  4164  0F52  3000               	movlw	0
  4165  0F53  00F3               	movwf	___ftge@ff2
  4166  0F54  3000               	movlw	0
  4167  0F55  00F4               	movwf	___ftge@ff2+1
  4168  0F56  3000               	movlw	0
  4169  0F57  00F5               	movwf	___ftge@ff2+2
  4170  0F58  120A  158A  23FB  120A  158A  	fcall	___ftge
  4171  0F5D  1803               	btfsc	3,0
  4172  0F5E  2F7F               	goto	i1l2487
  4173  0F5F  302D               	movlw	45
  4174  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  4175  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  4176  0F62  00C8               	movwf	??_ftoa
  4177  0F63  0851               	movf	ftoa@cp,w
  4178  0F64  0084               	movwf	4
  4179  0F65  0848               	movf	??_ftoa,w
  4180  0F66  1383               	bcf	3,7	;select IRP bank0
  4181  0F67  0080               	movwf	0
  4182  0F68  3001               	movlw	1
  4183  0F69  00C8               	movwf	??_ftoa
  4184  0F6A  0848               	movf	??_ftoa,w
  4185  0F6B  07D1               	addwf	ftoa@cp,f
  4186  0F6C  0844               	movf	ftoa@f,w
  4187  0F6D  00F0               	movwf	___ftneg@f1
  4188  0F6E  0845               	movf	ftoa@f+1,w
  4189  0F6F  00F1               	movwf	___ftneg@f1+1
  4190  0F70  0846               	movf	ftoa@f+2,w
  4191  0F71  00F2               	movwf	___ftneg@f1+2
  4192  0F72  160A  118A  271A  120A  158A  	fcall	___ftneg
  4193  0F77  0870               	movf	?___ftneg,w
  4194  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0F7A  00C4               	movwf	ftoa@f
  4197  0F7B  0871               	movf	?___ftneg+1,w
  4198  0F7C  00C5               	movwf	ftoa@f+1
  4199  0F7D  0872               	movf	?___ftneg+2,w
  4200  0F7E  00C6               	movwf	ftoa@f+2
  4201  0F7F                     i1l2487:	
  4202  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4203  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4204  0F81  0844               	movf	ftoa@f,w
  4205  0F82  00B0               	movwf	___fttol@f1
  4206  0F83  0845               	movf	ftoa@f+1,w
  4207  0F84  00B1               	movwf	___fttol@f1+1
  4208  0F85  0846               	movf	ftoa@f+2,w
  4209  0F86  00B2               	movwf	___fttol@f1+2
  4210  0F87  120A  158A  2600  120A  158A  	fcall	___fttol
  4211  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  4212  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  4213  0F8E  0833               	movf	?___fttol+3,w
  4214  0F8F  00D0               	movwf	ftoa@l+3
  4215  0F90  0832               	movf	?___fttol+2,w
  4216  0F91  00CF               	movwf	ftoa@l+2
  4217  0F92  0831               	movf	?___fttol+1,w
  4218  0F93  00CE               	movwf	ftoa@l+1
  4219  0F94  0830               	movf	?___fttol,w
  4220  0F95  00CD               	movwf	ftoa@l
  4221  0F96  0850               	movf	ftoa@l+3,w
  4222  0F97  00FB               	movwf	___lltoft@c+3
  4223  0F98  084F               	movf	ftoa@l+2,w
  4224  0F99  00FA               	movwf	___lltoft@c+2
  4225  0F9A  084E               	movf	ftoa@l+1,w
  4226  0F9B  00F9               	movwf	___lltoft@c+1
  4227  0F9C  084D               	movf	ftoa@l,w
  4228  0F9D  00F8               	movwf	___lltoft@c
  4229  0F9E  120A  158A  209F  120A  158A  	fcall	___lltoft
  4230  0FA3  0878               	movf	?___lltoft,w
  4231  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  4233  0FA6  00A7               	movwf	___ftsub@f2
  4234  0FA7  0879               	movf	?___lltoft+1,w
  4235  0FA8  00A8               	movwf	___ftsub@f2+1
  4236  0FA9  087A               	movf	?___lltoft+2,w
  4237  0FAA  00A9               	movwf	___ftsub@f2+2
  4238  0FAB  0844               	movf	ftoa@f,w
  4239  0FAC  00AA               	movwf	___ftsub@f1
  4240  0FAD  0845               	movf	ftoa@f+1,w
  4241  0FAE  00AB               	movwf	___ftsub@f1+1
  4242  0FAF  0846               	movf	ftoa@f+2,w
  4243  0FB0  00AC               	movwf	___ftsub@f1+2
  4244  0FB1  160A  118A  27A7  120A  158A  	fcall	___ftsub
  4245  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  4246  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  4247  0FB8  0827               	movf	?___ftsub,w
  4248  0FB9  00C4               	movwf	ftoa@f
  4249  0FBA  0828               	movf	?___ftsub+1,w
  4250  0FBB  00C5               	movwf	ftoa@f+1
  4251  0FBC  0829               	movf	?___ftsub+2,w
  4252  0FBD  00C6               	movwf	ftoa@f+2
  4253  0FBE  0844               	movf	ftoa@f,w
  4254  0FBF  00A3               	movwf	___ftmul@f2
  4255  0FC0  0845               	movf	ftoa@f+1,w
  4256  0FC1  00A4               	movwf	___ftmul@f2+1
  4257  0FC2  0846               	movf	ftoa@f+2,w
  4258  0FC3  00A5               	movwf	___ftmul@f2+2
  4259  0FC4  3024               	movlw	36
  4260  0FC5  00A0               	movwf	___ftmul@f1
  4261  0FC6  3074               	movlw	116
  4262  0FC7  00A1               	movwf	___ftmul@f1+1
  4263  0FC8  3049               	movlw	73
  4264  0FC9  00A2               	movwf	___ftmul@f1+2
  4265  0FCA  120A  118A  25FF  120A  158A  	fcall	___ftmul
  4266  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4267  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  4268  0FD1  0820               	movf	?___ftmul,w
  4269  0FD2  00B0               	movwf	___fttol@f1
  4270  0FD3  0821               	movf	?___ftmul+1,w
  4271  0FD4  00B1               	movwf	___fttol@f1+1
  4272  0FD5  0822               	movf	?___ftmul+2,w
  4273  0FD6  00B2               	movwf	___fttol@f1+2
  4274  0FD7  120A  158A  2600  120A  158A  	fcall	___fttol
  4275  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4276  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4277  0FDE  0833               	movf	?___fttol+3,w
  4278  0FDF  00CC               	movwf	ftoa@rem+3
  4279  0FE0  0832               	movf	?___fttol+2,w
  4280  0FE1  00CB               	movwf	ftoa@rem+2
  4281  0FE2  0831               	movf	?___fttol+1,w
  4282  0FE3  00CA               	movwf	ftoa@rem+1
  4283  0FE4  0830               	movf	?___fttol,w
  4284  0FE5  00C9               	movwf	ftoa@rem
  4285  0FE6  30A8               	movlw	(STR_8-__stringbase)& (0+255)
  4286  0FE7  00C8               	movwf	??_ftoa
  4287  0FE8  0848               	movf	??_ftoa,w
  4288  0FE9  00AA               	movwf	sprintf@f
  4289  0FEA  0850               	movf	ftoa@l+3,w
  4290  0FEB  00AE               	movwf	?_sprintf+4
  4291  0FEC  084F               	movf	ftoa@l+2,w
  4292  0FED  00AD               	movwf	?_sprintf+3
  4293  0FEE  084E               	movf	ftoa@l+1,w
  4294  0FEF  00AC               	movwf	?_sprintf+2
  4295  0FF0  084D               	movf	ftoa@l,w
  4296  0FF1  00AB               	movwf	?_sprintf+1
  4297  0FF2  084C               	movf	ftoa@rem+3,w
  4298  0FF3  00B2               	movwf	?_sprintf+8
  4299  0FF4  084B               	movf	ftoa@rem+2,w
  4300  0FF5  00B1               	movwf	?_sprintf+7
  4301  0FF6  084A               	movf	ftoa@rem+1,w
  4302  0FF7  00B0               	movwf	?_sprintf+6
  4303  0FF8  0849               	movf	ftoa@rem,w
  4304  0FF9  00AF               	movwf	?_sprintf+5
  4305  0FFA  0851               	movf	ftoa@cp,w
  4306  0FFB  120A  118A  22BC   	fcall	_sprintf
  4307  0FFE  305C               	movlw	ftoa@buf& (0+255)
  4308  0FFF  0008               	return
  4309  1000                     __end_of_ftoa:	
  4310                           
  4311                           	psect	text21
  4312  02BC                     __ptext21:	
  4313 ;; *************** function _sprintf *****************
  4314 ;; Defined at:
  4315 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  sp              1    wreg     PTR unsigned char 
  4318 ;;		 -> ftoa@buf(17), 
  4319 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4320 ;;		 -> STR_8(11), 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4323 ;;		 -> ftoa@buf(17), 
  4324 ;;  _val            4   26[BANK0 ] struct .
  4325 ;;  prec            2   33[BANK0 ] int 
  4326 ;;  width           2   31[BANK0 ] int 
  4327 ;;  c               1   35[BANK0 ] char 
  4328 ;;  ap              1   25[BANK0 ] PTR void [1]
  4329 ;;		 -> ?_sprintf(2), 
  4330 ;;  flag            1   24[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  2   10[BANK0 ] int 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4340 ;;      Params:         0       9       0       0       0
  4341 ;;      Locals:         0      12       0       0       0
  4342 ;;      Temps:          0       5       0       0       0
  4343 ;;      Totals:         0      26       0       0       0
  4344 ;;Total ram usage:       26 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    1
  4347 ;; This function calls:
  4348 ;;		___lldiv
  4349 ;;		___llmod
  4350 ;;		___wmul
  4351 ;;		_isdigit
  4352 ;; This function is called by:
  4353 ;;		_ftoa
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _sprintf
  4359  02BC                     _sprintf:	
  4360                           
  4361                           ;incstack = 0
  4362 ;; hardware stack exceeded
  4363                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4364                           ;sprintf@sp stored from wreg
  4365  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  4366  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  4367  02BE  00BE               	movwf	sprintf@sp
  4368                           
  4369                           ;doprnt.c: 494: va_list ap;
  4370                           ;doprnt.c: 499: signed char c;
  4371                           ;doprnt.c: 501: int width;
  4372                           ;doprnt.c: 504: int prec;
  4373                           ;doprnt.c: 508: unsigned char flag;
  4374                           ;doprnt.c: 527: union {
  4375                           ;doprnt.c: 528: unsigned long _val;
  4376                           ;doprnt.c: 529: struct {
  4377                           ;doprnt.c: 530: const char * _cp;
  4378                           ;doprnt.c: 531: unsigned _len;
  4379                           ;doprnt.c: 532: } _str;
  4380                           ;doprnt.c: 533: } _val;
  4381                           ;doprnt.c: 542: *ap = __va_start();
  4382  02BF  302B               	movlw	(?_sprintf+1)& (0+255)
  4383  02C0  00B3               	movwf	??_sprintf
  4384  02C1  0833               	movf	??_sprintf,w
  4385  02C2  00B9               	movwf	sprintf@ap
  4386  02C3                     i1l2253:	
  4387                           ;doprnt.c: 545: while(c = *f++) {
  4388                           
  4389  02C3  3001               	movlw	1
  4390  02C4  07AA               	addwf	sprintf@f,f
  4391  02C5  30FF               	movlw	-1
  4392  02C6  072A               	addwf	sprintf@f,w
  4393  02C7  0084               	movwf	4
  4394  02C8  120A  118A  270A  120A  118A  	fcall	stringdir
  4395  02CD  00B3               	movwf	??_sprintf
  4396  02CE  0833               	movf	??_sprintf,w
  4397  02CF  00C3               	movwf	sprintf@c
  4398  02D0  08C3               	movf	sprintf@c,f
  4399  02D1  1903               	btfsc	3,2
  4400  02D2  2CF3               	goto	i1l2255
  4401                           
  4402                           ;doprnt.c: 547: if(c != '%')
  4403  02D3  0843               	movf	sprintf@c,w
  4404  02D4  3A25               	xorlw	37
  4405  02D5  1903               	skipnz
  4406  02D6  2AE3               	goto	i1l2163
  4407                           
  4408                           ;doprnt.c: 549: {
  4409                           ;doprnt.c: 550: ((*sp++ = (c)));
  4410  02D7  0843               	movf	sprintf@c,w
  4411  02D8  00B3               	movwf	??_sprintf
  4412  02D9  083E               	movf	sprintf@sp,w
  4413  02DA  0084               	movwf	4
  4414  02DB  0833               	movf	??_sprintf,w
  4415  02DC  1383               	bcf	3,7	;select IRP bank0
  4416  02DD  0080               	movwf	0
  4417  02DE  3001               	movlw	1
  4418  02DF  00B3               	movwf	??_sprintf
  4419  02E0  0833               	movf	??_sprintf,w
  4420  02E1  07BE               	addwf	sprintf@sp,f
  4421                           
  4422                           ;doprnt.c: 551: continue;
  4423  02E2  2AC3               	goto	i1l2253
  4424  02E3                     i1l2163:	
  4425                           
  4426                           ;doprnt.c: 552: }
  4427                           ;doprnt.c: 555: width = 0;
  4428  02E3  01BF               	clrf	sprintf@width
  4429  02E4  01C0               	clrf	sprintf@width+1
  4430                           
  4431                           ;doprnt.c: 557: flag = 0;
  4432  02E5  01B8               	clrf	sprintf@flag
  4433                           
  4434                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4435  02E6  082A               	movf	sprintf@f,w
  4436  02E7  0084               	movwf	4
  4437  02E8  120A  118A  270A  120A  118A  	fcall	stringdir
  4438  02ED  160A  118A  2722  120A  118A  	fcall	_isdigit
  4439  02F2  1C03               	btfss	3,0
  4440  02F3  2B36               	goto	i1l2177
  4441                           
  4442                           ;doprnt.c: 607: width = 0;
  4443  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  4444  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  4445  02F6  01BF               	clrf	sprintf@width
  4446  02F7  01C0               	clrf	sprintf@width+1
  4447  02F8                     i1l2169:	
  4448                           ;doprnt.c: 608: do {
  4449                           
  4450                           
  4451                           ;doprnt.c: 609: width *= 10;
  4452  02F8  300A               	movlw	10
  4453  02F9  00F0               	movwf	___wmul@multiplier
  4454  02FA  3000               	movlw	0
  4455  02FB  00F1               	movwf	___wmul@multiplier+1
  4456  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  4457  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  4458  02FE  0840               	movf	sprintf@width+1,w
  4459  02FF  01F3               	clrf	___wmul@multiplicand+1
  4460  0300  07F3               	addwf	___wmul@multiplicand+1,f
  4461  0301  083F               	movf	sprintf@width,w
  4462  0302  01F2               	clrf	___wmul@multiplicand
  4463  0303  07F2               	addwf	___wmul@multiplicand,f
  4464  0304  120A  158A  2030  120A  118A  	fcall	___wmul
  4465  0309  0871               	movf	?___wmul+1,w
  4466  030A  1283               	bcf	3,5	;RP0=0, select bank0
  4467  030B  1303               	bcf	3,6	;RP1=0, select bank0
  4468  030C  01C0               	clrf	sprintf@width+1
  4469  030D  07C0               	addwf	sprintf@width+1,f
  4470  030E  0870               	movf	?___wmul,w
  4471  030F  01BF               	clrf	sprintf@width
  4472  0310  07BF               	addwf	sprintf@width,f
  4473                           
  4474                           ;doprnt.c: 610: width += *f++ - '0';
  4475  0311  082A               	movf	sprintf@f,w
  4476  0312  0084               	movwf	4
  4477  0313  120A  118A  270A  120A  118A  	fcall	stringdir
  4478  0318  3ED0               	addlw	208
  4479  0319  00B3               	movwf	??_sprintf
  4480  031A  30FF               	movlw	255
  4481  031B  1803               	skipnc
  4482  031C  3000               	movlw	0
  4483  031D  00B4               	movwf	??_sprintf+1
  4484  031E  0833               	movf	??_sprintf,w
  4485  031F  07BF               	addwf	sprintf@width,f
  4486  0320  1803               	skipnc
  4487  0321  0AC0               	incf	sprintf@width+1,f
  4488  0322  0834               	movf	??_sprintf+1,w
  4489  0323  07C0               	addwf	sprintf@width+1,f
  4490  0324  3001               	movlw	1
  4491  0325  00B3               	movwf	??_sprintf
  4492  0326  0833               	movf	??_sprintf,w
  4493  0327  07AA               	addwf	sprintf@f,f
  4494                           
  4495                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4496  0328  082A               	movf	sprintf@f,w
  4497  0329  0084               	movwf	4
  4498  032A  120A  118A  270A  120A  118A  	fcall	stringdir
  4499  032F  160A  118A  2722  120A  118A  	fcall	_isdigit
  4500  0334  1803               	btfsc	3,0
  4501  0335  2AF8               	goto	i1l2169
  4502  0336                     i1l2177:	
  4503                           
  4504                           ;doprnt.c: 617: }
  4505                           ;doprnt.c: 620: if(*f == '.') {
  4506  0336  1283               	bcf	3,5	;RP0=0, select bank0
  4507  0337  1303               	bcf	3,6	;RP1=0, select bank0
  4508  0338  082A               	movf	sprintf@f,w
  4509  0339  0084               	movwf	4
  4510  033A  120A  118A  270A  120A  118A  	fcall	stringdir
  4511  033F  3A2E               	xorlw	46
  4512  0340  1D03               	skipz
  4513  0341  2B84               	goto	i1l2189
  4514                           
  4515                           ;doprnt.c: 622: f++;
  4516  0342  3001               	movlw	1
  4517  0343  00B3               	movwf	??_sprintf
  4518  0344  0833               	movf	??_sprintf,w
  4519  0345  07AA               	addwf	sprintf@f,f
  4520                           
  4521                           ;doprnt.c: 629: {
  4522                           ;doprnt.c: 630: prec = 0;
  4523  0346  01C1               	clrf	sprintf@prec
  4524  0347  01C2               	clrf	sprintf@prec+1
  4525  0348                     i1l2187:	
  4526                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4527                           
  4528  0348  082A               	movf	sprintf@f,w
  4529  0349  0084               	movwf	4
  4530  034A  120A  118A  270A  120A  118A  	fcall	stringdir
  4531  034F  160A  118A  2722  120A  118A  	fcall	_isdigit
  4532  0354  1C03               	btfss	3,0
  4533  0355  2B90               	goto	i1l2195
  4534                           
  4535                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4536  0356  1283               	bcf	3,5	;RP0=0, select bank0
  4537  0357  1303               	bcf	3,6	;RP1=0, select bank0
  4538  0358  0842               	movf	sprintf@prec+1,w
  4539  0359  01F1               	clrf	___wmul@multiplier+1
  4540  035A  07F1               	addwf	___wmul@multiplier+1,f
  4541  035B  0841               	movf	sprintf@prec,w
  4542  035C  01F0               	clrf	___wmul@multiplier
  4543  035D  07F0               	addwf	___wmul@multiplier,f
  4544  035E  300A               	movlw	10
  4545  035F  00F2               	movwf	___wmul@multiplicand
  4546  0360  3000               	movlw	0
  4547  0361  00F3               	movwf	___wmul@multiplicand+1
  4548  0362  120A  158A  2030  120A  118A  	fcall	___wmul
  4549  0367  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0368  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0369  082A               	movf	sprintf@f,w
  4552  036A  0084               	movwf	4
  4553  036B  120A  118A  270A  120A  118A  	fcall	stringdir
  4554  0370  0770               	addwf	?___wmul,w
  4555  0371  00B3               	movwf	??_sprintf
  4556  0372  3000               	movlw	0
  4557  0373  1803               	skipnc
  4558  0374  3001               	movlw	1
  4559  0375  0771               	addwf	?___wmul+1,w
  4560  0376  00B4               	movwf	??_sprintf+1
  4561  0377  0833               	movf	??_sprintf,w
  4562  0378  3ED0               	addlw	208
  4563  0379  00C1               	movwf	sprintf@prec
  4564  037A  0834               	movf	??_sprintf+1,w
  4565  037B  1803               	skipnc
  4566  037C  3E01               	addlw	1
  4567  037D  3EFF               	addlw	255
  4568  037E  00C2               	movwf	sprintf@prec+1
  4569  037F  3001               	movlw	1
  4570  0380  00B3               	movwf	??_sprintf
  4571  0381  0833               	movf	??_sprintf,w
  4572  0382  07AA               	addwf	sprintf@f,f
  4573  0383  2B48               	goto	i1l2187
  4574  0384                     i1l2189:	
  4575                           ;doprnt.c: 633: }
  4576                           ;doprnt.c: 634: } else {
  4577                           
  4578                           
  4579                           ;doprnt.c: 635: prec = 0;
  4580  0384  1283               	bcf	3,5	;RP0=0, select bank0
  4581  0385  1303               	bcf	3,6	;RP1=0, select bank0
  4582  0386  01C1               	clrf	sprintf@prec
  4583  0387  01C2               	clrf	sprintf@prec+1
  4584                           
  4585                           ;doprnt.c: 644: switch(c = *f++) {
  4586                           
  4587                           ;doprnt.c: 639: }
  4588                           ;doprnt.c: 642: loop:
  4589  0388  2B90               	goto	i1l2195
  4590  0389                     i1l239:	
  4591                           ;doprnt.c: 650: case 'l':
  4592                           
  4593                           ;doprnt.c: 647: goto alldone;
  4594                           
  4595                           ;doprnt.c: 646: case 0:
  4596                           
  4597                           
  4598                           ;doprnt.c: 652: flag |= 0x10;
  4599  0389  1638               	bsf	sprintf@flag,4
  4600                           
  4601                           ;doprnt.c: 653: goto loop;
  4602  038A  2B90               	goto	i1l2195
  4603  038B                     i1l2191:	
  4604                           ;doprnt.c: 826: case 'u':
  4605                           
  4606                           ;doprnt.c: 822: continue;
  4607                           
  4608                           ;doprnt.c: 811: default:
  4609                           
  4610                           
  4611                           ;doprnt.c: 827: flag |= 0xC0;
  4612  038B  30C0               	movlw	192
  4613  038C  00B3               	movwf	??_sprintf
  4614  038D  0833               	movf	??_sprintf,w
  4615  038E  04B8               	iorwf	sprintf@flag,f
  4616                           
  4617                           ;doprnt.c: 831: }
  4618                           
  4619                           ;doprnt.c: 828: break;
  4620  038F  2BA7               	goto	i1l242
  4621  0390                     i1l2195:	
  4622  0390  3001               	movlw	1
  4623  0391  1283               	bcf	3,5	;RP0=0, select bank0
  4624  0392  1303               	bcf	3,6	;RP1=0, select bank0
  4625  0393  07AA               	addwf	sprintf@f,f
  4626  0394  30FF               	movlw	-1
  4627  0395  072A               	addwf	sprintf@f,w
  4628  0396  0084               	movwf	4
  4629  0397  120A  118A  270A  120A  118A  	fcall	stringdir
  4630  039C  00C3               	movwf	sprintf@c
  4631                           
  4632                           ; Switch size 1, requested type "space"
  4633                           ; Number of cases is 3, Range of values is 0 to 117
  4634                           ; switch strategies available:
  4635                           ; Name         Instructions Cycles
  4636                           ; simple_byte           10     6 (average)
  4637                           ; jumptable            260     6 (fixed)
  4638                           ;	Chosen strategy is simple_byte
  4639  039D  3A00               	xorlw	0	; case 0
  4640  039E  1903               	skipnz
  4641  039F  2CF3               	goto	i1l2255
  4642  03A0  3A6C               	xorlw	108	; case 108
  4643  03A1  1903               	skipnz
  4644  03A2  2B89               	goto	i1l239
  4645  03A3  3A19               	xorlw	25	; case 117
  4646  03A4  1903               	skipnz
  4647  03A5  2B8B               	goto	i1l2191
  4648  03A6  2AC3               	goto	i1l2253
  4649  03A7                     i1l242:	
  4650                           
  4651                           ;doprnt.c: 1282: {
  4652                           ;doprnt.c: 1290: if(flag & 0x10)
  4653  03A7  1E38               	btfss	sprintf@flag,4
  4654  03A8  2BB9               	goto	i1l2201
  4655                           
  4656                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  4657  03A9  0839               	movf	sprintf@ap,w
  4658  03AA  0084               	movwf	4
  4659  03AB  1383               	bcf	3,7	;select IRP bank0
  4660  03AC  0800               	movf	0,w
  4661  03AD  00BA               	movwf	sprintf@_val
  4662  03AE  0A84               	incf	4,f
  4663  03AF  0800               	movf	0,w
  4664  03B0  00BB               	movwf	sprintf@_val+1
  4665  03B1  0A84               	incf	4,f
  4666  03B2  0800               	movf	0,w
  4667  03B3  00BC               	movwf	sprintf@_val+2
  4668  03B4  0A84               	incf	4,f
  4669  03B5  0800               	movf	0,w
  4670  03B6  00BD               	movwf	sprintf@_val+3
  4671  03B7  3004               	movlw	4
  4672  03B8  2BC8               	goto	L3
  4673  03B9                     i1l2201:	
  4674                           
  4675                           ;doprnt.c: 1292: else
  4676                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4677  03B9  0839               	movf	sprintf@ap,w
  4678  03BA  0084               	movwf	4
  4679  03BB  1383               	bcf	3,7	;select IRP bank0
  4680  03BC  0800               	movf	0,w
  4681  03BD  00B3               	movwf	??_sprintf
  4682  03BE  0A84               	incf	4,f
  4683  03BF  0800               	movf	0,w
  4684  03C0  00B4               	movwf	??_sprintf+1
  4685  03C1  0833               	movf	??_sprintf,w
  4686  03C2  00BA               	movwf	sprintf@_val
  4687  03C3  0834               	movf	??_sprintf+1,w
  4688  03C4  00BB               	movwf	sprintf@_val+1
  4689  03C5  01BC               	clrf	sprintf@_val+2
  4690  03C6  01BD               	clrf	sprintf@_val+3
  4691  03C7  3002               	movlw	2
  4692  03C8                     L3:	
  4693  03C8  00B3               	movwf	??_sprintf
  4694  03C9  0833               	movf	??_sprintf,w
  4695  03CA  07B9               	addwf	sprintf@ap,f
  4696                           
  4697                           ;doprnt.c: 1296: }
  4698                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4699  03CB  0842               	movf	sprintf@prec+1,w
  4700  03CC  0441               	iorwf	sprintf@prec,w
  4701  03CD  1D03               	skipz
  4702  03CE  2BDB               	goto	i1l2211
  4703  03CF  083D               	movf	sprintf@_val+3,w
  4704  03D0  043C               	iorwf	sprintf@_val+2,w
  4705  03D1  043B               	iorwf	sprintf@_val+1,w
  4706  03D2  043A               	iorwf	sprintf@_val,w
  4707  03D3  1D03               	skipz
  4708  03D4  2BDB               	goto	i1l2211
  4709                           
  4710                           ;doprnt.c: 1300: prec++;
  4711  03D5  3001               	movlw	1
  4712  03D6  07C1               	addwf	sprintf@prec,f
  4713  03D7  1803               	skipnc
  4714  03D8  0AC2               	incf	sprintf@prec+1,f
  4715  03D9  3000               	movlw	0
  4716  03DA  07C2               	addwf	sprintf@prec+1,f
  4717  03DB                     i1l2211:	
  4718                           
  4719                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4720  03DB  01C3               	clrf	sprintf@c
  4721  03DC  0AC3               	incf	sprintf@c,f
  4722  03DD  0843               	movf	sprintf@c,w
  4723  03DE  3A0A               	xorlw	10
  4724  03DF  1903               	btfsc	3,2
  4725  03E0  2C1D               	goto	i1l2223
  4726  03E1                     i1l2215:	
  4727                           
  4728                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4729  03E1  0843               	movf	sprintf@c,w
  4730  03E2  00B3               	movwf	??_sprintf
  4731  03E3  3001               	movlw	1
  4732  03E4                     u268_25:	
  4733  03E4  1003               	clrc
  4734  03E5  0DB3               	rlf	??_sprintf,f
  4735  03E6  3EFF               	addlw	-1
  4736  03E7  1D03               	skipz
  4737  03E8  2BE4               	goto	u268_25
  4738  03E9  1003               	clrc
  4739  03EA  0D33               	rlf	??_sprintf,w
  4740  03EB  3E01               	addlw	low (_dpowers-__stringbase)
  4741  03EC  0084               	movwf	4
  4742  03ED  120A  118A  270A  120A  118A  	fcall	stringdir
  4743  03F2  00B4               	movwf	??_sprintf+1
  4744  03F3  120A  118A  270A  120A  118A  	fcall	stringdir
  4745  03F8  00B5               	movwf	??_sprintf+2
  4746  03F9  120A  118A  270A  120A  118A  	fcall	stringdir
  4747  03FE  00B6               	movwf	??_sprintf+3
  4748  03FF  120A  118A  270A  120A  118A  	fcall	stringdir
  4749  0404  00B7               	movwf	??_sprintf+4
  4750  0405  0837               	movf	??_sprintf+4,w
  4751  0406  023D               	subwf	sprintf@_val+3,w
  4752  0407  1D03               	skipz
  4753  0408  2C13               	goto	u269_25
  4754  0409  0836               	movf	??_sprintf+3,w
  4755  040A  023C               	subwf	sprintf@_val+2,w
  4756  040B  1D03               	skipz
  4757  040C  2C13               	goto	u269_25
  4758  040D  0835               	movf	??_sprintf+2,w
  4759  040E  023B               	subwf	sprintf@_val+1,w
  4760  040F  1D03               	skipz
  4761  0410  2C13               	goto	u269_25
  4762  0411  0834               	movf	??_sprintf+1,w
  4763  0412  023A               	subwf	sprintf@_val,w
  4764  0413                     u269_25:	
  4765  0413  1C03               	btfss	3,0
  4766  0414  2C1D               	goto	i1l2223
  4767                           
  4768                           ;doprnt.c: 1316: break;
  4769  0415  3001               	movlw	1
  4770  0416  00B3               	movwf	??_sprintf
  4771  0417  0833               	movf	??_sprintf,w
  4772  0418  07C3               	addwf	sprintf@c,f
  4773  0419  0843               	movf	sprintf@c,w
  4774  041A  3A0A               	xorlw	10
  4775  041B  1D03               	skipz
  4776  041C  2BE1               	goto	i1l2215
  4777  041D                     i1l2223:	
  4778                           
  4779                           ;doprnt.c: 1348: if(c < prec)
  4780  041D  0843               	movf	sprintf@c,w
  4781  041E  00B3               	movwf	??_sprintf
  4782  041F  01B4               	clrf	??_sprintf+1
  4783  0420  1BB3               	btfsc	??_sprintf,7
  4784  0421  03B4               	decf	??_sprintf+1,f
  4785  0422  0834               	movf	??_sprintf+1,w
  4786  0423  3A80               	xorlw	128
  4787  0424  00B5               	movwf	??_sprintf+2
  4788  0425  0842               	movf	sprintf@prec+1,w
  4789  0426  3A80               	xorlw	128
  4790  0427  0235               	subwf	??_sprintf+2,w
  4791  0428  1D03               	skipz
  4792  0429  2C2C               	goto	u271_25
  4793  042A  0841               	movf	sprintf@prec,w
  4794  042B  0233               	subwf	??_sprintf,w
  4795  042C                     u271_25:	
  4796  042C  1803               	skipnc
  4797  042D  2C35               	goto	i1l2227
  4798                           
  4799                           ;doprnt.c: 1349: c = prec;
  4800  042E  1283               	bcf	3,5	;RP0=0, select bank0
  4801  042F  1303               	bcf	3,6	;RP1=0, select bank0
  4802  0430  0841               	movf	sprintf@prec,w
  4803  0431  00B3               	movwf	??_sprintf
  4804  0432  0833               	movf	??_sprintf,w
  4805  0433  00C3               	movwf	sprintf@c
  4806  0434  2C4F               	goto	i1l2231
  4807  0435                     i1l2227:	
  4808                           
  4809                           ;doprnt.c: 1350: else if(prec < c)
  4810  0435  1283               	bcf	3,5	;RP0=0, select bank0
  4811  0436  1303               	bcf	3,6	;RP1=0, select bank0
  4812  0437  0843               	movf	sprintf@c,w
  4813  0438  00B3               	movwf	??_sprintf
  4814  0439  01B4               	clrf	??_sprintf+1
  4815  043A  1BB3               	btfsc	??_sprintf,7
  4816  043B  03B4               	decf	??_sprintf+1,f
  4817  043C  0842               	movf	sprintf@prec+1,w
  4818  043D  3A80               	xorlw	128
  4819  043E  00B5               	movwf	??_sprintf+2
  4820  043F  0834               	movf	??_sprintf+1,w
  4821  0440  3A80               	xorlw	128
  4822  0441  0235               	subwf	??_sprintf+2,w
  4823  0442  1D03               	skipz
  4824  0443  2C46               	goto	u272_25
  4825  0444  0833               	movf	??_sprintf,w
  4826  0445  0241               	subwf	sprintf@prec,w
  4827  0446                     u272_25:	
  4828  0446  1803               	skipnc
  4829  0447  2C4F               	goto	i1l2231
  4830                           
  4831                           ;doprnt.c: 1351: prec = c;
  4832  0448  1283               	bcf	3,5	;RP0=0, select bank0
  4833  0449  1303               	bcf	3,6	;RP1=0, select bank0
  4834  044A  0843               	movf	sprintf@c,w
  4835  044B  00C1               	movwf	sprintf@prec
  4836  044C  01C2               	clrf	sprintf@prec+1
  4837  044D  1BC1               	btfsc	sprintf@prec,7
  4838  044E  03C2               	decf	sprintf@prec+1,f
  4839  044F                     i1l2231:	
  4840                           
  4841                           ;doprnt.c: 1390: if(width > c)
  4842  044F  1283               	bcf	3,5	;RP0=0, select bank0
  4843  0450  1303               	bcf	3,6	;RP1=0, select bank0
  4844  0451  0843               	movf	sprintf@c,w
  4845  0452  00B3               	movwf	??_sprintf
  4846  0453  01B4               	clrf	??_sprintf+1
  4847  0454  1BB3               	btfsc	??_sprintf,7
  4848  0455  03B4               	decf	??_sprintf+1,f
  4849  0456  0834               	movf	??_sprintf+1,w
  4850  0457  3A80               	xorlw	128
  4851  0458  00B5               	movwf	??_sprintf+2
  4852  0459  0840               	movf	sprintf@width+1,w
  4853  045A  3A80               	xorlw	128
  4854  045B  0235               	subwf	??_sprintf+2,w
  4855  045C  1D03               	skipz
  4856  045D  2C60               	goto	u273_25
  4857  045E  083F               	movf	sprintf@width,w
  4858  045F  0233               	subwf	??_sprintf,w
  4859  0460                     u273_25:	
  4860  0460  1803               	skipnc
  4861  0461  2C70               	goto	i1l2235
  4862                           
  4863                           ;doprnt.c: 1391: width -= c;
  4864  0462  1283               	bcf	3,5	;RP0=0, select bank0
  4865  0463  1303               	bcf	3,6	;RP1=0, select bank0
  4866  0464  0843               	movf	sprintf@c,w
  4867  0465  00B3               	movwf	??_sprintf
  4868  0466  01B4               	clrf	??_sprintf+1
  4869  0467  1BB3               	btfsc	??_sprintf,7
  4870  0468  03B4               	decf	??_sprintf+1,f
  4871  0469  0833               	movf	??_sprintf,w
  4872  046A  02BF               	subwf	sprintf@width,f
  4873  046B  0834               	movf	??_sprintf+1,w
  4874  046C  1C03               	skipc
  4875  046D  03C0               	decf	sprintf@width+1,f
  4876  046E  02C0               	subwf	sprintf@width+1,f
  4877  046F  2C74               	goto	i1l2237
  4878  0470                     i1l2235:	
  4879                           
  4880                           ;doprnt.c: 1392: else
  4881                           ;doprnt.c: 1393: width = 0;
  4882  0470  1283               	bcf	3,5	;RP0=0, select bank0
  4883  0471  1303               	bcf	3,6	;RP1=0, select bank0
  4884  0472  01BF               	clrf	sprintf@width
  4885  0473  01C0               	clrf	sprintf@width+1
  4886  0474                     i1l2237:	
  4887                           
  4888                           ;doprnt.c: 1431: {
  4889                           ;doprnt.c: 1433: if(width
  4890                           ;doprnt.c: 1437: )
  4891  0474  0840               	movf	sprintf@width+1,w
  4892  0475  043F               	iorwf	sprintf@width,w
  4893  0476  1903               	skipnz
  4894  0477  2CE4               	goto	i1l2251
  4895                           
  4896                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4897                           
  4898                           ;doprnt.c: 1438: do
  4899  0478  3020               	movlw	32
  4900  0479  00B3               	movwf	??_sprintf
  4901  047A  083E               	movf	sprintf@sp,w
  4902  047B  0084               	movwf	4
  4903  047C  0833               	movf	??_sprintf,w
  4904  047D  1383               	bcf	3,7	;select IRP bank0
  4905  047E  0080               	movwf	0
  4906  047F  3001               	movlw	1
  4907  0480  00B3               	movwf	??_sprintf
  4908  0481  0833               	movf	??_sprintf,w
  4909  0482  07BE               	addwf	sprintf@sp,f
  4910                           
  4911                           ;doprnt.c: 1440: while(--width);
  4912  0483  30FF               	movlw	255
  4913  0484  07BF               	addwf	sprintf@width,f
  4914  0485  1803               	skipnc
  4915  0486  0AC0               	incf	sprintf@width+1,f
  4916  0487  30FF               	movlw	255
  4917  0488  07C0               	addwf	sprintf@width+1,f
  4918  0489  2C74               	goto	i1l2237
  4919  048A                     i1l2245:	
  4920                           ;doprnt.c: 1478: }
  4921                           ;doprnt.c: 1483: while(prec--) {
  4922                           
  4923                           
  4924                           ;doprnt.c: 1487: {
  4925                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4926  048A  3000               	movlw	0
  4927  048B  00A3               	movwf	___llmod@divisor+3
  4928  048C  3000               	movlw	0
  4929  048D  00A2               	movwf	___llmod@divisor+2
  4930  048E  3000               	movlw	0
  4931  048F  00A1               	movwf	___llmod@divisor+1
  4932  0490  300A               	movlw	10
  4933  0491  00A0               	movwf	___llmod@divisor
  4934  0492  0841               	movf	sprintf@prec,w
  4935  0493  00B3               	movwf	??_sprintf
  4936  0494  3001               	movlw	1
  4937  0495                     u276_25:	
  4938  0495  1003               	clrc
  4939  0496  0DB3               	rlf	??_sprintf,f
  4940  0497  3EFF               	addlw	-1
  4941  0498  1D03               	skipz
  4942  0499  2C95               	goto	u276_25
  4943  049A  1003               	clrc
  4944  049B  0D33               	rlf	??_sprintf,w
  4945  049C  3E01               	addlw	low (_dpowers-__stringbase)
  4946  049D  0084               	movwf	4
  4947  049E  120A  118A  270A  120A  118A  	fcall	stringdir
  4948  04A3  00F0               	movwf	___lldiv@divisor
  4949  04A4  120A  118A  270A  120A  118A  	fcall	stringdir
  4950  04A9  00F1               	movwf	___lldiv@divisor+1
  4951  04AA  120A  118A  270A  120A  118A  	fcall	stringdir
  4952  04AF  00F2               	movwf	___lldiv@divisor+2
  4953  04B0  120A  118A  270A  120A  118A  	fcall	stringdir
  4954  04B5  00F3               	movwf	___lldiv@divisor+3
  4955  04B6  083D               	movf	sprintf@_val+3,w
  4956  04B7  00F7               	movwf	___lldiv@dividend+3
  4957  04B8  083C               	movf	sprintf@_val+2,w
  4958  04B9  00F6               	movwf	___lldiv@dividend+2
  4959  04BA  083B               	movf	sprintf@_val+1,w
  4960  04BB  00F5               	movwf	___lldiv@dividend+1
  4961  04BC  083A               	movf	sprintf@_val,w
  4962  04BD  00F4               	movwf	___lldiv@dividend
  4963  04BE  120A  158A  2458  120A  118A  	fcall	___lldiv
  4964  04C3  0873               	movf	?___lldiv+3,w
  4965  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  4966  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  4967  04C6  00A7               	movwf	___llmod@dividend+3
  4968  04C7  0872               	movf	?___lldiv+2,w
  4969  04C8  00A6               	movwf	___llmod@dividend+2
  4970  04C9  0871               	movf	?___lldiv+1,w
  4971  04CA  00A5               	movwf	___llmod@dividend+1
  4972  04CB  0870               	movf	?___lldiv,w
  4973  04CC  00A4               	movwf	___llmod@dividend
  4974  04CD  120A  158A  2252  120A  118A  	fcall	___llmod
  4975  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  4976  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  4977  04D4  0820               	movf	?___llmod,w
  4978  04D5  3E30               	addlw	48
  4979  04D6  00B4               	movwf	??_sprintf+1
  4980  04D7  0834               	movf	??_sprintf+1,w
  4981  04D8  00C3               	movwf	sprintf@c
  4982                           
  4983                           ;doprnt.c: 1532: }
  4984                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4985  04D9  0843               	movf	sprintf@c,w
  4986  04DA  00B3               	movwf	??_sprintf
  4987  04DB  083E               	movf	sprintf@sp,w
  4988  04DC  0084               	movwf	4
  4989  04DD  0833               	movf	??_sprintf,w
  4990  04DE  1383               	bcf	3,7	;select IRP bank0
  4991  04DF  0080               	movwf	0
  4992  04E0  3001               	movlw	1
  4993  04E1  00B3               	movwf	??_sprintf
  4994  04E2  0833               	movf	??_sprintf,w
  4995  04E3  07BE               	addwf	sprintf@sp,f
  4996  04E4                     i1l2251:	
  4997  04E4  30FF               	movlw	255
  4998  04E5  07C1               	addwf	sprintf@prec,f
  4999  04E6  1803               	skipnc
  5000  04E7  0AC2               	incf	sprintf@prec+1,f
  5001  04E8  30FF               	movlw	255
  5002  04E9  07C2               	addwf	sprintf@prec+1,f
  5003  04EA  30FF               	movlw	255
  5004  04EB  0642               	xorwf	sprintf@prec+1,w
  5005  04EC  1D03               	skipz
  5006  04ED  2CF0               	goto	u277_25
  5007  04EE  30FF               	movlw	255
  5008  04EF  0641               	xorwf	sprintf@prec,w
  5009  04F0                     u277_25:	
  5010  04F0  1903               	btfsc	3,2
  5011  04F1  2AC3               	goto	i1l2253
  5012  04F2  2C8A               	goto	i1l2245
  5013  04F3                     i1l2255:	
  5014                           ;doprnt.c: 1534: }
  5015                           ;doprnt.c: 1542: }
  5016                           ;doprnt.c: 1544: alldone:
  5017                           
  5018                           
  5019                           ;doprnt.c: 1547: *sp = 0;
  5020  04F3  083E               	movf	sprintf@sp,w
  5021  04F4  0084               	movwf	4
  5022  04F5  1383               	bcf	3,7	;select IRP bank0
  5023  04F6  0180               	clrf	0
  5024  04F7  0008               	return
  5025  04F8                     __end_of_sprintf:	
  5026                           ;doprnt.c: 1549: return 0;
  5027                           ;	Return value of _sprintf is never used
  5028                           
  5029                           
  5030                           	psect	text22
  5031  1722                     __ptext22:	
  5032 ;; *************** function _isdigit *****************
  5033 ;; Defined at:
  5034 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  c               1    wreg     unsigned char 
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  c               1    1[COMMON] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;		None               void
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5048 ;;      Params:         0       0       0       0       0
  5049 ;;      Locals:         2       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0
  5051 ;;      Totals:         2       0       0       0       0
  5052 ;;Total ram usage:        2 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_sprintf
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           
  5062                           ;psect for function _isdigit
  5063  1722                     _isdigit:	
  5064                           
  5065                           ;incstack = 0
  5066 ;; hardware stack exceeded
  5067                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5068                           ;isdigit@c stored from wreg
  5069  1722  00F1               	movwf	isdigit@c
  5070  1723  01F0               	clrf	_isdigit$879
  5071  1724  303A               	movlw	58
  5072  1725  0271               	subwf	isdigit@c,w
  5073  1726  1803               	skipnc
  5074  1727  2F2E               	goto	i1l1949
  5075  1728  3030               	movlw	48
  5076  1729  0271               	subwf	isdigit@c,w
  5077  172A  1C03               	skipc
  5078  172B  2F2E               	goto	i1l1949
  5079  172C  01F0               	clrf	_isdigit$879
  5080  172D  0AF0               	incf	_isdigit$879,f
  5081  172E                     i1l1949:	
  5082  172E  0C70               	rrf	_isdigit$879,w
  5083  172F  0008               	return
  5084  1730                     __end_of_isdigit:	
  5085                           
  5086                           	psect	text23
  5087  0830                     __ptext23:	
  5088 ;; *************** function ___wmul *****************
  5089 ;; Defined at:
  5090 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  multiplier      2    0[COMMON] unsigned int 
  5093 ;;  multiplicand    2    2[COMMON] unsigned int 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  product         2    4[COMMON] unsigned int 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  2    0[COMMON] unsigned int 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5105 ;;      Params:         4       0       0       0       0
  5106 ;;      Locals:         2       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0
  5108 ;;      Totals:         6       0       0       0       0
  5109 ;;Total ram usage:        6 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; This function calls:
  5112 ;;		Nothing
  5113 ;; This function is called by:
  5114 ;;		_sprintf
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function ___wmul
  5120  0830                     ___wmul:	
  5121                           
  5122                           ;incstack = 0
  5123 ;; hardware stack exceeded
  5124                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5125  0830  01F4               	clrf	___wmul@product
  5126  0831  01F5               	clrf	___wmul@product+1
  5127  0832                     i1l1955:	
  5128  0832  1C70               	btfss	___wmul@multiplier,0
  5129  0833  283A               	goto	i1l345
  5130  0834  0872               	movf	___wmul@multiplicand,w
  5131  0835  07F4               	addwf	___wmul@product,f
  5132  0836  1803               	skipnc
  5133  0837  0AF5               	incf	___wmul@product+1,f
  5134  0838  0873               	movf	___wmul@multiplicand+1,w
  5135  0839  07F5               	addwf	___wmul@product+1,f
  5136  083A                     i1l345:	
  5137  083A  3001               	movlw	1
  5138  083B                     u211_25:	
  5139  083B  1003               	clrc
  5140  083C  0DF2               	rlf	___wmul@multiplicand,f
  5141  083D  0DF3               	rlf	___wmul@multiplicand+1,f
  5142  083E  3EFF               	addlw	-1
  5143  083F  1D03               	skipz
  5144  0840  283B               	goto	u211_25
  5145  0841  3001               	movlw	1
  5146  0842                     u212_25:	
  5147  0842  1003               	clrc
  5148  0843  0CF1               	rrf	___wmul@multiplier+1,f
  5149  0844  0CF0               	rrf	___wmul@multiplier,f
  5150  0845  3EFF               	addlw	-1
  5151  0846  1D03               	skipz
  5152  0847  2842               	goto	u212_25
  5153  0848  0871               	movf	___wmul@multiplier+1,w
  5154  0849  0470               	iorwf	___wmul@multiplier,w
  5155  084A  1D03               	skipz
  5156  084B  2832               	goto	i1l1955
  5157  084C  0875               	movf	___wmul@product+1,w
  5158  084D  01F1               	clrf	?___wmul+1
  5159  084E  07F1               	addwf	?___wmul+1,f
  5160  084F  0874               	movf	___wmul@product,w
  5161  0850  01F0               	clrf	?___wmul
  5162  0851  07F0               	addwf	?___wmul,f
  5163  0852  0008               	return
  5164  0853                     __end_of___wmul:	
  5165                           
  5166                           	psect	text24
  5167  0A52                     __ptext24:	
  5168 ;; *************** function ___llmod *****************
  5169 ;; Defined at:
  5170 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\llmod.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  divisor         4    0[BANK0 ] unsigned long 
  5173 ;;  dividend        4    4[BANK0 ] unsigned long 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  counter         1    9[BANK0 ] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  4    0[BANK0 ] unsigned long 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2, status,0
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5185 ;;      Params:         0       8       0       0       0
  5186 ;;      Locals:         0       1       0       0       0
  5187 ;;      Temps:          0       1       0       0       0
  5188 ;;      Totals:         0      10       0       0       0
  5189 ;;Total ram usage:       10 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_sprintf
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function ___llmod
  5200  0A52                     ___llmod:	
  5201                           
  5202                           ;incstack = 0
  5203 ;; hardware stack exceeded
  5204                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5205  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  5206  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  5207  0A54  0823               	movf	___llmod@divisor+3,w
  5208  0A55  0422               	iorwf	___llmod@divisor+2,w
  5209  0A56  0421               	iorwf	___llmod@divisor+1,w
  5210  0A57  0420               	iorwf	___llmod@divisor,w
  5211  0A58  1903               	skipnz
  5212  0A59  2A97               	goto	i1l2077
  5213  0A5A  01A9               	clrf	___llmod@counter
  5214  0A5B  0AA9               	incf	___llmod@counter,f
  5215  0A5C                     i1l2067:	
  5216  0A5C  1BA3               	btfsc	___llmod@divisor+3,7
  5217  0A5D  2A6C               	goto	i1l2069
  5218  0A5E  3001               	movlw	1
  5219  0A5F  00A8               	movwf	??___llmod
  5220  0A60                     u246_25:	
  5221  0A60  1003               	clrc
  5222  0A61  0DA0               	rlf	___llmod@divisor,f
  5223  0A62  0DA1               	rlf	___llmod@divisor+1,f
  5224  0A63  0DA2               	rlf	___llmod@divisor+2,f
  5225  0A64  0DA3               	rlf	___llmod@divisor+3,f
  5226  0A65  0BA8               	decfsz	??___llmod,f
  5227  0A66  2A60               	goto	u246_25
  5228  0A67  3001               	movlw	1
  5229  0A68  00A8               	movwf	??___llmod
  5230  0A69  0828               	movf	??___llmod,w
  5231  0A6A  07A9               	addwf	___llmod@counter,f
  5232  0A6B  2A5C               	goto	i1l2067
  5233  0A6C                     i1l2069:	
  5234  0A6C  0823               	movf	___llmod@divisor+3,w
  5235  0A6D  0227               	subwf	___llmod@dividend+3,w
  5236  0A6E  1D03               	skipz
  5237  0A6F  2A7A               	goto	u248_25
  5238  0A70  0822               	movf	___llmod@divisor+2,w
  5239  0A71  0226               	subwf	___llmod@dividend+2,w
  5240  0A72  1D03               	skipz
  5241  0A73  2A7A               	goto	u248_25
  5242  0A74  0821               	movf	___llmod@divisor+1,w
  5243  0A75  0225               	subwf	___llmod@dividend+1,w
  5244  0A76  1D03               	skipz
  5245  0A77  2A7A               	goto	u248_25
  5246  0A78  0820               	movf	___llmod@divisor,w
  5247  0A79  0224               	subwf	___llmod@dividend,w
  5248  0A7A                     u248_25:	
  5249  0A7A  1C03               	skipc
  5250  0A7B  2A8A               	goto	i1l2073
  5251  0A7C  0820               	movf	___llmod@divisor,w
  5252  0A7D  02A4               	subwf	___llmod@dividend,f
  5253  0A7E  0821               	movf	___llmod@divisor+1,w
  5254  0A7F  1C03               	skipc
  5255  0A80  0F21               	incfsz	___llmod@divisor+1,w
  5256  0A81  02A5               	subwf	___llmod@dividend+1,f
  5257  0A82  0822               	movf	___llmod@divisor+2,w
  5258  0A83  1C03               	skipc
  5259  0A84  0F22               	incfsz	___llmod@divisor+2,w
  5260  0A85  02A6               	subwf	___llmod@dividend+2,f
  5261  0A86  0823               	movf	___llmod@divisor+3,w
  5262  0A87  1C03               	skipc
  5263  0A88  0F23               	incfsz	___llmod@divisor+3,w
  5264  0A89  02A7               	subwf	___llmod@dividend+3,f
  5265  0A8A                     i1l2073:	
  5266  0A8A  3001               	movlw	1
  5267  0A8B                     u249_25:	
  5268  0A8B  1003               	clrc
  5269  0A8C  0CA3               	rrf	___llmod@divisor+3,f
  5270  0A8D  0CA2               	rrf	___llmod@divisor+2,f
  5271  0A8E  0CA1               	rrf	___llmod@divisor+1,f
  5272  0A8F  0CA0               	rrf	___llmod@divisor,f
  5273  0A90  3EFF               	addlw	-1
  5274  0A91  1D03               	skipz
  5275  0A92  2A8B               	goto	u249_25
  5276  0A93  3001               	movlw	1
  5277  0A94  02A9               	subwf	___llmod@counter,f
  5278  0A95  1D03               	btfss	3,2
  5279  0A96  2A6C               	goto	i1l2069
  5280  0A97                     i1l2077:	
  5281  0A97  0827               	movf	___llmod@dividend+3,w
  5282  0A98  00A3               	movwf	?___llmod+3
  5283  0A99  0826               	movf	___llmod@dividend+2,w
  5284  0A9A  00A2               	movwf	?___llmod+2
  5285  0A9B  0825               	movf	___llmod@dividend+1,w
  5286  0A9C  00A1               	movwf	?___llmod+1
  5287  0A9D  0824               	movf	___llmod@dividend,w
  5288  0A9E  00A0               	movwf	?___llmod
  5289  0A9F  0008               	return
  5290  0AA0                     __end_of___llmod:	
  5291                           
  5292                           	psect	text25
  5293  0C58                     __ptext25:	
  5294 ;; *************** function ___lldiv *****************
  5295 ;; Defined at:
  5296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  divisor         4    0[COMMON] unsigned long 
  5299 ;;  dividend        4    4[COMMON] unsigned long 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  quotient        4    9[COMMON] unsigned long 
  5302 ;;  counter         1   13[COMMON] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  4    0[COMMON] unsigned long 
  5305 ;; Registers used:
  5306 ;;		wreg, status,2, status,0
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5312 ;;      Params:         8       0       0       0       0
  5313 ;;      Locals:         5       0       0       0       0
  5314 ;;      Temps:          1       0       0       0       0
  5315 ;;      Totals:        14       0       0       0       0
  5316 ;;Total ram usage:       14 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; This function calls:
  5319 ;;		Nothing
  5320 ;; This function is called by:
  5321 ;;		_sprintf
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function ___lldiv
  5327  0C58                     ___lldiv:	
  5328                           
  5329                           ;incstack = 0
  5330 ;; hardware stack exceeded
  5331                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5332  0C58  3000               	movlw	0
  5333  0C59  00FC               	movwf	___lldiv@quotient+3
  5334  0C5A  3000               	movlw	0
  5335  0C5B  00FB               	movwf	___lldiv@quotient+2
  5336  0C5C  3000               	movlw	0
  5337  0C5D  00FA               	movwf	___lldiv@quotient+1
  5338  0C5E  3000               	movlw	0
  5339  0C5F  00F9               	movwf	___lldiv@quotient
  5340  0C60  0873               	movf	___lldiv@divisor+3,w
  5341  0C61  0472               	iorwf	___lldiv@divisor+2,w
  5342  0C62  0471               	iorwf	___lldiv@divisor+1,w
  5343  0C63  0470               	iorwf	___lldiv@divisor,w
  5344  0C64  1903               	skipnz
  5345  0C65  2CAD               	goto	i1l2057
  5346  0C66  01FD               	clrf	___lldiv@counter
  5347  0C67  0AFD               	incf	___lldiv@counter,f
  5348  0C68                     i1l2043:	
  5349  0C68  1BF3               	btfsc	___lldiv@divisor+3,7
  5350  0C69  2C78               	goto	i1l2045
  5351  0C6A  3001               	movlw	1
  5352  0C6B  00F8               	movwf	??___lldiv
  5353  0C6C                     u239_25:	
  5354  0C6C  1003               	clrc
  5355  0C6D  0DF0               	rlf	___lldiv@divisor,f
  5356  0C6E  0DF1               	rlf	___lldiv@divisor+1,f
  5357  0C6F  0DF2               	rlf	___lldiv@divisor+2,f
  5358  0C70  0DF3               	rlf	___lldiv@divisor+3,f
  5359  0C71  0BF8               	decfsz	??___lldiv,f
  5360  0C72  2C6C               	goto	u239_25
  5361  0C73  3001               	movlw	1
  5362  0C74  00F8               	movwf	??___lldiv
  5363  0C75  0878               	movf	??___lldiv,w
  5364  0C76  07FD               	addwf	___lldiv@counter,f
  5365  0C77  2C68               	goto	i1l2043
  5366  0C78                     i1l2045:	
  5367  0C78  3001               	movlw	1
  5368  0C79  00F8               	movwf	??___lldiv
  5369  0C7A                     u241_25:	
  5370  0C7A  1003               	clrc
  5371  0C7B  0DF9               	rlf	___lldiv@quotient,f
  5372  0C7C  0DFA               	rlf	___lldiv@quotient+1,f
  5373  0C7D  0DFB               	rlf	___lldiv@quotient+2,f
  5374  0C7E  0DFC               	rlf	___lldiv@quotient+3,f
  5375  0C7F  0BF8               	decfsz	??___lldiv,f
  5376  0C80  2C7A               	goto	u241_25
  5377  0C81  0873               	movf	___lldiv@divisor+3,w
  5378  0C82  0277               	subwf	___lldiv@dividend+3,w
  5379  0C83  1D03               	skipz
  5380  0C84  2C8F               	goto	u242_25
  5381  0C85  0872               	movf	___lldiv@divisor+2,w
  5382  0C86  0276               	subwf	___lldiv@dividend+2,w
  5383  0C87  1D03               	skipz
  5384  0C88  2C8F               	goto	u242_25
  5385  0C89  0871               	movf	___lldiv@divisor+1,w
  5386  0C8A  0275               	subwf	___lldiv@dividend+1,w
  5387  0C8B  1D03               	skipz
  5388  0C8C  2C8F               	goto	u242_25
  5389  0C8D  0870               	movf	___lldiv@divisor,w
  5390  0C8E  0274               	subwf	___lldiv@dividend,w
  5391  0C8F                     u242_25:	
  5392  0C8F  1C03               	skipc
  5393  0C90  2CA0               	goto	i1l2053
  5394  0C91  0870               	movf	___lldiv@divisor,w
  5395  0C92  02F4               	subwf	___lldiv@dividend,f
  5396  0C93  0871               	movf	___lldiv@divisor+1,w
  5397  0C94  1C03               	skipc
  5398  0C95  0F71               	incfsz	___lldiv@divisor+1,w
  5399  0C96  02F5               	subwf	___lldiv@dividend+1,f
  5400  0C97  0872               	movf	___lldiv@divisor+2,w
  5401  0C98  1C03               	skipc
  5402  0C99  0F72               	incfsz	___lldiv@divisor+2,w
  5403  0C9A  02F6               	subwf	___lldiv@dividend+2,f
  5404  0C9B  0873               	movf	___lldiv@divisor+3,w
  5405  0C9C  1C03               	skipc
  5406  0C9D  0F73               	incfsz	___lldiv@divisor+3,w
  5407  0C9E  02F7               	subwf	___lldiv@dividend+3,f
  5408  0C9F  1479               	bsf	___lldiv@quotient,0
  5409  0CA0                     i1l2053:	
  5410  0CA0  3001               	movlw	1
  5411  0CA1                     u243_25:	
  5412  0CA1  1003               	clrc
  5413  0CA2  0CF3               	rrf	___lldiv@divisor+3,f
  5414  0CA3  0CF2               	rrf	___lldiv@divisor+2,f
  5415  0CA4  0CF1               	rrf	___lldiv@divisor+1,f
  5416  0CA5  0CF0               	rrf	___lldiv@divisor,f
  5417  0CA6  3EFF               	addlw	-1
  5418  0CA7  1D03               	skipz
  5419  0CA8  2CA1               	goto	u243_25
  5420  0CA9  3001               	movlw	1
  5421  0CAA  02FD               	subwf	___lldiv@counter,f
  5422  0CAB  1D03               	btfss	3,2
  5423  0CAC  2C78               	goto	i1l2045
  5424  0CAD                     i1l2057:	
  5425  0CAD  087C               	movf	___lldiv@quotient+3,w
  5426  0CAE  00F3               	movwf	?___lldiv+3
  5427  0CAF  087B               	movf	___lldiv@quotient+2,w
  5428  0CB0  00F2               	movwf	?___lldiv+2
  5429  0CB1  087A               	movf	___lldiv@quotient+1,w
  5430  0CB2  00F1               	movwf	?___lldiv+1
  5431  0CB3  0879               	movf	___lldiv@quotient,w
  5432  0CB4  00F0               	movwf	?___lldiv
  5433  0CB5  0008               	return
  5434  0CB6                     __end_of___lldiv:	
  5435                           
  5436                           	psect	text26
  5437  089F                     __ptext26:	
  5438 ;; *************** function ___lltoft *****************
  5439 ;; Defined at:
  5440 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lltoft.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  c               4    8[COMMON] unsigned long 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  exp             1   13[COMMON] unsigned char 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  3    8[COMMON] float 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, pclath, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5454 ;;      Params:         4       0       0       0       0
  5455 ;;      Locals:         1       0       0       0       0
  5456 ;;      Temps:          1       0       0       0       0
  5457 ;;      Totals:         6       0       0       0       0
  5458 ;;Total ram usage:        6 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    1
  5461 ;; This function calls:
  5462 ;;		___ftpack
  5463 ;; This function is called by:
  5464 ;;		_ftoa
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function ___lltoft
  5470  089F                     ___lltoft:	
  5471                           
  5472                           ;incstack = 0
  5473 ;; hardware stack exceeded
  5474                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5475  089F  308E               	movlw	142
  5476  08A0  00FC               	movwf	??___lltoft
  5477  08A1  087C               	movf	??___lltoft,w
  5478  08A2  00FD               	movwf	___lltoft@exp
  5479  08A3                     i1l2391:	
  5480  08A3  30FF               	movlw	255
  5481  08A4  057B               	andwf	___lltoft@c+3,w
  5482  08A5  1903               	btfsc	3,2
  5483  08A6  28B5               	goto	i1l2393
  5484  08A7  3001               	movlw	1
  5485  08A8                     u309_25:	
  5486  08A8  1003               	clrc
  5487  08A9  0CFB               	rrf	___lltoft@c+3,f
  5488  08AA  0CFA               	rrf	___lltoft@c+2,f
  5489  08AB  0CF9               	rrf	___lltoft@c+1,f
  5490  08AC  0CF8               	rrf	___lltoft@c,f
  5491  08AD  3EFF               	addlw	-1
  5492  08AE  1D03               	skipz
  5493  08AF  28A8               	goto	u309_25
  5494  08B0  3001               	movlw	1
  5495  08B1  00FC               	movwf	??___lltoft
  5496  08B2  087C               	movf	??___lltoft,w
  5497  08B3  07FD               	addwf	___lltoft@exp,f
  5498  08B4  28A3               	goto	i1l2391
  5499  08B5                     i1l2393:	
  5500  08B5  0878               	movf	___lltoft@c,w
  5501  08B6  00F0               	movwf	___ftpack@arg
  5502  08B7  0879               	movf	___lltoft@c+1,w
  5503  08B8  00F1               	movwf	___ftpack@arg+1
  5504  08B9  087A               	movf	___lltoft@c+2,w
  5505  08BA  00F2               	movwf	___ftpack@arg+2
  5506  08BB  087D               	movf	___lltoft@exp,w
  5507  08BC  00FC               	movwf	??___lltoft
  5508  08BD  087C               	movf	??___lltoft,w
  5509  08BE  00F3               	movwf	___ftpack@exp
  5510  08BF  01F4               	clrf	___ftpack@sign
  5511  08C0  120A  158A  251C   	fcall	___ftpack
  5512  08C3  0870               	movf	?___ftpack,w
  5513  08C4  00F8               	movwf	?___lltoft
  5514  08C5  0871               	movf	?___ftpack+1,w
  5515  08C6  00F9               	movwf	?___lltoft+1
  5516  08C7  0872               	movf	?___ftpack+2,w
  5517  08C8  00FA               	movwf	?___lltoft+2
  5518  08C9  0008               	return
  5519  08CA                     __end_of___lltoft:	
  5520                           
  5521                           	psect	text27
  5522  0E00                     __ptext27:	
  5523 ;; *************** function ___fttol *****************
  5524 ;; Defined at:
  5525 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  f1              3   16[BANK0 ] float 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  lval            4   25[BANK0 ] unsigned long 
  5530 ;;  exp1            1   29[BANK0 ] unsigned char 
  5531 ;;  sign1           1   24[BANK0 ] unsigned char 
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  4   16[BANK0 ] long 
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, status,0
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5541 ;;      Params:         0       4       0       0       0
  5542 ;;      Locals:         0       6       0       0       0
  5543 ;;      Temps:          0       4       0       0       0
  5544 ;;      Totals:         0      14       0       0       0
  5545 ;;Total ram usage:       14 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_ISR
  5551 ;;		_ftoa
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           
  5556                           ;psect for function ___fttol
  5557  0E00                     ___fttol:	
  5558                           
  5559                           ;incstack = 0
  5560 ;; hardware stack exceeded
  5561                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5562  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  5563  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  5564  0E02  0830               	movf	___fttol@f1,w
  5565  0E03  00B4               	movwf	??___fttol
  5566  0E04  0831               	movf	___fttol@f1+1,w
  5567  0E05  00B5               	movwf	??___fttol+1
  5568  0E06  0832               	movf	___fttol@f1+2,w
  5569  0E07  00B6               	movwf	??___fttol+2
  5570  0E08  1003               	clrc
  5571  0E09  0D35               	rlf	??___fttol+1,w
  5572  0E0A  0D36               	rlf	??___fttol+2,w
  5573  0E0B  00B7               	movwf	??___fttol+3
  5574  0E0C  0837               	movf	??___fttol+3,w
  5575  0E0D  00BD               	movwf	___fttol@exp1
  5576  0E0E  08BD               	movf	___fttol@exp1,f
  5577  0E0F  1D03               	skipz
  5578  0E10  2E1A               	goto	i1l2349
  5579  0E11  3000               	movlw	0
  5580  0E12  00B3               	movwf	?___fttol+3
  5581  0E13  3000               	movlw	0
  5582  0E14  00B2               	movwf	?___fttol+2
  5583  0E15  3000               	movlw	0
  5584  0E16  00B1               	movwf	?___fttol+1
  5585  0E17  3000               	movlw	0
  5586  0E18  00B0               	movwf	?___fttol
  5587  0E19  0008               	return
  5588  0E1A                     i1l2349:	
  5589  0E1A  0830               	movf	___fttol@f1,w
  5590  0E1B  00B4               	movwf	??___fttol
  5591  0E1C  0831               	movf	___fttol@f1+1,w
  5592  0E1D  00B5               	movwf	??___fttol+1
  5593  0E1E  0832               	movf	___fttol@f1+2,w
  5594  0E1F  00B6               	movwf	??___fttol+2
  5595  0E20  3017               	movlw	23
  5596  0E21                     u300_25:	
  5597  0E21  1003               	clrc
  5598  0E22  0CB6               	rrf	??___fttol+2,f
  5599  0E23  0CB5               	rrf	??___fttol+1,f
  5600  0E24  0CB4               	rrf	??___fttol,f
  5601  0E25  3EFF               	addlw	-1
  5602  0E26  1D03               	skipz
  5603  0E27  2E21               	goto	u300_25
  5604  0E28  0834               	movf	??___fttol,w
  5605  0E29  00B7               	movwf	??___fttol+3
  5606  0E2A  0837               	movf	??___fttol+3,w
  5607  0E2B  00B8               	movwf	___fttol@sign1
  5608  0E2C  17B1               	bsf	___fttol@f1+1,7
  5609  0E2D  30FF               	movlw	255
  5610  0E2E  05B0               	andwf	___fttol@f1,f
  5611  0E2F  30FF               	movlw	255
  5612  0E30  05B1               	andwf	___fttol@f1+1,f
  5613  0E31  3000               	movlw	0
  5614  0E32  05B2               	andwf	___fttol@f1+2,f
  5615  0E33  0830               	movf	___fttol@f1,w
  5616  0E34  00B9               	movwf	___fttol@lval
  5617  0E35  0831               	movf	___fttol@f1+1,w
  5618  0E36  00BA               	movwf	___fttol@lval+1
  5619  0E37  0832               	movf	___fttol@f1+2,w
  5620  0E38  00BB               	movwf	___fttol@lval+2
  5621  0E39  01BC               	clrf	___fttol@lval+3
  5622  0E3A  308E               	movlw	142
  5623  0E3B  02BD               	subwf	___fttol@exp1,f
  5624  0E3C  1FBD               	btfss	___fttol@exp1,7
  5625  0E3D  2E5C               	goto	i1l2369
  5626  0E3E  083D               	movf	___fttol@exp1,w
  5627  0E3F  3A80               	xorlw	128
  5628  0E40  3E8F               	addlw	143
  5629  0E41  1803               	skipnc
  5630  0E42  2E4C               	goto	i1l2367
  5631  0E43  3000               	movlw	0
  5632  0E44  00B3               	movwf	?___fttol+3
  5633  0E45  3000               	movlw	0
  5634  0E46  00B2               	movwf	?___fttol+2
  5635  0E47  3000               	movlw	0
  5636  0E48  00B1               	movwf	?___fttol+1
  5637  0E49  3000               	movlw	0
  5638  0E4A  00B0               	movwf	?___fttol
  5639  0E4B  0008               	return
  5640  0E4C                     i1l2367:	
  5641  0E4C  3001               	movlw	1
  5642  0E4D                     u303_25:	
  5643  0E4D  1003               	clrc
  5644  0E4E  0CBC               	rrf	___fttol@lval+3,f
  5645  0E4F  0CBB               	rrf	___fttol@lval+2,f
  5646  0E50  0CBA               	rrf	___fttol@lval+1,f
  5647  0E51  0CB9               	rrf	___fttol@lval,f
  5648  0E52  3EFF               	addlw	-1
  5649  0E53  1D03               	skipz
  5650  0E54  2E4D               	goto	u303_25
  5651  0E55  3001               	movlw	1
  5652  0E56  00B4               	movwf	??___fttol
  5653  0E57  0834               	movf	??___fttol,w
  5654  0E58  07BD               	addwf	___fttol@exp1,f
  5655  0E59  1903               	btfsc	3,2
  5656  0E5A  2E77               	goto	i1l2379
  5657  0E5B  2E4C               	goto	i1l2367
  5658  0E5C                     i1l2369:	
  5659  0E5C  3018               	movlw	24
  5660  0E5D  023D               	subwf	___fttol@exp1,w
  5661  0E5E  1C03               	skipc
  5662  0E5F  2E74               	goto	i1l2377
  5663  0E60  3000               	movlw	0
  5664  0E61  00B3               	movwf	?___fttol+3
  5665  0E62  3000               	movlw	0
  5666  0E63  00B2               	movwf	?___fttol+2
  5667  0E64  3000               	movlw	0
  5668  0E65  00B1               	movwf	?___fttol+1
  5669  0E66  3000               	movlw	0
  5670  0E67  00B0               	movwf	?___fttol
  5671  0E68  0008               	return
  5672  0E69                     i1l2375:	
  5673  0E69  3001               	movlw	1
  5674  0E6A  00B4               	movwf	??___fttol
  5675  0E6B                     u306_25:	
  5676  0E6B  1003               	clrc
  5677  0E6C  0DB9               	rlf	___fttol@lval,f
  5678  0E6D  0DBA               	rlf	___fttol@lval+1,f
  5679  0E6E  0DBB               	rlf	___fttol@lval+2,f
  5680  0E6F  0DBC               	rlf	___fttol@lval+3,f
  5681  0E70  0BB4               	decfsz	??___fttol,f
  5682  0E71  2E6B               	goto	u306_25
  5683  0E72  3001               	movlw	1
  5684  0E73  02BD               	subwf	___fttol@exp1,f
  5685  0E74                     i1l2377:	
  5686  0E74  08BD               	movf	___fttol@exp1,f
  5687  0E75  1D03               	skipz
  5688  0E76  2E69               	goto	i1l2375
  5689  0E77                     i1l2379:	
  5690  0E77  0838               	movf	___fttol@sign1,w
  5691  0E78  1903               	btfsc	3,2
  5692  0E79  2E85               	goto	i1l2383
  5693  0E7A  09B9               	comf	___fttol@lval,f
  5694  0E7B  09BA               	comf	___fttol@lval+1,f
  5695  0E7C  09BB               	comf	___fttol@lval+2,f
  5696  0E7D  09BC               	comf	___fttol@lval+3,f
  5697  0E7E  0AB9               	incf	___fttol@lval,f
  5698  0E7F  1903               	skipnz
  5699  0E80  0ABA               	incf	___fttol@lval+1,f
  5700  0E81  1903               	skipnz
  5701  0E82  0ABB               	incf	___fttol@lval+2,f
  5702  0E83  1903               	skipnz
  5703  0E84  0ABC               	incf	___fttol@lval+3,f
  5704  0E85                     i1l2383:	
  5705  0E85  083C               	movf	___fttol@lval+3,w
  5706  0E86  00B3               	movwf	?___fttol+3
  5707  0E87  083B               	movf	___fttol@lval+2,w
  5708  0E88  00B2               	movwf	?___fttol+2
  5709  0E89  083A               	movf	___fttol@lval+1,w
  5710  0E8A  00B1               	movwf	?___fttol+1
  5711  0E8B  0839               	movf	___fttol@lval,w
  5712  0E8C  00B0               	movwf	?___fttol
  5713  0E8D  0008               	return
  5714  0E8E                     __end_of___fttol:	
  5715                           
  5716                           	psect	text28
  5717  17A7                     __ptext28:	
  5718 ;; *************** function ___ftsub *****************
  5719 ;; Defined at:
  5720 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftsub.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  f2              3    7[BANK0 ] float 
  5723 ;;  f1              3   10[BANK0 ] float 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;		None
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  3    7[BANK0 ] float 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2, status,0, pclath, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5735 ;;      Params:         0       6       0       0       0
  5736 ;;      Locals:         0       0       0       0       0
  5737 ;;      Temps:          0       0       0       0       0
  5738 ;;      Totals:         0       6       0       0       0
  5739 ;;Total ram usage:        6 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:    2
  5742 ;; This function calls:
  5743 ;;		___ftadd
  5744 ;; This function is called by:
  5745 ;;		_ftoa
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function ___ftsub
  5751  17A7                     ___ftsub:	
  5752                           
  5753                           ;incstack = 0
  5754 ;; hardware stack exceeded
  5755                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5756  17A7  3080               	movlw	128
  5757  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  5758  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  5759  17AA  06A9               	xorwf	___ftsub@f2+2,f
  5760  17AB  082A               	movf	___ftsub@f1,w
  5761  17AC  00F8               	movwf	___ftadd@f1
  5762  17AD  082B               	movf	___ftsub@f1+1,w
  5763  17AE  00F9               	movwf	___ftadd@f1+1
  5764  17AF  082C               	movf	___ftsub@f1+2,w
  5765  17B0  00FA               	movwf	___ftadd@f1+2
  5766  17B1  0827               	movf	___ftsub@f2,w
  5767  17B2  00FB               	movwf	___ftadd@f2
  5768  17B3  0828               	movf	___ftsub@f2+1,w
  5769  17B4  00FC               	movwf	___ftadd@f2+1
  5770  17B5  0829               	movf	___ftsub@f2+2,w
  5771  17B6  00FD               	movwf	___ftadd@f2+2
  5772  17B7  120A  118A  24F8   	fcall	___ftadd
  5773  17BA  0878               	movf	?___ftadd,w
  5774  17BB  1283               	bcf	3,5	;RP0=0, select bank0
  5775  17BC  1303               	bcf	3,6	;RP1=0, select bank0
  5776  17BD  00A7               	movwf	?___ftsub
  5777  17BE  0879               	movf	?___ftadd+1,w
  5778  17BF  00A8               	movwf	?___ftsub+1
  5779  17C0  087A               	movf	?___ftadd+2,w
  5780  17C1  00A9               	movwf	?___ftsub+2
  5781  17C2  0008               	return
  5782  17C3                     __end_of___ftsub:	
  5783                           
  5784                           	psect	text29
  5785  04F8                     __ptext29:	
  5786 ;; *************** function ___ftadd *****************
  5787 ;; Defined at:
  5788 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  f1              3    8[COMMON] float 
  5791 ;;  f2              3   11[COMMON] float 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  exp1            1    6[BANK0 ] unsigned char 
  5794 ;;  exp2            1    5[BANK0 ] unsigned char 
  5795 ;;  sign            1    4[BANK0 ] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  3    8[COMMON] float 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0, pclath, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5805 ;;      Params:         6       0       0       0       0
  5806 ;;      Locals:         0       3       0       0       0
  5807 ;;      Temps:          0       4       0       0       0
  5808 ;;      Totals:         6       7       0       0       0
  5809 ;;Total ram usage:       13 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    1
  5812 ;; This function calls:
  5813 ;;		___ftpack
  5814 ;; This function is called by:
  5815 ;;		___ftsub
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function ___ftadd
  5821  04F8                     ___ftadd:	
  5822                           
  5823                           ;incstack = 0
  5824 ;; hardware stack exceeded
  5825                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5826  04F8  0878               	movf	___ftadd@f1,w
  5827  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  5828  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  5829  04FB  00A0               	movwf	??___ftadd
  5830  04FC  0879               	movf	___ftadd@f1+1,w
  5831  04FD  00A1               	movwf	??___ftadd+1
  5832  04FE  087A               	movf	___ftadd@f1+2,w
  5833  04FF  00A2               	movwf	??___ftadd+2
  5834  0500  1003               	clrc
  5835  0501  0D21               	rlf	??___ftadd+1,w
  5836  0502  0D22               	rlf	??___ftadd+2,w
  5837  0503  00A3               	movwf	??___ftadd+3
  5838  0504  0823               	movf	??___ftadd+3,w
  5839  0505  00A6               	movwf	___ftadd@exp1
  5840  0506  087B               	movf	___ftadd@f2,w
  5841  0507  00A0               	movwf	??___ftadd
  5842  0508  087C               	movf	___ftadd@f2+1,w
  5843  0509  00A1               	movwf	??___ftadd+1
  5844  050A  087D               	movf	___ftadd@f2+2,w
  5845  050B  00A2               	movwf	??___ftadd+2
  5846  050C  1003               	clrc
  5847  050D  0D21               	rlf	??___ftadd+1,w
  5848  050E  0D22               	rlf	??___ftadd+2,w
  5849  050F  00A3               	movwf	??___ftadd+3
  5850  0510  0823               	movf	??___ftadd+3,w
  5851  0511  00A5               	movwf	___ftadd@exp2
  5852  0512  0826               	movf	___ftadd@exp1,w
  5853  0513  1903               	btfsc	3,2
  5854  0514  2D21               	goto	i1l1973
  5855  0515  0825               	movf	___ftadd@exp2,w
  5856  0516  0226               	subwf	___ftadd@exp1,w
  5857  0517  1803               	skipnc
  5858  0518  2D28               	goto	i1l1977
  5859  0519  0326               	decf	___ftadd@exp1,w
  5860  051A  3AFF               	xorlw	255
  5861  051B  0725               	addwf	___ftadd@exp2,w
  5862  051C  00A0               	movwf	??___ftadd
  5863  051D  3019               	movlw	25
  5864  051E  0220               	subwf	??___ftadd,w
  5865  051F  1C03               	skipc
  5866  0520  2D28               	goto	i1l1977
  5867  0521                     i1l1973:	
  5868  0521  087B               	movf	___ftadd@f2,w
  5869  0522  00F8               	movwf	?___ftadd
  5870  0523  087C               	movf	___ftadd@f2+1,w
  5871  0524  00F9               	movwf	?___ftadd+1
  5872  0525  087D               	movf	___ftadd@f2+2,w
  5873  0526  00FA               	movwf	?___ftadd+2
  5874  0527  0008               	return
  5875  0528                     i1l1977:	
  5876  0528  0825               	movf	___ftadd@exp2,w
  5877  0529  1903               	btfsc	3,2
  5878  052A  0008               	return
  5879  052B  0826               	movf	___ftadd@exp1,w
  5880  052C  0225               	subwf	___ftadd@exp2,w
  5881  052D  1803               	skipnc
  5882  052E  2D37               	goto	i1l1983
  5883  052F  0325               	decf	___ftadd@exp2,w
  5884  0530  3AFF               	xorlw	255
  5885  0531  0726               	addwf	___ftadd@exp1,w
  5886  0532  00A0               	movwf	??___ftadd
  5887  0533  3019               	movlw	25
  5888  0534  0220               	subwf	??___ftadd,w
  5889  0535  1803               	btfsc	3,0
  5890  0536  0008               	return
  5891  0537                     i1l1983:	
  5892  0537  3006               	movlw	6
  5893  0538  00A0               	movwf	??___ftadd
  5894  0539  0820               	movf	??___ftadd,w
  5895  053A  00A4               	movwf	___ftadd@sign
  5896  053B  1BFA               	btfsc	___ftadd@f1+2,7
  5897  053C  17A4               	bsf	___ftadd@sign,7
  5898  053D  1BFD               	btfsc	___ftadd@f2+2,7
  5899  053E  1724               	bsf	___ftadd@sign,6
  5900  053F  17F9               	bsf	___ftadd@f1+1,7
  5901  0540  30FF               	movlw	255
  5902  0541  05F8               	andwf	___ftadd@f1,f
  5903  0542  30FF               	movlw	255
  5904  0543  05F9               	andwf	___ftadd@f1+1,f
  5905  0544  3000               	movlw	0
  5906  0545  05FA               	andwf	___ftadd@f1+2,f
  5907  0546  17FC               	bsf	___ftadd@f2+1,7
  5908  0547  30FF               	movlw	255
  5909  0548  05FB               	andwf	___ftadd@f2,f
  5910  0549  30FF               	movlw	255
  5911  054A  05FC               	andwf	___ftadd@f2+1,f
  5912  054B  3000               	movlw	0
  5913  054C  05FD               	andwf	___ftadd@f2+2,f
  5914  054D  0825               	movf	___ftadd@exp2,w
  5915  054E  0226               	subwf	___ftadd@exp1,w
  5916  054F  1803               	skipnc
  5917  0550  2D77               	goto	i1l2005
  5918  0551                     i1l1995:	
  5919  0551  3001               	movlw	1
  5920  0552                     u223_25:	
  5921  0552  1003               	clrc
  5922  0553  0DFB               	rlf	___ftadd@f2,f
  5923  0554  0DFC               	rlf	___ftadd@f2+1,f
  5924  0555  0DFD               	rlf	___ftadd@f2+2,f
  5925  0556  3EFF               	addlw	-1
  5926  0557  1D03               	skipz
  5927  0558  2D52               	goto	u223_25
  5928  0559  3001               	movlw	1
  5929  055A  02A5               	subwf	___ftadd@exp2,f
  5930  055B  0825               	movf	___ftadd@exp2,w
  5931  055C  0626               	xorwf	___ftadd@exp1,w
  5932  055D  1903               	skipnz
  5933  055E  2D72               	goto	i1l2003
  5934  055F  3001               	movlw	1
  5935  0560  02A4               	subwf	___ftadd@sign,f
  5936  0561  0824               	movf	___ftadd@sign,w
  5937  0562  3907               	andlw	7
  5938  0563  1903               	btfsc	3,2
  5939  0564  2D72               	goto	i1l2003
  5940  0565  2D51               	goto	i1l1995
  5941  0566                     i1l2001:	
  5942  0566  3001               	movlw	1
  5943  0567                     u226_25:	
  5944  0567  1003               	clrc
  5945  0568  0CFA               	rrf	___ftadd@f1+2,f
  5946  0569  0CF9               	rrf	___ftadd@f1+1,f
  5947  056A  0CF8               	rrf	___ftadd@f1,f
  5948  056B  3EFF               	addlw	-1
  5949  056C  1D03               	skipz
  5950  056D  2D67               	goto	u226_25
  5951  056E  3001               	movlw	1
  5952  056F  00A0               	movwf	??___ftadd
  5953  0570  0820               	movf	??___ftadd,w
  5954  0571  07A6               	addwf	___ftadd@exp1,f
  5955  0572                     i1l2003:	
  5956  0572  0826               	movf	___ftadd@exp1,w
  5957  0573  0625               	xorwf	___ftadd@exp2,w
  5958  0574  1903               	btfsc	3,2
  5959  0575  2DA0               	goto	i1l535
  5960  0576  2D66               	goto	i1l2001
  5961  0577                     i1l2005:	
  5962  0577  0826               	movf	___ftadd@exp1,w
  5963  0578  0225               	subwf	___ftadd@exp2,w
  5964  0579  1803               	skipnc
  5965  057A  2DA0               	goto	i1l535
  5966  057B                     i1l2007:	
  5967  057B  3001               	movlw	1
  5968  057C                     u229_25:	
  5969  057C  1003               	clrc
  5970  057D  0DF8               	rlf	___ftadd@f1,f
  5971  057E  0DF9               	rlf	___ftadd@f1+1,f
  5972  057F  0DFA               	rlf	___ftadd@f1+2,f
  5973  0580  3EFF               	addlw	-1
  5974  0581  1D03               	skipz
  5975  0582  2D7C               	goto	u229_25
  5976  0583  3001               	movlw	1
  5977  0584  02A6               	subwf	___ftadd@exp1,f
  5978  0585  0825               	movf	___ftadd@exp2,w
  5979  0586  0626               	xorwf	___ftadd@exp1,w
  5980  0587  1903               	skipnz
  5981  0588  2D9C               	goto	i1l2015
  5982  0589  3001               	movlw	1
  5983  058A  02A4               	subwf	___ftadd@sign,f
  5984  058B  0824               	movf	___ftadd@sign,w
  5985  058C  3907               	andlw	7
  5986  058D  1903               	btfsc	3,2
  5987  058E  2D9C               	goto	i1l2015
  5988  058F  2D7B               	goto	i1l2007
  5989  0590                     i1l2013:	
  5990  0590  3001               	movlw	1
  5991  0591                     u232_25:	
  5992  0591  1003               	clrc
  5993  0592  0CFD               	rrf	___ftadd@f2+2,f
  5994  0593  0CFC               	rrf	___ftadd@f2+1,f
  5995  0594  0CFB               	rrf	___ftadd@f2,f
  5996  0595  3EFF               	addlw	-1
  5997  0596  1D03               	skipz
  5998  0597  2D91               	goto	u232_25
  5999  0598  3001               	movlw	1
  6000  0599  00A0               	movwf	??___ftadd
  6001  059A  0820               	movf	??___ftadd,w
  6002  059B  07A5               	addwf	___ftadd@exp2,f
  6003  059C                     i1l2015:	
  6004  059C  0826               	movf	___ftadd@exp1,w
  6005  059D  0625               	xorwf	___ftadd@exp2,w
  6006  059E  1D03               	skipz
  6007  059F  2D90               	goto	i1l2013
  6008  05A0                     i1l535:	
  6009  05A0  1FA4               	btfss	___ftadd@sign,7
  6010  05A1  2DB2               	goto	i1l2019
  6011  05A2  30FF               	movlw	255
  6012  05A3  06F8               	xorwf	___ftadd@f1,f
  6013  05A4  30FF               	movlw	255
  6014  05A5  06F9               	xorwf	___ftadd@f1+1,f
  6015  05A6  30FF               	movlw	255
  6016  05A7  06FA               	xorwf	___ftadd@f1+2,f
  6017  05A8  3001               	movlw	1
  6018  05A9  07F8               	addwf	___ftadd@f1,f
  6019  05AA  3000               	movlw	0
  6020  05AB  1803               	skipnc
  6021  05AC  3001               	movlw	1
  6022  05AD  07F9               	addwf	___ftadd@f1+1,f
  6023  05AE  3000               	movlw	0
  6024  05AF  1803               	skipnc
  6025  05B0  3001               	movlw	1
  6026  05B1  07FA               	addwf	___ftadd@f1+2,f
  6027  05B2                     i1l2019:	
  6028  05B2  1F24               	btfss	___ftadd@sign,6
  6029  05B3  2DC4               	goto	i1l2023
  6030  05B4  30FF               	movlw	255
  6031  05B5  06FB               	xorwf	___ftadd@f2,f
  6032  05B6  30FF               	movlw	255
  6033  05B7  06FC               	xorwf	___ftadd@f2+1,f
  6034  05B8  30FF               	movlw	255
  6035  05B9  06FD               	xorwf	___ftadd@f2+2,f
  6036  05BA  3001               	movlw	1
  6037  05BB  07FB               	addwf	___ftadd@f2,f
  6038  05BC  3000               	movlw	0
  6039  05BD  1803               	skipnc
  6040  05BE  3001               	movlw	1
  6041  05BF  07FC               	addwf	___ftadd@f2+1,f
  6042  05C0  3000               	movlw	0
  6043  05C1  1803               	skipnc
  6044  05C2  3001               	movlw	1
  6045  05C3  07FD               	addwf	___ftadd@f2+2,f
  6046  05C4                     i1l2023:	
  6047  05C4  01A4               	clrf	___ftadd@sign
  6048  05C5  0878               	movf	___ftadd@f1,w
  6049  05C6  07FB               	addwf	___ftadd@f2,f
  6050  05C7  0879               	movf	___ftadd@f1+1,w
  6051  05C8  1103               	clrz
  6052  05C9  1803               	skipnc
  6053  05CA  0A79               	incf	___ftadd@f1+1,w
  6054  05CB  1D03               	btfss	3,2
  6055  05CC  07FC               	addwf	___ftadd@f2+1,f
  6056  05CD  087A               	movf	___ftadd@f1+2,w
  6057  05CE  1103               	clrz
  6058  05CF  1803               	skipnc
  6059  05D0  0A7A               	incf	___ftadd@f1+2,w
  6060  05D1  1D03               	btfss	3,2
  6061  05D2  07FD               	addwf	___ftadd@f2+2,f
  6062  05D3  1FFD               	btfss	___ftadd@f2+2,7
  6063  05D4  2DE7               	goto	i1l2033
  6064  05D5  30FF               	movlw	255
  6065  05D6  06FB               	xorwf	___ftadd@f2,f
  6066  05D7  30FF               	movlw	255
  6067  05D8  06FC               	xorwf	___ftadd@f2+1,f
  6068  05D9  30FF               	movlw	255
  6069  05DA  06FD               	xorwf	___ftadd@f2+2,f
  6070  05DB  3001               	movlw	1
  6071  05DC  07FB               	addwf	___ftadd@f2,f
  6072  05DD  3000               	movlw	0
  6073  05DE  1803               	skipnc
  6074  05DF  3001               	movlw	1
  6075  05E0  07FC               	addwf	___ftadd@f2+1,f
  6076  05E1  3000               	movlw	0
  6077  05E2  1803               	skipnc
  6078  05E3  3001               	movlw	1
  6079  05E4  07FD               	addwf	___ftadd@f2+2,f
  6080  05E5  01A4               	clrf	___ftadd@sign
  6081  05E6  0AA4               	incf	___ftadd@sign,f
  6082  05E7                     i1l2033:	
  6083  05E7  087B               	movf	___ftadd@f2,w
  6084  05E8  00F0               	movwf	___ftpack@arg
  6085  05E9  087C               	movf	___ftadd@f2+1,w
  6086  05EA  00F1               	movwf	___ftpack@arg+1
  6087  05EB  087D               	movf	___ftadd@f2+2,w
  6088  05EC  00F2               	movwf	___ftpack@arg+2
  6089  05ED  0826               	movf	___ftadd@exp1,w
  6090  05EE  00A0               	movwf	??___ftadd
  6091  05EF  0820               	movf	??___ftadd,w
  6092  05F0  00F3               	movwf	___ftpack@exp
  6093  05F1  0824               	movf	___ftadd@sign,w
  6094  05F2  00A1               	movwf	??___ftadd+1
  6095  05F3  0821               	movf	??___ftadd+1,w
  6096  05F4  00F4               	movwf	___ftpack@sign
  6097  05F5  120A  158A  251C   	fcall	___ftpack
  6098  05F8  0870               	movf	?___ftpack,w
  6099  05F9  00F8               	movwf	?___ftadd
  6100  05FA  0871               	movf	?___ftpack+1,w
  6101  05FB  00F9               	movwf	?___ftadd+1
  6102  05FC  0872               	movf	?___ftpack+2,w
  6103  05FD  00FA               	movwf	?___ftadd+2
  6104  05FE  0008               	return
  6105  05FF                     __end_of___ftadd:	
  6106                           
  6107                           	psect	text30
  6108  171A                     __ptext30:	
  6109 ;; *************** function ___ftneg *****************
  6110 ;; Defined at:
  6111 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  f1              3    0[COMMON] float 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  3    0[COMMON] float 
  6118 ;; Registers used:
  6119 ;;		wreg
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6125 ;;      Params:         3       0       0       0       0
  6126 ;;      Locals:         0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0
  6128 ;;      Totals:         3       0       0       0       0
  6129 ;;Total ram usage:        3 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; This function calls:
  6132 ;;		Nothing
  6133 ;; This function is called by:
  6134 ;;		_ftoa
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function ___ftneg
  6140  171A                     ___ftneg:	
  6141                           
  6142                           ;incstack = 0
  6143 ;; hardware stack exceeded
  6144                           ; Regs used in ___ftneg: [wreg]
  6145  171A  0872               	movf	___ftneg@f1+2,w
  6146  171B  0471               	iorwf	___ftneg@f1+1,w
  6147  171C  0470               	iorwf	___ftneg@f1,w
  6148  171D  1903               	skipnz
  6149  171E  0008               	return
  6150  171F  3080               	movlw	128
  6151  1720  06F2               	xorwf	___ftneg@f1+2,f
  6152  1721  0008               	return
  6153  1722                     __end_of___ftneg:	
  6154                           
  6155                           	psect	text31
  6156  05FF                     __ptext31:	
  6157 ;; *************** function ___ftmul *****************
  6158 ;; Defined at:
  6159 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  f1              3    0[BANK0 ] float 
  6162 ;;  f2              3    3[BANK0 ] float 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6165 ;;  sign            1   15[BANK0 ] unsigned char 
  6166 ;;  cntr            1   14[BANK0 ] unsigned char 
  6167 ;;  exp             1   10[BANK0 ] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  3    0[BANK0 ] float 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, pclath, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6177 ;;      Params:         0       6       0       0       0
  6178 ;;      Locals:         0       6       0       0       0
  6179 ;;      Temps:          0       4       0       0       0
  6180 ;;      Totals:         0      16       0       0       0
  6181 ;;Total ram usage:       16 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    1
  6184 ;; This function calls:
  6185 ;;		___ftpack
  6186 ;; This function is called by:
  6187 ;;		_ISR
  6188 ;;		_ftoa
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function ___ftmul
  6194  05FF                     ___ftmul:	
  6195                           
  6196                           ;incstack = 0
  6197 ;; hardware stack exceeded
  6198                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6199  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  6200  0600  1303               	bcf	3,6	;RP1=0, select bank0
  6201  0601  0820               	movf	___ftmul@f1,w
  6202  0602  00A6               	movwf	??___ftmul
  6203  0603  0821               	movf	___ftmul@f1+1,w
  6204  0604  00A7               	movwf	??___ftmul+1
  6205  0605  0822               	movf	___ftmul@f1+2,w
  6206  0606  00A8               	movwf	??___ftmul+2
  6207  0607  1003               	clrc
  6208  0608  0D27               	rlf	??___ftmul+1,w
  6209  0609  0D28               	rlf	??___ftmul+2,w
  6210  060A  00A9               	movwf	??___ftmul+3
  6211  060B  0829               	movf	??___ftmul+3,w
  6212  060C  00AA               	movwf	___ftmul@exp
  6213  060D  08AA               	movf	___ftmul@exp,f
  6214  060E  1D03               	skipz
  6215  060F  2E17               	goto	i1l2285
  6216  0610  3000               	movlw	0
  6217  0611  00A0               	movwf	?___ftmul
  6218  0612  3000               	movlw	0
  6219  0613  00A1               	movwf	?___ftmul+1
  6220  0614  3000               	movlw	0
  6221  0615  00A2               	movwf	?___ftmul+2
  6222  0616  0008               	return
  6223  0617                     i1l2285:	
  6224  0617  0823               	movf	___ftmul@f2,w
  6225  0618  00A6               	movwf	??___ftmul
  6226  0619  0824               	movf	___ftmul@f2+1,w
  6227  061A  00A7               	movwf	??___ftmul+1
  6228  061B  0825               	movf	___ftmul@f2+2,w
  6229  061C  00A8               	movwf	??___ftmul+2
  6230  061D  1003               	clrc
  6231  061E  0D27               	rlf	??___ftmul+1,w
  6232  061F  0D28               	rlf	??___ftmul+2,w
  6233  0620  00A9               	movwf	??___ftmul+3
  6234  0621  0829               	movf	??___ftmul+3,w
  6235  0622  00AF               	movwf	___ftmul@sign
  6236  0623  08AF               	movf	___ftmul@sign,f
  6237  0624  1D03               	skipz
  6238  0625  2E2D               	goto	i1l2291
  6239  0626  3000               	movlw	0
  6240  0627  00A0               	movwf	?___ftmul
  6241  0628  3000               	movlw	0
  6242  0629  00A1               	movwf	?___ftmul+1
  6243  062A  3000               	movlw	0
  6244  062B  00A2               	movwf	?___ftmul+2
  6245  062C  0008               	return
  6246  062D                     i1l2291:	
  6247  062D  082F               	movf	___ftmul@sign,w
  6248  062E  3E7B               	addlw	123
  6249  062F  00A6               	movwf	??___ftmul
  6250  0630  0826               	movf	??___ftmul,w
  6251  0631  07AA               	addwf	___ftmul@exp,f
  6252  0632  0820               	movf	___ftmul@f1,w
  6253  0633  00A6               	movwf	??___ftmul
  6254  0634  0821               	movf	___ftmul@f1+1,w
  6255  0635  00A7               	movwf	??___ftmul+1
  6256  0636  0822               	movf	___ftmul@f1+2,w
  6257  0637  00A8               	movwf	??___ftmul+2
  6258  0638  3010               	movlw	16
  6259  0639                     u286_25:	
  6260  0639  1003               	clrc
  6261  063A  0CA8               	rrf	??___ftmul+2,f
  6262  063B  0CA7               	rrf	??___ftmul+1,f
  6263  063C  0CA6               	rrf	??___ftmul,f
  6264  063D  3EFF               	addlw	-1
  6265  063E  1D03               	skipz
  6266  063F  2E39               	goto	u286_25
  6267  0640  0826               	movf	??___ftmul,w
  6268  0641  00A9               	movwf	??___ftmul+3
  6269  0642  0829               	movf	??___ftmul+3,w
  6270  0643  00AF               	movwf	___ftmul@sign
  6271  0644  0823               	movf	___ftmul@f2,w
  6272  0645  00A6               	movwf	??___ftmul
  6273  0646  0824               	movf	___ftmul@f2+1,w
  6274  0647  00A7               	movwf	??___ftmul+1
  6275  0648  0825               	movf	___ftmul@f2+2,w
  6276  0649  00A8               	movwf	??___ftmul+2
  6277  064A  3010               	movlw	16
  6278  064B                     u287_25:	
  6279  064B  1003               	clrc
  6280  064C  0CA8               	rrf	??___ftmul+2,f
  6281  064D  0CA7               	rrf	??___ftmul+1,f
  6282  064E  0CA6               	rrf	??___ftmul,f
  6283  064F  3EFF               	addlw	-1
  6284  0650  1D03               	skipz
  6285  0651  2E4B               	goto	u287_25
  6286  0652  0826               	movf	??___ftmul,w
  6287  0653  00A9               	movwf	??___ftmul+3
  6288  0654  0829               	movf	??___ftmul+3,w
  6289  0655  06AF               	xorwf	___ftmul@sign,f
  6290  0656  3080               	movlw	128
  6291  0657  00A6               	movwf	??___ftmul
  6292  0658  0826               	movf	??___ftmul,w
  6293  0659  05AF               	andwf	___ftmul@sign,f
  6294  065A  17A1               	bsf	___ftmul@f1+1,7
  6295  065B  17A4               	bsf	___ftmul@f2+1,7
  6296  065C  30FF               	movlw	255
  6297  065D  05A3               	andwf	___ftmul@f2,f
  6298  065E  30FF               	movlw	255
  6299  065F  05A4               	andwf	___ftmul@f2+1,f
  6300  0660  3000               	movlw	0
  6301  0661  05A5               	andwf	___ftmul@f2+2,f
  6302  0662  3000               	movlw	0
  6303  0663  00AB               	movwf	___ftmul@f3_as_product
  6304  0664  3000               	movlw	0
  6305  0665  00AC               	movwf	___ftmul@f3_as_product+1
  6306  0666  3000               	movlw	0
  6307  0667  00AD               	movwf	___ftmul@f3_as_product+2
  6308  0668  3007               	movlw	7
  6309  0669  00A6               	movwf	??___ftmul
  6310  066A  0826               	movf	??___ftmul,w
  6311  066B  00AE               	movwf	___ftmul@cntr
  6312  066C                     i1l2303:	
  6313  066C  1C20               	btfss	___ftmul@f1,0
  6314  066D  2E7C               	goto	i1l2307
  6315  066E  0823               	movf	___ftmul@f2,w
  6316  066F  07AB               	addwf	___ftmul@f3_as_product,f
  6317  0670  0824               	movf	___ftmul@f2+1,w
  6318  0671  1103               	clrz
  6319  0672  1803               	skipnc
  6320  0673  0A24               	incf	___ftmul@f2+1,w
  6321  0674  1D03               	btfss	3,2
  6322  0675  07AC               	addwf	___ftmul@f3_as_product+1,f
  6323  0676  0825               	movf	___ftmul@f2+2,w
  6324  0677  1103               	clrz
  6325  0678  1803               	skipnc
  6326  0679  0A25               	incf	___ftmul@f2+2,w
  6327  067A  1D03               	btfss	3,2
  6328  067B  07AD               	addwf	___ftmul@f3_as_product+2,f
  6329  067C                     i1l2307:	
  6330  067C  3001               	movlw	1
  6331  067D                     u290_25:	
  6332  067D  1003               	clrc
  6333  067E  0CA2               	rrf	___ftmul@f1+2,f
  6334  067F  0CA1               	rrf	___ftmul@f1+1,f
  6335  0680  0CA0               	rrf	___ftmul@f1,f
  6336  0681  3EFF               	addlw	-1
  6337  0682  1D03               	skipz
  6338  0683  2E7D               	goto	u290_25
  6339  0684  3001               	movlw	1
  6340  0685                     u291_25:	
  6341  0685  1003               	clrc
  6342  0686  0DA3               	rlf	___ftmul@f2,f
  6343  0687  0DA4               	rlf	___ftmul@f2+1,f
  6344  0688  0DA5               	rlf	___ftmul@f2+2,f
  6345  0689  3EFF               	addlw	-1
  6346  068A  1D03               	skipz
  6347  068B  2E85               	goto	u291_25
  6348  068C  3001               	movlw	1
  6349  068D  02AE               	subwf	___ftmul@cntr,f
  6350  068E  1D03               	btfss	3,2
  6351  068F  2E6C               	goto	i1l2303
  6352  0690  3009               	movlw	9
  6353  0691  00A6               	movwf	??___ftmul
  6354  0692  0826               	movf	??___ftmul,w
  6355  0693  00AE               	movwf	___ftmul@cntr
  6356  0694                     i1l2315:	
  6357  0694  1C20               	btfss	___ftmul@f1,0
  6358  0695  2EA4               	goto	i1l2319
  6359  0696  0823               	movf	___ftmul@f2,w
  6360  0697  07AB               	addwf	___ftmul@f3_as_product,f
  6361  0698  0824               	movf	___ftmul@f2+1,w
  6362  0699  1103               	clrz
  6363  069A  1803               	skipnc
  6364  069B  0A24               	incf	___ftmul@f2+1,w
  6365  069C  1D03               	btfss	3,2
  6366  069D  07AC               	addwf	___ftmul@f3_as_product+1,f
  6367  069E  0825               	movf	___ftmul@f2+2,w
  6368  069F  1103               	clrz
  6369  06A0  1803               	skipnc
  6370  06A1  0A25               	incf	___ftmul@f2+2,w
  6371  06A2  1D03               	btfss	3,2
  6372  06A3  07AD               	addwf	___ftmul@f3_as_product+2,f
  6373  06A4                     i1l2319:	
  6374  06A4  3001               	movlw	1
  6375  06A5                     u295_25:	
  6376  06A5  1003               	clrc
  6377  06A6  0CA2               	rrf	___ftmul@f1+2,f
  6378  06A7  0CA1               	rrf	___ftmul@f1+1,f
  6379  06A8  0CA0               	rrf	___ftmul@f1,f
  6380  06A9  3EFF               	addlw	-1
  6381  06AA  1D03               	skipz
  6382  06AB  2EA5               	goto	u295_25
  6383  06AC  3001               	movlw	1
  6384  06AD                     u296_25:	
  6385  06AD  1003               	clrc
  6386  06AE  0CAD               	rrf	___ftmul@f3_as_product+2,f
  6387  06AF  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6388  06B0  0CAB               	rrf	___ftmul@f3_as_product,f
  6389  06B1  3EFF               	addlw	-1
  6390  06B2  1D03               	skipz
  6391  06B3  2EAD               	goto	u296_25
  6392  06B4  3001               	movlw	1
  6393  06B5  02AE               	subwf	___ftmul@cntr,f
  6394  06B6  1D03               	btfss	3,2
  6395  06B7  2E94               	goto	i1l2315
  6396  06B8  082B               	movf	___ftmul@f3_as_product,w
  6397  06B9  00F0               	movwf	___ftpack@arg
  6398  06BA  082C               	movf	___ftmul@f3_as_product+1,w
  6399  06BB  00F1               	movwf	___ftpack@arg+1
  6400  06BC  082D               	movf	___ftmul@f3_as_product+2,w
  6401  06BD  00F2               	movwf	___ftpack@arg+2
  6402  06BE  082A               	movf	___ftmul@exp,w
  6403  06BF  00A6               	movwf	??___ftmul
  6404  06C0  0826               	movf	??___ftmul,w
  6405  06C1  00F3               	movwf	___ftpack@exp
  6406  06C2  082F               	movf	___ftmul@sign,w
  6407  06C3  00A7               	movwf	??___ftmul+1
  6408  06C4  0827               	movf	??___ftmul+1,w
  6409  06C5  00F4               	movwf	___ftpack@sign
  6410  06C6  120A  158A  251C   	fcall	___ftpack
  6411  06C9  0870               	movf	?___ftpack,w
  6412  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  6413  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  6414  06CC  00A0               	movwf	?___ftmul
  6415  06CD  0871               	movf	?___ftpack+1,w
  6416  06CE  00A1               	movwf	?___ftmul+1
  6417  06CF  0872               	movf	?___ftpack+2,w
  6418  06D0  00A2               	movwf	?___ftmul+2
  6419  06D1  0008               	return
  6420  06D2                     __end_of___ftmul:	
  6421                           
  6422                           	psect	text32
  6423  0BFB                     __ptext32:	
  6424 ;; *************** function ___ftge *****************
  6425 ;; Defined at:
  6426 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftge.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  ff1             3    0[COMMON] float 
  6429 ;;  ff2             3    3[COMMON] float 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;		None
  6432 ;; Return value:  Size  Location     Type
  6433 ;;		None               void
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6441 ;;      Params:         6       0       0       0       0
  6442 ;;      Locals:         0       0       0       0       0
  6443 ;;      Temps:          6       0       0       0       0
  6444 ;;      Totals:        12       0       0       0       0
  6445 ;;Total ram usage:       12 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_ftoa
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function ___ftge
  6456  0BFB                     ___ftge:	
  6457                           
  6458                           ;incstack = 0
  6459 ;; hardware stack exceeded
  6460                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6461  0BFB  1FF2               	btfss	___ftge@ff1+2,7
  6462  0BFC  2C22               	goto	i1l2263
  6463  0BFD  3000               	movlw	0
  6464  0BFE  00F6               	movwf	??___ftge
  6465  0BFF  3000               	movlw	0
  6466  0C00  00F7               	movwf	??___ftge+1
  6467  0C01  3080               	movlw	128
  6468  0C02  00F8               	movwf	??___ftge+2
  6469  0C03  0970               	comf	___ftge@ff1,w
  6470  0C04  00F9               	movwf	??___ftge+3
  6471  0C05  0971               	comf	___ftge@ff1+1,w
  6472  0C06  00FA               	movwf	??___ftge+4
  6473  0C07  0972               	comf	___ftge@ff1+2,w
  6474  0C08  00FB               	movwf	??___ftge+5
  6475  0C09  0AF9               	incf	??___ftge+3,f
  6476  0C0A  1903               	skipnz
  6477  0C0B  0AFA               	incf	??___ftge+4,f
  6478  0C0C  1903               	skipnz
  6479  0C0D  0AFB               	incf	??___ftge+5,f
  6480  0C0E  0879               	movf	??___ftge+3,w
  6481  0C0F  07F6               	addwf	??___ftge,f
  6482  0C10  087A               	movf	??___ftge+4,w
  6483  0C11  1803               	skipnc
  6484  0C12  0F7A               	incfsz	??___ftge+4,w
  6485  0C13  2C15               	goto	u280_21
  6486  0C14  2C16               	goto	u280_22
  6487  0C15                     u280_21:	
  6488  0C15  07F7               	addwf	??___ftge+1,f
  6489  0C16                     u280_22:	
  6490  0C16  087B               	movf	??___ftge+5,w
  6491  0C17  1803               	skipnc
  6492  0C18  0F7B               	incfsz	??___ftge+5,w
  6493  0C19  2C1B               	goto	u280_23
  6494  0C1A  2C1C               	goto	u280_24
  6495  0C1B                     u280_23:	
  6496  0C1B  07F8               	addwf	??___ftge+2,f
  6497  0C1C                     u280_24:	
  6498  0C1C  0876               	movf	??___ftge,w
  6499  0C1D  00F0               	movwf	___ftge@ff1
  6500  0C1E  0877               	movf	??___ftge+1,w
  6501  0C1F  00F1               	movwf	___ftge@ff1+1
  6502  0C20  0878               	movf	??___ftge+2,w
  6503  0C21  00F2               	movwf	___ftge@ff1+2
  6504  0C22                     i1l2263:	
  6505  0C22  1FF5               	btfss	___ftge@ff2+2,7
  6506  0C23  2C49               	goto	i1l2267
  6507  0C24  3000               	movlw	0
  6508  0C25  00F6               	movwf	??___ftge
  6509  0C26  3000               	movlw	0
  6510  0C27  00F7               	movwf	??___ftge+1
  6511  0C28  3080               	movlw	128
  6512  0C29  00F8               	movwf	??___ftge+2
  6513  0C2A  0973               	comf	___ftge@ff2,w
  6514  0C2B  00F9               	movwf	??___ftge+3
  6515  0C2C  0974               	comf	___ftge@ff2+1,w
  6516  0C2D  00FA               	movwf	??___ftge+4
  6517  0C2E  0975               	comf	___ftge@ff2+2,w
  6518  0C2F  00FB               	movwf	??___ftge+5
  6519  0C30  0AF9               	incf	??___ftge+3,f
  6520  0C31  1903               	skipnz
  6521  0C32  0AFA               	incf	??___ftge+4,f
  6522  0C33  1903               	skipnz
  6523  0C34  0AFB               	incf	??___ftge+5,f
  6524  0C35  0879               	movf	??___ftge+3,w
  6525  0C36  07F6               	addwf	??___ftge,f
  6526  0C37  087A               	movf	??___ftge+4,w
  6527  0C38  1803               	skipnc
  6528  0C39  0F7A               	incfsz	??___ftge+4,w
  6529  0C3A  2C3C               	goto	u282_21
  6530  0C3B  2C3D               	goto	u282_22
  6531  0C3C                     u282_21:	
  6532  0C3C  07F7               	addwf	??___ftge+1,f
  6533  0C3D                     u282_22:	
  6534  0C3D  087B               	movf	??___ftge+5,w
  6535  0C3E  1803               	skipnc
  6536  0C3F  0F7B               	incfsz	??___ftge+5,w
  6537  0C40  2C42               	goto	u282_23
  6538  0C41  2C43               	goto	u282_24
  6539  0C42                     u282_23:	
  6540  0C42  07F8               	addwf	??___ftge+2,f
  6541  0C43                     u282_24:	
  6542  0C43  0876               	movf	??___ftge,w
  6543  0C44  00F3               	movwf	___ftge@ff2
  6544  0C45  0877               	movf	??___ftge+1,w
  6545  0C46  00F4               	movwf	___ftge@ff2+1
  6546  0C47  0878               	movf	??___ftge+2,w
  6547  0C48  00F5               	movwf	___ftge@ff2+2
  6548  0C49                     i1l2267:	
  6549  0C49  3080               	movlw	128
  6550  0C4A  06F2               	xorwf	___ftge@ff1+2,f
  6551  0C4B  3080               	movlw	128
  6552  0C4C  06F5               	xorwf	___ftge@ff2+2,f
  6553  0C4D  0875               	movf	___ftge@ff2+2,w
  6554  0C4E  0272               	subwf	___ftge@ff1+2,w
  6555  0C4F  1D03               	skipz
  6556  0C50  0008               	return
  6557  0C51  0874               	movf	___ftge@ff2+1,w
  6558  0C52  0271               	subwf	___ftge@ff1+1,w
  6559  0C53  1D03               	skipz
  6560  0C54  0008               	return
  6561  0C55  0873               	movf	___ftge@ff2,w
  6562  0C56  0270               	subwf	___ftge@ff1,w
  6563  0C57  0008               	return
  6564  0C58                     __end_of___ftge:	
  6565                           
  6566                           	psect	text33
  6567  0E8E                     __ptext33:	
  6568 ;; *************** function ___ftdiv *****************
  6569 ;; Defined at:
  6570 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  f2              3   16[BANK0 ] float 
  6573 ;;  f1              3   19[BANK0 ] float 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  f3              3   27[BANK0 ] float 
  6576 ;;  sign            1   31[BANK0 ] unsigned char 
  6577 ;;  exp             1   30[BANK0 ] unsigned char 
  6578 ;;  cntr            1   26[BANK0 ] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  3   16[BANK0 ] float 
  6581 ;; Registers used:
  6582 ;;		wreg, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6588 ;;      Params:         0       6       0       0       0
  6589 ;;      Locals:         0       6       0       0       0
  6590 ;;      Temps:          0       4       0       0       0
  6591 ;;      Totals:         0      16       0       0       0
  6592 ;;Total ram usage:       16 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    1
  6595 ;; This function calls:
  6596 ;;		___ftpack
  6597 ;; This function is called by:
  6598 ;;		_ISR
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function ___ftdiv
  6604  0E8E                     ___ftdiv:	
  6605                           
  6606                           ;incstack = 0
  6607 ;; hardware stack exceeded
  6608                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6609  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6610  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6611  0E90  0833               	movf	___ftdiv@f1,w
  6612  0E91  00B6               	movwf	??___ftdiv
  6613  0E92  0834               	movf	___ftdiv@f1+1,w
  6614  0E93  00B7               	movwf	??___ftdiv+1
  6615  0E94  0835               	movf	___ftdiv@f1+2,w
  6616  0E95  00B8               	movwf	??___ftdiv+2
  6617  0E96  1003               	clrc
  6618  0E97  0D37               	rlf	??___ftdiv+1,w
  6619  0E98  0D38               	rlf	??___ftdiv+2,w
  6620  0E99  00B9               	movwf	??___ftdiv+3
  6621  0E9A  0839               	movf	??___ftdiv+3,w
  6622  0E9B  00BE               	movwf	___ftdiv@exp
  6623  0E9C  08BE               	movf	___ftdiv@exp,f
  6624  0E9D  1D03               	skipz
  6625  0E9E  2EA6               	goto	i1l2641
  6626  0E9F  3000               	movlw	0
  6627  0EA0  00B0               	movwf	?___ftdiv
  6628  0EA1  3000               	movlw	0
  6629  0EA2  00B1               	movwf	?___ftdiv+1
  6630  0EA3  3000               	movlw	0
  6631  0EA4  00B2               	movwf	?___ftdiv+2
  6632  0EA5  0008               	return
  6633  0EA6                     i1l2641:	
  6634  0EA6  0830               	movf	___ftdiv@f2,w
  6635  0EA7  00B6               	movwf	??___ftdiv
  6636  0EA8  0831               	movf	___ftdiv@f2+1,w
  6637  0EA9  00B7               	movwf	??___ftdiv+1
  6638  0EAA  0832               	movf	___ftdiv@f2+2,w
  6639  0EAB  00B8               	movwf	??___ftdiv+2
  6640  0EAC  1003               	clrc
  6641  0EAD  0D37               	rlf	??___ftdiv+1,w
  6642  0EAE  0D38               	rlf	??___ftdiv+2,w
  6643  0EAF  00B9               	movwf	??___ftdiv+3
  6644  0EB0  0839               	movf	??___ftdiv+3,w
  6645  0EB1  00BF               	movwf	___ftdiv@sign
  6646  0EB2  08BF               	movf	___ftdiv@sign,f
  6647  0EB3  1D03               	skipz
  6648  0EB4  2EBC               	goto	i1l2647
  6649  0EB5  3000               	movlw	0
  6650  0EB6  00B0               	movwf	?___ftdiv
  6651  0EB7  3000               	movlw	0
  6652  0EB8  00B1               	movwf	?___ftdiv+1
  6653  0EB9  3000               	movlw	0
  6654  0EBA  00B2               	movwf	?___ftdiv+2
  6655  0EBB  0008               	return
  6656  0EBC                     i1l2647:	
  6657  0EBC  3000               	movlw	0
  6658  0EBD  00BB               	movwf	___ftdiv@f3
  6659  0EBE  3000               	movlw	0
  6660  0EBF  00BC               	movwf	___ftdiv@f3+1
  6661  0EC0  3000               	movlw	0
  6662  0EC1  00BD               	movwf	___ftdiv@f3+2
  6663  0EC2  3089               	movlw	137
  6664  0EC3  073F               	addwf	___ftdiv@sign,w
  6665  0EC4  00B6               	movwf	??___ftdiv
  6666  0EC5  0836               	movf	??___ftdiv,w
  6667  0EC6  02BE               	subwf	___ftdiv@exp,f
  6668  0EC7  0833               	movf	___ftdiv@f1,w
  6669  0EC8  00B6               	movwf	??___ftdiv
  6670  0EC9  0834               	movf	___ftdiv@f1+1,w
  6671  0ECA  00B7               	movwf	??___ftdiv+1
  6672  0ECB  0835               	movf	___ftdiv@f1+2,w
  6673  0ECC  00B8               	movwf	??___ftdiv+2
  6674  0ECD  3010               	movlw	16
  6675  0ECE                     u342_25:	
  6676  0ECE  1003               	clrc
  6677  0ECF  0CB8               	rrf	??___ftdiv+2,f
  6678  0ED0  0CB7               	rrf	??___ftdiv+1,f
  6679  0ED1  0CB6               	rrf	??___ftdiv,f
  6680  0ED2  3EFF               	addlw	-1
  6681  0ED3  1D03               	skipz
  6682  0ED4  2ECE               	goto	u342_25
  6683  0ED5  0836               	movf	??___ftdiv,w
  6684  0ED6  00B9               	movwf	??___ftdiv+3
  6685  0ED7  0839               	movf	??___ftdiv+3,w
  6686  0ED8  00BF               	movwf	___ftdiv@sign
  6687  0ED9  0830               	movf	___ftdiv@f2,w
  6688  0EDA  00B6               	movwf	??___ftdiv
  6689  0EDB  0831               	movf	___ftdiv@f2+1,w
  6690  0EDC  00B7               	movwf	??___ftdiv+1
  6691  0EDD  0832               	movf	___ftdiv@f2+2,w
  6692  0EDE  00B8               	movwf	??___ftdiv+2
  6693  0EDF  3010               	movlw	16
  6694  0EE0                     u343_25:	
  6695  0EE0  1003               	clrc
  6696  0EE1  0CB8               	rrf	??___ftdiv+2,f
  6697  0EE2  0CB7               	rrf	??___ftdiv+1,f
  6698  0EE3  0CB6               	rrf	??___ftdiv,f
  6699  0EE4  3EFF               	addlw	-1
  6700  0EE5  1D03               	skipz
  6701  0EE6  2EE0               	goto	u343_25
  6702  0EE7  0836               	movf	??___ftdiv,w
  6703  0EE8  00B9               	movwf	??___ftdiv+3
  6704  0EE9  0839               	movf	??___ftdiv+3,w
  6705  0EEA  06BF               	xorwf	___ftdiv@sign,f
  6706  0EEB  3080               	movlw	128
  6707  0EEC  00B6               	movwf	??___ftdiv
  6708  0EED  0836               	movf	??___ftdiv,w
  6709  0EEE  05BF               	andwf	___ftdiv@sign,f
  6710  0EEF  17B4               	bsf	___ftdiv@f1+1,7
  6711  0EF0  30FF               	movlw	255
  6712  0EF1  05B3               	andwf	___ftdiv@f1,f
  6713  0EF2  30FF               	movlw	255
  6714  0EF3  05B4               	andwf	___ftdiv@f1+1,f
  6715  0EF4  3000               	movlw	0
  6716  0EF5  05B5               	andwf	___ftdiv@f1+2,f
  6717  0EF6  17B1               	bsf	___ftdiv@f2+1,7
  6718  0EF7  30FF               	movlw	255
  6719  0EF8  05B0               	andwf	___ftdiv@f2,f
  6720  0EF9  30FF               	movlw	255
  6721  0EFA  05B1               	andwf	___ftdiv@f2+1,f
  6722  0EFB  3000               	movlw	0
  6723  0EFC  05B2               	andwf	___ftdiv@f2+2,f
  6724  0EFD  3018               	movlw	24
  6725  0EFE  00B6               	movwf	??___ftdiv
  6726  0EFF  0836               	movf	??___ftdiv,w
  6727  0F00  00BA               	movwf	___ftdiv@cntr
  6728  0F01                     i1l2661:	
  6729  0F01  3001               	movlw	1
  6730  0F02                     u344_25:	
  6731  0F02  1003               	clrc
  6732  0F03  0DBB               	rlf	___ftdiv@f3,f
  6733  0F04  0DBC               	rlf	___ftdiv@f3+1,f
  6734  0F05  0DBD               	rlf	___ftdiv@f3+2,f
  6735  0F06  3EFF               	addlw	-1
  6736  0F07  1D03               	skipz
  6737  0F08  2F02               	goto	u344_25
  6738  0F09  0832               	movf	___ftdiv@f2+2,w
  6739  0F0A  0235               	subwf	___ftdiv@f1+2,w
  6740  0F0B  1D03               	skipz
  6741  0F0C  2F13               	goto	u345_25
  6742  0F0D  0831               	movf	___ftdiv@f2+1,w
  6743  0F0E  0234               	subwf	___ftdiv@f1+1,w
  6744  0F0F  1D03               	skipz
  6745  0F10  2F13               	goto	u345_25
  6746  0F11  0830               	movf	___ftdiv@f2,w
  6747  0F12  0233               	subwf	___ftdiv@f1,w
  6748  0F13                     u345_25:	
  6749  0F13  1C03               	skipc
  6750  0F14  2F20               	goto	i1l2669
  6751  0F15  0830               	movf	___ftdiv@f2,w
  6752  0F16  02B3               	subwf	___ftdiv@f1,f
  6753  0F17  0831               	movf	___ftdiv@f2+1,w
  6754  0F18  1C03               	skipc
  6755  0F19  0F31               	incfsz	___ftdiv@f2+1,w
  6756  0F1A  02B4               	subwf	___ftdiv@f1+1,f
  6757  0F1B  0832               	movf	___ftdiv@f2+2,w
  6758  0F1C  1C03               	skipc
  6759  0F1D  0A32               	incf	___ftdiv@f2+2,w
  6760  0F1E  02B5               	subwf	___ftdiv@f1+2,f
  6761  0F1F  143B               	bsf	___ftdiv@f3,0
  6762  0F20                     i1l2669:	
  6763  0F20  3001               	movlw	1
  6764  0F21                     u346_25:	
  6765  0F21  1003               	clrc
  6766  0F22  0DB3               	rlf	___ftdiv@f1,f
  6767  0F23  0DB4               	rlf	___ftdiv@f1+1,f
  6768  0F24  0DB5               	rlf	___ftdiv@f1+2,f
  6769  0F25  3EFF               	addlw	-1
  6770  0F26  1D03               	skipz
  6771  0F27  2F21               	goto	u346_25
  6772  0F28  3001               	movlw	1
  6773  0F29  02BA               	subwf	___ftdiv@cntr,f
  6774  0F2A  1D03               	btfss	3,2
  6775  0F2B  2F01               	goto	i1l2661
  6776  0F2C  083B               	movf	___ftdiv@f3,w
  6777  0F2D  00F0               	movwf	___ftpack@arg
  6778  0F2E  083C               	movf	___ftdiv@f3+1,w
  6779  0F2F  00F1               	movwf	___ftpack@arg+1
  6780  0F30  083D               	movf	___ftdiv@f3+2,w
  6781  0F31  00F2               	movwf	___ftpack@arg+2
  6782  0F32  083E               	movf	___ftdiv@exp,w
  6783  0F33  00B6               	movwf	??___ftdiv
  6784  0F34  0836               	movf	??___ftdiv,w
  6785  0F35  00F3               	movwf	___ftpack@exp
  6786  0F36  083F               	movf	___ftdiv@sign,w
  6787  0F37  00B7               	movwf	??___ftdiv+1
  6788  0F38  0837               	movf	??___ftdiv+1,w
  6789  0F39  00F4               	movwf	___ftpack@sign
  6790  0F3A  120A  158A  251C   	fcall	___ftpack
  6791  0F3D  0870               	movf	?___ftpack,w
  6792  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  6793  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  6794  0F40  00B0               	movwf	?___ftdiv
  6795  0F41  0871               	movf	?___ftpack+1,w
  6796  0F42  00B1               	movwf	?___ftdiv+1
  6797  0F43  0872               	movf	?___ftpack+2,w
  6798  0F44  00B2               	movwf	?___ftdiv+2
  6799  0F45  0008               	return
  6800  0F46                     __end_of___ftdiv:	
  6801                           
  6802                           	psect	text34
  6803  17DF                     __ptext34:	
  6804 ;; *************** function ___awtoft *****************
  6805 ;; Defined at:
  6806 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  c               2    8[COMMON] int 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  sign            1   13[COMMON] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  3    8[COMMON] float 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0, pclath, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6820 ;;      Params:         3       0       0       0       0
  6821 ;;      Locals:         1       0       0       0       0
  6822 ;;      Temps:          2       0       0       0       0
  6823 ;;      Totals:         6       0       0       0       0
  6824 ;;Total ram usage:        6 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    1
  6827 ;; This function calls:
  6828 ;;		___ftpack
  6829 ;; This function is called by:
  6830 ;;		_ISR
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function ___awtoft
  6836  17DF                     ___awtoft:	
  6837                           
  6838                           ;incstack = 0
  6839 ;; hardware stack exceeded
  6840                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6841  17DF  01FD               	clrf	___awtoft@sign
  6842  17E0  1FF9               	btfss	___awtoft@c+1,7
  6843  17E1  2FE9               	goto	i1l2631
  6844  17E2  09F8               	comf	___awtoft@c,f
  6845  17E3  09F9               	comf	___awtoft@c+1,f
  6846  17E4  0AF8               	incf	___awtoft@c,f
  6847  17E5  1903               	skipnz
  6848  17E6  0AF9               	incf	___awtoft@c+1,f
  6849  17E7  01FD               	clrf	___awtoft@sign
  6850  17E8  0AFD               	incf	___awtoft@sign,f
  6851  17E9                     i1l2631:	
  6852  17E9  0878               	movf	___awtoft@c,w
  6853  17EA  00F0               	movwf	___ftpack@arg
  6854  17EB  0879               	movf	___awtoft@c+1,w
  6855  17EC  00F1               	movwf	___ftpack@arg+1
  6856  17ED  01F2               	clrf	___ftpack@arg+2
  6857  17EE  308E               	movlw	142
  6858  17EF  00FB               	movwf	??___awtoft
  6859  17F0  087B               	movf	??___awtoft,w
  6860  17F1  00F3               	movwf	___ftpack@exp
  6861  17F2  087D               	movf	___awtoft@sign,w
  6862  17F3  00FC               	movwf	??___awtoft+1
  6863  17F4  087C               	movf	??___awtoft+1,w
  6864  17F5  00F4               	movwf	___ftpack@sign
  6865  17F6  120A  158A  251C   	fcall	___ftpack
  6866  17F9  0870               	movf	?___ftpack,w
  6867  17FA  00F8               	movwf	?___awtoft
  6868  17FB  0871               	movf	?___ftpack+1,w
  6869  17FC  00F9               	movwf	?___awtoft+1
  6870  17FD  0872               	movf	?___ftpack+2,w
  6871  17FE  00FA               	movwf	?___awtoft+2
  6872  17FF  0008               	return
  6873  1800                     __end_of___awtoft:	
  6874                           
  6875                           	psect	text35
  6876  0D1C                     __ptext35:	
  6877 ;; *************** function ___ftpack *****************
  6878 ;; Defined at:
  6879 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  arg             3    0[COMMON] unsigned um
  6882 ;;  exp             1    3[COMMON] unsigned char 
  6883 ;;  sign            1    4[COMMON] unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  3    0[COMMON] float 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6895 ;;      Params:         5       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0
  6897 ;;      Temps:          3       0       0       0       0
  6898 ;;      Totals:         8       0       0       0       0
  6899 ;;Total ram usage:        8 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		___awtoft
  6905 ;;		___ftadd
  6906 ;;		___ftdiv
  6907 ;;		___ftmul
  6908 ;;		___lltoft
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           
  6913                           ;psect for function ___ftpack
  6914  0D1C                     ___ftpack:	
  6915                           
  6916                           ;incstack = 0
  6917 ;; hardware stack exceeded
  6918                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6919  0D1C  0873               	movf	___ftpack@exp,w
  6920  0D1D  1903               	btfsc	3,2
  6921  0D1E  2D24               	goto	i1l1887
  6922  0D1F  0872               	movf	___ftpack@arg+2,w
  6923  0D20  0471               	iorwf	___ftpack@arg+1,w
  6924  0D21  0470               	iorwf	___ftpack@arg,w
  6925  0D22  1D03               	skipz
  6926  0D23  2D37               	goto	i1l1893
  6927  0D24                     i1l1887:	
  6928  0D24  3000               	movlw	0
  6929  0D25  00F0               	movwf	?___ftpack
  6930  0D26  3000               	movlw	0
  6931  0D27  00F1               	movwf	?___ftpack+1
  6932  0D28  3000               	movlw	0
  6933  0D29  00F2               	movwf	?___ftpack+2
  6934  0D2A  0008               	return
  6935  0D2B                     i1l1891:	
  6936  0D2B  3001               	movlw	1
  6937  0D2C  00F5               	movwf	??___ftpack
  6938  0D2D  0875               	movf	??___ftpack,w
  6939  0D2E  07F3               	addwf	___ftpack@exp,f
  6940  0D2F  3001               	movlw	1
  6941  0D30                     u196_25:	
  6942  0D30  1003               	clrc
  6943  0D31  0CF2               	rrf	___ftpack@arg+2,f
  6944  0D32  0CF1               	rrf	___ftpack@arg+1,f
  6945  0D33  0CF0               	rrf	___ftpack@arg,f
  6946  0D34  3EFF               	addlw	-1
  6947  0D35  1D03               	skipz
  6948  0D36  2D30               	goto	u196_25
  6949  0D37                     i1l1893:	
  6950  0D37  30FE               	movlw	254
  6951  0D38  0572               	andwf	___ftpack@arg+2,w
  6952  0D39  1903               	btfsc	3,2
  6953  0D3A  2D52               	goto	i1l506
  6954  0D3B  2D2B               	goto	i1l1891
  6955  0D3C                     i1l1895:	
  6956  0D3C  3001               	movlw	1
  6957  0D3D  00F5               	movwf	??___ftpack
  6958  0D3E  0875               	movf	??___ftpack,w
  6959  0D3F  07F3               	addwf	___ftpack@exp,f
  6960  0D40  3001               	movlw	1
  6961  0D41  07F0               	addwf	___ftpack@arg,f
  6962  0D42  3000               	movlw	0
  6963  0D43  1803               	skipnc
  6964  0D44  3001               	movlw	1
  6965  0D45  07F1               	addwf	___ftpack@arg+1,f
  6966  0D46  3000               	movlw	0
  6967  0D47  1803               	skipnc
  6968  0D48  3001               	movlw	1
  6969  0D49  07F2               	addwf	___ftpack@arg+2,f
  6970  0D4A  3001               	movlw	1
  6971  0D4B                     u198_25:	
  6972  0D4B  1003               	clrc
  6973  0D4C  0CF2               	rrf	___ftpack@arg+2,f
  6974  0D4D  0CF1               	rrf	___ftpack@arg+1,f
  6975  0D4E  0CF0               	rrf	___ftpack@arg,f
  6976  0D4F  3EFF               	addlw	-1
  6977  0D50  1D03               	skipz
  6978  0D51  2D4B               	goto	u198_25
  6979  0D52                     i1l506:	
  6980  0D52  30FF               	movlw	255
  6981  0D53  0572               	andwf	___ftpack@arg+2,w
  6982  0D54  1903               	btfsc	3,2
  6983  0D55  2D61               	goto	i1l1903
  6984  0D56  2D3C               	goto	i1l1895
  6985  0D57                     i1l1901:	
  6986  0D57  3001               	movlw	1
  6987  0D58  02F3               	subwf	___ftpack@exp,f
  6988  0D59  3001               	movlw	1
  6989  0D5A                     u200_25:	
  6990  0D5A  1003               	clrc
  6991  0D5B  0DF0               	rlf	___ftpack@arg,f
  6992  0D5C  0DF1               	rlf	___ftpack@arg+1,f
  6993  0D5D  0DF2               	rlf	___ftpack@arg+2,f
  6994  0D5E  3EFF               	addlw	-1
  6995  0D5F  1D03               	skipz
  6996  0D60  2D5A               	goto	u200_25
  6997  0D61                     i1l1903:	
  6998  0D61  1FF1               	btfss	___ftpack@arg+1,7
  6999  0D62  2D57               	goto	i1l1901
  7000  0D63  1873               	btfsc	___ftpack@exp,0
  7001  0D64  2D6B               	goto	i1l512
  7002  0D65  30FF               	movlw	255
  7003  0D66  05F0               	andwf	___ftpack@arg,f
  7004  0D67  307F               	movlw	127
  7005  0D68  05F1               	andwf	___ftpack@arg+1,f
  7006  0D69  30FF               	movlw	255
  7007  0D6A  05F2               	andwf	___ftpack@arg+2,f
  7008  0D6B                     i1l512:	
  7009  0D6B  1003               	clrc
  7010  0D6C  0CF3               	rrf	___ftpack@exp,f
  7011  0D6D  0873               	movf	___ftpack@exp,w
  7012  0D6E  00F5               	movwf	??___ftpack
  7013  0D6F  01F6               	clrf	??___ftpack+1
  7014  0D70  01F7               	clrf	??___ftpack+2
  7015  0D71  3010               	movlw	16
  7016  0D72                     u203_25:	
  7017  0D72  1003               	clrc
  7018  0D73  0DF5               	rlf	??___ftpack,f
  7019  0D74  0DF6               	rlf	??___ftpack+1,f
  7020  0D75  0DF7               	rlf	??___ftpack+2,f
  7021  0D76  3EFF               	addlw	-1
  7022  0D77  1D03               	skipz
  7023  0D78  2D72               	goto	u203_25
  7024  0D79  0875               	movf	??___ftpack,w
  7025  0D7A  04F0               	iorwf	___ftpack@arg,f
  7026  0D7B  0876               	movf	??___ftpack+1,w
  7027  0D7C  04F1               	iorwf	___ftpack@arg+1,f
  7028  0D7D  0877               	movf	??___ftpack+2,w
  7029  0D7E  04F2               	iorwf	___ftpack@arg+2,f
  7030  0D7F  0874               	movf	___ftpack@sign,w
  7031  0D80  1903               	btfsc	3,2
  7032  0D81  0008               	return
  7033  0D82  17F2               	bsf	___ftpack@arg+2,7
  7034  0D83  0008               	return
  7035  0D84                     __end_of___ftpack:	
  7036                           
  7037                           	psect	text36
  7038  0AA0                     __ptext36:	
  7039 ;; *************** function ___awmod *****************
  7040 ;; Defined at:
  7041 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awmod.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  divisor         2    9[COMMON] int 
  7044 ;;  dividend        2   11[COMMON] int 
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  sign            1    1[BANK0 ] unsigned char 
  7047 ;;  counter         1    0[BANK0 ] unsigned char 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  2    9[COMMON] int 
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, status,0
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7057 ;;      Params:         4       0       0       0       0
  7058 ;;      Locals:         0       2       0       0       0
  7059 ;;      Temps:          1       0       0       0       0
  7060 ;;      Totals:         5       2       0       0       0
  7061 ;;Total ram usage:        7 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_ISR
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function ___awmod
  7072  0AA0                     ___awmod:	
  7073                           
  7074                           ;incstack = 0
  7075                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7076  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  7077  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  7078  0AA2  01A1               	clrf	___awmod@sign
  7079  0AA3  1FFC               	btfss	___awmod@dividend+1,7
  7080  0AA4  2AAC               	goto	i1l2593
  7081  0AA5  09FB               	comf	___awmod@dividend,f
  7082  0AA6  09FC               	comf	___awmod@dividend+1,f
  7083  0AA7  0AFB               	incf	___awmod@dividend,f
  7084  0AA8  1903               	skipnz
  7085  0AA9  0AFC               	incf	___awmod@dividend+1,f
  7086  0AAA  01A1               	clrf	___awmod@sign
  7087  0AAB  0AA1               	incf	___awmod@sign,f
  7088  0AAC                     i1l2593:	
  7089  0AAC  1FFA               	btfss	___awmod@divisor+1,7
  7090  0AAD  2AB3               	goto	i1l2597
  7091  0AAE  09F9               	comf	___awmod@divisor,f
  7092  0AAF  09FA               	comf	___awmod@divisor+1,f
  7093  0AB0  0AF9               	incf	___awmod@divisor,f
  7094  0AB1  1903               	skipnz
  7095  0AB2  0AFA               	incf	___awmod@divisor+1,f
  7096  0AB3                     i1l2597:	
  7097  0AB3  087A               	movf	___awmod@divisor+1,w
  7098  0AB4  0479               	iorwf	___awmod@divisor,w
  7099  0AB5  1903               	skipnz
  7100  0AB6  2AE0               	goto	i1l2615
  7101  0AB7  01A0               	clrf	___awmod@counter
  7102  0AB8  0AA0               	incf	___awmod@counter,f
  7103  0AB9                     i1l2605:	
  7104  0AB9  1BFA               	btfsc	___awmod@divisor+1,7
  7105  0ABA  2AC7               	goto	i1l2607
  7106  0ABB  3001               	movlw	1
  7107  0ABC                     u333_25:	
  7108  0ABC  1003               	clrc
  7109  0ABD  0DF9               	rlf	___awmod@divisor,f
  7110  0ABE  0DFA               	rlf	___awmod@divisor+1,f
  7111  0ABF  3EFF               	addlw	-1
  7112  0AC0  1D03               	skipz
  7113  0AC1  2ABC               	goto	u333_25
  7114  0AC2  3001               	movlw	1
  7115  0AC3  00FD               	movwf	??___awmod
  7116  0AC4  087D               	movf	??___awmod,w
  7117  0AC5  07A0               	addwf	___awmod@counter,f
  7118  0AC6  2AB9               	goto	i1l2605
  7119  0AC7                     i1l2607:	
  7120  0AC7  087A               	movf	___awmod@divisor+1,w
  7121  0AC8  027C               	subwf	___awmod@dividend+1,w
  7122  0AC9  1D03               	skipz
  7123  0ACA  2ACD               	goto	u335_25
  7124  0ACB  0879               	movf	___awmod@divisor,w
  7125  0ACC  027B               	subwf	___awmod@dividend,w
  7126  0ACD                     u335_25:	
  7127  0ACD  1C03               	skipc
  7128  0ACE  2AD5               	goto	i1l2611
  7129  0ACF  0879               	movf	___awmod@divisor,w
  7130  0AD0  02FB               	subwf	___awmod@dividend,f
  7131  0AD1  087A               	movf	___awmod@divisor+1,w
  7132  0AD2  1C03               	skipc
  7133  0AD3  03FC               	decf	___awmod@dividend+1,f
  7134  0AD4  02FC               	subwf	___awmod@dividend+1,f
  7135  0AD5                     i1l2611:	
  7136  0AD5  3001               	movlw	1
  7137  0AD6                     u336_25:	
  7138  0AD6  1003               	clrc
  7139  0AD7  0CFA               	rrf	___awmod@divisor+1,f
  7140  0AD8  0CF9               	rrf	___awmod@divisor,f
  7141  0AD9  3EFF               	addlw	-1
  7142  0ADA  1D03               	skipz
  7143  0ADB  2AD6               	goto	u336_25
  7144  0ADC  3001               	movlw	1
  7145  0ADD  02A0               	subwf	___awmod@counter,f
  7146  0ADE  1D03               	btfss	3,2
  7147  0ADF  2AC7               	goto	i1l2607
  7148  0AE0                     i1l2615:	
  7149  0AE0  0821               	movf	___awmod@sign,w
  7150  0AE1  1903               	btfsc	3,2
  7151  0AE2  2AE8               	goto	i1l2619
  7152  0AE3  09FB               	comf	___awmod@dividend,f
  7153  0AE4  09FC               	comf	___awmod@dividend+1,f
  7154  0AE5  0AFB               	incf	___awmod@dividend,f
  7155  0AE6  1903               	skipnz
  7156  0AE7  0AFC               	incf	___awmod@dividend+1,f
  7157  0AE8                     i1l2619:	
  7158  0AE8  087C               	movf	___awmod@dividend+1,w
  7159  0AE9  01FA               	clrf	?___awmod+1
  7160  0AEA  07FA               	addwf	?___awmod+1,f
  7161  0AEB  087B               	movf	___awmod@dividend,w
  7162  0AEC  01F9               	clrf	?___awmod
  7163  0AED  07F9               	addwf	?___awmod,f
  7164  0AEE  0008               	return
  7165  0AEF                     __end_of___awmod:	
  7166                           
  7167                           	psect	text37
  7168  0BA0                     __ptext37:	
  7169 ;; *************** function ___awdiv *****************
  7170 ;; Defined at:
  7171 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  divisor         2    0[COMMON] int 
  7174 ;;  dividend        2    2[COMMON] int 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  quotient        2    7[COMMON] int 
  7177 ;;  sign            1    6[COMMON] unsigned char 
  7178 ;;  counter         1    5[COMMON] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  2    0[COMMON] int 
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7188 ;;      Params:         4       0       0       0       0
  7189 ;;      Locals:         4       0       0       0       0
  7190 ;;      Temps:          1       0       0       0       0
  7191 ;;      Totals:         9       0       0       0       0
  7192 ;;Total ram usage:        9 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; This function calls:
  7195 ;;		Nothing
  7196 ;; This function is called by:
  7197 ;;		_ISR
  7198 ;; This function uses a non-reentrant model
  7199 ;;
  7200                           
  7201                           
  7202                           ;psect for function ___awdiv
  7203  0BA0                     ___awdiv:	
  7204                           
  7205                           ;incstack = 0
  7206                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7207  0BA0  01F6               	clrf	___awdiv@sign
  7208  0BA1  1FF1               	btfss	___awdiv@divisor+1,7
  7209  0BA2  2BAA               	goto	i1l2549
  7210  0BA3  09F0               	comf	___awdiv@divisor,f
  7211  0BA4  09F1               	comf	___awdiv@divisor+1,f
  7212  0BA5  0AF0               	incf	___awdiv@divisor,f
  7213  0BA6  1903               	skipnz
  7214  0BA7  0AF1               	incf	___awdiv@divisor+1,f
  7215  0BA8  01F6               	clrf	___awdiv@sign
  7216  0BA9  0AF6               	incf	___awdiv@sign,f
  7217  0BAA                     i1l2549:	
  7218  0BAA  1FF3               	btfss	___awdiv@dividend+1,7
  7219  0BAB  2BB5               	goto	i1l2555
  7220  0BAC  09F2               	comf	___awdiv@dividend,f
  7221  0BAD  09F3               	comf	___awdiv@dividend+1,f
  7222  0BAE  0AF2               	incf	___awdiv@dividend,f
  7223  0BAF  1903               	skipnz
  7224  0BB0  0AF3               	incf	___awdiv@dividend+1,f
  7225  0BB1  3001               	movlw	1
  7226  0BB2  00F4               	movwf	??___awdiv
  7227  0BB3  0874               	movf	??___awdiv,w
  7228  0BB4  06F6               	xorwf	___awdiv@sign,f
  7229  0BB5                     i1l2555:	
  7230  0BB5  01F7               	clrf	___awdiv@quotient
  7231  0BB6  01F8               	clrf	___awdiv@quotient+1
  7232  0BB7  0871               	movf	___awdiv@divisor+1,w
  7233  0BB8  0470               	iorwf	___awdiv@divisor,w
  7234  0BB9  1903               	skipnz
  7235  0BBA  2BEC               	goto	i1l2577
  7236  0BBB  01F5               	clrf	___awdiv@counter
  7237  0BBC  0AF5               	incf	___awdiv@counter,f
  7238  0BBD                     i1l2565:	
  7239  0BBD  1BF1               	btfsc	___awdiv@divisor+1,7
  7240  0BBE  2BCB               	goto	i1l2567
  7241  0BBF  3001               	movlw	1
  7242  0BC0                     u323_25:	
  7243  0BC0  1003               	clrc
  7244  0BC1  0DF0               	rlf	___awdiv@divisor,f
  7245  0BC2  0DF1               	rlf	___awdiv@divisor+1,f
  7246  0BC3  3EFF               	addlw	-1
  7247  0BC4  1D03               	skipz
  7248  0BC5  2BC0               	goto	u323_25
  7249  0BC6  3001               	movlw	1
  7250  0BC7  00F4               	movwf	??___awdiv
  7251  0BC8  0874               	movf	??___awdiv,w
  7252  0BC9  07F5               	addwf	___awdiv@counter,f
  7253  0BCA  2BBD               	goto	i1l2565
  7254  0BCB                     i1l2567:	
  7255  0BCB  3001               	movlw	1
  7256  0BCC                     u325_25:	
  7257  0BCC  1003               	clrc
  7258  0BCD  0DF7               	rlf	___awdiv@quotient,f
  7259  0BCE  0DF8               	rlf	___awdiv@quotient+1,f
  7260  0BCF  3EFF               	addlw	-1
  7261  0BD0  1D03               	skipz
  7262  0BD1  2BCC               	goto	u325_25
  7263  0BD2  0871               	movf	___awdiv@divisor+1,w
  7264  0BD3  0273               	subwf	___awdiv@dividend+1,w
  7265  0BD4  1D03               	skipz
  7266  0BD5  2BD8               	goto	u326_25
  7267  0BD6  0870               	movf	___awdiv@divisor,w
  7268  0BD7  0272               	subwf	___awdiv@dividend,w
  7269  0BD8                     u326_25:	
  7270  0BD8  1C03               	skipc
  7271  0BD9  2BE1               	goto	i1l2573
  7272  0BDA  0870               	movf	___awdiv@divisor,w
  7273  0BDB  02F2               	subwf	___awdiv@dividend,f
  7274  0BDC  0871               	movf	___awdiv@divisor+1,w
  7275  0BDD  1C03               	skipc
  7276  0BDE  03F3               	decf	___awdiv@dividend+1,f
  7277  0BDF  02F3               	subwf	___awdiv@dividend+1,f
  7278  0BE0  1477               	bsf	___awdiv@quotient,0
  7279  0BE1                     i1l2573:	
  7280  0BE1  3001               	movlw	1
  7281  0BE2                     u327_25:	
  7282  0BE2  1003               	clrc
  7283  0BE3  0CF1               	rrf	___awdiv@divisor+1,f
  7284  0BE4  0CF0               	rrf	___awdiv@divisor,f
  7285  0BE5  3EFF               	addlw	-1
  7286  0BE6  1D03               	skipz
  7287  0BE7  2BE2               	goto	u327_25
  7288  0BE8  3001               	movlw	1
  7289  0BE9  02F5               	subwf	___awdiv@counter,f
  7290  0BEA  1D03               	btfss	3,2
  7291  0BEB  2BCB               	goto	i1l2567
  7292  0BEC                     i1l2577:	
  7293  0BEC  0876               	movf	___awdiv@sign,w
  7294  0BED  1903               	btfsc	3,2
  7295  0BEE  2BF4               	goto	i1l2581
  7296  0BEF  09F7               	comf	___awdiv@quotient,f
  7297  0BF0  09F8               	comf	___awdiv@quotient+1,f
  7298  0BF1  0AF7               	incf	___awdiv@quotient,f
  7299  0BF2  1903               	skipnz
  7300  0BF3  0AF8               	incf	___awdiv@quotient+1,f
  7301  0BF4                     i1l2581:	
  7302  0BF4  0878               	movf	___awdiv@quotient+1,w
  7303  0BF5  01F1               	clrf	?___awdiv+1
  7304  0BF6  07F1               	addwf	?___awdiv+1,f
  7305  0BF7  0877               	movf	___awdiv@quotient,w
  7306  0BF8  01F0               	clrf	?___awdiv
  7307  0BF9  07F0               	addwf	?___awdiv,f
  7308  0BFA  0008               	return
  7309  0BFB                     __end_of___awdiv:	
  7310                           
  7311                           	psect	text38
  7312  178C                     __ptext38:	
  7313 ;; *************** function _USARTReceiveChar *****************
  7314 ;; Defined at:
  7315 ;;		line 81 in file "main.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  USARTData       1    4[COMMON] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      unsigned char 
  7322 ;; Registers used:
  7323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7329 ;;      Params:         0       0       0       0       0
  7330 ;;      Locals:         1       0       0       0       0
  7331 ;;      Temps:          1       0       0       0       0
  7332 ;;      Totals:         2       0       0       0       0
  7333 ;;Total ram usage:        2 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    2
  7336 ;; This function calls:
  7337 ;;		i1_USARTWriteString
  7338 ;; This function is called by:
  7339 ;;		_ISR
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _USARTReceiveChar
  7345  178C                     _USARTReceiveChar:	
  7346                           
  7347                           ;main.c: 82: unsigned char USARTData;
  7348                           ;main.c: 84: if (!OERR)
  7349                           
  7350                           ;incstack = 0
  7351 ;; hardware stack exceeded
  7352                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7353  178C  1283               	bcf	3,5	;RP0=0, select bank0
  7354  178D  1303               	bcf	3,6	;RP1=0, select bank0
  7355  178E  1898               	btfsc	24,1	;volatile
  7356  178F  2F95               	goto	i1l2427
  7357                           
  7358                           ;main.c: 85: {
  7359                           ;main.c: 86: USARTData = RCREG;
  7360  1790  081A               	movf	26,w	;volatile
  7361  1791  00F3               	movwf	??_USARTReceiveChar
  7362  1792  0873               	movf	??_USARTReceiveChar,w
  7363  1793  00F4               	movwf	USARTReceiveChar@USARTData
  7364  1794  2FA4               	goto	i1l2435
  7365  1795                     i1l2427:	
  7366                           ;main.c: 88: } else {
  7367                           
  7368                           ;main.c: 87: PIR1bits.RCIF = 0;
  7369                           
  7370                           
  7371                           ;main.c: 89: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7372  1795  3059               	movlw	low (STR_1-__stringbase)
  7373  1796  00F1               	movwf	i1USARTWriteString@str
  7374  1797  3080               	movlw	128
  7375  1798  00F2               	movwf	i1USARTWriteString@str+1
  7376  1799  120A  158A  200D   	fcall	i1_USARTWriteString
  7377                           
  7378                           ;main.c: 91: RCSTAbits.CREN = 0;
  7379  179C  1283               	bcf	3,5	;RP0=0, select bank0
  7380  179D  1303               	bcf	3,6	;RP1=0, select bank0
  7381  179E  1218               	bcf	24,4	;volatile
  7382                           
  7383                           ;main.c: 92: USARTData = RCREG;
  7384  179F  081A               	movf	26,w	;volatile
  7385  17A0  00F3               	movwf	??_USARTReceiveChar
  7386  17A1  0873               	movf	??_USARTReceiveChar,w
  7387  17A2  00F4               	movwf	USARTReceiveChar@USARTData
  7388                           
  7389                           ;main.c: 93: RCSTAbits.CREN = 1;
  7390  17A3  1618               	bsf	24,4	;volatile
  7391  17A4                     i1l2435:	
  7392                           
  7393                           ;main.c: 94: PIR1bits.RCIF = 0;
  7394  17A4  128C               	bcf	12,5	;volatile
  7395                           
  7396                           ;main.c: 95: }
  7397                           ;main.c: 97: return (USARTData);
  7398  17A5  0874               	movf	USARTReceiveChar@USARTData,w
  7399  17A6  0008               	return
  7400  17A7                     __end_of_USARTReceiveChar:	
  7401                           
  7402                           	psect	text39
  7403  080D                     __ptext39:	
  7404 ;; *************** function i1_USARTWriteString *****************
  7405 ;; Defined at:
  7406 ;;		line 70 in file "main.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;  str             2    1[COMMON] PTR const unsigned char 
  7409 ;;		 -> STR_7(16), STR_5(23), STR_4(44), sendString@array(40), 
  7410 ;;		 -> STR_1(40), 
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;		None
  7413 ;; Return value:  Size  Location     Type
  7414 ;;		None               void
  7415 ;; Registers used:
  7416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7422 ;;      Params:         2       0       0       0       0
  7423 ;;      Locals:         0       0       0       0       0
  7424 ;;      Temps:          0       0       0       0       0
  7425 ;;      Totals:         2       0       0       0       0
  7426 ;;Total ram usage:        2 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    1
  7429 ;; This function calls:
  7430 ;;		i1_USARTWriteChar
  7431 ;; This function is called by:
  7432 ;;		_USARTReceiveChar
  7433 ;;		_sendString
  7434 ;;		_ISR
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function i1_USARTWriteString
  7440  080D                     i1_USARTWriteString:	
  7441  080D                     i1l2403:	
  7442                           ;main.c: 72: while (*str != '\0') {
  7443                           
  7444                           ;incstack = 0
  7445 ;; hardware stack exceeded
  7446                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7447                           
  7448  080D  0872               	movf	i1USARTWriteString@str+1,w
  7449  080E  1283               	bcf	3,5	;RP0=0, select bank0
  7450  080F  1303               	bcf	3,6	;RP1=0, select bank0
  7451  0810  00FF               	movwf	127
  7452  0811  0871               	movf	i1USARTWriteString@str,w
  7453  0812  0084               	movwf	4
  7454  0813  120A  118A  2700  120A  158A  	fcall	stringtab
  7455  0818  3800               	iorlw	0
  7456  0819  1903               	btfsc	3,2
  7457  081A  0008               	return
  7458                           
  7459                           ;main.c: 74: USARTWriteChar(*str);
  7460  081B  0872               	movf	i1USARTWriteString@str+1,w
  7461  081C  1283               	bcf	3,5	;RP0=0, select bank0
  7462  081D  1303               	bcf	3,6	;RP1=0, select bank0
  7463  081E  00FF               	movwf	127
  7464  081F  0871               	movf	i1USARTWriteString@str,w
  7465  0820  0084               	movwf	4
  7466  0821  120A  118A  2700  120A  158A  	fcall	stringtab
  7467  0826  160A  118A  2712  120A  158A  	fcall	i1_USARTWriteChar
  7468                           
  7469                           ;main.c: 75: str++;
  7470  082B  3001               	movlw	1
  7471  082C  07F1               	addwf	i1USARTWriteString@str,f
  7472  082D  1803               	skipnc
  7473  082E  0AF2               	incf	i1USARTWriteString@str+1,f
  7474  082F  280D               	goto	i1l2403
  7475  0830                     __end_ofi1_USARTWriteString:	
  7476                           
  7477                           	psect	text40
  7478  1712                     __ptext40:	
  7479 ;; *************** function i1_USARTWriteChar *****************
  7480 ;; Defined at:
  7481 ;;		line 63 in file "main.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  USARTData       1    wreg     unsigned char 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  USARTData       1    0[COMMON] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;		None               void
  7488 ;; Registers used:
  7489 ;;		wreg
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7495 ;;      Params:         0       0       0       0       0
  7496 ;;      Locals:         1       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0
  7498 ;;      Totals:         1       0       0       0       0
  7499 ;;Total ram usage:        1 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; This function calls:
  7502 ;;		Nothing
  7503 ;; This function is called by:
  7504 ;;		_ISR
  7505 ;;		i1_USARTWriteString
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function i1_USARTWriteChar
  7511  1712                     i1_USARTWriteChar:	
  7512                           
  7513                           ;incstack = 0
  7514 ;; hardware stack exceeded
  7515                           ; Regs used in i1_USARTWriteChar: [wreg]
  7516                           ;i1USARTWriteChar@USARTData stored from wreg
  7517  1712  00F0               	movwf	i1USARTWriteChar@USARTData
  7518  1713                     i1l68:	
  7519                           ;main.c: 64: while (!PIR1bits.TXIF);
  7520                           
  7521  1713  1283               	bcf	3,5	;RP0=0, select bank0
  7522  1714  1303               	bcf	3,6	;RP1=0, select bank0
  7523  1715  1E0C               	btfss	12,4	;volatile
  7524  1716  2F13               	goto	i1l68
  7525                           
  7526                           ;main.c: 65: TXREG = USARTData;
  7527  1717  0870               	movf	i1USARTWriteChar@USARTData,w
  7528  1718  0099               	movwf	25	;volatile
  7529  1719  0008               	return
  7530  171A                     __end_ofi1_USARTWriteChar:	
  7531  007E                     btemp	set	126	;btemp
  7532  007E                     wtemp	set	126
  7533  007E                     wtemp0	set	126
  7534  0080                     wtemp1	set	128
  7535  0082                     wtemp2	set	130
  7536  0084                     wtemp3	set	132
  7537  0086                     wtemp4	set	134
  7538  0088                     wtemp5	set	136
  7539  007F                     wtemp6	set	127
  7540  007E                     ttemp	set	126
  7541  007E                     ttemp0	set	126
  7542  0081                     ttemp1	set	129
  7543  0084                     ttemp2	set	132
  7544  0087                     ttemp3	set	135
  7545  007F                     ttemp4	set	127
  7546  007E                     ltemp	set	126
  7547  007E                     ltemp0	set	126
  7548  0082                     ltemp1	set	130
  7549  0086                     ltemp2	set	134
  7550  0080                     ltemp3	set	128


Data Sizes:
    Strings     143
    Constant    44
    Data        18
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      79
    BANK1            80     36      61
    BANK3            96     20      20
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK1[2]), ISR@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S671$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), STR_6(CODE[16]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> ISR@aux(BANK1[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@result	PTR unsigned char  size(1) Largest target is 16
		 -> ISR@aux(BANK1[16]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sendString@envio	PTR unsigned char  size(1) Largest target is 40
		 -> sendString@array(BANK0[40]), 

    sendString@send	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 44
		 -> STR_7(CODE[16]), STR_5(CODE[23]), STR_4(CODE[44]), sendString@array(BANK0[40]), 
		 -> STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod
    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _sendString->i1_USARTWriteString
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    ___awmod->___awdiv
    _USARTReceiveChar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_lcd_escreve_string
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTWriteString->_USARTWriteChar
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4822
                                             17 BANK3      3     3      0
                            _ADCRead
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    4683
                                             14 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                   _USARTWriteString
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    2385
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    2075
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1    1180
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0    1124
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTWriteString                                     2     0      2     341
                                              1 BANK3      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      31
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     833
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     833
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0     124
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2     139
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 50    50      0   23744
                                             50 BANK0      8     8      0
                                              0 BANK1     36    36      0
                   _USARTReceiveChar
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                         _sendString
                   i1_USARTWriteChar
                 i1_USARTWriteString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _sendString                                          45    45      0     526
                                              3 COMMON     1     1      0
                                              0 BANK0     44    44      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              7     3      4     680
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     684
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     195
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteString                                   2     0      2     171
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTWriteString
       _USARTWriteChar
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _sendString
     i1_USARTWriteString
       i1_USARTWriteChar
   i1_USARTWriteChar
   i1_USARTWriteString
     i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     14      14       9       20.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      3D       7       76.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      AE      12        0.0%
ABS                  0      0      AE       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Nov 04 00:31:12 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l68 1733  
                           l88 06FC                   ___awdiv@sign 0076                             fsr 0004  
          ___wmul@multiplicand 0072                   ___ftadd@exp1 0026                   ___ftadd@exp2 0025  
                 ___ftadd@sign 0024                            l123 089C                            l124 089A  
                          l160 07E4                            l159 07E1              i1lcd_envia_byte@n 0072  
                 __CFG_CPD$OFF 0000                            _ISR 0041                            fsr0 0004  
              __end_of_ADCInit 1772                __end_of_ADCRead 06FF                            indf 0000  
                 ___awmod@sign 0021                   __CFG_FOSC$HS 0000                     i1_lcd_putc 0990  
                  lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195                   __CFG_LVP$OFF 0000  
                         ?_ISR 0070                   ___ftdiv@cntr 003A                           ISR@i 00BA  
                 ___ftdiv@sign 003F                           l3037 087B                           l2901 17CF  
                         l2903 17D0                           l2921 0A39                           l2913 0A0F  
                         l2933 08F5                           l2917 0A23                           l2925 0A44  
                         l2919 0A2E                           l2943 0926                           l2963 0CF7  
                         l2955 0CDC                           STR_1 0768                           STR_2 07C2  
                         STR_3 07C9                           STR_4 073C                           STR_5 0790  
                         STR_6 07A7                           STR_7 07A7                           STR_8 07B7  
                         u4207 09DB                           u4127 088E                           u4217 09F0  
                         u4137 0DA8                           u4227 0A05                           u4147 0DBB  
                         u4237 07D5                           u4157 0DCB                           u4247 0B9A  
                         u4167 0DF5                           u4257 06F6                           u4177 0A1D  
                         u4187 0CD0                           u4197 0CE8                           u3795 07ED  
                         i1l68 1713                           _OERR 00C1                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 173E                           _main 0876                           _ftoa 0F46  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E                   ___ftmul@cntr 002E  
                 ___ftmul@sign 002F                          ??_ISR 0052               __end_of_LCDClear 0A0B  
                 ___fttol@exp1 003D                   ___fttol@lval 0039     __end_of_lcd_escreve_string 0957  
                        ?_main 0070                          ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A  
              __end_of___awdiv 0BFB                __end_of___ftadd 05FF                  __CFG_WDTE$OFF 0000  
              __end_of___awmod 0AEF      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 0F46  
              __end_of___ftneg 1722                __end_of___lldiv 0CB6                __end_of___ftmul 06D2  
              ___awdiv@divisor 0070                __end_of___llmod 0AA0                __end_of___ftsub 17C3  
              __end_of___fttol 0E8E                          i1l115 02AF                          i1l160 08DD  
                        i1l242 03A7                          i1l239 0389                          i1l159 08DA  
                        i1l512 0D6B                          i1l345 083A                          i1l506 0D52  
                        i1l535 05A0                ___awdiv@counter 0075                          _RCREG 001A  
                        _SPBRG 0099            i1lcd_envia_nibble@n 0071                          _TRISA 0085  
                        _TXREG 0019                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
         i1_lcd_escreve_string 0853                  ___awtoft@sign 007D                __end_of_dpowers 0738  
              __end_of_isdigit 1730                  ___ftpack@sign 0074                          ftoa@f 0044  
                        ftoa@l 004D                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
              ?_USARTWriteChar 0070                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __end_of_sprintf 04F8  
             i1_lcd_envia_byte 08CA                __initialization 0015                   i1_lcd_gotoxy 1772  
                 __end_of_main 089F                   __end_of_ftoa 1000                    i1lcd_putc@c 007B  
                    ??_ADCInit 0190                      ??_ADCRead 0192      __size_of_lcd_envia_nibble 0059  
                       ??_main 01A1                         ??_ftoa 0048                  ___fttol@sign1 0038  
           i1_USARTWriteString 080D                         ISR@buf 00B0                         ISR@aux 00A0  
                       ISR@per 00C3                         ISR@pre 00B5        USARTWriteChar@USARTData 0190  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 0190  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             ___awdiv@dividend 0072               __end_of___awtoft 1800               __end_of___ftpack 0D84  
          ?i1_USARTWriteString 0071               __end_of___lltoft 08CA                         i1l2001 0566  
                       i1l2003 0572                         i1l2013 0590                         i1l2005 0577  
                       i1l2023 05C4                         i1l2015 059C                         i1l2007 057B  
                       i1l2033 05E7                         i1l2201 03B9                         i1l2019 05B2  
                       i1l2043 0C68                         i1l2211 03DB                         i1l2053 0CA0  
                       i1l2045 0C78                         i1l2303 066C                         i1l2231 044F  
                       i1l2223 041D                         i1l2215 03E1                         i1l2057 0CAD  
                       i1l2073 0A8A                         i1l2403 080D                         i1l2315 0694  
                       i1l2307 067C                         i1l2067 0A5C                         i1l2251 04E4  
                       i1l2235 0470                         i1l2227 0435                         i1l2163 02E3  
                       i1l2091 177D                         i1l2411 09A4                         u200_25 0D5A  
                       i1l2069 0A6C                         i1l2077 0A97                         i1l2245 048A  
                       i1l2237 0474                         i1l2253 02C3                         i1l2413 09AD  
                       i1l2263 0C22                         i1l2319 06A4                         i1l2191 038B  
                       i1l2255 04F3                         i1l2415 09B6                         i1l2407 0992  
                       i1l2169 02F8                         i1l2177 0336                         i1l2089 177C  
                       i1l2435 17A4                         i1l2427 1795                         i1l2611 0AD5  
                       i1l2267 0C49                         i1l2291 062D                         i1l2195 0390  
                       i1l2187 0348                         i1l2419 09BF                         i1l2605 0AB9  
                       i1l1901 0D57                         i1l2285 0617                         i1l2349 0E1A  
                       i1l2189 0384                         i1l2461 0B12                         i1l2607 0AC7  
                       i1l2615 0AE0                         i1l1903 0D61                         i1l2631 17E9  
                       i1l2383 0E85                         i1l2375 0E69                         i1l2367 0E4C  
                       i1l2391 08A3                         i1l2455 0B04                         i1l2641 0EA6  
                       i1l2377 0E74                         i1l2369 0E5C                         i1l2393 08B5  
                       i1l2473 0B39                         i1l2465 0B20                         i1l2555 0BB5  
                       i1l2619 0AE8                         i1l2379 0E77                         i1l2467 0AF4  
                       i1l2581 0BF4                         i1l2573 0BE1                         i1l2565 0BBD  
                       i1l2549 0BAA                         i1l2661 0F01                         i1l2469 0B27  
                       i1l2733 023D                         i1l2567 0BCB                         i1l2647 0EBC  
                       i1l2487 0F7F                         i1l2743 024E                         i1l2577 0BEC  
                       i1l2593 0AAC                         i1l2745 026E                         i1l2753 0291  
                       i1l1891 0D2B                         i1l1955 0832                         i1l2683 0853  
                       i1l2597 0AB3                         u203_25 0D72                         i1l1893 0D37  
                       i1l2669 0F20                         i1l1973 0521                         u211_25 083B  
                       i1l1949 172E                         i1l1895 0D3C                         i1l1887 0D24  
                       i1l1983 0537                         i1l1977 0528                         i1l1995 0551  
                       u300_25 0E21                         u212_25 0842                         u206_25 08E4  
                       u223_25 0552                         u303_25 0E4D                         u232_25 0591  
                       u241_25 0C7A                         u226_25 0567                         u306_25 0E6B  
                       u242_25 0C8F                         u323_25 0BC0                         u243_25 0CA1  
                       u325_25 0BCC                         u333_25 0ABC                         u229_25 057C  
                       u309_25 08A8                         u350_20 0057                         u326_25 0BD8  
                       u342_25 0ECE                         u246_25 0A60                         u318_25 0B30  
                       u327_25 0BE2                         u335_25 0ACD                         u343_25 0EE0  
                       u239_25 0C6C                         u271_25 042C                         u351_25 0237  
                       u280_21 0C15                         u280_22 0C16                         u280_23 0C1B  
                       u280_24 0C1C                         u336_25 0AD6                         u344_25 0F02  
                       u248_25 0A7A                         u272_25 0446                         u352_25 0248  
                       u345_25 0F13                         u249_25 0A8B                         u273_25 0460  
                       u282_21 0C3C                         u282_22 0C3D                         u282_23 0C42  
                       u282_24 0C43                         u346_25 0F21                         u290_25 067D  
                       u426_27 0287                         u291_25 0685                         u427_27 099E  
                       u196_25 0D30                         u276_25 0495                         u268_25 03E4  
                       u428_27 08D0                         u277_25 04F0                         u269_25 0413  
                       u429_27 098A                         u198_25 0D4B                         u286_25 0639  
                       u295_25 06A5                         u287_25 064B                         u296_25 06AD  
    i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066               __end_of_lcd_putc 0A52  
                       ___ftge 0BFB                         ___wmul 0830                      ??___awdiv 0074  
                    ??___ftadd 0020                      ??___awmod 007D                      ??___ftdiv 0036  
                    ??___ftneg 0073                      ??___lldiv 0078                      ??___ftmul 0026  
                    ??___llmod 0028                      ??___ftsub 007E                      ??___fttol 0034  
         ??i1_USARTWriteString 0073       __end_of_USARTWriteString 0926               ___awdiv@quotient 0077  
              ___awmod@divisor 0079               ??_lcd_envia_byte 0193                ___awmod@counter 0020  
                       ftoa@cp 0051          ___ftmul@f3_as_product 002B                      ??_isdigit 0070  
                       saved_w 007E          i1lcd_escreve_string@y 007C                      ??_sprintf 0033  
   __end_ofi1_lcd_envia_nibble 0990              ?_USARTReceiveChar 0070                      ?_LCDClear 0070  
      __end_of__initialization 003D             ??_USARTReceiveChar 0073                     ___ftadd@f1 0078  
                   ___ftadd@f2 007B                     ___ftge@ff1 0070                     ___ftge@ff2 0073  
                   ___ftdiv@f1 0033                     ___ftdiv@f2 0030                     ___ftdiv@f3 003B  
                   ___ftneg@f1 0070                     ___awtoft@c 0078                     ___ftmul@f1 0020  
                   ___ftmul@f2 0023                     ___ftsub@f1 002A                     ___ftsub@f2 0027  
                   ___fttol@f1 0030                 __pcstackCOMMON 0070                   __pidataBANK0 0803  
                 __pidataBANK1 173E            __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078  
             i1_USARTWriteChar 1712                  _init_lcd_4bit 0CB6         ??i1_lcd_escreve_string 007E  
            lcd_gotoxy@address 0198                   sprintf@width 003F                     __pbssBANK0 005A  
                   __pbssBANK1 00D4                     ??_LCDClear 0195                      ISR@input2 00C0  
                    ISR@preint 00B8                      ISR@result 00BC                      ISR@status 00B1  
    USARTReceiveChar@USARTData 0074                     __pmaintext 0876                        ?___ftge 0070  
                      ?___wmul 0070                     __pintentry 0004                        _ADCInit 175F  
                      _ADCRead 06D2                      ?___awtoft 0078                      ?___ftpack 0070  
             _lcd_envia_nibble 0B47                      ?___lltoft 0078                 ?_init_lcd_4bit 0070  
                   _lcd_gotoxy 17C3       __end_ofi1_lcd_envia_byte 08F5               ??_USARTWriteChar 0190  
                  sendString@x 004A             _lcd_escreve_string 0926                      ?_lcd_putc 0070  
                   __stringtab 0700            ?_lcd_escreve_string 019C                        _Display 00D4  
                    _ADCResult 00DB                     _inicialize 0D84                __size_of___ftge 005D  
                      ___awdiv 0BA0          i1USARTWriteString@str 0071                        ___ftadd 04F8  
                      ___awmod 0AA0                        ___ftdiv 0E8E                        ___ftneg 171A  
                      ___lldiv 0C58                __size_of___wmul 0023                        ___ftmul 05FF  
                      ___llmod 0A52                        ___ftsub 17A7                        ___fttol 0E00  
                   ??___awtoft 007B                     ??___ftpack 0075                        _flag_an 006D  
                   ??___lltoft 007C                        __ptext1 0D84                        __ptext2 0926  
                      __ptext3 0A0B                        __ptext4 17C3                        __ptext5 0CB6  
                      __ptext6 08F5                        __ptext7 1730                        __ptext8 09CB  
                      __ptext9 07CB           ??_lcd_escreve_string 019E                   __size_of_ISR 027B  
                      _dpowers 0710                        _isdigit 1722               ___awmod@dividend 007B  
              lcd_envia_byte@n 0192                   ??i1_lcd_putc 0079                     _recipiente 005A  
                      _sprintf 02BC                        clrloop0 0806                     ??_lcd_putc 0199  
         end_of_initialization 003D                        ftoa@buf 005C                        ftoa@rem 0049  
      i1lcd_envia_byte@address 0074                     _sendString 0AEF                ___lldiv@divisor 0070  
              ___lldiv@counter 007D                      _RCSTAbits 0018             __end_ofi1_lcd_putc 09CB  
              ??_init_lcd_4bit 0195              ?_USARTWriteString 0191                      _PORTAbits 0005  
                    _PORTBbits 0006                      _PORTCbits 0007                      _PORTDbits 0008  
           ??_USARTWriteString 0193                      _TRISBbits 0086                      _TRISCbits 0087  
                    _TRISDbits 0088                    ?_lcd_gotoxy 0195                _LCD_INIT_STRING 0738  
                  ___ftdiv@exp 003E       __end_ofi1_USARTWriteChar 171A                      _TXSTAbits 0098  
            __size_of_LCDClear 0040                    ?_inicialize 0070                    ___ftmul@exp 002A  
           i1_lcd_envia_nibble 0957      __size_of_USARTReceiveChar 001B                 __end_of___ftge 0C58  
  __size_ofi1_USARTWriteString 0023                 __end_of___wmul 0853            ?i1_lcd_envia_nibble 0070  
          start_initialization 0015                    __end_of_ISR 02BC                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075           ??i1_lcd_envia_nibble 0070  
                  ?_sendString 0070       __end_of_lcd_envia_nibble 0BA0          lcd_envia_byte@address 0194  
              ___llmod@divisor 0020                ___llmod@counter 0029                       ??___ftge 0076  
          __size_of_lcd_gotoxy 001C                       ??___wmul 0074                     init_fetch0 174E  
                  __pdataBANK0 006D                    __pdataBANK1 00C4                       ?_ADCInit 0070  
                     ?_ADCRead 0190        __end_of_LCD_INIT_STRING 073C              __size_of___awtoft 0021  
            __size_of___ftpack 0068              __size_of___lltoft 002B                      ___latbits 0002  
                __pcstackBANK0 0020                  __pcstackBANK1 00A0                  __pcstackBANK3 0190  
          __end_of__stringdata 07CB            __size_of_inicialize 007C  __size_ofi1_lcd_escreve_string 0023  
            ?i1_lcd_envia_byte 0072                       ISR@F1351 00C4        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                     ISR@status2 00B3  
                     ISR@input 00BD                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___awdiv 0070                       ?___ftadd 0078                       ?___awmod 0079  
                     ?___ftdiv 0030                       ?___ftneg 0070                       ?___lldiv 0070  
                     ?___ftmul 0020                       ?___llmod 0020                       ?___ftsub 0027  
                     ?___fttol 0030                      __pstrings 0700            __size_of_sendString 0058  
                     ?_isdigit 0070                 init_lcd_4bit@i 0197                       ?_sprintf 002A  
                     _LCDClear 09CB              interrupt_function 0004                 ___wmul@product 0074  
                    clear_ram0 0805                       _PIE1bits 008C              lcd_envia_nibble@n 0191  
               ??i1_lcd_gotoxy 0076                       _PIR1bits 000C               _USARTReceiveChar 178C  
             __size_of_ADCInit 0013               __size_of_ADCRead 002D                     _ADCON0bits 001F  
                  __stringbase 070F                     _ADCON1bits 009F                    __stringdata 073C  
            ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031                      lcd_putc@c 019B  
                 ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C      __size_of_USARTWriteString 0031  
            ?i1_USARTWriteChar 0070        __size_of_USARTWriteChar 000E                   ??_inicialize 019E  
           ??i1_USARTWriteChar 0070             __end_of_lcd_gotoxy 17DF               __size_of___awdiv 005B  
             __size_of___ftadd 0107               __size_of___awmod 004F               __size_of___ftdiv 00B8  
             __size_of___ftneg 0008               __size_of___lldiv 005E               __size_of___ftmul 00D3  
             __size_of___llmod 004E               __size_of___ftsub 001C               __size_of___fttol 008E  
                     ___awtoft 17DF                       ___ftpack 0D1C             __end_of__stringtab 0710  
                     ___lltoft 089F                    _isdigit$879 0070          __end_of_init_lcd_4bit 0D1C  
             __size_of_isdigit 000E                       __ptext10 0B47                       __ptext11 175F  
                     __ptext20 0F46                       __ptext12 06D2                       __ptext21 02BC  
                     __ptext13 0041                       __ptext30 171A                       __ptext22 1722  
                     __ptext14 0853                       __ptext31 05FF                       __ptext23 0830  
                     __ptext15 0990                       __ptext40 1712                       __ptext32 0BFB  
                     __ptext24 0A52                       __ptext16 1772                       __ptext33 0E8E  
                     __ptext25 0C58                       __ptext17 08CA                       __ptext34 17DF  
                     __ptext26 089F                       __ptext18 0957                       __ptext35 0D1C  
                     __ptext27 0E00                       __ptext19 0AEF                       __ptext36 0AA0  
                     __ptext28 17A7                       __ptext37 0BA0                       __ptext29 04F8  
                     __ptext38 178C                       __ptext39 080D                 _lcd_envia_byte 07CB  
           __end_of_inicialize 0E00                       _lcd_putc 0A0B               __size_of_sprintf 023C  
                 ??_sendString 0073                  __size_of_main 0029                  __size_of_ftoa 00BA  
            ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 0190     __end_ofi1_USARTWriteString 0830  
           __end_of_sendString 0B47                     _INTCONbits 000B         __end_of_lcd_envia_byte 0800  
         __end_ofi1_lcd_gotoxy 178C                       init_ram0 1752                       isdigit@c 0071  
                     intlevel1 0000                      sprintf@ap 0039                      sprintf@sp 003E  
  __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074                      stringcode 070A  
              sendString@array 0020                sendString@envio 0048   __end_ofi1_lcd_escreve_string 0876  
    __size_ofi1_lcd_envia_byte 002B            USARTWriteString@str 0191                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                ?_lcd_envia_byte 0192  
                     stringdir 070A                       stringtab 0700                 sendString@send 0049  
     __end_of_USARTReceiveChar 17A7               _USARTWriteString 08F5                 _USARTWriteChar 1730  
