

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 03 22:06:15 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  0088                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010D                     	;# 
   175  010E                     	;# 
   176  010F                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179                           
   180                           	psect	idataBANK0
   181  177C                     __pidataBANK0:	
   182                           
   183                           ;initializer for _flag_an
   184  177C  34FF               	retlw	255
   185  177D  34FF               	retlw	255
   186                           
   187                           	psect	idataBANK1
   188  17B2                     __pidataBANK1:	
   189                           
   190                           ;initializer for ISR@F1345
   191  17B2  3420               	retlw	32
   192  17B3  3420               	retlw	32
   193  17B4  3420               	retlw	32
   194  17B5  3420               	retlw	32
   195  17B6  3420               	retlw	32
   196  17B7  3420               	retlw	32
   197  17B8  3420               	retlw	32
   198  17B9  3420               	retlw	32
   199  17BA  3420               	retlw	32
   200  17BB  3420               	retlw	32
   201  17BC  3420               	retlw	32
   202  17BD  3420               	retlw	32
   203  17BE  3420               	retlw	32
   204  17BF  3420               	retlw	32
   205  17C0  3420               	retlw	32
   206  17C1  3420               	retlw	32
   207                           
   208                           	psect	strings
   209  0700                     __pstrings:	
   210  0700                     stringtab:	
   211  0700                     __stringtab:	
   212                           
   213                           ;	String table - string pointers are 1 byte each
   214  0700  1BFF               	btfsc	btemp+1,7
   215  0701  2F0A               	ljmp	stringcode
   216  0702  1383               	bcf	3,7
   217  0703  187F               	btfsc	btemp+1,0
   218  0704  1783               	bsf	3,7
   219  0705  0800               	movf	0,w
   220  0706  0A84               	incf	4,f
   221  0707  1903               	skipnz
   222  0708  0AFF               	incf	btemp+1,f
   223  0709  0008               	return
   224  070A                     stringcode:	
   225  070A                     stringdir:	
   226  070A  3007               	movlw	high stringdir
   227  070B  008A               	movwf	10
   228  070C  0804               	movf	4,w
   229  070D  0A84               	incf	4,f
   230  070E  0782               	addwf	2,f
   231  070F                     __stringbase:	
   232  070F  3400               	retlw	0
   233  0710                     __end_of__stringtab:	
   234  0710                     _dpowers:	
   235  0710  3401               	retlw	1
   236  0711  3400               	retlw	0
   237  0712  3400               	retlw	0
   238  0713  3400               	retlw	0
   239  0714  340A               	retlw	10
   240  0715  3400               	retlw	0
   241  0716  3400               	retlw	0
   242  0717  3400               	retlw	0
   243  0718  3464               	retlw	100
   244  0719  3400               	retlw	0
   245  071A  3400               	retlw	0
   246  071B  3400               	retlw	0
   247  071C  34E8               	retlw	232
   248  071D  3403               	retlw	3
   249  071E  3400               	retlw	0
   250  071F  3400               	retlw	0
   251  0720  3410               	retlw	16
   252  0721  3427               	retlw	39
   253  0722  3400               	retlw	0
   254  0723  3400               	retlw	0
   255  0724  34A0               	retlw	160
   256  0725  3486               	retlw	134
   257  0726  3401               	retlw	1
   258  0727  3400               	retlw	0
   259  0728  3440               	retlw	64
   260  0729  3442               	retlw	66
   261  072A  340F               	retlw	15
   262  072B  3400               	retlw	0
   263  072C  3480               	retlw	128
   264  072D  3496               	retlw	150
   265  072E  3498               	retlw	152
   266  072F  3400               	retlw	0
   267  0730  3400               	retlw	0
   268  0731  34E1               	retlw	225
   269  0732  34F5               	retlw	245
   270  0733  3405               	retlw	5
   271  0734  3400               	retlw	0
   272  0735  34CA               	retlw	202
   273  0736  349A               	retlw	154
   274  0737  343B               	retlw	59
   275  0738                     __end_of_dpowers:	
   276  0738                     _LCD_INIT_STRING:	
   277  0738  341C               	retlw	28
   278  0739  340C               	retlw	12
   279  073A  3401               	retlw	1
   280  073B  3406               	retlw	6
   281  073C                     __end_of_LCD_INIT_STRING:	
   282  001F                     _ADCON0bits	set	31
   283  001E                     _ADRESH	set	30
   284  000B                     _INTCONbits	set	11
   285  000C                     _PIR1bits	set	12
   286  0005                     _PORTAbits	set	5
   287  0006                     _PORTBbits	set	6
   288  0007                     _PORTCbits	set	7
   289  0008                     _PORTDbits	set	8
   290  001A                     _RCREG	set	26
   291  0018                     _RCSTAbits	set	24
   292  0019                     _TXREG	set	25
   293  00C1                     _OERR	set	193
   294  009F                     _ADCON1bits	set	159
   295  009E                     _ADRESL	set	158
   296  008C                     _PIE1bits	set	140
   297  0099                     _SPBRG	set	153
   298  0085                     _TRISA	set	133
   299  0086                     _TRISBbits	set	134
   300  0087                     _TRISCbits	set	135
   301  0088                     _TRISDbits	set	136
   302  0098                     _TXSTAbits	set	152
   303  073C                     __stringdata:	
   304  073C                     STR_4:	
   305  073C  340A               	retlw	10
   306  073D  340D               	retlw	13
   307  073E  3420               	retlw	32	;' '
   308  073F  3445               	retlw	69	;'E'
   309  0740  346E               	retlw	110	;'n'
   310  0741  3474               	retlw	116	;'t'
   311  0742  3472               	retlw	114	;'r'
   312  0743  346F               	retlw	111	;'o'
   313  0744  3475               	retlw	117	;'u'
   314  0745  3420               	retlw	32	;' '
   315  0746  346E               	retlw	110	;'n'
   316  0747  3461               	retlw	97	;'a'
   317  0748  3420               	retlw	32	;' '
   318  0749  3466               	retlw	102	;'f'
   319  074A  3475               	retlw	117	;'u'
   320  074B  346E               	retlw	110	;'n'
   321  074C  3463               	retlw	99	;'c'
   322  074D  3461               	retlw	97	;'a'
   323  074E  346F               	retlw	111	;'o'
   324  074F  3420               	retlw	32	;' '
   325  0750  3464               	retlw	100	;'d'
   326  0751  3465               	retlw	101	;'e'
   327  0752  3420               	retlw	32	;' '
   328  0753  3449               	retlw	73	;'I'
   329  0754  346E               	retlw	110	;'n'
   330  0755  3474               	retlw	116	;'t'
   331  0756  3465               	retlw	101	;'e'
   332  0757  3472               	retlw	114	;'r'
   333  0758  3472               	retlw	114	;'r'
   334  0759  3475               	retlw	117	;'u'
   335  075A  3470               	retlw	112	;'p'
   336  075B  3463               	retlw	99	;'c'
   337  075C  3461               	retlw	97	;'a'
   338  075D  346F               	retlw	111	;'o'
   339  075E  3420               	retlw	32	;' '
   340  075F  3464               	retlw	100	;'d'
   341  0760  3461               	retlw	97	;'a'
   342  0761  3420               	retlw	32	;' '
   343  0762  3455               	retlw	85	;'U'
   344  0763  3453               	retlw	83	;'S'
   345  0764  3441               	retlw	65	;'A'
   346  0765  3452               	retlw	82	;'R'
   347  0766  3454               	retlw	84	;'T'
   348  0767  3400               	retlw	0
   349  0768                     STR_1:	
   350  0768  340A               	retlw	10
   351  0769  340D               	retlw	13
   352  076A  3420               	retlw	32	;' '
   353  076B  342D               	retlw	45	;'-'
   354  076C  342D               	retlw	45	;'-'
   355  076D  342D               	retlw	45	;'-'
   356  076E  342D               	retlw	45	;'-'
   357  076F  342D               	retlw	45	;'-'
   358  0770  342D               	retlw	45	;'-'
   359  0771  342D               	retlw	45	;'-'
   360  0772  3420               	retlw	32	;' '
   361  0773  3445               	retlw	69	;'E'
   362  0774  3453               	retlw	83	;'S'
   363  0775  3454               	retlw	84	;'T'
   364  0776  344F               	retlw	79	;'O'
   365  0777  3455               	retlw	85	;'U'
   366  0778  3452               	retlw	82	;'R'
   367  0779  344F               	retlw	79	;'O'
   368  077A  3420               	retlw	32	;' '
   369  077B  3444               	retlw	68	;'D'
   370  077C  3445               	retlw	69	;'E'
   371  077D  3420               	retlw	32	;' '
   372  077E  3450               	retlw	80	;'P'
   373  077F  3449               	retlw	73	;'I'
   374  0780  344C               	retlw	76	;'L'
   375  0781  3448               	retlw	72	;'H'
   376  0782  3441               	retlw	65	;'A'
   377  0783  3420               	retlw	32	;' '
   378  0784  342D               	retlw	45	;'-'
   379  0785  342D               	retlw	45	;'-'
   380  0786  342D               	retlw	45	;'-'
   381  0787  342D               	retlw	45	;'-'
   382  0788  342D               	retlw	45	;'-'
   383  0789  342D               	retlw	45	;'-'
   384  078A  342D               	retlw	45	;'-'
   385  078B  3420               	retlw	32	;' '
   386  078C  340A               	retlw	10
   387  078D  340D               	retlw	13
   388  078E  3420               	retlw	32	;' '
   389  078F  3400               	retlw	0
   390  0790                     STR_5:	
   391  0790  340A               	retlw	10
   392  0791  340D               	retlw	13
   393  0792  3420               	retlw	32	;' '
   394  0793  3443               	retlw	67	;'C'
   395  0794  3461               	retlw	97	;'a'
   396  0795  3472               	retlw	114	;'r'
   397  0796  3461               	retlw	97	;'a'
   398  0797  3463               	retlw	99	;'c'
   399  0798  3474               	retlw	116	;'t'
   400  0799  3465               	retlw	101	;'e'
   401  079A  3472               	retlw	114	;'r'
   402  079B  3420               	retlw	32	;' '
   403  079C  3444               	retlw	68	;'D'
   404  079D  3469               	retlw	105	;'i'
   405  079E  3467               	retlw	103	;'g'
   406  079F  3469               	retlw	105	;'i'
   407  07A0  3474               	retlw	116	;'t'
   408  07A1  3461               	retlw	97	;'a'
   409  07A2  3464               	retlw	100	;'d'
   410  07A3  346F               	retlw	111	;'o'
   411  07A4  3420               	retlw	32	;' '
   412  07A5  343A               	retlw	58	;':'
   413  07A6  3400               	retlw	0
   414  07A7                     STR_6:	
   415  07A7  340C               	retlw	12
   416  07A8  344C               	retlw	76	;'L'
   417  07A9  346F               	retlw	111	;'o'
   418  07AA  3461               	retlw	97	;'a'
   419  07AB  3464               	retlw	100	;'d'
   420  07AC  3469               	retlw	105	;'i'
   421  07AD  346E               	retlw	110	;'n'
   422  07AE  3467               	retlw	103	;'g'
   423  07AF  3420               	retlw	32	;' '
   424  07B0  3450               	retlw	80	;'P'
   425  07B1  3449               	retlw	73	;'I'
   426  07B2  3443               	retlw	67	;'C'
   427  07B3  342E               	retlw	46	;'.'
   428  07B4  342E               	retlw	46	;'.'
   429  07B5  342E               	retlw	46	;'.'
   430  07B6  3400               	retlw	0
   431  07B7                     STR_8:	
   432  07B7  3425               	retlw	37	;'%'
   433  07B8  346C               	retlw	108	;'l'
   434  07B9  3475               	retlw	117	;'u'
   435  07BA  342E               	retlw	46	;'.'
   436  07BB  3425               	retlw	37	;'%'
   437  07BC  3436               	retlw	54	;'6'
   438  07BD  342E               	retlw	46	;'.'
   439  07BE  3436               	retlw	54	;'6'
   440  07BF  346C               	retlw	108	;'l'
   441  07C0  3475               	retlw	117	;'u'
   442  07C1  3400               	retlw	0
   443  07C2                     STR_2:	
   444  07C2  344E               	retlw	78	;'N'
   445  07C3  3469               	retlw	105	;'i'
   446  07C4  3476               	retlw	118	;'v'
   447  07C5  3465               	retlw	101	;'e'
   448  07C6  346C               	retlw	108	;'l'
   449  07C7  343A               	retlw	58	;':'
   450  07C8  3400               	retlw	0
   451  07C9                     STR_3:	
   452  07C9  3425               	retlw	37	;'%'
   453  07CA  3400               	retlw	0
   454  07CB                     __end_of__stringdata:	
   455                           
   456                           ; #config settings
   457  0000                     
   458                           	psect	cinit
   459  0015                     start_initialization:	
   460  0015                     __initialization:	
   461                           
   462                           ; Clear objects allocated to BANK0
   463  0015  1383               	bcf	3,7	;select IRP bank0
   464  0016  305A               	movlw	low __pbssBANK0
   465  0017  0084               	movwf	4
   466  0018  306B               	movlw	low (__pbssBANK0+17)
   467  0019  160A  118A  278E  120A  118A  	fcall	clear_ram0
   468                           
   469                           ; Clear objects allocated to BANK1
   470  001E  30D4               	movlw	low __pbssBANK1
   471  001F  0084               	movwf	4
   472  0020  30DD               	movlw	low (__pbssBANK1+9)
   473  0021  160A  118A  278E  120A  118A  	fcall	clear_ram0
   474                           
   475                           ; Initialize objects allocated to BANK1
   476  0026  30D4               	movlw	low (__pdataBANK1+16)
   477  0027  00FD               	movwf	btemp+-1
   478  0028  3017               	movlw	high __pidataBANK1
   479  0029  00FE               	movwf	btemp
   480  002A  30B2               	movlw	low __pidataBANK1
   481  002B  00FF               	movwf	btemp+1
   482  002C  30C4               	movlw	low __pdataBANK1
   483  002D  0084               	movwf	4
   484  002E  160A  118A  27C6  120A  118A  	fcall	init_ram0
   485                           
   486                           ; Initialize objects allocated to BANK0
   487  0033  160A  118A  277C  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   488  0038  00EB               	movwf	__pdataBANK0& (0+127)
   489  0039  160A  118A  277D   	fcall	__pidataBANK0+1	;fetch initializer
   490  003C  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   491  003D                     end_of_initialization:	
   492                           ;End of C runtime variable initialization code
   493                           
   494  003D                     __end_of__initialization:	
   495  003D  0183               	clrf	3
   496  003E  120A  158A  2DED   	ljmp	_main	;jump to C main() function
   497                           
   498                           	psect	bssBANK0
   499  005A                     __pbssBANK0:	
   500  005A                     ftoa@buf:	
   501  005A                     	ds	17
   502                           
   503                           	psect	dataBANK0
   504  006B                     __pdataBANK0:	
   505  006B                     _flag_an:	
   506  006B                     	ds	2
   507                           
   508                           	psect	bssBANK1
   509  00D4                     __pbssBANK1:	
   510  00D4                     _Display:	
   511  00D4                     	ds	7
   512  00DB                     _ADCResult:	
   513  00DB                     	ds	2
   514                           
   515                           	psect	dataBANK1
   516  00C4                     __pdataBANK1:	
   517  00C4                     ISR@F1345:	
   518  00C4                     	ds	16
   519                           
   520                           	psect	clrtext
   521  178E                     clear_ram0:	
   522                           ;	Called with FSR containing the base address, and
   523                           ;	W with the last address+1
   524                           
   525  178E  0064               	clrwdt	;clear the watchdog before getting into this loop
   526  178F                     clrloop0:	
   527  178F  0180               	clrf	0	;clear RAM location pointed to by FSR
   528  1790  0A84               	incf	4,f	;increment pointer
   529  1791  0604               	xorwf	4,w	;XOR with final address
   530  1792  1903               	btfsc	3,2	;have we reached the end yet?
   531  1793  3400               	retlw	0	;all done for this memory range, return
   532  1794  0604               	xorwf	4,w	;XOR again to restore value
   533  1795  2F8F               	goto	clrloop0	;do the next byte
   534                           
   535                           	psect	inittext
   536  17C2                     init_fetch0:	
   537                           ;	Called with low address in FSR and high address in W
   538                           
   539  17C2  087E               	movf	126,w
   540  17C3  008A               	movwf	10
   541  17C4  087F               	movf	127,w
   542  17C5  0082               	movwf	2
   543  17C6                     init_ram0:	
   544                           ;Called with:
   545                           ;	high address of idata address in btemp 
   546                           ;	low address of idata address in btemp+1 
   547                           ;	low address of data in FSR
   548                           ;	high address + 1 of data in btemp-1
   549                           
   550  17C6  27C2  160A  118A   	fcall	init_fetch0
   551  17C9  0080               	movwf	0
   552  17CA  0A84               	incf	4,f
   553  17CB  0804               	movf	4,w
   554  17CC  067D               	xorwf	125,w
   555  17CD  1903               	btfsc	3,2
   556  17CE  3400               	retlw	0
   557  17CF  0AFF               	incf	127,f
   558  17D0  1903               	btfsc	3,2
   559  17D1  0AFE               	incf	126,f
   560  17D2  2FC6               	goto	init_ram0
   561                           
   562                           	psect	cstackBANK3
   563  0190                     __pcstackBANK3:	
   564  0190                     ??_lcd_envia_nibble:	
   565  0190                     ??_USARTWriteChar:	
   566                           ; 0 bytes @ 0x0
   567                           
   568  0190                     ??_ADCInit:	
   569                           ; 0 bytes @ 0x0
   570                           
   571  0190                     ?_ADCRead:	
   572                           ; 0 bytes @ 0x0
   573                           
   574  0190                     USARTWriteChar@USARTData:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0190                     ADCRead@ch:	
   578                           ; 1 bytes @ 0x0
   579                           
   580                           
   581                           ; 2 bytes @ 0x0
   582  0190                     	ds	1
   583  0191                     ?_USARTWriteString:	
   584  0191                     lcd_envia_nibble@n:	
   585                           ; 0 bytes @ 0x1
   586                           
   587  0191                     USARTWriteString@str:	
   588                           ; 1 bytes @ 0x1
   589                           
   590                           
   591                           ; 2 bytes @ 0x1
   592  0191                     	ds	1
   593  0192                     ?_lcd_envia_byte:	
   594  0192                     ??_ADCRead:	
   595                           ; 0 bytes @ 0x2
   596                           
   597  0192                     lcd_envia_byte@n:	
   598                           ; 0 bytes @ 0x2
   599                           
   600                           
   601                           ; 1 bytes @ 0x2
   602  0192                     	ds	1
   603  0193                     ??_lcd_envia_byte:	
   604  0193                     ??_USARTWriteString:	
   605                           ; 0 bytes @ 0x3
   606                           
   607                           
   608                           ; 0 bytes @ 0x3
   609  0193                     	ds	1
   610  0194                     lcd_envia_byte@address:	
   611                           
   612                           ; 1 bytes @ 0x4
   613  0194                     	ds	1
   614  0195                     ?_lcd_gotoxy:	
   615  0195                     ??_init_lcd_4bit:	
   616                           ; 0 bytes @ 0x5
   617                           
   618  0195                     ??_LCDClear:	
   619                           ; 0 bytes @ 0x5
   620                           
   621  0195                     lcd_gotoxy@y:	
   622                           ; 0 bytes @ 0x5
   623                           
   624                           
   625                           ; 1 bytes @ 0x5
   626  0195                     	ds	1
   627  0196                     ??_lcd_gotoxy:	
   628                           
   629                           ; 0 bytes @ 0x6
   630  0196                     	ds	1
   631  0197                     init_lcd_4bit@i:	
   632  0197                     lcd_gotoxy@x:	
   633                           ; 1 bytes @ 0x7
   634                           
   635                           
   636                           ; 1 bytes @ 0x7
   637  0197                     	ds	1
   638  0198                     lcd_gotoxy@address:	
   639                           
   640                           ; 1 bytes @ 0x8
   641  0198                     	ds	1
   642  0199                     ??_lcd_putc:	
   643                           
   644                           ; 0 bytes @ 0x9
   645  0199                     	ds	2
   646  019B                     lcd_putc@c:	
   647                           
   648                           ; 1 bytes @ 0xB
   649  019B                     	ds	1
   650  019C                     ?_lcd_escreve_string:	
   651  019C                     lcd_escreve_string@y:	
   652                           ; 0 bytes @ 0xC
   653                           
   654                           
   655                           ; 2 bytes @ 0xC
   656  019C                     	ds	2
   657  019E                     ??_lcd_escreve_string:	
   658  019E                     ??_main:	
   659                           ; 0 bytes @ 0xE
   660                           
   661                           
   662                           ; 0 bytes @ 0xE
   663  019E                     	ds	3
   664                           
   665                           	psect	cstackBANK1
   666  00A0                     __pcstackBANK1:	
   667  00A0                     ISR@aux:	
   668                           
   669                           ; 16 bytes @ 0x0
   670  00A0                     	ds	16
   671  00B0                     ISR@buf:	
   672                           
   673                           ; 1 bytes @ 0x10
   674  00B0                     	ds	1
   675  00B1                     ISR@status:	
   676                           
   677                           ; 2 bytes @ 0x11
   678  00B1                     	ds	2
   679  00B3                     ISR@status2:	
   680                           
   681                           ; 2 bytes @ 0x13
   682  00B3                     	ds	2
   683  00B5                     ISR@pre:	
   684                           
   685                           ; 3 bytes @ 0x15
   686  00B5                     	ds	3
   687  00B8                     ISR@preint:	
   688                           
   689                           ; 2 bytes @ 0x18
   690  00B8                     	ds	2
   691  00BA                     ISR@i:	
   692                           
   693                           ; 2 bytes @ 0x1A
   694  00BA                     	ds	2
   695  00BC                     ISR@result:	
   696                           
   697                           ; 1 bytes @ 0x1C
   698  00BC                     	ds	1
   699  00BD                     ISR@input:	
   700                           
   701                           ; 3 bytes @ 0x1D
   702  00BD                     	ds	3
   703  00C0                     ISR@input2:	
   704                           
   705                           ; 3 bytes @ 0x20
   706  00C0                     	ds	3
   707  00C3                     ISR@per:	
   708                           
   709                           ; 1 bytes @ 0x23
   710  00C3                     	ds	1
   711                           
   712                           	psect	cstackCOMMON
   713  0070                     __pcstackCOMMON:	
   714  0070                     ?_init_lcd_4bit:	
   715  0070                     ?_LCDClear:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0070                     ?_lcd_envia_nibble:	
   719                           ; 0 bytes @ 0x0
   720                           
   721  0070                     ?_isdigit:	
   722                           ; 0 bytes @ 0x0
   723                           
   724  0070                     ??_isdigit:	
   725                           ; 1 bit 
   726                           
   727  0070                     ?_USARTWriteChar:	
   728                           ; 0 bytes @ 0x0
   729                           
   730  0070                     ?_ADCInit:	
   731                           ; 0 bytes @ 0x0
   732                           
   733  0070                     ?_ISR:	
   734                           ; 0 bytes @ 0x0
   735                           
   736  0070                     ?_main:	
   737                           ; 0 bytes @ 0x0
   738                           
   739  0070                     ?_lcd_putc:	
   740                           ; 0 bytes @ 0x0
   741                           
   742  0070                     ?___ftge:	
   743                           ; 0 bytes @ 0x0
   744                           
   745  0070                     ?i1_USARTWriteChar:	
   746                           ; 1 bit 
   747                           
   748  0070                     ??i1_USARTWriteChar:	
   749                           ; 0 bytes @ 0x0
   750                           
   751  0070                     ?i1_lcd_envia_nibble:	
   752                           ; 0 bytes @ 0x0
   753                           
   754  0070                     ??i1_lcd_envia_nibble:	
   755                           ; 0 bytes @ 0x0
   756                           
   757  0070                     ?i1_lcd_putc:	
   758                           ; 0 bytes @ 0x0
   759                           
   760  0070                     ?_USARTReceiveChar:	
   761                           ; 0 bytes @ 0x0
   762                           
   763  0070                     ?___wmul:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0070                     ?___awdiv:	
   767                           ; 2 bytes @ 0x0
   768                           
   769  0070                     ?___ftpack:	
   770                           ; 2 bytes @ 0x0
   771                           
   772  0070                     ?___ftneg:	
   773                           ; 3 bytes @ 0x0
   774                           
   775  0070                     ?___lldiv:	
   776                           ; 3 bytes @ 0x0
   777                           
   778  0070                     _isdigit$870:	
   779                           ; 4 bytes @ 0x0
   780                           
   781  0070                     i1USARTWriteChar@USARTData:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ___wmul@multiplier:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ___awdiv@divisor:	
   788                           ; 2 bytes @ 0x0
   789                           
   790  0070                     ___ftpack@arg:	
   791                           ; 2 bytes @ 0x0
   792                           
   793  0070                     ___ftge@ff1:	
   794                           ; 3 bytes @ 0x0
   795                           
   796  0070                     ___ftneg@f1:	
   797                           ; 3 bytes @ 0x0
   798                           
   799  0070                     ___lldiv@divisor:	
   800                           ; 3 bytes @ 0x0
   801                           
   802                           
   803                           ; 4 bytes @ 0x0
   804  0070                     	ds	1
   805  0071                     ?i1_USARTWriteString:	
   806  0071                     isdigit@c:	
   807                           ; 0 bytes @ 0x1
   808                           
   809  0071                     i1lcd_envia_nibble@n:	
   810                           ; 1 bytes @ 0x1
   811                           
   812  0071                     i1USARTWriteString@str:	
   813                           ; 1 bytes @ 0x1
   814                           
   815                           
   816                           ; 2 bytes @ 0x1
   817  0071                     	ds	1
   818  0072                     ?i1_lcd_envia_byte:	
   819  0072                     i1lcd_envia_byte@n:	
   820                           ; 0 bytes @ 0x2
   821                           
   822  0072                     ___wmul@multiplicand:	
   823                           ; 1 bytes @ 0x2
   824                           
   825  0072                     ___awdiv@dividend:	
   826                           ; 2 bytes @ 0x2
   827                           
   828                           
   829                           ; 2 bytes @ 0x2
   830  0072                     	ds	1
   831  0073                     ??_USARTReceiveChar:	
   832  0073                     ??___ftneg:	
   833                           ; 0 bytes @ 0x3
   834                           
   835  0073                     ??i1_USARTWriteString:	
   836                           ; 0 bytes @ 0x3
   837                           
   838  0073                     ??i1_lcd_envia_byte:	
   839                           ; 0 bytes @ 0x3
   840                           
   841  0073                     ___ftpack@exp:	
   842                           ; 0 bytes @ 0x3
   843                           
   844  0073                     ___ftge@ff2:	
   845                           ; 1 bytes @ 0x3
   846                           
   847                           
   848                           ; 3 bytes @ 0x3
   849  0073                     	ds	1
   850  0074                     ??___wmul:	
   851  0074                     ??___awdiv:	
   852                           ; 0 bytes @ 0x4
   853                           
   854  0074                     USARTReceiveChar@USARTData:	
   855                           ; 0 bytes @ 0x4
   856                           
   857  0074                     ___ftpack@sign:	
   858                           ; 1 bytes @ 0x4
   859                           
   860  0074                     i1lcd_envia_byte@address:	
   861                           ; 1 bytes @ 0x4
   862                           
   863  0074                     ___wmul@product:	
   864                           ; 1 bytes @ 0x4
   865                           
   866  0074                     ___lldiv@dividend:	
   867                           ; 2 bytes @ 0x4
   868                           
   869                           
   870                           ; 4 bytes @ 0x4
   871  0074                     	ds	1
   872  0075                     ??___ftpack:	
   873  0075                     ?i1_lcd_gotoxy:	
   874                           ; 0 bytes @ 0x5
   875                           
   876  0075                     ___awdiv@counter:	
   877                           ; 0 bytes @ 0x5
   878                           
   879  0075                     i1lcd_gotoxy@y:	
   880                           ; 1 bytes @ 0x5
   881                           
   882                           
   883                           ; 1 bytes @ 0x5
   884  0075                     	ds	1
   885  0076                     ??___ftge:	
   886  0076                     ??i1_lcd_gotoxy:	
   887                           ; 0 bytes @ 0x6
   888                           
   889  0076                     ___awdiv@sign:	
   890                           ; 0 bytes @ 0x6
   891                           
   892                           
   893                           ; 1 bytes @ 0x6
   894  0076                     	ds	1
   895  0077                     i1lcd_gotoxy@x:	
   896  0077                     ___awdiv@quotient:	
   897                           ; 1 bytes @ 0x7
   898                           
   899                           
   900                           ; 2 bytes @ 0x7
   901  0077                     	ds	1
   902  0078                     ??___lldiv:	
   903  0078                     ?___awtoft:	
   904                           ; 0 bytes @ 0x8
   905                           
   906  0078                     ?___ftadd:	
   907                           ; 3 bytes @ 0x8
   908                           
   909  0078                     ?___lltoft:	
   910                           ; 3 bytes @ 0x8
   911                           
   912  0078                     i1lcd_gotoxy@address:	
   913                           ; 3 bytes @ 0x8
   914                           
   915  0078                     ___awtoft@c:	
   916                           ; 1 bytes @ 0x8
   917                           
   918  0078                     ___ftadd@f1:	
   919                           ; 2 bytes @ 0x8
   920                           
   921  0078                     ___lltoft@c:	
   922                           ; 3 bytes @ 0x8
   923                           
   924                           
   925                           ; 4 bytes @ 0x8
   926  0078                     	ds	1
   927  0079                     ??i1_lcd_putc:	
   928  0079                     ?___awmod:	
   929                           ; 0 bytes @ 0x9
   930                           
   931  0079                     ___awmod@divisor:	
   932                           ; 2 bytes @ 0x9
   933                           
   934  0079                     ___lldiv@quotient:	
   935                           ; 2 bytes @ 0x9
   936                           
   937                           
   938                           ; 4 bytes @ 0x9
   939  0079                     	ds	2
   940  007B                     ??___awtoft:	
   941  007B                     i1lcd_putc@c:	
   942                           ; 0 bytes @ 0xB
   943                           
   944  007B                     ___awmod@dividend:	
   945                           ; 1 bytes @ 0xB
   946                           
   947  007B                     ___ftadd@f2:	
   948                           ; 2 bytes @ 0xB
   949                           
   950                           
   951                           ; 3 bytes @ 0xB
   952  007B                     	ds	1
   953  007C                     ??___lltoft:	
   954  007C                     ?i1_lcd_escreve_string:	
   955                           ; 0 bytes @ 0xC
   956                           
   957  007C                     i1lcd_escreve_string@y:	
   958                           ; 0 bytes @ 0xC
   959                           
   960                           
   961                           ; 2 bytes @ 0xC
   962  007C                     	ds	1
   963  007D                     ??___awmod:	
   964  007D                     ___awtoft@sign:	
   965                           ; 0 bytes @ 0xD
   966                           
   967  007D                     ___lldiv@counter:	
   968                           ; 1 bytes @ 0xD
   969                           
   970  007D                     ___lltoft@exp:	
   971                           ; 1 bytes @ 0xD
   972                           
   973                           
   974                           ; 1 bytes @ 0xD
   975  007D                     	ds	1
   976  007E                     ??___ftsub:	
   977  007E                     ??i1_lcd_escreve_string:	
   978                           ; 0 bytes @ 0xE
   979                           
   980                           
   981                           	psect	cstackBANK0
   982  0020                     __pcstackBANK0:	
   983                           ; 0 bytes @ 0xE
   984                           
   985  0020                     ??___ftadd:	
   986  0020                     ?___ftmul:	
   987                           ; 0 bytes @ 0x0
   988                           
   989  0020                     ?___llmod:	
   990                           ; 3 bytes @ 0x0
   991                           
   992  0020                     ___awmod@counter:	
   993                           ; 4 bytes @ 0x0
   994                           
   995  0020                     ___ftmul@f1:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0020                     ___llmod@divisor:	
   999                           ; 3 bytes @ 0x0
  1000                           
  1001                           
  1002                           ; 4 bytes @ 0x0
  1003  0020                     	ds	1
  1004  0021                     ___awmod@sign:	
  1005                           
  1006                           ; 1 bytes @ 0x1
  1007  0021                     	ds	2
  1008  0023                     ___ftmul@f2:	
  1009                           
  1010                           ; 3 bytes @ 0x3
  1011  0023                     	ds	1
  1012  0024                     ___ftadd@sign:	
  1013  0024                     ___llmod@dividend:	
  1014                           ; 1 bytes @ 0x4
  1015                           
  1016                           
  1017                           ; 4 bytes @ 0x4
  1018  0024                     	ds	1
  1019  0025                     ___ftadd@exp2:	
  1020                           
  1021                           ; 1 bytes @ 0x5
  1022  0025                     	ds	1
  1023  0026                     ??___ftmul:	
  1024  0026                     ___ftadd@exp1:	
  1025                           ; 0 bytes @ 0x6
  1026                           
  1027                           
  1028                           ; 1 bytes @ 0x6
  1029  0026                     	ds	1
  1030  0027                     ?___ftsub:	
  1031  0027                     ___ftsub@f2:	
  1032                           ; 3 bytes @ 0x7
  1033                           
  1034                           
  1035                           ; 3 bytes @ 0x7
  1036  0027                     	ds	1
  1037  0028                     ??___llmod:	
  1038                           
  1039                           ; 0 bytes @ 0x8
  1040  0028                     	ds	1
  1041  0029                     ___llmod@counter:	
  1042                           
  1043                           ; 1 bytes @ 0x9
  1044  0029                     	ds	1
  1045  002A                     ?_sprintf:	
  1046  002A                     sprintf@f:	
  1047                           ; 2 bytes @ 0xA
  1048                           
  1049  002A                     ___ftmul@exp:	
  1050                           ; 1 bytes @ 0xA
  1051                           
  1052  002A                     ___ftsub@f1:	
  1053                           ; 1 bytes @ 0xA
  1054                           
  1055                           
  1056                           ; 3 bytes @ 0xA
  1057  002A                     	ds	1
  1058  002B                     ___ftmul@f3_as_product:	
  1059                           
  1060                           ; 3 bytes @ 0xB
  1061  002B                     	ds	3
  1062  002E                     ___ftmul@cntr:	
  1063                           
  1064                           ; 1 bytes @ 0xE
  1065  002E                     	ds	1
  1066  002F                     ___ftmul@sign:	
  1067                           
  1068                           ; 1 bytes @ 0xF
  1069  002F                     	ds	1
  1070  0030                     ?___ftdiv:	
  1071  0030                     ?___fttol:	
  1072                           ; 3 bytes @ 0x10
  1073                           
  1074  0030                     ___ftdiv@f2:	
  1075                           ; 4 bytes @ 0x10
  1076                           
  1077  0030                     ___fttol@f1:	
  1078                           ; 3 bytes @ 0x10
  1079                           
  1080                           
  1081                           ; 3 bytes @ 0x10
  1082  0030                     	ds	3
  1083  0033                     ??_sprintf:	
  1084  0033                     ___ftdiv@f1:	
  1085                           ; 0 bytes @ 0x13
  1086                           
  1087                           
  1088                           ; 3 bytes @ 0x13
  1089  0033                     	ds	1
  1090  0034                     ??___fttol:	
  1091                           
  1092                           ; 0 bytes @ 0x14
  1093  0034                     	ds	2
  1094  0036                     ??___ftdiv:	
  1095                           
  1096                           ; 0 bytes @ 0x16
  1097  0036                     	ds	2
  1098  0038                     sprintf@flag:	
  1099  0038                     ___fttol@sign1:	
  1100                           ; 1 bytes @ 0x18
  1101                           
  1102                           
  1103                           ; 1 bytes @ 0x18
  1104  0038                     	ds	1
  1105  0039                     sprintf@ap:	
  1106  0039                     ___fttol@lval:	
  1107                           ; 1 bytes @ 0x19
  1108                           
  1109                           
  1110                           ; 4 bytes @ 0x19
  1111  0039                     	ds	1
  1112  003A                     ___ftdiv@cntr:	
  1113  003A                     sprintf@_val:	
  1114                           ; 1 bytes @ 0x1A
  1115                           
  1116                           
  1117                           ; 4 bytes @ 0x1A
  1118  003A                     	ds	1
  1119  003B                     ___ftdiv@f3:	
  1120                           
  1121                           ; 3 bytes @ 0x1B
  1122  003B                     	ds	2
  1123  003D                     ___fttol@exp1:	
  1124                           
  1125                           ; 1 bytes @ 0x1D
  1126  003D                     	ds	1
  1127  003E                     sprintf@sp:	
  1128  003E                     ___ftdiv@exp:	
  1129                           ; 1 bytes @ 0x1E
  1130                           
  1131                           
  1132                           ; 1 bytes @ 0x1E
  1133  003E                     	ds	1
  1134  003F                     ___ftdiv@sign:	
  1135  003F                     sprintf@width:	
  1136                           ; 1 bytes @ 0x1F
  1137                           
  1138                           
  1139                           ; 2 bytes @ 0x1F
  1140  003F                     	ds	2
  1141  0041                     sprintf@prec:	
  1142                           
  1143                           ; 2 bytes @ 0x21
  1144  0041                     	ds	2
  1145  0043                     sprintf@c:	
  1146                           
  1147                           ; 1 bytes @ 0x23
  1148  0043                     	ds	1
  1149  0044                     ?_ftoa:	
  1150  0044                     ftoa@f:	
  1151                           ; 1 bytes @ 0x24
  1152                           
  1153                           
  1154                           ; 3 bytes @ 0x24
  1155  0044                     	ds	3
  1156  0047                     ftoa@status:	
  1157                           
  1158                           ; 1 bytes @ 0x27
  1159  0047                     	ds	1
  1160  0048                     ??_ftoa:	
  1161                           
  1162                           ; 0 bytes @ 0x28
  1163  0048                     	ds	1
  1164  0049                     ftoa@rem:	
  1165                           
  1166                           ; 4 bytes @ 0x29
  1167  0049                     	ds	4
  1168  004D                     ftoa@l:	
  1169                           
  1170                           ; 4 bytes @ 0x2D
  1171  004D                     	ds	4
  1172  0051                     ftoa@cp:	
  1173                           
  1174                           ; 1 bytes @ 0x31
  1175  0051                     	ds	1
  1176  0052                     ??_ISR:	
  1177                           
  1178                           ; 0 bytes @ 0x32
  1179  0052                     	ds	8
  1180                           
  1181                           	psect	maintext
  1182  0DED                     __pmaintext:	
  1183 ;;
  1184 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1185 ;;
  1186 ;; *************** function _main *****************
  1187 ;; Defined at:
  1188 ;;		line 241 in file "main.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;		None               void
  1195 ;; Registers used:
  1196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 17F/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1202 ;;      Params:         0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0
  1204 ;;      Temps:          0       0       0       3       0
  1205 ;;      Totals:         0       0       0       3       0
  1206 ;;Total ram usage:        3 bytes
  1207 ;; Hardware stack levels required when called:   11
  1208 ;; This function calls:
  1209 ;;		_ADCInit
  1210 ;;		_ADCRead
  1211 ;;		_LCDClear
  1212 ;;		_USARTWriteString
  1213 ;;		_init_lcd_4bit
  1214 ;;		_lcd_escreve_string
  1215 ;; This function is called by:
  1216 ;;		Startup code after reset
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           
  1221                           ;psect for function _main
  1222  0DED                     _main:	
  1223                           
  1224                           ;main.c: 242: TRISA = 0b11111111;
  1225                           
  1226                           ;incstack = 0
  1227 ;; hardware stack exceeded
  1228                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1229  0DED  30FF               	movlw	255
  1230  0DEE  1683               	bsf	3,5	;RP0=1, select bank1
  1231  0DEF  1303               	bcf	3,6	;RP1=0, select bank1
  1232  0DF0  0085               	movwf	5	;volatile
  1233                           
  1234                           ;main.c: 243: PORTAbits.RA0 = 0;
  1235  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0DF3  1005               	bcf	5,0	;volatile
  1238                           
  1239                           ;main.c: 244: TRISDbits.TRISD2 = 0;
  1240  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  1241  0DF5  1303               	bcf	3,6	;RP1=0, select bank1
  1242  0DF6  1108               	bcf	8,2	;volatile
  1243                           
  1244                           ;main.c: 245: PORTDbits.RD2 = 1;
  1245  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  1246  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  1247  0DF9  1508               	bsf	8,2	;volatile
  1248                           
  1249                           ;main.c: 246: TRISDbits.TRISD3 = 0;
  1250  0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  1251  0DFB  1303               	bcf	3,6	;RP1=0, select bank1
  1252  0DFC  1188               	bcf	8,3	;volatile
  1253                           
  1254                           ;main.c: 247: PORTDbits.RD3 = 0;
  1255  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0DFF  1188               	bcf	8,3	;volatile
  1258                           
  1259                           ;main.c: 249: TRISCbits.TRISC0 = 1;
  1260  0E00  1683               	bsf	3,5	;RP0=1, select bank1
  1261  0E01  1303               	bcf	3,6	;RP1=0, select bank1
  1262  0E02  1407               	bsf	7,0	;volatile
  1263                           
  1264                           ;main.c: 250: TRISCbits.TRISC1 = 1;
  1265  0E03  1487               	bsf	7,1	;volatile
  1266                           
  1267                           ;main.c: 251: TRISCbits.TRISC2 = 1;
  1268  0E04  1507               	bsf	7,2	;volatile
  1269                           
  1270                           ;main.c: 252: TRISCbits.TRISC3 = 1;
  1271  0E05  1587               	bsf	7,3	;volatile
  1272                           
  1273                           ;main.c: 253: PORTCbits.RC3 = 0;
  1274  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0E08  1187               	bcf	7,3	;volatile
  1277                           
  1278                           ;main.c: 254: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1279  0E09  3033               	movlw	51
  1280  0E0A  1683               	bsf	3,5	;RP0=1, select bank3
  1281  0E0B  1703               	bsf	3,6	;RP1=1, select bank3
  1282  0E0C  00A0               	movwf	(??_main^(0+384)+2)
  1283  0E0D  30BC               	movlw	188
  1284  0E0E  009F               	movwf	(??_main^(0+384)+1)
  1285  0E0F  3010               	movlw	16
  1286  0E10  009E               	movwf	??_main^(0+384)
  1287  0E11                     u4027:	
  1288  0E11  0B9E               	decfsz	??_main^(0+384),f
  1289  0E12  2E11               	goto	u4027
  1290  0E13  0B9F               	decfsz	(??_main^(0+384)+1),f
  1291  0E14  2E11               	goto	u4027
  1292  0E15  0BA0               	decfsz	(??_main^(0+384)+2),f
  1293  0E16  2E11               	goto	u4027
  1294                           
  1295                           ;main.c: 255: init_lcd_4bit();
  1296  0E17  120A  158A  2491  120A  158A  	fcall	_init_lcd_4bit
  1297                           
  1298                           ;main.c: 256: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1299  0E1C  3033               	movlw	51
  1300  0E1D  1683               	bsf	3,5	;RP0=1, select bank3
  1301  0E1E  1703               	bsf	3,6	;RP1=1, select bank3
  1302  0E1F  00A0               	movwf	(??_main^(0+384)+2)
  1303  0E20  30BC               	movlw	188
  1304  0E21  009F               	movwf	(??_main^(0+384)+1)
  1305  0E22  3010               	movlw	16
  1306  0E23  009E               	movwf	??_main^(0+384)
  1307  0E24                     u4037:	
  1308  0E24  0B9E               	decfsz	??_main^(0+384),f
  1309  0E25  2E24               	goto	u4037
  1310  0E26  0B9F               	decfsz	(??_main^(0+384)+1),f
  1311  0E27  2E24               	goto	u4037
  1312  0E28  0BA0               	decfsz	(??_main^(0+384)+2),f
  1313  0E29  2E24               	goto	u4037
  1314                           
  1315                           ;main.c: 257: INTCONbits.PEIE = 1;
  1316  0E2A  170B               	bsf	11,6	;volatile
  1317                           
  1318                           ;main.c: 258: INTCONbits.GIE = 1;
  1319  0E2B  178B               	bsf	11,7	;volatile
  1320                           
  1321                           ;main.c: 259: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1322  0E2C  301A               	movlw	26
  1323  0E2D  1683               	bsf	3,5	;RP0=1, select bank3
  1324  0E2E  1703               	bsf	3,6	;RP1=1, select bank3
  1325  0E2F  00A0               	movwf	(??_main^(0+384)+2)
  1326  0E30  305E               	movlw	94
  1327  0E31  009F               	movwf	(??_main^(0+384)+1)
  1328  0E32  3086               	movlw	134
  1329  0E33  009E               	movwf	??_main^(0+384)
  1330  0E34                     u4047:	
  1331  0E34  0B9E               	decfsz	??_main^(0+384),f
  1332  0E35  2E34               	goto	u4047
  1333  0E36  0B9F               	decfsz	(??_main^(0+384)+1),f
  1334  0E37  2E34               	goto	u4047
  1335  0E38  0BA0               	decfsz	(??_main^(0+384)+2),f
  1336  0E39  2E34               	goto	u4047
  1337  0E3A  0000               	nop
  1338                           
  1339                           ;main.c: 260: ADCInit();
  1340  0E3B  160A  118A  27D3  120A  158A  	fcall	_ADCInit
  1341                           
  1342                           ;main.c: 261: lcd_escreve_string("\fLoading PIC...");
  1343  0E40  3098               	movlw	low (STR_6-__stringbase)
  1344  0E41  1683               	bsf	3,5	;RP0=1, select bank3
  1345  0E42  1703               	bsf	3,6	;RP1=1, select bank3
  1346  0E43  009C               	movwf	lcd_escreve_string@y^(0+384)
  1347  0E44  3080               	movlw	128
  1348  0E45  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1349  0E46  120A  158A  2159  120A  158A  	fcall	_lcd_escreve_string
  1350                           
  1351                           ;main.c: 262: USARTWriteString("\fLoading PIC...");
  1352  0E4B  3098               	movlw	low (STR_6-__stringbase)
  1353  0E4C  1683               	bsf	3,5	;RP0=1, select bank3
  1354  0E4D  1703               	bsf	3,6	;RP1=1, select bank3
  1355  0E4E  0091               	movwf	USARTWriteString@str^(0+384)
  1356  0E4F  3080               	movlw	128
  1357  0E50  0092               	movwf	(USARTWriteString@str+1)^(0+384)
  1358  0E51  120A  158A  2128  120A  158A  	fcall	_USARTWriteString
  1359                           
  1360                           ;main.c: 263: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1361  0E56  307F               	movlw	127
  1362  0E57  1683               	bsf	3,5	;RP0=1, select bank3
  1363  0E58  1703               	bsf	3,6	;RP1=1, select bank3
  1364  0E59  00A0               	movwf	(??_main^(0+384)+2)
  1365  0E5A  30D4               	movlw	212
  1366  0E5B  009F               	movwf	(??_main^(0+384)+1)
  1367  0E5C  30AE               	movlw	174
  1368  0E5D  009E               	movwf	??_main^(0+384)
  1369  0E5E                     u4057:	
  1370  0E5E  0B9E               	decfsz	??_main^(0+384),f
  1371  0E5F  2E5E               	goto	u4057
  1372  0E60  0B9F               	decfsz	(??_main^(0+384)+1),f
  1373  0E61  2E5E               	goto	u4057
  1374  0E62  0BA0               	decfsz	(??_main^(0+384)+2),f
  1375  0E63  2E5E               	goto	u4057
  1376  0E64  2E65               	nop2
  1377                           
  1378                           ;main.c: 264: LCDClear();
  1379  0E65  120A  158A  21FE  120A  158A  	fcall	_LCDClear
  1380  0E6A                     l2954:	
  1381                           ;main.c: 266: while (1) {
  1382                           
  1383                           
  1384                           ;main.c: 267: ADCRead(0);
  1385  0E6A  3000               	movlw	0
  1386  0E6B  1683               	bsf	3,5	;RP0=1, select bank3
  1387  0E6C  1703               	bsf	3,6	;RP1=1, select bank3
  1388  0E6D  0090               	movwf	ADCRead@ch^(0+384)
  1389  0E6E  3000               	movlw	0
  1390  0E6F  0091               	movwf	(ADCRead@ch^(0+384)+1)
  1391  0E70  120A  158A  2054  120A  158A  	fcall	_ADCRead
  1392                           
  1393                           ;main.c: 268: _delay((unsigned long)((300)*(20000000/4000.0)));
  1394  0E75  3008               	movlw	8
  1395  0E76  1683               	bsf	3,5	;RP0=1, select bank3
  1396  0E77  1703               	bsf	3,6	;RP1=1, select bank3
  1397  0E78  00A0               	movwf	(??_main^(0+384)+2)
  1398  0E79  309D               	movlw	157
  1399  0E7A  009F               	movwf	(??_main^(0+384)+1)
  1400  0E7B  300B               	movlw	11
  1401  0E7C  009E               	movwf	??_main^(0+384)
  1402  0E7D                     u4067:	
  1403  0E7D  0B9E               	decfsz	??_main^(0+384),f
  1404  0E7E  2E7D               	goto	u4067
  1405  0E7F  0B9F               	decfsz	(??_main^(0+384)+1),f
  1406  0E80  2E7D               	goto	u4067
  1407  0E81  0BA0               	decfsz	(??_main^(0+384)+2),f
  1408  0E82  2E7D               	goto	u4067
  1409  0E83  2E84               	nop2
  1410                           
  1411                           ;main.c: 269: if (PORTCbits.RC3 == 1) {
  1412  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0E86  1987               	btfsc	7,3	;volatile
  1415  0E87  2E8B               	goto	l106
  1416  0E88  2E6A               	goto	l2954
  1417  0E89                     l107:	
  1418                           ;main.c: 270: while (PORTCbits.RC3 == 1) {
  1419                           
  1420                           
  1421                           ;main.c: 271: PORTDbits.RD2 = 1;
  1422  0E89  1508               	bsf	8,2	;volatile
  1423                           
  1424                           ;main.c: 272: PORTDbits.RD3 = 0;
  1425  0E8A  1188               	bcf	8,3	;volatile
  1426  0E8B                     l106:	
  1427  0E8B  1D87               	btfss	7,3	;volatile
  1428  0E8C  2E6A               	goto	l2954
  1429  0E8D  2E89               	goto	l107
  1430  0E8E                     __end_of_main:	
  1431                           
  1432                           	psect	text1
  1433  0959                     __ptext1:	
  1434 ;; *************** function _lcd_escreve_string *****************
  1435 ;; Defined at:
  1436 ;;		line 168 in file "lcd_4bit.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1439 ;;		 -> ftoa@buf(17), STR_6(16), STR_3(2), STR_2(7), 
  1440 ;;		 -> ISR@aux(16), 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;		None               void
  1445 ;; Registers used:
  1446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         0       0       0       2       0
  1453 ;;      Locals:         0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0
  1455 ;;      Totals:         0       0       0       2       0
  1456 ;;Total ram usage:        2 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:   10
  1459 ;; This function calls:
  1460 ;;		_lcd_putc
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           
  1467                           ;psect for function _lcd_escreve_string
  1468  0959                     _lcd_escreve_string:	
  1469  0959                     l2868:	
  1470                           ;lcd_4bit.c: 170: while(*y!='\0')
  1471                           
  1472                           ;incstack = 0
  1473 ;; hardware stack exceeded
  1474                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1475                           
  1476  0959  1683               	bsf	3,5	;RP0=1, select bank3
  1477  095A  1703               	bsf	3,6	;RP1=1, select bank3
  1478  095B  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1479  095C  1283               	bcf	3,5	;RP0=0, select bank0
  1480  095D  1303               	bcf	3,6	;RP1=0, select bank0
  1481  095E  00FF               	movwf	127
  1482  095F  1683               	bsf	3,5	;RP0=1, select bank3
  1483  0960  1703               	bsf	3,6	;RP1=1, select bank3
  1484  0961  081C               	movf	lcd_escreve_string@y^(0+384),w
  1485  0962  0084               	movwf	4
  1486  0963  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0964  1303               	bcf	3,6	;RP1=0, select bank0
  1488  0965  120A  118A  2700  120A  158A  	fcall	stringtab
  1489  096A  3800               	iorlw	0
  1490  096B  1903               	btfsc	3,2
  1491  096C  0008               	return
  1492                           
  1493                           ;lcd_4bit.c: 171: {
  1494                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1495  096D  1683               	bsf	3,5	;RP0=1, select bank3
  1496  096E  1703               	bsf	3,6	;RP1=1, select bank3
  1497  096F  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1498  0970  1283               	bcf	3,5	;RP0=0, select bank0
  1499  0971  1303               	bcf	3,6	;RP1=0, select bank0
  1500  0972  00FF               	movwf	127
  1501  0973  1683               	bsf	3,5	;RP0=1, select bank3
  1502  0974  1703               	bsf	3,6	;RP1=1, select bank3
  1503  0975  081C               	movf	lcd_escreve_string@y^(0+384),w
  1504  0976  0084               	movwf	4
  1505  0977  1283               	bcf	3,5	;RP0=0, select bank0
  1506  0978  1303               	bcf	3,6	;RP1=0, select bank0
  1507  0979  120A  118A  2700  120A  158A  	fcall	stringtab
  1508  097E  120A  158A  223E  120A  158A  	fcall	_lcd_putc
  1509                           
  1510                           ;lcd_4bit.c: 173: y++;
  1511  0983  3001               	movlw	1
  1512  0984  1683               	bsf	3,5	;RP0=1, select bank3
  1513  0985  1703               	bsf	3,6	;RP1=1, select bank3
  1514  0986  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1515  0987  1803               	skipnc
  1516  0988  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1517  0989  2959               	goto	l2868
  1518  098A                     __end_of_lcd_escreve_string:	
  1519                           
  1520                           	psect	text2
  1521  0A3E                     __ptext2:	
  1522 ;; *************** function _lcd_putc *****************
  1523 ;; Defined at:
  1524 ;;		line 82 in file "lcd_4bit.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  c               1    wreg     unsigned char 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  c               1   11[BANK3 ] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;		None               void
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1538 ;;      Params:         0       0       0       0       0
  1539 ;;      Locals:         0       0       0       1       0
  1540 ;;      Temps:          0       0       0       2       0
  1541 ;;      Totals:         0       0       0       3       0
  1542 ;;Total ram usage:        3 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    9
  1545 ;; This function calls:
  1546 ;;		_lcd_envia_byte
  1547 ;;		_lcd_gotoxy
  1548 ;; This function is called by:
  1549 ;;		_lcd_escreve_string
  1550 ;;		_lcd_escreve_p
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           
  1555                           ;psect for function _lcd_putc
  1556  0A3E                     _lcd_putc:	
  1557                           
  1558                           ;incstack = 0
  1559 ;; hardware stack exceeded
  1560                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1561                           ;lcd_putc@c stored from wreg
  1562  0A3E  1683               	bsf	3,5	;RP0=1, select bank3
  1563  0A3F  1703               	bsf	3,6	;RP1=1, select bank3
  1564  0A40  009B               	movwf	lcd_putc@c^(0+384)
  1565                           
  1566                           ;lcd_4bit.c: 84: switch(c)
  1567  0A41  2A77               	goto	l2844
  1568  0A42                     l2832:	
  1569                           ;lcd_4bit.c: 85: {
  1570                           ;lcd_4bit.c: 86: case '\f':
  1571                           
  1572                           
  1573                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1574  0A42  0192               	clrf	lcd_envia_byte@n^(0+384)
  1575  0A43  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1576  0A44  3000               	movlw	0
  1577  0A45  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  1578                           
  1579                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1580  0A4A  300D               	movlw	13
  1581  0A4B  1683               	bsf	3,5	;RP0=1, select bank3
  1582  0A4C  1703               	bsf	3,6	;RP1=1, select bank3
  1583  0A4D  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1584  0A4E  30FB               	movlw	251
  1585  0A4F  0099               	movwf	??_lcd_putc^(0+384)
  1586  0A50                     u4077:	
  1587  0A50  0B99               	decfsz	??_lcd_putc^(0+384),f
  1588  0A51  2A50               	goto	u4077
  1589  0A52  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1590  0A53  2A50               	goto	u4077
  1591  0A54  2A55               	nop2
  1592                           
  1593                           ;lcd_4bit.c: 89: break;
  1594  0A55  0008               	return
  1595  0A56                     l2836:	
  1596                           ;lcd_4bit.c: 91: case '\n':
  1597                           
  1598                           
  1599                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1600  0A56  3002               	movlw	2
  1601  0A57  1683               	bsf	3,5	;RP0=1, select bank3
  1602  0A58  1703               	bsf	3,6	;RP1=1, select bank3
  1603  0A59  0099               	movwf	??_lcd_putc^(0+384)
  1604  0A5A  0819               	movf	??_lcd_putc^(0+384),w
  1605  0A5B  0095               	movwf	lcd_gotoxy@y^(0+384)
  1606  0A5C  3001               	movlw	1
  1607  0A5D  120A  158A  2038   	fcall	_lcd_gotoxy
  1608                           
  1609                           ;lcd_4bit.c: 93: break;
  1610  0A60  0008               	return
  1611  0A61                     l2838:	
  1612                           ;lcd_4bit.c: 95: case '\b':
  1613                           
  1614                           
  1615                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1616  0A61  3010               	movlw	16
  1617  0A62  1683               	bsf	3,5	;RP0=1, select bank3
  1618  0A63  1703               	bsf	3,6	;RP1=1, select bank3
  1619  0A64  0099               	movwf	??_lcd_putc^(0+384)
  1620  0A65  0819               	movf	??_lcd_putc^(0+384),w
  1621  0A66  0092               	movwf	lcd_envia_byte@n^(0+384)
  1622  0A67  3000               	movlw	0
  1623  0A68  120A  118A  27CB   	fcall	_lcd_envia_byte
  1624                           
  1625                           ;lcd_4bit.c: 97: break;
  1626  0A6B  0008               	return
  1627  0A6C                     l2840:	
  1628                           ;lcd_4bit.c: 99: default:
  1629                           
  1630                           
  1631                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1632  0A6C  1683               	bsf	3,5	;RP0=1, select bank3
  1633  0A6D  1703               	bsf	3,6	;RP1=1, select bank3
  1634  0A6E  081B               	movf	lcd_putc@c^(0+384),w
  1635  0A6F  0099               	movwf	??_lcd_putc^(0+384)
  1636  0A70  0819               	movf	??_lcd_putc^(0+384),w
  1637  0A71  0092               	movwf	lcd_envia_byte@n^(0+384)
  1638  0A72  3001               	movlw	1
  1639  0A73  120A  118A  27CB   	fcall	_lcd_envia_byte
  1640                           
  1641                           ;lcd_4bit.c: 102: }
  1642                           
  1643                           ;lcd_4bit.c: 101: break;
  1644  0A76  0008               	return
  1645  0A77                     l2844:	
  1646  0A77  1683               	bsf	3,5	;RP0=1, select bank3
  1647  0A78  1703               	bsf	3,6	;RP1=1, select bank3
  1648  0A79  081B               	movf	lcd_putc@c^(0+384),w
  1649                           
  1650                           ; Switch size 1, requested type "space"
  1651                           ; Number of cases is 3, Range of values is 8 to 12
  1652                           ; switch strategies available:
  1653                           ; Name         Instructions Cycles
  1654                           ; simple_byte           10     6 (average)
  1655                           ; direct_byte           26    11 (fixed)
  1656                           ; jumptable            263     9 (fixed)
  1657                           ;	Chosen strategy is simple_byte
  1658  0A7A  3A08               	xorlw	8	; case 8
  1659  0A7B  1903               	skipnz
  1660  0A7C  2A61               	goto	l2838
  1661  0A7D  3A02               	xorlw	2	; case 10
  1662  0A7E  1903               	skipnz
  1663  0A7F  2A56               	goto	l2836
  1664  0A80  3A06               	xorlw	6	; case 12
  1665  0A81  1903               	skipnz
  1666  0A82  2A42               	goto	l2832
  1667  0A83  2A6C               	goto	l2840
  1668  0A84  0008               	return
  1669  0A85                     __end_of_lcd_putc:	
  1670                           
  1671                           	psect	text3
  1672  0838                     __ptext3:	
  1673 ;; *************** function _lcd_gotoxy *****************
  1674 ;; Defined at:
  1675 ;;		line 70 in file "lcd_4bit.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  x               1    wreg     unsigned char 
  1678 ;;  y               1    5[BANK3 ] unsigned char 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  x               1    7[BANK3 ] unsigned char 
  1681 ;;  address         1    8[BANK3 ] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;		None               void
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0, pclath, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1691 ;;      Params:         0       0       0       1       0
  1692 ;;      Locals:         0       0       0       2       0
  1693 ;;      Temps:          0       0       0       1       0
  1694 ;;      Totals:         0       0       0       4       0
  1695 ;;Total ram usage:        4 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    8
  1698 ;; This function calls:
  1699 ;;		_lcd_envia_byte
  1700 ;; This function is called by:
  1701 ;;		_lcd_putc
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _lcd_gotoxy
  1707  0838                     _lcd_gotoxy:	
  1708                           
  1709                           ;incstack = 0
  1710 ;; hardware stack exceeded
  1711                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1712                           ;lcd_gotoxy@x stored from wreg
  1713  0838  1683               	bsf	3,5	;RP0=1, select bank3
  1714  0839  1703               	bsf	3,6	;RP1=1, select bank3
  1715  083A  0097               	movwf	lcd_gotoxy@x^(0+384)
  1716                           
  1717                           ;lcd_4bit.c: 72: unsigned char address;
  1718                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1719  083B  0815               	movf	lcd_gotoxy@y^(0+384),w
  1720  083C  3A01               	xorlw	1
  1721  083D  1903               	skipnz
  1722  083E  2844               	goto	l2820
  1723  083F  3040               	movlw	64
  1724  0840  0096               	movwf	??_lcd_gotoxy^(0+384)
  1725  0841  0816               	movf	??_lcd_gotoxy^(0+384),w
  1726  0842  0098               	movwf	lcd_gotoxy@address^(0+384)
  1727  0843  2845               	goto	l2822
  1728  0844                     l2820:	
  1729                           
  1730                           ;lcd_4bit.c: 75: else address=0;
  1731  0844  0198               	clrf	lcd_gotoxy@address^(0+384)
  1732  0845                     l2822:	
  1733                           
  1734                           ;lcd_4bit.c: 77: address += x-1;
  1735  0845  0817               	movf	lcd_gotoxy@x^(0+384),w
  1736  0846  3EFF               	addlw	255
  1737  0847  0096               	movwf	??_lcd_gotoxy^(0+384)
  1738  0848  0816               	movf	??_lcd_gotoxy^(0+384),w
  1739  0849  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1740                           
  1741                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1742  084A  0818               	movf	lcd_gotoxy@address^(0+384),w
  1743  084B  3880               	iorlw	128
  1744  084C  0096               	movwf	??_lcd_gotoxy^(0+384)
  1745  084D  0816               	movf	??_lcd_gotoxy^(0+384),w
  1746  084E  0092               	movwf	lcd_envia_byte@n^(0+384)
  1747  084F  3000               	movlw	0
  1748  0850  120A  118A  27CB   	fcall	_lcd_envia_byte
  1749  0853  0008               	return
  1750  0854                     __end_of_lcd_gotoxy:	
  1751                           
  1752                           	psect	text4
  1753  0C91                     __ptext4:	
  1754 ;; *************** function _init_lcd_4bit *****************
  1755 ;; Defined at:
  1756 ;;		line 6 in file "lcd_4bit.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  i               1    7[BANK3 ] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;		None               void
  1763 ;; Registers used:
  1764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         0       0       0       0       0
  1771 ;;      Locals:         0       0       0       1       0
  1772 ;;      Temps:          0       0       0       2       0
  1773 ;;      Totals:         0       0       0       3       0
  1774 ;;Total ram usage:        3 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    8
  1777 ;; This function calls:
  1778 ;;		_lcd_envia_byte
  1779 ;;		_lcd_envia_nibble
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           
  1786                           ;psect for function _init_lcd_4bit
  1787  0C91                     _init_lcd_4bit:	
  1788                           
  1789                           ;lcd_4bit.c: 8: unsigned char i;
  1790                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1791                           
  1792                           ;incstack = 0
  1793 ;; hardware stack exceeded
  1794                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1795  0C91  1683               	bsf	3,5	;RP0=1, select bank1
  1796  0C92  1303               	bcf	3,6	;RP1=0, select bank1
  1797  0C93  1206               	bcf	6,4	;volatile
  1798                           
  1799                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1800  0C94  1286               	bcf	6,5	;volatile
  1801                           
  1802                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1803  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  1804  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  1805  0C97  1206               	bcf	6,4	;volatile
  1806                           
  1807                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1808  0C98  1286               	bcf	6,5	;volatile
  1809                           
  1810                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1811  0C99  1683               	bsf	3,5	;RP0=1, select bank1
  1812  0C9A  1303               	bcf	3,6	;RP1=0, select bank1
  1813  0C9B  1006               	bcf	6,0	;volatile
  1814                           
  1815                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1816  0C9C  1086               	bcf	6,1	;volatile
  1817                           
  1818                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1819  0C9D  1106               	bcf	6,2	;volatile
  1820                           
  1821                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1822  0C9E  1186               	bcf	6,3	;volatile
  1823                           
  1824                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1825  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  1826  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  1827  0CA1  1006               	bcf	6,0	;volatile
  1828                           
  1829                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1830  0CA2  1086               	bcf	6,1	;volatile
  1831                           
  1832                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1833  0CA3  1106               	bcf	6,2	;volatile
  1834                           
  1835                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1836  0CA4  1186               	bcf	6,3	;volatile
  1837                           
  1838                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1839  0CA5  3062               	movlw	98
  1840  0CA6  1683               	bsf	3,5	;RP0=1, select bank3
  1841  0CA7  1703               	bsf	3,6	;RP1=1, select bank3
  1842  0CA8  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1843  0CA9  3065               	movlw	101
  1844  0CAA  0095               	movwf	??_init_lcd_4bit^(0+384)
  1845  0CAB                     u4087:	
  1846  0CAB  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1847  0CAC  2CAB               	goto	u4087
  1848  0CAD  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1849  0CAE  2CAB               	goto	u4087
  1850  0CAF  2CB0               	nop2
  1851                           
  1852                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1853  0CB0  1683               	bsf	3,5	;RP0=1, select bank3
  1854  0CB1  1703               	bsf	3,6	;RP1=1, select bank3
  1855  0CB2  0197               	clrf	init_lcd_4bit@i^(0+384)
  1856  0CB3  3003               	movlw	3
  1857  0CB4  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1858  0CB5  1803               	btfsc	3,0
  1859  0CB6  2CD2               	goto	l2888
  1860  0CB7                     l2880:	
  1861                           
  1862                           ;lcd_4bit.c: 26: {
  1863                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1864  0CB7  3003               	movlw	3
  1865  0CB8  120A  158A  2322  120A  158A  	fcall	_lcd_envia_nibble
  1866                           
  1867                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1868  0CBD  3021               	movlw	33
  1869  0CBE  1683               	bsf	3,5	;RP0=1, select bank3
  1870  0CBF  1703               	bsf	3,6	;RP1=1, select bank3
  1871  0CC0  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1872  0CC1  3076               	movlw	118
  1873  0CC2  0095               	movwf	??_init_lcd_4bit^(0+384)
  1874  0CC3                     u4097:	
  1875  0CC3  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1876  0CC4  2CC3               	goto	u4097
  1877  0CC5  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1878  0CC6  2CC3               	goto	u4097
  1879  0CC7  0000               	nop
  1880  0CC8  3001               	movlw	1
  1881  0CC9  1683               	bsf	3,5	;RP0=1, select bank3
  1882  0CCA  1703               	bsf	3,6	;RP1=1, select bank3
  1883  0CCB  0095               	movwf	??_init_lcd_4bit^(0+384)
  1884  0CCC  0815               	movf	??_init_lcd_4bit^(0+384),w
  1885  0CCD  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1886  0CCE  3003               	movlw	3
  1887  0CCF  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1888  0CD0  1C03               	skipc
  1889  0CD1  2CB7               	goto	l2880
  1890  0CD2                     l2888:	
  1891                           
  1892                           ;lcd_4bit.c: 29: }
  1893                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1894  0CD2  3002               	movlw	2
  1895  0CD3  120A  158A  2322  120A  158A  	fcall	_lcd_envia_nibble
  1896                           
  1897                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1898  0CD8  1683               	bsf	3,5	;RP0=1, select bank3
  1899  0CD9  1703               	bsf	3,6	;RP1=1, select bank3
  1900  0CDA  0197               	clrf	init_lcd_4bit@i^(0+384)
  1901  0CDB                     L1:	
  1902  0CDB  3004               	movlw	4
  1903  0CDC  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1904  0CDD  1803               	btfsc	3,0
  1905  0CDE  0008               	return
  1906                           
  1907                           ;lcd_4bit.c: 33: {
  1908                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1909  0CDF  0817               	movf	init_lcd_4bit@i^(0+384),w
  1910  0CE0  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1911  0CE1  0084               	movwf	4
  1912  0CE2  120A  118A  270A  120A  158A  	fcall	stringdir
  1913  0CE7  0095               	movwf	??_init_lcd_4bit^(0+384)
  1914  0CE8  0815               	movf	??_init_lcd_4bit^(0+384),w
  1915  0CE9  0092               	movwf	lcd_envia_byte@n^(0+384)
  1916  0CEA  3000               	movlw	0
  1917  0CEB  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  1918  0CF0  3001               	movlw	1
  1919  0CF1  1683               	bsf	3,5	;RP0=1, select bank3
  1920  0CF2  1703               	bsf	3,6	;RP1=1, select bank3
  1921  0CF3  0095               	movwf	??_init_lcd_4bit^(0+384)
  1922  0CF4  0815               	movf	??_init_lcd_4bit^(0+384),w
  1923  0CF5  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1924  0CF6  2CDB               	goto	L1
  1925  0CF7                     __end_of_init_lcd_4bit:	
  1926                           
  1927                           	psect	text5
  1928  0928                     __ptext5:	
  1929 ;; *************** function _USARTWriteString *****************
  1930 ;; Defined at:
  1931 ;;		line 62 in file "main.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  str             2    1[BANK3 ] PTR const unsigned char 
  1934 ;;		 -> ftoa@buf(17), STR_7(16), STR_5(23), STR_4(44), 
  1935 ;;		 -> STR_1(40), 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;		None               void
  1940 ;; Registers used:
  1941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1947 ;;      Params:         0       0       0       2       0
  1948 ;;      Locals:         0       0       0       0       0
  1949 ;;      Temps:          0       0       0       0       0
  1950 ;;      Totals:         0       0       0       2       0
  1951 ;;Total ram usage:        2 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    7
  1954 ;; This function calls:
  1955 ;;		_USARTWriteChar
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _USARTWriteString
  1963  0928                     _USARTWriteString:	
  1964  0928                     l2852:	
  1965                           ;main.c: 64: while (*str != '\0') {
  1966                           
  1967                           ;incstack = 0
  1968 ;; using string table level
  1969                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1970                           
  1971  0928  1683               	bsf	3,5	;RP0=1, select bank3
  1972  0929  1703               	bsf	3,6	;RP1=1, select bank3
  1973  092A  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  1974  092B  1283               	bcf	3,5	;RP0=0, select bank0
  1975  092C  1303               	bcf	3,6	;RP1=0, select bank0
  1976  092D  00FF               	movwf	127
  1977  092E  1683               	bsf	3,5	;RP0=1, select bank3
  1978  092F  1703               	bsf	3,6	;RP1=1, select bank3
  1979  0930  0811               	movf	USARTWriteString@str^(0+384),w
  1980  0931  0084               	movwf	4
  1981  0932  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0933  1303               	bcf	3,6	;RP1=0, select bank0
  1983  0934  120A  118A  2700  120A  158A  	fcall	stringtab
  1984  0939  3800               	iorlw	0
  1985  093A  1903               	btfsc	3,2
  1986  093B  0008               	return
  1987                           
  1988                           ;main.c: 66: USARTWriteChar(*str);
  1989  093C  1683               	bsf	3,5	;RP0=1, select bank3
  1990  093D  1703               	bsf	3,6	;RP1=1, select bank3
  1991  093E  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  1992  093F  1283               	bcf	3,5	;RP0=0, select bank0
  1993  0940  1303               	bcf	3,6	;RP1=0, select bank0
  1994  0941  00FF               	movwf	127
  1995  0942  1683               	bsf	3,5	;RP0=1, select bank3
  1996  0943  1703               	bsf	3,6	;RP1=1, select bank3
  1997  0944  0811               	movf	USARTWriteString@str^(0+384),w
  1998  0945  0084               	movwf	4
  1999  0946  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0947  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0948  120A  118A  2700  120A  158A  	fcall	stringtab
  2002  094D  160A  118A  27A4  120A  158A  	fcall	_USARTWriteChar
  2003                           
  2004                           ;main.c: 67: str++;
  2005  0952  3001               	movlw	1
  2006  0953  1683               	bsf	3,5	;RP0=1, select bank3
  2007  0954  1703               	bsf	3,6	;RP1=1, select bank3
  2008  0955  0791               	addwf	USARTWriteString@str^(0+384),f
  2009  0956  1803               	skipnc
  2010  0957  0A92               	incf	(USARTWriteString@str+1)^(0+384),f
  2011  0958  2928               	goto	l2852
  2012  0959                     __end_of_USARTWriteString:	
  2013                           
  2014                           	psect	text6
  2015  17A4                     __ptext6:	
  2016 ;; *************** function _USARTWriteChar *****************
  2017 ;; Defined at:
  2018 ;;		line 55 in file "main.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  USARTData       1    wreg     unsigned char 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  USARTData       1    0[BANK3 ] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;		None               void
  2025 ;; Registers used:
  2026 ;;		wreg
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2032 ;;      Params:         0       0       0       0       0
  2033 ;;      Locals:         0       0       0       1       0
  2034 ;;      Temps:          0       0       0       0       0
  2035 ;;      Totals:         0       0       0       1       0
  2036 ;;Total ram usage:        1 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    6
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_USARTWriteString
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           
  2047                           ;psect for function _USARTWriteChar
  2048  17A4                     _USARTWriteChar:	
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _USARTWriteChar: [wreg]
  2052                           ;USARTWriteChar@USARTData stored from wreg
  2053  17A4  1683               	bsf	3,5	;RP0=1, select bank3
  2054  17A5  1703               	bsf	3,6	;RP1=1, select bank3
  2055  17A6  0090               	movwf	USARTWriteChar@USARTData^(0+384)
  2056  17A7                     l66:	
  2057                           ;main.c: 56: while (!PIR1bits.TXIF);
  2058                           
  2059  17A7  1283               	bcf	3,5	;RP0=0, select bank0
  2060  17A8  1303               	bcf	3,6	;RP1=0, select bank0
  2061  17A9  1E0C               	btfss	12,4	;volatile
  2062  17AA  2FA7               	goto	l66
  2063                           
  2064                           ;main.c: 57: TXREG = USARTData;
  2065  17AB  1683               	bsf	3,5	;RP0=1, select bank3
  2066  17AC  1703               	bsf	3,6	;RP1=1, select bank3
  2067  17AD  0810               	movf	USARTWriteChar@USARTData^(0+384),w
  2068  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  2069  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  2070  17B0  0099               	movwf	25	;volatile
  2071  17B1  0008               	return
  2072  17B2                     __end_of_USARTWriteChar:	
  2073                           
  2074                           	psect	text7
  2075  09FE                     __ptext7:	
  2076 ;; *************** function _LCDClear *****************
  2077 ;; Defined at:
  2078 ;;		line 179 in file "lcd_4bit.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;		None
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;		None               void
  2085 ;; Registers used:
  2086 ;;		wreg, status,2, status,0, pclath, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2092 ;;      Params:         0       0       0       0       0
  2093 ;;      Locals:         0       0       0       0       0
  2094 ;;      Temps:          0       0       0       2       0
  2095 ;;      Totals:         0       0       0       2       0
  2096 ;;Total ram usage:        2 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    8
  2099 ;; This function calls:
  2100 ;;		_lcd_envia_byte
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _LCDClear
  2108  09FE                     _LCDClear:	
  2109                           
  2110                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2111                           
  2112                           ;incstack = 0
  2113 ;; hardware stack exceeded
  2114                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2115  09FE  1683               	bsf	3,5	;RP0=1, select bank3
  2116  09FF  1703               	bsf	3,6	;RP1=1, select bank3
  2117  0A00  0192               	clrf	lcd_envia_byte@n^(0+384)
  2118  0A01  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2119  0A02  3000               	movlw	0
  2120  0A03  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  2121                           
  2122                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2123  0A08  3041               	movlw	65
  2124  0A09  1683               	bsf	3,5	;RP0=1, select bank3
  2125  0A0A  1703               	bsf	3,6	;RP1=1, select bank3
  2126  0A0B  0096               	movwf	(??_LCDClear^(0+384)+1)
  2127  0A0C  30EE               	movlw	238
  2128  0A0D  0095               	movwf	??_LCDClear^(0+384)
  2129  0A0E                     u4107:	
  2130  0A0E  0B95               	decfsz	??_LCDClear^(0+384),f
  2131  0A0F  2A0E               	goto	u4107
  2132  0A10  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2133  0A11  2A0E               	goto	u4107
  2134  0A12  0000               	nop
  2135                           
  2136                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2137  0A13  300C               	movlw	12
  2138  0A14  1683               	bsf	3,5	;RP0=1, select bank3
  2139  0A15  1703               	bsf	3,6	;RP1=1, select bank3
  2140  0A16  0095               	movwf	??_LCDClear^(0+384)
  2141  0A17  0815               	movf	??_LCDClear^(0+384),w
  2142  0A18  0092               	movwf	lcd_envia_byte@n^(0+384)
  2143  0A19  3000               	movlw	0
  2144  0A1A  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  2145                           
  2146                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2147  0A1F  30F9               	movlw	249
  2148  0A20  1683               	bsf	3,5	;RP0=1, select bank3
  2149  0A21  1703               	bsf	3,6	;RP1=1, select bank3
  2150  0A22  0095               	movwf	??_LCDClear^(0+384)
  2151  0A23                     u4117:	
  2152  0A23  0000               	nop
  2153  0A24  0B95               	decfsz	??_LCDClear^(0+384),f
  2154  0A25  2A23               	goto	u4117
  2155  0A26  2A27               	nop2	;nop
  2156  0A27  0000               	nop
  2157                           
  2158                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2159  0A28  3006               	movlw	6
  2160  0A29  1683               	bsf	3,5	;RP0=1, select bank3
  2161  0A2A  1703               	bsf	3,6	;RP1=1, select bank3
  2162  0A2B  0095               	movwf	??_LCDClear^(0+384)
  2163  0A2C  0815               	movf	??_LCDClear^(0+384),w
  2164  0A2D  0092               	movwf	lcd_envia_byte@n^(0+384)
  2165  0A2E  3000               	movlw	0
  2166  0A2F  120A  118A  27CB  120A  158A  	fcall	_lcd_envia_byte
  2167                           
  2168                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2169  0A34  30F9               	movlw	249
  2170  0A35  1683               	bsf	3,5	;RP0=1, select bank3
  2171  0A36  1703               	bsf	3,6	;RP1=1, select bank3
  2172  0A37  0095               	movwf	??_LCDClear^(0+384)
  2173  0A38                     u4127:	
  2174  0A38  0000               	nop
  2175  0A39  0B95               	decfsz	??_LCDClear^(0+384),f
  2176  0A3A  2A38               	goto	u4127
  2177  0A3B  2A3C               	nop2	;nop
  2178  0A3C  0000               	nop
  2179  0A3D  0008               	return
  2180  0A3E                     __end_of_LCDClear:	
  2181                           
  2182                           	psect	text8
  2183  07CB                     __ptext8:	
  2184 ;; *************** function _lcd_envia_byte *****************
  2185 ;; Defined at:
  2186 ;;		line 53 in file "lcd_4bit.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  address         1    wreg     unsigned char 
  2189 ;;  n               1    2[BANK3 ] unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  address         1    4[BANK3 ] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;		None               void
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0, pclath, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2201 ;;      Params:         0       0       0       1       0
  2202 ;;      Locals:         0       0       0       1       0
  2203 ;;      Temps:          0       0       0       1       0
  2204 ;;      Totals:         0       0       0       3       0
  2205 ;;Total ram usage:        3 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    7
  2208 ;; This function calls:
  2209 ;;		_lcd_envia_nibble
  2210 ;; This function is called by:
  2211 ;;		_init_lcd_4bit
  2212 ;;		_lcd_gotoxy
  2213 ;;		_lcd_putc
  2214 ;;		_LCDClear
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           
  2219                           ;psect for function _lcd_envia_byte
  2220  07CB                     _lcd_envia_byte:	
  2221                           
  2222                           ;incstack = 0
  2223 ;; hardware stack exceeded
  2224                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2225                           ;lcd_envia_byte@address stored from wreg
  2226  07CB  1683               	bsf	3,5	;RP0=1, select bank3
  2227  07CC  1703               	bsf	3,6	;RP1=1, select bank3
  2228  07CD  0094               	movwf	lcd_envia_byte@address^(0+384)
  2229                           
  2230                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2231  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  2232  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  2233  07D0  1286               	bcf	6,5	;volatile
  2234                           
  2235                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2236  07D1  3063               	movlw	99
  2237  07D2  1683               	bsf	3,5	;RP0=1, select bank3
  2238  07D3  1703               	bsf	3,6	;RP1=1, select bank3
  2239  07D4  0093               	movwf	??_lcd_envia_byte^(0+384)
  2240  07D5                     u4137:	
  2241  07D5  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2242  07D6  2FD5               	goto	u4137
  2243  07D7  2FD8               	nop2	;nop
  2244                           
  2245                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2246  07D8  1683               	bsf	3,5	;RP0=1, select bank3
  2247  07D9  1703               	bsf	3,6	;RP1=1, select bank3
  2248  07DA  0814               	movf	lcd_envia_byte@address^(0+384),w
  2249  07DB  1903               	btfsc	3,2
  2250  07DC  2FE1               	goto	l142
  2251  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  2252  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  2253  07DF  1686               	bsf	6,5	;volatile
  2254  07E0  2FE4               	goto	l143
  2255  07E1                     l142:	
  2256                           
  2257                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2258  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  2259  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  2260  07E3  1286               	bcf	6,5	;volatile
  2261  07E4                     l143:	
  2262                           
  2263                           ;lcd_4bit.c: 61: _delay(1);
  2264  07E4  0000               	nop
  2265                           
  2266                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2267  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  2268  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  2269  07E7  1206               	bcf	6,4	;volatile
  2270                           
  2271                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2272  07E8  1683               	bsf	3,5	;RP0=1, select bank3
  2273  07E9  1703               	bsf	3,6	;RP1=1, select bank3
  2274  07EA  0812               	movf	lcd_envia_byte@n^(0+384),w
  2275  07EB  0093               	movwf	??_lcd_envia_byte^(0+384)
  2276  07EC  3004               	movlw	4
  2277  07ED                     u3695:	
  2278  07ED  1003               	clrc
  2279  07EE  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2280  07EF  3EFF               	addlw	-1
  2281  07F0  1D03               	skipz
  2282  07F1  2FED               	goto	u3695
  2283  07F2  0813               	movf	??_lcd_envia_byte^(0+384),w
  2284  07F3  120A  158A  2322  120A  118A  	fcall	_lcd_envia_nibble
  2285                           
  2286                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2287  07F8  1683               	bsf	3,5	;RP0=1, select bank3
  2288  07F9  1703               	bsf	3,6	;RP1=1, select bank3
  2289  07FA  0812               	movf	lcd_envia_byte@n^(0+384),w
  2290  07FB  390F               	andlw	15
  2291  07FC  120A  158A  2322   	fcall	_lcd_envia_nibble
  2292  07FF  0008               	return
  2293  0800                     __end_of_lcd_envia_byte:	
  2294                           
  2295                           	psect	text9
  2296  0B22                     __ptext9:	
  2297 ;; *************** function _lcd_envia_nibble *****************
  2298 ;; Defined at:
  2299 ;;		line 39 in file "lcd_4bit.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  n               1    wreg     unsigned char 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  n               1    1[BANK3 ] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;		None               void
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2313 ;;      Params:         0       0       0       0       0
  2314 ;;      Locals:         0       0       0       1       0
  2315 ;;      Temps:          0       0       0       1       0
  2316 ;;      Totals:         0       0       0       2       0
  2317 ;;Total ram usage:        2 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    6
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_init_lcd_4bit
  2324 ;;		_lcd_envia_byte
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           
  2329                           ;psect for function _lcd_envia_nibble
  2330  0B22                     _lcd_envia_nibble:	
  2331                           
  2332                           ;incstack = 0
  2333 ;; hardware stack exceeded
  2334                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2335                           ;lcd_envia_nibble@n stored from wreg
  2336  0B22  1683               	bsf	3,5	;RP0=1, select bank3
  2337  0B23  1703               	bsf	3,6	;RP1=1, select bank3
  2338  0B24  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2339                           
  2340                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2341  0B25  3000               	movlw	0
  2342  0B26  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2343  0B27  3001               	movlw	1
  2344  0B28  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2345  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  2346  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  2347  0B2B  0806               	movf	6,w	;volatile
  2348  0B2C  1683               	bsf	3,5	;RP0=1, select bank3
  2349  0B2D  1703               	bsf	3,6	;RP1=1, select bank3
  2350  0B2E  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2351  0B2F  39FE               	andlw	-2
  2352  0B30  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2353  0B31  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0B32  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0B33  0086               	movwf	6	;volatile
  2356                           
  2357                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2358  0B34  3000               	movlw	0
  2359  0B35  1683               	bsf	3,5	;RP0=1, select bank3
  2360  0B36  1703               	bsf	3,6	;RP1=1, select bank3
  2361  0B37  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2362  0B38  3001               	movlw	1
  2363  0B39  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2364  0B3A  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2365  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  2366  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  2367  0B3D  0806               	movf	6,w	;volatile
  2368  0B3E  1683               	bsf	3,5	;RP0=1, select bank3
  2369  0B3F  1703               	bsf	3,6	;RP1=1, select bank3
  2370  0B40  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2371  0B41  39FD               	andlw	-3
  2372  0B42  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2373  0B43  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0B44  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0B45  0086               	movwf	6	;volatile
  2376                           
  2377                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2378  0B46  3000               	movlw	0
  2379  0B47  1683               	bsf	3,5	;RP0=1, select bank3
  2380  0B48  1703               	bsf	3,6	;RP1=1, select bank3
  2381  0B49  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2382  0B4A  3001               	movlw	1
  2383  0B4B  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2384  0B4C  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2385  0B4D  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2386  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  2387  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  2388  0B50  0806               	movf	6,w	;volatile
  2389  0B51  1683               	bsf	3,5	;RP0=1, select bank3
  2390  0B52  1703               	bsf	3,6	;RP1=1, select bank3
  2391  0B53  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2392  0B54  39FB               	andlw	-5
  2393  0B55  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2394  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0B58  0086               	movwf	6	;volatile
  2397                           
  2398                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2399  0B59  3000               	movlw	0
  2400  0B5A  1683               	bsf	3,5	;RP0=1, select bank3
  2401  0B5B  1703               	bsf	3,6	;RP1=1, select bank3
  2402  0B5C  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2403  0B5D  3001               	movlw	1
  2404  0B5E  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2405  0B5F  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2406  0B60  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2407  0B61  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2408  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0B64  0806               	movf	6,w	;volatile
  2411  0B65  1683               	bsf	3,5	;RP0=1, select bank3
  2412  0B66  1703               	bsf	3,6	;RP1=1, select bank3
  2413  0B67  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2414  0B68  39F7               	andlw	-9
  2415  0B69  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2416  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  2417  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  2418  0B6C  0086               	movwf	6	;volatile
  2419                           
  2420                           ;lcd_4bit.c: 46: _delay(1);
  2421  0B6D  0000               	nop
  2422                           
  2423                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2424  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  2425  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  2426  0B70  1606               	bsf	6,4	;volatile
  2427                           
  2428                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2429  0B71  3003               	movlw	3
  2430  0B72  1683               	bsf	3,5	;RP0=1, select bank3
  2431  0B73  1703               	bsf	3,6	;RP1=1, select bank3
  2432  0B74  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2433  0B75                     u4147:	
  2434  0B75  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2435  0B76  2B75               	goto	u4147
  2436                           
  2437                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2438  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  2440  0B79  1206               	bcf	6,4	;volatile
  2441  0B7A  0008               	return
  2442  0B7B                     __end_of_lcd_envia_nibble:	
  2443                           
  2444                           	psect	text10
  2445  0854                     __ptext10:	
  2446 ;; *************** function _ADCRead *****************
  2447 ;; Defined at:
  2448 ;;		line 119 in file "main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  ch              2    0[BANK3 ] int 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;		None               void
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2462 ;;      Params:         0       0       0       2       0
  2463 ;;      Locals:         0       0       0       0       0
  2464 ;;      Temps:          0       0       0       1       0
  2465 ;;      Totals:         0       0       0       3       0
  2466 ;;Total ram usage:        3 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    6
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           
  2477                           ;psect for function _ADCRead
  2478  0854                     _ADCRead:	
  2479                           
  2480                           ;main.c: 123: ADCON0bits.CHS = ch;
  2481                           
  2482                           ;incstack = 0
  2483                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2484  0854  1683               	bsf	3,5	;RP0=1, select bank3
  2485  0855  1703               	bsf	3,6	;RP1=1, select bank3
  2486  0856  0810               	movf	ADCRead@ch^(0+384),w
  2487  0857  0092               	movwf	??_ADCRead^(0+384)
  2488  0858  0D92               	rlf	??_ADCRead^(0+384),f
  2489  0859  0D92               	rlf	??_ADCRead^(0+384),f
  2490  085A  0D92               	rlf	??_ADCRead^(0+384),f
  2491  085B  1283               	bcf	3,5	;RP0=0, select bank0
  2492  085C  1303               	bcf	3,6	;RP1=0, select bank0
  2493  085D  081F               	movf	31,w	;volatile
  2494  085E  1683               	bsf	3,5	;RP0=1, select bank3
  2495  085F  1703               	bsf	3,6	;RP1=1, select bank3
  2496  0860  0612               	xorwf	??_ADCRead^(0+384),w
  2497  0861  39C7               	andlw	-57
  2498  0862  0612               	xorwf	??_ADCRead^(0+384),w
  2499  0863  1283               	bcf	3,5	;RP0=0, select bank0
  2500  0864  1303               	bcf	3,6	;RP1=0, select bank0
  2501  0865  009F               	movwf	31	;volatile
  2502                           
  2503                           ;main.c: 126: _delay((unsigned long)((25)*(20000000/4000000.0)));
  2504  0866  3029               	movlw	41
  2505  0867  1683               	bsf	3,5	;RP0=1, select bank3
  2506  0868  1703               	bsf	3,6	;RP1=1, select bank3
  2507  0869  0092               	movwf	??_ADCRead^(0+384)
  2508  086A                     u4157:	
  2509  086A  0B92               	decfsz	??_ADCRead^(0+384),f
  2510  086B  286A               	goto	u4157
  2511  086C  0000               	nop
  2512                           
  2513                           ;main.c: 127: ADCON0bits.GO = 1;
  2514  086D  1283               	bcf	3,5	;RP0=0, select bank0
  2515  086E  1303               	bcf	3,6	;RP1=0, select bank0
  2516  086F  151F               	bsf	31,2	;volatile
  2517  0870                     l86:	
  2518                           ;main.c: 128: while (ADCON0bits.GO_DONE);
  2519                           
  2520  0870  1D1F               	btfss	31,2	;volatile
  2521  0871  0008               	return
  2522  0872  2870               	goto	l86
  2523  0873                     __end_of_ADCRead:	
  2524                           
  2525                           	psect	text11
  2526  17D3                     __ptext11:	
  2527 ;; *************** function _ADCInit *****************
  2528 ;; Defined at:
  2529 ;;		line 97 in file "main.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;		None               void
  2536 ;; Registers used:
  2537 ;;		None
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2543 ;;      Params:         0       0       0       0       0
  2544 ;;      Locals:         0       0       0       0       0
  2545 ;;      Temps:          0       0       0       0       0
  2546 ;;      Totals:         0       0       0       0       0
  2547 ;;Total ram usage:        0 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    6
  2550 ;; This function calls:
  2551 ;;		Nothing
  2552 ;; This function is called by:
  2553 ;;		_main
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           
  2558                           ;psect for function _ADCInit
  2559  17D3                     _ADCInit:	
  2560                           
  2561                           ;main.c: 99: ADCON1bits.ADFM = 1;
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _ADCInit: []
  2565  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  2566  17D4  1303               	bcf	3,6	;RP1=0, select bank1
  2567  17D5  179F               	bsf	31,7	;volatile
  2568                           
  2569                           ;main.c: 100: ADCON1bits.PCFG3 = 0;
  2570  17D6  119F               	bcf	31,3	;volatile
  2571                           
  2572                           ;main.c: 101: ADCON1bits.PCFG2 = 0;
  2573  17D7  111F               	bcf	31,2	;volatile
  2574                           
  2575                           ;main.c: 102: ADCON1bits.PCFG1 = 0;
  2576  17D8  109F               	bcf	31,1	;volatile
  2577                           
  2578                           ;main.c: 103: ADCON1bits.PCFG0 = 0;
  2579  17D9  101F               	bcf	31,0	;volatile
  2580                           
  2581                           ;main.c: 106: ADCON0bits.ADCS1 = 1;
  2582  17DA  1283               	bcf	3,5	;RP0=0, select bank0
  2583  17DB  1303               	bcf	3,6	;RP1=0, select bank0
  2584  17DC  179F               	bsf	31,7	;volatile
  2585                           
  2586                           ;main.c: 107: ADCON0bits.ADCS0 = 0;
  2587  17DD  131F               	bcf	31,6	;volatile
  2588                           
  2589                           ;main.c: 111: ADCON0bits.ADON = 1;
  2590  17DE  141F               	bsf	31,0	;volatile
  2591                           
  2592                           ;main.c: 114: PIE1bits.ADIE = 1;
  2593  17DF  1683               	bsf	3,5	;RP0=1, select bank1
  2594  17E0  1303               	bcf	3,6	;RP1=0, select bank1
  2595  17E1  170C               	bsf	12,6	;volatile
  2596                           
  2597                           ;main.c: 115: PIR1bits.ADIF = 0;
  2598  17E2  1283               	bcf	3,5	;RP0=0, select bank0
  2599  17E3  1303               	bcf	3,6	;RP1=0, select bank0
  2600  17E4  130C               	bcf	12,6	;volatile
  2601  17E5  0008               	return
  2602  17E6                     __end_of_ADCInit:	
  2603                           
  2604                           	psect	text12
  2605  0041                     __ptext12:	
  2606 ;; *************** function _ISR *****************
  2607 ;; Defined at:
  2608 ;;		line 136 in file "main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  aux            16    0[BANK1 ] unsigned char [16]
  2613 ;;  input2          3   32[BANK1 ] float 
  2614 ;;  input           3   29[BANK1 ] float 
  2615 ;;  pre             3   21[BANK1 ] float 
  2616 ;;  i               2   26[BANK1 ] int 
  2617 ;;  preint          2   24[BANK1 ] int 
  2618 ;;  status2         2   19[BANK1 ] int 
  2619 ;;  status          2   17[BANK1 ] int 
  2620 ;;  status3         2    0        int 
  2621 ;;  qtdc            2    0        PTR unsigned char 
  2622 ;;  teste           2    0        PTR unsigned char 
  2623 ;;  per             1   35[BANK1 ] PTR unsigned char 
  2624 ;;		 -> ftoa@buf(17), 
  2625 ;;  result          1   28[BANK1 ] PTR unsigned char 
  2626 ;;		 -> ISR@aux(16), 
  2627 ;;  buf             1   16[BANK1 ] PTR unsigned char 
  2628 ;;		 -> ftoa@buf(17), 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;		None               void
  2631 ;; Registers used:
  2632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2638 ;;      Params:         0       0       0       0       0
  2639 ;;      Locals:         0       0      36       0       0
  2640 ;;      Temps:          0       8       0       0       0
  2641 ;;      Totals:         0       8      36       0       0
  2642 ;;Total ram usage:       44 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    5
  2645 ;; This function calls:
  2646 ;;		_USARTReceiveChar
  2647 ;;		___awdiv
  2648 ;;		___awmod
  2649 ;;		___awtoft
  2650 ;;		___ftdiv
  2651 ;;		___ftmul
  2652 ;;		___fttol
  2653 ;;		_ftoa
  2654 ;;		i1_USARTWriteChar
  2655 ;;		i1_USARTWriteString
  2656 ;;		i1_lcd_escreve_string
  2657 ;;		i1_lcd_gotoxy
  2658 ;; This function is called by:
  2659 ;;		Interrupt level 1
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           
  2664                           ;psect for function _ISR
  2665  0041                     _ISR:	
  2666                           
  2667                           ;main.c: 140: if (PIR1bits.ADIF) {
  2668  0041  1F0C               	btfss	12,6	;volatile
  2669  0042  2A94               	goto	i1l2632
  2670                           
  2671                           ;main.c: 143: ADCResult = ((ADRESH << 8) + ADRESL);
  2672  0043  081E               	movf	30,w	;volatile
  2673  0044  1683               	bsf	3,5	;RP0=1, select bank1
  2674  0045  1303               	bcf	3,6	;RP1=0, select bank1
  2675  0046  01DC               	clrf	(_ADCResult+1)^(0+128)
  2676  0047  07DC               	addwf	(_ADCResult+1)^(0+128),f
  2677  0048  081E               	movf	30,w	;volatile
  2678  0049  01DB               	clrf	_ADCResult^(0+128)
  2679  004A  07DB               	addwf	_ADCResult^(0+128),f
  2680                           
  2681                           ;main.c: 146: char * buf;
  2682                           ;main.c: 147: char * per;
  2683                           ;main.c: 148: char * teste;
  2684                           ;main.c: 149: char * qtdc;
  2685                           ;main.c: 150: float input;
  2686                           ;main.c: 151: float input2;
  2687                           ;main.c: 152: float pre;
  2688                           ;main.c: 153: int preint;
  2689                           ;main.c: 154: int status;
  2690                           ;main.c: 155: int status2;
  2691                           ;main.c: 156: int status3;
  2692                           ;main.c: 157: int i = 0;
  2693  004B  01BA               	clrf	ISR@i^(0+128)
  2694  004C  01BB               	clrf	(ISR@i+1)^(0+128)
  2695                           
  2696                           ;main.c: 158: unsigned char *result;
  2697                           ;main.c: 159: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  2698  004D  30A0               	movlw	ISR@aux& (0+255)
  2699  004E  0084               	movwf	4
  2700  004F  30C4               	movlw	low ISR@F1345
  2701  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0051  1303               	bcf	3,6	;RP1=0, select bank0
  2703  0052  00D2               	movwf	??_ISR
  2704  0053  0804               	movf	4,w
  2705  0054  00D3               	movwf	??_ISR+1
  2706  0055  3010               	movlw	16
  2707  0056  00D4               	movwf	??_ISR+2
  2708  0057                     u340_20:	
  2709  0057  0852               	movf	??_ISR,w
  2710  0058  0084               	movwf	4
  2711  0059  1383               	bcf	3,7	;select IRP bank1
  2712  005A  0800               	movf	0,w
  2713  005B  00D5               	movwf	??_ISR+3
  2714  005C  0AD2               	incf	??_ISR,f
  2715  005D  0853               	movf	??_ISR+1,w
  2716  005E  0084               	movwf	4
  2717  005F  0855               	movf	??_ISR+3,w
  2718  0060  0080               	movwf	0
  2719  0061  0AD3               	incf	??_ISR+1,f
  2720  0062  0BD4               	decfsz	??_ISR+2,f
  2721  0063  2857               	goto	u340_20
  2722                           
  2723                           ;main.c: 161: input = ADCResult * 0.0048828125;
  2724  0064  3000               	movlw	0
  2725  0065  00A0               	movwf	___ftmul@f1
  2726  0066  30A0               	movlw	160
  2727  0067  00A1               	movwf	___ftmul@f1+1
  2728  0068  303B               	movlw	59
  2729  0069  00A2               	movwf	___ftmul@f1+2
  2730  006A  1683               	bsf	3,5	;RP0=1, select bank1
  2731  006B  1303               	bcf	3,6	;RP1=0, select bank1
  2732  006C  085C               	movf	(_ADCResult+1)^(0+128),w
  2733  006D  01F9               	clrf	___awtoft@c+1
  2734  006E  07F9               	addwf	___awtoft@c+1,f
  2735  006F  085B               	movf	_ADCResult^(0+128),w
  2736  0070  01F8               	clrf	___awtoft@c
  2737  0071  07F8               	addwf	___awtoft@c,f
  2738  0072  120A  158A  2073  120A  118A  	fcall	___awtoft
  2739  0077  0878               	movf	?___awtoft,w
  2740  0078  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0079  1303               	bcf	3,6	;RP1=0, select bank0
  2742  007A  00A3               	movwf	___ftmul@f2
  2743  007B  0879               	movf	?___awtoft+1,w
  2744  007C  00A4               	movwf	___ftmul@f2+1
  2745  007D  087A               	movf	?___awtoft+2,w
  2746  007E  00A5               	movwf	___ftmul@f2+2
  2747  007F  120A  118A  2602  120A  118A  	fcall	___ftmul
  2748  0084  1283               	bcf	3,5	;RP0=0, select bank0
  2749  0085  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0086  0820               	movf	?___ftmul,w
  2751  0087  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0088  1303               	bcf	3,6	;RP1=0, select bank1
  2753  0089  00BD               	movwf	ISR@input^(0+128)
  2754  008A  1283               	bcf	3,5	;RP0=0, select bank0
  2755  008B  1303               	bcf	3,6	;RP1=0, select bank0
  2756  008C  0821               	movf	?___ftmul+1,w
  2757  008D  1683               	bsf	3,5	;RP0=1, select bank1
  2758  008E  1303               	bcf	3,6	;RP1=0, select bank1
  2759  008F  00BE               	movwf	(ISR@input+1)^(0+128)
  2760  0090  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0091  1303               	bcf	3,6	;RP1=0, select bank0
  2762  0092  0822               	movf	?___ftmul+2,w
  2763  0093  1683               	bsf	3,5	;RP0=1, select bank1
  2764  0094  1303               	bcf	3,6	;RP1=0, select bank1
  2765  0095  00BF               	movwf	(ISR@input+2)^(0+128)
  2766                           
  2767                           ;main.c: 162: buf = ftoa(input, &status);
  2768  0096  083D               	movf	ISR@input^(0+128),w
  2769  0097  1283               	bcf	3,5	;RP0=0, select bank0
  2770  0098  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0099  00C4               	movwf	ftoa@f
  2772  009A  1683               	bsf	3,5	;RP0=1, select bank1
  2773  009B  1303               	bcf	3,6	;RP1=0, select bank1
  2774  009C  083E               	movf	(ISR@input+1)^(0+128),w
  2775  009D  1283               	bcf	3,5	;RP0=0, select bank0
  2776  009E  1303               	bcf	3,6	;RP1=0, select bank0
  2777  009F  00C5               	movwf	ftoa@f+1
  2778  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  2779  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  2780  00A2  083F               	movf	(ISR@input+2)^(0+128),w
  2781  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  2782  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  2783  00A5  00C6               	movwf	ftoa@f+2
  2784  00A6  30B1               	movlw	ISR@status& (0+255)
  2785  00A7  00D2               	movwf	??_ISR
  2786  00A8  0852               	movf	??_ISR,w
  2787  00A9  00C7               	movwf	ftoa@status
  2788  00AA  120A  158A  2746  120A  118A  	fcall	_ftoa
  2789  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  2790  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  2791  00B1  00D3               	movwf	??_ISR+1
  2792  00B2  0853               	movf	??_ISR+1,w
  2793  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2794  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  2795  00B5  00B0               	movwf	ISR@buf^(0+128)
  2796                           
  2797                           ;main.c: 166: Display[0] = (ADCResult / 1000) + 48;
  2798  00B6  30E8               	movlw	232
  2799  00B7  00F0               	movwf	___awdiv@divisor
  2800  00B8  3003               	movlw	3
  2801  00B9  00F1               	movwf	___awdiv@divisor+1
  2802  00BA  085C               	movf	(_ADCResult+1)^(0+128),w
  2803  00BB  01F3               	clrf	___awdiv@dividend+1
  2804  00BC  07F3               	addwf	___awdiv@dividend+1,f
  2805  00BD  085B               	movf	_ADCResult^(0+128),w
  2806  00BE  01F2               	clrf	___awdiv@dividend
  2807  00BF  07F2               	addwf	___awdiv@dividend,f
  2808  00C0  120A  158A  237B  120A  118A  	fcall	___awdiv
  2809  00C5  0870               	movf	?___awdiv,w
  2810  00C6  3E30               	addlw	48
  2811  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  2812  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  2813  00C9  00D2               	movwf	??_ISR
  2814  00CA  0852               	movf	??_ISR,w
  2815  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2816  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  2817  00CD  00D4               	movwf	_Display^(0+128)
  2818                           
  2819                           ;main.c: 167: Display[1] = ((ADCResult / 100) % 10) + 48;
  2820  00CE  300A               	movlw	10
  2821  00CF  00F9               	movwf	___awmod@divisor
  2822  00D0  3000               	movlw	0
  2823  00D1  00FA               	movwf	___awmod@divisor+1
  2824  00D2  3064               	movlw	100
  2825  00D3  00F0               	movwf	___awdiv@divisor
  2826  00D4  3000               	movlw	0
  2827  00D5  00F1               	movwf	___awdiv@divisor+1
  2828  00D6  085C               	movf	(_ADCResult+1)^(0+128),w
  2829  00D7  01F3               	clrf	___awdiv@dividend+1
  2830  00D8  07F3               	addwf	___awdiv@dividend+1,f
  2831  00D9  085B               	movf	_ADCResult^(0+128),w
  2832  00DA  01F2               	clrf	___awdiv@dividend
  2833  00DB  07F2               	addwf	___awdiv@dividend,f
  2834  00DC  120A  158A  237B  120A  118A  	fcall	___awdiv
  2835  00E1  0871               	movf	?___awdiv+1,w
  2836  00E2  01FC               	clrf	___awmod@dividend+1
  2837  00E3  07FC               	addwf	___awmod@dividend+1,f
  2838  00E4  0870               	movf	?___awdiv,w
  2839  00E5  01FB               	clrf	___awmod@dividend
  2840  00E6  07FB               	addwf	___awmod@dividend,f
  2841  00E7  120A  158A  22D3  120A  118A  	fcall	___awmod
  2842  00EC  0879               	movf	?___awmod,w
  2843  00ED  3E30               	addlw	48
  2844  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  2845  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  2846  00F0  00D2               	movwf	??_ISR
  2847  00F1  0852               	movf	??_ISR,w
  2848  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  2849  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  2850  00F4  00D5               	movwf	(_Display^(0+128)+1)
  2851                           
  2852                           ;main.c: 168: Display[2] = ((ADCResult / 10) % 10) + 48;
  2853  00F5  300A               	movlw	10
  2854  00F6  00F9               	movwf	___awmod@divisor
  2855  00F7  3000               	movlw	0
  2856  00F8  00FA               	movwf	___awmod@divisor+1
  2857  00F9  300A               	movlw	10
  2858  00FA  00F0               	movwf	___awdiv@divisor
  2859  00FB  3000               	movlw	0
  2860  00FC  00F1               	movwf	___awdiv@divisor+1
  2861  00FD  085C               	movf	(_ADCResult+1)^(0+128),w
  2862  00FE  01F3               	clrf	___awdiv@dividend+1
  2863  00FF  07F3               	addwf	___awdiv@dividend+1,f
  2864  0100  085B               	movf	_ADCResult^(0+128),w
  2865  0101  01F2               	clrf	___awdiv@dividend
  2866  0102  07F2               	addwf	___awdiv@dividend,f
  2867  0103  120A  158A  237B  120A  118A  	fcall	___awdiv
  2868  0108  0871               	movf	?___awdiv+1,w
  2869  0109  01FC               	clrf	___awmod@dividend+1
  2870  010A  07FC               	addwf	___awmod@dividend+1,f
  2871  010B  0870               	movf	?___awdiv,w
  2872  010C  01FB               	clrf	___awmod@dividend
  2873  010D  07FB               	addwf	___awmod@dividend,f
  2874  010E  120A  158A  22D3  120A  118A  	fcall	___awmod
  2875  0113  0879               	movf	?___awmod,w
  2876  0114  3E30               	addlw	48
  2877  0115  1283               	bcf	3,5	;RP0=0, select bank0
  2878  0116  1303               	bcf	3,6	;RP1=0, select bank0
  2879  0117  00D2               	movwf	??_ISR
  2880  0118  0852               	movf	??_ISR,w
  2881  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2882  011A  1303               	bcf	3,6	;RP1=0, select bank1
  2883  011B  00D6               	movwf	(_Display^(0+128)+2)
  2884                           
  2885                           ;main.c: 169: Display[3] = (ADCResult % 10) + 48;
  2886  011C  300A               	movlw	10
  2887  011D  00F9               	movwf	___awmod@divisor
  2888  011E  3000               	movlw	0
  2889  011F  00FA               	movwf	___awmod@divisor+1
  2890  0120  085C               	movf	(_ADCResult+1)^(0+128),w
  2891  0121  01FC               	clrf	___awmod@dividend+1
  2892  0122  07FC               	addwf	___awmod@dividend+1,f
  2893  0123  085B               	movf	_ADCResult^(0+128),w
  2894  0124  01FB               	clrf	___awmod@dividend
  2895  0125  07FB               	addwf	___awmod@dividend,f
  2896  0126  120A  158A  22D3  120A  118A  	fcall	___awmod
  2897  012B  0879               	movf	?___awmod,w
  2898  012C  3E30               	addlw	48
  2899  012D  1283               	bcf	3,5	;RP0=0, select bank0
  2900  012E  1303               	bcf	3,6	;RP1=0, select bank0
  2901  012F  00D2               	movwf	??_ISR
  2902  0130  0852               	movf	??_ISR,w
  2903  0131  1683               	bsf	3,5	;RP0=1, select bank1
  2904  0132  1303               	bcf	3,6	;RP1=0, select bank1
  2905  0133  00D7               	movwf	(_Display^(0+128)+3)
  2906                           
  2907                           ;main.c: 174: lcd_gotoxy(0, 1);
  2908  0134  01F5               	clrf	i1lcd_gotoxy@y
  2909  0135  0AF5               	incf	i1lcd_gotoxy@y,f
  2910  0136  3000               	movlw	0
  2911  0137  160A  118A  27E6  120A  118A  	fcall	i1_lcd_gotoxy
  2912                           
  2913                           ;main.c: 175: lcd_escreve_string("Nivel:");
  2914  013C  30B3               	movlw	low (STR_2-__stringbase)
  2915  013D  00FC               	movwf	i1lcd_escreve_string@y
  2916  013E  3080               	movlw	128
  2917  013F  00FD               	movwf	i1lcd_escreve_string@y+1
  2918  0140  120A  158A  20DA  120A  118A  	fcall	i1_lcd_escreve_string
  2919                           
  2920                           ;main.c: 176: lcd_gotoxy(7, 1);
  2921  0145  01F5               	clrf	i1lcd_gotoxy@y
  2922  0146  0AF5               	incf	i1lcd_gotoxy@y,f
  2923  0147  3007               	movlw	7
  2924  0148  160A  118A  27E6  120A  118A  	fcall	i1_lcd_gotoxy
  2925                           
  2926                           ;main.c: 177: input2 = ((input * 100) / 1);
  2927  014D  3000               	movlw	0
  2928  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2929  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0150  00B0               	movwf	___ftdiv@f2
  2931  0151  3080               	movlw	128
  2932  0152  00B1               	movwf	___ftdiv@f2+1
  2933  0153  303F               	movlw	63
  2934  0154  00B2               	movwf	___ftdiv@f2+2
  2935  0155  3000               	movlw	0
  2936  0156  00A0               	movwf	___ftmul@f1
  2937  0157  30C8               	movlw	200
  2938  0158  00A1               	movwf	___ftmul@f1+1
  2939  0159  3042               	movlw	66
  2940  015A  00A2               	movwf	___ftmul@f1+2
  2941  015B  1683               	bsf	3,5	;RP0=1, select bank1
  2942  015C  1303               	bcf	3,6	;RP1=0, select bank1
  2943  015D  083D               	movf	ISR@input^(0+128),w
  2944  015E  1283               	bcf	3,5	;RP0=0, select bank0
  2945  015F  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0160  00A3               	movwf	___ftmul@f2
  2947  0161  1683               	bsf	3,5	;RP0=1, select bank1
  2948  0162  1303               	bcf	3,6	;RP1=0, select bank1
  2949  0163  083E               	movf	(ISR@input+1)^(0+128),w
  2950  0164  1283               	bcf	3,5	;RP0=0, select bank0
  2951  0165  1303               	bcf	3,6	;RP1=0, select bank0
  2952  0166  00A4               	movwf	___ftmul@f2+1
  2953  0167  1683               	bsf	3,5	;RP0=1, select bank1
  2954  0168  1303               	bcf	3,6	;RP1=0, select bank1
  2955  0169  083F               	movf	(ISR@input+2)^(0+128),w
  2956  016A  1283               	bcf	3,5	;RP0=0, select bank0
  2957  016B  1303               	bcf	3,6	;RP1=0, select bank0
  2958  016C  00A5               	movwf	___ftmul@f2+2
  2959  016D  120A  118A  2602  120A  118A  	fcall	___ftmul
  2960  0172  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0173  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0174  0820               	movf	?___ftmul,w
  2963  0175  00B3               	movwf	___ftdiv@f1
  2964  0176  0821               	movf	?___ftmul+1,w
  2965  0177  00B4               	movwf	___ftdiv@f1+1
  2966  0178  0822               	movf	?___ftmul+2,w
  2967  0179  00B5               	movwf	___ftdiv@f1+2
  2968  017A  120A  158A  268E  120A  118A  	fcall	___ftdiv
  2969  017F  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0180  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0181  0830               	movf	?___ftdiv,w
  2972  0182  1683               	bsf	3,5	;RP0=1, select bank1
  2973  0183  1303               	bcf	3,6	;RP1=0, select bank1
  2974  0184  00C0               	movwf	ISR@input2^(0+128)
  2975  0185  1283               	bcf	3,5	;RP0=0, select bank0
  2976  0186  1303               	bcf	3,6	;RP1=0, select bank0
  2977  0187  0831               	movf	?___ftdiv+1,w
  2978  0188  1683               	bsf	3,5	;RP0=1, select bank1
  2979  0189  1303               	bcf	3,6	;RP1=0, select bank1
  2980  018A  00C1               	movwf	(ISR@input2+1)^(0+128)
  2981  018B  1283               	bcf	3,5	;RP0=0, select bank0
  2982  018C  1303               	bcf	3,6	;RP1=0, select bank0
  2983  018D  0832               	movf	?___ftdiv+2,w
  2984  018E  1683               	bsf	3,5	;RP0=1, select bank1
  2985  018F  1303               	bcf	3,6	;RP1=0, select bank1
  2986  0190  00C2               	movwf	(ISR@input2+2)^(0+128)
  2987                           
  2988                           ;main.c: 178: per = ftoa(input2, &status2);
  2989  0191  0840               	movf	ISR@input2^(0+128),w
  2990  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0193  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0194  00C4               	movwf	ftoa@f
  2993  0195  1683               	bsf	3,5	;RP0=1, select bank1
  2994  0196  1303               	bcf	3,6	;RP1=0, select bank1
  2995  0197  0841               	movf	(ISR@input2+1)^(0+128),w
  2996  0198  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0199  1303               	bcf	3,6	;RP1=0, select bank0
  2998  019A  00C5               	movwf	ftoa@f+1
  2999  019B  1683               	bsf	3,5	;RP0=1, select bank1
  3000  019C  1303               	bcf	3,6	;RP1=0, select bank1
  3001  019D  0842               	movf	(ISR@input2+2)^(0+128),w
  3002  019E  1283               	bcf	3,5	;RP0=0, select bank0
  3003  019F  1303               	bcf	3,6	;RP1=0, select bank0
  3004  01A0  00C6               	movwf	ftoa@f+2
  3005  01A1  30B3               	movlw	ISR@status2& (0+255)
  3006  01A2  00D2               	movwf	??_ISR
  3007  01A3  0852               	movf	??_ISR,w
  3008  01A4  00C7               	movwf	ftoa@status
  3009  01A5  120A  158A  2746  120A  118A  	fcall	_ftoa
  3010  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  3011  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  3012  01AC  00D3               	movwf	??_ISR+1
  3013  01AD  0853               	movf	??_ISR+1,w
  3014  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  3015  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  3016  01B0  00C3               	movwf	ISR@per^(0+128)
  3017                           
  3018                           ;main.c: 179: lcd_escreve_string(per);
  3019  01B1  0843               	movf	ISR@per^(0+128),w
  3020  01B2  00FC               	movwf	i1lcd_escreve_string@y
  3021  01B3  3000               	movlw	0
  3022  01B4  00FD               	movwf	i1lcd_escreve_string@y+1
  3023  01B5  120A  158A  20DA  120A  118A  	fcall	i1_lcd_escreve_string
  3024                           
  3025                           ;main.c: 180: USARTWriteString(per);
  3026  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  3027  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  3028  01BC  0843               	movf	ISR@per^(0+128),w
  3029  01BD  00F1               	movwf	i1USARTWriteString@str
  3030  01BE  3000               	movlw	0
  3031  01BF  00F2               	movwf	i1USARTWriteString@str+1
  3032  01C0  120A  158A  2094  120A  118A  	fcall	i1_USARTWriteString
  3033                           
  3034                           ;main.c: 181: lcd_gotoxy(16, 1);
  3035  01C5  01F5               	clrf	i1lcd_gotoxy@y
  3036  01C6  0AF5               	incf	i1lcd_gotoxy@y,f
  3037  01C7  3010               	movlw	16
  3038  01C8  160A  118A  27E6  120A  118A  	fcall	i1_lcd_gotoxy
  3039                           
  3040                           ;main.c: 182: lcd_escreve_string("%");
  3041  01CD  30BA               	movlw	low (STR_3-__stringbase)
  3042  01CE  00FC               	movwf	i1lcd_escreve_string@y
  3043  01CF  3080               	movlw	128
  3044  01D0  00FD               	movwf	i1lcd_escreve_string@y+1
  3045  01D1  120A  158A  20DA  120A  118A  	fcall	i1_lcd_escreve_string
  3046                           
  3047                           ;main.c: 183: lcd_gotoxy(0, 0);
  3048  01D6  01F5               	clrf	i1lcd_gotoxy@y
  3049  01D7  3000               	movlw	0
  3050  01D8  160A  118A  27E6  120A  118A  	fcall	i1_lcd_gotoxy
  3051                           
  3052                           ;main.c: 184: pre = input2 * 0.16;
  3053  01DD  30D7               	movlw	215
  3054  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3055  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  3056  01E0  00A0               	movwf	___ftmul@f1
  3057  01E1  3023               	movlw	35
  3058  01E2  00A1               	movwf	___ftmul@f1+1
  3059  01E3  303E               	movlw	62
  3060  01E4  00A2               	movwf	___ftmul@f1+2
  3061  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  3062  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  3063  01E7  0840               	movf	ISR@input2^(0+128),w
  3064  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3065  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3066  01EA  00A3               	movwf	___ftmul@f2
  3067  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  3068  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  3069  01ED  0841               	movf	(ISR@input2+1)^(0+128),w
  3070  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  3071  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  3072  01F0  00A4               	movwf	___ftmul@f2+1
  3073  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  3074  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  3075  01F3  0842               	movf	(ISR@input2+2)^(0+128),w
  3076  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  3077  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  3078  01F6  00A5               	movwf	___ftmul@f2+2
  3079  01F7  120A  118A  2602  120A  118A  	fcall	___ftmul
  3080  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  3081  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  3082  01FE  0820               	movf	?___ftmul,w
  3083  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0200  1303               	bcf	3,6	;RP1=0, select bank1
  3085  0201  00B5               	movwf	ISR@pre^(0+128)
  3086  0202  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0203  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0204  0821               	movf	?___ftmul+1,w
  3089  0205  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0206  1303               	bcf	3,6	;RP1=0, select bank1
  3091  0207  00B6               	movwf	(ISR@pre+1)^(0+128)
  3092  0208  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0209  1303               	bcf	3,6	;RP1=0, select bank0
  3094  020A  0822               	movf	?___ftmul+2,w
  3095  020B  1683               	bsf	3,5	;RP0=1, select bank1
  3096  020C  1303               	bcf	3,6	;RP1=0, select bank1
  3097  020D  00B7               	movwf	(ISR@pre+2)^(0+128)
  3098                           
  3099                           ;main.c: 185: preint = (int) pre;
  3100  020E  0835               	movf	ISR@pre^(0+128),w
  3101  020F  1283               	bcf	3,5	;RP0=0, select bank0
  3102  0210  1303               	bcf	3,6	;RP1=0, select bank0
  3103  0211  00B0               	movwf	___fttol@f1
  3104  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3105  0213  1303               	bcf	3,6	;RP1=0, select bank1
  3106  0214  0836               	movf	(ISR@pre+1)^(0+128),w
  3107  0215  1283               	bcf	3,5	;RP0=0, select bank0
  3108  0216  1303               	bcf	3,6	;RP1=0, select bank0
  3109  0217  00B1               	movwf	___fttol@f1+1
  3110  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0219  1303               	bcf	3,6	;RP1=0, select bank1
  3112  021A  0837               	movf	(ISR@pre+2)^(0+128),w
  3113  021B  1283               	bcf	3,5	;RP0=0, select bank0
  3114  021C  1303               	bcf	3,6	;RP1=0, select bank0
  3115  021D  00B2               	movwf	___fttol@f1+2
  3116  021E  120A  158A  255F  120A  118A  	fcall	___fttol
  3117  0223  1283               	bcf	3,5	;RP0=0, select bank0
  3118  0224  1303               	bcf	3,6	;RP1=0, select bank0
  3119  0225  0831               	movf	?___fttol+1,w
  3120  0226  1683               	bsf	3,5	;RP0=1, select bank1
  3121  0227  1303               	bcf	3,6	;RP1=0, select bank1
  3122  0228  01B9               	clrf	(ISR@preint+1)^(0+128)
  3123  0229  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3124  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3125  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3126  022C  0830               	movf	?___fttol,w
  3127  022D  1683               	bsf	3,5	;RP0=1, select bank1
  3128  022E  1303               	bcf	3,6	;RP1=0, select bank1
  3129  022F  01B8               	clrf	ISR@preint^(0+128)
  3130  0230  07B8               	addwf	ISR@preint^(0+128),f
  3131                           
  3132                           ;main.c: 187: if (ADCResult < 200) {
  3133  0231  085C               	movf	(_ADCResult+1)^(0+128),w
  3134  0232  3A80               	xorlw	128
  3135  0233  00FF               	movwf	127
  3136  0234  3080               	movlw	128
  3137  0235  027F               	subwf	127,w
  3138  0236  1D03               	skipz
  3139  0237  2A3A               	goto	u341_25
  3140  0238  30C8               	movlw	200
  3141  0239  025B               	subwf	_ADCResult^(0+128),w
  3142  023A                     u341_25:	
  3143  023A  1803               	skipnc
  3144  023B  2A40               	goto	i1l2612
  3145                           
  3146                           ;main.c: 188: PORTDbits.RD2 = 0;
  3147  023C  1283               	bcf	3,5	;RP0=0, select bank0
  3148  023D  1303               	bcf	3,6	;RP1=0, select bank0
  3149  023E  1108               	bcf	8,2	;volatile
  3150                           
  3151                           ;main.c: 189: PORTDbits.RD3 = 1;
  3152  023F  1588               	bsf	8,3	;volatile
  3153  0240                     i1l2612:	
  3154                           
  3155                           ;main.c: 190: }
  3156                           ;main.c: 192: if (ADCResult > 200) {
  3157  0240  1683               	bsf	3,5	;RP0=1, select bank1
  3158  0241  1303               	bcf	3,6	;RP1=0, select bank1
  3159  0242  085C               	movf	(_ADCResult+1)^(0+128),w
  3160  0243  3A80               	xorlw	128
  3161  0244  00FF               	movwf	127
  3162  0245  3080               	movlw	128
  3163  0246  027F               	subwf	127,w
  3164  0247  1D03               	skipz
  3165  0248  2A4B               	goto	u342_25
  3166  0249  30C9               	movlw	201
  3167  024A  025B               	subwf	_ADCResult^(0+128),w
  3168  024B                     u342_25:	
  3169  024B  1C03               	skipc
  3170  024C  2A51               	goto	i1l2622
  3171                           
  3172                           ;main.c: 193: PORTDbits.RD2 = 1;
  3173  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3174  024E  1303               	bcf	3,6	;RP1=0, select bank0
  3175  024F  1508               	bsf	8,2	;volatile
  3176                           
  3177                           ;main.c: 194: PORTDbits.RD3 = 0;
  3178  0250  1188               	bcf	8,3	;volatile
  3179  0251                     i1l2622:	
  3180                           ;main.c: 195: }
  3181                           ;main.c: 198: while (preint >= 0) {
  3182                           
  3183  0251  1683               	bsf	3,5	;RP0=1, select bank1
  3184  0252  1303               	bcf	3,6	;RP1=0, select bank1
  3185  0253  1BB9               	btfsc	(ISR@preint+1)^(0+128),7
  3186  0254  2A71               	goto	i1l2624
  3187                           
  3188                           ;main.c: 199: aux[i] = 0xFF;
  3189  0255  30FF               	movlw	255
  3190  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0257  00D2               	movwf	??_ISR
  3192  0258  1683               	bsf	3,5	;RP0=1, select bank1
  3193  0259  1303               	bcf	3,6	;RP1=0, select bank1
  3194  025A  083A               	movf	ISR@i^(0+128),w
  3195  025B  3EA0               	addlw	ISR@aux& (0+255)
  3196  025C  0084               	movwf	4
  3197  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3198  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3199  025F  0852               	movf	??_ISR,w
  3200  0260  1383               	bcf	3,7	;select IRP bank1
  3201  0261  0080               	movwf	0
  3202                           
  3203                           ;main.c: 200: preint--;
  3204  0262  30FF               	movlw	255
  3205  0263  1683               	bsf	3,5	;RP0=1, select bank1
  3206  0264  1303               	bcf	3,6	;RP1=0, select bank1
  3207  0265  07B8               	addwf	ISR@preint^(0+128),f
  3208  0266  1803               	skipnc
  3209  0267  0AB9               	incf	(ISR@preint+1)^(0+128),f
  3210  0268  30FF               	movlw	255
  3211  0269  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3212                           
  3213                           ;main.c: 201: i++;
  3214  026A  3001               	movlw	1
  3215  026B  07BA               	addwf	ISR@i^(0+128),f
  3216  026C  1803               	skipnc
  3217  026D  0ABB               	incf	(ISR@i+1)^(0+128),f
  3218  026E  3000               	movlw	0
  3219  026F  07BB               	addwf	(ISR@i+1)^(0+128),f
  3220  0270  2A51               	goto	i1l2622
  3221  0271                     i1l2624:	
  3222                           
  3223                           ;main.c: 202: }
  3224                           ;main.c: 203: result = &aux;
  3225  0271  30A0               	movlw	ISR@aux& (0+255)
  3226  0272  1283               	bcf	3,5	;RP0=0, select bank0
  3227  0273  1303               	bcf	3,6	;RP1=0, select bank0
  3228  0274  00D2               	movwf	??_ISR
  3229  0275  0852               	movf	??_ISR,w
  3230  0276  1683               	bsf	3,5	;RP0=1, select bank1
  3231  0277  1303               	bcf	3,6	;RP1=0, select bank1
  3232  0278  00BC               	movwf	ISR@result^(0+128)
  3233                           
  3234                           ;main.c: 205: lcd_escreve_string(result);
  3235  0279  083C               	movf	ISR@result^(0+128),w
  3236  027A  00FC               	movwf	i1lcd_escreve_string@y
  3237  027B  3000               	movlw	0
  3238  027C  00FD               	movwf	i1lcd_escreve_string@y+1
  3239  027D  120A  158A  20DA  120A  118A  	fcall	i1_lcd_escreve_string
  3240                           
  3241                           ;main.c: 228: _delay((unsigned long)((200)*(20000000/4000.0)));
  3242  0282  3006               	movlw	6
  3243  0283  1283               	bcf	3,5	;RP0=0, select bank0
  3244  0284  1303               	bcf	3,6	;RP1=0, select bank0
  3245  0285  00D4               	movwf	??_ISR+2
  3246  0286  3013               	movlw	19
  3247  0287  00D3               	movwf	??_ISR+1
  3248  0288  30B1               	movlw	177
  3249  0289  00D2               	movwf	??_ISR
  3250  028A                     u416_27:	
  3251  028A  0BD2               	decfsz	??_ISR,f
  3252  028B  2A8A               	goto	u416_27
  3253  028C  0BD3               	decfsz	??_ISR+1,f
  3254  028D  2A8A               	goto	u416_27
  3255  028E  0BD4               	decfsz	??_ISR+2,f
  3256  028F  2A8A               	goto	u416_27
  3257  0290  2A91               	nop2
  3258                           
  3259                           ;main.c: 230: PIR1bits.ADIF = 0;
  3260  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0293  130C               	bcf	12,6	;volatile
  3263  0294                     i1l2632:	
  3264                           
  3265                           ;main.c: 231: }
  3266                           ;main.c: 233: if (PIR1bits.RCIF) {
  3267  0294  1E8C               	btfss	12,5	;volatile
  3268  0295  2AB2               	goto	i1l101
  3269                           
  3270                           ;main.c: 234: USARTWriteString("\n\r Entrou na funcao de Interrupcao da USART");
  3271  0296  302D               	movlw	low (STR_4-__stringbase)
  3272  0297  00F1               	movwf	i1USARTWriteString@str
  3273  0298  3080               	movlw	128
  3274  0299  00F2               	movwf	i1USARTWriteString@str+1
  3275  029A  120A  158A  2094  120A  118A  	fcall	i1_USARTWriteString
  3276                           
  3277                           ;main.c: 235: USARTWriteString("\n\r Caracter Digitado :");
  3278  029F  3081               	movlw	low (STR_5-__stringbase)
  3279  02A0  00F1               	movwf	i1USARTWriteString@str
  3280  02A1  3080               	movlw	128
  3281  02A2  00F2               	movwf	i1USARTWriteString@str+1
  3282  02A3  120A  158A  2094  120A  118A  	fcall	i1_USARTWriteString
  3283                           
  3284                           ;main.c: 236: USARTWriteChar(USARTReceiveChar());
  3285  02A8  120A  158A  2001  120A  118A  	fcall	_USARTReceiveChar
  3286  02AD  160A  118A  277E  120A  118A  	fcall	i1_USARTWriteChar
  3287  02B2                     i1l101:	
  3288  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  3289  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  3290  02B4  0859               	movf	??_ISR+7,w
  3291  02B5  00FF               	movwf	127
  3292  02B6  0858               	movf	??_ISR+6,w
  3293  02B7  008A               	movwf	10
  3294  02B8  0857               	movf	??_ISR+5,w
  3295  02B9  0084               	movwf	4
  3296  02BA  0E56               	swapf	(??_ISR+4)^0,w
  3297  02BB  0083               	movwf	3
  3298  02BC  0EFE               	swapf	126,f
  3299  02BD  0E7E               	swapf	126,w
  3300  02BE  0009               	retfie
  3301  02BF                     __end_of_ISR:	
  3302                           
  3303                           	psect	intentry
  3304  0004                     __pintentry:	
  3305                           ;incstack = 0
  3306 ;; hardware stack exceeded
  3307                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3308                           
  3309  0004                     interrupt_function:	
  3310  007E                     saved_w	set	btemp
  3311  0004  00FE               	movwf	btemp
  3312  0005  0E03               	swapf	3,w
  3313  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3314  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3315  0008  00D6               	movwf	??_ISR+4
  3316  0009  0804               	movf	4,w
  3317  000A  00D7               	movwf	??_ISR+5
  3318  000B  080A               	movf	10,w
  3319  000C  00D8               	movwf	??_ISR+6
  3320  000D  087F               	movf	btemp+1,w
  3321  000E  00D9               	movwf	??_ISR+7
  3322  000F  120A  118A  2841   	ljmp	_ISR
  3323                           
  3324                           	psect	text13
  3325  08DA                     __ptext13:	
  3326 ;; *************** function i1_lcd_escreve_string *****************
  3327 ;; Defined at:
  3328 ;;		line 168 in file "lcd_4bit.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  y               2   12[COMMON] PTR const unsigned char 
  3331 ;;		 -> ftoa@buf(17), STR_6(16), STR_3(2), STR_2(7), 
  3332 ;;		 -> ISR@aux(16), 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;		None
  3335 ;; Return value:  Size  Location     Type
  3336 ;;		None               void
  3337 ;; Registers used:
  3338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3344 ;;      Params:         2       0       0       0       0
  3345 ;;      Locals:         0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0
  3347 ;;      Totals:         2       0       0       0       0
  3348 ;;Total ram usage:        2 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    4
  3351 ;; This function calls:
  3352 ;;		i1_lcd_putc
  3353 ;; This function is called by:
  3354 ;;		_ISR
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           
  3359                           ;psect for function i1_lcd_escreve_string
  3360  08DA                     i1_lcd_escreve_string:	
  3361  08DA                     i1l2562:	
  3362                           ;lcd_4bit.c: 170: while(*y!='\0')
  3363                           
  3364                           ;incstack = 0
  3365 ;; hardware stack exceeded
  3366                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3367                           
  3368  08DA  087D               	movf	i1lcd_escreve_string@y+1,w
  3369  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  3370  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  3371  08DD  00FF               	movwf	127
  3372  08DE  087C               	movf	i1lcd_escreve_string@y,w
  3373  08DF  0084               	movwf	4
  3374  08E0  120A  118A  2700  120A  158A  	fcall	stringtab
  3375  08E5  3800               	iorlw	0
  3376  08E6  1903               	btfsc	3,2
  3377  08E7  0008               	return
  3378                           
  3379                           ;lcd_4bit.c: 171: {
  3380                           ;lcd_4bit.c: 172: lcd_putc(*y);
  3381  08E8  087D               	movf	i1lcd_escreve_string@y+1,w
  3382  08E9  1283               	bcf	3,5	;RP0=0, select bank0
  3383  08EA  1303               	bcf	3,6	;RP1=0, select bank0
  3384  08EB  00FF               	movwf	127
  3385  08EC  087C               	movf	i1lcd_escreve_string@y,w
  3386  08ED  0084               	movwf	4
  3387  08EE  120A  118A  2700  120A  158A  	fcall	stringtab
  3388  08F3  120A  158A  21C3  120A  158A  	fcall	i1_lcd_putc
  3389                           
  3390                           ;lcd_4bit.c: 173: y++;
  3391  08F8  3001               	movlw	1
  3392  08F9  07FC               	addwf	i1lcd_escreve_string@y,f
  3393  08FA  1803               	skipnc
  3394  08FB  0AFD               	incf	i1lcd_escreve_string@y+1,f
  3395  08FC  28DA               	goto	i1l2562
  3396  08FD                     __end_ofi1_lcd_escreve_string:	
  3397                           
  3398                           	psect	text14
  3399  09C3                     __ptext14:	
  3400 ;; *************** function i1_lcd_putc *****************
  3401 ;; Defined at:
  3402 ;;		line 82 in file "lcd_4bit.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  c               1    wreg     unsigned char 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  c               1   11[COMMON] unsigned char 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;		None               void
  3409 ;; Registers used:
  3410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3416 ;;      Params:         0       0       0       0       0
  3417 ;;      Locals:         1       0       0       0       0
  3418 ;;      Temps:          2       0       0       0       0
  3419 ;;      Totals:         3       0       0       0       0
  3420 ;;Total ram usage:        3 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    3
  3423 ;; This function calls:
  3424 ;;		i1_lcd_envia_byte
  3425 ;;		i1_lcd_gotoxy
  3426 ;; This function is called by:
  3427 ;;		i1_lcd_escreve_string
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function i1_lcd_putc
  3433  09C3                     i1_lcd_putc:	
  3434                           
  3435                           ;incstack = 0
  3436 ;; hardware stack exceeded
  3437                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3438                           ;i1lcd_putc@c stored from wreg
  3439  09C3  00FB               	movwf	i1lcd_putc@c
  3440                           
  3441                           ;lcd_4bit.c: 84: switch(c)
  3442  09C4  29F2               	goto	i1l2310
  3443  09C5                     i1l2298:	
  3444                           ;lcd_4bit.c: 85: {
  3445                           ;lcd_4bit.c: 86: case '\f':
  3446                           
  3447                           
  3448                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  3449  09C5  01F2               	clrf	i1lcd_envia_byte@n
  3450  09C6  0AF2               	incf	i1lcd_envia_byte@n,f
  3451  09C7  3000               	movlw	0
  3452  09C8  120A  118A  26D5  120A  158A  	fcall	i1_lcd_envia_byte
  3453                           
  3454                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3455  09CD  300D               	movlw	13
  3456  09CE  00FA               	movwf	??i1_lcd_putc+1
  3457  09CF  30FB               	movlw	251
  3458  09D0  00F9               	movwf	??i1_lcd_putc
  3459  09D1                     u417_27:	
  3460  09D1  0BF9               	decfsz	??i1_lcd_putc,f
  3461  09D2  29D1               	goto	u417_27
  3462  09D3  0BFA               	decfsz	??i1_lcd_putc+1,f
  3463  09D4  29D1               	goto	u417_27
  3464  09D5  29D6               	nop2
  3465                           
  3466                           ;lcd_4bit.c: 89: break;
  3467  09D6  0008               	return
  3468  09D7                     i1l2302:	
  3469                           ;lcd_4bit.c: 91: case '\n':
  3470                           
  3471                           
  3472                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  3473  09D7  3002               	movlw	2
  3474  09D8  00F9               	movwf	??i1_lcd_putc
  3475  09D9  0879               	movf	??i1_lcd_putc,w
  3476  09DA  00F5               	movwf	i1lcd_gotoxy@y
  3477  09DB  3001               	movlw	1
  3478  09DC  160A  118A  27E6   	fcall	i1_lcd_gotoxy
  3479                           
  3480                           ;lcd_4bit.c: 93: break;
  3481  09DF  0008               	return
  3482  09E0                     i1l2304:	
  3483                           ;lcd_4bit.c: 95: case '\b':
  3484                           
  3485                           
  3486                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  3487  09E0  3010               	movlw	16
  3488  09E1  00F9               	movwf	??i1_lcd_putc
  3489  09E2  0879               	movf	??i1_lcd_putc,w
  3490  09E3  00F2               	movwf	i1lcd_envia_byte@n
  3491  09E4  3000               	movlw	0
  3492  09E5  120A  118A  26D5   	fcall	i1_lcd_envia_byte
  3493                           
  3494                           ;lcd_4bit.c: 97: break;
  3495  09E8  0008               	return
  3496  09E9                     i1l2306:	
  3497                           ;lcd_4bit.c: 99: default:
  3498                           
  3499                           
  3500                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  3501  09E9  087B               	movf	i1lcd_putc@c,w
  3502  09EA  00F9               	movwf	??i1_lcd_putc
  3503  09EB  0879               	movf	??i1_lcd_putc,w
  3504  09EC  00F2               	movwf	i1lcd_envia_byte@n
  3505  09ED  3001               	movlw	1
  3506  09EE  120A  118A  26D5   	fcall	i1_lcd_envia_byte
  3507                           
  3508                           ;lcd_4bit.c: 102: }
  3509                           
  3510                           ;lcd_4bit.c: 101: break;
  3511  09F1  0008               	return
  3512  09F2                     i1l2310:	
  3513  09F2  087B               	movf	i1lcd_putc@c,w
  3514                           
  3515                           ; Switch size 1, requested type "space"
  3516                           ; Number of cases is 3, Range of values is 8 to 12
  3517                           ; switch strategies available:
  3518                           ; Name         Instructions Cycles
  3519                           ; simple_byte           10     6 (average)
  3520                           ; direct_byte           26    11 (fixed)
  3521                           ; jumptable            263     9 (fixed)
  3522                           ;	Chosen strategy is simple_byte
  3523  09F3  3A08               	xorlw	8	; case 8
  3524  09F4  1903               	skipnz
  3525  09F5  29E0               	goto	i1l2304
  3526  09F6  3A02               	xorlw	2	; case 10
  3527  09F7  1903               	skipnz
  3528  09F8  29D7               	goto	i1l2302
  3529  09F9  3A06               	xorlw	6	; case 12
  3530  09FA  1903               	skipnz
  3531  09FB  29C5               	goto	i1l2298
  3532  09FC  29E9               	goto	i1l2306
  3533  09FD  0008               	return
  3534  09FE                     __end_ofi1_lcd_putc:	
  3535                           
  3536                           	psect	text15
  3537  17E6                     __ptext15:	
  3538 ;; *************** function i1_lcd_gotoxy *****************
  3539 ;; Defined at:
  3540 ;;		line 70 in file "lcd_4bit.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  x               1    wreg     unsigned char 
  3543 ;;  y               1    5[COMMON] unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  x               1    7[COMMON] unsigned char 
  3546 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;		None               void
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3556 ;;      Params:         1       0       0       0       0
  3557 ;;      Locals:         2       0       0       0       0
  3558 ;;      Temps:          1       0       0       0       0
  3559 ;;      Totals:         4       0       0       0       0
  3560 ;;Total ram usage:        4 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    2
  3563 ;; This function calls:
  3564 ;;		i1_lcd_envia_byte
  3565 ;; This function is called by:
  3566 ;;		_ISR
  3567 ;;		i1_lcd_putc
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           
  3572                           ;psect for function i1_lcd_gotoxy
  3573  17E6                     i1_lcd_gotoxy:	
  3574                           
  3575                           ;incstack = 0
  3576 ;; hardware stack exceeded
  3577                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  3578                           ;i1lcd_gotoxy@x stored from wreg
  3579  17E6  00F7               	movwf	i1lcd_gotoxy@x
  3580                           
  3581                           ;lcd_4bit.c: 72: unsigned char address;
  3582                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  3583  17E7  0875               	movf	i1lcd_gotoxy@y,w
  3584  17E8  3A01               	xorlw	1
  3585  17E9  1903               	skipnz
  3586  17EA  2FF0               	goto	i1l2020
  3587  17EB  3040               	movlw	64
  3588  17EC  00F6               	movwf	??i1_lcd_gotoxy
  3589  17ED  0876               	movf	??i1_lcd_gotoxy,w
  3590  17EE  00F8               	movwf	i1lcd_gotoxy@address
  3591  17EF  2FF1               	goto	i1l2022
  3592  17F0                     i1l2020:	
  3593                           
  3594                           ;lcd_4bit.c: 75: else address=0;
  3595  17F0  01F8               	clrf	i1lcd_gotoxy@address
  3596  17F1                     i1l2022:	
  3597                           
  3598                           ;lcd_4bit.c: 77: address += x-1;
  3599  17F1  0877               	movf	i1lcd_gotoxy@x,w
  3600  17F2  3EFF               	addlw	255
  3601  17F3  00F6               	movwf	??i1_lcd_gotoxy
  3602  17F4  0876               	movf	??i1_lcd_gotoxy,w
  3603  17F5  07F8               	addwf	i1lcd_gotoxy@address,f
  3604                           
  3605                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  3606  17F6  0878               	movf	i1lcd_gotoxy@address,w
  3607  17F7  3880               	iorlw	128
  3608  17F8  00F6               	movwf	??i1_lcd_gotoxy
  3609  17F9  0876               	movf	??i1_lcd_gotoxy,w
  3610  17FA  00F2               	movwf	i1lcd_envia_byte@n
  3611  17FB  3000               	movlw	0
  3612  17FC  120A  118A  26D5   	fcall	i1_lcd_envia_byte
  3613  17FF  0008               	return
  3614  1800                     __end_ofi1_lcd_gotoxy:	
  3615                           
  3616                           	psect	text16
  3617  06D5                     __ptext16:	
  3618 ;; *************** function i1_lcd_envia_byte *****************
  3619 ;; Defined at:
  3620 ;;		line 53 in file "lcd_4bit.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  address         1    wreg     unsigned char 
  3623 ;;  n               1    2[COMMON] unsigned char 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  address         1    4[COMMON] unsigned char 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;		None               void
  3628 ;; Registers used:
  3629 ;;		wreg, status,2, status,0, pclath, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3635 ;;      Params:         1       0       0       0       0
  3636 ;;      Locals:         1       0       0       0       0
  3637 ;;      Temps:          1       0       0       0       0
  3638 ;;      Totals:         3       0       0       0       0
  3639 ;;Total ram usage:        3 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    1
  3642 ;; This function calls:
  3643 ;;		i1_lcd_envia_nibble
  3644 ;; This function is called by:
  3645 ;;		i1_lcd_gotoxy
  3646 ;;		i1_lcd_putc
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           
  3651                           ;psect for function i1_lcd_envia_byte
  3652  06D5                     i1_lcd_envia_byte:	
  3653                           
  3654                           ;incstack = 0
  3655 ;; hardware stack exceeded
  3656                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  3657                           ;i1lcd_envia_byte@address stored from wreg
  3658  06D5  00F4               	movwf	i1lcd_envia_byte@address
  3659                           
  3660                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  3661  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3662  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3663  06D8  1286               	bcf	6,5	;volatile
  3664                           
  3665                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  3666  06D9  3063               	movlw	99
  3667  06DA  00F3               	movwf	??i1_lcd_envia_byte
  3668  06DB                     u418_27:	
  3669  06DB  0BF3               	decfsz	??i1_lcd_envia_byte,f
  3670  06DC  2EDB               	goto	u418_27
  3671  06DD  2EDE               	nop2	;nop
  3672                           
  3673                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  3674  06DE  0874               	movf	i1lcd_envia_byte@address,w
  3675  06DF  1903               	btfsc	3,2
  3676  06E0  2EE5               	goto	i1l142
  3677  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3678  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3679  06E3  1686               	bsf	6,5	;volatile
  3680  06E4  2EE8               	goto	i1l143
  3681  06E5                     i1l142:	
  3682                           
  3683                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  3684  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3685  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3686  06E7  1286               	bcf	6,5	;volatile
  3687  06E8                     i1l143:	
  3688                           
  3689                           ;lcd_4bit.c: 61: _delay(1);
  3690  06E8  0000               	nop
  3691                           
  3692                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  3693  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  3694  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  3695  06EB  1206               	bcf	6,4	;volatile
  3696                           
  3697                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  3698  06EC  0872               	movf	i1lcd_envia_byte@n,w
  3699  06ED  00F3               	movwf	??i1_lcd_envia_byte
  3700  06EE  3004               	movlw	4
  3701  06EF                     u200_25:	
  3702  06EF  1003               	clrc
  3703  06F0  0CF3               	rrf	??i1_lcd_envia_byte,f
  3704  06F1  3EFF               	addlw	-1
  3705  06F2  1D03               	skipz
  3706  06F3  2EEF               	goto	u200_25
  3707  06F4  0873               	movf	??i1_lcd_envia_byte,w
  3708  06F5  120A  158A  218A  120A  118A  	fcall	i1_lcd_envia_nibble
  3709                           
  3710                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  3711  06FA  0872               	movf	i1lcd_envia_byte@n,w
  3712  06FB  390F               	andlw	15
  3713  06FC  120A  158A  218A   	fcall	i1_lcd_envia_nibble
  3714  06FF  0008               	return
  3715  0700                     __end_ofi1_lcd_envia_byte:	
  3716                           
  3717                           	psect	text17
  3718  098A                     __ptext17:	
  3719 ;; *************** function i1_lcd_envia_nibble *****************
  3720 ;; Defined at:
  3721 ;;		line 39 in file "lcd_4bit.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  n               1    wreg     unsigned char 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  n               1    1[COMMON] unsigned char 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3735 ;;      Params:         0       0       0       0       0
  3736 ;;      Locals:         1       0       0       0       0
  3737 ;;      Temps:          1       0       0       0       0
  3738 ;;      Totals:         2       0       0       0       0
  3739 ;;Total ram usage:        2 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		i1_lcd_envia_byte
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           
  3749                           ;psect for function i1_lcd_envia_nibble
  3750  098A                     i1_lcd_envia_nibble:	
  3751                           
  3752                           ;incstack = 0
  3753 ;; hardware stack exceeded
  3754                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  3755                           ;i1lcd_envia_nibble@n stored from wreg
  3756  098A  00F1               	movwf	i1lcd_envia_nibble@n
  3757                           
  3758                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  3759  098B  3000               	movlw	0
  3760  098C  1871               	btfsc	i1lcd_envia_nibble@n,0
  3761  098D  3001               	movlw	1
  3762  098E  00F0               	movwf	??i1_lcd_envia_nibble
  3763  098F  1283               	bcf	3,5	;RP0=0, select bank0
  3764  0990  1303               	bcf	3,6	;RP1=0, select bank0
  3765  0991  0806               	movf	6,w	;volatile
  3766  0992  0670               	xorwf	??i1_lcd_envia_nibble,w
  3767  0993  39FE               	andlw	-2
  3768  0994  0670               	xorwf	??i1_lcd_envia_nibble,w
  3769  0995  0086               	movwf	6	;volatile
  3770                           
  3771                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  3772  0996  3000               	movlw	0
  3773  0997  18F1               	btfsc	i1lcd_envia_nibble@n,1
  3774  0998  3001               	movlw	1
  3775  0999  00F0               	movwf	??i1_lcd_envia_nibble
  3776  099A  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3777  099B  0806               	movf	6,w	;volatile
  3778  099C  0670               	xorwf	??i1_lcd_envia_nibble,w
  3779  099D  39FD               	andlw	-3
  3780  099E  0670               	xorwf	??i1_lcd_envia_nibble,w
  3781  099F  0086               	movwf	6	;volatile
  3782                           
  3783                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  3784  09A0  3000               	movlw	0
  3785  09A1  1971               	btfsc	i1lcd_envia_nibble@n,2
  3786  09A2  3001               	movlw	1
  3787  09A3  00F0               	movwf	??i1_lcd_envia_nibble
  3788  09A4  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3789  09A5  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3790  09A6  0806               	movf	6,w	;volatile
  3791  09A7  0670               	xorwf	??i1_lcd_envia_nibble,w
  3792  09A8  39FB               	andlw	-5
  3793  09A9  0670               	xorwf	??i1_lcd_envia_nibble,w
  3794  09AA  0086               	movwf	6	;volatile
  3795                           
  3796                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  3797  09AB  3000               	movlw	0
  3798  09AC  19F1               	btfsc	i1lcd_envia_nibble@n,3
  3799  09AD  3001               	movlw	1
  3800  09AE  00F0               	movwf	??i1_lcd_envia_nibble
  3801  09AF  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3802  09B0  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3803  09B1  0DF0               	rlf	??i1_lcd_envia_nibble,f
  3804  09B2  0806               	movf	6,w	;volatile
  3805  09B3  0670               	xorwf	??i1_lcd_envia_nibble,w
  3806  09B4  39F7               	andlw	-9
  3807  09B5  0670               	xorwf	??i1_lcd_envia_nibble,w
  3808  09B6  0086               	movwf	6	;volatile
  3809                           
  3810                           ;lcd_4bit.c: 46: _delay(1);
  3811  09B7  0000               	nop
  3812                           
  3813                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  3814  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  3815  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  3816  09BA  1606               	bsf	6,4	;volatile
  3817                           
  3818                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  3819  09BB  3003               	movlw	3
  3820  09BC  00F0               	movwf	??i1_lcd_envia_nibble
  3821  09BD                     u419_27:	
  3822  09BD  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  3823  09BE  29BD               	goto	u419_27
  3824                           
  3825                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  3826  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  3827  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  3828  09C1  1206               	bcf	6,4	;volatile
  3829  09C2  0008               	return
  3830  09C3                     __end_ofi1_lcd_envia_nibble:	
  3831                           
  3832                           	psect	text18
  3833  0F46                     __ptext18:	
  3834 ;; *************** function _ftoa *****************
  3835 ;; Defined at:
  3836 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  f               3   36[BANK0 ] float 
  3839 ;;  status          1   39[BANK0 ] PTR int 
  3840 ;;		 -> ISR@status2(2), ISR@status(2), 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  l               4   45[BANK0 ] unsigned long 
  3843 ;;  rem             4   41[BANK0 ] unsigned long 
  3844 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  3845 ;;		 -> ftoa@buf(17), 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      PTR unsigned char 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3855 ;;      Params:         0       4       0       0       0
  3856 ;;      Locals:         0       9       0       0       0
  3857 ;;      Temps:          0       1       0       0       0
  3858 ;;      Totals:         0      14       0       0       0
  3859 ;;Total ram usage:       14 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    3
  3862 ;; This function calls:
  3863 ;;		___ftge
  3864 ;;		___ftmul
  3865 ;;		___ftneg
  3866 ;;		___ftsub
  3867 ;;		___fttol
  3868 ;;		___lltoft
  3869 ;;		_sprintf
  3870 ;; This function is called by:
  3871 ;;		_ISR
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           
  3876                           ;psect for function _ftoa
  3877  0F46                     _ftoa:	
  3878                           
  3879                           ;incstack = 0
  3880 ;; hardware stack exceeded
  3881                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3882  0F46  305A               	movlw	ftoa@buf& (0+255)
  3883  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  3884  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  3885  0F49  00C8               	movwf	??_ftoa
  3886  0F4A  0848               	movf	??_ftoa,w
  3887  0F4B  00D1               	movwf	ftoa@cp
  3888  0F4C  0844               	movf	ftoa@f,w
  3889  0F4D  00F0               	movwf	___ftge@ff1
  3890  0F4E  0845               	movf	ftoa@f+1,w
  3891  0F4F  00F1               	movwf	___ftge@ff1+1
  3892  0F50  0846               	movf	ftoa@f+2,w
  3893  0F51  00F2               	movwf	___ftge@ff1+2
  3894  0F52  3000               	movlw	0
  3895  0F53  00F3               	movwf	___ftge@ff2
  3896  0F54  3000               	movlw	0
  3897  0F55  00F4               	movwf	___ftge@ff2+1
  3898  0F56  3000               	movlw	0
  3899  0F57  00F5               	movwf	___ftge@ff2+2
  3900  0F58  120A  158A  23D6  120A  158A  	fcall	___ftge
  3901  0F5D  1803               	btfsc	3,0
  3902  0F5E  2F7F               	goto	i1l2358
  3903  0F5F  302D               	movlw	45
  3904  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3906  0F62  00C8               	movwf	??_ftoa
  3907  0F63  0851               	movf	ftoa@cp,w
  3908  0F64  0084               	movwf	4
  3909  0F65  0848               	movf	??_ftoa,w
  3910  0F66  1383               	bcf	3,7	;select IRP bank0
  3911  0F67  0080               	movwf	0
  3912  0F68  3001               	movlw	1
  3913  0F69  00C8               	movwf	??_ftoa
  3914  0F6A  0848               	movf	??_ftoa,w
  3915  0F6B  07D1               	addwf	ftoa@cp,f
  3916  0F6C  0844               	movf	ftoa@f,w
  3917  0F6D  00F0               	movwf	___ftneg@f1
  3918  0F6E  0845               	movf	ftoa@f+1,w
  3919  0F6F  00F1               	movwf	___ftneg@f1+1
  3920  0F70  0846               	movf	ftoa@f+2,w
  3921  0F71  00F2               	movwf	___ftneg@f1+2
  3922  0F72  160A  118A  2786  120A  158A  	fcall	___ftneg
  3923  0F77  0870               	movf	?___ftneg,w
  3924  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  3926  0F7A  00C4               	movwf	ftoa@f
  3927  0F7B  0871               	movf	?___ftneg+1,w
  3928  0F7C  00C5               	movwf	ftoa@f+1
  3929  0F7D  0872               	movf	?___ftneg+2,w
  3930  0F7E  00C6               	movwf	ftoa@f+2
  3931  0F7F                     i1l2358:	
  3932  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0F81  0844               	movf	ftoa@f,w
  3935  0F82  00B0               	movwf	___fttol@f1
  3936  0F83  0845               	movf	ftoa@f+1,w
  3937  0F84  00B1               	movwf	___fttol@f1+1
  3938  0F85  0846               	movf	ftoa@f+2,w
  3939  0F86  00B2               	movwf	___fttol@f1+2
  3940  0F87  120A  158A  255F  120A  158A  	fcall	___fttol
  3941  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  3942  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  3943  0F8E  0833               	movf	?___fttol+3,w
  3944  0F8F  00D0               	movwf	ftoa@l+3
  3945  0F90  0832               	movf	?___fttol+2,w
  3946  0F91  00CF               	movwf	ftoa@l+2
  3947  0F92  0831               	movf	?___fttol+1,w
  3948  0F93  00CE               	movwf	ftoa@l+1
  3949  0F94  0830               	movf	?___fttol,w
  3950  0F95  00CD               	movwf	ftoa@l
  3951  0F96  0850               	movf	ftoa@l+3,w
  3952  0F97  00FB               	movwf	___lltoft@c+3
  3953  0F98  084F               	movf	ftoa@l+2,w
  3954  0F99  00FA               	movwf	___lltoft@c+2
  3955  0F9A  084E               	movf	ftoa@l+1,w
  3956  0F9B  00F9               	movwf	___lltoft@c+1
  3957  0F9C  084D               	movf	ftoa@l,w
  3958  0F9D  00F8               	movwf	___lltoft@c
  3959  0F9E  120A  158A  20FD  120A  158A  	fcall	___lltoft
  3960  0FA3  0878               	movf	?___lltoft,w
  3961  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  3962  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  3963  0FA6  00A7               	movwf	___ftsub@f2
  3964  0FA7  0879               	movf	?___lltoft+1,w
  3965  0FA8  00A8               	movwf	___ftsub@f2+1
  3966  0FA9  087A               	movf	?___lltoft+2,w
  3967  0FAA  00A9               	movwf	___ftsub@f2+2
  3968  0FAB  0844               	movf	ftoa@f,w
  3969  0FAC  00AA               	movwf	___ftsub@f1
  3970  0FAD  0845               	movf	ftoa@f+1,w
  3971  0FAE  00AB               	movwf	___ftsub@f1+1
  3972  0FAF  0846               	movf	ftoa@f+2,w
  3973  0FB0  00AC               	movwf	___ftsub@f1+2
  3974  0FB1  120A  158A  201C  120A  158A  	fcall	___ftsub
  3975  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  3976  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  3977  0FB8  0827               	movf	?___ftsub,w
  3978  0FB9  00C4               	movwf	ftoa@f
  3979  0FBA  0828               	movf	?___ftsub+1,w
  3980  0FBB  00C5               	movwf	ftoa@f+1
  3981  0FBC  0829               	movf	?___ftsub+2,w
  3982  0FBD  00C6               	movwf	ftoa@f+2
  3983  0FBE  0844               	movf	ftoa@f,w
  3984  0FBF  00A3               	movwf	___ftmul@f2
  3985  0FC0  0845               	movf	ftoa@f+1,w
  3986  0FC1  00A4               	movwf	___ftmul@f2+1
  3987  0FC2  0846               	movf	ftoa@f+2,w
  3988  0FC3  00A5               	movwf	___ftmul@f2+2
  3989  0FC4  3024               	movlw	36
  3990  0FC5  00A0               	movwf	___ftmul@f1
  3991  0FC6  3074               	movlw	116
  3992  0FC7  00A1               	movwf	___ftmul@f1+1
  3993  0FC8  3049               	movlw	73
  3994  0FC9  00A2               	movwf	___ftmul@f1+2
  3995  0FCA  120A  118A  2602  120A  158A  	fcall	___ftmul
  3996  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  3997  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  3998  0FD1  0820               	movf	?___ftmul,w
  3999  0FD2  00B0               	movwf	___fttol@f1
  4000  0FD3  0821               	movf	?___ftmul+1,w
  4001  0FD4  00B1               	movwf	___fttol@f1+1
  4002  0FD5  0822               	movf	?___ftmul+2,w
  4003  0FD6  00B2               	movwf	___fttol@f1+2
  4004  0FD7  120A  158A  255F  120A  158A  	fcall	___fttol
  4005  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4006  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4007  0FDE  0833               	movf	?___fttol+3,w
  4008  0FDF  00CC               	movwf	ftoa@rem+3
  4009  0FE0  0832               	movf	?___fttol+2,w
  4010  0FE1  00CB               	movwf	ftoa@rem+2
  4011  0FE2  0831               	movf	?___fttol+1,w
  4012  0FE3  00CA               	movwf	ftoa@rem+1
  4013  0FE4  0830               	movf	?___fttol,w
  4014  0FE5  00C9               	movwf	ftoa@rem
  4015  0FE6  30A8               	movlw	(STR_8-__stringbase)& (0+255)
  4016  0FE7  00C8               	movwf	??_ftoa
  4017  0FE8  0848               	movf	??_ftoa,w
  4018  0FE9  00AA               	movwf	sprintf@f
  4019  0FEA  0850               	movf	ftoa@l+3,w
  4020  0FEB  00AE               	movwf	?_sprintf+4
  4021  0FEC  084F               	movf	ftoa@l+2,w
  4022  0FED  00AD               	movwf	?_sprintf+3
  4023  0FEE  084E               	movf	ftoa@l+1,w
  4024  0FEF  00AC               	movwf	?_sprintf+2
  4025  0FF0  084D               	movf	ftoa@l,w
  4026  0FF1  00AB               	movwf	?_sprintf+1
  4027  0FF2  084C               	movf	ftoa@rem+3,w
  4028  0FF3  00B2               	movwf	?_sprintf+8
  4029  0FF4  084B               	movf	ftoa@rem+2,w
  4030  0FF5  00B1               	movwf	?_sprintf+7
  4031  0FF6  084A               	movf	ftoa@rem+1,w
  4032  0FF7  00B0               	movwf	?_sprintf+6
  4033  0FF8  0849               	movf	ftoa@rem,w
  4034  0FF9  00AF               	movwf	?_sprintf+5
  4035  0FFA  0851               	movf	ftoa@cp,w
  4036  0FFB  120A  118A  22BF   	fcall	_sprintf
  4037  0FFE  305A               	movlw	ftoa@buf& (0+255)
  4038  0FFF  0008               	return
  4039  1000                     __end_of_ftoa:	
  4040                           
  4041                           	psect	text19
  4042  02BF                     __ptext19:	
  4043 ;; *************** function _sprintf *****************
  4044 ;; Defined at:
  4045 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  sp              1    wreg     PTR unsigned char 
  4048 ;;		 -> ftoa@buf(17), 
  4049 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4050 ;;		 -> STR_8(11), 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4053 ;;		 -> ftoa@buf(17), 
  4054 ;;  _val            4   26[BANK0 ] struct .
  4055 ;;  prec            2   33[BANK0 ] int 
  4056 ;;  width           2   31[BANK0 ] int 
  4057 ;;  c               1   35[BANK0 ] char 
  4058 ;;  ap              1   25[BANK0 ] PTR void [1]
  4059 ;;		 -> ?_sprintf(2), 
  4060 ;;  flag            1   24[BANK0 ] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  2   10[BANK0 ] int 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4070 ;;      Params:         0       9       0       0       0
  4071 ;;      Locals:         0      12       0       0       0
  4072 ;;      Temps:          0       5       0       0       0
  4073 ;;      Totals:         0      26       0       0       0
  4074 ;;Total ram usage:       26 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    1
  4077 ;; This function calls:
  4078 ;;		___lldiv
  4079 ;;		___llmod
  4080 ;;		___wmul
  4081 ;;		_isdigit
  4082 ;; This function is called by:
  4083 ;;		_ftoa
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           
  4088                           ;psect for function _sprintf
  4089  02BF                     _sprintf:	
  4090                           
  4091                           ;incstack = 0
  4092 ;; hardware stack exceeded
  4093                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4094                           ;sprintf@sp stored from wreg
  4095  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  4096  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  4097  02C1  00BE               	movwf	sprintf@sp
  4098                           
  4099                           ;doprnt.c: 494: va_list ap;
  4100                           ;doprnt.c: 499: signed char c;
  4101                           ;doprnt.c: 501: int width;
  4102                           ;doprnt.c: 504: int prec;
  4103                           ;doprnt.c: 508: unsigned char flag;
  4104                           ;doprnt.c: 527: union {
  4105                           ;doprnt.c: 528: unsigned long _val;
  4106                           ;doprnt.c: 529: struct {
  4107                           ;doprnt.c: 530: const char * _cp;
  4108                           ;doprnt.c: 531: unsigned _len;
  4109                           ;doprnt.c: 532: } _str;
  4110                           ;doprnt.c: 533: } _val;
  4111                           ;doprnt.c: 542: *ap = __va_start();
  4112  02C2  302B               	movlw	(?_sprintf+1)& (0+255)
  4113  02C3  00B3               	movwf	??_sprintf
  4114  02C4  0833               	movf	??_sprintf,w
  4115  02C5  00B9               	movwf	sprintf@ap
  4116  02C6                     i1l2144:	
  4117                           ;doprnt.c: 545: while(c = *f++) {
  4118                           
  4119  02C6  3001               	movlw	1
  4120  02C7  07AA               	addwf	sprintf@f,f
  4121  02C8  30FF               	movlw	-1
  4122  02C9  072A               	addwf	sprintf@f,w
  4123  02CA  0084               	movwf	4
  4124  02CB  120A  118A  270A  120A  118A  	fcall	stringdir
  4125  02D0  00B3               	movwf	??_sprintf
  4126  02D1  0833               	movf	??_sprintf,w
  4127  02D2  00C3               	movwf	sprintf@c
  4128  02D3  08C3               	movf	sprintf@c,f
  4129  02D4  1903               	btfsc	3,2
  4130  02D5  2CF6               	goto	i1l2146
  4131                           
  4132                           ;doprnt.c: 547: if(c != '%')
  4133  02D6  0843               	movf	sprintf@c,w
  4134  02D7  3A25               	xorlw	37
  4135  02D8  1903               	skipnz
  4136  02D9  2AE6               	goto	i1l2054
  4137                           
  4138                           ;doprnt.c: 549: {
  4139                           ;doprnt.c: 550: ((*sp++ = (c)));
  4140  02DA  0843               	movf	sprintf@c,w
  4141  02DB  00B3               	movwf	??_sprintf
  4142  02DC  083E               	movf	sprintf@sp,w
  4143  02DD  0084               	movwf	4
  4144  02DE  0833               	movf	??_sprintf,w
  4145  02DF  1383               	bcf	3,7	;select IRP bank0
  4146  02E0  0080               	movwf	0
  4147  02E1  3001               	movlw	1
  4148  02E2  00B3               	movwf	??_sprintf
  4149  02E3  0833               	movf	??_sprintf,w
  4150  02E4  07BE               	addwf	sprintf@sp,f
  4151                           
  4152                           ;doprnt.c: 551: continue;
  4153  02E5  2AC6               	goto	i1l2144
  4154  02E6                     i1l2054:	
  4155                           
  4156                           ;doprnt.c: 552: }
  4157                           ;doprnt.c: 555: width = 0;
  4158  02E6  01BF               	clrf	sprintf@width
  4159  02E7  01C0               	clrf	sprintf@width+1
  4160                           
  4161                           ;doprnt.c: 557: flag = 0;
  4162  02E8  01B8               	clrf	sprintf@flag
  4163                           
  4164                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4165  02E9  082A               	movf	sprintf@f,w
  4166  02EA  0084               	movwf	4
  4167  02EB  120A  118A  270A  120A  118A  	fcall	stringdir
  4168  02F0  160A  118A  2796  120A  118A  	fcall	_isdigit
  4169  02F5  1C03               	btfss	3,0
  4170  02F6  2B39               	goto	i1l2068
  4171                           
  4172                           ;doprnt.c: 607: width = 0;
  4173  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  4174  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  4175  02F9  01BF               	clrf	sprintf@width
  4176  02FA  01C0               	clrf	sprintf@width+1
  4177  02FB                     i1l2060:	
  4178                           ;doprnt.c: 608: do {
  4179                           
  4180                           
  4181                           ;doprnt.c: 609: width *= 10;
  4182  02FB  300A               	movlw	10
  4183  02FC  00F0               	movwf	___wmul@multiplier
  4184  02FD  3000               	movlw	0
  4185  02FE  00F1               	movwf	___wmul@multiplier+1
  4186  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4187  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4188  0301  0840               	movf	sprintf@width+1,w
  4189  0302  01F3               	clrf	___wmul@multiplicand+1
  4190  0303  07F3               	addwf	___wmul@multiplicand+1,f
  4191  0304  083F               	movf	sprintf@width,w
  4192  0305  01F2               	clrf	___wmul@multiplicand
  4193  0306  07F2               	addwf	___wmul@multiplicand,f
  4194  0307  120A  158A  20B7  120A  118A  	fcall	___wmul
  4195  030C  0871               	movf	?___wmul+1,w
  4196  030D  1283               	bcf	3,5	;RP0=0, select bank0
  4197  030E  1303               	bcf	3,6	;RP1=0, select bank0
  4198  030F  01C0               	clrf	sprintf@width+1
  4199  0310  07C0               	addwf	sprintf@width+1,f
  4200  0311  0870               	movf	?___wmul,w
  4201  0312  01BF               	clrf	sprintf@width
  4202  0313  07BF               	addwf	sprintf@width,f
  4203                           
  4204                           ;doprnt.c: 610: width += *f++ - '0';
  4205  0314  082A               	movf	sprintf@f,w
  4206  0315  0084               	movwf	4
  4207  0316  120A  118A  270A  120A  118A  	fcall	stringdir
  4208  031B  3ED0               	addlw	208
  4209  031C  00B3               	movwf	??_sprintf
  4210  031D  30FF               	movlw	255
  4211  031E  1803               	skipnc
  4212  031F  3000               	movlw	0
  4213  0320  00B4               	movwf	??_sprintf+1
  4214  0321  0833               	movf	??_sprintf,w
  4215  0322  07BF               	addwf	sprintf@width,f
  4216  0323  1803               	skipnc
  4217  0324  0AC0               	incf	sprintf@width+1,f
  4218  0325  0834               	movf	??_sprintf+1,w
  4219  0326  07C0               	addwf	sprintf@width+1,f
  4220  0327  3001               	movlw	1
  4221  0328  00B3               	movwf	??_sprintf
  4222  0329  0833               	movf	??_sprintf,w
  4223  032A  07AA               	addwf	sprintf@f,f
  4224                           
  4225                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4226  032B  082A               	movf	sprintf@f,w
  4227  032C  0084               	movwf	4
  4228  032D  120A  118A  270A  120A  118A  	fcall	stringdir
  4229  0332  160A  118A  2796  120A  118A  	fcall	_isdigit
  4230  0337  1803               	btfsc	3,0
  4231  0338  2AFB               	goto	i1l2060
  4232  0339                     i1l2068:	
  4233                           
  4234                           ;doprnt.c: 617: }
  4235                           ;doprnt.c: 620: if(*f == '.') {
  4236  0339  1283               	bcf	3,5	;RP0=0, select bank0
  4237  033A  1303               	bcf	3,6	;RP1=0, select bank0
  4238  033B  082A               	movf	sprintf@f,w
  4239  033C  0084               	movwf	4
  4240  033D  120A  118A  270A  120A  118A  	fcall	stringdir
  4241  0342  3A2E               	xorlw	46
  4242  0343  1D03               	skipz
  4243  0344  2B87               	goto	i1l2080
  4244                           
  4245                           ;doprnt.c: 622: f++;
  4246  0345  3001               	movlw	1
  4247  0346  00B3               	movwf	??_sprintf
  4248  0347  0833               	movf	??_sprintf,w
  4249  0348  07AA               	addwf	sprintf@f,f
  4250                           
  4251                           ;doprnt.c: 629: {
  4252                           ;doprnt.c: 630: prec = 0;
  4253  0349  01C1               	clrf	sprintf@prec
  4254  034A  01C2               	clrf	sprintf@prec+1
  4255  034B                     i1l2078:	
  4256                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4257                           
  4258  034B  082A               	movf	sprintf@f,w
  4259  034C  0084               	movwf	4
  4260  034D  120A  118A  270A  120A  118A  	fcall	stringdir
  4261  0352  160A  118A  2796  120A  118A  	fcall	_isdigit
  4262  0357  1C03               	btfss	3,0
  4263  0358  2B93               	goto	i1l2086
  4264                           
  4265                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4266  0359  1283               	bcf	3,5	;RP0=0, select bank0
  4267  035A  1303               	bcf	3,6	;RP1=0, select bank0
  4268  035B  0842               	movf	sprintf@prec+1,w
  4269  035C  01F1               	clrf	___wmul@multiplier+1
  4270  035D  07F1               	addwf	___wmul@multiplier+1,f
  4271  035E  0841               	movf	sprintf@prec,w
  4272  035F  01F0               	clrf	___wmul@multiplier
  4273  0360  07F0               	addwf	___wmul@multiplier,f
  4274  0361  300A               	movlw	10
  4275  0362  00F2               	movwf	___wmul@multiplicand
  4276  0363  3000               	movlw	0
  4277  0364  00F3               	movwf	___wmul@multiplicand+1
  4278  0365  120A  158A  20B7  120A  118A  	fcall	___wmul
  4279  036A  1283               	bcf	3,5	;RP0=0, select bank0
  4280  036B  1303               	bcf	3,6	;RP1=0, select bank0
  4281  036C  082A               	movf	sprintf@f,w
  4282  036D  0084               	movwf	4
  4283  036E  120A  118A  270A  120A  118A  	fcall	stringdir
  4284  0373  0770               	addwf	?___wmul,w
  4285  0374  00B3               	movwf	??_sprintf
  4286  0375  3000               	movlw	0
  4287  0376  1803               	skipnc
  4288  0377  3001               	movlw	1
  4289  0378  0771               	addwf	?___wmul+1,w
  4290  0379  00B4               	movwf	??_sprintf+1
  4291  037A  0833               	movf	??_sprintf,w
  4292  037B  3ED0               	addlw	208
  4293  037C  00C1               	movwf	sprintf@prec
  4294  037D  0834               	movf	??_sprintf+1,w
  4295  037E  1803               	skipnc
  4296  037F  3E01               	addlw	1
  4297  0380  3EFF               	addlw	255
  4298  0381  00C2               	movwf	sprintf@prec+1
  4299  0382  3001               	movlw	1
  4300  0383  00B3               	movwf	??_sprintf
  4301  0384  0833               	movf	??_sprintf,w
  4302  0385  07AA               	addwf	sprintf@f,f
  4303  0386  2B4B               	goto	i1l2078
  4304  0387                     i1l2080:	
  4305                           ;doprnt.c: 633: }
  4306                           ;doprnt.c: 634: } else {
  4307                           
  4308                           
  4309                           ;doprnt.c: 635: prec = 0;
  4310  0387  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0388  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0389  01C1               	clrf	sprintf@prec
  4313  038A  01C2               	clrf	sprintf@prec+1
  4314                           
  4315                           ;doprnt.c: 644: switch(c = *f++) {
  4316                           
  4317                           ;doprnt.c: 639: }
  4318                           ;doprnt.c: 642: loop:
  4319  038B  2B93               	goto	i1l2086
  4320  038C                     i1l222:	
  4321                           ;doprnt.c: 650: case 'l':
  4322                           
  4323                           ;doprnt.c: 647: goto alldone;
  4324                           
  4325                           ;doprnt.c: 646: case 0:
  4326                           
  4327                           
  4328                           ;doprnt.c: 652: flag |= 0x10;
  4329  038C  1638               	bsf	sprintf@flag,4
  4330                           
  4331                           ;doprnt.c: 653: goto loop;
  4332  038D  2B93               	goto	i1l2086
  4333  038E                     i1l2082:	
  4334                           ;doprnt.c: 826: case 'u':
  4335                           
  4336                           ;doprnt.c: 822: continue;
  4337                           
  4338                           ;doprnt.c: 811: default:
  4339                           
  4340                           
  4341                           ;doprnt.c: 827: flag |= 0xC0;
  4342  038E  30C0               	movlw	192
  4343  038F  00B3               	movwf	??_sprintf
  4344  0390  0833               	movf	??_sprintf,w
  4345  0391  04B8               	iorwf	sprintf@flag,f
  4346                           
  4347                           ;doprnt.c: 831: }
  4348                           
  4349                           ;doprnt.c: 828: break;
  4350  0392  2BAA               	goto	i1l225
  4351  0393                     i1l2086:	
  4352  0393  3001               	movlw	1
  4353  0394  1283               	bcf	3,5	;RP0=0, select bank0
  4354  0395  1303               	bcf	3,6	;RP1=0, select bank0
  4355  0396  07AA               	addwf	sprintf@f,f
  4356  0397  30FF               	movlw	-1
  4357  0398  072A               	addwf	sprintf@f,w
  4358  0399  0084               	movwf	4
  4359  039A  120A  118A  270A  120A  118A  	fcall	stringdir
  4360  039F  00C3               	movwf	sprintf@c
  4361                           
  4362                           ; Switch size 1, requested type "space"
  4363                           ; Number of cases is 3, Range of values is 0 to 117
  4364                           ; switch strategies available:
  4365                           ; Name         Instructions Cycles
  4366                           ; simple_byte           10     6 (average)
  4367                           ; jumptable            260     6 (fixed)
  4368                           ;	Chosen strategy is simple_byte
  4369  03A0  3A00               	xorlw	0	; case 0
  4370  03A1  1903               	skipnz
  4371  03A2  2CF6               	goto	i1l2146
  4372  03A3  3A6C               	xorlw	108	; case 108
  4373  03A4  1903               	skipnz
  4374  03A5  2B8C               	goto	i1l222
  4375  03A6  3A19               	xorlw	25	; case 117
  4376  03A7  1903               	skipnz
  4377  03A8  2B8E               	goto	i1l2082
  4378  03A9  2AC6               	goto	i1l2144
  4379  03AA                     i1l225:	
  4380                           
  4381                           ;doprnt.c: 1282: {
  4382                           ;doprnt.c: 1290: if(flag & 0x10)
  4383  03AA  1E38               	btfss	sprintf@flag,4
  4384  03AB  2BBC               	goto	i1l2092
  4385                           
  4386                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  4387  03AC  0839               	movf	sprintf@ap,w
  4388  03AD  0084               	movwf	4
  4389  03AE  1383               	bcf	3,7	;select IRP bank0
  4390  03AF  0800               	movf	0,w
  4391  03B0  00BA               	movwf	sprintf@_val
  4392  03B1  0A84               	incf	4,f
  4393  03B2  0800               	movf	0,w
  4394  03B3  00BB               	movwf	sprintf@_val+1
  4395  03B4  0A84               	incf	4,f
  4396  03B5  0800               	movf	0,w
  4397  03B6  00BC               	movwf	sprintf@_val+2
  4398  03B7  0A84               	incf	4,f
  4399  03B8  0800               	movf	0,w
  4400  03B9  00BD               	movwf	sprintf@_val+3
  4401  03BA  3004               	movlw	4
  4402  03BB  2BCB               	goto	L2
  4403  03BC                     i1l2092:	
  4404                           
  4405                           ;doprnt.c: 1292: else
  4406                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4407  03BC  0839               	movf	sprintf@ap,w
  4408  03BD  0084               	movwf	4
  4409  03BE  1383               	bcf	3,7	;select IRP bank0
  4410  03BF  0800               	movf	0,w
  4411  03C0  00B3               	movwf	??_sprintf
  4412  03C1  0A84               	incf	4,f
  4413  03C2  0800               	movf	0,w
  4414  03C3  00B4               	movwf	??_sprintf+1
  4415  03C4  0833               	movf	??_sprintf,w
  4416  03C5  00BA               	movwf	sprintf@_val
  4417  03C6  0834               	movf	??_sprintf+1,w
  4418  03C7  00BB               	movwf	sprintf@_val+1
  4419  03C8  01BC               	clrf	sprintf@_val+2
  4420  03C9  01BD               	clrf	sprintf@_val+3
  4421  03CA  3002               	movlw	2
  4422  03CB                     L2:	
  4423  03CB  00B3               	movwf	??_sprintf
  4424  03CC  0833               	movf	??_sprintf,w
  4425  03CD  07B9               	addwf	sprintf@ap,f
  4426                           
  4427                           ;doprnt.c: 1296: }
  4428                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4429  03CE  0842               	movf	sprintf@prec+1,w
  4430  03CF  0441               	iorwf	sprintf@prec,w
  4431  03D0  1D03               	skipz
  4432  03D1  2BDE               	goto	i1l2102
  4433  03D2  083D               	movf	sprintf@_val+3,w
  4434  03D3  043C               	iorwf	sprintf@_val+2,w
  4435  03D4  043B               	iorwf	sprintf@_val+1,w
  4436  03D5  043A               	iorwf	sprintf@_val,w
  4437  03D6  1D03               	skipz
  4438  03D7  2BDE               	goto	i1l2102
  4439                           
  4440                           ;doprnt.c: 1300: prec++;
  4441  03D8  3001               	movlw	1
  4442  03D9  07C1               	addwf	sprintf@prec,f
  4443  03DA  1803               	skipnc
  4444  03DB  0AC2               	incf	sprintf@prec+1,f
  4445  03DC  3000               	movlw	0
  4446  03DD  07C2               	addwf	sprintf@prec+1,f
  4447  03DE                     i1l2102:	
  4448                           
  4449                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4450  03DE  01C3               	clrf	sprintf@c
  4451  03DF  0AC3               	incf	sprintf@c,f
  4452  03E0  0843               	movf	sprintf@c,w
  4453  03E1  3A0A               	xorlw	10
  4454  03E2  1903               	btfsc	3,2
  4455  03E3  2C20               	goto	i1l2114
  4456  03E4                     i1l2106:	
  4457                           
  4458                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4459  03E4  0843               	movf	sprintf@c,w
  4460  03E5  00B3               	movwf	??_sprintf
  4461  03E6  3001               	movlw	1
  4462  03E7                     u257_25:	
  4463  03E7  1003               	clrc
  4464  03E8  0DB3               	rlf	??_sprintf,f
  4465  03E9  3EFF               	addlw	-1
  4466  03EA  1D03               	skipz
  4467  03EB  2BE7               	goto	u257_25
  4468  03EC  1003               	clrc
  4469  03ED  0D33               	rlf	??_sprintf,w
  4470  03EE  3E01               	addlw	low (_dpowers-__stringbase)
  4471  03EF  0084               	movwf	4
  4472  03F0  120A  118A  270A  120A  118A  	fcall	stringdir
  4473  03F5  00B4               	movwf	??_sprintf+1
  4474  03F6  120A  118A  270A  120A  118A  	fcall	stringdir
  4475  03FB  00B5               	movwf	??_sprintf+2
  4476  03FC  120A  118A  270A  120A  118A  	fcall	stringdir
  4477  0401  00B6               	movwf	??_sprintf+3
  4478  0402  120A  118A  270A  120A  118A  	fcall	stringdir
  4479  0407  00B7               	movwf	??_sprintf+4
  4480  0408  0837               	movf	??_sprintf+4,w
  4481  0409  023D               	subwf	sprintf@_val+3,w
  4482  040A  1D03               	skipz
  4483  040B  2C16               	goto	u258_25
  4484  040C  0836               	movf	??_sprintf+3,w
  4485  040D  023C               	subwf	sprintf@_val+2,w
  4486  040E  1D03               	skipz
  4487  040F  2C16               	goto	u258_25
  4488  0410  0835               	movf	??_sprintf+2,w
  4489  0411  023B               	subwf	sprintf@_val+1,w
  4490  0412  1D03               	skipz
  4491  0413  2C16               	goto	u258_25
  4492  0414  0834               	movf	??_sprintf+1,w
  4493  0415  023A               	subwf	sprintf@_val,w
  4494  0416                     u258_25:	
  4495  0416  1C03               	btfss	3,0
  4496  0417  2C20               	goto	i1l2114
  4497                           
  4498                           ;doprnt.c: 1316: break;
  4499  0418  3001               	movlw	1
  4500  0419  00B3               	movwf	??_sprintf
  4501  041A  0833               	movf	??_sprintf,w
  4502  041B  07C3               	addwf	sprintf@c,f
  4503  041C  0843               	movf	sprintf@c,w
  4504  041D  3A0A               	xorlw	10
  4505  041E  1D03               	skipz
  4506  041F  2BE4               	goto	i1l2106
  4507  0420                     i1l2114:	
  4508                           
  4509                           ;doprnt.c: 1348: if(c < prec)
  4510  0420  0843               	movf	sprintf@c,w
  4511  0421  00B3               	movwf	??_sprintf
  4512  0422  01B4               	clrf	??_sprintf+1
  4513  0423  1BB3               	btfsc	??_sprintf,7
  4514  0424  03B4               	decf	??_sprintf+1,f
  4515  0425  0834               	movf	??_sprintf+1,w
  4516  0426  3A80               	xorlw	128
  4517  0427  00B5               	movwf	??_sprintf+2
  4518  0428  0842               	movf	sprintf@prec+1,w
  4519  0429  3A80               	xorlw	128
  4520  042A  0235               	subwf	??_sprintf+2,w
  4521  042B  1D03               	skipz
  4522  042C  2C2F               	goto	u260_25
  4523  042D  0841               	movf	sprintf@prec,w
  4524  042E  0233               	subwf	??_sprintf,w
  4525  042F                     u260_25:	
  4526  042F  1803               	skipnc
  4527  0430  2C38               	goto	i1l2118
  4528                           
  4529                           ;doprnt.c: 1349: c = prec;
  4530  0431  1283               	bcf	3,5	;RP0=0, select bank0
  4531  0432  1303               	bcf	3,6	;RP1=0, select bank0
  4532  0433  0841               	movf	sprintf@prec,w
  4533  0434  00B3               	movwf	??_sprintf
  4534  0435  0833               	movf	??_sprintf,w
  4535  0436  00C3               	movwf	sprintf@c
  4536  0437  2C52               	goto	i1l2122
  4537  0438                     i1l2118:	
  4538                           
  4539                           ;doprnt.c: 1350: else if(prec < c)
  4540  0438  1283               	bcf	3,5	;RP0=0, select bank0
  4541  0439  1303               	bcf	3,6	;RP1=0, select bank0
  4542  043A  0843               	movf	sprintf@c,w
  4543  043B  00B3               	movwf	??_sprintf
  4544  043C  01B4               	clrf	??_sprintf+1
  4545  043D  1BB3               	btfsc	??_sprintf,7
  4546  043E  03B4               	decf	??_sprintf+1,f
  4547  043F  0842               	movf	sprintf@prec+1,w
  4548  0440  3A80               	xorlw	128
  4549  0441  00B5               	movwf	??_sprintf+2
  4550  0442  0834               	movf	??_sprintf+1,w
  4551  0443  3A80               	xorlw	128
  4552  0444  0235               	subwf	??_sprintf+2,w
  4553  0445  1D03               	skipz
  4554  0446  2C49               	goto	u261_25
  4555  0447  0833               	movf	??_sprintf,w
  4556  0448  0241               	subwf	sprintf@prec,w
  4557  0449                     u261_25:	
  4558  0449  1803               	skipnc
  4559  044A  2C52               	goto	i1l2122
  4560                           
  4561                           ;doprnt.c: 1351: prec = c;
  4562  044B  1283               	bcf	3,5	;RP0=0, select bank0
  4563  044C  1303               	bcf	3,6	;RP1=0, select bank0
  4564  044D  0843               	movf	sprintf@c,w
  4565  044E  00C1               	movwf	sprintf@prec
  4566  044F  01C2               	clrf	sprintf@prec+1
  4567  0450  1BC1               	btfsc	sprintf@prec,7
  4568  0451  03C2               	decf	sprintf@prec+1,f
  4569  0452                     i1l2122:	
  4570                           
  4571                           ;doprnt.c: 1390: if(width > c)
  4572  0452  1283               	bcf	3,5	;RP0=0, select bank0
  4573  0453  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0454  0843               	movf	sprintf@c,w
  4575  0455  00B3               	movwf	??_sprintf
  4576  0456  01B4               	clrf	??_sprintf+1
  4577  0457  1BB3               	btfsc	??_sprintf,7
  4578  0458  03B4               	decf	??_sprintf+1,f
  4579  0459  0834               	movf	??_sprintf+1,w
  4580  045A  3A80               	xorlw	128
  4581  045B  00B5               	movwf	??_sprintf+2
  4582  045C  0840               	movf	sprintf@width+1,w
  4583  045D  3A80               	xorlw	128
  4584  045E  0235               	subwf	??_sprintf+2,w
  4585  045F  1D03               	skipz
  4586  0460  2C63               	goto	u262_25
  4587  0461  083F               	movf	sprintf@width,w
  4588  0462  0233               	subwf	??_sprintf,w
  4589  0463                     u262_25:	
  4590  0463  1803               	skipnc
  4591  0464  2C73               	goto	i1l2126
  4592                           
  4593                           ;doprnt.c: 1391: width -= c;
  4594  0465  1283               	bcf	3,5	;RP0=0, select bank0
  4595  0466  1303               	bcf	3,6	;RP1=0, select bank0
  4596  0467  0843               	movf	sprintf@c,w
  4597  0468  00B3               	movwf	??_sprintf
  4598  0469  01B4               	clrf	??_sprintf+1
  4599  046A  1BB3               	btfsc	??_sprintf,7
  4600  046B  03B4               	decf	??_sprintf+1,f
  4601  046C  0833               	movf	??_sprintf,w
  4602  046D  02BF               	subwf	sprintf@width,f
  4603  046E  0834               	movf	??_sprintf+1,w
  4604  046F  1C03               	skipc
  4605  0470  03C0               	decf	sprintf@width+1,f
  4606  0471  02C0               	subwf	sprintf@width+1,f
  4607  0472  2C77               	goto	i1l2128
  4608  0473                     i1l2126:	
  4609                           
  4610                           ;doprnt.c: 1392: else
  4611                           ;doprnt.c: 1393: width = 0;
  4612  0473  1283               	bcf	3,5	;RP0=0, select bank0
  4613  0474  1303               	bcf	3,6	;RP1=0, select bank0
  4614  0475  01BF               	clrf	sprintf@width
  4615  0476  01C0               	clrf	sprintf@width+1
  4616  0477                     i1l2128:	
  4617                           
  4618                           ;doprnt.c: 1431: {
  4619                           ;doprnt.c: 1433: if(width
  4620                           ;doprnt.c: 1437: )
  4621  0477  0840               	movf	sprintf@width+1,w
  4622  0478  043F               	iorwf	sprintf@width,w
  4623  0479  1903               	skipnz
  4624  047A  2CE7               	goto	i1l2142
  4625                           
  4626                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4627                           
  4628                           ;doprnt.c: 1438: do
  4629  047B  3020               	movlw	32
  4630  047C  00B3               	movwf	??_sprintf
  4631  047D  083E               	movf	sprintf@sp,w
  4632  047E  0084               	movwf	4
  4633  047F  0833               	movf	??_sprintf,w
  4634  0480  1383               	bcf	3,7	;select IRP bank0
  4635  0481  0080               	movwf	0
  4636  0482  3001               	movlw	1
  4637  0483  00B3               	movwf	??_sprintf
  4638  0484  0833               	movf	??_sprintf,w
  4639  0485  07BE               	addwf	sprintf@sp,f
  4640                           
  4641                           ;doprnt.c: 1440: while(--width);
  4642  0486  30FF               	movlw	255
  4643  0487  07BF               	addwf	sprintf@width,f
  4644  0488  1803               	skipnc
  4645  0489  0AC0               	incf	sprintf@width+1,f
  4646  048A  30FF               	movlw	255
  4647  048B  07C0               	addwf	sprintf@width+1,f
  4648  048C  2C77               	goto	i1l2128
  4649  048D                     i1l2136:	
  4650                           ;doprnt.c: 1478: }
  4651                           ;doprnt.c: 1483: while(prec--) {
  4652                           
  4653                           
  4654                           ;doprnt.c: 1487: {
  4655                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4656  048D  3000               	movlw	0
  4657  048E  00A3               	movwf	___llmod@divisor+3
  4658  048F  3000               	movlw	0
  4659  0490  00A2               	movwf	___llmod@divisor+2
  4660  0491  3000               	movlw	0
  4661  0492  00A1               	movwf	___llmod@divisor+1
  4662  0493  300A               	movlw	10
  4663  0494  00A0               	movwf	___llmod@divisor
  4664  0495  0841               	movf	sprintf@prec,w
  4665  0496  00B3               	movwf	??_sprintf
  4666  0497  3001               	movlw	1
  4667  0498                     u265_25:	
  4668  0498  1003               	clrc
  4669  0499  0DB3               	rlf	??_sprintf,f
  4670  049A  3EFF               	addlw	-1
  4671  049B  1D03               	skipz
  4672  049C  2C98               	goto	u265_25
  4673  049D  1003               	clrc
  4674  049E  0D33               	rlf	??_sprintf,w
  4675  049F  3E01               	addlw	low (_dpowers-__stringbase)
  4676  04A0  0084               	movwf	4
  4677  04A1  120A  118A  270A  120A  118A  	fcall	stringdir
  4678  04A6  00F0               	movwf	___lldiv@divisor
  4679  04A7  120A  118A  270A  120A  118A  	fcall	stringdir
  4680  04AC  00F1               	movwf	___lldiv@divisor+1
  4681  04AD  120A  118A  270A  120A  118A  	fcall	stringdir
  4682  04B2  00F2               	movwf	___lldiv@divisor+2
  4683  04B3  120A  118A  270A  120A  118A  	fcall	stringdir
  4684  04B8  00F3               	movwf	___lldiv@divisor+3
  4685  04B9  083D               	movf	sprintf@_val+3,w
  4686  04BA  00F7               	movwf	___lldiv@dividend+3
  4687  04BB  083C               	movf	sprintf@_val+2,w
  4688  04BC  00F6               	movwf	___lldiv@dividend+2
  4689  04BD  083B               	movf	sprintf@_val+1,w
  4690  04BE  00F5               	movwf	___lldiv@dividend+1
  4691  04BF  083A               	movf	sprintf@_val,w
  4692  04C0  00F4               	movwf	___lldiv@dividend
  4693  04C1  120A  158A  2433  120A  118A  	fcall	___lldiv
  4694  04C6  0873               	movf	?___lldiv+3,w
  4695  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  4696  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  4697  04C9  00A7               	movwf	___llmod@dividend+3
  4698  04CA  0872               	movf	?___lldiv+2,w
  4699  04CB  00A6               	movwf	___llmod@dividend+2
  4700  04CC  0871               	movf	?___lldiv+1,w
  4701  04CD  00A5               	movwf	___llmod@dividend+1
  4702  04CE  0870               	movf	?___lldiv,w
  4703  04CF  00A4               	movwf	___llmod@dividend
  4704  04D0  120A  158A  2285  120A  118A  	fcall	___llmod
  4705  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  4706  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  4707  04D7  0820               	movf	?___llmod,w
  4708  04D8  3E30               	addlw	48
  4709  04D9  00B4               	movwf	??_sprintf+1
  4710  04DA  0834               	movf	??_sprintf+1,w
  4711  04DB  00C3               	movwf	sprintf@c
  4712                           
  4713                           ;doprnt.c: 1532: }
  4714                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4715  04DC  0843               	movf	sprintf@c,w
  4716  04DD  00B3               	movwf	??_sprintf
  4717  04DE  083E               	movf	sprintf@sp,w
  4718  04DF  0084               	movwf	4
  4719  04E0  0833               	movf	??_sprintf,w
  4720  04E1  1383               	bcf	3,7	;select IRP bank0
  4721  04E2  0080               	movwf	0
  4722  04E3  3001               	movlw	1
  4723  04E4  00B3               	movwf	??_sprintf
  4724  04E5  0833               	movf	??_sprintf,w
  4725  04E6  07BE               	addwf	sprintf@sp,f
  4726  04E7                     i1l2142:	
  4727  04E7  30FF               	movlw	255
  4728  04E8  07C1               	addwf	sprintf@prec,f
  4729  04E9  1803               	skipnc
  4730  04EA  0AC2               	incf	sprintf@prec+1,f
  4731  04EB  30FF               	movlw	255
  4732  04EC  07C2               	addwf	sprintf@prec+1,f
  4733  04ED  30FF               	movlw	255
  4734  04EE  0642               	xorwf	sprintf@prec+1,w
  4735  04EF  1D03               	skipz
  4736  04F0  2CF3               	goto	u266_25
  4737  04F1  30FF               	movlw	255
  4738  04F2  0641               	xorwf	sprintf@prec,w
  4739  04F3                     u266_25:	
  4740  04F3  1903               	btfsc	3,2
  4741  04F4  2AC6               	goto	i1l2144
  4742  04F5  2C8D               	goto	i1l2136
  4743  04F6                     i1l2146:	
  4744                           ;doprnt.c: 1534: }
  4745                           ;doprnt.c: 1542: }
  4746                           ;doprnt.c: 1544: alldone:
  4747                           
  4748                           
  4749                           ;doprnt.c: 1547: *sp = 0;
  4750  04F6  083E               	movf	sprintf@sp,w
  4751  04F7  0084               	movwf	4
  4752  04F8  1383               	bcf	3,7	;select IRP bank0
  4753  04F9  0180               	clrf	0
  4754  04FA  0008               	return
  4755  04FB                     __end_of_sprintf:	
  4756                           ;doprnt.c: 1549: return 0;
  4757                           ;	Return value of _sprintf is never used
  4758                           
  4759                           
  4760                           	psect	text20
  4761  1796                     __ptext20:	
  4762 ;; *************** function _isdigit *****************
  4763 ;; Defined at:
  4764 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;  c               1    wreg     unsigned char 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  c               1    1[COMMON] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;		None               void
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4778 ;;      Params:         0       0       0       0       0
  4779 ;;      Locals:         2       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0
  4781 ;;      Totals:         2       0       0       0       0
  4782 ;;Total ram usage:        2 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_sprintf
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           
  4792                           ;psect for function _isdigit
  4793  1796                     _isdigit:	
  4794                           
  4795                           ;incstack = 0
  4796 ;; hardware stack exceeded
  4797                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4798                           ;isdigit@c stored from wreg
  4799  1796  00F1               	movwf	isdigit@c
  4800  1797  01F0               	clrf	_isdigit$870
  4801  1798  303A               	movlw	58
  4802  1799  0271               	subwf	isdigit@c,w
  4803  179A  1803               	skipnc
  4804  179B  2FA2               	goto	i1l1880
  4805  179C  3030               	movlw	48
  4806  179D  0271               	subwf	isdigit@c,w
  4807  179E  1C03               	skipc
  4808  179F  2FA2               	goto	i1l1880
  4809  17A0  01F0               	clrf	_isdigit$870
  4810  17A1  0AF0               	incf	_isdigit$870,f
  4811  17A2                     i1l1880:	
  4812  17A2  0C70               	rrf	_isdigit$870,w
  4813  17A3  0008               	return
  4814  17A4                     __end_of_isdigit:	
  4815                           
  4816                           	psect	text21
  4817  08B7                     __ptext21:	
  4818 ;; *************** function ___wmul *****************
  4819 ;; Defined at:
  4820 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  multiplier      2    0[COMMON] unsigned int 
  4823 ;;  multiplicand    2    2[COMMON] unsigned int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  product         2    4[COMMON] unsigned int 
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  2    0[COMMON] unsigned int 
  4828 ;; Registers used:
  4829 ;;		wreg, status,2, status,0
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4835 ;;      Params:         4       0       0       0       0
  4836 ;;      Locals:         2       0       0       0       0
  4837 ;;      Temps:          0       0       0       0       0
  4838 ;;      Totals:         6       0       0       0       0
  4839 ;;Total ram usage:        6 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_sprintf
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function ___wmul
  4850  08B7                     ___wmul:	
  4851                           
  4852                           ;incstack = 0
  4853 ;; hardware stack exceeded
  4854                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4855  08B7  01F4               	clrf	___wmul@product
  4856  08B8  01F5               	clrf	___wmul@product+1
  4857  08B9                     i1l1886:	
  4858  08B9  1C70               	btfss	___wmul@multiplier,0
  4859  08BA  28C1               	goto	i1l328
  4860  08BB  0872               	movf	___wmul@multiplicand,w
  4861  08BC  07F4               	addwf	___wmul@product,f
  4862  08BD  1803               	skipnc
  4863  08BE  0AF5               	incf	___wmul@product+1,f
  4864  08BF  0873               	movf	___wmul@multiplicand+1,w
  4865  08C0  07F5               	addwf	___wmul@product+1,f
  4866  08C1                     i1l328:	
  4867  08C1  3001               	movlw	1
  4868  08C2                     u205_25:	
  4869  08C2  1003               	clrc
  4870  08C3  0DF2               	rlf	___wmul@multiplicand,f
  4871  08C4  0DF3               	rlf	___wmul@multiplicand+1,f
  4872  08C5  3EFF               	addlw	-1
  4873  08C6  1D03               	skipz
  4874  08C7  28C2               	goto	u205_25
  4875  08C8  3001               	movlw	1
  4876  08C9                     u206_25:	
  4877  08C9  1003               	clrc
  4878  08CA  0CF1               	rrf	___wmul@multiplier+1,f
  4879  08CB  0CF0               	rrf	___wmul@multiplier,f
  4880  08CC  3EFF               	addlw	-1
  4881  08CD  1D03               	skipz
  4882  08CE  28C9               	goto	u206_25
  4883  08CF  0871               	movf	___wmul@multiplier+1,w
  4884  08D0  0470               	iorwf	___wmul@multiplier,w
  4885  08D1  1D03               	skipz
  4886  08D2  28B9               	goto	i1l1886
  4887  08D3  0875               	movf	___wmul@product+1,w
  4888  08D4  01F1               	clrf	?___wmul+1
  4889  08D5  07F1               	addwf	?___wmul+1,f
  4890  08D6  0874               	movf	___wmul@product,w
  4891  08D7  01F0               	clrf	?___wmul
  4892  08D8  07F0               	addwf	?___wmul,f
  4893  08D9  0008               	return
  4894  08DA                     __end_of___wmul:	
  4895                           
  4896                           	psect	text22
  4897  0A85                     __ptext22:	
  4898 ;; *************** function ___llmod *****************
  4899 ;; Defined at:
  4900 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  divisor         4    0[BANK0 ] unsigned long 
  4903 ;;  dividend        4    4[BANK0 ] unsigned long 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  counter         1    9[BANK0 ] unsigned char 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  4    0[BANK0 ] unsigned long 
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4915 ;;      Params:         0       8       0       0       0
  4916 ;;      Locals:         0       1       0       0       0
  4917 ;;      Temps:          0       1       0       0       0
  4918 ;;      Totals:         0      10       0       0       0
  4919 ;;Total ram usage:       10 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; This function calls:
  4922 ;;		Nothing
  4923 ;; This function is called by:
  4924 ;;		_sprintf
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           
  4929                           ;psect for function ___llmod
  4930  0A85                     ___llmod:	
  4931                           
  4932                           ;incstack = 0
  4933 ;; hardware stack exceeded
  4934                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4935  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  4936  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  4937  0A87  0823               	movf	___llmod@divisor+3,w
  4938  0A88  0422               	iorwf	___llmod@divisor+2,w
  4939  0A89  0421               	iorwf	___llmod@divisor+1,w
  4940  0A8A  0420               	iorwf	___llmod@divisor,w
  4941  0A8B  1903               	skipnz
  4942  0A8C  2ACA               	goto	i1l2008
  4943  0A8D  01A9               	clrf	___llmod@counter
  4944  0A8E  0AA9               	incf	___llmod@counter,f
  4945  0A8F                     i1l1998:	
  4946  0A8F  1BA3               	btfsc	___llmod@divisor+3,7
  4947  0A90  2A9F               	goto	i1l2000
  4948  0A91  3001               	movlw	1
  4949  0A92  00A8               	movwf	??___llmod
  4950  0A93                     u240_25:	
  4951  0A93  1003               	clrc
  4952  0A94  0DA0               	rlf	___llmod@divisor,f
  4953  0A95  0DA1               	rlf	___llmod@divisor+1,f
  4954  0A96  0DA2               	rlf	___llmod@divisor+2,f
  4955  0A97  0DA3               	rlf	___llmod@divisor+3,f
  4956  0A98  0BA8               	decfsz	??___llmod,f
  4957  0A99  2A93               	goto	u240_25
  4958  0A9A  3001               	movlw	1
  4959  0A9B  00A8               	movwf	??___llmod
  4960  0A9C  0828               	movf	??___llmod,w
  4961  0A9D  07A9               	addwf	___llmod@counter,f
  4962  0A9E  2A8F               	goto	i1l1998
  4963  0A9F                     i1l2000:	
  4964  0A9F  0823               	movf	___llmod@divisor+3,w
  4965  0AA0  0227               	subwf	___llmod@dividend+3,w
  4966  0AA1  1D03               	skipz
  4967  0AA2  2AAD               	goto	u242_25
  4968  0AA3  0822               	movf	___llmod@divisor+2,w
  4969  0AA4  0226               	subwf	___llmod@dividend+2,w
  4970  0AA5  1D03               	skipz
  4971  0AA6  2AAD               	goto	u242_25
  4972  0AA7  0821               	movf	___llmod@divisor+1,w
  4973  0AA8  0225               	subwf	___llmod@dividend+1,w
  4974  0AA9  1D03               	skipz
  4975  0AAA  2AAD               	goto	u242_25
  4976  0AAB  0820               	movf	___llmod@divisor,w
  4977  0AAC  0224               	subwf	___llmod@dividend,w
  4978  0AAD                     u242_25:	
  4979  0AAD  1C03               	skipc
  4980  0AAE  2ABD               	goto	i1l2004
  4981  0AAF  0820               	movf	___llmod@divisor,w
  4982  0AB0  02A4               	subwf	___llmod@dividend,f
  4983  0AB1  0821               	movf	___llmod@divisor+1,w
  4984  0AB2  1C03               	skipc
  4985  0AB3  0F21               	incfsz	___llmod@divisor+1,w
  4986  0AB4  02A5               	subwf	___llmod@dividend+1,f
  4987  0AB5  0822               	movf	___llmod@divisor+2,w
  4988  0AB6  1C03               	skipc
  4989  0AB7  0F22               	incfsz	___llmod@divisor+2,w
  4990  0AB8  02A6               	subwf	___llmod@dividend+2,f
  4991  0AB9  0823               	movf	___llmod@divisor+3,w
  4992  0ABA  1C03               	skipc
  4993  0ABB  0F23               	incfsz	___llmod@divisor+3,w
  4994  0ABC  02A7               	subwf	___llmod@dividend+3,f
  4995  0ABD                     i1l2004:	
  4996  0ABD  3001               	movlw	1
  4997  0ABE                     u243_25:	
  4998  0ABE  1003               	clrc
  4999  0ABF  0CA3               	rrf	___llmod@divisor+3,f
  5000  0AC0  0CA2               	rrf	___llmod@divisor+2,f
  5001  0AC1  0CA1               	rrf	___llmod@divisor+1,f
  5002  0AC2  0CA0               	rrf	___llmod@divisor,f
  5003  0AC3  3EFF               	addlw	-1
  5004  0AC4  1D03               	skipz
  5005  0AC5  2ABE               	goto	u243_25
  5006  0AC6  3001               	movlw	1
  5007  0AC7  02A9               	subwf	___llmod@counter,f
  5008  0AC8  1D03               	btfss	3,2
  5009  0AC9  2A9F               	goto	i1l2000
  5010  0ACA                     i1l2008:	
  5011  0ACA  0827               	movf	___llmod@dividend+3,w
  5012  0ACB  00A3               	movwf	?___llmod+3
  5013  0ACC  0826               	movf	___llmod@dividend+2,w
  5014  0ACD  00A2               	movwf	?___llmod+2
  5015  0ACE  0825               	movf	___llmod@dividend+1,w
  5016  0ACF  00A1               	movwf	?___llmod+1
  5017  0AD0  0824               	movf	___llmod@dividend,w
  5018  0AD1  00A0               	movwf	?___llmod
  5019  0AD2  0008               	return
  5020  0AD3                     __end_of___llmod:	
  5021                           
  5022                           	psect	text23
  5023  0C33                     __ptext23:	
  5024 ;; *************** function ___lldiv *****************
  5025 ;; Defined at:
  5026 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  divisor         4    0[COMMON] unsigned long 
  5029 ;;  dividend        4    4[COMMON] unsigned long 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  quotient        4    9[COMMON] unsigned long 
  5032 ;;  counter         1   13[COMMON] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  4    0[COMMON] unsigned long 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5042 ;;      Params:         8       0       0       0       0
  5043 ;;      Locals:         5       0       0       0       0
  5044 ;;      Temps:          1       0       0       0       0
  5045 ;;      Totals:        14       0       0       0       0
  5046 ;;Total ram usage:       14 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_sprintf
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           
  5056                           ;psect for function ___lldiv
  5057  0C33                     ___lldiv:	
  5058                           
  5059                           ;incstack = 0
  5060 ;; hardware stack exceeded
  5061                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5062  0C33  3000               	movlw	0
  5063  0C34  00FC               	movwf	___lldiv@quotient+3
  5064  0C35  3000               	movlw	0
  5065  0C36  00FB               	movwf	___lldiv@quotient+2
  5066  0C37  3000               	movlw	0
  5067  0C38  00FA               	movwf	___lldiv@quotient+1
  5068  0C39  3000               	movlw	0
  5069  0C3A  00F9               	movwf	___lldiv@quotient
  5070  0C3B  0873               	movf	___lldiv@divisor+3,w
  5071  0C3C  0472               	iorwf	___lldiv@divisor+2,w
  5072  0C3D  0471               	iorwf	___lldiv@divisor+1,w
  5073  0C3E  0470               	iorwf	___lldiv@divisor,w
  5074  0C3F  1903               	skipnz
  5075  0C40  2C88               	goto	i1l1988
  5076  0C41  01FD               	clrf	___lldiv@counter
  5077  0C42  0AFD               	incf	___lldiv@counter,f
  5078  0C43                     i1l1974:	
  5079  0C43  1BF3               	btfsc	___lldiv@divisor+3,7
  5080  0C44  2C53               	goto	i1l1976
  5081  0C45  3001               	movlw	1
  5082  0C46  00F8               	movwf	??___lldiv
  5083  0C47                     u233_25:	
  5084  0C47  1003               	clrc
  5085  0C48  0DF0               	rlf	___lldiv@divisor,f
  5086  0C49  0DF1               	rlf	___lldiv@divisor+1,f
  5087  0C4A  0DF2               	rlf	___lldiv@divisor+2,f
  5088  0C4B  0DF3               	rlf	___lldiv@divisor+3,f
  5089  0C4C  0BF8               	decfsz	??___lldiv,f
  5090  0C4D  2C47               	goto	u233_25
  5091  0C4E  3001               	movlw	1
  5092  0C4F  00F8               	movwf	??___lldiv
  5093  0C50  0878               	movf	??___lldiv,w
  5094  0C51  07FD               	addwf	___lldiv@counter,f
  5095  0C52  2C43               	goto	i1l1974
  5096  0C53                     i1l1976:	
  5097  0C53  3001               	movlw	1
  5098  0C54  00F8               	movwf	??___lldiv
  5099  0C55                     u235_25:	
  5100  0C55  1003               	clrc
  5101  0C56  0DF9               	rlf	___lldiv@quotient,f
  5102  0C57  0DFA               	rlf	___lldiv@quotient+1,f
  5103  0C58  0DFB               	rlf	___lldiv@quotient+2,f
  5104  0C59  0DFC               	rlf	___lldiv@quotient+3,f
  5105  0C5A  0BF8               	decfsz	??___lldiv,f
  5106  0C5B  2C55               	goto	u235_25
  5107  0C5C  0873               	movf	___lldiv@divisor+3,w
  5108  0C5D  0277               	subwf	___lldiv@dividend+3,w
  5109  0C5E  1D03               	skipz
  5110  0C5F  2C6A               	goto	u236_25
  5111  0C60  0872               	movf	___lldiv@divisor+2,w
  5112  0C61  0276               	subwf	___lldiv@dividend+2,w
  5113  0C62  1D03               	skipz
  5114  0C63  2C6A               	goto	u236_25
  5115  0C64  0871               	movf	___lldiv@divisor+1,w
  5116  0C65  0275               	subwf	___lldiv@dividend+1,w
  5117  0C66  1D03               	skipz
  5118  0C67  2C6A               	goto	u236_25
  5119  0C68  0870               	movf	___lldiv@divisor,w
  5120  0C69  0274               	subwf	___lldiv@dividend,w
  5121  0C6A                     u236_25:	
  5122  0C6A  1C03               	skipc
  5123  0C6B  2C7B               	goto	i1l1984
  5124  0C6C  0870               	movf	___lldiv@divisor,w
  5125  0C6D  02F4               	subwf	___lldiv@dividend,f
  5126  0C6E  0871               	movf	___lldiv@divisor+1,w
  5127  0C6F  1C03               	skipc
  5128  0C70  0F71               	incfsz	___lldiv@divisor+1,w
  5129  0C71  02F5               	subwf	___lldiv@dividend+1,f
  5130  0C72  0872               	movf	___lldiv@divisor+2,w
  5131  0C73  1C03               	skipc
  5132  0C74  0F72               	incfsz	___lldiv@divisor+2,w
  5133  0C75  02F6               	subwf	___lldiv@dividend+2,f
  5134  0C76  0873               	movf	___lldiv@divisor+3,w
  5135  0C77  1C03               	skipc
  5136  0C78  0F73               	incfsz	___lldiv@divisor+3,w
  5137  0C79  02F7               	subwf	___lldiv@dividend+3,f
  5138  0C7A  1479               	bsf	___lldiv@quotient,0
  5139  0C7B                     i1l1984:	
  5140  0C7B  3001               	movlw	1
  5141  0C7C                     u237_25:	
  5142  0C7C  1003               	clrc
  5143  0C7D  0CF3               	rrf	___lldiv@divisor+3,f
  5144  0C7E  0CF2               	rrf	___lldiv@divisor+2,f
  5145  0C7F  0CF1               	rrf	___lldiv@divisor+1,f
  5146  0C80  0CF0               	rrf	___lldiv@divisor,f
  5147  0C81  3EFF               	addlw	-1
  5148  0C82  1D03               	skipz
  5149  0C83  2C7C               	goto	u237_25
  5150  0C84  3001               	movlw	1
  5151  0C85  02FD               	subwf	___lldiv@counter,f
  5152  0C86  1D03               	btfss	3,2
  5153  0C87  2C53               	goto	i1l1976
  5154  0C88                     i1l1988:	
  5155  0C88  087C               	movf	___lldiv@quotient+3,w
  5156  0C89  00F3               	movwf	?___lldiv+3
  5157  0C8A  087B               	movf	___lldiv@quotient+2,w
  5158  0C8B  00F2               	movwf	?___lldiv+2
  5159  0C8C  087A               	movf	___lldiv@quotient+1,w
  5160  0C8D  00F1               	movwf	?___lldiv+1
  5161  0C8E  0879               	movf	___lldiv@quotient,w
  5162  0C8F  00F0               	movwf	?___lldiv
  5163  0C90  0008               	return
  5164  0C91                     __end_of___lldiv:	
  5165                           
  5166                           	psect	text24
  5167  08FD                     __ptext24:	
  5168 ;; *************** function ___lltoft *****************
  5169 ;; Defined at:
  5170 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  c               4    8[COMMON] unsigned long 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  exp             1   13[COMMON] unsigned char 
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  3    8[COMMON] float 
  5177 ;; Registers used:
  5178 ;;		wreg, status,2, status,0, pclath, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5184 ;;      Params:         4       0       0       0       0
  5185 ;;      Locals:         1       0       0       0       0
  5186 ;;      Temps:          1       0       0       0       0
  5187 ;;      Totals:         6       0       0       0       0
  5188 ;;Total ram usage:        6 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    1
  5191 ;; This function calls:
  5192 ;;		___ftpack
  5193 ;; This function is called by:
  5194 ;;		_ftoa
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function ___lltoft
  5200  08FD                     ___lltoft:	
  5201                           
  5202                           ;incstack = 0
  5203 ;; hardware stack exceeded
  5204                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5205  08FD  308E               	movlw	142
  5206  08FE  00FC               	movwf	??___lltoft
  5207  08FF  087C               	movf	??___lltoft,w
  5208  0900  00FD               	movwf	___lltoft@exp
  5209  0901                     i1l2282:	
  5210  0901  30FF               	movlw	255
  5211  0902  057B               	andwf	___lltoft@c+3,w
  5212  0903  1903               	btfsc	3,2
  5213  0904  2913               	goto	i1l2284
  5214  0905  3001               	movlw	1
  5215  0906                     u298_25:	
  5216  0906  1003               	clrc
  5217  0907  0CFB               	rrf	___lltoft@c+3,f
  5218  0908  0CFA               	rrf	___lltoft@c+2,f
  5219  0909  0CF9               	rrf	___lltoft@c+1,f
  5220  090A  0CF8               	rrf	___lltoft@c,f
  5221  090B  3EFF               	addlw	-1
  5222  090C  1D03               	skipz
  5223  090D  2906               	goto	u298_25
  5224  090E  3001               	movlw	1
  5225  090F  00FC               	movwf	??___lltoft
  5226  0910  087C               	movf	??___lltoft,w
  5227  0911  07FD               	addwf	___lltoft@exp,f
  5228  0912  2901               	goto	i1l2282
  5229  0913                     i1l2284:	
  5230  0913  0878               	movf	___lltoft@c,w
  5231  0914  00F0               	movwf	___ftpack@arg
  5232  0915  0879               	movf	___lltoft@c+1,w
  5233  0916  00F1               	movwf	___ftpack@arg+1
  5234  0917  087A               	movf	___lltoft@c+2,w
  5235  0918  00F2               	movwf	___ftpack@arg+2
  5236  0919  087D               	movf	___lltoft@exp,w
  5237  091A  00FC               	movwf	??___lltoft
  5238  091B  087C               	movf	??___lltoft,w
  5239  091C  00F3               	movwf	___ftpack@exp
  5240  091D  01F4               	clrf	___ftpack@sign
  5241  091E  120A  158A  24F7   	fcall	___ftpack
  5242  0921  0870               	movf	?___ftpack,w
  5243  0922  00F8               	movwf	?___lltoft
  5244  0923  0871               	movf	?___ftpack+1,w
  5245  0924  00F9               	movwf	?___lltoft+1
  5246  0925  0872               	movf	?___ftpack+2,w
  5247  0926  00FA               	movwf	?___lltoft+2
  5248  0927  0008               	return
  5249  0928                     __end_of___lltoft:	
  5250                           
  5251                           	psect	text25
  5252  0D5F                     __ptext25:	
  5253 ;; *************** function ___fttol *****************
  5254 ;; Defined at:
  5255 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  f1              3   16[BANK0 ] float 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  lval            4   25[BANK0 ] unsigned long 
  5260 ;;  exp1            1   29[BANK0 ] unsigned char 
  5261 ;;  sign1           1   24[BANK0 ] unsigned char 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  4   16[BANK0 ] long 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5271 ;;      Params:         0       4       0       0       0
  5272 ;;      Locals:         0       6       0       0       0
  5273 ;;      Temps:          0       4       0       0       0
  5274 ;;      Totals:         0      14       0       0       0
  5275 ;;Total ram usage:       14 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; This function calls:
  5278 ;;		Nothing
  5279 ;; This function is called by:
  5280 ;;		_ISR
  5281 ;;		_ftoa
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function ___fttol
  5287  0D5F                     ___fttol:	
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5291  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
  5292  0D60  1303               	bcf	3,6	;RP1=0, select bank0
  5293  0D61  0830               	movf	___fttol@f1,w
  5294  0D62  00B4               	movwf	??___fttol
  5295  0D63  0831               	movf	___fttol@f1+1,w
  5296  0D64  00B5               	movwf	??___fttol+1
  5297  0D65  0832               	movf	___fttol@f1+2,w
  5298  0D66  00B6               	movwf	??___fttol+2
  5299  0D67  1003               	clrc
  5300  0D68  0D35               	rlf	??___fttol+1,w
  5301  0D69  0D36               	rlf	??___fttol+2,w
  5302  0D6A  00B7               	movwf	??___fttol+3
  5303  0D6B  0837               	movf	??___fttol+3,w
  5304  0D6C  00BD               	movwf	___fttol@exp1
  5305  0D6D  08BD               	movf	___fttol@exp1,f
  5306  0D6E  1D03               	skipz
  5307  0D6F  2D79               	goto	i1l2240
  5308  0D70  3000               	movlw	0
  5309  0D71  00B3               	movwf	?___fttol+3
  5310  0D72  3000               	movlw	0
  5311  0D73  00B2               	movwf	?___fttol+2
  5312  0D74  3000               	movlw	0
  5313  0D75  00B1               	movwf	?___fttol+1
  5314  0D76  3000               	movlw	0
  5315  0D77  00B0               	movwf	?___fttol
  5316  0D78  0008               	return
  5317  0D79                     i1l2240:	
  5318  0D79  0830               	movf	___fttol@f1,w
  5319  0D7A  00B4               	movwf	??___fttol
  5320  0D7B  0831               	movf	___fttol@f1+1,w
  5321  0D7C  00B5               	movwf	??___fttol+1
  5322  0D7D  0832               	movf	___fttol@f1+2,w
  5323  0D7E  00B6               	movwf	??___fttol+2
  5324  0D7F  3017               	movlw	23
  5325  0D80                     u289_25:	
  5326  0D80  1003               	clrc
  5327  0D81  0CB6               	rrf	??___fttol+2,f
  5328  0D82  0CB5               	rrf	??___fttol+1,f
  5329  0D83  0CB4               	rrf	??___fttol,f
  5330  0D84  3EFF               	addlw	-1
  5331  0D85  1D03               	skipz
  5332  0D86  2D80               	goto	u289_25
  5333  0D87  0834               	movf	??___fttol,w
  5334  0D88  00B7               	movwf	??___fttol+3
  5335  0D89  0837               	movf	??___fttol+3,w
  5336  0D8A  00B8               	movwf	___fttol@sign1
  5337  0D8B  17B1               	bsf	___fttol@f1+1,7
  5338  0D8C  30FF               	movlw	255
  5339  0D8D  05B0               	andwf	___fttol@f1,f
  5340  0D8E  30FF               	movlw	255
  5341  0D8F  05B1               	andwf	___fttol@f1+1,f
  5342  0D90  3000               	movlw	0
  5343  0D91  05B2               	andwf	___fttol@f1+2,f
  5344  0D92  0830               	movf	___fttol@f1,w
  5345  0D93  00B9               	movwf	___fttol@lval
  5346  0D94  0831               	movf	___fttol@f1+1,w
  5347  0D95  00BA               	movwf	___fttol@lval+1
  5348  0D96  0832               	movf	___fttol@f1+2,w
  5349  0D97  00BB               	movwf	___fttol@lval+2
  5350  0D98  01BC               	clrf	___fttol@lval+3
  5351  0D99  308E               	movlw	142
  5352  0D9A  02BD               	subwf	___fttol@exp1,f
  5353  0D9B  1FBD               	btfss	___fttol@exp1,7
  5354  0D9C  2DBB               	goto	i1l2260
  5355  0D9D  083D               	movf	___fttol@exp1,w
  5356  0D9E  3A80               	xorlw	128
  5357  0D9F  3E8F               	addlw	143
  5358  0DA0  1803               	skipnc
  5359  0DA1  2DAB               	goto	i1l2258
  5360  0DA2  3000               	movlw	0
  5361  0DA3  00B3               	movwf	?___fttol+3
  5362  0DA4  3000               	movlw	0
  5363  0DA5  00B2               	movwf	?___fttol+2
  5364  0DA6  3000               	movlw	0
  5365  0DA7  00B1               	movwf	?___fttol+1
  5366  0DA8  3000               	movlw	0
  5367  0DA9  00B0               	movwf	?___fttol
  5368  0DAA  0008               	return
  5369  0DAB                     i1l2258:	
  5370  0DAB  3001               	movlw	1
  5371  0DAC                     u292_25:	
  5372  0DAC  1003               	clrc
  5373  0DAD  0CBC               	rrf	___fttol@lval+3,f
  5374  0DAE  0CBB               	rrf	___fttol@lval+2,f
  5375  0DAF  0CBA               	rrf	___fttol@lval+1,f
  5376  0DB0  0CB9               	rrf	___fttol@lval,f
  5377  0DB1  3EFF               	addlw	-1
  5378  0DB2  1D03               	skipz
  5379  0DB3  2DAC               	goto	u292_25
  5380  0DB4  3001               	movlw	1
  5381  0DB5  00B4               	movwf	??___fttol
  5382  0DB6  0834               	movf	??___fttol,w
  5383  0DB7  07BD               	addwf	___fttol@exp1,f
  5384  0DB8  1903               	btfsc	3,2
  5385  0DB9  2DD6               	goto	i1l2270
  5386  0DBA  2DAB               	goto	i1l2258
  5387  0DBB                     i1l2260:	
  5388  0DBB  3018               	movlw	24
  5389  0DBC  023D               	subwf	___fttol@exp1,w
  5390  0DBD  1C03               	skipc
  5391  0DBE  2DD3               	goto	i1l2268
  5392  0DBF  3000               	movlw	0
  5393  0DC0  00B3               	movwf	?___fttol+3
  5394  0DC1  3000               	movlw	0
  5395  0DC2  00B2               	movwf	?___fttol+2
  5396  0DC3  3000               	movlw	0
  5397  0DC4  00B1               	movwf	?___fttol+1
  5398  0DC5  3000               	movlw	0
  5399  0DC6  00B0               	movwf	?___fttol
  5400  0DC7  0008               	return
  5401  0DC8                     i1l2266:	
  5402  0DC8  3001               	movlw	1
  5403  0DC9  00B4               	movwf	??___fttol
  5404  0DCA                     u295_25:	
  5405  0DCA  1003               	clrc
  5406  0DCB  0DB9               	rlf	___fttol@lval,f
  5407  0DCC  0DBA               	rlf	___fttol@lval+1,f
  5408  0DCD  0DBB               	rlf	___fttol@lval+2,f
  5409  0DCE  0DBC               	rlf	___fttol@lval+3,f
  5410  0DCF  0BB4               	decfsz	??___fttol,f
  5411  0DD0  2DCA               	goto	u295_25
  5412  0DD1  3001               	movlw	1
  5413  0DD2  02BD               	subwf	___fttol@exp1,f
  5414  0DD3                     i1l2268:	
  5415  0DD3  08BD               	movf	___fttol@exp1,f
  5416  0DD4  1D03               	skipz
  5417  0DD5  2DC8               	goto	i1l2266
  5418  0DD6                     i1l2270:	
  5419  0DD6  0838               	movf	___fttol@sign1,w
  5420  0DD7  1903               	btfsc	3,2
  5421  0DD8  2DE4               	goto	i1l2274
  5422  0DD9  09B9               	comf	___fttol@lval,f
  5423  0DDA  09BA               	comf	___fttol@lval+1,f
  5424  0DDB  09BB               	comf	___fttol@lval+2,f
  5425  0DDC  09BC               	comf	___fttol@lval+3,f
  5426  0DDD  0AB9               	incf	___fttol@lval,f
  5427  0DDE  1903               	skipnz
  5428  0DDF  0ABA               	incf	___fttol@lval+1,f
  5429  0DE0  1903               	skipnz
  5430  0DE1  0ABB               	incf	___fttol@lval+2,f
  5431  0DE2  1903               	skipnz
  5432  0DE3  0ABC               	incf	___fttol@lval+3,f
  5433  0DE4                     i1l2274:	
  5434  0DE4  083C               	movf	___fttol@lval+3,w
  5435  0DE5  00B3               	movwf	?___fttol+3
  5436  0DE6  083B               	movf	___fttol@lval+2,w
  5437  0DE7  00B2               	movwf	?___fttol+2
  5438  0DE8  083A               	movf	___fttol@lval+1,w
  5439  0DE9  00B1               	movwf	?___fttol+1
  5440  0DEA  0839               	movf	___fttol@lval,w
  5441  0DEB  00B0               	movwf	?___fttol
  5442  0DEC  0008               	return
  5443  0DED                     __end_of___fttol:	
  5444                           
  5445                           	psect	text26
  5446  081C                     __ptext26:	
  5447 ;; *************** function ___ftsub *****************
  5448 ;; Defined at:
  5449 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  f2              3    7[BANK0 ] float 
  5452 ;;  f1              3   10[BANK0 ] float 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  3    7[BANK0 ] float 
  5457 ;; Registers used:
  5458 ;;		wreg, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5464 ;;      Params:         0       6       0       0       0
  5465 ;;      Locals:         0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0
  5467 ;;      Totals:         0       6       0       0       0
  5468 ;;Total ram usage:        6 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    2
  5471 ;; This function calls:
  5472 ;;		___ftadd
  5473 ;; This function is called by:
  5474 ;;		_ftoa
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           
  5479                           ;psect for function ___ftsub
  5480  081C                     ___ftsub:	
  5481                           
  5482                           ;incstack = 0
  5483 ;; hardware stack exceeded
  5484                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5485  081C  3080               	movlw	128
  5486  081D  1283               	bcf	3,5	;RP0=0, select bank0
  5487  081E  1303               	bcf	3,6	;RP1=0, select bank0
  5488  081F  06A9               	xorwf	___ftsub@f2+2,f
  5489  0820  082A               	movf	___ftsub@f1,w
  5490  0821  00F8               	movwf	___ftadd@f1
  5491  0822  082B               	movf	___ftsub@f1+1,w
  5492  0823  00F9               	movwf	___ftadd@f1+1
  5493  0824  082C               	movf	___ftsub@f1+2,w
  5494  0825  00FA               	movwf	___ftadd@f1+2
  5495  0826  0827               	movf	___ftsub@f2,w
  5496  0827  00FB               	movwf	___ftadd@f2
  5497  0828  0828               	movf	___ftsub@f2+1,w
  5498  0829  00FC               	movwf	___ftadd@f2+1
  5499  082A  0829               	movf	___ftsub@f2+2,w
  5500  082B  00FD               	movwf	___ftadd@f2+2
  5501  082C  120A  118A  24FB   	fcall	___ftadd
  5502  082F  0878               	movf	?___ftadd,w
  5503  0830  1283               	bcf	3,5	;RP0=0, select bank0
  5504  0831  1303               	bcf	3,6	;RP1=0, select bank0
  5505  0832  00A7               	movwf	?___ftsub
  5506  0833  0879               	movf	?___ftadd+1,w
  5507  0834  00A8               	movwf	?___ftsub+1
  5508  0835  087A               	movf	?___ftadd+2,w
  5509  0836  00A9               	movwf	?___ftsub+2
  5510  0837  0008               	return
  5511  0838                     __end_of___ftsub:	
  5512                           
  5513                           	psect	text27
  5514  04FB                     __ptext27:	
  5515 ;; *************** function ___ftadd *****************
  5516 ;; Defined at:
  5517 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  f1              3    8[COMMON] float 
  5520 ;;  f2              3   11[COMMON] float 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  exp1            1    6[BANK0 ] unsigned char 
  5523 ;;  exp2            1    5[BANK0 ] unsigned char 
  5524 ;;  sign            1    4[BANK0 ] unsigned char 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  3    8[COMMON] float 
  5527 ;; Registers used:
  5528 ;;		wreg, status,2, status,0, pclath, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5534 ;;      Params:         6       0       0       0       0
  5535 ;;      Locals:         0       3       0       0       0
  5536 ;;      Temps:          0       4       0       0       0
  5537 ;;      Totals:         6       7       0       0       0
  5538 ;;Total ram usage:       13 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    1
  5541 ;; This function calls:
  5542 ;;		___ftpack
  5543 ;; This function is called by:
  5544 ;;		___ftsub
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           
  5549                           ;psect for function ___ftadd
  5550  04FB                     ___ftadd:	
  5551                           
  5552                           ;incstack = 0
  5553 ;; hardware stack exceeded
  5554                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5555  04FB  0878               	movf	___ftadd@f1,w
  5556  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  5557  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  5558  04FE  00A0               	movwf	??___ftadd
  5559  04FF  0879               	movf	___ftadd@f1+1,w
  5560  0500  00A1               	movwf	??___ftadd+1
  5561  0501  087A               	movf	___ftadd@f1+2,w
  5562  0502  00A2               	movwf	??___ftadd+2
  5563  0503  1003               	clrc
  5564  0504  0D21               	rlf	??___ftadd+1,w
  5565  0505  0D22               	rlf	??___ftadd+2,w
  5566  0506  00A3               	movwf	??___ftadd+3
  5567  0507  0823               	movf	??___ftadd+3,w
  5568  0508  00A6               	movwf	___ftadd@exp1
  5569  0509  087B               	movf	___ftadd@f2,w
  5570  050A  00A0               	movwf	??___ftadd
  5571  050B  087C               	movf	___ftadd@f2+1,w
  5572  050C  00A1               	movwf	??___ftadd+1
  5573  050D  087D               	movf	___ftadd@f2+2,w
  5574  050E  00A2               	movwf	??___ftadd+2
  5575  050F  1003               	clrc
  5576  0510  0D21               	rlf	??___ftadd+1,w
  5577  0511  0D22               	rlf	??___ftadd+2,w
  5578  0512  00A3               	movwf	??___ftadd+3
  5579  0513  0823               	movf	??___ftadd+3,w
  5580  0514  00A5               	movwf	___ftadd@exp2
  5581  0515  0826               	movf	___ftadd@exp1,w
  5582  0516  1903               	btfsc	3,2
  5583  0517  2D24               	goto	i1l1904
  5584  0518  0825               	movf	___ftadd@exp2,w
  5585  0519  0226               	subwf	___ftadd@exp1,w
  5586  051A  1803               	skipnc
  5587  051B  2D2B               	goto	i1l1908
  5588  051C  0326               	decf	___ftadd@exp1,w
  5589  051D  3AFF               	xorlw	255
  5590  051E  0725               	addwf	___ftadd@exp2,w
  5591  051F  00A0               	movwf	??___ftadd
  5592  0520  3019               	movlw	25
  5593  0521  0220               	subwf	??___ftadd,w
  5594  0522  1C03               	skipc
  5595  0523  2D2B               	goto	i1l1908
  5596  0524                     i1l1904:	
  5597  0524  087B               	movf	___ftadd@f2,w
  5598  0525  00F8               	movwf	?___ftadd
  5599  0526  087C               	movf	___ftadd@f2+1,w
  5600  0527  00F9               	movwf	?___ftadd+1
  5601  0528  087D               	movf	___ftadd@f2+2,w
  5602  0529  00FA               	movwf	?___ftadd+2
  5603  052A  0008               	return
  5604  052B                     i1l1908:	
  5605  052B  0825               	movf	___ftadd@exp2,w
  5606  052C  1903               	btfsc	3,2
  5607  052D  0008               	return
  5608  052E  0826               	movf	___ftadd@exp1,w
  5609  052F  0225               	subwf	___ftadd@exp2,w
  5610  0530  1803               	skipnc
  5611  0531  2D3A               	goto	i1l1914
  5612  0532  0325               	decf	___ftadd@exp2,w
  5613  0533  3AFF               	xorlw	255
  5614  0534  0726               	addwf	___ftadd@exp1,w
  5615  0535  00A0               	movwf	??___ftadd
  5616  0536  3019               	movlw	25
  5617  0537  0220               	subwf	??___ftadd,w
  5618  0538  1803               	btfsc	3,0
  5619  0539  0008               	return
  5620  053A                     i1l1914:	
  5621  053A  3006               	movlw	6
  5622  053B  00A0               	movwf	??___ftadd
  5623  053C  0820               	movf	??___ftadd,w
  5624  053D  00A4               	movwf	___ftadd@sign
  5625  053E  1BFA               	btfsc	___ftadd@f1+2,7
  5626  053F  17A4               	bsf	___ftadd@sign,7
  5627  0540  1BFD               	btfsc	___ftadd@f2+2,7
  5628  0541  1724               	bsf	___ftadd@sign,6
  5629  0542  17F9               	bsf	___ftadd@f1+1,7
  5630  0543  30FF               	movlw	255
  5631  0544  05F8               	andwf	___ftadd@f1,f
  5632  0545  30FF               	movlw	255
  5633  0546  05F9               	andwf	___ftadd@f1+1,f
  5634  0547  3000               	movlw	0
  5635  0548  05FA               	andwf	___ftadd@f1+2,f
  5636  0549  17FC               	bsf	___ftadd@f2+1,7
  5637  054A  30FF               	movlw	255
  5638  054B  05FB               	andwf	___ftadd@f2,f
  5639  054C  30FF               	movlw	255
  5640  054D  05FC               	andwf	___ftadd@f2+1,f
  5641  054E  3000               	movlw	0
  5642  054F  05FD               	andwf	___ftadd@f2+2,f
  5643  0550  0825               	movf	___ftadd@exp2,w
  5644  0551  0226               	subwf	___ftadd@exp1,w
  5645  0552  1803               	skipnc
  5646  0553  2D7A               	goto	i1l1936
  5647  0554                     i1l1926:	
  5648  0554  3001               	movlw	1
  5649  0555                     u217_25:	
  5650  0555  1003               	clrc
  5651  0556  0DFB               	rlf	___ftadd@f2,f
  5652  0557  0DFC               	rlf	___ftadd@f2+1,f
  5653  0558  0DFD               	rlf	___ftadd@f2+2,f
  5654  0559  3EFF               	addlw	-1
  5655  055A  1D03               	skipz
  5656  055B  2D55               	goto	u217_25
  5657  055C  3001               	movlw	1
  5658  055D  02A5               	subwf	___ftadd@exp2,f
  5659  055E  0825               	movf	___ftadd@exp2,w
  5660  055F  0626               	xorwf	___ftadd@exp1,w
  5661  0560  1903               	skipnz
  5662  0561  2D75               	goto	i1l1934
  5663  0562  3001               	movlw	1
  5664  0563  02A4               	subwf	___ftadd@sign,f
  5665  0564  0824               	movf	___ftadd@sign,w
  5666  0565  3907               	andlw	7
  5667  0566  1903               	btfsc	3,2
  5668  0567  2D75               	goto	i1l1934
  5669  0568  2D54               	goto	i1l1926
  5670  0569                     i1l1932:	
  5671  0569  3001               	movlw	1
  5672  056A                     u220_25:	
  5673  056A  1003               	clrc
  5674  056B  0CFA               	rrf	___ftadd@f1+2,f
  5675  056C  0CF9               	rrf	___ftadd@f1+1,f
  5676  056D  0CF8               	rrf	___ftadd@f1,f
  5677  056E  3EFF               	addlw	-1
  5678  056F  1D03               	skipz
  5679  0570  2D6A               	goto	u220_25
  5680  0571  3001               	movlw	1
  5681  0572  00A0               	movwf	??___ftadd
  5682  0573  0820               	movf	??___ftadd,w
  5683  0574  07A6               	addwf	___ftadd@exp1,f
  5684  0575                     i1l1934:	
  5685  0575  0826               	movf	___ftadd@exp1,w
  5686  0576  0625               	xorwf	___ftadd@exp2,w
  5687  0577  1903               	btfsc	3,2
  5688  0578  2DA3               	goto	i1l518
  5689  0579  2D69               	goto	i1l1932
  5690  057A                     i1l1936:	
  5691  057A  0826               	movf	___ftadd@exp1,w
  5692  057B  0225               	subwf	___ftadd@exp2,w
  5693  057C  1803               	skipnc
  5694  057D  2DA3               	goto	i1l518
  5695  057E                     i1l1938:	
  5696  057E  3001               	movlw	1
  5697  057F                     u223_25:	
  5698  057F  1003               	clrc
  5699  0580  0DF8               	rlf	___ftadd@f1,f
  5700  0581  0DF9               	rlf	___ftadd@f1+1,f
  5701  0582  0DFA               	rlf	___ftadd@f1+2,f
  5702  0583  3EFF               	addlw	-1
  5703  0584  1D03               	skipz
  5704  0585  2D7F               	goto	u223_25
  5705  0586  3001               	movlw	1
  5706  0587  02A6               	subwf	___ftadd@exp1,f
  5707  0588  0825               	movf	___ftadd@exp2,w
  5708  0589  0626               	xorwf	___ftadd@exp1,w
  5709  058A  1903               	skipnz
  5710  058B  2D9F               	goto	i1l1946
  5711  058C  3001               	movlw	1
  5712  058D  02A4               	subwf	___ftadd@sign,f
  5713  058E  0824               	movf	___ftadd@sign,w
  5714  058F  3907               	andlw	7
  5715  0590  1903               	btfsc	3,2
  5716  0591  2D9F               	goto	i1l1946
  5717  0592  2D7E               	goto	i1l1938
  5718  0593                     i1l1944:	
  5719  0593  3001               	movlw	1
  5720  0594                     u226_25:	
  5721  0594  1003               	clrc
  5722  0595  0CFD               	rrf	___ftadd@f2+2,f
  5723  0596  0CFC               	rrf	___ftadd@f2+1,f
  5724  0597  0CFB               	rrf	___ftadd@f2,f
  5725  0598  3EFF               	addlw	-1
  5726  0599  1D03               	skipz
  5727  059A  2D94               	goto	u226_25
  5728  059B  3001               	movlw	1
  5729  059C  00A0               	movwf	??___ftadd
  5730  059D  0820               	movf	??___ftadd,w
  5731  059E  07A5               	addwf	___ftadd@exp2,f
  5732  059F                     i1l1946:	
  5733  059F  0826               	movf	___ftadd@exp1,w
  5734  05A0  0625               	xorwf	___ftadd@exp2,w
  5735  05A1  1D03               	skipz
  5736  05A2  2D93               	goto	i1l1944
  5737  05A3                     i1l518:	
  5738  05A3  1FA4               	btfss	___ftadd@sign,7
  5739  05A4  2DB5               	goto	i1l1950
  5740  05A5  30FF               	movlw	255
  5741  05A6  06F8               	xorwf	___ftadd@f1,f
  5742  05A7  30FF               	movlw	255
  5743  05A8  06F9               	xorwf	___ftadd@f1+1,f
  5744  05A9  30FF               	movlw	255
  5745  05AA  06FA               	xorwf	___ftadd@f1+2,f
  5746  05AB  3001               	movlw	1
  5747  05AC  07F8               	addwf	___ftadd@f1,f
  5748  05AD  3000               	movlw	0
  5749  05AE  1803               	skipnc
  5750  05AF  3001               	movlw	1
  5751  05B0  07F9               	addwf	___ftadd@f1+1,f
  5752  05B1  3000               	movlw	0
  5753  05B2  1803               	skipnc
  5754  05B3  3001               	movlw	1
  5755  05B4  07FA               	addwf	___ftadd@f1+2,f
  5756  05B5                     i1l1950:	
  5757  05B5  1F24               	btfss	___ftadd@sign,6
  5758  05B6  2DC7               	goto	i1l1954
  5759  05B7  30FF               	movlw	255
  5760  05B8  06FB               	xorwf	___ftadd@f2,f
  5761  05B9  30FF               	movlw	255
  5762  05BA  06FC               	xorwf	___ftadd@f2+1,f
  5763  05BB  30FF               	movlw	255
  5764  05BC  06FD               	xorwf	___ftadd@f2+2,f
  5765  05BD  3001               	movlw	1
  5766  05BE  07FB               	addwf	___ftadd@f2,f
  5767  05BF  3000               	movlw	0
  5768  05C0  1803               	skipnc
  5769  05C1  3001               	movlw	1
  5770  05C2  07FC               	addwf	___ftadd@f2+1,f
  5771  05C3  3000               	movlw	0
  5772  05C4  1803               	skipnc
  5773  05C5  3001               	movlw	1
  5774  05C6  07FD               	addwf	___ftadd@f2+2,f
  5775  05C7                     i1l1954:	
  5776  05C7  01A4               	clrf	___ftadd@sign
  5777  05C8  0878               	movf	___ftadd@f1,w
  5778  05C9  07FB               	addwf	___ftadd@f2,f
  5779  05CA  0879               	movf	___ftadd@f1+1,w
  5780  05CB  1103               	clrz
  5781  05CC  1803               	skipnc
  5782  05CD  0A79               	incf	___ftadd@f1+1,w
  5783  05CE  1D03               	btfss	3,2
  5784  05CF  07FC               	addwf	___ftadd@f2+1,f
  5785  05D0  087A               	movf	___ftadd@f1+2,w
  5786  05D1  1103               	clrz
  5787  05D2  1803               	skipnc
  5788  05D3  0A7A               	incf	___ftadd@f1+2,w
  5789  05D4  1D03               	btfss	3,2
  5790  05D5  07FD               	addwf	___ftadd@f2+2,f
  5791  05D6  1FFD               	btfss	___ftadd@f2+2,7
  5792  05D7  2DEA               	goto	i1l1964
  5793  05D8  30FF               	movlw	255
  5794  05D9  06FB               	xorwf	___ftadd@f2,f
  5795  05DA  30FF               	movlw	255
  5796  05DB  06FC               	xorwf	___ftadd@f2+1,f
  5797  05DC  30FF               	movlw	255
  5798  05DD  06FD               	xorwf	___ftadd@f2+2,f
  5799  05DE  3001               	movlw	1
  5800  05DF  07FB               	addwf	___ftadd@f2,f
  5801  05E0  3000               	movlw	0
  5802  05E1  1803               	skipnc
  5803  05E2  3001               	movlw	1
  5804  05E3  07FC               	addwf	___ftadd@f2+1,f
  5805  05E4  3000               	movlw	0
  5806  05E5  1803               	skipnc
  5807  05E6  3001               	movlw	1
  5808  05E7  07FD               	addwf	___ftadd@f2+2,f
  5809  05E8  01A4               	clrf	___ftadd@sign
  5810  05E9  0AA4               	incf	___ftadd@sign,f
  5811  05EA                     i1l1964:	
  5812  05EA  087B               	movf	___ftadd@f2,w
  5813  05EB  00F0               	movwf	___ftpack@arg
  5814  05EC  087C               	movf	___ftadd@f2+1,w
  5815  05ED  00F1               	movwf	___ftpack@arg+1
  5816  05EE  087D               	movf	___ftadd@f2+2,w
  5817  05EF  00F2               	movwf	___ftpack@arg+2
  5818  05F0  0826               	movf	___ftadd@exp1,w
  5819  05F1  00A0               	movwf	??___ftadd
  5820  05F2  0820               	movf	??___ftadd,w
  5821  05F3  00F3               	movwf	___ftpack@exp
  5822  05F4  0824               	movf	___ftadd@sign,w
  5823  05F5  00A1               	movwf	??___ftadd+1
  5824  05F6  0821               	movf	??___ftadd+1,w
  5825  05F7  00F4               	movwf	___ftpack@sign
  5826  05F8  120A  158A  24F7   	fcall	___ftpack
  5827  05FB  0870               	movf	?___ftpack,w
  5828  05FC  00F8               	movwf	?___ftadd
  5829  05FD  0871               	movf	?___ftpack+1,w
  5830  05FE  00F9               	movwf	?___ftadd+1
  5831  05FF  0872               	movf	?___ftpack+2,w
  5832  0600  00FA               	movwf	?___ftadd+2
  5833  0601  0008               	return
  5834  0602                     __end_of___ftadd:	
  5835                           
  5836                           	psect	text28
  5837  1786                     __ptext28:	
  5838 ;; *************** function ___ftneg *****************
  5839 ;; Defined at:
  5840 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  f1              3    0[COMMON] float 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;		None
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  3    0[COMMON] float 
  5847 ;; Registers used:
  5848 ;;		wreg
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5854 ;;      Params:         3       0       0       0       0
  5855 ;;      Locals:         0       0       0       0       0
  5856 ;;      Temps:          0       0       0       0       0
  5857 ;;      Totals:         3       0       0       0       0
  5858 ;;Total ram usage:        3 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_ftoa
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           
  5868                           ;psect for function ___ftneg
  5869  1786                     ___ftneg:	
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in ___ftneg: [wreg]
  5873  1786  0872               	movf	___ftneg@f1+2,w
  5874  1787  0471               	iorwf	___ftneg@f1+1,w
  5875  1788  0470               	iorwf	___ftneg@f1,w
  5876  1789  1903               	skipnz
  5877  178A  0008               	return
  5878  178B  3080               	movlw	128
  5879  178C  06F2               	xorwf	___ftneg@f1+2,f
  5880  178D  0008               	return
  5881  178E                     __end_of___ftneg:	
  5882                           
  5883                           	psect	text29
  5884  0602                     __ptext29:	
  5885 ;; *************** function ___ftmul *****************
  5886 ;; Defined at:
  5887 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  f1              3    0[BANK0 ] float 
  5890 ;;  f2              3    3[BANK0 ] float 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  5893 ;;  sign            1   15[BANK0 ] unsigned char 
  5894 ;;  cntr            1   14[BANK0 ] unsigned char 
  5895 ;;  exp             1   10[BANK0 ] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  3    0[BANK0 ] float 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0, pclath, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5905 ;;      Params:         0       6       0       0       0
  5906 ;;      Locals:         0       6       0       0       0
  5907 ;;      Temps:          0       4       0       0       0
  5908 ;;      Totals:         0      16       0       0       0
  5909 ;;Total ram usage:       16 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    1
  5912 ;; This function calls:
  5913 ;;		___ftpack
  5914 ;; This function is called by:
  5915 ;;		_ISR
  5916 ;;		_ftoa
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           
  5921                           ;psect for function ___ftmul
  5922  0602                     ___ftmul:	
  5923                           
  5924                           ;incstack = 0
  5925 ;; hardware stack exceeded
  5926                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5927  0602  1283               	bcf	3,5	;RP0=0, select bank0
  5928  0603  1303               	bcf	3,6	;RP1=0, select bank0
  5929  0604  0820               	movf	___ftmul@f1,w
  5930  0605  00A6               	movwf	??___ftmul
  5931  0606  0821               	movf	___ftmul@f1+1,w
  5932  0607  00A7               	movwf	??___ftmul+1
  5933  0608  0822               	movf	___ftmul@f1+2,w
  5934  0609  00A8               	movwf	??___ftmul+2
  5935  060A  1003               	clrc
  5936  060B  0D27               	rlf	??___ftmul+1,w
  5937  060C  0D28               	rlf	??___ftmul+2,w
  5938  060D  00A9               	movwf	??___ftmul+3
  5939  060E  0829               	movf	??___ftmul+3,w
  5940  060F  00AA               	movwf	___ftmul@exp
  5941  0610  08AA               	movf	___ftmul@exp,f
  5942  0611  1D03               	skipz
  5943  0612  2E1A               	goto	i1l2176
  5944  0613  3000               	movlw	0
  5945  0614  00A0               	movwf	?___ftmul
  5946  0615  3000               	movlw	0
  5947  0616  00A1               	movwf	?___ftmul+1
  5948  0617  3000               	movlw	0
  5949  0618  00A2               	movwf	?___ftmul+2
  5950  0619  0008               	return
  5951  061A                     i1l2176:	
  5952  061A  0823               	movf	___ftmul@f2,w
  5953  061B  00A6               	movwf	??___ftmul
  5954  061C  0824               	movf	___ftmul@f2+1,w
  5955  061D  00A7               	movwf	??___ftmul+1
  5956  061E  0825               	movf	___ftmul@f2+2,w
  5957  061F  00A8               	movwf	??___ftmul+2
  5958  0620  1003               	clrc
  5959  0621  0D27               	rlf	??___ftmul+1,w
  5960  0622  0D28               	rlf	??___ftmul+2,w
  5961  0623  00A9               	movwf	??___ftmul+3
  5962  0624  0829               	movf	??___ftmul+3,w
  5963  0625  00AF               	movwf	___ftmul@sign
  5964  0626  08AF               	movf	___ftmul@sign,f
  5965  0627  1D03               	skipz
  5966  0628  2E30               	goto	i1l2182
  5967  0629  3000               	movlw	0
  5968  062A  00A0               	movwf	?___ftmul
  5969  062B  3000               	movlw	0
  5970  062C  00A1               	movwf	?___ftmul+1
  5971  062D  3000               	movlw	0
  5972  062E  00A2               	movwf	?___ftmul+2
  5973  062F  0008               	return
  5974  0630                     i1l2182:	
  5975  0630  082F               	movf	___ftmul@sign,w
  5976  0631  3E7B               	addlw	123
  5977  0632  00A6               	movwf	??___ftmul
  5978  0633  0826               	movf	??___ftmul,w
  5979  0634  07AA               	addwf	___ftmul@exp,f
  5980  0635  0820               	movf	___ftmul@f1,w
  5981  0636  00A6               	movwf	??___ftmul
  5982  0637  0821               	movf	___ftmul@f1+1,w
  5983  0638  00A7               	movwf	??___ftmul+1
  5984  0639  0822               	movf	___ftmul@f1+2,w
  5985  063A  00A8               	movwf	??___ftmul+2
  5986  063B  3010               	movlw	16
  5987  063C                     u275_25:	
  5988  063C  1003               	clrc
  5989  063D  0CA8               	rrf	??___ftmul+2,f
  5990  063E  0CA7               	rrf	??___ftmul+1,f
  5991  063F  0CA6               	rrf	??___ftmul,f
  5992  0640  3EFF               	addlw	-1
  5993  0641  1D03               	skipz
  5994  0642  2E3C               	goto	u275_25
  5995  0643  0826               	movf	??___ftmul,w
  5996  0644  00A9               	movwf	??___ftmul+3
  5997  0645  0829               	movf	??___ftmul+3,w
  5998  0646  00AF               	movwf	___ftmul@sign
  5999  0647  0823               	movf	___ftmul@f2,w
  6000  0648  00A6               	movwf	??___ftmul
  6001  0649  0824               	movf	___ftmul@f2+1,w
  6002  064A  00A7               	movwf	??___ftmul+1
  6003  064B  0825               	movf	___ftmul@f2+2,w
  6004  064C  00A8               	movwf	??___ftmul+2
  6005  064D  3010               	movlw	16
  6006  064E                     u276_25:	
  6007  064E  1003               	clrc
  6008  064F  0CA8               	rrf	??___ftmul+2,f
  6009  0650  0CA7               	rrf	??___ftmul+1,f
  6010  0651  0CA6               	rrf	??___ftmul,f
  6011  0652  3EFF               	addlw	-1
  6012  0653  1D03               	skipz
  6013  0654  2E4E               	goto	u276_25
  6014  0655  0826               	movf	??___ftmul,w
  6015  0656  00A9               	movwf	??___ftmul+3
  6016  0657  0829               	movf	??___ftmul+3,w
  6017  0658  06AF               	xorwf	___ftmul@sign,f
  6018  0659  3080               	movlw	128
  6019  065A  00A6               	movwf	??___ftmul
  6020  065B  0826               	movf	??___ftmul,w
  6021  065C  05AF               	andwf	___ftmul@sign,f
  6022  065D  17A1               	bsf	___ftmul@f1+1,7
  6023  065E  17A4               	bsf	___ftmul@f2+1,7
  6024  065F  30FF               	movlw	255
  6025  0660  05A3               	andwf	___ftmul@f2,f
  6026  0661  30FF               	movlw	255
  6027  0662  05A4               	andwf	___ftmul@f2+1,f
  6028  0663  3000               	movlw	0
  6029  0664  05A5               	andwf	___ftmul@f2+2,f
  6030  0665  3000               	movlw	0
  6031  0666  00AB               	movwf	___ftmul@f3_as_product
  6032  0667  3000               	movlw	0
  6033  0668  00AC               	movwf	___ftmul@f3_as_product+1
  6034  0669  3000               	movlw	0
  6035  066A  00AD               	movwf	___ftmul@f3_as_product+2
  6036  066B  3007               	movlw	7
  6037  066C  00A6               	movwf	??___ftmul
  6038  066D  0826               	movf	??___ftmul,w
  6039  066E  00AE               	movwf	___ftmul@cntr
  6040  066F                     i1l2194:	
  6041  066F  1C20               	btfss	___ftmul@f1,0
  6042  0670  2E7F               	goto	i1l2198
  6043  0671  0823               	movf	___ftmul@f2,w
  6044  0672  07AB               	addwf	___ftmul@f3_as_product,f
  6045  0673  0824               	movf	___ftmul@f2+1,w
  6046  0674  1103               	clrz
  6047  0675  1803               	skipnc
  6048  0676  0A24               	incf	___ftmul@f2+1,w
  6049  0677  1D03               	btfss	3,2
  6050  0678  07AC               	addwf	___ftmul@f3_as_product+1,f
  6051  0679  0825               	movf	___ftmul@f2+2,w
  6052  067A  1103               	clrz
  6053  067B  1803               	skipnc
  6054  067C  0A25               	incf	___ftmul@f2+2,w
  6055  067D  1D03               	btfss	3,2
  6056  067E  07AD               	addwf	___ftmul@f3_as_product+2,f
  6057  067F                     i1l2198:	
  6058  067F  3001               	movlw	1
  6059  0680                     u279_25:	
  6060  0680  1003               	clrc
  6061  0681  0CA2               	rrf	___ftmul@f1+2,f
  6062  0682  0CA1               	rrf	___ftmul@f1+1,f
  6063  0683  0CA0               	rrf	___ftmul@f1,f
  6064  0684  3EFF               	addlw	-1
  6065  0685  1D03               	skipz
  6066  0686  2E80               	goto	u279_25
  6067  0687  3001               	movlw	1
  6068  0688                     u280_25:	
  6069  0688  1003               	clrc
  6070  0689  0DA3               	rlf	___ftmul@f2,f
  6071  068A  0DA4               	rlf	___ftmul@f2+1,f
  6072  068B  0DA5               	rlf	___ftmul@f2+2,f
  6073  068C  3EFF               	addlw	-1
  6074  068D  1D03               	skipz
  6075  068E  2E88               	goto	u280_25
  6076  068F  3001               	movlw	1
  6077  0690  02AE               	subwf	___ftmul@cntr,f
  6078  0691  1D03               	btfss	3,2
  6079  0692  2E6F               	goto	i1l2194
  6080  0693  3009               	movlw	9
  6081  0694  00A6               	movwf	??___ftmul
  6082  0695  0826               	movf	??___ftmul,w
  6083  0696  00AE               	movwf	___ftmul@cntr
  6084  0697                     i1l2206:	
  6085  0697  1C20               	btfss	___ftmul@f1,0
  6086  0698  2EA7               	goto	i1l2210
  6087  0699  0823               	movf	___ftmul@f2,w
  6088  069A  07AB               	addwf	___ftmul@f3_as_product,f
  6089  069B  0824               	movf	___ftmul@f2+1,w
  6090  069C  1103               	clrz
  6091  069D  1803               	skipnc
  6092  069E  0A24               	incf	___ftmul@f2+1,w
  6093  069F  1D03               	btfss	3,2
  6094  06A0  07AC               	addwf	___ftmul@f3_as_product+1,f
  6095  06A1  0825               	movf	___ftmul@f2+2,w
  6096  06A2  1103               	clrz
  6097  06A3  1803               	skipnc
  6098  06A4  0A25               	incf	___ftmul@f2+2,w
  6099  06A5  1D03               	btfss	3,2
  6100  06A6  07AD               	addwf	___ftmul@f3_as_product+2,f
  6101  06A7                     i1l2210:	
  6102  06A7  3001               	movlw	1
  6103  06A8                     u284_25:	
  6104  06A8  1003               	clrc
  6105  06A9  0CA2               	rrf	___ftmul@f1+2,f
  6106  06AA  0CA1               	rrf	___ftmul@f1+1,f
  6107  06AB  0CA0               	rrf	___ftmul@f1,f
  6108  06AC  3EFF               	addlw	-1
  6109  06AD  1D03               	skipz
  6110  06AE  2EA8               	goto	u284_25
  6111  06AF  3001               	movlw	1
  6112  06B0                     u285_25:	
  6113  06B0  1003               	clrc
  6114  06B1  0CAD               	rrf	___ftmul@f3_as_product+2,f
  6115  06B2  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6116  06B3  0CAB               	rrf	___ftmul@f3_as_product,f
  6117  06B4  3EFF               	addlw	-1
  6118  06B5  1D03               	skipz
  6119  06B6  2EB0               	goto	u285_25
  6120  06B7  3001               	movlw	1
  6121  06B8  02AE               	subwf	___ftmul@cntr,f
  6122  06B9  1D03               	btfss	3,2
  6123  06BA  2E97               	goto	i1l2206
  6124  06BB  082B               	movf	___ftmul@f3_as_product,w
  6125  06BC  00F0               	movwf	___ftpack@arg
  6126  06BD  082C               	movf	___ftmul@f3_as_product+1,w
  6127  06BE  00F1               	movwf	___ftpack@arg+1
  6128  06BF  082D               	movf	___ftmul@f3_as_product+2,w
  6129  06C0  00F2               	movwf	___ftpack@arg+2
  6130  06C1  082A               	movf	___ftmul@exp,w
  6131  06C2  00A6               	movwf	??___ftmul
  6132  06C3  0826               	movf	??___ftmul,w
  6133  06C4  00F3               	movwf	___ftpack@exp
  6134  06C5  082F               	movf	___ftmul@sign,w
  6135  06C6  00A7               	movwf	??___ftmul+1
  6136  06C7  0827               	movf	??___ftmul+1,w
  6137  06C8  00F4               	movwf	___ftpack@sign
  6138  06C9  120A  158A  24F7   	fcall	___ftpack
  6139  06CC  0870               	movf	?___ftpack,w
  6140  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  6141  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  6142  06CF  00A0               	movwf	?___ftmul
  6143  06D0  0871               	movf	?___ftpack+1,w
  6144  06D1  00A1               	movwf	?___ftmul+1
  6145  06D2  0872               	movf	?___ftpack+2,w
  6146  06D3  00A2               	movwf	?___ftmul+2
  6147  06D4  0008               	return
  6148  06D5                     __end_of___ftmul:	
  6149                           
  6150                           	psect	text30
  6151  0BD6                     __ptext30:	
  6152 ;; *************** function ___ftge *****************
  6153 ;; Defined at:
  6154 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  ff1             3    0[COMMON] float 
  6157 ;;  ff2             3    3[COMMON] float 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;		None
  6160 ;; Return value:  Size  Location     Type
  6161 ;;		None               void
  6162 ;; Registers used:
  6163 ;;		wreg, status,2, status,0
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6169 ;;      Params:         6       0       0       0       0
  6170 ;;      Locals:         0       0       0       0       0
  6171 ;;      Temps:          6       0       0       0       0
  6172 ;;      Totals:        12       0       0       0       0
  6173 ;;Total ram usage:       12 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; This function calls:
  6176 ;;		Nothing
  6177 ;; This function is called by:
  6178 ;;		_ftoa
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           
  6183                           ;psect for function ___ftge
  6184  0BD6                     ___ftge:	
  6185                           
  6186                           ;incstack = 0
  6187                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6188  0BD6  1FF2               	btfss	___ftge@ff1+2,7
  6189  0BD7  2BFD               	goto	i1l2154
  6190  0BD8  3000               	movlw	0
  6191  0BD9  00F6               	movwf	??___ftge
  6192  0BDA  3000               	movlw	0
  6193  0BDB  00F7               	movwf	??___ftge+1
  6194  0BDC  3080               	movlw	128
  6195  0BDD  00F8               	movwf	??___ftge+2
  6196  0BDE  0970               	comf	___ftge@ff1,w
  6197  0BDF  00F9               	movwf	??___ftge+3
  6198  0BE0  0971               	comf	___ftge@ff1+1,w
  6199  0BE1  00FA               	movwf	??___ftge+4
  6200  0BE2  0972               	comf	___ftge@ff1+2,w
  6201  0BE3  00FB               	movwf	??___ftge+5
  6202  0BE4  0AF9               	incf	??___ftge+3,f
  6203  0BE5  1903               	skipnz
  6204  0BE6  0AFA               	incf	??___ftge+4,f
  6205  0BE7  1903               	skipnz
  6206  0BE8  0AFB               	incf	??___ftge+5,f
  6207  0BE9  0879               	movf	??___ftge+3,w
  6208  0BEA  07F6               	addwf	??___ftge,f
  6209  0BEB  087A               	movf	??___ftge+4,w
  6210  0BEC  1803               	skipnc
  6211  0BED  0F7A               	incfsz	??___ftge+4,w
  6212  0BEE  2BF0               	goto	u269_21
  6213  0BEF  2BF1               	goto	u269_22
  6214  0BF0                     u269_21:	
  6215  0BF0  07F7               	addwf	??___ftge+1,f
  6216  0BF1                     u269_22:	
  6217  0BF1  087B               	movf	??___ftge+5,w
  6218  0BF2  1803               	skipnc
  6219  0BF3  0F7B               	incfsz	??___ftge+5,w
  6220  0BF4  2BF6               	goto	u269_23
  6221  0BF5  2BF7               	goto	u269_24
  6222  0BF6                     u269_23:	
  6223  0BF6  07F8               	addwf	??___ftge+2,f
  6224  0BF7                     u269_24:	
  6225  0BF7  0876               	movf	??___ftge,w
  6226  0BF8  00F0               	movwf	___ftge@ff1
  6227  0BF9  0877               	movf	??___ftge+1,w
  6228  0BFA  00F1               	movwf	___ftge@ff1+1
  6229  0BFB  0878               	movf	??___ftge+2,w
  6230  0BFC  00F2               	movwf	___ftge@ff1+2
  6231  0BFD                     i1l2154:	
  6232  0BFD  1FF5               	btfss	___ftge@ff2+2,7
  6233  0BFE  2C24               	goto	i1l2158
  6234  0BFF  3000               	movlw	0
  6235  0C00  00F6               	movwf	??___ftge
  6236  0C01  3000               	movlw	0
  6237  0C02  00F7               	movwf	??___ftge+1
  6238  0C03  3080               	movlw	128
  6239  0C04  00F8               	movwf	??___ftge+2
  6240  0C05  0973               	comf	___ftge@ff2,w
  6241  0C06  00F9               	movwf	??___ftge+3
  6242  0C07  0974               	comf	___ftge@ff2+1,w
  6243  0C08  00FA               	movwf	??___ftge+4
  6244  0C09  0975               	comf	___ftge@ff2+2,w
  6245  0C0A  00FB               	movwf	??___ftge+5
  6246  0C0B  0AF9               	incf	??___ftge+3,f
  6247  0C0C  1903               	skipnz
  6248  0C0D  0AFA               	incf	??___ftge+4,f
  6249  0C0E  1903               	skipnz
  6250  0C0F  0AFB               	incf	??___ftge+5,f
  6251  0C10  0879               	movf	??___ftge+3,w
  6252  0C11  07F6               	addwf	??___ftge,f
  6253  0C12  087A               	movf	??___ftge+4,w
  6254  0C13  1803               	skipnc
  6255  0C14  0F7A               	incfsz	??___ftge+4,w
  6256  0C15  2C17               	goto	u271_21
  6257  0C16  2C18               	goto	u271_22
  6258  0C17                     u271_21:	
  6259  0C17  07F7               	addwf	??___ftge+1,f
  6260  0C18                     u271_22:	
  6261  0C18  087B               	movf	??___ftge+5,w
  6262  0C19  1803               	skipnc
  6263  0C1A  0F7B               	incfsz	??___ftge+5,w
  6264  0C1B  2C1D               	goto	u271_23
  6265  0C1C  2C1E               	goto	u271_24
  6266  0C1D                     u271_23:	
  6267  0C1D  07F8               	addwf	??___ftge+2,f
  6268  0C1E                     u271_24:	
  6269  0C1E  0876               	movf	??___ftge,w
  6270  0C1F  00F3               	movwf	___ftge@ff2
  6271  0C20  0877               	movf	??___ftge+1,w
  6272  0C21  00F4               	movwf	___ftge@ff2+1
  6273  0C22  0878               	movf	??___ftge+2,w
  6274  0C23  00F5               	movwf	___ftge@ff2+2
  6275  0C24                     i1l2158:	
  6276  0C24  3080               	movlw	128
  6277  0C25  06F2               	xorwf	___ftge@ff1+2,f
  6278  0C26  3080               	movlw	128
  6279  0C27  06F5               	xorwf	___ftge@ff2+2,f
  6280  0C28  0875               	movf	___ftge@ff2+2,w
  6281  0C29  0272               	subwf	___ftge@ff1+2,w
  6282  0C2A  1D03               	skipz
  6283  0C2B  0008               	return
  6284  0C2C  0874               	movf	___ftge@ff2+1,w
  6285  0C2D  0271               	subwf	___ftge@ff1+1,w
  6286  0C2E  1D03               	skipz
  6287  0C2F  0008               	return
  6288  0C30  0873               	movf	___ftge@ff2,w
  6289  0C31  0270               	subwf	___ftge@ff1,w
  6290  0C32  0008               	return
  6291  0C33                     __end_of___ftge:	
  6292                           
  6293                           	psect	text31
  6294  0E8E                     __ptext31:	
  6295 ;; *************** function ___ftdiv *****************
  6296 ;; Defined at:
  6297 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;  f2              3   16[BANK0 ] float 
  6300 ;;  f1              3   19[BANK0 ] float 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  f3              3   27[BANK0 ] float 
  6303 ;;  sign            1   31[BANK0 ] unsigned char 
  6304 ;;  exp             1   30[BANK0 ] unsigned char 
  6305 ;;  cntr            1   26[BANK0 ] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  3   16[BANK0 ] float 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6315 ;;      Params:         0       6       0       0       0
  6316 ;;      Locals:         0       6       0       0       0
  6317 ;;      Temps:          0       4       0       0       0
  6318 ;;      Totals:         0      16       0       0       0
  6319 ;;Total ram usage:       16 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    1
  6322 ;; This function calls:
  6323 ;;		___ftpack
  6324 ;; This function is called by:
  6325 ;;		_ISR
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function ___ftdiv
  6331  0E8E                     ___ftdiv:	
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6335  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6336  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6337  0E90  0833               	movf	___ftdiv@f1,w
  6338  0E91  00B6               	movwf	??___ftdiv
  6339  0E92  0834               	movf	___ftdiv@f1+1,w
  6340  0E93  00B7               	movwf	??___ftdiv+1
  6341  0E94  0835               	movf	___ftdiv@f1+2,w
  6342  0E95  00B8               	movwf	??___ftdiv+2
  6343  0E96  1003               	clrc
  6344  0E97  0D37               	rlf	??___ftdiv+1,w
  6345  0E98  0D38               	rlf	??___ftdiv+2,w
  6346  0E99  00B9               	movwf	??___ftdiv+3
  6347  0E9A  0839               	movf	??___ftdiv+3,w
  6348  0E9B  00BE               	movwf	___ftdiv@exp
  6349  0E9C  08BE               	movf	___ftdiv@exp,f
  6350  0E9D  1D03               	skipz
  6351  0E9E  2EA6               	goto	i1l2520
  6352  0E9F  3000               	movlw	0
  6353  0EA0  00B0               	movwf	?___ftdiv
  6354  0EA1  3000               	movlw	0
  6355  0EA2  00B1               	movwf	?___ftdiv+1
  6356  0EA3  3000               	movlw	0
  6357  0EA4  00B2               	movwf	?___ftdiv+2
  6358  0EA5  0008               	return
  6359  0EA6                     i1l2520:	
  6360  0EA6  0830               	movf	___ftdiv@f2,w
  6361  0EA7  00B6               	movwf	??___ftdiv
  6362  0EA8  0831               	movf	___ftdiv@f2+1,w
  6363  0EA9  00B7               	movwf	??___ftdiv+1
  6364  0EAA  0832               	movf	___ftdiv@f2+2,w
  6365  0EAB  00B8               	movwf	??___ftdiv+2
  6366  0EAC  1003               	clrc
  6367  0EAD  0D37               	rlf	??___ftdiv+1,w
  6368  0EAE  0D38               	rlf	??___ftdiv+2,w
  6369  0EAF  00B9               	movwf	??___ftdiv+3
  6370  0EB0  0839               	movf	??___ftdiv+3,w
  6371  0EB1  00BF               	movwf	___ftdiv@sign
  6372  0EB2  08BF               	movf	___ftdiv@sign,f
  6373  0EB3  1D03               	skipz
  6374  0EB4  2EBC               	goto	i1l2526
  6375  0EB5  3000               	movlw	0
  6376  0EB6  00B0               	movwf	?___ftdiv
  6377  0EB7  3000               	movlw	0
  6378  0EB8  00B1               	movwf	?___ftdiv+1
  6379  0EB9  3000               	movlw	0
  6380  0EBA  00B2               	movwf	?___ftdiv+2
  6381  0EBB  0008               	return
  6382  0EBC                     i1l2526:	
  6383  0EBC  3000               	movlw	0
  6384  0EBD  00BB               	movwf	___ftdiv@f3
  6385  0EBE  3000               	movlw	0
  6386  0EBF  00BC               	movwf	___ftdiv@f3+1
  6387  0EC0  3000               	movlw	0
  6388  0EC1  00BD               	movwf	___ftdiv@f3+2
  6389  0EC2  3089               	movlw	137
  6390  0EC3  073F               	addwf	___ftdiv@sign,w
  6391  0EC4  00B6               	movwf	??___ftdiv
  6392  0EC5  0836               	movf	??___ftdiv,w
  6393  0EC6  02BE               	subwf	___ftdiv@exp,f
  6394  0EC7  0833               	movf	___ftdiv@f1,w
  6395  0EC8  00B6               	movwf	??___ftdiv
  6396  0EC9  0834               	movf	___ftdiv@f1+1,w
  6397  0ECA  00B7               	movwf	??___ftdiv+1
  6398  0ECB  0835               	movf	___ftdiv@f1+2,w
  6399  0ECC  00B8               	movwf	??___ftdiv+2
  6400  0ECD  3010               	movlw	16
  6401  0ECE                     u332_25:	
  6402  0ECE  1003               	clrc
  6403  0ECF  0CB8               	rrf	??___ftdiv+2,f
  6404  0ED0  0CB7               	rrf	??___ftdiv+1,f
  6405  0ED1  0CB6               	rrf	??___ftdiv,f
  6406  0ED2  3EFF               	addlw	-1
  6407  0ED3  1D03               	skipz
  6408  0ED4  2ECE               	goto	u332_25
  6409  0ED5  0836               	movf	??___ftdiv,w
  6410  0ED6  00B9               	movwf	??___ftdiv+3
  6411  0ED7  0839               	movf	??___ftdiv+3,w
  6412  0ED8  00BF               	movwf	___ftdiv@sign
  6413  0ED9  0830               	movf	___ftdiv@f2,w
  6414  0EDA  00B6               	movwf	??___ftdiv
  6415  0EDB  0831               	movf	___ftdiv@f2+1,w
  6416  0EDC  00B7               	movwf	??___ftdiv+1
  6417  0EDD  0832               	movf	___ftdiv@f2+2,w
  6418  0EDE  00B8               	movwf	??___ftdiv+2
  6419  0EDF  3010               	movlw	16
  6420  0EE0                     u333_25:	
  6421  0EE0  1003               	clrc
  6422  0EE1  0CB8               	rrf	??___ftdiv+2,f
  6423  0EE2  0CB7               	rrf	??___ftdiv+1,f
  6424  0EE3  0CB6               	rrf	??___ftdiv,f
  6425  0EE4  3EFF               	addlw	-1
  6426  0EE5  1D03               	skipz
  6427  0EE6  2EE0               	goto	u333_25
  6428  0EE7  0836               	movf	??___ftdiv,w
  6429  0EE8  00B9               	movwf	??___ftdiv+3
  6430  0EE9  0839               	movf	??___ftdiv+3,w
  6431  0EEA  06BF               	xorwf	___ftdiv@sign,f
  6432  0EEB  3080               	movlw	128
  6433  0EEC  00B6               	movwf	??___ftdiv
  6434  0EED  0836               	movf	??___ftdiv,w
  6435  0EEE  05BF               	andwf	___ftdiv@sign,f
  6436  0EEF  17B4               	bsf	___ftdiv@f1+1,7
  6437  0EF0  30FF               	movlw	255
  6438  0EF1  05B3               	andwf	___ftdiv@f1,f
  6439  0EF2  30FF               	movlw	255
  6440  0EF3  05B4               	andwf	___ftdiv@f1+1,f
  6441  0EF4  3000               	movlw	0
  6442  0EF5  05B5               	andwf	___ftdiv@f1+2,f
  6443  0EF6  17B1               	bsf	___ftdiv@f2+1,7
  6444  0EF7  30FF               	movlw	255
  6445  0EF8  05B0               	andwf	___ftdiv@f2,f
  6446  0EF9  30FF               	movlw	255
  6447  0EFA  05B1               	andwf	___ftdiv@f2+1,f
  6448  0EFB  3000               	movlw	0
  6449  0EFC  05B2               	andwf	___ftdiv@f2+2,f
  6450  0EFD  3018               	movlw	24
  6451  0EFE  00B6               	movwf	??___ftdiv
  6452  0EFF  0836               	movf	??___ftdiv,w
  6453  0F00  00BA               	movwf	___ftdiv@cntr
  6454  0F01                     i1l2540:	
  6455  0F01  3001               	movlw	1
  6456  0F02                     u334_25:	
  6457  0F02  1003               	clrc
  6458  0F03  0DBB               	rlf	___ftdiv@f3,f
  6459  0F04  0DBC               	rlf	___ftdiv@f3+1,f
  6460  0F05  0DBD               	rlf	___ftdiv@f3+2,f
  6461  0F06  3EFF               	addlw	-1
  6462  0F07  1D03               	skipz
  6463  0F08  2F02               	goto	u334_25
  6464  0F09  0832               	movf	___ftdiv@f2+2,w
  6465  0F0A  0235               	subwf	___ftdiv@f1+2,w
  6466  0F0B  1D03               	skipz
  6467  0F0C  2F13               	goto	u335_25
  6468  0F0D  0831               	movf	___ftdiv@f2+1,w
  6469  0F0E  0234               	subwf	___ftdiv@f1+1,w
  6470  0F0F  1D03               	skipz
  6471  0F10  2F13               	goto	u335_25
  6472  0F11  0830               	movf	___ftdiv@f2,w
  6473  0F12  0233               	subwf	___ftdiv@f1,w
  6474  0F13                     u335_25:	
  6475  0F13  1C03               	skipc
  6476  0F14  2F20               	goto	i1l2548
  6477  0F15  0830               	movf	___ftdiv@f2,w
  6478  0F16  02B3               	subwf	___ftdiv@f1,f
  6479  0F17  0831               	movf	___ftdiv@f2+1,w
  6480  0F18  1C03               	skipc
  6481  0F19  0F31               	incfsz	___ftdiv@f2+1,w
  6482  0F1A  02B4               	subwf	___ftdiv@f1+1,f
  6483  0F1B  0832               	movf	___ftdiv@f2+2,w
  6484  0F1C  1C03               	skipc
  6485  0F1D  0A32               	incf	___ftdiv@f2+2,w
  6486  0F1E  02B5               	subwf	___ftdiv@f1+2,f
  6487  0F1F  143B               	bsf	___ftdiv@f3,0
  6488  0F20                     i1l2548:	
  6489  0F20  3001               	movlw	1
  6490  0F21                     u336_25:	
  6491  0F21  1003               	clrc
  6492  0F22  0DB3               	rlf	___ftdiv@f1,f
  6493  0F23  0DB4               	rlf	___ftdiv@f1+1,f
  6494  0F24  0DB5               	rlf	___ftdiv@f1+2,f
  6495  0F25  3EFF               	addlw	-1
  6496  0F26  1D03               	skipz
  6497  0F27  2F21               	goto	u336_25
  6498  0F28  3001               	movlw	1
  6499  0F29  02BA               	subwf	___ftdiv@cntr,f
  6500  0F2A  1D03               	btfss	3,2
  6501  0F2B  2F01               	goto	i1l2540
  6502  0F2C  083B               	movf	___ftdiv@f3,w
  6503  0F2D  00F0               	movwf	___ftpack@arg
  6504  0F2E  083C               	movf	___ftdiv@f3+1,w
  6505  0F2F  00F1               	movwf	___ftpack@arg+1
  6506  0F30  083D               	movf	___ftdiv@f3+2,w
  6507  0F31  00F2               	movwf	___ftpack@arg+2
  6508  0F32  083E               	movf	___ftdiv@exp,w
  6509  0F33  00B6               	movwf	??___ftdiv
  6510  0F34  0836               	movf	??___ftdiv,w
  6511  0F35  00F3               	movwf	___ftpack@exp
  6512  0F36  083F               	movf	___ftdiv@sign,w
  6513  0F37  00B7               	movwf	??___ftdiv+1
  6514  0F38  0837               	movf	??___ftdiv+1,w
  6515  0F39  00F4               	movwf	___ftpack@sign
  6516  0F3A  120A  158A  24F7   	fcall	___ftpack
  6517  0F3D  0870               	movf	?___ftpack,w
  6518  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  6519  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  6520  0F40  00B0               	movwf	?___ftdiv
  6521  0F41  0871               	movf	?___ftpack+1,w
  6522  0F42  00B1               	movwf	?___ftdiv+1
  6523  0F43  0872               	movf	?___ftpack+2,w
  6524  0F44  00B2               	movwf	?___ftdiv+2
  6525  0F45  0008               	return
  6526  0F46                     __end_of___ftdiv:	
  6527                           
  6528                           	psect	text32
  6529  0873                     __ptext32:	
  6530 ;; *************** function ___awtoft *****************
  6531 ;; Defined at:
  6532 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  c               2    8[COMMON] int 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  sign            1   13[COMMON] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  3    8[COMMON] float 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2, status,0, pclath, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6546 ;;      Params:         3       0       0       0       0
  6547 ;;      Locals:         1       0       0       0       0
  6548 ;;      Temps:          2       0       0       0       0
  6549 ;;      Totals:         6       0       0       0       0
  6550 ;;Total ram usage:        6 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    1
  6553 ;; This function calls:
  6554 ;;		___ftpack
  6555 ;; This function is called by:
  6556 ;;		_ISR
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function ___awtoft
  6562  0873                     ___awtoft:	
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6566  0873  01FD               	clrf	___awtoft@sign
  6567  0874  1FF9               	btfss	___awtoft@c+1,7
  6568  0875  287D               	goto	i1l2510
  6569  0876  09F8               	comf	___awtoft@c,f
  6570  0877  09F9               	comf	___awtoft@c+1,f
  6571  0878  0AF8               	incf	___awtoft@c,f
  6572  0879  1903               	skipnz
  6573  087A  0AF9               	incf	___awtoft@c+1,f
  6574  087B  01FD               	clrf	___awtoft@sign
  6575  087C  0AFD               	incf	___awtoft@sign,f
  6576  087D                     i1l2510:	
  6577  087D  0878               	movf	___awtoft@c,w
  6578  087E  00F0               	movwf	___ftpack@arg
  6579  087F  0879               	movf	___awtoft@c+1,w
  6580  0880  00F1               	movwf	___ftpack@arg+1
  6581  0881  01F2               	clrf	___ftpack@arg+2
  6582  0882  308E               	movlw	142
  6583  0883  00FB               	movwf	??___awtoft
  6584  0884  087B               	movf	??___awtoft,w
  6585  0885  00F3               	movwf	___ftpack@exp
  6586  0886  087D               	movf	___awtoft@sign,w
  6587  0887  00FC               	movwf	??___awtoft+1
  6588  0888  087C               	movf	??___awtoft+1,w
  6589  0889  00F4               	movwf	___ftpack@sign
  6590  088A  120A  158A  24F7   	fcall	___ftpack
  6591  088D  0870               	movf	?___ftpack,w
  6592  088E  00F8               	movwf	?___awtoft
  6593  088F  0871               	movf	?___ftpack+1,w
  6594  0890  00F9               	movwf	?___awtoft+1
  6595  0891  0872               	movf	?___ftpack+2,w
  6596  0892  00FA               	movwf	?___awtoft+2
  6597  0893  0008               	return
  6598  0894                     __end_of___awtoft:	
  6599                           
  6600                           	psect	text33
  6601  0CF7                     __ptext33:	
  6602 ;; *************** function ___ftpack *****************
  6603 ;; Defined at:
  6604 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  arg             3    0[COMMON] unsigned um
  6607 ;;  exp             1    3[COMMON] unsigned char 
  6608 ;;  sign            1    4[COMMON] unsigned char 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  3    0[COMMON] float 
  6613 ;; Registers used:
  6614 ;;		wreg, status,2, status,0
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6620 ;;      Params:         5       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0
  6622 ;;      Temps:          3       0       0       0       0
  6623 ;;      Totals:         8       0       0       0       0
  6624 ;;Total ram usage:        8 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		___awtoft
  6630 ;;		___ftadd
  6631 ;;		___ftdiv
  6632 ;;		___ftmul
  6633 ;;		___lltoft
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function ___ftpack
  6639  0CF7                     ___ftpack:	
  6640                           
  6641                           ;incstack = 0
  6642 ;; hardware stack exceeded
  6643                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6644  0CF7  0873               	movf	___ftpack@exp,w
  6645  0CF8  1903               	btfsc	3,2
  6646  0CF9  2CFF               	goto	i1l1828
  6647  0CFA  0872               	movf	___ftpack@arg+2,w
  6648  0CFB  0471               	iorwf	___ftpack@arg+1,w
  6649  0CFC  0470               	iorwf	___ftpack@arg,w
  6650  0CFD  1D03               	skipz
  6651  0CFE  2D12               	goto	i1l1834
  6652  0CFF                     i1l1828:	
  6653  0CFF  3000               	movlw	0
  6654  0D00  00F0               	movwf	?___ftpack
  6655  0D01  3000               	movlw	0
  6656  0D02  00F1               	movwf	?___ftpack+1
  6657  0D03  3000               	movlw	0
  6658  0D04  00F2               	movwf	?___ftpack+2
  6659  0D05  0008               	return
  6660  0D06                     i1l1832:	
  6661  0D06  3001               	movlw	1
  6662  0D07  00F5               	movwf	??___ftpack
  6663  0D08  0875               	movf	??___ftpack,w
  6664  0D09  07F3               	addwf	___ftpack@exp,f
  6665  0D0A  3001               	movlw	1
  6666  0D0B                     u190_25:	
  6667  0D0B  1003               	clrc
  6668  0D0C  0CF2               	rrf	___ftpack@arg+2,f
  6669  0D0D  0CF1               	rrf	___ftpack@arg+1,f
  6670  0D0E  0CF0               	rrf	___ftpack@arg,f
  6671  0D0F  3EFF               	addlw	-1
  6672  0D10  1D03               	skipz
  6673  0D11  2D0B               	goto	u190_25
  6674  0D12                     i1l1834:	
  6675  0D12  30FE               	movlw	254
  6676  0D13  0572               	andwf	___ftpack@arg+2,w
  6677  0D14  1903               	btfsc	3,2
  6678  0D15  2D2D               	goto	i1l489
  6679  0D16  2D06               	goto	i1l1832
  6680  0D17                     i1l1836:	
  6681  0D17  3001               	movlw	1
  6682  0D18  00F5               	movwf	??___ftpack
  6683  0D19  0875               	movf	??___ftpack,w
  6684  0D1A  07F3               	addwf	___ftpack@exp,f
  6685  0D1B  3001               	movlw	1
  6686  0D1C  07F0               	addwf	___ftpack@arg,f
  6687  0D1D  3000               	movlw	0
  6688  0D1E  1803               	skipnc
  6689  0D1F  3001               	movlw	1
  6690  0D20  07F1               	addwf	___ftpack@arg+1,f
  6691  0D21  3000               	movlw	0
  6692  0D22  1803               	skipnc
  6693  0D23  3001               	movlw	1
  6694  0D24  07F2               	addwf	___ftpack@arg+2,f
  6695  0D25  3001               	movlw	1
  6696  0D26                     u192_25:	
  6697  0D26  1003               	clrc
  6698  0D27  0CF2               	rrf	___ftpack@arg+2,f
  6699  0D28  0CF1               	rrf	___ftpack@arg+1,f
  6700  0D29  0CF0               	rrf	___ftpack@arg,f
  6701  0D2A  3EFF               	addlw	-1
  6702  0D2B  1D03               	skipz
  6703  0D2C  2D26               	goto	u192_25
  6704  0D2D                     i1l489:	
  6705  0D2D  30FF               	movlw	255
  6706  0D2E  0572               	andwf	___ftpack@arg+2,w
  6707  0D2F  1903               	btfsc	3,2
  6708  0D30  2D3C               	goto	i1l1844
  6709  0D31  2D17               	goto	i1l1836
  6710  0D32                     i1l1842:	
  6711  0D32  3001               	movlw	1
  6712  0D33  02F3               	subwf	___ftpack@exp,f
  6713  0D34  3001               	movlw	1
  6714  0D35                     u194_25:	
  6715  0D35  1003               	clrc
  6716  0D36  0DF0               	rlf	___ftpack@arg,f
  6717  0D37  0DF1               	rlf	___ftpack@arg+1,f
  6718  0D38  0DF2               	rlf	___ftpack@arg+2,f
  6719  0D39  3EFF               	addlw	-1
  6720  0D3A  1D03               	skipz
  6721  0D3B  2D35               	goto	u194_25
  6722  0D3C                     i1l1844:	
  6723  0D3C  1FF1               	btfss	___ftpack@arg+1,7
  6724  0D3D  2D32               	goto	i1l1842
  6725  0D3E  1873               	btfsc	___ftpack@exp,0
  6726  0D3F  2D46               	goto	i1l495
  6727  0D40  30FF               	movlw	255
  6728  0D41  05F0               	andwf	___ftpack@arg,f
  6729  0D42  307F               	movlw	127
  6730  0D43  05F1               	andwf	___ftpack@arg+1,f
  6731  0D44  30FF               	movlw	255
  6732  0D45  05F2               	andwf	___ftpack@arg+2,f
  6733  0D46                     i1l495:	
  6734  0D46  1003               	clrc
  6735  0D47  0CF3               	rrf	___ftpack@exp,f
  6736  0D48  0873               	movf	___ftpack@exp,w
  6737  0D49  00F5               	movwf	??___ftpack
  6738  0D4A  01F6               	clrf	??___ftpack+1
  6739  0D4B  01F7               	clrf	??___ftpack+2
  6740  0D4C  3010               	movlw	16
  6741  0D4D                     u197_25:	
  6742  0D4D  1003               	clrc
  6743  0D4E  0DF5               	rlf	??___ftpack,f
  6744  0D4F  0DF6               	rlf	??___ftpack+1,f
  6745  0D50  0DF7               	rlf	??___ftpack+2,f
  6746  0D51  3EFF               	addlw	-1
  6747  0D52  1D03               	skipz
  6748  0D53  2D4D               	goto	u197_25
  6749  0D54  0875               	movf	??___ftpack,w
  6750  0D55  04F0               	iorwf	___ftpack@arg,f
  6751  0D56  0876               	movf	??___ftpack+1,w
  6752  0D57  04F1               	iorwf	___ftpack@arg+1,f
  6753  0D58  0877               	movf	??___ftpack+2,w
  6754  0D59  04F2               	iorwf	___ftpack@arg+2,f
  6755  0D5A  0874               	movf	___ftpack@sign,w
  6756  0D5B  1903               	btfsc	3,2
  6757  0D5C  0008               	return
  6758  0D5D  17F2               	bsf	___ftpack@arg+2,7
  6759  0D5E  0008               	return
  6760  0D5F                     __end_of___ftpack:	
  6761                           
  6762                           	psect	text34
  6763  0AD3                     __ptext34:	
  6764 ;; *************** function ___awmod *****************
  6765 ;; Defined at:
  6766 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awmod.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  divisor         2    9[COMMON] int 
  6769 ;;  dividend        2   11[COMMON] int 
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;  sign            1    1[BANK0 ] unsigned char 
  6772 ;;  counter         1    0[BANK0 ] unsigned char 
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  2    9[COMMON] int 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2, status,0
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6782 ;;      Params:         4       0       0       0       0
  6783 ;;      Locals:         0       2       0       0       0
  6784 ;;      Temps:          1       0       0       0       0
  6785 ;;      Totals:         5       2       0       0       0
  6786 ;;Total ram usage:        7 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; This function calls:
  6789 ;;		Nothing
  6790 ;; This function is called by:
  6791 ;;		_ISR
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function ___awmod
  6797  0AD3                     ___awmod:	
  6798                           
  6799                           ;incstack = 0
  6800                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6801  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  6802  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  6803  0AD5  01A1               	clrf	___awmod@sign
  6804  0AD6  1FFC               	btfss	___awmod@dividend+1,7
  6805  0AD7  2ADF               	goto	i1l2472
  6806  0AD8  09FB               	comf	___awmod@dividend,f
  6807  0AD9  09FC               	comf	___awmod@dividend+1,f
  6808  0ADA  0AFB               	incf	___awmod@dividend,f
  6809  0ADB  1903               	skipnz
  6810  0ADC  0AFC               	incf	___awmod@dividend+1,f
  6811  0ADD  01A1               	clrf	___awmod@sign
  6812  0ADE  0AA1               	incf	___awmod@sign,f
  6813  0ADF                     i1l2472:	
  6814  0ADF  1FFA               	btfss	___awmod@divisor+1,7
  6815  0AE0  2AE6               	goto	i1l2476
  6816  0AE1  09F9               	comf	___awmod@divisor,f
  6817  0AE2  09FA               	comf	___awmod@divisor+1,f
  6818  0AE3  0AF9               	incf	___awmod@divisor,f
  6819  0AE4  1903               	skipnz
  6820  0AE5  0AFA               	incf	___awmod@divisor+1,f
  6821  0AE6                     i1l2476:	
  6822  0AE6  087A               	movf	___awmod@divisor+1,w
  6823  0AE7  0479               	iorwf	___awmod@divisor,w
  6824  0AE8  1903               	skipnz
  6825  0AE9  2B13               	goto	i1l2494
  6826  0AEA  01A0               	clrf	___awmod@counter
  6827  0AEB  0AA0               	incf	___awmod@counter,f
  6828  0AEC                     i1l2484:	
  6829  0AEC  1BFA               	btfsc	___awmod@divisor+1,7
  6830  0AED  2AFA               	goto	i1l2486
  6831  0AEE  3001               	movlw	1
  6832  0AEF                     u323_25:	
  6833  0AEF  1003               	clrc
  6834  0AF0  0DF9               	rlf	___awmod@divisor,f
  6835  0AF1  0DFA               	rlf	___awmod@divisor+1,f
  6836  0AF2  3EFF               	addlw	-1
  6837  0AF3  1D03               	skipz
  6838  0AF4  2AEF               	goto	u323_25
  6839  0AF5  3001               	movlw	1
  6840  0AF6  00FD               	movwf	??___awmod
  6841  0AF7  087D               	movf	??___awmod,w
  6842  0AF8  07A0               	addwf	___awmod@counter,f
  6843  0AF9  2AEC               	goto	i1l2484
  6844  0AFA                     i1l2486:	
  6845  0AFA  087A               	movf	___awmod@divisor+1,w
  6846  0AFB  027C               	subwf	___awmod@dividend+1,w
  6847  0AFC  1D03               	skipz
  6848  0AFD  2B00               	goto	u325_25
  6849  0AFE  0879               	movf	___awmod@divisor,w
  6850  0AFF  027B               	subwf	___awmod@dividend,w
  6851  0B00                     u325_25:	
  6852  0B00  1C03               	skipc
  6853  0B01  2B08               	goto	i1l2490
  6854  0B02  0879               	movf	___awmod@divisor,w
  6855  0B03  02FB               	subwf	___awmod@dividend,f
  6856  0B04  087A               	movf	___awmod@divisor+1,w
  6857  0B05  1C03               	skipc
  6858  0B06  03FC               	decf	___awmod@dividend+1,f
  6859  0B07  02FC               	subwf	___awmod@dividend+1,f
  6860  0B08                     i1l2490:	
  6861  0B08  3001               	movlw	1
  6862  0B09                     u326_25:	
  6863  0B09  1003               	clrc
  6864  0B0A  0CFA               	rrf	___awmod@divisor+1,f
  6865  0B0B  0CF9               	rrf	___awmod@divisor,f
  6866  0B0C  3EFF               	addlw	-1
  6867  0B0D  1D03               	skipz
  6868  0B0E  2B09               	goto	u326_25
  6869  0B0F  3001               	movlw	1
  6870  0B10  02A0               	subwf	___awmod@counter,f
  6871  0B11  1D03               	btfss	3,2
  6872  0B12  2AFA               	goto	i1l2486
  6873  0B13                     i1l2494:	
  6874  0B13  0821               	movf	___awmod@sign,w
  6875  0B14  1903               	btfsc	3,2
  6876  0B15  2B1B               	goto	i1l2498
  6877  0B16  09FB               	comf	___awmod@dividend,f
  6878  0B17  09FC               	comf	___awmod@dividend+1,f
  6879  0B18  0AFB               	incf	___awmod@dividend,f
  6880  0B19  1903               	skipnz
  6881  0B1A  0AFC               	incf	___awmod@dividend+1,f
  6882  0B1B                     i1l2498:	
  6883  0B1B  087C               	movf	___awmod@dividend+1,w
  6884  0B1C  01FA               	clrf	?___awmod+1
  6885  0B1D  07FA               	addwf	?___awmod+1,f
  6886  0B1E  087B               	movf	___awmod@dividend,w
  6887  0B1F  01F9               	clrf	?___awmod
  6888  0B20  07F9               	addwf	?___awmod,f
  6889  0B21  0008               	return
  6890  0B22                     __end_of___awmod:	
  6891                           
  6892                           	psect	text35
  6893  0B7B                     __ptext35:	
  6894 ;; *************** function ___awdiv *****************
  6895 ;; Defined at:
  6896 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awdiv.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  divisor         2    0[COMMON] int 
  6899 ;;  dividend        2    2[COMMON] int 
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  quotient        2    7[COMMON] int 
  6902 ;;  sign            1    6[COMMON] unsigned char 
  6903 ;;  counter         1    5[COMMON] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  2    0[COMMON] int 
  6906 ;; Registers used:
  6907 ;;		wreg, status,2, status,0
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6913 ;;      Params:         4       0       0       0       0
  6914 ;;      Locals:         4       0       0       0       0
  6915 ;;      Temps:          1       0       0       0       0
  6916 ;;      Totals:         9       0       0       0       0
  6917 ;;Total ram usage:        9 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; This function calls:
  6920 ;;		Nothing
  6921 ;; This function is called by:
  6922 ;;		_ISR
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function ___awdiv
  6928  0B7B                     ___awdiv:	
  6929                           
  6930                           ;incstack = 0
  6931                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6932  0B7B  01F6               	clrf	___awdiv@sign
  6933  0B7C  1FF1               	btfss	___awdiv@divisor+1,7
  6934  0B7D  2B85               	goto	i1l2428
  6935  0B7E  09F0               	comf	___awdiv@divisor,f
  6936  0B7F  09F1               	comf	___awdiv@divisor+1,f
  6937  0B80  0AF0               	incf	___awdiv@divisor,f
  6938  0B81  1903               	skipnz
  6939  0B82  0AF1               	incf	___awdiv@divisor+1,f
  6940  0B83  01F6               	clrf	___awdiv@sign
  6941  0B84  0AF6               	incf	___awdiv@sign,f
  6942  0B85                     i1l2428:	
  6943  0B85  1FF3               	btfss	___awdiv@dividend+1,7
  6944  0B86  2B90               	goto	i1l2434
  6945  0B87  09F2               	comf	___awdiv@dividend,f
  6946  0B88  09F3               	comf	___awdiv@dividend+1,f
  6947  0B89  0AF2               	incf	___awdiv@dividend,f
  6948  0B8A  1903               	skipnz
  6949  0B8B  0AF3               	incf	___awdiv@dividend+1,f
  6950  0B8C  3001               	movlw	1
  6951  0B8D  00F4               	movwf	??___awdiv
  6952  0B8E  0874               	movf	??___awdiv,w
  6953  0B8F  06F6               	xorwf	___awdiv@sign,f
  6954  0B90                     i1l2434:	
  6955  0B90  01F7               	clrf	___awdiv@quotient
  6956  0B91  01F8               	clrf	___awdiv@quotient+1
  6957  0B92  0871               	movf	___awdiv@divisor+1,w
  6958  0B93  0470               	iorwf	___awdiv@divisor,w
  6959  0B94  1903               	skipnz
  6960  0B95  2BC7               	goto	i1l2456
  6961  0B96  01F5               	clrf	___awdiv@counter
  6962  0B97  0AF5               	incf	___awdiv@counter,f
  6963  0B98                     i1l2444:	
  6964  0B98  1BF1               	btfsc	___awdiv@divisor+1,7
  6965  0B99  2BA6               	goto	i1l2446
  6966  0B9A  3001               	movlw	1
  6967  0B9B                     u313_25:	
  6968  0B9B  1003               	clrc
  6969  0B9C  0DF0               	rlf	___awdiv@divisor,f
  6970  0B9D  0DF1               	rlf	___awdiv@divisor+1,f
  6971  0B9E  3EFF               	addlw	-1
  6972  0B9F  1D03               	skipz
  6973  0BA0  2B9B               	goto	u313_25
  6974  0BA1  3001               	movlw	1
  6975  0BA2  00F4               	movwf	??___awdiv
  6976  0BA3  0874               	movf	??___awdiv,w
  6977  0BA4  07F5               	addwf	___awdiv@counter,f
  6978  0BA5  2B98               	goto	i1l2444
  6979  0BA6                     i1l2446:	
  6980  0BA6  3001               	movlw	1
  6981  0BA7                     u315_25:	
  6982  0BA7  1003               	clrc
  6983  0BA8  0DF7               	rlf	___awdiv@quotient,f
  6984  0BA9  0DF8               	rlf	___awdiv@quotient+1,f
  6985  0BAA  3EFF               	addlw	-1
  6986  0BAB  1D03               	skipz
  6987  0BAC  2BA7               	goto	u315_25
  6988  0BAD  0871               	movf	___awdiv@divisor+1,w
  6989  0BAE  0273               	subwf	___awdiv@dividend+1,w
  6990  0BAF  1D03               	skipz
  6991  0BB0  2BB3               	goto	u316_25
  6992  0BB1  0870               	movf	___awdiv@divisor,w
  6993  0BB2  0272               	subwf	___awdiv@dividend,w
  6994  0BB3                     u316_25:	
  6995  0BB3  1C03               	skipc
  6996  0BB4  2BBC               	goto	i1l2452
  6997  0BB5  0870               	movf	___awdiv@divisor,w
  6998  0BB6  02F2               	subwf	___awdiv@dividend,f
  6999  0BB7  0871               	movf	___awdiv@divisor+1,w
  7000  0BB8  1C03               	skipc
  7001  0BB9  03F3               	decf	___awdiv@dividend+1,f
  7002  0BBA  02F3               	subwf	___awdiv@dividend+1,f
  7003  0BBB  1477               	bsf	___awdiv@quotient,0
  7004  0BBC                     i1l2452:	
  7005  0BBC  3001               	movlw	1
  7006  0BBD                     u317_25:	
  7007  0BBD  1003               	clrc
  7008  0BBE  0CF1               	rrf	___awdiv@divisor+1,f
  7009  0BBF  0CF0               	rrf	___awdiv@divisor,f
  7010  0BC0  3EFF               	addlw	-1
  7011  0BC1  1D03               	skipz
  7012  0BC2  2BBD               	goto	u317_25
  7013  0BC3  3001               	movlw	1
  7014  0BC4  02F5               	subwf	___awdiv@counter,f
  7015  0BC5  1D03               	btfss	3,2
  7016  0BC6  2BA6               	goto	i1l2446
  7017  0BC7                     i1l2456:	
  7018  0BC7  0876               	movf	___awdiv@sign,w
  7019  0BC8  1903               	btfsc	3,2
  7020  0BC9  2BCF               	goto	i1l2460
  7021  0BCA  09F7               	comf	___awdiv@quotient,f
  7022  0BCB  09F8               	comf	___awdiv@quotient+1,f
  7023  0BCC  0AF7               	incf	___awdiv@quotient,f
  7024  0BCD  1903               	skipnz
  7025  0BCE  0AF8               	incf	___awdiv@quotient+1,f
  7026  0BCF                     i1l2460:	
  7027  0BCF  0878               	movf	___awdiv@quotient+1,w
  7028  0BD0  01F1               	clrf	?___awdiv+1
  7029  0BD1  07F1               	addwf	?___awdiv+1,f
  7030  0BD2  0877               	movf	___awdiv@quotient,w
  7031  0BD3  01F0               	clrf	?___awdiv
  7032  0BD4  07F0               	addwf	?___awdiv,f
  7033  0BD5  0008               	return
  7034  0BD6                     __end_of___awdiv:	
  7035                           
  7036                           	psect	text36
  7037  0801                     __ptext36:	
  7038 ;; *************** function _USARTReceiveChar *****************
  7039 ;; Defined at:
  7040 ;;		line 73 in file "main.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  USARTData       1    4[COMMON] unsigned char 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      unsigned char 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7054 ;;      Params:         0       0       0       0       0
  7055 ;;      Locals:         1       0       0       0       0
  7056 ;;      Temps:          1       0       0       0       0
  7057 ;;      Totals:         2       0       0       0       0
  7058 ;;Total ram usage:        2 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    2
  7061 ;; This function calls:
  7062 ;;		i1_USARTWriteString
  7063 ;; This function is called by:
  7064 ;;		_ISR
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           
  7069                           ;psect for function _USARTReceiveChar
  7070  0801                     _USARTReceiveChar:	
  7071                           
  7072                           ;main.c: 74: unsigned char USARTData;
  7073                           ;main.c: 76: if (!OERR)
  7074                           
  7075                           ;incstack = 0
  7076 ;; hardware stack exceeded
  7077                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7078  0801  1283               	bcf	3,5	;RP0=0, select bank0
  7079  0802  1303               	bcf	3,6	;RP1=0, select bank0
  7080  0803  1898               	btfsc	24,1	;volatile
  7081  0804  280A               	goto	i1l2326
  7082                           
  7083                           ;main.c: 77: {
  7084                           ;main.c: 78: USARTData = RCREG;
  7085  0805  081A               	movf	26,w	;volatile
  7086  0806  00F3               	movwf	??_USARTReceiveChar
  7087  0807  0873               	movf	??_USARTReceiveChar,w
  7088  0808  00F4               	movwf	USARTReceiveChar@USARTData
  7089  0809  2819               	goto	i1l2334
  7090  080A                     i1l2326:	
  7091                           ;main.c: 80: } else {
  7092                           
  7093                           ;main.c: 79: PIR1bits.RCIF = 0;
  7094                           
  7095                           
  7096                           ;main.c: 81: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7097  080A  3059               	movlw	low (STR_1-__stringbase)
  7098  080B  00F1               	movwf	i1USARTWriteString@str
  7099  080C  3080               	movlw	128
  7100  080D  00F2               	movwf	i1USARTWriteString@str+1
  7101  080E  120A  158A  2094   	fcall	i1_USARTWriteString
  7102                           
  7103                           ;main.c: 83: RCSTAbits.CREN = 0;
  7104  0811  1283               	bcf	3,5	;RP0=0, select bank0
  7105  0812  1303               	bcf	3,6	;RP1=0, select bank0
  7106  0813  1218               	bcf	24,4	;volatile
  7107                           
  7108                           ;main.c: 84: USARTData = RCREG;
  7109  0814  081A               	movf	26,w	;volatile
  7110  0815  00F3               	movwf	??_USARTReceiveChar
  7111  0816  0873               	movf	??_USARTReceiveChar,w
  7112  0817  00F4               	movwf	USARTReceiveChar@USARTData
  7113                           
  7114                           ;main.c: 85: RCSTAbits.CREN = 1;
  7115  0818  1618               	bsf	24,4	;volatile
  7116  0819                     i1l2334:	
  7117                           
  7118                           ;main.c: 86: PIR1bits.RCIF = 0;
  7119  0819  128C               	bcf	12,5	;volatile
  7120                           
  7121                           ;main.c: 87: }
  7122                           ;main.c: 89: return (USARTData);
  7123  081A  0874               	movf	USARTReceiveChar@USARTData,w
  7124  081B  0008               	return
  7125  081C                     __end_of_USARTReceiveChar:	
  7126                           
  7127                           	psect	text37
  7128  0894                     __ptext37:	
  7129 ;; *************** function i1_USARTWriteString *****************
  7130 ;; Defined at:
  7131 ;;		line 62 in file "main.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;  str             2    1[COMMON] PTR const unsigned char 
  7134 ;;		 -> ftoa@buf(17), STR_7(16), STR_5(23), STR_4(44), 
  7135 ;;		 -> STR_1(40), 
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;		None               void
  7140 ;; Registers used:
  7141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7147 ;;      Params:         2       0       0       0       0
  7148 ;;      Locals:         0       0       0       0       0
  7149 ;;      Temps:          0       0       0       0       0
  7150 ;;      Totals:         2       0       0       0       0
  7151 ;;Total ram usage:        2 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    1
  7154 ;; This function calls:
  7155 ;;		i1_USARTWriteChar
  7156 ;; This function is called by:
  7157 ;;		_USARTReceiveChar
  7158 ;;		_ISR
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           
  7163                           ;psect for function i1_USARTWriteString
  7164  0894                     i1_USARTWriteString:	
  7165  0894                     i1l2294:	
  7166                           ;main.c: 64: while (*str != '\0') {
  7167                           
  7168                           ;incstack = 0
  7169 ;; using string table level
  7170                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7171                           
  7172  0894  0872               	movf	i1USARTWriteString@str+1,w
  7173  0895  1283               	bcf	3,5	;RP0=0, select bank0
  7174  0896  1303               	bcf	3,6	;RP1=0, select bank0
  7175  0897  00FF               	movwf	127
  7176  0898  0871               	movf	i1USARTWriteString@str,w
  7177  0899  0084               	movwf	4
  7178  089A  120A  118A  2700  120A  158A  	fcall	stringtab
  7179  089F  3800               	iorlw	0
  7180  08A0  1903               	btfsc	3,2
  7181  08A1  0008               	return
  7182                           
  7183                           ;main.c: 66: USARTWriteChar(*str);
  7184  08A2  0872               	movf	i1USARTWriteString@str+1,w
  7185  08A3  1283               	bcf	3,5	;RP0=0, select bank0
  7186  08A4  1303               	bcf	3,6	;RP1=0, select bank0
  7187  08A5  00FF               	movwf	127
  7188  08A6  0871               	movf	i1USARTWriteString@str,w
  7189  08A7  0084               	movwf	4
  7190  08A8  120A  118A  2700  120A  158A  	fcall	stringtab
  7191  08AD  160A  118A  277E  120A  158A  	fcall	i1_USARTWriteChar
  7192                           
  7193                           ;main.c: 67: str++;
  7194  08B2  3001               	movlw	1
  7195  08B3  07F1               	addwf	i1USARTWriteString@str,f
  7196  08B4  1803               	skipnc
  7197  08B5  0AF2               	incf	i1USARTWriteString@str+1,f
  7198  08B6  2894               	goto	i1l2294
  7199  08B7                     __end_ofi1_USARTWriteString:	
  7200                           
  7201                           	psect	text38
  7202  177E                     __ptext38:	
  7203 ;; *************** function i1_USARTWriteChar *****************
  7204 ;; Defined at:
  7205 ;;		line 55 in file "main.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  USARTData       1    wreg     unsigned char 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  USARTData       1    0[COMMON] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;		None               void
  7212 ;; Registers used:
  7213 ;;		wreg
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7219 ;;      Params:         0       0       0       0       0
  7220 ;;      Locals:         1       0       0       0       0
  7221 ;;      Temps:          0       0       0       0       0
  7222 ;;      Totals:         1       0       0       0       0
  7223 ;;Total ram usage:        1 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_ISR
  7229 ;;		i1_USARTWriteString
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           
  7234                           ;psect for function i1_USARTWriteChar
  7235  177E                     i1_USARTWriteChar:	
  7236                           
  7237                           ;incstack = 0
  7238                           ; Regs used in i1_USARTWriteChar: [wreg]
  7239                           ;i1USARTWriteChar@USARTData stored from wreg
  7240  177E  00F0               	movwf	i1USARTWriteChar@USARTData
  7241  177F                     i1l66:	
  7242                           ;main.c: 56: while (!PIR1bits.TXIF);
  7243                           
  7244  177F  1283               	bcf	3,5	;RP0=0, select bank0
  7245  1780  1303               	bcf	3,6	;RP1=0, select bank0
  7246  1781  1E0C               	btfss	12,4	;volatile
  7247  1782  2F7F               	goto	i1l66
  7248                           
  7249                           ;main.c: 57: TXREG = USARTData;
  7250  1783  0870               	movf	i1USARTWriteChar@USARTData,w
  7251  1784  0099               	movwf	25	;volatile
  7252  1785  0008               	return
  7253  1786                     __end_ofi1_USARTWriteChar:	
  7254  007E                     btemp	set	126	;btemp
  7255  007E                     wtemp	set	126
  7256  007E                     wtemp0	set	126
  7257  0080                     wtemp1	set	128
  7258  0082                     wtemp2	set	130
  7259  0084                     wtemp3	set	132
  7260  0086                     wtemp4	set	134
  7261  0088                     wtemp5	set	136
  7262  007F                     wtemp6	set	127
  7263  007E                     ttemp	set	126
  7264  007E                     ttemp0	set	126
  7265  0081                     ttemp1	set	129
  7266  0084                     ttemp2	set	132
  7267  0087                     ttemp3	set	135
  7268  007F                     ttemp4	set	127
  7269  007E                     ltemp	set	126
  7270  007E                     ltemp0	set	126
  7271  0082                     ltemp1	set	130
  7272  0086                     ltemp2	set	134
  7273  0080                     ltemp3	set	128


Data Sizes:
    Strings     143
    Constant    44
    Data        18
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      77
    BANK1            80     36      61
    BANK3            96     17      17
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK1[2]), ISR@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S662$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), STR_6(CODE[16]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> ISR@aux(BANK1[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@result	PTR unsigned char  size(1) Largest target is 16
		 -> ISR@aux(BANK1[16]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 44
		 -> ftoa@buf(BANK0[17]), STR_7(CODE[16]), STR_5(CODE[23]), STR_4(CODE[44]), 
		 -> STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod
    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    ___awmod->___awdiv
    _USARTReceiveChar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_lcd_escreve_string
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTWriteString->_USARTWriteChar
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4791
                                             14 BANK3      3     3      0
                            _ADCInit
                            _ADCRead
                           _LCDClear
                   _USARTWriteString
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_string                                   2     0      2    2385
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             3     3      0    2075
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           4     3      1    1180
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (1) _init_lcd_4bit                                        3     3      0    1124
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (1) _USARTWriteString                                     2     0      2     341
                                              1 BANK3      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTWriteChar                                       1     1      0      31
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             2     2      0     833
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_envia_byte                                       3     2      1     833
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_nibble                                     2     2      0     124
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2     108
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 50    50      0   23218
                                             50 BANK0      8     8      0
                                              0 BANK1     36    36      0
                   _USARTReceiveChar
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                   i1_USARTWriteChar
                 i1_USARTWriteString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (7) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (8) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (7) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (8) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_nibble                                   2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (8) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              7     3      4     680
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              9     5      4     684
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (7) _USARTReceiveChar                                     2     2      0     195
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (7) i1_USARTWriteString                                   2     0      2     171
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCRead
   _LCDClear
     _lcd_envia_byte
       _lcd_envia_nibble
   _USARTWriteString
     _USARTWriteChar
   _init_lcd_4bit
     _lcd_envia_byte
       _lcd_envia_nibble
     _lcd_envia_nibble
   _lcd_escreve_string
     _lcd_putc
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_gotoxy
         _lcd_envia_byte
           _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   i1_USARTWriteChar
   i1_USARTWriteString
     i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     11      11       9       17.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      3D       7       76.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A9      12        0.0%
ABS                  0      0      A9       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 03 22:06:15 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l66 17A7  
                           l86 0870                   ___awdiv@sign 0076                             fsr 0004  
          ___wmul@multiplicand 0072                   ___ftadd@exp1 0026                   ___ftadd@exp2 0025  
                 ___ftadd@sign 0024                            l106 0E8B                            l107 0E89  
                          l142 07E1                            l143 07E4              i1lcd_envia_byte@n 0072  
                 __CFG_CPD$OFF 0000                            _ISR 0041                            fsr0 0004  
              __end_of_ADCInit 17E6                __end_of_ADCRead 0873                            indf 0000  
                 ___awmod@sign 0021                   __CFG_FOSC$HS 0000                     i1_lcd_putc 09C3  
                  lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195                   __CFG_LVP$OFF 0000  
                         ?_ISR 0070                   ___ftdiv@cntr 003A                           ISR@i 00BA  
                 ___ftdiv@sign 003F                           l2820 0844                           l2822 0845  
                         l2840 0A6C                           l2832 0A42                           l2852 0928  
                         l2836 0A56                           l2844 0A77                           l2838 0A61  
                         l2880 0CB7                           l2954 0E6A                           l2868 0959  
                         l2888 0CD2                           STR_1 0768                           STR_2 07C2  
                         STR_3 07C9                           STR_4 073C                           STR_5 0790  
                         STR_6 07A7                           STR_7 07A7                           STR_8 07B7  
                         u4107 0A0E                           u4027 0E11                           u4117 0A23  
                         u4037 0E24                           u4127 0A38                           u4047 0E34  
                         u4137 07D5                           u4057 0E5E                           u4147 0B75  
                         u4067 0E7D                           u4157 086A                           u4077 0A50  
                         u4087 0CAB                           u4097 0CC3                           u3695 07ED  
                         i1l66 177F                           _OERR 00C1                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 17B2                           _main 0DED                           _ftoa 0F46  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E                   ___ftmul@cntr 002E  
                 ___ftmul@sign 002F                          ??_ISR 0052               __end_of_LCDClear 0A3E  
                 ___fttol@exp1 003D                   ___fttol@lval 0039     __end_of_lcd_escreve_string 098A  
                        ?_main 0070                          ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A  
              __end_of___awdiv 0BD6                __end_of___ftadd 0602                  __CFG_WDTE$OFF 0000  
              __end_of___awmod 0B22      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 0F46  
              __end_of___ftneg 178E                __end_of___lldiv 0C91                __end_of___ftmul 06D5  
              ___awdiv@divisor 0070                __end_of___llmod 0AD3                __end_of___ftsub 0838  
              __end_of___fttol 0DED                          i1l101 02B2                          i1l222 038C  
                        i1l142 06E5                          i1l143 06E8                          i1l225 03AA  
                        i1l328 08C1                          i1l518 05A3                          i1l495 0D46  
                        i1l489 0D2D                ___awdiv@counter 0075                          _RCREG 001A  
                        _SPBRG 0099            i1lcd_envia_nibble@n 0071                          _TRISA 0085  
                        _TXREG 0019                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
         i1_lcd_escreve_string 08DA                  ___awtoft@sign 007D                __end_of_dpowers 0738  
              __end_of_isdigit 17A4                  ___ftpack@sign 0074                          ftoa@f 0044  
                        ftoa@l 004D                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
              ?_USARTWriteChar 0070                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __end_of_sprintf 04FB  
             i1_lcd_envia_byte 06D5                __initialization 0015                   i1_lcd_gotoxy 17E6  
                 __end_of_main 0E8E                   __end_of_ftoa 1000                    i1lcd_putc@c 007B  
                    ??_ADCInit 0190                      ??_ADCRead 0192      __size_of_lcd_envia_nibble 0059  
                       ??_main 019E                         ??_ftoa 0048                  ___fttol@sign1 0038  
           i1_USARTWriteString 0894                         ISR@buf 00B0                         ISR@aux 00A0  
                       ISR@per 00C3                         ISR@pre 00B5        USARTWriteChar@USARTData 0190  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 0190  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             ___awdiv@dividend 0072               __end_of___awtoft 0894               __end_of___ftpack 0D5F  
          ?i1_USARTWriteString 0071               __end_of___lltoft 0928                         i1l2000 0A9F  
                       i1l2004 0ABD                         i1l2020 17F0                         i1l2102 03DE  
                       i1l2022 17F1                         i1l2008 0ACA                         i1l2210 06A7  
                       i1l2122 0452                         i1l2114 0420                         i1l2106 03E4  
                       i1l2060 02FB                         i1l2206 0697                         i1l2142 04E7  
                       i1l2126 0473                         i1l2118 0438                         i1l2054 02E6  
                       i1l2302 09D7                         i1l2310 09F2                         i1l2240 0D79  
                       i1l2136 048D                         i1l2128 0477                         i1l2080 0387  
                       i1l2144 02C6                         i1l2304 09E0                         i1l2154 0BFD  
                       i1l2082 038E                         i1l2146 04F6                         i1l2306 09E9  
                       i1l2260 0DBB                         i1l2092 03BC                         i1l2068 0339  
                       u200_25 06EF                         i1l2334 0819                         i1l2326 080A  
                       i1l2510 087D                         i1l2158 0C24                         i1l2182 0630  
                       i1l2270 0DD6                         i1l2086 0393                         i1l2078 034B  
                       i1l2520 0EA6                         i1l2176 061A                         i1l2434 0B90  
                       i1l2194 066F                         i1l2274 0DE4                         i1l2266 0DC8  
                       i1l2258 0DAB                         i1l2282 0901                         i1l2460 0BCF  
                       i1l2452 0BBC                         i1l2444 0B98                         i1l2428 0B85  
                       i1l2540 0F01                         i1l2268 0DD3                         i1l2284 0913  
                       i1l2612 0240                         i1l2294 0894                         i1l2446 0BA6  
                       i1l2526 0EBC                         i1l2198 067F                         i1l2358 0F7F  
                       i1l2622 0251                         i1l2456 0BC7                         i1l2472 0ADF  
                       i1l1832 0D06                         i1l1904 0524                         i1l2624 0271  
                       i1l2632 0294                         i1l2490 0B08                         i1l1842 0D32  
                       i1l1834 0D12                         i1l1914 053A                         i1l2298 09C5  
                       i1l2562 08DA                         i1l2484 0AEC                         i1l2476 0AE6  
                       i1l1844 0D3C                         i1l1836 0D17                         i1l1828 0CFF  
                       i1l2548 0F20                         i1l1932 0569                         i1l1908 052B  
                       i1l2486 0AFA                         i1l2494 0B13                         i1l1950 05B5  
                       i1l1934 0575                         i1l1926 0554                         i1l1944 0593  
                       i1l1936 057A                         i1l1880 17A2                         i1l2498 0B1B  
                       i1l1954 05C7                         i1l1946 059F                         i1l1938 057E  
                       i1l1964 05EA                         i1l1974 0C43                         i1l1886 08B9  
                       i1l1984 0C7B                         i1l1976 0C53                         i1l1988 0C88  
                       u220_25 056A                         i1l1998 0A8F                         u205_25 08C2  
                       u206_25 08C9                         u223_25 057F                         u240_25 0A93  
                       u313_25 0B9B                         u217_25 0555                         u233_25 0C47  
                       u226_25 0594                         u242_25 0AAD                         u315_25 0BA7  
                       u323_25 0AEF                         u235_25 0C55                         u243_25 0ABE  
                       u340_20 0057                         u316_25 0BB3                         u332_25 0ECE  
                       u236_25 0C6A                         u260_25 042F                         u317_25 0BBD  
                       u325_25 0B00                         u333_25 0EE0                         u237_25 0C7C  
                       u261_25 0449                         u341_25 023A                         u326_25 0B09  
                       u190_25 0D0B                         u334_25 0F02                         u262_25 0463  
                       u342_25 024B                         u271_21 0C17                         u271_22 0C18  
                       u271_23 0C1D                         u271_24 0C1E                         u335_25 0F13  
                       u192_25 0D26                         u336_25 0F21                         u280_25 0688  
                       u416_27 028A                         u265_25 0498                         u257_25 03E7  
                       u417_27 09D1                         u194_25 0D35                         u266_25 04F3  
                       u258_25 0416                         u418_27 06DB                         u275_25 063C  
                       u419_27 09BD                         u284_25 06A8                         u276_25 064E  
                       u292_25 0DAC                         u269_21 0BF0                         u269_22 0BF1  
                       u269_23 0BF6                         u269_24 0BF7                         u197_25 0D4D  
                       u285_25 06B0                         u279_25 0680                         u295_25 0DCA  
                       u289_25 0D80                         u298_25 0906      i1USARTWriteChar@USARTData 0070  
       __size_of_init_lcd_4bit 0066               __end_of_lcd_putc 0A85                         ___ftge 0BD6  
                       ___wmul 08B7                      ??___awdiv 0074                      ??___ftadd 0020  
                    ??___awmod 007D                      ??___ftdiv 0036                      ??___ftneg 0073  
                    ??___lldiv 0078                      ??___ftmul 0026                      ??___llmod 0028  
                    ??___ftsub 007E                      ??___fttol 0034           ??i1_USARTWriteString 0073  
     __end_of_USARTWriteString 0959               ___awdiv@quotient 0077                ___awmod@divisor 0079  
             ??_lcd_envia_byte 0193                ___awmod@counter 0020                         ftoa@cp 0051  
        ___ftmul@f3_as_product 002B                      ??_isdigit 0070                         saved_w 007E  
        i1lcd_escreve_string@y 007C                      ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 09C3  
            ?_USARTReceiveChar 0070                      ?_LCDClear 0070        __end_of__initialization 003D  
           ??_USARTReceiveChar 0073                     ___ftadd@f1 0078                     ___ftadd@f2 007B  
                   ___ftge@ff1 0070                     ___ftge@ff2 0073                     ___ftdiv@f1 0033  
                   ___ftdiv@f2 0030                     ___ftdiv@f3 003B                     ___ftneg@f1 0070  
                   ___awtoft@c 0078                     ___ftmul@f1 0020                     ___ftmul@f2 0023  
                   ___ftsub@f1 002A                     ___ftsub@f2 0027                     ___fttol@f1 0030  
               __pcstackCOMMON 0070                   __pidataBANK0 177C                   __pidataBANK1 17B2  
          __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078               i1_USARTWriteChar 177E  
                _init_lcd_4bit 0C91         ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 0198  
                 sprintf@width 003F                     __pbssBANK0 005A                     __pbssBANK1 00D4  
                   ??_LCDClear 0195                      ISR@input2 00C0                      ISR@preint 00B8  
                    ISR@result 00BC                      ISR@status 00B1      USARTReceiveChar@USARTData 0074  
                   __pmaintext 0DED                        ?___ftge 0070                        ?___wmul 0070  
                   __pintentry 0004                        _ADCInit 17D3                        _ADCRead 0854  
                    ?___awtoft 0078                      ?___ftpack 0070               _lcd_envia_nibble 0B22  
                    ?___lltoft 0078                 ?_init_lcd_4bit 0070                     _lcd_gotoxy 0838  
     __end_ofi1_lcd_envia_byte 0700               ??_USARTWriteChar 0190             _lcd_escreve_string 0959  
                    ?_lcd_putc 0070                     __stringtab 0700            ?_lcd_escreve_string 019C  
                      _Display 00D4                      _ADCResult 00DB                __size_of___ftge 005D  
                      ___awdiv 0B7B          i1USARTWriteString@str 0071                        ___ftadd 04FB  
                      ___awmod 0AD3                        ___ftdiv 0E8E                        ___ftneg 1786  
                      ___lldiv 0C33                __size_of___wmul 0023                        ___ftmul 0602  
                      ___llmod 0A85                        ___ftsub 081C                        ___fttol 0D5F  
                   ??___awtoft 007B                     ??___ftpack 0075                        _flag_an 006B  
                   ??___lltoft 007C                        __ptext1 0959                        __ptext2 0A3E  
                      __ptext3 0838                        __ptext4 0C91                        __ptext5 0928  
                      __ptext6 17A4                        __ptext7 09FE                        __ptext8 07CB  
                      __ptext9 0B22           ??_lcd_escreve_string 019E                   __size_of_ISR 027E  
                      _dpowers 0710                        _isdigit 1796               ___awmod@dividend 007B  
              lcd_envia_byte@n 0192                   ??i1_lcd_putc 0079                        _sprintf 02BF  
                      clrloop0 178F                     ??_lcd_putc 0199           end_of_initialization 003D  
                      ftoa@buf 005A                        ftoa@rem 0049        i1lcd_envia_byte@address 0074  
              ___lldiv@divisor 0070                ___lldiv@counter 007D                      _RCSTAbits 0018  
           __end_ofi1_lcd_putc 09FE                ??_init_lcd_4bit 0195              ?_USARTWriteString 0191  
                    _PORTAbits 0005                      _PORTBbits 0006                      _PORTCbits 0007  
                    _PORTDbits 0008             ??_USARTWriteString 0193                      _TRISBbits 0086  
                    _TRISCbits 0087                      _TRISDbits 0088                    ?_lcd_gotoxy 0195  
              _LCD_INIT_STRING 0738                    ___ftdiv@exp 003E       __end_ofi1_USARTWriteChar 1786  
                    _TXSTAbits 0098              __size_of_LCDClear 0040                    ___ftmul@exp 002A  
           i1_lcd_envia_nibble 098A      __size_of_USARTReceiveChar 001B                 __end_of___ftge 0C33  
  __size_ofi1_USARTWriteString 0023                 __end_of___wmul 08DA            ?i1_lcd_envia_nibble 0070  
          start_initialization 0015                    __end_of_ISR 02BF                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075           ??i1_lcd_envia_nibble 0070  
     __end_of_lcd_envia_nibble 0B7B          lcd_envia_byte@address 0194                ___llmod@divisor 0020  
              ___llmod@counter 0029                       ??___ftge 0076            __size_of_lcd_gotoxy 001C  
                     ??___wmul 0074                     init_fetch0 17C2                    __pdataBANK0 006B  
                  __pdataBANK1 00C4                       ?_ADCInit 0070                       ?_ADCRead 0190  
      __end_of_LCD_INIT_STRING 073C              __size_of___awtoft 0021              __size_of___ftpack 0068  
            __size_of___lltoft 002B                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0                  __pcstackBANK3 0190            __end_of__stringdata 07CB  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072                       ISR@F1345 00C4  
      __size_of_lcd_envia_byte 0035             ??i1_lcd_envia_byte 0073                    sprintf@_val 003A  
                  sprintf@flag 0038              __size_of_lcd_putc 0047                    sprintf@prec 0041  
                   ISR@status2 00B3                       ISR@input 00BD                  ?i1_lcd_gotoxy 0075  
          i1lcd_gotoxy@address 0078                       ?___awdiv 0070                       ?___ftadd 0078  
                     ?___awmod 0079                       ?___ftdiv 0030                       ?___ftneg 0070  
                     ?___lldiv 0070                       ?___ftmul 0020                       ?___llmod 0020  
                     ?___ftsub 0027                       ?___fttol 0030                      __pstrings 0700  
                     ?_isdigit 0070                 init_lcd_4bit@i 0197                       ?_sprintf 002A  
                     _LCDClear 09FE              interrupt_function 0004                 ___wmul@product 0074  
                    clear_ram0 178E                       _PIE1bits 008C              lcd_envia_nibble@n 0191  
               ??i1_lcd_gotoxy 0076                       _PIR1bits 000C               _USARTReceiveChar 0801  
             __size_of_ADCInit 0013               __size_of_ADCRead 001F                     _ADCON0bits 001F  
                  __stringbase 070F                     _ADCON1bits 009F                    __stringdata 073C  
            ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031                      lcd_putc@c 019B  
                 ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C      __size_of_USARTWriteString 0031  
            ?i1_USARTWriteChar 0070        __size_of_USARTWriteChar 000E             ??i1_USARTWriteChar 0070  
           __end_of_lcd_gotoxy 0854               __size_of___awdiv 005B               __size_of___ftadd 0107  
             __size_of___awmod 004F               __size_of___ftdiv 00B8               __size_of___ftneg 0008  
             __size_of___lldiv 005E               __size_of___ftmul 00D3               __size_of___llmod 004E  
             __size_of___ftsub 001C               __size_of___fttol 008E                       ___awtoft 0873  
                     ___ftpack 0CF7             __end_of__stringtab 0710                       ___lltoft 08FD  
                  _isdigit$870 0070          __end_of_init_lcd_4bit 0CF7               __size_of_isdigit 000E  
                     __ptext10 0854                       __ptext11 17D3                       __ptext20 1796  
                     __ptext12 0041                       __ptext21 08B7                       __ptext13 08DA  
                     __ptext30 0BD6                       __ptext22 0A85                       __ptext14 09C3  
                     __ptext31 0E8E                       __ptext23 0C33                       __ptext15 17E6  
                     __ptext32 0873                       __ptext24 08FD                       __ptext16 06D5  
                     __ptext33 0CF7                       __ptext25 0D5F                       __ptext17 098A  
                     __ptext34 0AD3                       __ptext26 081C                       __ptext18 0F46  
                     __ptext35 0B7B                       __ptext27 04FB                       __ptext19 02BF  
                     __ptext36 0801                       __ptext28 1786                       __ptext37 0894  
                     __ptext29 0602                       __ptext38 177E                 _lcd_envia_byte 07CB  
                     _lcd_putc 0A3E               __size_of_sprintf 023C                  __size_of_main 00A1  
                __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 0190  
   __end_ofi1_USARTWriteString 08B7                     _INTCONbits 000B         __end_of_lcd_envia_byte 0800  
         __end_ofi1_lcd_gotoxy 1800                       init_ram0 17C6                       isdigit@c 0071  
                     intlevel1 0000                      sprintf@ap 0039                      sprintf@sp 003E  
  __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074                      stringcode 070A  
 __end_ofi1_lcd_escreve_string 08FD      __size_ofi1_lcd_envia_byte 002B            USARTWriteString@str 0191  
                     sprintf@c 0043                       sprintf@f 002A               ___lldiv@quotient 0079  
              ?_lcd_envia_byte 0192                       stringdir 070A                       stringtab 0700  
     __end_of_USARTReceiveChar 081C               _USARTWriteString 0928                 _USARTWriteChar 17A4  
