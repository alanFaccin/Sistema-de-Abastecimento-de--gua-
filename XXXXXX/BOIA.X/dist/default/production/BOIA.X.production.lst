

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 05 23:43:56 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184                           
   185                           	psect	idataBANK0
   186  088E                     __pidataBANK0:	
   187                           
   188                           ;initializer for _flag_an
   189  088E  34FF               	retlw	255
   190  088F  34FF               	retlw	255
   191                           
   192                           	psect	idataBANK1
   193  167F                     __pidataBANK1:	
   194                           
   195                           ;initializer for progressBar@F1347
   196  167F  3420               	retlw	32
   197  1680  3420               	retlw	32
   198  1681  3420               	retlw	32
   199  1682  3420               	retlw	32
   200  1683  3420               	retlw	32
   201  1684  3420               	retlw	32
   202  1685  3420               	retlw	32
   203  1686  3420               	retlw	32
   204  1687  3420               	retlw	32
   205  1688  3420               	retlw	32
   206  1689  3420               	retlw	32
   207  168A  3420               	retlw	32
   208  168B  3420               	retlw	32
   209  168C  3420               	retlw	32
   210  168D  3420               	retlw	32
   211  168E  3420               	retlw	32
   212                           
   213                           	psect	strings
   214  0800                     __pstrings:	
   215  0800                     stringtab:	
   216  0800                     __stringtab:	
   217                           
   218                           ;	String table - string pointers are 1 byte each
   219  0800  1BFF               	btfsc	btemp+1,7
   220  0801  280A               	ljmp	stringcode
   221  0802  1383               	bcf	3,7
   222  0803  187F               	btfsc	btemp+1,0
   223  0804  1783               	bsf	3,7
   224  0805  0800               	movf	0,w
   225  0806  0A84               	incf	4,f
   226  0807  1903               	skipnz
   227  0808  0AFF               	incf	btemp+1,f
   228  0809  0008               	return
   229  080A                     stringcode:	
   230  080A                     stringdir:	
   231  080A  3008               	movlw	high stringdir
   232  080B  008A               	movwf	10
   233  080C  0804               	movf	4,w
   234  080D  0A84               	incf	4,f
   235  080E  0782               	addwf	2,f
   236  080F                     __stringbase:	
   237  080F  3400               	retlw	0
   238  0810                     __end_of__stringtab:	
   239  0810                     _dpowers:	
   240  0810  3401               	retlw	1
   241  0811  3400               	retlw	0
   242  0812  3400               	retlw	0
   243  0813  3400               	retlw	0
   244  0814  340A               	retlw	10
   245  0815  3400               	retlw	0
   246  0816  3400               	retlw	0
   247  0817  3400               	retlw	0
   248  0818  3464               	retlw	100
   249  0819  3400               	retlw	0
   250  081A  3400               	retlw	0
   251  081B  3400               	retlw	0
   252  081C  34E8               	retlw	232
   253  081D  3403               	retlw	3
   254  081E  3400               	retlw	0
   255  081F  3400               	retlw	0
   256  0820  3410               	retlw	16
   257  0821  3427               	retlw	39
   258  0822  3400               	retlw	0
   259  0823  3400               	retlw	0
   260  0824  34A0               	retlw	160
   261  0825  3486               	retlw	134
   262  0826  3401               	retlw	1
   263  0827  3400               	retlw	0
   264  0828  3440               	retlw	64
   265  0829  3442               	retlw	66
   266  082A  340F               	retlw	15
   267  082B  3400               	retlw	0
   268  082C  3480               	retlw	128
   269  082D  3496               	retlw	150
   270  082E  3498               	retlw	152
   271  082F  3400               	retlw	0
   272  0830  3400               	retlw	0
   273  0831  34E1               	retlw	225
   274  0832  34F5               	retlw	245
   275  0833  3405               	retlw	5
   276  0834  3400               	retlw	0
   277  0835  34CA               	retlw	202
   278  0836  349A               	retlw	154
   279  0837  343B               	retlw	59
   280  0838                     __end_of_dpowers:	
   281  0838                     _LCD_INIT_STRING:	
   282  0838  341C               	retlw	28
   283  0839  340C               	retlw	12
   284  083A  3401               	retlw	1
   285  083B  3406               	retlw	6
   286  083C                     __end_of_LCD_INIT_STRING:	
   287  083C                     _DESLIGAR:	
   288  083C  346C               	retlw	108
   289  083D                     __end_of_DESLIGAR:	
   290  083D                     _DESLIGAR_BOMBA:	
   291  083D  3462               	retlw	98
   292  083E                     __end_of_DESLIGAR_BOMBA:	
   293  083E                     _DESLIGAR_MOTOR:	
   294  083E  346D               	retlw	109
   295  083F                     __end_of_DESLIGAR_MOTOR:	
   296  083F                     _LIGAR:	
   297  083F  344C               	retlw	76
   298  0840                     __end_of_LIGAR:	
   299  0840                     _LIGAR_BOMBA:	
   300  0840  3442               	retlw	66
   301  0841                     __end_of_LIGAR_BOMBA:	
   302  0841                     _LIGAR_MOTOR:	
   303  0841  344D               	retlw	77
   304  0842                     __end_of_LIGAR_MOTOR:	
   305  001F                     _ADCON0bits	set	31
   306  001E                     _ADRESH	set	30
   307  000B                     _INTCONbits	set	11
   308  000C                     _PIR1bits	set	12
   309  0005                     _PORTAbits	set	5
   310  0006                     _PORTBbits	set	6
   311  0007                     _PORTCbits	set	7
   312  0008                     _PORTDbits	set	8
   313  001A                     _RCREG	set	26
   314  0018                     _RCSTAbits	set	24
   315  0019                     _TXREG	set	25
   316  00C1                     _OERR	set	193
   317  009F                     _ADCON1bits	set	159
   318  009E                     _ADRESL	set	158
   319  008C                     _PIE1bits	set	140
   320  0099                     _SPBRG	set	153
   321  0085                     _TRISA	set	133
   322  0086                     _TRISBbits	set	134
   323  0087                     _TRISCbits	set	135
   324  0088                     _TRISDbits	set	136
   325  0098                     _TXSTAbits	set	152
   326  0842                     __stringdata:	
   327  0842                     STR_1:	
   328  0842  340A               	retlw	10
   329  0843  340D               	retlw	13
   330  0844  3420               	retlw	32	;' '
   331  0845  342D               	retlw	45	;'-'
   332  0846  342D               	retlw	45	;'-'
   333  0847  342D               	retlw	45	;'-'
   334  0848  342D               	retlw	45	;'-'
   335  0849  342D               	retlw	45	;'-'
   336  084A  342D               	retlw	45	;'-'
   337  084B  342D               	retlw	45	;'-'
   338  084C  3420               	retlw	32	;' '
   339  084D  3445               	retlw	69	;'E'
   340  084E  3453               	retlw	83	;'S'
   341  084F  3454               	retlw	84	;'T'
   342  0850  344F               	retlw	79	;'O'
   343  0851  3455               	retlw	85	;'U'
   344  0852  3452               	retlw	82	;'R'
   345  0853  344F               	retlw	79	;'O'
   346  0854  3420               	retlw	32	;' '
   347  0855  3444               	retlw	68	;'D'
   348  0856  3445               	retlw	69	;'E'
   349  0857  3420               	retlw	32	;' '
   350  0858  3450               	retlw	80	;'P'
   351  0859  3449               	retlw	73	;'I'
   352  085A  344C               	retlw	76	;'L'
   353  085B  3448               	retlw	72	;'H'
   354  085C  3441               	retlw	65	;'A'
   355  085D  3420               	retlw	32	;' '
   356  085E  342D               	retlw	45	;'-'
   357  085F  342D               	retlw	45	;'-'
   358  0860  342D               	retlw	45	;'-'
   359  0861  342D               	retlw	45	;'-'
   360  0862  342D               	retlw	45	;'-'
   361  0863  342D               	retlw	45	;'-'
   362  0864  342D               	retlw	45	;'-'
   363  0865  3420               	retlw	32	;' '
   364  0866  340A               	retlw	10
   365  0867  340D               	retlw	13
   366  0868  3420               	retlw	32	;' '
   367  0869  3400               	retlw	0
   368  086A                     STR_4:	
   369  086A  340C               	retlw	12
   370  086B  344C               	retlw	76	;'L'
   371  086C  346F               	retlw	111	;'o'
   372  086D  3461               	retlw	97	;'a'
   373  086E  3464               	retlw	100	;'d'
   374  086F  3469               	retlw	105	;'i'
   375  0870  346E               	retlw	110	;'n'
   376  0871  3467               	retlw	103	;'g'
   377  0872  3420               	retlw	32	;' '
   378  0873  3450               	retlw	80	;'P'
   379  0874  3449               	retlw	73	;'I'
   380  0875  3443               	retlw	67	;'C'
   381  0876  342E               	retlw	46	;'.'
   382  0877  342E               	retlw	46	;'.'
   383  0878  342E               	retlw	46	;'.'
   384  0879  3400               	retlw	0
   385  087A                     STR_5:	
   386  087A  3425               	retlw	37	;'%'
   387  087B  346C               	retlw	108	;'l'
   388  087C  3475               	retlw	117	;'u'
   389  087D  342E               	retlw	46	;'.'
   390  087E  3425               	retlw	37	;'%'
   391  087F  3436               	retlw	54	;'6'
   392  0880  342E               	retlw	46	;'.'
   393  0881  3436               	retlw	54	;'6'
   394  0882  346C               	retlw	108	;'l'
   395  0883  3475               	retlw	117	;'u'
   396  0884  3400               	retlw	0
   397  0885                     STR_2:	
   398  0885  344E               	retlw	78	;'N'
   399  0886  3469               	retlw	105	;'i'
   400  0887  3476               	retlw	118	;'v'
   401  0888  3465               	retlw	101	;'e'
   402  0889  346C               	retlw	108	;'l'
   403  088A  343A               	retlw	58	;':'
   404  088B  3400               	retlw	0
   405  088C                     STR_3:	
   406  088C  3425               	retlw	37	;'%'
   407  088D  3400               	retlw	0
   408  088E                     __end_of__stringdata:	
   409                           
   410                           ; #config settings
   411  0000                     
   412                           	psect	cinit
   413  0015                     start_initialization:	
   414  0015                     __initialization:	
   415                           
   416                           ; Clear objects allocated to BANK0
   417  0015  01E7               	clrf	__pbssBANK0& (0+127)
   418  0016  01E8               	clrf	(__pbssBANK0+1)& (0+127)
   419  0017  01E9               	clrf	(__pbssBANK0+2)& (0+127)
   420  0018  01EA               	clrf	(__pbssBANK0+3)& (0+127)
   421  0019  01EB               	clrf	(__pbssBANK0+4)& (0+127)
   422  001A  01EC               	clrf	(__pbssBANK0+5)& (0+127)
   423                           
   424                           ; Clear objects allocated to BANK1
   425  001B  1383               	bcf	3,7	;select IRP bank0
   426  001C  30BE               	movlw	low __pbssBANK1
   427  001D  0084               	movwf	4
   428  001E  30D7               	movlw	low (__pbssBANK1+25)
   429  001F  160A  118A  2651  120A  118A  	fcall	clear_ram0
   430                           
   431                           ; Initialize objects allocated to BANK1
   432  0024  30E7               	movlw	low (__pdataBANK1+16)
   433  0025  00FD               	movwf	btemp+-1
   434  0026  3016               	movlw	high __pidataBANK1
   435  0027  00FE               	movwf	btemp
   436  0028  307F               	movlw	low __pidataBANK1
   437  0029  00FF               	movwf	btemp+1
   438  002A  30D7               	movlw	low __pdataBANK1
   439  002B  0084               	movwf	4
   440  002C  160A  118A  2693  120A  118A  	fcall	init_ram0
   441                           
   442                           ; Initialize objects allocated to BANK0
   443  0031  120A  158A  208E  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   444  0036  00ED               	movwf	__pdataBANK0& (0+127)
   445  0037  120A  158A  208F   	fcall	__pidataBANK0+1	;fetch initializer
   446  003A  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   447  003B                     end_of_initialization:	
   448                           ;End of C runtime variable initialization code
   449                           
   450  003B                     __end_of__initialization:	
   451  003B  0183               	clrf	3
   452  003C  160A  118A  2E59   	ljmp	_main	;jump to C main() function
   453                           
   454                           	psect	bssBANK0
   455  0067                     __pbssBANK0:	
   456  0067                     _ADCResult:	
   457  0067                     	ds	2
   458  0069                     _countSuperior:	
   459  0069                     	ds	2
   460  006B                     _recipiente:	
   461  006B                     	ds	2
   462                           
   463                           	psect	dataBANK0
   464  006D                     __pdataBANK0:	
   465  006D                     _flag_an:	
   466  006D                     	ds	2
   467                           
   468                           	psect	bssBANK1
   469  00BE                     __pbssBANK1:	
   470  00BE                     _countInferior:	
   471  00BE                     	ds	2
   472  00C0                     _flag_Start:	
   473  00C0                     	ds	2
   474  00C2                     _nivelInferior:	
   475  00C2                     	ds	2
   476  00C4                     _nivelSuperior:	
   477  00C4                     	ds	2
   478  00C6                     ftoa@buf:	
   479  00C6                     	ds	17
   480                           
   481                           	psect	dataBANK1
   482  00D7                     __pdataBANK1:	
   483  00D7                     progressBar@F1347:	
   484  00D7                     	ds	16
   485                           
   486                           	psect	clrtext
   487  1651                     clear_ram0:	
   488                           ;	Called with FSR containing the base address, and
   489                           ;	W with the last address+1
   490                           
   491  1651  0064               	clrwdt	;clear the watchdog before getting into this loop
   492  1652                     clrloop0:	
   493  1652  0180               	clrf	0	;clear RAM location pointed to by FSR
   494  1653  0A84               	incf	4,f	;increment pointer
   495  1654  0604               	xorwf	4,w	;XOR with final address
   496  1655  1903               	btfsc	3,2	;have we reached the end yet?
   497  1656  3400               	retlw	0	;all done for this memory range, return
   498  1657  0604               	xorwf	4,w	;XOR again to restore value
   499  1658  2E52               	goto	clrloop0	;do the next byte
   500                           
   501                           	psect	inittext
   502  168F                     init_fetch0:	
   503                           ;	Called with low address in FSR and high address in W
   504                           
   505  168F  087E               	movf	126,w
   506  1690  008A               	movwf	10
   507  1691  087F               	movf	127,w
   508  1692  0082               	movwf	2
   509  1693                     init_ram0:	
   510                           ;Called with:
   511                           ;	high address of idata address in btemp 
   512                           ;	low address of idata address in btemp+1 
   513                           ;	low address of data in FSR
   514                           ;	high address + 1 of data in btemp-1
   515                           
   516  1693  268F  160A  118A   	fcall	init_fetch0
   517  1696  0080               	movwf	0
   518  1697  0A84               	incf	4,f
   519  1698  0804               	movf	4,w
   520  1699  067D               	xorwf	125,w
   521  169A  1903               	btfsc	3,2
   522  169B  3400               	retlw	0
   523  169C  0AFF               	incf	127,f
   524  169D  1903               	btfsc	3,2
   525  169E  0AFE               	incf	126,f
   526  169F  2E93               	goto	init_ram0
   527                           
   528                           	psect	cstackBANK1
   529  00A0                     __pcstackBANK1:	
   530  00A0                     ??_lcd_envia_nibble:	
   531  00A0                     ??_USARTWriteChar:	
   532                           ; 0 bytes @ 0x0
   533                           
   534  00A0                     ??_ADCInit:	
   535                           ; 0 bytes @ 0x0
   536                           
   537  00A0                     ?_ADCRead:	
   538                           ; 0 bytes @ 0x0
   539                           
   540  00A0                     ?___aldiv:	
   541                           ; 0 bytes @ 0x0
   542                           
   543  00A0                     USARTWriteChar@USARTData:	
   544                           ; 4 bytes @ 0x0
   545                           
   546  00A0                     ADCRead@ch:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  00A0                     ___aldiv@divisor:	
   550                           ; 2 bytes @ 0x0
   551                           
   552                           
   553                           ; 4 bytes @ 0x0
   554  00A0                     	ds	1
   555  00A1                     ??_Ativar:	
   556  00A1                     lcd_envia_nibble@n:	
   557                           ; 0 bytes @ 0x1
   558                           
   559                           
   560                           ; 1 bytes @ 0x1
   561  00A1                     	ds	1
   562  00A2                     ?_lcd_envia_byte:	
   563  00A2                     ??_ADCRead:	
   564                           ; 0 bytes @ 0x2
   565                           
   566  00A2                     Ativar@comando:	
   567                           ; 0 bytes @ 0x2
   568                           
   569  00A2                     lcd_envia_byte@n:	
   570                           ; 1 bytes @ 0x2
   571                           
   572                           
   573                           ; 1 bytes @ 0x2
   574  00A2                     	ds	1
   575  00A3                     ??_lcd_envia_byte:	
   576  00A3                     ??_ativar:	
   577                           ; 0 bytes @ 0x3
   578                           
   579                           
   580                           ; 0 bytes @ 0x3
   581  00A3                     	ds	1
   582  00A4                     lcd_envia_byte@address:	
   583  00A4                     ___aldiv@dividend:	
   584                           ; 1 bytes @ 0x4
   585                           
   586                           
   587                           ; 4 bytes @ 0x4
   588  00A4                     	ds	1
   589  00A5                     ?_lcd_gotoxy:	
   590  00A5                     ??_init_lcd_4bit:	
   591                           ; 0 bytes @ 0x5
   592                           
   593  00A5                     ??_LCDClear:	
   594                           ; 0 bytes @ 0x5
   595                           
   596  00A5                     lcd_gotoxy@y:	
   597                           ; 0 bytes @ 0x5
   598                           
   599                           
   600                           ; 1 bytes @ 0x5
   601  00A5                     	ds	1
   602  00A6                     ??_lcd_gotoxy:	
   603                           
   604                           ; 0 bytes @ 0x6
   605  00A6                     	ds	1
   606  00A7                     init_lcd_4bit@i:	
   607  00A7                     lcd_gotoxy@x:	
   608                           ; 1 bytes @ 0x7
   609                           
   610                           
   611                           ; 1 bytes @ 0x7
   612  00A7                     	ds	1
   613  00A8                     ??___aldiv:	
   614  00A8                     lcd_gotoxy@address:	
   615                           ; 0 bytes @ 0x8
   616                           
   617                           
   618                           ; 1 bytes @ 0x8
   619  00A8                     	ds	1
   620  00A9                     ??_lcd_putc:	
   621  00A9                     ___aldiv@counter:	
   622                           ; 0 bytes @ 0x9
   623                           
   624                           
   625                           ; 1 bytes @ 0x9
   626  00A9                     	ds	1
   627  00AA                     ___aldiv@sign:	
   628                           
   629                           ; 1 bytes @ 0xA
   630  00AA                     	ds	1
   631  00AB                     lcd_putc@c:	
   632  00AB                     ___aldiv@quotient:	
   633                           ; 1 bytes @ 0xB
   634                           
   635                           
   636                           ; 4 bytes @ 0xB
   637  00AB                     	ds	1
   638  00AC                     ?_lcd_escreve_string:	
   639  00AC                     lcd_escreve_string@y:	
   640                           ; 0 bytes @ 0xC
   641                           
   642                           
   643                           ; 2 bytes @ 0xC
   644  00AC                     	ds	2
   645  00AE                     ??_lcd_escreve_string:	
   646                           
   647                           ; 0 bytes @ 0xE
   648  00AE                     	ds	1
   649  00AF                     ?_USARTInit:	
   650  00AF                     USARTInit@BaudRate:	
   651                           ; 0 bytes @ 0xF
   652                           
   653                           
   654                           ; 4 bytes @ 0xF
   655  00AF                     	ds	4
   656  00B3                     USARTInit@Mode:	
   657                           
   658                           ; 2 bytes @ 0x13
   659  00B3                     	ds	2
   660  00B5                     ??_USARTInit:	
   661                           
   662                           ; 0 bytes @ 0x15
   663  00B5                     	ds	4
   664  00B9                     USARTInit@BR:	
   665                           
   666                           ; 2 bytes @ 0x19
   667  00B9                     	ds	2
   668  00BB                     ??_inicialize:	
   669                           
   670                           ; 0 bytes @ 0x1B
   671  00BB                     	ds	3
   672  00BE                     ??_main:	
   673                           
   674                           	psect	cstackCOMMON
   675  0070                     __pcstackCOMMON:	
   676                           ; 0 bytes @ 0x1E
   677                           
   678  0070                     ?_init_lcd_4bit:	
   679  0070                     ?_LCDClear:	
   680                           ; 0 bytes @ 0x0
   681                           
   682  0070                     ?_lcd_envia_nibble:	
   683                           ; 0 bytes @ 0x0
   684                           
   685  0070                     ?_isdigit:	
   686                           ; 0 bytes @ 0x0
   687                           
   688  0070                     ??_isdigit:	
   689                           ; 1 bit 
   690                           
   691  0070                     ?_USARTWriteChar:	
   692                           ; 0 bytes @ 0x0
   693                           
   694  0070                     ?_Ativar:	
   695                           ; 0 bytes @ 0x0
   696                           
   697  0070                     ?_sendSerial:	
   698                           ; 0 bytes @ 0x0
   699                           
   700  0070                     ?_refresh:	
   701                           ; 0 bytes @ 0x0
   702                           
   703  0070                     ?_ADCInit:	
   704                           ; 0 bytes @ 0x0
   705                           
   706  0070                     ?_ISR:	
   707                           ; 0 bytes @ 0x0
   708                           
   709  0070                     ?_ativar:	
   710                           ; 0 bytes @ 0x0
   711                           
   712  0070                     ?_inicialize:	
   713                           ; 0 bytes @ 0x0
   714                           
   715  0070                     ?_main:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0070                     ?_lcd_putc:	
   719                           ; 0 bytes @ 0x0
   720                           
   721  0070                     ?___ftge:	
   722                           ; 0 bytes @ 0x0
   723                           
   724  0070                     ?i1_USARTWriteChar:	
   725                           ; 1 bit 
   726                           
   727  0070                     ??i1_USARTWriteChar:	
   728                           ; 0 bytes @ 0x0
   729                           
   730  0070                     ?i1_Ativar:	
   731                           ; 0 bytes @ 0x0
   732                           
   733  0070                     ?i1_lcd_envia_nibble:	
   734                           ; 0 bytes @ 0x0
   735                           
   736  0070                     ??i1_lcd_envia_nibble:	
   737                           ; 0 bytes @ 0x0
   738                           
   739  0070                     ?i1_lcd_putc:	
   740                           ; 0 bytes @ 0x0
   741                           
   742  0070                     ?_USARTReceiveChar:	
   743                           ; 0 bytes @ 0x0
   744                           
   745  0070                     ?___wmul:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?___ftpack:	
   749                           ; 2 bytes @ 0x0
   750                           
   751  0070                     ?___ftneg:	
   752                           ; 3 bytes @ 0x0
   753                           
   754  0070                     ?___lldiv:	
   755                           ; 3 bytes @ 0x0
   756                           
   757  0070                     _isdigit$893:	
   758                           ; 4 bytes @ 0x0
   759                           
   760  0070                     i1USARTWriteChar@USARTData:	
   761                           ; 1 bytes @ 0x0
   762                           
   763  0070                     ___wmul@multiplier:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0070                     ___ftpack@arg:	
   767                           ; 2 bytes @ 0x0
   768                           
   769  0070                     ___ftge@ff1:	
   770                           ; 3 bytes @ 0x0
   771                           
   772  0070                     ___ftneg@f1:	
   773                           ; 3 bytes @ 0x0
   774                           
   775  0070                     ___lldiv@divisor:	
   776                           ; 3 bytes @ 0x0
   777                           
   778                           
   779                           ; 4 bytes @ 0x0
   780  0070                     	ds	1
   781  0071                     ?_USARTWriteString:	
   782  0071                     ??i1_Ativar:	
   783                           ; 0 bytes @ 0x1
   784                           
   785  0071                     isdigit@c:	
   786                           ; 0 bytes @ 0x1
   787                           
   788  0071                     i1lcd_envia_nibble@n:	
   789                           ; 1 bytes @ 0x1
   790                           
   791  0071                     USARTWriteString@str:	
   792                           ; 1 bytes @ 0x1
   793                           
   794                           
   795                           ; 2 bytes @ 0x1
   796  0071                     	ds	1
   797  0072                     ?i1_lcd_envia_byte:	
   798  0072                     i1Ativar@comando:	
   799                           ; 0 bytes @ 0x2
   800                           
   801  0072                     i1lcd_envia_byte@n:	
   802                           ; 1 bytes @ 0x2
   803                           
   804  0072                     ___wmul@multiplicand:	
   805                           ; 1 bytes @ 0x2
   806                           
   807                           
   808                           ; 2 bytes @ 0x2
   809  0072                     	ds	1
   810  0073                     ??_USARTWriteString:	
   811  0073                     ??_USARTReceiveChar:	
   812                           ; 0 bytes @ 0x3
   813                           
   814  0073                     ??_sendSerial:	
   815                           ; 0 bytes @ 0x3
   816                           
   817  0073                     ??_refresh:	
   818                           ; 0 bytes @ 0x3
   819                           
   820  0073                     ??___ftneg:	
   821                           ; 0 bytes @ 0x3
   822                           
   823  0073                     ??i1_lcd_envia_byte:	
   824                           ; 0 bytes @ 0x3
   825                           
   826  0073                     ___ftpack@exp:	
   827                           ; 0 bytes @ 0x3
   828                           
   829  0073                     ___ftge@ff2:	
   830                           ; 1 bytes @ 0x3
   831                           
   832                           
   833                           ; 3 bytes @ 0x3
   834  0073                     	ds	1
   835  0074                     ??___wmul:	
   836  0074                     USARTReceiveChar@USARTData:	
   837                           ; 0 bytes @ 0x4
   838                           
   839  0074                     ___ftpack@sign:	
   840                           ; 1 bytes @ 0x4
   841                           
   842  0074                     i1lcd_envia_byte@address:	
   843                           ; 1 bytes @ 0x4
   844                           
   845  0074                     ___wmul@product:	
   846                           ; 1 bytes @ 0x4
   847                           
   848  0074                     ___lldiv@dividend:	
   849                           ; 2 bytes @ 0x4
   850                           
   851                           
   852                           ; 4 bytes @ 0x4
   853  0074                     	ds	1
   854  0075                     ??___ftpack:	
   855  0075                     ?i1_lcd_gotoxy:	
   856                           ; 0 bytes @ 0x5
   857                           
   858  0075                     i1lcd_gotoxy@y:	
   859                           ; 0 bytes @ 0x5
   860                           
   861                           
   862                           ; 1 bytes @ 0x5
   863  0075                     	ds	1
   864  0076                     ??___ftge:	
   865  0076                     ??i1_lcd_gotoxy:	
   866                           ; 0 bytes @ 0x6
   867                           
   868                           
   869                           ; 0 bytes @ 0x6
   870  0076                     	ds	1
   871  0077                     i1lcd_gotoxy@x:	
   872                           
   873                           ; 1 bytes @ 0x7
   874  0077                     	ds	1
   875  0078                     ??___lldiv:	
   876  0078                     ?___awtoft:	
   877                           ; 0 bytes @ 0x8
   878                           
   879  0078                     ?___ftadd:	
   880                           ; 3 bytes @ 0x8
   881                           
   882  0078                     ?___lltoft:	
   883                           ; 3 bytes @ 0x8
   884                           
   885  0078                     i1lcd_gotoxy@address:	
   886                           ; 3 bytes @ 0x8
   887                           
   888  0078                     ___awtoft@c:	
   889                           ; 1 bytes @ 0x8
   890                           
   891  0078                     ___ftadd@f1:	
   892                           ; 2 bytes @ 0x8
   893                           
   894  0078                     ___lltoft@c:	
   895                           ; 3 bytes @ 0x8
   896                           
   897                           
   898                           ; 4 bytes @ 0x8
   899  0078                     	ds	1
   900  0079                     ??i1_lcd_putc:	
   901  0079                     ___lldiv@quotient:	
   902                           ; 0 bytes @ 0x9
   903                           
   904                           
   905                           ; 4 bytes @ 0x9
   906  0079                     	ds	2
   907  007B                     ??___awtoft:	
   908  007B                     i1lcd_putc@c:	
   909                           ; 0 bytes @ 0xB
   910                           
   911  007B                     ___ftadd@f2:	
   912                           ; 1 bytes @ 0xB
   913                           
   914                           
   915                           ; 3 bytes @ 0xB
   916  007B                     	ds	1
   917  007C                     ??___lltoft:	
   918  007C                     ?i1_lcd_escreve_string:	
   919                           ; 0 bytes @ 0xC
   920                           
   921  007C                     i1lcd_escreve_string@y:	
   922                           ; 0 bytes @ 0xC
   923                           
   924                           
   925                           ; 2 bytes @ 0xC
   926  007C                     	ds	1
   927  007D                     ___awtoft@sign:	
   928  007D                     ___lldiv@counter:	
   929                           ; 1 bytes @ 0xD
   930                           
   931  007D                     ___lltoft@exp:	
   932                           ; 1 bytes @ 0xD
   933                           
   934                           
   935                           ; 1 bytes @ 0xD
   936  007D                     	ds	1
   937  007E                     ??___ftsub:	
   938  007E                     ??i1_lcd_escreve_string:	
   939                           ; 0 bytes @ 0xE
   940                           
   941                           
   942                           	psect	cstackBANK0
   943  0020                     __pcstackBANK0:	
   944                           ; 0 bytes @ 0xE
   945                           
   946  0020                     ?_progressBar:	
   947  0020                     ??___ftadd:	
   948                           ; 0 bytes @ 0x0
   949                           
   950  0020                     ?___ftmul:	
   951                           ; 0 bytes @ 0x0
   952                           
   953  0020                     ?___llmod:	
   954                           ; 3 bytes @ 0x0
   955                           
   956  0020                     progressBar@preint:	
   957                           ; 4 bytes @ 0x0
   958                           
   959  0020                     ___ftmul@f1:	
   960                           ; 2 bytes @ 0x0
   961                           
   962  0020                     ___llmod@divisor:	
   963                           ; 3 bytes @ 0x0
   964                           
   965  0020                     sendSerial@origem:	
   966                           ; 4 bytes @ 0x0
   967                           
   968                           
   969                           ; 40 bytes @ 0x0
   970  0020                     	ds	2
   971  0022                     ??_progressBar:	
   972                           
   973                           ; 0 bytes @ 0x2
   974  0022                     	ds	1
   975  0023                     ___ftmul@f2:	
   976                           
   977                           ; 3 bytes @ 0x3
   978  0023                     	ds	1
   979  0024                     ___ftadd@sign:	
   980  0024                     ___llmod@dividend:	
   981                           ; 1 bytes @ 0x4
   982                           
   983                           
   984                           ; 4 bytes @ 0x4
   985  0024                     	ds	1
   986  0025                     ___ftadd@exp2:	
   987                           
   988                           ; 1 bytes @ 0x5
   989  0025                     	ds	1
   990  0026                     ??___ftmul:	
   991  0026                     ___ftadd@exp1:	
   992                           ; 0 bytes @ 0x6
   993                           
   994  0026                     progressBar@aux:	
   995                           ; 1 bytes @ 0x6
   996                           
   997                           
   998                           ; 16 bytes @ 0x6
   999  0026                     	ds	1
  1000  0027                     ?___ftsub:	
  1001  0027                     ___ftsub@f2:	
  1002                           ; 3 bytes @ 0x7
  1003                           
  1004                           
  1005                           ; 3 bytes @ 0x7
  1006  0027                     	ds	1
  1007  0028                     ??___llmod:	
  1008                           
  1009                           ; 0 bytes @ 0x8
  1010  0028                     	ds	1
  1011  0029                     ___llmod@counter:	
  1012                           
  1013                           ; 1 bytes @ 0x9
  1014  0029                     	ds	1
  1015  002A                     ?_sprintf:	
  1016  002A                     sprintf@f:	
  1017                           ; 2 bytes @ 0xA
  1018                           
  1019  002A                     ___ftmul@exp:	
  1020                           ; 1 bytes @ 0xA
  1021                           
  1022  002A                     ___ftsub@f1:	
  1023                           ; 1 bytes @ 0xA
  1024                           
  1025                           
  1026                           ; 3 bytes @ 0xA
  1027  002A                     	ds	1
  1028  002B                     ___ftmul@f3_as_product:	
  1029                           
  1030                           ; 3 bytes @ 0xB
  1031  002B                     	ds	3
  1032  002E                     ___ftmul@cntr:	
  1033                           
  1034                           ; 1 bytes @ 0xE
  1035  002E                     	ds	1
  1036  002F                     ___ftmul@sign:	
  1037                           
  1038                           ; 1 bytes @ 0xF
  1039  002F                     	ds	1
  1040  0030                     ?___ftdiv:	
  1041  0030                     ?___fttol:	
  1042                           ; 3 bytes @ 0x10
  1043                           
  1044  0030                     ___ftdiv@f2:	
  1045                           ; 4 bytes @ 0x10
  1046                           
  1047  0030                     ___fttol@f1:	
  1048                           ; 3 bytes @ 0x10
  1049                           
  1050                           
  1051                           ; 3 bytes @ 0x10
  1052  0030                     	ds	3
  1053  0033                     ??_sprintf:	
  1054  0033                     ___ftdiv@f1:	
  1055                           ; 0 bytes @ 0x13
  1056                           
  1057                           
  1058                           ; 3 bytes @ 0x13
  1059  0033                     	ds	1
  1060  0034                     ??___fttol:	
  1061                           
  1062                           ; 0 bytes @ 0x14
  1063  0034                     	ds	2
  1064  0036                     ??___ftdiv:	
  1065  0036                     progressBar@i:	
  1066                           ; 0 bytes @ 0x16
  1067                           
  1068                           
  1069                           ; 2 bytes @ 0x16
  1070  0036                     	ds	2
  1071  0038                     progressBar@result:	
  1072  0038                     sprintf@flag:	
  1073                           ; 1 bytes @ 0x18
  1074                           
  1075  0038                     ___fttol@sign1:	
  1076                           ; 1 bytes @ 0x18
  1077                           
  1078                           
  1079                           ; 1 bytes @ 0x18
  1080  0038                     	ds	1
  1081  0039                     sprintf@ap:	
  1082  0039                     ___fttol@lval:	
  1083                           ; 1 bytes @ 0x19
  1084                           
  1085                           
  1086                           ; 4 bytes @ 0x19
  1087  0039                     	ds	1
  1088  003A                     ___ftdiv@cntr:	
  1089  003A                     sprintf@_val:	
  1090                           ; 1 bytes @ 0x1A
  1091                           
  1092                           
  1093                           ; 4 bytes @ 0x1A
  1094  003A                     	ds	1
  1095  003B                     ___ftdiv@f3:	
  1096                           
  1097                           ; 3 bytes @ 0x1B
  1098  003B                     	ds	2
  1099  003D                     ___fttol@exp1:	
  1100                           
  1101                           ; 1 bytes @ 0x1D
  1102  003D                     	ds	1
  1103  003E                     sprintf@sp:	
  1104  003E                     ___ftdiv@exp:	
  1105                           ; 1 bytes @ 0x1E
  1106                           
  1107                           
  1108                           ; 1 bytes @ 0x1E
  1109  003E                     	ds	1
  1110  003F                     ___ftdiv@sign:	
  1111  003F                     sprintf@width:	
  1112                           ; 1 bytes @ 0x1F
  1113                           
  1114                           
  1115                           ; 2 bytes @ 0x1F
  1116  003F                     	ds	2
  1117  0041                     sprintf@prec:	
  1118                           
  1119                           ; 2 bytes @ 0x21
  1120  0041                     	ds	2
  1121  0043                     sprintf@c:	
  1122                           
  1123                           ; 1 bytes @ 0x23
  1124  0043                     	ds	1
  1125  0044                     ?_ftoa:	
  1126  0044                     ftoa@f:	
  1127                           ; 1 bytes @ 0x24
  1128                           
  1129                           
  1130                           ; 3 bytes @ 0x24
  1131  0044                     	ds	3
  1132  0047                     ftoa@status:	
  1133                           
  1134                           ; 1 bytes @ 0x27
  1135  0047                     	ds	1
  1136  0048                     ??_ftoa:	
  1137  0048                     sendSerial@envio:	
  1138                           ; 0 bytes @ 0x28
  1139                           
  1140                           
  1141                           ; 1 bytes @ 0x28
  1142  0048                     	ds	1
  1143  0049                     sendSerial@nivelRecipiente:	
  1144  0049                     ftoa@rem:	
  1145                           ; 1 bytes @ 0x29
  1146                           
  1147                           
  1148                           ; 4 bytes @ 0x29
  1149  0049                     	ds	1
  1150  004A                     sendSerial@x:	
  1151                           
  1152                           ; 2 bytes @ 0x2A
  1153  004A                     	ds	3
  1154  004D                     ftoa@l:	
  1155                           
  1156                           ; 4 bytes @ 0x2D
  1157  004D                     	ds	4
  1158  0051                     ftoa@cp:	
  1159                           
  1160                           ; 1 bytes @ 0x31
  1161  0051                     	ds	1
  1162  0052                     ??_ISR:	
  1163                           
  1164                           ; 0 bytes @ 0x32
  1165  0052                     	ds	6
  1166  0058                     ISR@buf:	
  1167                           
  1168                           ; 1 bytes @ 0x38
  1169  0058                     	ds	1
  1170  0059                     ISR@pre:	
  1171                           
  1172                           ; 3 bytes @ 0x39
  1173  0059                     	ds	3
  1174  005C                     ISR@preint:	
  1175                           
  1176                           ; 2 bytes @ 0x3C
  1177  005C                     	ds	2
  1178  005E                     ISR@status:	
  1179                           
  1180                           ; 2 bytes @ 0x3E
  1181  005E                     	ds	2
  1182  0060                     ISR@input:	
  1183                           
  1184                           ; 3 bytes @ 0x40
  1185  0060                     	ds	3
  1186  0063                     ISR@input2:	
  1187                           
  1188                           ; 3 bytes @ 0x43
  1189  0063                     	ds	3
  1190  0066                     ISR@per:	
  1191                           
  1192                           ; 1 bytes @ 0x46
  1193  0066                     	ds	1
  1194                           
  1195                           	psect	maintext
  1196  1659                     __pmaintext:	
  1197 ;;
  1198 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1199 ;;
  1200 ;; *************** function _main *****************
  1201 ;; Defined at:
  1202 ;;		line 334 in file "main.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;		None               void
  1209 ;; Registers used:
  1210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 17F/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0
  1218 ;;      Temps:          0       0       0       0       0
  1219 ;;      Totals:         0       0       0       0       0
  1220 ;;Total ram usage:        0 bytes
  1221 ;; Hardware stack levels required when called:   13
  1222 ;; This function calls:
  1223 ;;		_ativar
  1224 ;;		_inicialize
  1225 ;; This function is called by:
  1226 ;;		Startup code after reset
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           
  1231                           ;psect for function _main
  1232  1659                     _main:	
  1233                           
  1234                           ;main.c: 336: inicialize();
  1235                           
  1236                           ;incstack = 0
  1237 ;; hardware stack exceeded
  1238                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1239  1659  120A  158A  25C6  160A  118A  	fcall	_inicialize
  1240  165E                     l2941:	
  1241                           ;main.c: 338: while (1) {
  1242                           
  1243                           
  1244                           ;main.c: 339: ativar();
  1245  165E  120A  158A  24D9  160A  118A  	fcall	_ativar
  1246  1663  2E5E               	goto	l2941
  1247  1664                     __end_of_main:	
  1248                           
  1249                           	psect	text1
  1250  0DC6                     __ptext1:	
  1251 ;; *************** function _inicialize *****************
  1252 ;; Defined at:
  1253 ;;		line 306 in file "main.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;		None               void
  1260 ;; Registers used:
  1261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1267 ;;      Params:         0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0
  1269 ;;      Temps:          0       0       3       0       0
  1270 ;;      Totals:         0       0       3       0       0
  1271 ;;Total ram usage:        3 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:   12
  1274 ;; This function calls:
  1275 ;;		_ADCInit
  1276 ;;		_LCDClear
  1277 ;;		_USARTInit
  1278 ;;		_init_lcd_4bit
  1279 ;;		_lcd_escreve_string
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           
  1286                           ;psect for function _inicialize
  1287  0DC6                     _inicialize:	
  1288                           
  1289                           ;main.c: 308: USARTInit(57600, 1);
  1290                           
  1291                           ;incstack = 0
  1292 ;; hardware stack exceeded
  1293                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1294  0DC6  3000               	movlw	0
  1295  0DC7  1683               	bsf	3,5	;RP0=1, select bank1
  1296  0DC8  1303               	bcf	3,6	;RP1=0, select bank1
  1297  0DC9  00B2               	movwf	(USARTInit@BaudRate+3)^(0+128)
  1298  0DCA  3000               	movlw	0
  1299  0DCB  00B1               	movwf	(USARTInit@BaudRate+2)^(0+128)
  1300  0DCC  30E1               	movlw	225
  1301  0DCD  00B0               	movwf	(USARTInit@BaudRate+1)^(0+128)
  1302  0DCE  3000               	movlw	0
  1303  0DCF  00AF               	movwf	USARTInit@BaudRate^(0+128)
  1304  0DD0  3001               	movlw	1
  1305  0DD1  00B3               	movwf	USARTInit@Mode^(0+128)
  1306  0DD2  3000               	movlw	0
  1307  0DD3  00B4               	movwf	(USARTInit@Mode^(0+128)+1)
  1308  0DD4  120A  158A  240B  120A  158A  	fcall	_USARTInit
  1309                           
  1310                           ;main.c: 310: TRISA = 0b11111111;
  1311  0DD9  30FF               	movlw	255
  1312  0DDA  1683               	bsf	3,5	;RP0=1, select bank1
  1313  0DDB  1303               	bcf	3,6	;RP1=0, select bank1
  1314  0DDC  0085               	movwf	5	;volatile
  1315                           
  1316                           ;main.c: 311: PORTAbits.RA0 = 0;
  1317  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  1318  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  1319  0DDF  1005               	bcf	5,0	;volatile
  1320                           
  1321                           ;main.c: 312: TRISDbits.TRISD2 = 0;
  1322  0DE0  1683               	bsf	3,5	;RP0=1, select bank1
  1323  0DE1  1303               	bcf	3,6	;RP1=0, select bank1
  1324  0DE2  1108               	bcf	8,2	;volatile
  1325                           
  1326                           ;main.c: 313: PORTDbits.RD2 = 1;
  1327  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0DE5  1508               	bsf	8,2	;volatile
  1330                           
  1331                           ;main.c: 314: TRISDbits.TRISD3 = 0;
  1332  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  1333  0DE7  1303               	bcf	3,6	;RP1=0, select bank1
  1334  0DE8  1188               	bcf	8,3	;volatile
  1335                           
  1336                           ;main.c: 315: PORTDbits.RD3 = 0;
  1337  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  1339  0DEB  1188               	bcf	8,3	;volatile
  1340                           
  1341                           ;main.c: 317: TRISCbits.TRISC0 = 1;
  1342  0DEC  1683               	bsf	3,5	;RP0=1, select bank1
  1343  0DED  1303               	bcf	3,6	;RP1=0, select bank1
  1344  0DEE  1407               	bsf	7,0	;volatile
  1345                           
  1346                           ;main.c: 318: TRISCbits.TRISC1 = 1;
  1347  0DEF  1487               	bsf	7,1	;volatile
  1348                           
  1349                           ;main.c: 319: TRISCbits.TRISC2 = 1;
  1350  0DF0  1507               	bsf	7,2	;volatile
  1351                           
  1352                           ;main.c: 320: TRISCbits.TRISC3 = 1;
  1353  0DF1  1587               	bsf	7,3	;volatile
  1354                           
  1355                           ;main.c: 321: PORTCbits.RC3 = 0;
  1356  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  1357  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  1358  0DF4  1187               	bcf	7,3	;volatile
  1359                           
  1360                           ;main.c: 322: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1361  0DF5  3033               	movlw	51
  1362  0DF6  1683               	bsf	3,5	;RP0=1, select bank1
  1363  0DF7  1303               	bcf	3,6	;RP1=0, select bank1
  1364  0DF8  00BD               	movwf	(??_inicialize^(0+128)+2)
  1365  0DF9  30BC               	movlw	188
  1366  0DFA  00BC               	movwf	(??_inicialize^(0+128)+1)
  1367  0DFB  3010               	movlw	16
  1368  0DFC  00BB               	movwf	??_inicialize^(0+128)
  1369  0DFD                     u3917:	
  1370  0DFD  0BBB               	decfsz	??_inicialize^(0+128),f
  1371  0DFE  2DFD               	goto	u3917
  1372  0DFF  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1373  0E00  2DFD               	goto	u3917
  1374  0E01  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1375  0E02  2DFD               	goto	u3917
  1376                           
  1377                           ;main.c: 323: init_lcd_4bit();
  1378  0E03  120A  118A  279A  120A  158A  	fcall	_init_lcd_4bit
  1379                           
  1380                           ;main.c: 324: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1381  0E08  3033               	movlw	51
  1382  0E09  1683               	bsf	3,5	;RP0=1, select bank1
  1383  0E0A  1303               	bcf	3,6	;RP1=0, select bank1
  1384  0E0B  00BD               	movwf	(??_inicialize^(0+128)+2)
  1385  0E0C  30BC               	movlw	188
  1386  0E0D  00BC               	movwf	(??_inicialize^(0+128)+1)
  1387  0E0E  3010               	movlw	16
  1388  0E0F  00BB               	movwf	??_inicialize^(0+128)
  1389  0E10                     u3927:	
  1390  0E10  0BBB               	decfsz	??_inicialize^(0+128),f
  1391  0E11  2E10               	goto	u3927
  1392  0E12  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1393  0E13  2E10               	goto	u3927
  1394  0E14  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1395  0E15  2E10               	goto	u3927
  1396                           
  1397                           ;main.c: 325: INTCONbits.PEIE = 1;
  1398  0E16  170B               	bsf	11,6	;volatile
  1399                           
  1400                           ;main.c: 326: INTCONbits.GIE = 1;
  1401  0E17  178B               	bsf	11,7	;volatile
  1402                           
  1403                           ;main.c: 327: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1404  0E18  301A               	movlw	26
  1405  0E19  1683               	bsf	3,5	;RP0=1, select bank1
  1406  0E1A  1303               	bcf	3,6	;RP1=0, select bank1
  1407  0E1B  00BD               	movwf	(??_inicialize^(0+128)+2)
  1408  0E1C  305E               	movlw	94
  1409  0E1D  00BC               	movwf	(??_inicialize^(0+128)+1)
  1410  0E1E  3086               	movlw	134
  1411  0E1F  00BB               	movwf	??_inicialize^(0+128)
  1412  0E20                     u3937:	
  1413  0E20  0BBB               	decfsz	??_inicialize^(0+128),f
  1414  0E21  2E20               	goto	u3937
  1415  0E22  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1416  0E23  2E20               	goto	u3937
  1417  0E24  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1418  0E25  2E20               	goto	u3937
  1419  0E26  0000               	nop
  1420                           
  1421                           ;main.c: 328: ADCInit();
  1422  0E27  160A  118A  26A0  120A  158A  	fcall	_ADCInit
  1423                           
  1424                           ;main.c: 329: lcd_escreve_string("\fLoading PIC...");
  1425  0E2C  305B               	movlw	low (STR_4-__stringbase)
  1426  0E2D  1683               	bsf	3,5	;RP0=1, select bank1
  1427  0E2E  1303               	bcf	3,6	;RP1=0, select bank1
  1428  0E2F  00AC               	movwf	lcd_escreve_string@y^(0+128)
  1429  0E30  3080               	movlw	128
  1430  0E31  00AD               	movwf	(lcd_escreve_string@y+1)^(0+128)
  1431  0E32  120A  158A  20BD  120A  158A  	fcall	_lcd_escreve_string
  1432                           
  1433                           ;main.c: 330: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1434  0E37  307F               	movlw	127
  1435  0E38  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0E39  1303               	bcf	3,6	;RP1=0, select bank1
  1437  0E3A  00BD               	movwf	(??_inicialize^(0+128)+2)
  1438  0E3B  30D4               	movlw	212
  1439  0E3C  00BC               	movwf	(??_inicialize^(0+128)+1)
  1440  0E3D  30AE               	movlw	174
  1441  0E3E  00BB               	movwf	??_inicialize^(0+128)
  1442  0E3F                     u3947:	
  1443  0E3F  0BBB               	decfsz	??_inicialize^(0+128),f
  1444  0E40  2E3F               	goto	u3947
  1445  0E41  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1446  0E42  2E3F               	goto	u3947
  1447  0E43  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1448  0E44  2E3F               	goto	u3947
  1449  0E45  2E46               	nop2
  1450                           
  1451                           ;main.c: 331: LCDClear();
  1452  0E46  120A  158A  21D6   	fcall	_LCDClear
  1453  0E49  0008               	return
  1454  0E4A                     __end_of_inicialize:	
  1455                           
  1456                           	psect	text2
  1457  08BD                     __ptext2:	
  1458 ;; *************** function _lcd_escreve_string *****************
  1459 ;; Defined at:
  1460 ;;		line 168 in file "lcd_4bit.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  y               2   12[BANK1 ] PTR const unsigned char 
  1463 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  1464 ;;		 -> progressBar@aux(16), 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;		None               void
  1469 ;; Registers used:
  1470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         0       0       2       0       0
  1477 ;;      Locals:         0       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0
  1479 ;;      Totals:         0       0       2       0       0
  1480 ;;Total ram usage:        2 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:   11
  1483 ;; This function calls:
  1484 ;;		_lcd_putc
  1485 ;; This function is called by:
  1486 ;;		_inicialize
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           
  1491                           ;psect for function _lcd_escreve_string
  1492  08BD                     _lcd_escreve_string:	
  1493  08BD                     l2331:	
  1494                           ;lcd_4bit.c: 170: while(*y!='\0')
  1495                           
  1496                           ;incstack = 0
  1497 ;; hardware stack exceeded
  1498                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1499                           
  1500  08BD  1683               	bsf	3,5	;RP0=1, select bank1
  1501  08BE  1303               	bcf	3,6	;RP1=0, select bank1
  1502  08BF  082D               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1503  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  1504  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  1505  08C2  00FF               	movwf	127
  1506  08C3  1683               	bsf	3,5	;RP0=1, select bank1
  1507  08C4  1303               	bcf	3,6	;RP1=0, select bank1
  1508  08C5  082C               	movf	lcd_escreve_string@y^(0+128),w
  1509  08C6  0084               	movwf	4
  1510  08C7  1283               	bcf	3,5	;RP0=0, select bank0
  1511  08C8  1303               	bcf	3,6	;RP1=0, select bank0
  1512  08C9  120A  158A  2000  120A  158A  	fcall	stringtab
  1513  08CE  3800               	iorlw	0
  1514  08CF  1903               	btfsc	3,2
  1515  08D0  0008               	return
  1516                           
  1517                           ;lcd_4bit.c: 171: {
  1518                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1519  08D1  1683               	bsf	3,5	;RP0=1, select bank1
  1520  08D2  1303               	bcf	3,6	;RP1=0, select bank1
  1521  08D3  082D               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1522  08D4  1283               	bcf	3,5	;RP0=0, select bank0
  1523  08D5  1303               	bcf	3,6	;RP1=0, select bank0
  1524  08D6  00FF               	movwf	127
  1525  08D7  1683               	bsf	3,5	;RP0=1, select bank1
  1526  08D8  1303               	bcf	3,6	;RP1=0, select bank1
  1527  08D9  082C               	movf	lcd_escreve_string@y^(0+128),w
  1528  08DA  0084               	movwf	4
  1529  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  1530  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  1531  08DD  120A  158A  2000  120A  158A  	fcall	stringtab
  1532  08E2  120A  158A  2216  120A  158A  	fcall	_lcd_putc
  1533                           
  1534                           ;lcd_4bit.c: 173: y++;
  1535  08E7  3001               	movlw	1
  1536  08E8  1683               	bsf	3,5	;RP0=1, select bank1
  1537  08E9  1303               	bcf	3,6	;RP1=0, select bank1
  1538  08EA  07AC               	addwf	lcd_escreve_string@y^(0+128),f
  1539  08EB  1803               	skipnc
  1540  08EC  0AAD               	incf	(lcd_escreve_string@y+1)^(0+128),f
  1541  08ED  28BD               	goto	l2331
  1542  08EE                     __end_of_lcd_escreve_string:	
  1543                           
  1544                           	psect	text3
  1545  0A16                     __ptext3:	
  1546 ;; *************** function _lcd_putc *****************
  1547 ;; Defined at:
  1548 ;;		line 82 in file "lcd_4bit.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  c               1    wreg     unsigned char 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  c               1   11[BANK1 ] unsigned char 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;		None               void
  1555 ;; Registers used:
  1556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       0       0       0       0
  1563 ;;      Locals:         0       0       1       0       0
  1564 ;;      Temps:          0       0       2       0       0
  1565 ;;      Totals:         0       0       3       0       0
  1566 ;;Total ram usage:        3 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:   10
  1569 ;; This function calls:
  1570 ;;		_lcd_envia_byte
  1571 ;;		_lcd_gotoxy
  1572 ;; This function is called by:
  1573 ;;		_lcd_escreve_string
  1574 ;;		_lcd_escreve_p
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           
  1579                           ;psect for function _lcd_putc
  1580  0A16                     _lcd_putc:	
  1581                           
  1582                           ;incstack = 0
  1583 ;; hardware stack exceeded
  1584                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1585                           ;lcd_putc@c stored from wreg
  1586  0A16  1683               	bsf	3,5	;RP0=1, select bank1
  1587  0A17  1303               	bcf	3,6	;RP1=0, select bank1
  1588  0A18  00AB               	movwf	lcd_putc@c^(0+128)
  1589                           
  1590                           ;lcd_4bit.c: 84: switch(c)
  1591  0A19  2A4F               	goto	l2037
  1592  0A1A                     l2025:	
  1593                           ;lcd_4bit.c: 85: {
  1594                           ;lcd_4bit.c: 86: case '\f':
  1595                           
  1596                           
  1597                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1598  0A1A  01A2               	clrf	lcd_envia_byte@n^(0+128)
  1599  0A1B  0AA2               	incf	lcd_envia_byte@n^(0+128),f
  1600  0A1C  3000               	movlw	0
  1601  0A1D  120A  158A  20EE  120A  158A  	fcall	_lcd_envia_byte
  1602                           
  1603                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1604  0A22  300D               	movlw	13
  1605  0A23  1683               	bsf	3,5	;RP0=1, select bank1
  1606  0A24  1303               	bcf	3,6	;RP1=0, select bank1
  1607  0A25  00AA               	movwf	(??_lcd_putc^(0+128)+1)
  1608  0A26  30FB               	movlw	251
  1609  0A27  00A9               	movwf	??_lcd_putc^(0+128)
  1610  0A28                     u3957:	
  1611  0A28  0BA9               	decfsz	??_lcd_putc^(0+128),f
  1612  0A29  2A28               	goto	u3957
  1613  0A2A  0BAA               	decfsz	(??_lcd_putc^(0+128)+1),f
  1614  0A2B  2A28               	goto	u3957
  1615  0A2C  2A2D               	nop2
  1616                           
  1617                           ;lcd_4bit.c: 89: break;
  1618  0A2D  0008               	return
  1619  0A2E                     l2029:	
  1620                           ;lcd_4bit.c: 91: case '\n':
  1621                           
  1622                           
  1623                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1624  0A2E  3002               	movlw	2
  1625  0A2F  1683               	bsf	3,5	;RP0=1, select bank1
  1626  0A30  1303               	bcf	3,6	;RP1=0, select bank1
  1627  0A31  00A9               	movwf	??_lcd_putc^(0+128)
  1628  0A32  0829               	movf	??_lcd_putc^(0+128),w
  1629  0A33  00A5               	movwf	lcd_gotoxy@y^(0+128)
  1630  0A34  3001               	movlw	1
  1631  0A35  160A  118A  2704   	fcall	_lcd_gotoxy
  1632                           
  1633                           ;lcd_4bit.c: 93: break;
  1634  0A38  0008               	return
  1635  0A39                     l2031:	
  1636                           ;lcd_4bit.c: 95: case '\b':
  1637                           
  1638                           
  1639                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1640  0A39  3010               	movlw	16
  1641  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  1642  0A3B  1303               	bcf	3,6	;RP1=0, select bank1
  1643  0A3C  00A9               	movwf	??_lcd_putc^(0+128)
  1644  0A3D  0829               	movf	??_lcd_putc^(0+128),w
  1645  0A3E  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1646  0A3F  3000               	movlw	0
  1647  0A40  120A  158A  20EE   	fcall	_lcd_envia_byte
  1648                           
  1649                           ;lcd_4bit.c: 97: break;
  1650  0A43  0008               	return
  1651  0A44                     l2033:	
  1652                           ;lcd_4bit.c: 99: default:
  1653                           
  1654                           
  1655                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1656  0A44  1683               	bsf	3,5	;RP0=1, select bank1
  1657  0A45  1303               	bcf	3,6	;RP1=0, select bank1
  1658  0A46  082B               	movf	lcd_putc@c^(0+128),w
  1659  0A47  00A9               	movwf	??_lcd_putc^(0+128)
  1660  0A48  0829               	movf	??_lcd_putc^(0+128),w
  1661  0A49  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1662  0A4A  3001               	movlw	1
  1663  0A4B  120A  158A  20EE   	fcall	_lcd_envia_byte
  1664                           
  1665                           ;lcd_4bit.c: 102: }
  1666                           
  1667                           ;lcd_4bit.c: 101: break;
  1668  0A4E  0008               	return
  1669  0A4F                     l2037:	
  1670  0A4F  1683               	bsf	3,5	;RP0=1, select bank1
  1671  0A50  1303               	bcf	3,6	;RP1=0, select bank1
  1672  0A51  082B               	movf	lcd_putc@c^(0+128),w
  1673                           
  1674                           ; Switch size 1, requested type "space"
  1675                           ; Number of cases is 3, Range of values is 8 to 12
  1676                           ; switch strategies available:
  1677                           ; Name         Instructions Cycles
  1678                           ; simple_byte           10     6 (average)
  1679                           ; direct_byte           26    11 (fixed)
  1680                           ; jumptable            263     9 (fixed)
  1681                           ;	Chosen strategy is simple_byte
  1682  0A52  3A08               	xorlw	8	; case 8
  1683  0A53  1903               	skipnz
  1684  0A54  2A39               	goto	l2031
  1685  0A55  3A02               	xorlw	2	; case 10
  1686  0A56  1903               	skipnz
  1687  0A57  2A2E               	goto	l2029
  1688  0A58  3A06               	xorlw	6	; case 12
  1689  0A59  1903               	skipnz
  1690  0A5A  2A1A               	goto	l2025
  1691  0A5B  2A44               	goto	l2033
  1692  0A5C  0008               	return
  1693  0A5D                     __end_of_lcd_putc:	
  1694                           
  1695                           	psect	text4
  1696  1704                     __ptext4:	
  1697 ;; *************** function _lcd_gotoxy *****************
  1698 ;; Defined at:
  1699 ;;		line 70 in file "lcd_4bit.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;  x               1    wreg     unsigned char 
  1702 ;;  y               1    5[BANK1 ] unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  x               1    7[BANK1 ] unsigned char 
  1705 ;;  address         1    8[BANK1 ] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;		None               void
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0, pclath, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1715 ;;      Params:         0       0       1       0       0
  1716 ;;      Locals:         0       0       2       0       0
  1717 ;;      Temps:          0       0       1       0       0
  1718 ;;      Totals:         0       0       4       0       0
  1719 ;;Total ram usage:        4 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    9
  1722 ;; This function calls:
  1723 ;;		_lcd_envia_byte
  1724 ;; This function is called by:
  1725 ;;		_lcd_putc
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           
  1730                           ;psect for function _lcd_gotoxy
  1731  1704                     _lcd_gotoxy:	
  1732                           
  1733                           ;incstack = 0
  1734 ;; hardware stack exceeded
  1735                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1736                           ;lcd_gotoxy@x stored from wreg
  1737  1704  1683               	bsf	3,5	;RP0=1, select bank1
  1738  1705  1303               	bcf	3,6	;RP1=0, select bank1
  1739  1706  00A7               	movwf	lcd_gotoxy@x^(0+128)
  1740                           
  1741                           ;lcd_4bit.c: 72: unsigned char address;
  1742                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1743  1707  0825               	movf	lcd_gotoxy@y^(0+128),w
  1744  1708  3A01               	xorlw	1
  1745  1709  1903               	skipnz
  1746  170A  2F10               	goto	l1973
  1747  170B  3040               	movlw	64
  1748  170C  00A6               	movwf	??_lcd_gotoxy^(0+128)
  1749  170D  0826               	movf	??_lcd_gotoxy^(0+128),w
  1750  170E  00A8               	movwf	lcd_gotoxy@address^(0+128)
  1751  170F  2F11               	goto	l1975
  1752  1710                     l1973:	
  1753                           
  1754                           ;lcd_4bit.c: 75: else address=0;
  1755  1710  01A8               	clrf	lcd_gotoxy@address^(0+128)
  1756  1711                     l1975:	
  1757                           
  1758                           ;lcd_4bit.c: 77: address += x-1;
  1759  1711  0827               	movf	lcd_gotoxy@x^(0+128),w
  1760  1712  3EFF               	addlw	255
  1761  1713  00A6               	movwf	??_lcd_gotoxy^(0+128)
  1762  1714  0826               	movf	??_lcd_gotoxy^(0+128),w
  1763  1715  07A8               	addwf	lcd_gotoxy@address^(0+128),f
  1764                           
  1765                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1766  1716  0828               	movf	lcd_gotoxy@address^(0+128),w
  1767  1717  3880               	iorlw	128
  1768  1718  00A6               	movwf	??_lcd_gotoxy^(0+128)
  1769  1719  0826               	movf	??_lcd_gotoxy^(0+128),w
  1770  171A  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1771  171B  3000               	movlw	0
  1772  171C  120A  158A  20EE   	fcall	_lcd_envia_byte
  1773  171F  0008               	return
  1774  1720                     __end_of_lcd_gotoxy:	
  1775                           
  1776                           	psect	text5
  1777  079A                     __ptext5:	
  1778 ;; *************** function _init_lcd_4bit *****************
  1779 ;; Defined at:
  1780 ;;		line 6 in file "lcd_4bit.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  i               1    7[BANK1 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1794 ;;      Params:         0       0       0       0       0
  1795 ;;      Locals:         0       0       1       0       0
  1796 ;;      Temps:          0       0       2       0       0
  1797 ;;      Totals:         0       0       3       0       0
  1798 ;;Total ram usage:        3 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    9
  1801 ;; This function calls:
  1802 ;;		_lcd_envia_byte
  1803 ;;		_lcd_envia_nibble
  1804 ;; This function is called by:
  1805 ;;		_inicialize
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           
  1810                           ;psect for function _init_lcd_4bit
  1811  079A                     _init_lcd_4bit:	
  1812                           
  1813                           ;lcd_4bit.c: 8: unsigned char i;
  1814                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1815                           
  1816                           ;incstack = 0
  1817 ;; hardware stack exceeded
  1818                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1819  079A  1683               	bsf	3,5	;RP0=1, select bank1
  1820  079B  1303               	bcf	3,6	;RP1=0, select bank1
  1821  079C  1206               	bcf	6,4	;volatile
  1822                           
  1823                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1824  079D  1286               	bcf	6,5	;volatile
  1825                           
  1826                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1827  079E  1283               	bcf	3,5	;RP0=0, select bank0
  1828  079F  1303               	bcf	3,6	;RP1=0, select bank0
  1829  07A0  1206               	bcf	6,4	;volatile
  1830                           
  1831                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1832  07A1  1286               	bcf	6,5	;volatile
  1833                           
  1834                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1835  07A2  1683               	bsf	3,5	;RP0=1, select bank1
  1836  07A3  1303               	bcf	3,6	;RP1=0, select bank1
  1837  07A4  1006               	bcf	6,0	;volatile
  1838                           
  1839                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1840  07A5  1086               	bcf	6,1	;volatile
  1841                           
  1842                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1843  07A6  1106               	bcf	6,2	;volatile
  1844                           
  1845                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1846  07A7  1186               	bcf	6,3	;volatile
  1847                           
  1848                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1849  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  1850  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  1851  07AA  1006               	bcf	6,0	;volatile
  1852                           
  1853                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1854  07AB  1086               	bcf	6,1	;volatile
  1855                           
  1856                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1857  07AC  1106               	bcf	6,2	;volatile
  1858                           
  1859                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1860  07AD  1186               	bcf	6,3	;volatile
  1861                           
  1862                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1863  07AE  3062               	movlw	98
  1864  07AF  1683               	bsf	3,5	;RP0=1, select bank1
  1865  07B0  1303               	bcf	3,6	;RP1=0, select bank1
  1866  07B1  00A6               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1867  07B2  3065               	movlw	101
  1868  07B3  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1869  07B4                     u3967:	
  1870  07B4  0BA5               	decfsz	??_init_lcd_4bit^(0+128),f
  1871  07B5  2FB4               	goto	u3967
  1872  07B6  0BA6               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1873  07B7  2FB4               	goto	u3967
  1874  07B8  2FB9               	nop2
  1875                           
  1876                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1877  07B9  1683               	bsf	3,5	;RP0=1, select bank1
  1878  07BA  1303               	bcf	3,6	;RP1=0, select bank1
  1879  07BB  01A7               	clrf	init_lcd_4bit@i^(0+128)
  1880  07BC  3003               	movlw	3
  1881  07BD  0227               	subwf	init_lcd_4bit@i^(0+128),w
  1882  07BE  1803               	btfsc	3,0
  1883  07BF  2FDB               	goto	l2359
  1884  07C0                     l2351:	
  1885                           
  1886                           ;lcd_4bit.c: 26: {
  1887                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1888  07C0  3003               	movlw	3
  1889  07C1  120A  158A  22F7  120A  118A  	fcall	_lcd_envia_nibble
  1890                           
  1891                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1892  07C6  3021               	movlw	33
  1893  07C7  1683               	bsf	3,5	;RP0=1, select bank1
  1894  07C8  1303               	bcf	3,6	;RP1=0, select bank1
  1895  07C9  00A6               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1896  07CA  3076               	movlw	118
  1897  07CB  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1898  07CC                     u3977:	
  1899  07CC  0BA5               	decfsz	??_init_lcd_4bit^(0+128),f
  1900  07CD  2FCC               	goto	u3977
  1901  07CE  0BA6               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1902  07CF  2FCC               	goto	u3977
  1903  07D0  0000               	nop
  1904  07D1  3001               	movlw	1
  1905  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  1906  07D3  1303               	bcf	3,6	;RP1=0, select bank1
  1907  07D4  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1908  07D5  0825               	movf	??_init_lcd_4bit^(0+128),w
  1909  07D6  07A7               	addwf	init_lcd_4bit@i^(0+128),f
  1910  07D7  3003               	movlw	3
  1911  07D8  0227               	subwf	init_lcd_4bit@i^(0+128),w
  1912  07D9  1C03               	skipc
  1913  07DA  2FC0               	goto	l2351
  1914  07DB                     l2359:	
  1915                           
  1916                           ;lcd_4bit.c: 29: }
  1917                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1918  07DB  3002               	movlw	2
  1919  07DC  120A  158A  22F7  120A  118A  	fcall	_lcd_envia_nibble
  1920                           
  1921                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1922  07E1  1683               	bsf	3,5	;RP0=1, select bank1
  1923  07E2  1303               	bcf	3,6	;RP1=0, select bank1
  1924  07E3  01A7               	clrf	init_lcd_4bit@i^(0+128)
  1925  07E4                     L1:	
  1926  07E4  3004               	movlw	4
  1927  07E5  0227               	subwf	init_lcd_4bit@i^(0+128),w
  1928  07E6  1803               	btfsc	3,0
  1929  07E7  0008               	return
  1930                           
  1931                           ;lcd_4bit.c: 33: {
  1932                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1933  07E8  0827               	movf	init_lcd_4bit@i^(0+128),w
  1934  07E9  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1935  07EA  0084               	movwf	4
  1936  07EB  120A  158A  200A  120A  118A  	fcall	stringdir
  1937  07F0  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1938  07F1  0825               	movf	??_init_lcd_4bit^(0+128),w
  1939  07F2  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1940  07F3  3000               	movlw	0
  1941  07F4  120A  158A  20EE  120A  118A  	fcall	_lcd_envia_byte
  1942  07F9  3001               	movlw	1
  1943  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  1944  07FB  1303               	bcf	3,6	;RP1=0, select bank1
  1945  07FC  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1946  07FD  0825               	movf	??_init_lcd_4bit^(0+128),w
  1947  07FE  07A7               	addwf	init_lcd_4bit@i^(0+128),f
  1948  07FF  2FE4               	goto	L1
  1949  0800                     __end_of_init_lcd_4bit:	
  1950                           
  1951                           	psect	text6
  1952  0C0B                     __ptext6:	
  1953 ;; *************** function _USARTInit *****************
  1954 ;; Defined at:
  1955 ;;		line 32 in file "main.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  BaudRate        4   15[BANK1 ] long 
  1958 ;;  Mode            2   19[BANK1 ] int 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  BR              2   25[BANK1 ] int 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;		None               void
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0, pclath, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1970 ;;      Params:         0       0       6       0       0
  1971 ;;      Locals:         0       0       2       0       0
  1972 ;;      Temps:          0       0       4       0       0
  1973 ;;      Totals:         0       0      12       0       0
  1974 ;;Total ram usage:       12 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    8
  1977 ;; This function calls:
  1978 ;;		___aldiv
  1979 ;; This function is called by:
  1980 ;;		_inicialize
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           
  1985                           ;psect for function _USARTInit
  1986  0C0B                     _USARTInit:	
  1987                           
  1988                           ;main.c: 33: int BR = 0;
  1989                           
  1990                           ;incstack = 0
  1991 ;; hardware stack exceeded
  1992                           ; Regs used in _USARTInit: [wreg+status,2+status,0+pclath+cstack]
  1993  0C0B  1683               	bsf	3,5	;RP0=1, select bank1
  1994  0C0C  1303               	bcf	3,6	;RP1=0, select bank1
  1995  0C0D  01B9               	clrf	USARTInit@BR^(0+128)
  1996  0C0E  01BA               	clrf	(USARTInit@BR+1)^(0+128)
  1997                           
  1998                           ;main.c: 36: if (Mode == 0)
  1999  0C0F  0834               	movf	(USARTInit@Mode+1)^(0+128),w
  2000  0C10  0433               	iorwf	USARTInit@Mode^(0+128),w
  2001  0C11  1D03               	skipz
  2002  0C12  2C25               	goto	l2247
  2003                           
  2004                           ;main.c: 37: {
  2005                           ;main.c: 38: BR = (20000000 / (64 * BaudRate)) - 1;
  2006  0C13  082F               	movf	USARTInit@BaudRate^(0+128),w
  2007  0C14  00B5               	movwf	??_USARTInit^(0+128)
  2008  0C15  0830               	movf	(USARTInit@BaudRate+1)^(0+128),w
  2009  0C16  00B6               	movwf	(??_USARTInit^(0+128)+1)
  2010  0C17  0831               	movf	(USARTInit@BaudRate+2)^(0+128),w
  2011  0C18  00B7               	movwf	(??_USARTInit^(0+128)+2)
  2012  0C19  0832               	movf	(USARTInit@BaudRate+3)^(0+128),w
  2013  0C1A  00B8               	movwf	(??_USARTInit^(0+128)+3)
  2014  0C1B  3006               	movlw	6
  2015  0C1C                     u2695:	
  2016  0C1C  1003               	clrc
  2017  0C1D  0DB5               	rlf	??_USARTInit^(0+128),f
  2018  0C1E  0DB6               	rlf	(??_USARTInit^(0+128)+1),f
  2019  0C1F  0DB7               	rlf	(??_USARTInit^(0+128)+2),f
  2020  0C20  0DB8               	rlf	(??_USARTInit^(0+128)+3),f
  2021  0C21  3EFF               	addlw	-1
  2022  0C22  1D03               	skipz
  2023  0C23  2C1C               	goto	u2695
  2024  0C24  2C36               	goto	L2
  2025  0C25                     l2247:	
  2026                           ;main.c: 40: } else
  2027                           
  2028                           ;main.c: 39: SPBRG = BR;
  2029                           
  2030                           
  2031                           ;main.c: 41: {
  2032                           ;main.c: 42: BR = (20000000 / (16 * BaudRate)) - 1;
  2033  0C25  082F               	movf	USARTInit@BaudRate^(0+128),w
  2034  0C26  00B5               	movwf	??_USARTInit^(0+128)
  2035  0C27  0830               	movf	(USARTInit@BaudRate+1)^(0+128),w
  2036  0C28  00B6               	movwf	(??_USARTInit^(0+128)+1)
  2037  0C29  0831               	movf	(USARTInit@BaudRate+2)^(0+128),w
  2038  0C2A  00B7               	movwf	(??_USARTInit^(0+128)+2)
  2039  0C2B  0832               	movf	(USARTInit@BaudRate+3)^(0+128),w
  2040  0C2C  00B8               	movwf	(??_USARTInit^(0+128)+3)
  2041  0C2D  3004               	movlw	4
  2042  0C2E                     u2705:	
  2043  0C2E  1003               	clrc
  2044  0C2F  0DB5               	rlf	??_USARTInit^(0+128),f
  2045  0C30  0DB6               	rlf	(??_USARTInit^(0+128)+1),f
  2046  0C31  0DB7               	rlf	(??_USARTInit^(0+128)+2),f
  2047  0C32  0DB8               	rlf	(??_USARTInit^(0+128)+3),f
  2048  0C33  3EFF               	addlw	-1
  2049  0C34  1D03               	skipz
  2050  0C35  2C2E               	goto	u2705
  2051  0C36                     L2:	
  2052  0C36  0838               	movf	(??_USARTInit+3)^(0+128),w
  2053  0C37  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  2054  0C38  0837               	movf	(??_USARTInit+2)^(0+128),w
  2055  0C39  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  2056  0C3A  0836               	movf	(??_USARTInit+1)^(0+128),w
  2057  0C3B  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  2058  0C3C  0835               	movf	??_USARTInit^(0+128),w
  2059  0C3D  00A0               	movwf	___aldiv@divisor^(0+128)
  2060  0C3E  3001               	movlw	1
  2061  0C3F  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  2062  0C40  3031               	movlw	49
  2063  0C41  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  2064  0C42  302D               	movlw	45
  2065  0C43  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  2066  0C44  3000               	movlw	0
  2067  0C45  00A4               	movwf	___aldiv@dividend^(0+128)
  2068  0C46  120A  158A  26D8   	fcall	___aldiv
  2069  0C49  1683               	bsf	3,5	;RP0=1, select bank1
  2070  0C4A  1303               	bcf	3,6	;RP1=0, select bank1
  2071  0C4B  0820               	movf	?___aldiv^(0+128),w
  2072  0C4C  3EFF               	addlw	255
  2073  0C4D  00B9               	movwf	USARTInit@BR^(0+128)
  2074  0C4E  0821               	movf	(?___aldiv^(0+128)+1),w
  2075  0C4F  1803               	skipnc
  2076  0C50  3E01               	addlw	1
  2077  0C51  3EFF               	addlw	255
  2078  0C52  00BA               	movwf	(USARTInit@BR+1)^(0+128)
  2079                           
  2080                           ;main.c: 43: SPBRG = BR;
  2081  0C53  0839               	movf	USARTInit@BR^(0+128),w
  2082  0C54  0099               	movwf	25	;volatile
  2083                           
  2084                           ;main.c: 44: }
  2085                           ;main.c: 47: TXSTAbits.CSRC = 1;
  2086  0C55  1798               	bsf	24,7	;volatile
  2087                           
  2088                           ;main.c: 48: TXSTAbits.TX9 = 0;
  2089  0C56  1318               	bcf	24,6	;volatile
  2090                           
  2091                           ;main.c: 49: TXSTAbits.TXEN = 1;
  2092  0C57  1698               	bsf	24,5	;volatile
  2093                           
  2094                           ;main.c: 50: TXSTAbits.SYNC = 0;
  2095  0C58  1218               	bcf	24,4	;volatile
  2096                           
  2097                           ;main.c: 51: TXSTAbits.BRGH = Mode;
  2098  0C59  0833               	movf	USARTInit@Mode^(0+128),w
  2099  0C5A  1D03               	skipz
  2100  0C5B  1518               	bsf	24,2	;volatile
  2101  0C5C  1903               	skipnz
  2102  0C5D  1118               	bcf	24,2	;volatile
  2103                           
  2104                           ;main.c: 52: TXSTAbits.TRMT = 1;
  2105  0C5E  1498               	bsf	24,1	;volatile
  2106                           
  2107                           ;main.c: 53: TXSTAbits.TX9D = 0;
  2108  0C5F  1018               	bcf	24,0	;volatile
  2109                           
  2110                           ;main.c: 56: RCSTAbits.SPEN = 1;
  2111  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  2112  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  2113  0C62  1798               	bsf	24,7	;volatile
  2114                           
  2115                           ;main.c: 57: RCSTAbits.RX9 = 0;
  2116  0C63  1318               	bcf	24,6	;volatile
  2117                           
  2118                           ;main.c: 58: RCSTAbits.SREN = 0;
  2119  0C64  1298               	bcf	24,5	;volatile
  2120                           
  2121                           ;main.c: 59: RCSTAbits.CREN = 1;
  2122  0C65  1618               	bsf	24,4	;volatile
  2123                           
  2124                           ;main.c: 60: RCSTAbits.ADDEN = 0;
  2125  0C66  1198               	bcf	24,3	;volatile
  2126                           
  2127                           ;main.c: 61: RCSTAbits.FERR = 0;
  2128  0C67  1118               	bcf	24,2	;volatile
  2129                           
  2130                           ;main.c: 62: RCSTAbits.OERR = 0;
  2131  0C68  1098               	bcf	24,1	;volatile
  2132                           
  2133                           ;main.c: 63: RCSTAbits.RX9D = 0;
  2134  0C69  1018               	bcf	24,0	;volatile
  2135                           
  2136                           ;main.c: 66: PIE1bits.RCIE = 1;
  2137  0C6A  1683               	bsf	3,5	;RP0=1, select bank1
  2138  0C6B  1303               	bcf	3,6	;RP1=0, select bank1
  2139  0C6C  168C               	bsf	12,5	;volatile
  2140                           
  2141                           ;main.c: 67: PIR1bits.RCIF = 0;
  2142  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
  2144  0C6F  128C               	bcf	12,5	;volatile
  2145  0C70  0008               	return
  2146  0C71                     __end_of_USARTInit:	
  2147                           
  2148                           	psect	text7
  2149  0ED8                     __ptext7:	
  2150 ;; *************** function ___aldiv *****************
  2151 ;; Defined at:
  2152 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\aldiv.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  divisor         4    0[BANK1 ] long 
  2155 ;;  dividend        4    4[BANK1 ] long 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  quotient        4   11[BANK1 ] long 
  2158 ;;  sign            1   10[BANK1 ] unsigned char 
  2159 ;;  counter         1    9[BANK1 ] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  4    0[BANK1 ] long 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2169 ;;      Params:         0       0       8       0       0
  2170 ;;      Locals:         0       0       6       0       0
  2171 ;;      Temps:          0       0       1       0       0
  2172 ;;      Totals:         0       0      15       0       0
  2173 ;;Total ram usage:       15 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    7
  2176 ;; This function calls:
  2177 ;;		Nothing
  2178 ;; This function is called by:
  2179 ;;		_USARTInit
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           
  2184                           ;psect for function ___aldiv
  2185  0ED8                     ___aldiv:	
  2186                           
  2187                           ;incstack = 0
  2188 ;; hardware stack exceeded
  2189                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2190  0ED8  1683               	bsf	3,5	;RP0=1, select bank1
  2191  0ED9  1303               	bcf	3,6	;RP1=0, select bank1
  2192  0EDA  01AA               	clrf	___aldiv@sign^(0+128)
  2193  0EDB  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  2194  0EDC  2EEA               	goto	l446
  2195  0EDD  09A0               	comf	___aldiv@divisor^(0+128),f
  2196  0EDE  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  2197  0EDF  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  2198  0EE0  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  2199  0EE1  0AA0               	incf	___aldiv@divisor^(0+128),f
  2200  0EE2  1903               	skipnz
  2201  0EE3  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  2202  0EE4  1903               	skipnz
  2203  0EE5  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  2204  0EE6  1903               	skipnz
  2205  0EE7  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  2206  0EE8  01AA               	clrf	___aldiv@sign^(0+128)
  2207  0EE9  0AAA               	incf	___aldiv@sign^(0+128),f
  2208  0EEA                     l446:	
  2209  0EEA  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  2210  0EEB  2EFB               	goto	l2073
  2211  0EEC  09A4               	comf	___aldiv@dividend^(0+128),f
  2212  0EED  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  2213  0EEE  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  2214  0EEF  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  2215  0EF0  0AA4               	incf	___aldiv@dividend^(0+128),f
  2216  0EF1  1903               	skipnz
  2217  0EF2  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  2218  0EF3  1903               	skipnz
  2219  0EF4  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  2220  0EF5  1903               	skipnz
  2221  0EF6  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  2222  0EF7  3001               	movlw	1
  2223  0EF8  00A8               	movwf	??___aldiv^(0+128)
  2224  0EF9  0828               	movf	??___aldiv^(0+128),w
  2225  0EFA  06AA               	xorwf	___aldiv@sign^(0+128),f
  2226  0EFB                     l2073:	
  2227  0EFB  3000               	movlw	0
  2228  0EFC  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  2229  0EFD  3000               	movlw	0
  2230  0EFE  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  2231  0EFF  3000               	movlw	0
  2232  0F00  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  2233  0F01  3000               	movlw	0
  2234  0F02  00AB               	movwf	___aldiv@quotient^(0+128)
  2235  0F03  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2236  0F04  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  2237  0F05  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  2238  0F06  0420               	iorwf	___aldiv@divisor^(0+128),w
  2239  0F07  1903               	skipnz
  2240  0F08  2F50               	goto	l2095
  2241  0F09  01A9               	clrf	___aldiv@counter^(0+128)
  2242  0F0A  0AA9               	incf	___aldiv@counter^(0+128),f
  2243  0F0B                     l2081:	
  2244  0F0B  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  2245  0F0C  2F1B               	goto	l2083
  2246  0F0D  3001               	movlw	1
  2247  0F0E  00A8               	movwf	??___aldiv^(0+128)
  2248  0F0F                     u2235:	
  2249  0F0F  1003               	clrc
  2250  0F10  0DA0               	rlf	___aldiv@divisor^(0+128),f
  2251  0F11  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  2252  0F12  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  2253  0F13  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  2254  0F14  0BA8               	decfsz	??___aldiv^(0+128),f
  2255  0F15  2F0F               	goto	u2235
  2256  0F16  3001               	movlw	1
  2257  0F17  00A8               	movwf	??___aldiv^(0+128)
  2258  0F18  0828               	movf	??___aldiv^(0+128),w
  2259  0F19  07A9               	addwf	___aldiv@counter^(0+128),f
  2260  0F1A  2F0B               	goto	l2081
  2261  0F1B                     l2083:	
  2262  0F1B  3001               	movlw	1
  2263  0F1C  00A8               	movwf	??___aldiv^(0+128)
  2264  0F1D                     u2255:	
  2265  0F1D  1003               	clrc
  2266  0F1E  0DAB               	rlf	___aldiv@quotient^(0+128),f
  2267  0F1F  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  2268  0F20  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  2269  0F21  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  2270  0F22  0BA8               	decfsz	??___aldiv^(0+128),f
  2271  0F23  2F1D               	goto	u2255
  2272  0F24  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2273  0F25  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  2274  0F26  1D03               	skipz
  2275  0F27  2F32               	goto	u2265
  2276  0F28  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2277  0F29  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  2278  0F2A  1D03               	skipz
  2279  0F2B  2F32               	goto	u2265
  2280  0F2C  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2281  0F2D  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  2282  0F2E  1D03               	skipz
  2283  0F2F  2F32               	goto	u2265
  2284  0F30  0820               	movf	___aldiv@divisor^(0+128),w
  2285  0F31  0224               	subwf	___aldiv@dividend^(0+128),w
  2286  0F32                     u2265:	
  2287  0F32  1C03               	skipc
  2288  0F33  2F43               	goto	l2091
  2289  0F34  0820               	movf	___aldiv@divisor^(0+128),w
  2290  0F35  02A4               	subwf	___aldiv@dividend^(0+128),f
  2291  0F36  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2292  0F37  1C03               	skipc
  2293  0F38  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  2294  0F39  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  2295  0F3A  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2296  0F3B  1C03               	skipc
  2297  0F3C  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  2298  0F3D  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  2299  0F3E  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2300  0F3F  1C03               	skipc
  2301  0F40  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  2302  0F41  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  2303  0F42  142B               	bsf	___aldiv@quotient^(0+128),0
  2304  0F43                     l2091:	
  2305  0F43  3001               	movlw	1
  2306  0F44                     u2275:	
  2307  0F44  1003               	clrc
  2308  0F45  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  2309  0F46  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  2310  0F47  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  2311  0F48  0CA0               	rrf	___aldiv@divisor^(0+128),f
  2312  0F49  3EFF               	addlw	-1
  2313  0F4A  1D03               	skipz
  2314  0F4B  2F44               	goto	u2275
  2315  0F4C  3001               	movlw	1
  2316  0F4D  02A9               	subwf	___aldiv@counter^(0+128),f
  2317  0F4E  1D03               	btfss	3,2
  2318  0F4F  2F1B               	goto	l2083
  2319  0F50                     l2095:	
  2320  0F50  082A               	movf	___aldiv@sign^(0+128),w
  2321  0F51  1903               	btfsc	3,2
  2322  0F52  2F5E               	goto	l2099
  2323  0F53  09AB               	comf	___aldiv@quotient^(0+128),f
  2324  0F54  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  2325  0F55  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  2326  0F56  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  2327  0F57  0AAB               	incf	___aldiv@quotient^(0+128),f
  2328  0F58  1903               	skipnz
  2329  0F59  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  2330  0F5A  1903               	skipnz
  2331  0F5B  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  2332  0F5C  1903               	skipnz
  2333  0F5D  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  2334  0F5E                     l2099:	
  2335  0F5E  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  2336  0F5F  00A3               	movwf	(?___aldiv+3)^(0+128)
  2337  0F60  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  2338  0F61  00A2               	movwf	(?___aldiv+2)^(0+128)
  2339  0F62  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  2340  0F63  00A1               	movwf	(?___aldiv+1)^(0+128)
  2341  0F64  082B               	movf	___aldiv@quotient^(0+128),w
  2342  0F65  00A0               	movwf	?___aldiv^(0+128)
  2343  0F66  0008               	return
  2344  0F67                     __end_of___aldiv:	
  2345                           
  2346                           	psect	text8
  2347  09D6                     __ptext8:	
  2348 ;; *************** function _LCDClear *****************
  2349 ;; Defined at:
  2350 ;;		line 179 in file "lcd_4bit.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0, pclath, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2364 ;;      Params:         0       0       0       0       0
  2365 ;;      Locals:         0       0       0       0       0
  2366 ;;      Temps:          0       0       2       0       0
  2367 ;;      Totals:         0       0       2       0       0
  2368 ;;Total ram usage:        2 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    9
  2371 ;; This function calls:
  2372 ;;		_lcd_envia_byte
  2373 ;; This function is called by:
  2374 ;;		_inicialize
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _LCDClear
  2380  09D6                     _LCDClear:	
  2381                           
  2382                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2383                           
  2384                           ;incstack = 0
  2385 ;; hardware stack exceeded
  2386                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2387  09D6  1683               	bsf	3,5	;RP0=1, select bank1
  2388  09D7  1303               	bcf	3,6	;RP1=0, select bank1
  2389  09D8  01A2               	clrf	lcd_envia_byte@n^(0+128)
  2390  09D9  0AA2               	incf	lcd_envia_byte@n^(0+128),f
  2391  09DA  3000               	movlw	0
  2392  09DB  120A  158A  20EE  120A  158A  	fcall	_lcd_envia_byte
  2393                           
  2394                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2395  09E0  3041               	movlw	65
  2396  09E1  1683               	bsf	3,5	;RP0=1, select bank1
  2397  09E2  1303               	bcf	3,6	;RP1=0, select bank1
  2398  09E3  00A6               	movwf	(??_LCDClear^(0+128)+1)
  2399  09E4  30EE               	movlw	238
  2400  09E5  00A5               	movwf	??_LCDClear^(0+128)
  2401  09E6                     u3987:	
  2402  09E6  0BA5               	decfsz	??_LCDClear^(0+128),f
  2403  09E7  29E6               	goto	u3987
  2404  09E8  0BA6               	decfsz	(??_LCDClear^(0+128)+1),f
  2405  09E9  29E6               	goto	u3987
  2406  09EA  0000               	nop
  2407                           
  2408                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2409  09EB  300C               	movlw	12
  2410  09EC  1683               	bsf	3,5	;RP0=1, select bank1
  2411  09ED  1303               	bcf	3,6	;RP1=0, select bank1
  2412  09EE  00A5               	movwf	??_LCDClear^(0+128)
  2413  09EF  0825               	movf	??_LCDClear^(0+128),w
  2414  09F0  00A2               	movwf	lcd_envia_byte@n^(0+128)
  2415  09F1  3000               	movlw	0
  2416  09F2  120A  158A  20EE  120A  158A  	fcall	_lcd_envia_byte
  2417                           
  2418                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2419  09F7  30F9               	movlw	249
  2420  09F8  1683               	bsf	3,5	;RP0=1, select bank1
  2421  09F9  1303               	bcf	3,6	;RP1=0, select bank1
  2422  09FA  00A5               	movwf	??_LCDClear^(0+128)
  2423  09FB                     u3997:	
  2424  09FB  0000               	nop
  2425  09FC  0BA5               	decfsz	??_LCDClear^(0+128),f
  2426  09FD  29FB               	goto	u3997
  2427  09FE  29FF               	nop2	;nop
  2428  09FF  0000               	nop
  2429                           
  2430                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2431  0A00  3006               	movlw	6
  2432  0A01  1683               	bsf	3,5	;RP0=1, select bank1
  2433  0A02  1303               	bcf	3,6	;RP1=0, select bank1
  2434  0A03  00A5               	movwf	??_LCDClear^(0+128)
  2435  0A04  0825               	movf	??_LCDClear^(0+128),w
  2436  0A05  00A2               	movwf	lcd_envia_byte@n^(0+128)
  2437  0A06  3000               	movlw	0
  2438  0A07  120A  158A  20EE  120A  158A  	fcall	_lcd_envia_byte
  2439                           
  2440                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2441  0A0C  30F9               	movlw	249
  2442  0A0D  1683               	bsf	3,5	;RP0=1, select bank1
  2443  0A0E  1303               	bcf	3,6	;RP1=0, select bank1
  2444  0A0F  00A5               	movwf	??_LCDClear^(0+128)
  2445  0A10                     u4007:	
  2446  0A10  0000               	nop
  2447  0A11  0BA5               	decfsz	??_LCDClear^(0+128),f
  2448  0A12  2A10               	goto	u4007
  2449  0A13  2A14               	nop2	;nop
  2450  0A14  0000               	nop
  2451  0A15  0008               	return
  2452  0A16                     __end_of_LCDClear:	
  2453                           
  2454                           	psect	text9
  2455  08EE                     __ptext9:	
  2456 ;; *************** function _lcd_envia_byte *****************
  2457 ;; Defined at:
  2458 ;;		line 53 in file "lcd_4bit.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  address         1    wreg     unsigned char 
  2461 ;;  n               1    2[BANK1 ] unsigned char 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  address         1    4[BANK1 ] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;		None               void
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0, pclath, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2473 ;;      Params:         0       0       1       0       0
  2474 ;;      Locals:         0       0       1       0       0
  2475 ;;      Temps:          0       0       1       0       0
  2476 ;;      Totals:         0       0       3       0       0
  2477 ;;Total ram usage:        3 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    8
  2480 ;; This function calls:
  2481 ;;		_lcd_envia_nibble
  2482 ;; This function is called by:
  2483 ;;		_init_lcd_4bit
  2484 ;;		_lcd_gotoxy
  2485 ;;		_lcd_putc
  2486 ;;		_LCDClear
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function _lcd_envia_byte
  2492  08EE                     _lcd_envia_byte:	
  2493                           
  2494                           ;incstack = 0
  2495 ;; hardware stack exceeded
  2496                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2497                           ;lcd_envia_byte@address stored from wreg
  2498  08EE  1683               	bsf	3,5	;RP0=1, select bank1
  2499  08EF  1303               	bcf	3,6	;RP1=0, select bank1
  2500  08F0  00A4               	movwf	lcd_envia_byte@address^(0+128)
  2501                           
  2502                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2503  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  2504  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  2505  08F3  1286               	bcf	6,5	;volatile
  2506                           
  2507                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2508  08F4  3063               	movlw	99
  2509  08F5  1683               	bsf	3,5	;RP0=1, select bank1
  2510  08F6  1303               	bcf	3,6	;RP1=0, select bank1
  2511  08F7  00A3               	movwf	??_lcd_envia_byte^(0+128)
  2512  08F8                     u4017:	
  2513  08F8  0BA3               	decfsz	??_lcd_envia_byte^(0+128),f
  2514  08F9  28F8               	goto	u4017
  2515  08FA  28FB               	nop2	;nop
  2516                           
  2517                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2518  08FB  1683               	bsf	3,5	;RP0=1, select bank1
  2519  08FC  1303               	bcf	3,6	;RP1=0, select bank1
  2520  08FD  0824               	movf	lcd_envia_byte@address^(0+128),w
  2521  08FE  1903               	btfsc	3,2
  2522  08FF  2904               	goto	l205
  2523  0900  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0901  1303               	bcf	3,6	;RP1=0, select bank0
  2525  0902  1686               	bsf	6,5	;volatile
  2526  0903  2907               	goto	l206
  2527  0904                     l205:	
  2528                           
  2529                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2530  0904  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0905  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0906  1286               	bcf	6,5	;volatile
  2533  0907                     l206:	
  2534                           
  2535                           ;lcd_4bit.c: 61: _delay(1);
  2536  0907  0000               	nop
  2537                           
  2538                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2539  0908  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0909  1303               	bcf	3,6	;RP1=0, select bank0
  2541  090A  1206               	bcf	6,4	;volatile
  2542                           
  2543                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2544  090B  1683               	bsf	3,5	;RP0=1, select bank1
  2545  090C  1303               	bcf	3,6	;RP1=0, select bank1
  2546  090D  0822               	movf	lcd_envia_byte@n^(0+128),w
  2547  090E  00A3               	movwf	??_lcd_envia_byte^(0+128)
  2548  090F  3004               	movlw	4
  2549  0910                     u1975:	
  2550  0910  1003               	clrc
  2551  0911  0CA3               	rrf	??_lcd_envia_byte^(0+128),f
  2552  0912  3EFF               	addlw	-1
  2553  0913  1D03               	skipz
  2554  0914  2910               	goto	u1975
  2555  0915  0823               	movf	??_lcd_envia_byte^(0+128),w
  2556  0916  120A  158A  22F7  120A  158A  	fcall	_lcd_envia_nibble
  2557                           
  2558                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2559  091B  1683               	bsf	3,5	;RP0=1, select bank1
  2560  091C  1303               	bcf	3,6	;RP1=0, select bank1
  2561  091D  0822               	movf	lcd_envia_byte@n^(0+128),w
  2562  091E  390F               	andlw	15
  2563  091F  120A  158A  22F7   	fcall	_lcd_envia_nibble
  2564  0922  0008               	return
  2565  0923                     __end_of_lcd_envia_byte:	
  2566                           
  2567                           	psect	text10
  2568  0AF7                     __ptext10:	
  2569 ;; *************** function _lcd_envia_nibble *****************
  2570 ;; Defined at:
  2571 ;;		line 39 in file "lcd_4bit.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  n               1    wreg     unsigned char 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  n               1    1[BANK1 ] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;		None               void
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2585 ;;      Params:         0       0       0       0       0
  2586 ;;      Locals:         0       0       1       0       0
  2587 ;;      Temps:          0       0       1       0       0
  2588 ;;      Totals:         0       0       2       0       0
  2589 ;;Total ram usage:        2 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    7
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_init_lcd_4bit
  2596 ;;		_lcd_envia_byte
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           
  2601                           ;psect for function _lcd_envia_nibble
  2602  0AF7                     _lcd_envia_nibble:	
  2603                           
  2604                           ;incstack = 0
  2605 ;; hardware stack exceeded
  2606                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2607                           ;lcd_envia_nibble@n stored from wreg
  2608  0AF7  1683               	bsf	3,5	;RP0=1, select bank1
  2609  0AF8  1303               	bcf	3,6	;RP1=0, select bank1
  2610  0AF9  00A1               	movwf	lcd_envia_nibble@n^(0+128)
  2611                           
  2612                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2613  0AFA  3000               	movlw	0
  2614  0AFB  1821               	btfsc	lcd_envia_nibble@n^(0+128),0
  2615  0AFC  3001               	movlw	1
  2616  0AFD  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2617  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0B00  0806               	movf	6,w	;volatile
  2620  0B01  1683               	bsf	3,5	;RP0=1, select bank1
  2621  0B02  1303               	bcf	3,6	;RP1=0, select bank1
  2622  0B03  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2623  0B04  39FE               	andlw	-2
  2624  0B05  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2625  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  2627  0B08  0086               	movwf	6	;volatile
  2628                           
  2629                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2630  0B09  3000               	movlw	0
  2631  0B0A  1683               	bsf	3,5	;RP0=1, select bank1
  2632  0B0B  1303               	bcf	3,6	;RP1=0, select bank1
  2633  0B0C  18A1               	btfsc	lcd_envia_nibble@n^(0+128),1
  2634  0B0D  3001               	movlw	1
  2635  0B0E  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2636  0B0F  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2637  0B10  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0B11  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0B12  0806               	movf	6,w	;volatile
  2640  0B13  1683               	bsf	3,5	;RP0=1, select bank1
  2641  0B14  1303               	bcf	3,6	;RP1=0, select bank1
  2642  0B15  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2643  0B16  39FD               	andlw	-3
  2644  0B17  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2645  0B18  1283               	bcf	3,5	;RP0=0, select bank0
  2646  0B19  1303               	bcf	3,6	;RP1=0, select bank0
  2647  0B1A  0086               	movwf	6	;volatile
  2648                           
  2649                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2650  0B1B  3000               	movlw	0
  2651  0B1C  1683               	bsf	3,5	;RP0=1, select bank1
  2652  0B1D  1303               	bcf	3,6	;RP1=0, select bank1
  2653  0B1E  1921               	btfsc	lcd_envia_nibble@n^(0+128),2
  2654  0B1F  3001               	movlw	1
  2655  0B20  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2656  0B21  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2657  0B22  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2658  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0B25  0806               	movf	6,w	;volatile
  2661  0B26  1683               	bsf	3,5	;RP0=1, select bank1
  2662  0B27  1303               	bcf	3,6	;RP1=0, select bank1
  2663  0B28  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2664  0B29  39FB               	andlw	-5
  2665  0B2A  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2666  0B2B  1283               	bcf	3,5	;RP0=0, select bank0
  2667  0B2C  1303               	bcf	3,6	;RP1=0, select bank0
  2668  0B2D  0086               	movwf	6	;volatile
  2669                           
  2670                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2671  0B2E  3000               	movlw	0
  2672  0B2F  1683               	bsf	3,5	;RP0=1, select bank1
  2673  0B30  1303               	bcf	3,6	;RP1=0, select bank1
  2674  0B31  19A1               	btfsc	lcd_envia_nibble@n^(0+128),3
  2675  0B32  3001               	movlw	1
  2676  0B33  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2677  0B34  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2678  0B35  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2679  0B36  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2680  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0B39  0806               	movf	6,w	;volatile
  2683  0B3A  1683               	bsf	3,5	;RP0=1, select bank1
  2684  0B3B  1303               	bcf	3,6	;RP1=0, select bank1
  2685  0B3C  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2686  0B3D  39F7               	andlw	-9
  2687  0B3E  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2688  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0B40  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0B41  0086               	movwf	6	;volatile
  2691                           
  2692                           ;lcd_4bit.c: 46: _delay(1);
  2693  0B42  0000               	nop
  2694                           
  2695                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2696  0B43  1283               	bcf	3,5	;RP0=0, select bank0
  2697  0B44  1303               	bcf	3,6	;RP1=0, select bank0
  2698  0B45  1606               	bsf	6,4	;volatile
  2699                           
  2700                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2701  0B46  3003               	movlw	3
  2702  0B47  1683               	bsf	3,5	;RP0=1, select bank1
  2703  0B48  1303               	bcf	3,6	;RP1=0, select bank1
  2704  0B49  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2705  0B4A                     u4027:	
  2706  0B4A  0BA0               	decfsz	??_lcd_envia_nibble^(0+128),f
  2707  0B4B  2B4A               	goto	u4027
  2708                           
  2709                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2710  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0B4E  1206               	bcf	6,4	;volatile
  2713  0B4F  0008               	return
  2714  0B50                     __end_of_lcd_envia_nibble:	
  2715                           
  2716                           	psect	text11
  2717  16A0                     __ptext11:	
  2718 ;; *************** function _ADCInit *****************
  2719 ;; Defined at:
  2720 ;;		line 214 in file "main.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;		None
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;		None
  2725 ;; Return value:  Size  Location     Type
  2726 ;;		None               void
  2727 ;; Registers used:
  2728 ;;		None
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2734 ;;      Params:         0       0       0       0       0
  2735 ;;      Locals:         0       0       0       0       0
  2736 ;;      Temps:          0       0       0       0       0
  2737 ;;      Totals:         0       0       0       0       0
  2738 ;;Total ram usage:        0 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    7
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_inicialize
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           
  2749                           ;psect for function _ADCInit
  2750  16A0                     _ADCInit:	
  2751                           
  2752                           ;main.c: 216: ADCON1bits.ADFM = 1;
  2753                           
  2754                           ;incstack = 0
  2755 ;; hardware stack exceeded
  2756                           ; Regs used in _ADCInit: []
  2757  16A0  1683               	bsf	3,5	;RP0=1, select bank1
  2758  16A1  1303               	bcf	3,6	;RP1=0, select bank1
  2759  16A2  179F               	bsf	31,7	;volatile
  2760                           
  2761                           ;main.c: 217: ADCON1bits.PCFG3 = 0;
  2762  16A3  119F               	bcf	31,3	;volatile
  2763                           
  2764                           ;main.c: 218: ADCON1bits.PCFG2 = 0;
  2765  16A4  111F               	bcf	31,2	;volatile
  2766                           
  2767                           ;main.c: 219: ADCON1bits.PCFG1 = 0;
  2768  16A5  109F               	bcf	31,1	;volatile
  2769                           
  2770                           ;main.c: 220: ADCON1bits.PCFG0 = 0;
  2771  16A6  101F               	bcf	31,0	;volatile
  2772                           
  2773                           ;main.c: 223: ADCON0bits.ADCS1 = 1;
  2774  16A7  1283               	bcf	3,5	;RP0=0, select bank0
  2775  16A8  1303               	bcf	3,6	;RP1=0, select bank0
  2776  16A9  179F               	bsf	31,7	;volatile
  2777                           
  2778                           ;main.c: 224: ADCON0bits.ADCS0 = 0;
  2779  16AA  131F               	bcf	31,6	;volatile
  2780                           
  2781                           ;main.c: 225: ADCON0bits.ADON = 1;
  2782  16AB  141F               	bsf	31,0	;volatile
  2783                           
  2784                           ;main.c: 228: PIE1bits.ADIE = 1;
  2785  16AC  1683               	bsf	3,5	;RP0=1, select bank1
  2786  16AD  1303               	bcf	3,6	;RP1=0, select bank1
  2787  16AE  170C               	bsf	12,6	;volatile
  2788                           
  2789                           ;main.c: 229: PIR1bits.ADIF = 0;
  2790  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  2791  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  2792  16B1  130C               	bcf	12,6	;volatile
  2793  16B2  0008               	return
  2794  16B3                     __end_of_ADCInit:	
  2795                           
  2796                           	psect	text12
  2797  0CD9                     __ptext12:	
  2798 ;; *************** function _ativar *****************
  2799 ;; Defined at:
  2800 ;;		line 286 in file "main.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;		None               void
  2807 ;; Registers used:
  2808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2814 ;;      Params:         0       0       0       0       0
  2815 ;;      Locals:         0       0       0       0       0
  2816 ;;      Temps:          0       0       3       0       0
  2817 ;;      Totals:         0       0       3       0       0
  2818 ;;Total ram usage:        3 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    9
  2821 ;; This function calls:
  2822 ;;		_ADCRead
  2823 ;;		_Ativar
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           
  2830                           ;psect for function _ativar
  2831  0CD9                     _ativar:	
  2832                           
  2833                           ;main.c: 287: if (PORTCbits.RC3 == 1) {
  2834                           
  2835                           ;incstack = 0
  2836 ;; hardware stack exceeded
  2837                           ; Regs used in _ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2838  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  2839  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  2840  0CDB  1D87               	btfss	7,3	;volatile
  2841  0CDC  2D13               	goto	l2791
  2842                           
  2843                           ;main.c: 288: _delay((unsigned long)((300)*(20000000/4000.0)));
  2844  0CDD  3008               	movlw	8
  2845  0CDE  1683               	bsf	3,5	;RP0=1, select bank1
  2846  0CDF  1303               	bcf	3,6	;RP1=0, select bank1
  2847  0CE0  00A5               	movwf	(??_ativar^(0+128)+2)
  2848  0CE1  309D               	movlw	157
  2849  0CE2  00A4               	movwf	(??_ativar^(0+128)+1)
  2850  0CE3  300B               	movlw	11
  2851  0CE4  00A3               	movwf	??_ativar^(0+128)
  2852  0CE5                     u4037:	
  2853  0CE5  0BA3               	decfsz	??_ativar^(0+128),f
  2854  0CE6  2CE5               	goto	u4037
  2855  0CE7  0BA4               	decfsz	(??_ativar^(0+128)+1),f
  2856  0CE8  2CE5               	goto	u4037
  2857  0CE9  0BA5               	decfsz	(??_ativar^(0+128)+2),f
  2858  0CEA  2CE5               	goto	u4037
  2859  0CEB  2CEC               	nop2
  2860                           
  2861                           ;main.c: 289: if (flag_Start == 0) {
  2862  0CEC  1683               	bsf	3,5	;RP0=1, select bank1
  2863  0CED  1303               	bcf	3,6	;RP1=0, select bank1
  2864  0CEE  0841               	movf	(_flag_Start+1)^(0+128),w
  2865  0CEF  0440               	iorwf	_flag_Start^(0+128),w
  2866  0CF0  1D03               	skipz
  2867  0CF1  2D05               	goto	l2787
  2868                           
  2869                           ;main.c: 290: Ativar(LIGAR);
  2870  0CF2  3030               	movlw	_LIGAR-__stringbase
  2871  0CF3  0084               	movwf	4
  2872  0CF4  120A  158A  200A  120A  158A  	fcall	stringdir
  2873  0CF9  120A  118A  26F5  120A  158A  	fcall	_Ativar
  2874                           
  2875                           ;main.c: 291: flag_Start = 1;
  2876  0CFE  3001               	movlw	1
  2877  0CFF  1683               	bsf	3,5	;RP0=1, select bank1
  2878  0D00  1303               	bcf	3,6	;RP1=0, select bank1
  2879  0D01  00C0               	movwf	_flag_Start^(0+128)
  2880  0D02  3000               	movlw	0
  2881  0D03  00C1               	movwf	(_flag_Start^(0+128)+1)
  2882                           
  2883                           ;main.c: 292: } else {
  2884  0D04  2D13               	goto	l2791
  2885  0D05                     l2787:	
  2886                           
  2887                           ;main.c: 293: flag_Start = 0;
  2888  0D05  01C0               	clrf	_flag_Start^(0+128)
  2889  0D06  01C1               	clrf	(_flag_Start+1)^(0+128)
  2890                           
  2891                           ;main.c: 294: Ativar(DESLIGAR);
  2892  0D07  302D               	movlw	_DESLIGAR-__stringbase
  2893  0D08  0084               	movwf	4
  2894  0D09  120A  158A  200A  120A  158A  	fcall	stringdir
  2895  0D0E  120A  118A  26F5  120A  158A  	fcall	_Ativar
  2896  0D13                     l2791:	
  2897                           
  2898                           ;main.c: 295: }
  2899                           ;main.c: 296: }
  2900                           ;main.c: 298: if (flag_Start == 1) {
  2901  0D13  3001               	movlw	1
  2902  0D14  1683               	bsf	3,5	;RP0=1, select bank1
  2903  0D15  1303               	bcf	3,6	;RP1=0, select bank1
  2904  0D16  0640               	xorwf	_flag_Start^(0+128),w
  2905  0D17  0441               	iorwf	(_flag_Start+1)^(0+128),w
  2906  0D18  1D03               	skipz
  2907  0D19  0008               	return
  2908                           
  2909                           ;main.c: 299: ADCRead(0);
  2910  0D1A  3000               	movlw	0
  2911  0D1B  00A0               	movwf	ADCRead@ch^(0+128)
  2912  0D1C  3000               	movlw	0
  2913  0D1D  00A1               	movwf	(ADCRead@ch^(0+128)+1)
  2914  0D1E  120A  158A  2090  120A  158A  	fcall	_ADCRead
  2915                           
  2916                           ;main.c: 300: _delay((unsigned long)((300)*(20000000/4000.0)));
  2917  0D23  3008               	movlw	8
  2918  0D24  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0D25  1303               	bcf	3,6	;RP1=0, select bank1
  2920  0D26  00A5               	movwf	(??_ativar^(0+128)+2)
  2921  0D27  309D               	movlw	157
  2922  0D28  00A4               	movwf	(??_ativar^(0+128)+1)
  2923  0D29  300B               	movlw	11
  2924  0D2A  00A3               	movwf	??_ativar^(0+128)
  2925  0D2B                     u4047:	
  2926  0D2B  0BA3               	decfsz	??_ativar^(0+128),f
  2927  0D2C  2D2B               	goto	u4047
  2928  0D2D  0BA4               	decfsz	(??_ativar^(0+128)+1),f
  2929  0D2E  2D2B               	goto	u4047
  2930  0D2F  0BA5               	decfsz	(??_ativar^(0+128)+2),f
  2931  0D30  2D2B               	goto	u4047
  2932  0D31  2D32               	nop2
  2933                           
  2934                           ;main.c: 301: ADCRead(1);
  2935  0D32  3001               	movlw	1
  2936  0D33  1683               	bsf	3,5	;RP0=1, select bank1
  2937  0D34  1303               	bcf	3,6	;RP1=0, select bank1
  2938  0D35  00A0               	movwf	ADCRead@ch^(0+128)
  2939  0D36  3000               	movlw	0
  2940  0D37  00A1               	movwf	(ADCRead@ch^(0+128)+1)
  2941  0D38  120A  158A  2090  120A  158A  	fcall	_ADCRead
  2942                           
  2943                           ;main.c: 302: _delay((unsigned long)((300)*(20000000/4000.0)));
  2944  0D3D  3008               	movlw	8
  2945  0D3E  1683               	bsf	3,5	;RP0=1, select bank1
  2946  0D3F  1303               	bcf	3,6	;RP1=0, select bank1
  2947  0D40  00A5               	movwf	(??_ativar^(0+128)+2)
  2948  0D41  309D               	movlw	157
  2949  0D42  00A4               	movwf	(??_ativar^(0+128)+1)
  2950  0D43  300B               	movlw	11
  2951  0D44  00A3               	movwf	??_ativar^(0+128)
  2952  0D45                     u4057:	
  2953  0D45  0BA3               	decfsz	??_ativar^(0+128),f
  2954  0D46  2D45               	goto	u4057
  2955  0D47  0BA4               	decfsz	(??_ativar^(0+128)+1),f
  2956  0D48  2D45               	goto	u4057
  2957  0D49  0BA5               	decfsz	(??_ativar^(0+128)+2),f
  2958  0D4A  2D45               	goto	u4057
  2959  0D4B  2D4C               	nop2
  2960  0D4C  0008               	return
  2961  0D4D                     __end_of_ativar:	
  2962                           
  2963                           	psect	text13
  2964  06F5                     __ptext13:	
  2965 ;; *************** function _Ativar *****************
  2966 ;; Defined at:
  2967 ;;		line 115 in file "main.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  comando         1    wreg     unsigned char 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  comando         1    2[BANK1 ] unsigned char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;		None               void
  2974 ;; Registers used:
  2975 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2981 ;;      Params:         0       0       0       0       0
  2982 ;;      Locals:         0       0       1       0       0
  2983 ;;      Temps:          0       0       1       0       0
  2984 ;;      Totals:         0       0       2       0       0
  2985 ;;Total ram usage:        2 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    8
  2988 ;; This function calls:
  2989 ;;		_USARTWriteChar
  2990 ;; This function is called by:
  2991 ;;		_ativar
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           
  2996                           ;psect for function _Ativar
  2997  06F5                     _Ativar:	
  2998                           
  2999                           ;incstack = 0
  3000 ;; hardware stack exceeded
  3001                           ; Regs used in _Ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3002                           ;Ativar@comando stored from wreg
  3003  06F5  1683               	bsf	3,5	;RP0=1, select bank1
  3004  06F6  1303               	bcf	3,6	;RP1=0, select bank1
  3005  06F7  00A2               	movwf	Ativar@comando^(0+128)
  3006                           
  3007                           ;main.c: 117: if (comando == LIGAR_BOMBA) {
  3008  06F8  3031               	movlw	_LIGAR_BOMBA-__stringbase
  3009  06F9  0084               	movwf	4
  3010  06FA  120A  158A  200A  120A  118A  	fcall	stringdir
  3011  06FF  00A1               	movwf	??_Ativar^(0+128)
  3012  0700  0822               	movf	Ativar@comando^(0+128),w
  3013  0701  0621               	xorwf	??_Ativar^(0+128),w
  3014  0702  1D03               	skipz
  3015  0703  2F13               	goto	l2299
  3016                           
  3017                           ;main.c: 118: PORTDbits.RD2 = 0;
  3018  0704  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0705  1303               	bcf	3,6	;RP1=0, select bank0
  3020  0706  1108               	bcf	8,2	;volatile
  3021                           
  3022                           ;main.c: 119: PORTDbits.RD3 = 1;
  3023  0707  1588               	bsf	8,3	;volatile
  3024                           
  3025                           ;main.c: 120: USARTWriteChar(LIGAR_BOMBA);
  3026  0708  3031               	movlw	_LIGAR_BOMBA-__stringbase
  3027  0709  0084               	movwf	4
  3028  070A  120A  158A  200A  120A  118A  	fcall	stringdir
  3029  070F  160A  118A  2664   	fcall	_USARTWriteChar
  3030                           
  3031                           ;main.c: 121: } else if (comando == DESLIGAR_BOMBA) {
  3032  0712  0008               	return
  3033  0713                     l2299:	
  3034  0713  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  3035  0714  0084               	movwf	4
  3036  0715  120A  158A  200A  120A  118A  	fcall	stringdir
  3037  071A  1683               	bsf	3,5	;RP0=1, select bank1
  3038  071B  1303               	bcf	3,6	;RP1=0, select bank1
  3039  071C  00A1               	movwf	??_Ativar^(0+128)
  3040  071D  0822               	movf	Ativar@comando^(0+128),w
  3041  071E  0621               	xorwf	??_Ativar^(0+128),w
  3042  071F  1D03               	skipz
  3043  0720  2F30               	goto	l2305
  3044                           
  3045                           ;main.c: 122: PORTDbits.RD2 = 1;
  3046  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0723  1508               	bsf	8,2	;volatile
  3049                           
  3050                           ;main.c: 123: PORTDbits.RD3 = 0;
  3051  0724  1188               	bcf	8,3	;volatile
  3052                           
  3053                           ;main.c: 124: USARTWriteChar(DESLIGAR_BOMBA);
  3054  0725  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  3055  0726  0084               	movwf	4
  3056  0727  120A  158A  200A  120A  118A  	fcall	stringdir
  3057  072C  160A  118A  2664   	fcall	_USARTWriteChar
  3058                           
  3059                           ;main.c: 125: } else if (comando == LIGAR_MOTOR) {
  3060  072F  0008               	return
  3061  0730                     l2305:	
  3062  0730  3032               	movlw	_LIGAR_MOTOR-__stringbase
  3063  0731  0084               	movwf	4
  3064  0732  120A  158A  200A  120A  118A  	fcall	stringdir
  3065  0737  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0738  1303               	bcf	3,6	;RP1=0, select bank1
  3067  0739  00A1               	movwf	??_Ativar^(0+128)
  3068  073A  0822               	movf	Ativar@comando^(0+128),w
  3069  073B  0621               	xorwf	??_Ativar^(0+128),w
  3070  073C  1D03               	skipz
  3071  073D  2F4C               	goto	l2311
  3072                           
  3073                           ;main.c: 126: PORTDbits.RD4 = 1;
  3074  073E  1283               	bcf	3,5	;RP0=0, select bank0
  3075  073F  1303               	bcf	3,6	;RP1=0, select bank0
  3076  0740  1608               	bsf	8,4	;volatile
  3077                           
  3078                           ;main.c: 127: USARTWriteChar(LIGAR_MOTOR);
  3079  0741  3032               	movlw	_LIGAR_MOTOR-__stringbase
  3080  0742  0084               	movwf	4
  3081  0743  120A  158A  200A  120A  118A  	fcall	stringdir
  3082  0748  160A  118A  2664   	fcall	_USARTWriteChar
  3083                           
  3084                           ;main.c: 128: } else if (comando == DESLIGAR_MOTOR) {
  3085  074B  0008               	return
  3086  074C                     l2311:	
  3087  074C  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  3088  074D  0084               	movwf	4
  3089  074E  120A  158A  200A  120A  118A  	fcall	stringdir
  3090  0753  1683               	bsf	3,5	;RP0=1, select bank1
  3091  0754  1303               	bcf	3,6	;RP1=0, select bank1
  3092  0755  00A1               	movwf	??_Ativar^(0+128)
  3093  0756  0822               	movf	Ativar@comando^(0+128),w
  3094  0757  0621               	xorwf	??_Ativar^(0+128),w
  3095  0758  1D03               	skipz
  3096  0759  2F68               	goto	l2317
  3097                           
  3098                           ;main.c: 129: PORTDbits.RD4 = 0;
  3099  075A  1283               	bcf	3,5	;RP0=0, select bank0
  3100  075B  1303               	bcf	3,6	;RP1=0, select bank0
  3101  075C  1208               	bcf	8,4	;volatile
  3102                           
  3103                           ;main.c: 130: USARTWriteChar(DESLIGAR_MOTOR);
  3104  075D  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  3105  075E  0084               	movwf	4
  3106  075F  120A  158A  200A  120A  118A  	fcall	stringdir
  3107  0764  160A  118A  2664   	fcall	_USARTWriteChar
  3108                           
  3109                           ;main.c: 131: } else if (comando == LIGAR) {
  3110  0767  0008               	return
  3111  0768                     l2317:	
  3112  0768  3030               	movlw	_LIGAR-__stringbase
  3113  0769  0084               	movwf	4
  3114  076A  120A  158A  200A  120A  118A  	fcall	stringdir
  3115  076F  1683               	bsf	3,5	;RP0=1, select bank1
  3116  0770  1303               	bcf	3,6	;RP1=0, select bank1
  3117  0771  00A1               	movwf	??_Ativar^(0+128)
  3118  0772  0822               	movf	Ativar@comando^(0+128),w
  3119  0773  0621               	xorwf	??_Ativar^(0+128),w
  3120  0774  1D03               	skipz
  3121  0775  2F81               	goto	l2321
  3122                           
  3123                           ;main.c: 132: USARTWriteChar(LIGAR);
  3124  0776  3030               	movlw	_LIGAR-__stringbase
  3125  0777  0084               	movwf	4
  3126  0778  120A  158A  200A  120A  118A  	fcall	stringdir
  3127  077D  160A  118A  2664   	fcall	_USARTWriteChar
  3128                           
  3129                           ;main.c: 133: } else if (comando == DESLIGAR) {
  3130  0780  0008               	return
  3131  0781                     l2321:	
  3132  0781  302D               	movlw	_DESLIGAR-__stringbase
  3133  0782  0084               	movwf	4
  3134  0783  120A  158A  200A  120A  118A  	fcall	stringdir
  3135  0788  1683               	bsf	3,5	;RP0=1, select bank1
  3136  0789  1303               	bcf	3,6	;RP1=0, select bank1
  3137  078A  00A1               	movwf	??_Ativar^(0+128)
  3138  078B  0822               	movf	Ativar@comando^(0+128),w
  3139  078C  0621               	xorwf	??_Ativar^(0+128),w
  3140  078D  1D03               	skipz
  3141  078E  0008               	return
  3142                           
  3143                           ;main.c: 134: USARTWriteChar(DESLIGAR);
  3144  078F  302D               	movlw	_DESLIGAR-__stringbase
  3145  0790  0084               	movwf	4
  3146  0791  120A  158A  200A  120A  118A  	fcall	stringdir
  3147  0796  160A  118A  2664   	fcall	_USARTWriteChar
  3148  0799  0008               	return
  3149  079A                     __end_of_Ativar:	
  3150                           
  3151                           	psect	text14
  3152  1664                     __ptext14:	
  3153 ;; *************** function _USARTWriteChar *****************
  3154 ;; Defined at:
  3155 ;;		line 72 in file "main.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  USARTData       1    wreg     unsigned char 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  USARTData       1    0[BANK1 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;		None               void
  3162 ;; Registers used:
  3163 ;;		wreg
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3169 ;;      Params:         0       0       0       0       0
  3170 ;;      Locals:         0       0       1       0       0
  3171 ;;      Temps:          0       0       0       0       0
  3172 ;;      Totals:         0       0       1       0       0
  3173 ;;Total ram usage:        1 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    7
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_Ativar
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           
  3184                           ;psect for function _USARTWriteChar
  3185  1664                     _USARTWriteChar:	
  3186                           
  3187                           ;incstack = 0
  3188 ;; hardware stack exceeded
  3189                           ; Regs used in _USARTWriteChar: [wreg]
  3190                           ;USARTWriteChar@USARTData stored from wreg
  3191  1664  1683               	bsf	3,5	;RP0=1, select bank1
  3192  1665  1303               	bcf	3,6	;RP1=0, select bank1
  3193  1666  00A0               	movwf	USARTWriteChar@USARTData^(0+128)
  3194  1667                     l88:	
  3195                           ;main.c: 73: while (!PIR1bits.TXIF);
  3196                           
  3197  1667  1283               	bcf	3,5	;RP0=0, select bank0
  3198  1668  1E0C               	btfss	12,4	;volatile
  3199  1669  2E67               	goto	l88
  3200                           
  3201                           ;main.c: 74: TXREG = USARTData;
  3202  166A  1683               	bsf	3,5	;RP0=1, select bank1
  3203  166B  1303               	bcf	3,6	;RP1=0, select bank1
  3204  166C  0820               	movf	USARTWriteChar@USARTData^(0+128),w
  3205  166D  1283               	bcf	3,5	;RP0=0, select bank0
  3206  166E  1303               	bcf	3,6	;RP1=0, select bank0
  3207  166F  0099               	movwf	25	;volatile
  3208  1670  0008               	return
  3209  1671                     __end_of_USARTWriteChar:	
  3210                           
  3211                           	psect	text15
  3212  0890                     __ptext15:	
  3213 ;; *************** function _ADCRead *****************
  3214 ;; Defined at:
  3215 ;;		line 233 in file "main.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  ch              2    0[BANK1 ] int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;		None               void
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         0       0       2       0       0
  3230 ;;      Locals:         0       0       0       0       0
  3231 ;;      Temps:          0       0       1       0       0
  3232 ;;      Totals:         0       0       3       0       0
  3233 ;;Total ram usage:        3 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    7
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_ativar
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _ADCRead
  3245  0890                     _ADCRead:	
  3246                           
  3247                           ;main.c: 235: ADCON0bits.CHS = ch;
  3248                           
  3249                           ;incstack = 0
  3250 ;; hardware stack exceeded
  3251                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  3252  0890  1683               	bsf	3,5	;RP0=1, select bank1
  3253  0891  1303               	bcf	3,6	;RP1=0, select bank1
  3254  0892  0820               	movf	ADCRead@ch^(0+128),w
  3255  0893  00A2               	movwf	??_ADCRead^(0+128)
  3256  0894  0DA2               	rlf	??_ADCRead^(0+128),f
  3257  0895  0DA2               	rlf	??_ADCRead^(0+128),f
  3258  0896  0DA2               	rlf	??_ADCRead^(0+128),f
  3259  0897  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0898  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0899  081F               	movf	31,w	;volatile
  3262  089A  1683               	bsf	3,5	;RP0=1, select bank1
  3263  089B  1303               	bcf	3,6	;RP1=0, select bank1
  3264  089C  0622               	xorwf	??_ADCRead^(0+128),w
  3265  089D  39C7               	andlw	-57
  3266  089E  0622               	xorwf	??_ADCRead^(0+128),w
  3267  089F  1283               	bcf	3,5	;RP0=0, select bank0
  3268  08A0  1303               	bcf	3,6	;RP1=0, select bank0
  3269  08A1  009F               	movwf	31	;volatile
  3270                           
  3271                           ;main.c: 236: recipiente = ch;
  3272  08A2  1683               	bsf	3,5	;RP0=1, select bank1
  3273  08A3  1303               	bcf	3,6	;RP1=0, select bank1
  3274  08A4  0821               	movf	(ADCRead@ch+1)^(0+128),w
  3275  08A5  1283               	bcf	3,5	;RP0=0, select bank0
  3276  08A6  1303               	bcf	3,6	;RP1=0, select bank0
  3277  08A7  01EC               	clrf	_recipiente+1
  3278  08A8  07EC               	addwf	_recipiente+1,f
  3279  08A9  1683               	bsf	3,5	;RP0=1, select bank1
  3280  08AA  1303               	bcf	3,6	;RP1=0, select bank1
  3281  08AB  0820               	movf	ADCRead@ch^(0+128),w
  3282  08AC  1283               	bcf	3,5	;RP0=0, select bank0
  3283  08AD  1303               	bcf	3,6	;RP1=0, select bank0
  3284  08AE  01EB               	clrf	_recipiente
  3285  08AF  07EB               	addwf	_recipiente,f
  3286                           
  3287                           ;main.c: 237: _delay((unsigned long)((25)*(20000000/4000000.0)));
  3288  08B0  3029               	movlw	41
  3289  08B1  1683               	bsf	3,5	;RP0=1, select bank1
  3290  08B2  1303               	bcf	3,6	;RP1=0, select bank1
  3291  08B3  00A2               	movwf	??_ADCRead^(0+128)
  3292  08B4                     u4067:	
  3293  08B4  0BA2               	decfsz	??_ADCRead^(0+128),f
  3294  08B5  28B4               	goto	u4067
  3295  08B6  0000               	nop
  3296                           
  3297                           ;main.c: 238: ADCON0bits.GO = 1;
  3298  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  3299  08B8  1303               	bcf	3,6	;RP1=0, select bank0
  3300  08B9  151F               	bsf	31,2	;volatile
  3301  08BA                     l150:	
  3302                           ;main.c: 239: while (ADCON0bits.GO_DONE);
  3303                           
  3304  08BA  1D1F               	btfss	31,2	;volatile
  3305  08BB  0008               	return
  3306  08BC  28BA               	goto	l150
  3307  08BD                     __end_of_ADCRead:	
  3308                           
  3309                           	psect	text16
  3310  027B                     __ptext16:	
  3311 ;; *************** function _ISR *****************
  3312 ;; Defined at:
  3313 ;;		line 244 in file "main.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  input2          3   67[BANK0 ] float 
  3318 ;;  input           3   64[BANK0 ] float 
  3319 ;;  pre             3   57[BANK0 ] float 
  3320 ;;  status          2   62[BANK0 ] int 
  3321 ;;  preint          2   60[BANK0 ] int 
  3322 ;;  per             1   70[BANK0 ] PTR unsigned char 
  3323 ;;		 -> ftoa@buf(17), 
  3324 ;;  buf             1   56[BANK0 ] PTR unsigned char 
  3325 ;;		 -> ftoa@buf(17), 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3335 ;;      Params:         0       0       0       0       0
  3336 ;;      Locals:         0      15       0       0       0
  3337 ;;      Temps:          0       6       0       0       0
  3338 ;;      Totals:         0      21       0       0       0
  3339 ;;Total ram usage:       21 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    6
  3342 ;; This function calls:
  3343 ;;		_USARTReceiveChar
  3344 ;;		___awtoft
  3345 ;;		___ftdiv
  3346 ;;		___ftmul
  3347 ;;		___fttol
  3348 ;;		_ftoa
  3349 ;;		_progressBar
  3350 ;;		_refresh
  3351 ;;		_sendSerial
  3352 ;;		i1_Ativar
  3353 ;;		i1_USARTWriteChar
  3354 ;;		i1_lcd_escreve_string
  3355 ;;		i1_lcd_gotoxy
  3356 ;; This function is called by:
  3357 ;;		Interrupt level 1
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _ISR
  3363  027B                     _ISR:	
  3364                           
  3365                           ;main.c: 246: if (PIR1bits.ADIF) {
  3366  027B  1F0C               	btfss	12,6	;volatile
  3367  027C  2B86               	goto	i1l2935
  3368                           
  3369                           ;main.c: 248: ADCResult = ((ADRESH << 8) + ADRESL);
  3370  027D  081E               	movf	30,w	;volatile
  3371  027E  01E8               	clrf	_ADCResult+1
  3372  027F  07E8               	addwf	_ADCResult+1,f
  3373  0280  1683               	bsf	3,5	;RP0=1, select bank1
  3374  0281  1303               	bcf	3,6	;RP1=0, select bank1
  3375  0282  081E               	movf	30,w	;volatile
  3376  0283  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0284  1303               	bcf	3,6	;RP1=0, select bank0
  3378  0285  01E7               	clrf	_ADCResult
  3379  0286  07E7               	addwf	_ADCResult,f
  3380                           
  3381                           ;main.c: 250: char * buf, * per;
  3382                           ;main.c: 251: float input, input2;
  3383                           ;main.c: 252: float pre;
  3384                           ;main.c: 253: int preint, status;
  3385                           ;main.c: 255: input = ADCResult * 0.0048828125;
  3386  0287  3000               	movlw	0
  3387  0288  00A0               	movwf	___ftmul@f1
  3388  0289  30A0               	movlw	160
  3389  028A  00A1               	movwf	___ftmul@f1+1
  3390  028B  303B               	movlw	59
  3391  028C  00A2               	movwf	___ftmul@f1+2
  3392  028D  0868               	movf	_ADCResult+1,w
  3393  028E  01F9               	clrf	___awtoft@c+1
  3394  028F  07F9               	addwf	___awtoft@c+1,f
  3395  0290  0867               	movf	_ADCResult,w
  3396  0291  01F8               	clrf	___awtoft@c
  3397  0292  07F8               	addwf	___awtoft@c,f
  3398  0293  160A  118A  2720  120A  118A  	fcall	___awtoft
  3399  0298  0878               	movf	?___awtoft,w
  3400  0299  1283               	bcf	3,5	;RP0=0, select bank0
  3401  029A  1303               	bcf	3,6	;RP1=0, select bank0
  3402  029B  00A3               	movwf	___ftmul@f2
  3403  029C  0879               	movf	?___awtoft+1,w
  3404  029D  00A4               	movwf	___ftmul@f2+1
  3405  029E  087A               	movf	?___awtoft+2,w
  3406  029F  00A5               	movwf	___ftmul@f2+2
  3407  02A0  120A  118A  24B0  120A  118A  	fcall	___ftmul
  3408  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3409  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3410  02A7  0820               	movf	?___ftmul,w
  3411  02A8  00E0               	movwf	ISR@input
  3412  02A9  0821               	movf	?___ftmul+1,w
  3413  02AA  00E1               	movwf	ISR@input+1
  3414  02AB  0822               	movf	?___ftmul+2,w
  3415  02AC  00E2               	movwf	ISR@input+2
  3416                           
  3417                           ;main.c: 256: buf = ftoa(input, &status);
  3418  02AD  0860               	movf	ISR@input,w
  3419  02AE  00C4               	movwf	ftoa@f
  3420  02AF  0861               	movf	ISR@input+1,w
  3421  02B0  00C5               	movwf	ftoa@f+1
  3422  02B1  0862               	movf	ISR@input+2,w
  3423  02B2  00C6               	movwf	ftoa@f+2
  3424  02B3  305E               	movlw	ISR@status& (0+255)
  3425  02B4  00D2               	movwf	??_ISR
  3426  02B5  0852               	movf	??_ISR,w
  3427  02B6  00C7               	movwf	ftoa@status
  3428  02B7  120A  118A  2583  120A  118A  	fcall	_ftoa
  3429  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  3430  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  3431  02BE  00D3               	movwf	??_ISR+1
  3432  02BF  0853               	movf	??_ISR+1,w
  3433  02C0  00D8               	movwf	ISR@buf
  3434                           
  3435                           ;main.c: 258: lcd_gotoxy(0, 1);
  3436  02C1  01F5               	clrf	i1lcd_gotoxy@y
  3437  02C2  0AF5               	incf	i1lcd_gotoxy@y,f
  3438  02C3  3000               	movlw	0
  3439  02C4  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3440                           
  3441                           ;main.c: 259: lcd_escreve_string("Nivel:");
  3442  02C9  3076               	movlw	low (STR_2-__stringbase)
  3443  02CA  00FC               	movwf	i1lcd_escreve_string@y
  3444  02CB  3080               	movlw	128
  3445  02CC  00FD               	movwf	i1lcd_escreve_string@y+1
  3446  02CD  160A  118A  2787  120A  118A  	fcall	i1_lcd_escreve_string
  3447                           
  3448                           ;main.c: 260: lcd_gotoxy(7, 1);
  3449  02D2  01F5               	clrf	i1lcd_gotoxy@y
  3450  02D3  0AF5               	incf	i1lcd_gotoxy@y,f
  3451  02D4  3007               	movlw	7
  3452  02D5  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3453                           
  3454                           ;main.c: 262: input2 = ((input * 100) / 1);
  3455  02DA  3000               	movlw	0
  3456  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3457  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  3458  02DD  00B0               	movwf	___ftdiv@f2
  3459  02DE  3080               	movlw	128
  3460  02DF  00B1               	movwf	___ftdiv@f2+1
  3461  02E0  303F               	movlw	63
  3462  02E1  00B2               	movwf	___ftdiv@f2+2
  3463  02E2  3000               	movlw	0
  3464  02E3  00A0               	movwf	___ftmul@f1
  3465  02E4  30C8               	movlw	200
  3466  02E5  00A1               	movwf	___ftmul@f1+1
  3467  02E6  3042               	movlw	66
  3468  02E7  00A2               	movwf	___ftmul@f1+2
  3469  02E8  0860               	movf	ISR@input,w
  3470  02E9  00A3               	movwf	___ftmul@f2
  3471  02EA  0861               	movf	ISR@input+1,w
  3472  02EB  00A4               	movwf	___ftmul@f2+1
  3473  02EC  0862               	movf	ISR@input+2,w
  3474  02ED  00A5               	movwf	___ftmul@f2+2
  3475  02EE  120A  118A  24B0  120A  118A  	fcall	___ftmul
  3476  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  3477  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  3478  02F5  0820               	movf	?___ftmul,w
  3479  02F6  00B3               	movwf	___ftdiv@f1
  3480  02F7  0821               	movf	?___ftmul+1,w
  3481  02F8  00B4               	movwf	___ftdiv@f1+1
  3482  02F9  0822               	movf	?___ftmul+2,w
  3483  02FA  00B5               	movwf	___ftdiv@f1+2
  3484  02FB  120A  118A  263D  120A  118A  	fcall	___ftdiv
  3485  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0302  0830               	movf	?___ftdiv,w
  3488  0303  00E3               	movwf	ISR@input2
  3489  0304  0831               	movf	?___ftdiv+1,w
  3490  0305  00E4               	movwf	ISR@input2+1
  3491  0306  0832               	movf	?___ftdiv+2,w
  3492  0307  00E5               	movwf	ISR@input2+2
  3493                           
  3494                           ;main.c: 263: per = ftoa(input2, &status);
  3495  0308  0863               	movf	ISR@input2,w
  3496  0309  00C4               	movwf	ftoa@f
  3497  030A  0864               	movf	ISR@input2+1,w
  3498  030B  00C5               	movwf	ftoa@f+1
  3499  030C  0865               	movf	ISR@input2+2,w
  3500  030D  00C6               	movwf	ftoa@f+2
  3501  030E  305E               	movlw	ISR@status& (0+255)
  3502  030F  00D2               	movwf	??_ISR
  3503  0310  0852               	movf	??_ISR,w
  3504  0311  00C7               	movwf	ftoa@status
  3505  0312  120A  118A  2583  120A  118A  	fcall	_ftoa
  3506  0317  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0318  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0319  00D3               	movwf	??_ISR+1
  3509  031A  0853               	movf	??_ISR+1,w
  3510  031B  00E6               	movwf	ISR@per
  3511                           
  3512                           ;main.c: 265: lcd_escreve_string(per);
  3513  031C  0866               	movf	ISR@per,w
  3514  031D  00FC               	movwf	i1lcd_escreve_string@y
  3515  031E  3000               	movlw	0
  3516  031F  00FD               	movwf	i1lcd_escreve_string@y+1
  3517  0320  160A  118A  2787  120A  118A  	fcall	i1_lcd_escreve_string
  3518                           
  3519                           ;main.c: 266: lcd_gotoxy(16, 1);
  3520  0325  01F5               	clrf	i1lcd_gotoxy@y
  3521  0326  0AF5               	incf	i1lcd_gotoxy@y,f
  3522  0327  3010               	movlw	16
  3523  0328  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3524                           
  3525                           ;main.c: 267: lcd_escreve_string("%");
  3526  032D  307D               	movlw	low (STR_3-__stringbase)
  3527  032E  00FC               	movwf	i1lcd_escreve_string@y
  3528  032F  3080               	movlw	128
  3529  0330  00FD               	movwf	i1lcd_escreve_string@y+1
  3530  0331  160A  118A  2787  120A  118A  	fcall	i1_lcd_escreve_string
  3531                           
  3532                           ;main.c: 268: lcd_gotoxy(0, 0);
  3533  0336  01F5               	clrf	i1lcd_gotoxy@y
  3534  0337  3000               	movlw	0
  3535  0338  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3536                           
  3537                           ;main.c: 270: pre = input2 * 0.16;
  3538  033D  30D7               	movlw	215
  3539  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3540  033F  1303               	bcf	3,6	;RP1=0, select bank0
  3541  0340  00A0               	movwf	___ftmul@f1
  3542  0341  3023               	movlw	35
  3543  0342  00A1               	movwf	___ftmul@f1+1
  3544  0343  303E               	movlw	62
  3545  0344  00A2               	movwf	___ftmul@f1+2
  3546  0345  0863               	movf	ISR@input2,w
  3547  0346  00A3               	movwf	___ftmul@f2
  3548  0347  0864               	movf	ISR@input2+1,w
  3549  0348  00A4               	movwf	___ftmul@f2+1
  3550  0349  0865               	movf	ISR@input2+2,w
  3551  034A  00A5               	movwf	___ftmul@f2+2
  3552  034B  120A  118A  24B0  120A  118A  	fcall	___ftmul
  3553  0350  1283               	bcf	3,5	;RP0=0, select bank0
  3554  0351  1303               	bcf	3,6	;RP1=0, select bank0
  3555  0352  0820               	movf	?___ftmul,w
  3556  0353  00D9               	movwf	ISR@pre
  3557  0354  0821               	movf	?___ftmul+1,w
  3558  0355  00DA               	movwf	ISR@pre+1
  3559  0356  0822               	movf	?___ftmul+2,w
  3560  0357  00DB               	movwf	ISR@pre+2
  3561                           
  3562                           ;main.c: 271: preint = (int) pre;
  3563  0358  0859               	movf	ISR@pre,w
  3564  0359  00B0               	movwf	___fttol@f1
  3565  035A  085A               	movf	ISR@pre+1,w
  3566  035B  00B1               	movwf	___fttol@f1+1
  3567  035C  085B               	movf	ISR@pre+2,w
  3568  035D  00B2               	movwf	___fttol@f1+2
  3569  035E  120A  158A  264A  120A  118A  	fcall	___fttol
  3570  0363  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0364  1303               	bcf	3,6	;RP1=0, select bank0
  3572  0365  0831               	movf	?___fttol+1,w
  3573  0366  01DD               	clrf	ISR@preint+1
  3574  0367  07DD               	addwf	ISR@preint+1,f
  3575  0368  0830               	movf	?___fttol,w
  3576  0369  01DC               	clrf	ISR@preint
  3577  036A  07DC               	addwf	ISR@preint,f
  3578                           
  3579                           ;main.c: 273: sendSerial(per);
  3580  036B  0866               	movf	ISR@per,w
  3581  036C  120A  158A  2197  120A  118A  	fcall	_sendSerial
  3582                           
  3583                           ;main.c: 274: progressBar(preint);
  3584  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3585  0372  1303               	bcf	3,6	;RP1=0, select bank0
  3586  0373  085D               	movf	ISR@preint+1,w
  3587  0374  01A1               	clrf	progressBar@preint+1
  3588  0375  07A1               	addwf	progressBar@preint+1,f
  3589  0376  085C               	movf	ISR@preint,w
  3590  0377  01A0               	clrf	progressBar@preint
  3591  0378  07A0               	addwf	progressBar@preint,f
  3592  0379  120A  158A  225D  120A  118A  	fcall	_progressBar
  3593                           
  3594                           ;main.c: 275: refresh();
  3595  037E  120A  158A  254D  120A  118A  	fcall	_refresh
  3596                           
  3597                           ;main.c: 277: PIR1bits.ADIF = 0;
  3598  0383  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0384  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0385  130C               	bcf	12,6	;volatile
  3601  0386                     i1l2935:	
  3602                           
  3603                           ;main.c: 278: }
  3604                           ;main.c: 280: if (PIR1bits.RCIF) {
  3605  0386  1E8C               	btfss	12,5	;volatile
  3606  0387  2B9C               	goto	i1l158
  3607                           
  3608                           ;main.c: 281: USARTWriteChar(USARTReceiveChar());
  3609  0388  160A  118A  26CD  120A  118A  	fcall	_USARTReceiveChar
  3610  038D  160A  118A  2641  120A  118A  	fcall	i1_USARTWriteChar
  3611                           
  3612                           ;main.c: 282: Ativar(USARTReceiveChar());
  3613  0392  160A  118A  26CD  120A  118A  	fcall	_USARTReceiveChar
  3614  0397  120A  158A  2767  120A  118A  	fcall	i1_Ativar
  3615  039C                     i1l158:	
  3616  039C  1283               	bcf	3,5	;RP0=0, select bank0
  3617  039D  1303               	bcf	3,6	;RP1=0, select bank0
  3618  039E  0857               	movf	??_ISR+5,w
  3619  039F  00FF               	movwf	127
  3620  03A0  0856               	movf	??_ISR+4,w
  3621  03A1  008A               	movwf	10
  3622  03A2  0855               	movf	??_ISR+3,w
  3623  03A3  0084               	movwf	4
  3624  03A4  0E54               	swapf	(??_ISR+2)^0,w
  3625  03A5  0083               	movwf	3
  3626  03A6  0EFE               	swapf	126,f
  3627  03A7  0E7E               	swapf	126,w
  3628  03A8  0009               	retfie
  3629  03A9                     __end_of_ISR:	
  3630                           
  3631                           	psect	intentry
  3632  0004                     __pintentry:	
  3633                           ;incstack = 0
  3634 ;; hardware stack exceeded
  3635                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3636                           
  3637  0004                     interrupt_function:	
  3638  007E                     saved_w	set	btemp
  3639  0004  00FE               	movwf	btemp
  3640  0005  0E03               	swapf	3,w
  3641  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3642  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3643  0008  00D4               	movwf	??_ISR+2
  3644  0009  0804               	movf	4,w
  3645  000A  00D5               	movwf	??_ISR+3
  3646  000B  080A               	movf	10,w
  3647  000C  00D6               	movwf	??_ISR+4
  3648  000D  087F               	movf	btemp+1,w
  3649  000E  00D7               	movwf	??_ISR+5
  3650  000F  120A  118A  2A7B   	ljmp	_ISR
  3651                           
  3652                           	psect	text17
  3653  0997                     __ptext17:	
  3654 ;; *************** function _sendSerial *****************
  3655 ;; Defined at:
  3656 ;;		line 143 in file "main.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  nivelRecipie    1    wreg     PTR unsigned char 
  3659 ;;		 -> ftoa@buf(17), 
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;  nivelRecipie    1   41[BANK0 ] PTR unsigned char 
  3662 ;;		 -> ftoa@buf(17), 
  3663 ;;  origem         40    0[BANK0 ] unsigned char [40]
  3664 ;;  x               2   42[BANK0 ] int 
  3665 ;;  envio           1   40[BANK0 ] PTR const unsigned char 
  3666 ;;		 -> sendSerial@origem(40), 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;		None               void
  3669 ;; Registers used:
  3670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3676 ;;      Params:         0       0       0       0       0
  3677 ;;      Locals:         0      44       0       0       0
  3678 ;;      Temps:          1       0       0       0       0
  3679 ;;      Totals:         1      44       0       0       0
  3680 ;;Total ram usage:       45 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    2
  3683 ;; This function calls:
  3684 ;;		_USARTWriteString
  3685 ;; This function is called by:
  3686 ;;		_ISR
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           
  3691                           ;psect for function _sendSerial
  3692  0997                     _sendSerial:	
  3693                           
  3694                           ;incstack = 0
  3695 ;; hardware stack exceeded
  3696                           ; Regs used in _sendSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3697                           ;sendSerial@nivelRecipiente stored from wreg
  3698  0997  1283               	bcf	3,5	;RP0=0, select bank0
  3699  0998  1303               	bcf	3,6	;RP1=0, select bank0
  3700  0999  00C9               	movwf	sendSerial@nivelRecipiente
  3701                           
  3702                           ;main.c: 144: int x = 0;
  3703  099A  01CA               	clrf	sendSerial@x
  3704  099B  01CB               	clrf	sendSerial@x+1
  3705  099C                     i1l2703:	
  3706                           ;main.c: 145: char origem [40];
  3707                           ;main.c: 146: const char * envio;
  3708                           ;main.c: 148: while (*nivelRecipiente != '\0') {
  3709                           
  3710  099C  0849               	movf	sendSerial@nivelRecipiente,w
  3711  099D  0084               	movwf	4
  3712  099E  1383               	bcf	3,7	;select IRP bank0
  3713  099F  0880               	movf	0,f
  3714  09A0  1903               	btfsc	3,2
  3715  09A1  29CA               	goto	i1l2705
  3716                           
  3717                           ;main.c: 149: if ((x == 0)) {
  3718  09A2  084B               	movf	sendSerial@x+1,w
  3719  09A3  044A               	iorwf	sendSerial@x,w
  3720  09A4  1D03               	skipz
  3721  09A5  29B5               	goto	i1l2697
  3722                           
  3723                           ;main.c: 150: if (recipiente == 0) {
  3724  09A6  086C               	movf	_recipiente+1,w
  3725  09A7  046B               	iorwf	_recipiente,w
  3726  09A8  1D03               	skipz
  3727  09A9  29AC               	goto	i1l2693
  3728                           
  3729                           ;main.c: 151: origem[x] = 'S';
  3730  09AA  3053               	movlw	83
  3731  09AB  29AD               	goto	L3
  3732  09AC                     i1l2693:	
  3733                           ;main.c: 152: } else {
  3734                           
  3735                           
  3736                           ;main.c: 153: origem[x] = 'I';
  3737  09AC  3049               	movlw	73
  3738  09AD                     L3:	
  3739  09AD  00F3               	movwf	??_sendSerial
  3740  09AE  084A               	movf	sendSerial@x,w
  3741  09AF  3E20               	addlw	sendSerial@origem& (0+255)
  3742  09B0  0084               	movwf	4
  3743  09B1  0873               	movf	??_sendSerial,w
  3744  09B2  1383               	bcf	3,7	;select IRP bank0
  3745  09B3  0080               	movwf	0
  3746  09B4  29C3               	goto	i1l2701
  3747  09B5                     i1l2697:	
  3748                           ;main.c: 156: } else {
  3749                           
  3750                           ;main.c: 154: }
  3751                           ;main.c: 155: x++;
  3752                           
  3753                           
  3754                           ;main.c: 157: origem[x] = *nivelRecipiente;
  3755  09B5  0849               	movf	sendSerial@nivelRecipiente,w
  3756  09B6  0084               	movwf	4
  3757  09B7  1383               	bcf	3,7	;select IRP bank0
  3758  09B8  0800               	movf	0,w
  3759  09B9  00F3               	movwf	??_sendSerial
  3760  09BA  084A               	movf	sendSerial@x,w
  3761  09BB  3E20               	addlw	sendSerial@origem& (0+255)
  3762  09BC  0084               	movwf	4
  3763  09BD  0873               	movf	??_sendSerial,w
  3764  09BE  0080               	movwf	0
  3765                           
  3766                           ;main.c: 158: *nivelRecipiente++;
  3767  09BF  3001               	movlw	1
  3768  09C0  00F3               	movwf	??_sendSerial
  3769  09C1  0873               	movf	??_sendSerial,w
  3770  09C2  07C9               	addwf	sendSerial@nivelRecipiente,f
  3771  09C3                     i1l2701:	
  3772                           
  3773                           ;main.c: 159: x++;
  3774  09C3  3001               	movlw	1
  3775  09C4  07CA               	addwf	sendSerial@x,f
  3776  09C5  1803               	skipnc
  3777  09C6  0ACB               	incf	sendSerial@x+1,f
  3778  09C7  3000               	movlw	0
  3779  09C8  07CB               	addwf	sendSerial@x+1,f
  3780  09C9  299C               	goto	i1l2703
  3781  09CA                     i1l2705:	
  3782                           
  3783                           ;main.c: 160: }
  3784                           ;main.c: 161: }
  3785                           ;main.c: 162: envio = &origem;
  3786  09CA  3020               	movlw	sendSerial@origem& (0+255)
  3787  09CB  00F3               	movwf	??_sendSerial
  3788  09CC  0873               	movf	??_sendSerial,w
  3789  09CD  00C8               	movwf	sendSerial@envio
  3790                           
  3791                           ;main.c: 163: USARTWriteString(envio);
  3792  09CE  0848               	movf	sendSerial@envio,w
  3793  09CF  00F1               	movwf	USARTWriteString@str
  3794  09D0  3000               	movlw	0
  3795  09D1  00F2               	movwf	USARTWriteString@str+1
  3796  09D2  160A  118A  2741   	fcall	_USARTWriteString
  3797  09D5  0008               	return
  3798  09D6                     __end_of_sendSerial:	
  3799                           
  3800                           	psect	text18
  3801  0D4D                     __ptext18:	
  3802 ;; *************** function _refresh *****************
  3803 ;; Defined at:
  3804 ;;		line 183 in file "main.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;		None               void
  3811 ;; Registers used:
  3812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3818 ;;      Params:         0       0       0       0       0
  3819 ;;      Locals:         0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0
  3821 ;;      Totals:         0       0       0       0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    2
  3825 ;; This function calls:
  3826 ;;		i1_Ativar
  3827 ;; This function is called by:
  3828 ;;		_ISR
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           
  3833                           ;psect for function _refresh
  3834  0D4D                     _refresh:	
  3835                           
  3836                           ;main.c: 184: if (recipiente == 0) {
  3837                           
  3838                           ;incstack = 0
  3839 ;; hardware stack exceeded
  3840                           ; Regs used in _refresh: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3841  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  3843  0D4F  086C               	movf	_recipiente+1,w
  3844  0D50  046B               	iorwf	_recipiente,w
  3845  0D51  1D03               	skipz
  3846  0D52  2D8A               	goto	i1l2741
  3847                           
  3848                           ;main.c: 185: if (ADCResult < 80) {
  3849  0D53  0868               	movf	_ADCResult+1,w
  3850  0D54  3A80               	xorlw	128
  3851  0D55  00FF               	movwf	127
  3852  0D56  3080               	movlw	128
  3853  0D57  027F               	subwf	127,w
  3854  0D58  1D03               	skipz
  3855  0D59  2D5C               	goto	u350_25
  3856  0D5A  3050               	movlw	80
  3857  0D5B  0267               	subwf	_ADCResult,w
  3858  0D5C                     u350_25:	
  3859  0D5C  1803               	skipnc
  3860  0D5D  2D6E               	goto	i1l2735
  3861                           
  3862                           ;main.c: 186: PORTDbits.RD2 = 0;
  3863  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0D60  1108               	bcf	8,2	;volatile
  3866                           
  3867                           ;main.c: 187: PORTDbits.RD3 = 1;
  3868  0D61  1588               	bsf	8,3	;volatile
  3869                           
  3870                           ;main.c: 188: Ativar(LIGAR_BOMBA);
  3871  0D62  3031               	movlw	_LIGAR_BOMBA-__stringbase
  3872  0D63  0084               	movwf	4
  3873  0D64  120A  158A  200A  120A  158A  	fcall	stringdir
  3874  0D69  120A  158A  2767  120A  158A  	fcall	i1_Ativar
  3875  0D6E                     i1l2735:	
  3876                           
  3877                           ;main.c: 189: }
  3878                           ;main.c: 191: if (ADCResult > 200) {
  3879  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  3881  0D70  0868               	movf	_ADCResult+1,w
  3882  0D71  3A80               	xorlw	128
  3883  0D72  00FF               	movwf	127
  3884  0D73  3080               	movlw	128
  3885  0D74  027F               	subwf	127,w
  3886  0D75  1D03               	skipz
  3887  0D76  2D79               	goto	u351_25
  3888  0D77  30C9               	movlw	201
  3889  0D78  0267               	subwf	_ADCResult,w
  3890  0D79                     u351_25:	
  3891  0D79  1C03               	skipc
  3892  0D7A  0008               	return
  3893                           
  3894                           ;main.c: 192: PORTDbits.RD2 = 1;
  3895  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  3896  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  3897  0D7D  1508               	bsf	8,2	;volatile
  3898                           
  3899                           ;main.c: 193: PORTDbits.RD3 = 0;
  3900  0D7E  1188               	bcf	8,3	;volatile
  3901                           
  3902                           ;main.c: 194: Ativar(DESLIGAR_BOMBA);
  3903  0D7F  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  3904  0D80  0084               	movwf	4
  3905  0D81  120A  158A  200A  120A  158A  	fcall	stringdir
  3906  0D86  120A  158A  2767   	fcall	i1_Ativar
  3907                           
  3908                           ;main.c: 195: }
  3909                           ;main.c: 196: } else if (recipiente == 1) {
  3910  0D89  0008               	return
  3911  0D8A                     i1l2741:	
  3912  0D8A  3001               	movlw	1
  3913  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  3914  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  3915  0D8D  066B               	xorwf	_recipiente,w
  3916  0D8E  046C               	iorwf	_recipiente+1,w
  3917  0D8F  1D03               	skipz
  3918  0D90  0008               	return
  3919                           
  3920                           ;main.c: 198: if (ADCResult < 80) {
  3921  0D91  0868               	movf	_ADCResult+1,w
  3922  0D92  3A80               	xorlw	128
  3923  0D93  00FF               	movwf	127
  3924  0D94  3080               	movlw	128
  3925  0D95  027F               	subwf	127,w
  3926  0D96  1D03               	skipz
  3927  0D97  2D9A               	goto	u353_25
  3928  0D98  3050               	movlw	80
  3929  0D99  0267               	subwf	_ADCResult,w
  3930  0D9A                     u353_25:	
  3931  0D9A  1803               	skipnc
  3932  0D9B  2DAB               	goto	i1l2749
  3933                           
  3934                           ;main.c: 199: PORTDbits.RD4 = 0;
  3935  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  3936  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  3937  0D9E  1208               	bcf	8,4	;volatile
  3938                           
  3939                           ;main.c: 200: Ativar(LIGAR_MOTOR);
  3940  0D9F  3032               	movlw	_LIGAR_MOTOR-__stringbase
  3941  0DA0  0084               	movwf	4
  3942  0DA1  120A  158A  200A  120A  158A  	fcall	stringdir
  3943  0DA6  120A  158A  2767  120A  158A  	fcall	i1_Ativar
  3944  0DAB                     i1l2749:	
  3945                           
  3946                           ;main.c: 201: }
  3947                           ;main.c: 203: if (ADCResult > 200) {
  3948  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  3949  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  3950  0DAD  0868               	movf	_ADCResult+1,w
  3951  0DAE  3A80               	xorlw	128
  3952  0DAF  00FF               	movwf	127
  3953  0DB0  3080               	movlw	128
  3954  0DB1  027F               	subwf	127,w
  3955  0DB2  1D03               	skipz
  3956  0DB3  2DB6               	goto	u354_25
  3957  0DB4  30C9               	movlw	201
  3958  0DB5  0267               	subwf	_ADCResult,w
  3959  0DB6                     u354_25:	
  3960  0DB6  1C03               	skipc
  3961  0DB7  0008               	return
  3962                           
  3963                           ;main.c: 204: PORTDbits.RD4 = 1;
  3964  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  3965  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
  3966  0DBA  1608               	bsf	8,4	;volatile
  3967                           
  3968                           ;main.c: 205: Ativar(DESLIGAR_MOTOR);
  3969  0DBB  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  3970  0DBC  0084               	movwf	4
  3971  0DBD  120A  158A  200A  120A  158A  	fcall	stringdir
  3972  0DC2  120A  158A  2767   	fcall	i1_Ativar
  3973  0DC5  0008               	return
  3974  0DC6                     __end_of_refresh:	
  3975                           
  3976                           	psect	text19
  3977  0F67                     __ptext19:	
  3978 ;; *************** function i1_Ativar *****************
  3979 ;; Defined at:
  3980 ;;		line 115 in file "main.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  comando         1    wreg     unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  comando         1    2[COMMON] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;		None               void
  3987 ;; Registers used:
  3988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3994 ;;      Params:         0       0       0       0       0
  3995 ;;      Locals:         1       0       0       0       0
  3996 ;;      Temps:          1       0       0       0       0
  3997 ;;      Totals:         2       0       0       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    1
  4001 ;; This function calls:
  4002 ;;		i1_USARTWriteChar
  4003 ;; This function is called by:
  4004 ;;		_refresh
  4005 ;;		_ISR
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function i1_Ativar
  4011  0F67                     i1_Ativar:	
  4012                           
  4013                           ;incstack = 0
  4014 ;; hardware stack exceeded
  4015                           ; Regs used in i1_Ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4016                           ;i1Ativar@comando stored from wreg
  4017  0F67  00F2               	movwf	i1Ativar@comando
  4018                           
  4019                           ;main.c: 117: if (comando == LIGAR_BOMBA) {
  4020  0F68  3031               	movlw	_LIGAR_BOMBA-__stringbase
  4021  0F69  0084               	movwf	4
  4022  0F6A  120A  158A  200A  120A  158A  	fcall	stringdir
  4023  0F6F  00F1               	movwf	??i1_Ativar
  4024  0F70  0872               	movf	i1Ativar@comando,w
  4025  0F71  0671               	xorwf	??i1_Ativar,w
  4026  0F72  1D03               	skipz
  4027  0F73  2F83               	goto	i1l2631
  4028                           
  4029                           ;main.c: 118: PORTDbits.RD2 = 0;
  4030  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  4031  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  4032  0F76  1108               	bcf	8,2	;volatile
  4033                           
  4034                           ;main.c: 119: PORTDbits.RD3 = 1;
  4035  0F77  1588               	bsf	8,3	;volatile
  4036                           
  4037                           ;main.c: 120: USARTWriteChar(LIGAR_BOMBA);
  4038  0F78  3031               	movlw	_LIGAR_BOMBA-__stringbase
  4039  0F79  0084               	movwf	4
  4040  0F7A  120A  158A  200A  120A  158A  	fcall	stringdir
  4041  0F7F  160A  118A  2641   	fcall	i1_USARTWriteChar
  4042                           
  4043                           ;main.c: 121: } else if (comando == DESLIGAR_BOMBA) {
  4044  0F82  0008               	return
  4045  0F83                     i1l2631:	
  4046  0F83  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  4047  0F84  0084               	movwf	4
  4048  0F85  120A  158A  200A  120A  158A  	fcall	stringdir
  4049  0F8A  00F1               	movwf	??i1_Ativar
  4050  0F8B  0872               	movf	i1Ativar@comando,w
  4051  0F8C  0671               	xorwf	??i1_Ativar,w
  4052  0F8D  1D03               	skipz
  4053  0F8E  2F9E               	goto	i1l2637
  4054                           
  4055                           ;main.c: 122: PORTDbits.RD2 = 1;
  4056  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  4057  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  4058  0F91  1508               	bsf	8,2	;volatile
  4059                           
  4060                           ;main.c: 123: PORTDbits.RD3 = 0;
  4061  0F92  1188               	bcf	8,3	;volatile
  4062                           
  4063                           ;main.c: 124: USARTWriteChar(DESLIGAR_BOMBA);
  4064  0F93  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  4065  0F94  0084               	movwf	4
  4066  0F95  120A  158A  200A  120A  158A  	fcall	stringdir
  4067  0F9A  160A  118A  2641   	fcall	i1_USARTWriteChar
  4068                           
  4069                           ;main.c: 125: } else if (comando == LIGAR_MOTOR) {
  4070  0F9D  0008               	return
  4071  0F9E                     i1l2637:	
  4072  0F9E  3032               	movlw	_LIGAR_MOTOR-__stringbase
  4073  0F9F  0084               	movwf	4
  4074  0FA0  120A  158A  200A  120A  158A  	fcall	stringdir
  4075  0FA5  00F1               	movwf	??i1_Ativar
  4076  0FA6  0872               	movf	i1Ativar@comando,w
  4077  0FA7  0671               	xorwf	??i1_Ativar,w
  4078  0FA8  1D03               	skipz
  4079  0FA9  2FB8               	goto	i1l2643
  4080                           
  4081                           ;main.c: 126: PORTDbits.RD4 = 1;
  4082  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  4084  0FAC  1608               	bsf	8,4	;volatile
  4085                           
  4086                           ;main.c: 127: USARTWriteChar(LIGAR_MOTOR);
  4087  0FAD  3032               	movlw	_LIGAR_MOTOR-__stringbase
  4088  0FAE  0084               	movwf	4
  4089  0FAF  120A  158A  200A  120A  158A  	fcall	stringdir
  4090  0FB4  160A  118A  2641   	fcall	i1_USARTWriteChar
  4091                           
  4092                           ;main.c: 128: } else if (comando == DESLIGAR_MOTOR) {
  4093  0FB7  0008               	return
  4094  0FB8                     i1l2643:	
  4095  0FB8  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  4096  0FB9  0084               	movwf	4
  4097  0FBA  120A  158A  200A  120A  158A  	fcall	stringdir
  4098  0FBF  00F1               	movwf	??i1_Ativar
  4099  0FC0  0872               	movf	i1Ativar@comando,w
  4100  0FC1  0671               	xorwf	??i1_Ativar,w
  4101  0FC2  1D03               	skipz
  4102  0FC3  2FD2               	goto	i1l2649
  4103                           
  4104                           ;main.c: 129: PORTDbits.RD4 = 0;
  4105  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  4106  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  4107  0FC6  1208               	bcf	8,4	;volatile
  4108                           
  4109                           ;main.c: 130: USARTWriteChar(DESLIGAR_MOTOR);
  4110  0FC7  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  4111  0FC8  0084               	movwf	4
  4112  0FC9  120A  158A  200A  120A  158A  	fcall	stringdir
  4113  0FCE  160A  118A  2641   	fcall	i1_USARTWriteChar
  4114                           
  4115                           ;main.c: 131: } else if (comando == LIGAR) {
  4116  0FD1  0008               	return
  4117  0FD2                     i1l2649:	
  4118  0FD2  3030               	movlw	_LIGAR-__stringbase
  4119  0FD3  0084               	movwf	4
  4120  0FD4  120A  158A  200A  120A  158A  	fcall	stringdir
  4121  0FD9  00F1               	movwf	??i1_Ativar
  4122  0FDA  0872               	movf	i1Ativar@comando,w
  4123  0FDB  0671               	xorwf	??i1_Ativar,w
  4124  0FDC  1D03               	skipz
  4125  0FDD  2FE9               	goto	i1l2653
  4126                           
  4127                           ;main.c: 132: USARTWriteChar(LIGAR);
  4128  0FDE  3030               	movlw	_LIGAR-__stringbase
  4129  0FDF  0084               	movwf	4
  4130  0FE0  120A  158A  200A  120A  158A  	fcall	stringdir
  4131  0FE5  160A  118A  2641   	fcall	i1_USARTWriteChar
  4132                           
  4133                           ;main.c: 133: } else if (comando == DESLIGAR) {
  4134  0FE8  0008               	return
  4135  0FE9                     i1l2653:	
  4136  0FE9  302D               	movlw	_DESLIGAR-__stringbase
  4137  0FEA  0084               	movwf	4
  4138  0FEB  120A  158A  200A  120A  158A  	fcall	stringdir
  4139  0FF0  00F1               	movwf	??i1_Ativar
  4140  0FF1  0872               	movf	i1Ativar@comando,w
  4141  0FF2  0671               	xorwf	??i1_Ativar,w
  4142  0FF3  1D03               	skipz
  4143  0FF4  0008               	return
  4144                           
  4145                           ;main.c: 134: USARTWriteChar(DESLIGAR);
  4146  0FF5  302D               	movlw	_DESLIGAR-__stringbase
  4147  0FF6  0084               	movwf	4
  4148  0FF7  120A  158A  200A  120A  158A  	fcall	stringdir
  4149  0FFC  160A  118A  2641   	fcall	i1_USARTWriteChar
  4150  0FFF  0008               	return
  4151  1000                     __end_ofi1_Ativar:	
  4152                           
  4153                           	psect	text20
  4154  0A5D                     __ptext20:	
  4155 ;; *************** function _progressBar *****************
  4156 ;; Defined at:
  4157 ;;		line 166 in file "main.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  preint          2    0[BANK0 ] int 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  aux            16    6[BANK0 ] unsigned char [16]
  4162 ;;  i               2   22[BANK0 ] int 
  4163 ;;  result          1   24[BANK0 ] PTR unsigned char 
  4164 ;;		 -> progressBar@aux(16), 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;		None               void
  4167 ;; Registers used:
  4168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4174 ;;      Params:         0       2       0       0       0
  4175 ;;      Locals:         0      19       0       0       0
  4176 ;;      Temps:          0       4       0       0       0
  4177 ;;      Totals:         0      25       0       0       0
  4178 ;;Total ram usage:       25 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    5
  4181 ;; This function calls:
  4182 ;;		i1_lcd_escreve_string
  4183 ;; This function is called by:
  4184 ;;		_ISR
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _progressBar
  4190  0A5D                     _progressBar:	
  4191                           
  4192                           ;main.c: 167: int i = 0;
  4193                           
  4194                           ;incstack = 0
  4195 ;; hardware stack exceeded
  4196                           ; Regs used in _progressBar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4197  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0A5F  01B6               	clrf	progressBar@i
  4200  0A60  01B7               	clrf	progressBar@i+1
  4201                           
  4202                           ;main.c: 168: unsigned char *result;
  4203                           ;main.c: 169: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ',
  4204                           ;main.c: 170: ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
  4205  0A61  3026               	movlw	progressBar@aux& (0+255)
  4206  0A62  0084               	movwf	4
  4207  0A63  30D7               	movlw	low progressBar@F1347
  4208  0A64  00A2               	movwf	??_progressBar
  4209  0A65  0804               	movf	4,w
  4210  0A66  00A3               	movwf	??_progressBar+1
  4211  0A67  3010               	movlw	16
  4212  0A68  00A4               	movwf	??_progressBar+2
  4213  0A69                     u347_20:	
  4214  0A69  0822               	movf	??_progressBar,w
  4215  0A6A  0084               	movwf	4
  4216  0A6B  1383               	bcf	3,7	;select IRP bank1
  4217  0A6C  0800               	movf	0,w
  4218  0A6D  00A5               	movwf	??_progressBar+3
  4219  0A6E  0AA2               	incf	??_progressBar,f
  4220  0A6F  0823               	movf	??_progressBar+1,w
  4221  0A70  0084               	movwf	4
  4222  0A71  0825               	movf	??_progressBar+3,w
  4223  0A72  0080               	movwf	0
  4224  0A73  0AA3               	incf	??_progressBar+1,f
  4225  0A74  0BA4               	decfsz	??_progressBar+2,f
  4226  0A75  2A69               	goto	u347_20
  4227  0A76                     i1l2719:	
  4228                           ;main.c: 172: while (preint >= 0) {
  4229                           
  4230  0A76  1BA1               	btfsc	progressBar@preint+1,7
  4231  0A77  2A8C               	goto	i1l2721
  4232                           
  4233                           ;main.c: 173: aux[i] = 0xFF;
  4234  0A78  30FF               	movlw	255
  4235  0A79  00A2               	movwf	??_progressBar
  4236  0A7A  0836               	movf	progressBar@i,w
  4237  0A7B  3E26               	addlw	progressBar@aux& (0+255)
  4238  0A7C  0084               	movwf	4
  4239  0A7D  0822               	movf	??_progressBar,w
  4240  0A7E  0080               	movwf	0
  4241                           
  4242                           ;main.c: 174: preint--;
  4243  0A7F  30FF               	movlw	255
  4244  0A80  07A0               	addwf	progressBar@preint,f
  4245  0A81  1803               	skipnc
  4246  0A82  0AA1               	incf	progressBar@preint+1,f
  4247  0A83  30FF               	movlw	255
  4248  0A84  07A1               	addwf	progressBar@preint+1,f
  4249                           
  4250                           ;main.c: 175: i++;
  4251  0A85  3001               	movlw	1
  4252  0A86  07B6               	addwf	progressBar@i,f
  4253  0A87  1803               	skipnc
  4254  0A88  0AB7               	incf	progressBar@i+1,f
  4255  0A89  3000               	movlw	0
  4256  0A8A  07B7               	addwf	progressBar@i+1,f
  4257  0A8B  2A76               	goto	i1l2719
  4258  0A8C                     i1l2721:	
  4259                           
  4260                           ;main.c: 176: }
  4261                           ;main.c: 177: result = &aux;
  4262  0A8C  3026               	movlw	progressBar@aux& (0+255)
  4263  0A8D  00A2               	movwf	??_progressBar
  4264  0A8E  0822               	movf	??_progressBar,w
  4265  0A8F  00B8               	movwf	progressBar@result
  4266                           
  4267                           ;main.c: 178: lcd_escreve_string(result);
  4268  0A90  0838               	movf	progressBar@result,w
  4269  0A91  00FC               	movwf	i1lcd_escreve_string@y
  4270  0A92  3000               	movlw	0
  4271  0A93  00FD               	movwf	i1lcd_escreve_string@y+1
  4272  0A94  160A  118A  2787  120A  158A  	fcall	i1_lcd_escreve_string
  4273                           
  4274                           ;main.c: 179: _delay((unsigned long)((200)*(20000000/4000.0)));
  4275  0A99  3006               	movlw	6
  4276  0A9A  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0A9B  1303               	bcf	3,6	;RP1=0, select bank0
  4278  0A9C  00A4               	movwf	??_progressBar+2
  4279  0A9D  3013               	movlw	19
  4280  0A9E  00A3               	movwf	??_progressBar+1
  4281  0A9F  30B1               	movlw	177
  4282  0AA0  00A2               	movwf	??_progressBar
  4283  0AA1                     u407_27:	
  4284  0AA1  0BA2               	decfsz	??_progressBar,f
  4285  0AA2  2AA1               	goto	u407_27
  4286  0AA3  0BA3               	decfsz	??_progressBar+1,f
  4287  0AA4  2AA1               	goto	u407_27
  4288  0AA5  0BA4               	decfsz	??_progressBar+2,f
  4289  0AA6  2AA1               	goto	u407_27
  4290  0AA7  2AA8               	nop2
  4291  0AA8  0008               	return
  4292  0AA9                     __end_of_progressBar:	
  4293                           
  4294                           	psect	text21
  4295  1787                     __ptext21:	
  4296 ;; *************** function i1_lcd_escreve_string *****************
  4297 ;; Defined at:
  4298 ;;		line 168 in file "lcd_4bit.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  y               2   12[COMMON] PTR const unsigned char 
  4301 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  4302 ;;		 -> progressBar@aux(16), 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;		None
  4305 ;; Return value:  Size  Location     Type
  4306 ;;		None               void
  4307 ;; Registers used:
  4308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4314 ;;      Params:         2       0       0       0       0
  4315 ;;      Locals:         0       0       0       0       0
  4316 ;;      Temps:          0       0       0       0       0
  4317 ;;      Totals:         2       0       0       0       0
  4318 ;;Total ram usage:        2 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    4
  4321 ;; This function calls:
  4322 ;;		i1_lcd_putc
  4323 ;; This function is called by:
  4324 ;;		_progressBar
  4325 ;;		_ISR
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function i1_lcd_escreve_string
  4331  1787                     i1_lcd_escreve_string:	
  4332  1787                     i1l2663:	
  4333                           ;lcd_4bit.c: 170: while(*y!='\0')
  4334                           
  4335                           ;incstack = 0
  4336 ;; hardware stack exceeded
  4337                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4338                           
  4339  1787  087D               	movf	i1lcd_escreve_string@y+1,w
  4340  1788  1283               	bcf	3,5	;RP0=0, select bank0
  4341  1789  1303               	bcf	3,6	;RP1=0, select bank0
  4342  178A  00FF               	movwf	127
  4343  178B  087C               	movf	i1lcd_escreve_string@y,w
  4344  178C  0084               	movwf	4
  4345  178D  120A  158A  2000  160A  118A  	fcall	stringtab
  4346  1792  3800               	iorlw	0
  4347  1793  1903               	btfsc	3,2
  4348  1794  0008               	return
  4349                           
  4350                           ;lcd_4bit.c: 171: {
  4351                           ;lcd_4bit.c: 172: lcd_putc(*y);
  4352  1795  087D               	movf	i1lcd_escreve_string@y+1,w
  4353  1796  1283               	bcf	3,5	;RP0=0, select bank0
  4354  1797  1303               	bcf	3,6	;RP1=0, select bank0
  4355  1798  00FF               	movwf	127
  4356  1799  087C               	movf	i1lcd_escreve_string@y,w
  4357  179A  0084               	movwf	4
  4358  179B  120A  158A  2000  160A  118A  	fcall	stringtab
  4359  17A0  120A  158A  215C  160A  118A  	fcall	i1_lcd_putc
  4360                           
  4361                           ;lcd_4bit.c: 173: y++;
  4362  17A5  3001               	movlw	1
  4363  17A6  07FC               	addwf	i1lcd_escreve_string@y,f
  4364  17A7  1803               	skipnc
  4365  17A8  0AFD               	incf	i1lcd_escreve_string@y+1,f
  4366  17A9  2F87               	goto	i1l2663
  4367  17AA                     __end_ofi1_lcd_escreve_string:	
  4368                           
  4369                           	psect	text22
  4370  095C                     __ptext22:	
  4371 ;; *************** function i1_lcd_putc *****************
  4372 ;; Defined at:
  4373 ;;		line 82 in file "lcd_4bit.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  c               1    wreg     unsigned char 
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;  c               1   11[COMMON] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;		None               void
  4380 ;; Registers used:
  4381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4387 ;;      Params:         0       0       0       0       0
  4388 ;;      Locals:         1       0       0       0       0
  4389 ;;      Temps:          2       0       0       0       0
  4390 ;;      Totals:         3       0       0       0       0
  4391 ;;Total ram usage:        3 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    3
  4394 ;; This function calls:
  4395 ;;		i1_lcd_envia_byte
  4396 ;;		i1_lcd_gotoxy
  4397 ;; This function is called by:
  4398 ;;		i1_lcd_escreve_string
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function i1_lcd_putc
  4404  095C                     i1_lcd_putc:	
  4405                           
  4406                           ;incstack = 0
  4407 ;; hardware stack exceeded
  4408                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4409                           ;i1lcd_putc@c stored from wreg
  4410  095C  00FB               	movwf	i1lcd_putc@c
  4411                           
  4412                           ;lcd_4bit.c: 84: switch(c)
  4413  095D  298B               	goto	i1l2237
  4414  095E                     i1l2225:	
  4415                           ;lcd_4bit.c: 85: {
  4416                           ;lcd_4bit.c: 86: case '\f':
  4417                           
  4418                           
  4419                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  4420  095E  01F2               	clrf	i1lcd_envia_byte@n
  4421  095F  0AF2               	incf	i1lcd_envia_byte@n,f
  4422  0960  3000               	movlw	0
  4423  0961  160A  118A  27D5  120A  158A  	fcall	i1_lcd_envia_byte
  4424                           
  4425                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  4426  0966  300D               	movlw	13
  4427  0967  00FA               	movwf	??i1_lcd_putc+1
  4428  0968  30FB               	movlw	251
  4429  0969  00F9               	movwf	??i1_lcd_putc
  4430  096A                     u408_27:	
  4431  096A  0BF9               	decfsz	??i1_lcd_putc,f
  4432  096B  296A               	goto	u408_27
  4433  096C  0BFA               	decfsz	??i1_lcd_putc+1,f
  4434  096D  296A               	goto	u408_27
  4435  096E  296F               	nop2
  4436                           
  4437                           ;lcd_4bit.c: 89: break;
  4438  096F  0008               	return
  4439  0970                     i1l2229:	
  4440                           ;lcd_4bit.c: 91: case '\n':
  4441                           
  4442                           
  4443                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  4444  0970  3002               	movlw	2
  4445  0971  00F9               	movwf	??i1_lcd_putc
  4446  0972  0879               	movf	??i1_lcd_putc,w
  4447  0973  00F5               	movwf	i1lcd_gotoxy@y
  4448  0974  3001               	movlw	1
  4449  0975  160A  118A  26B3   	fcall	i1_lcd_gotoxy
  4450                           
  4451                           ;lcd_4bit.c: 93: break;
  4452  0978  0008               	return
  4453  0979                     i1l2231:	
  4454                           ;lcd_4bit.c: 95: case '\b':
  4455                           
  4456                           
  4457                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  4458  0979  3010               	movlw	16
  4459  097A  00F9               	movwf	??i1_lcd_putc
  4460  097B  0879               	movf	??i1_lcd_putc,w
  4461  097C  00F2               	movwf	i1lcd_envia_byte@n
  4462  097D  3000               	movlw	0
  4463  097E  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4464                           
  4465                           ;lcd_4bit.c: 97: break;
  4466  0981  0008               	return
  4467  0982                     i1l2233:	
  4468                           ;lcd_4bit.c: 99: default:
  4469                           
  4470                           
  4471                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  4472  0982  087B               	movf	i1lcd_putc@c,w
  4473  0983  00F9               	movwf	??i1_lcd_putc
  4474  0984  0879               	movf	??i1_lcd_putc,w
  4475  0985  00F2               	movwf	i1lcd_envia_byte@n
  4476  0986  3001               	movlw	1
  4477  0987  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4478                           
  4479                           ;lcd_4bit.c: 102: }
  4480                           
  4481                           ;lcd_4bit.c: 101: break;
  4482  098A  0008               	return
  4483  098B                     i1l2237:	
  4484  098B  087B               	movf	i1lcd_putc@c,w
  4485                           
  4486                           ; Switch size 1, requested type "space"
  4487                           ; Number of cases is 3, Range of values is 8 to 12
  4488                           ; switch strategies available:
  4489                           ; Name         Instructions Cycles
  4490                           ; simple_byte           10     6 (average)
  4491                           ; direct_byte           26    11 (fixed)
  4492                           ; jumptable            263     9 (fixed)
  4493                           ;	Chosen strategy is simple_byte
  4494  098C  3A08               	xorlw	8	; case 8
  4495  098D  1903               	skipnz
  4496  098E  2979               	goto	i1l2231
  4497  098F  3A02               	xorlw	2	; case 10
  4498  0990  1903               	skipnz
  4499  0991  2970               	goto	i1l2229
  4500  0992  3A06               	xorlw	6	; case 12
  4501  0993  1903               	skipnz
  4502  0994  295E               	goto	i1l2225
  4503  0995  2982               	goto	i1l2233
  4504  0996  0008               	return
  4505  0997                     __end_ofi1_lcd_putc:	
  4506                           
  4507                           	psect	text23
  4508  16B3                     __ptext23:	
  4509 ;; *************** function i1_lcd_gotoxy *****************
  4510 ;; Defined at:
  4511 ;;		line 70 in file "lcd_4bit.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  x               1    wreg     unsigned char 
  4514 ;;  y               1    5[COMMON] unsigned char 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  x               1    7[COMMON] unsigned char 
  4517 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;		None               void
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0, pclath, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4527 ;;      Params:         1       0       0       0       0
  4528 ;;      Locals:         2       0       0       0       0
  4529 ;;      Temps:          1       0       0       0       0
  4530 ;;      Totals:         4       0       0       0       0
  4531 ;;Total ram usage:        4 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    2
  4534 ;; This function calls:
  4535 ;;		i1_lcd_envia_byte
  4536 ;; This function is called by:
  4537 ;;		_ISR
  4538 ;;		i1_lcd_putc
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function i1_lcd_gotoxy
  4544  16B3                     i1_lcd_gotoxy:	
  4545                           
  4546                           ;incstack = 0
  4547 ;; hardware stack exceeded
  4548                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4549                           ;i1lcd_gotoxy@x stored from wreg
  4550  16B3  00F7               	movwf	i1lcd_gotoxy@x
  4551                           
  4552                           ;lcd_4bit.c: 72: unsigned char address;
  4553                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  4554  16B4  0875               	movf	i1lcd_gotoxy@y,w
  4555  16B5  3A01               	xorlw	1
  4556  16B6  1903               	skipnz
  4557  16B7  2EBD               	goto	i1l2013
  4558  16B8  3040               	movlw	64
  4559  16B9  00F6               	movwf	??i1_lcd_gotoxy
  4560  16BA  0876               	movf	??i1_lcd_gotoxy,w
  4561  16BB  00F8               	movwf	i1lcd_gotoxy@address
  4562  16BC  2EBE               	goto	i1l2015
  4563  16BD                     i1l2013:	
  4564                           
  4565                           ;lcd_4bit.c: 75: else address=0;
  4566  16BD  01F8               	clrf	i1lcd_gotoxy@address
  4567  16BE                     i1l2015:	
  4568                           
  4569                           ;lcd_4bit.c: 77: address += x-1;
  4570  16BE  0877               	movf	i1lcd_gotoxy@x,w
  4571  16BF  3EFF               	addlw	255
  4572  16C0  00F6               	movwf	??i1_lcd_gotoxy
  4573  16C1  0876               	movf	??i1_lcd_gotoxy,w
  4574  16C2  07F8               	addwf	i1lcd_gotoxy@address,f
  4575                           
  4576                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  4577  16C3  0878               	movf	i1lcd_gotoxy@address,w
  4578  16C4  3880               	iorlw	128
  4579  16C5  00F6               	movwf	??i1_lcd_gotoxy
  4580  16C6  0876               	movf	??i1_lcd_gotoxy,w
  4581  16C7  00F2               	movwf	i1lcd_envia_byte@n
  4582  16C8  3000               	movlw	0
  4583  16C9  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4584  16CC  0008               	return
  4585  16CD                     __end_ofi1_lcd_gotoxy:	
  4586                           
  4587                           	psect	text24
  4588  17D5                     __ptext24:	
  4589 ;; *************** function i1_lcd_envia_byte *****************
  4590 ;; Defined at:
  4591 ;;		line 53 in file "lcd_4bit.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  address         1    wreg     unsigned char 
  4594 ;;  n               1    2[COMMON] unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  address         1    4[COMMON] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;		None               void
  4599 ;; Registers used:
  4600 ;;		wreg, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4606 ;;      Params:         1       0       0       0       0
  4607 ;;      Locals:         1       0       0       0       0
  4608 ;;      Temps:          1       0       0       0       0
  4609 ;;      Totals:         3       0       0       0       0
  4610 ;;Total ram usage:        3 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    1
  4613 ;; This function calls:
  4614 ;;		i1_lcd_envia_nibble
  4615 ;; This function is called by:
  4616 ;;		i1_lcd_gotoxy
  4617 ;;		i1_lcd_putc
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function i1_lcd_envia_byte
  4623  17D5                     i1_lcd_envia_byte:	
  4624                           
  4625                           ;incstack = 0
  4626 ;; hardware stack exceeded
  4627                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  4628                           ;i1lcd_envia_byte@address stored from wreg
  4629  17D5  00F4               	movwf	i1lcd_envia_byte@address
  4630                           
  4631                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  4632  17D6  1283               	bcf	3,5	;RP0=0, select bank0
  4633  17D7  1303               	bcf	3,6	;RP1=0, select bank0
  4634  17D8  1286               	bcf	6,5	;volatile
  4635                           
  4636                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  4637  17D9  3063               	movlw	99
  4638  17DA  00F3               	movwf	??i1_lcd_envia_byte
  4639  17DB                     u409_27:	
  4640  17DB  0BF3               	decfsz	??i1_lcd_envia_byte,f
  4641  17DC  2FDB               	goto	u409_27
  4642  17DD  2FDE               	nop2	;nop
  4643                           
  4644                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  4645  17DE  0874               	movf	i1lcd_envia_byte@address,w
  4646  17DF  1903               	btfsc	3,2
  4647  17E0  2FE5               	goto	i1l205
  4648  17E1  1283               	bcf	3,5	;RP0=0, select bank0
  4649  17E2  1303               	bcf	3,6	;RP1=0, select bank0
  4650  17E3  1686               	bsf	6,5	;volatile
  4651  17E4  2FE8               	goto	i1l206
  4652  17E5                     i1l205:	
  4653                           
  4654                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  4655  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  4656  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  4657  17E7  1286               	bcf	6,5	;volatile
  4658  17E8                     i1l206:	
  4659                           
  4660                           ;lcd_4bit.c: 61: _delay(1);
  4661  17E8  0000               	nop
  4662                           
  4663                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  4664  17E9  1283               	bcf	3,5	;RP0=0, select bank0
  4665  17EA  1303               	bcf	3,6	;RP1=0, select bank0
  4666  17EB  1206               	bcf	6,4	;volatile
  4667                           
  4668                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  4669  17EC  0872               	movf	i1lcd_envia_byte@n,w
  4670  17ED  00F3               	movwf	??i1_lcd_envia_byte
  4671  17EE  3004               	movlw	4
  4672  17EF                     u199_25:	
  4673  17EF  1003               	clrc
  4674  17F0  0CF3               	rrf	??i1_lcd_envia_byte,f
  4675  17F1  3EFF               	addlw	-1
  4676  17F2  1D03               	skipz
  4677  17F3  2FEF               	goto	u199_25
  4678  17F4  0873               	movf	??i1_lcd_envia_byte,w
  4679  17F5  120A  158A  2123  160A  118A  	fcall	i1_lcd_envia_nibble
  4680                           
  4681                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  4682  17FA  0872               	movf	i1lcd_envia_byte@n,w
  4683  17FB  390F               	andlw	15
  4684  17FC  120A  158A  2123   	fcall	i1_lcd_envia_nibble
  4685  17FF  0008               	return
  4686  1800                     __end_ofi1_lcd_envia_byte:	
  4687                           
  4688                           	psect	text25
  4689  0923                     __ptext25:	
  4690 ;; *************** function i1_lcd_envia_nibble *****************
  4691 ;; Defined at:
  4692 ;;		line 39 in file "lcd_4bit.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  n               1    wreg     unsigned char 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  n               1    1[COMMON] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;		None               void
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4706 ;;      Params:         0       0       0       0       0
  4707 ;;      Locals:         1       0       0       0       0
  4708 ;;      Temps:          1       0       0       0       0
  4709 ;;      Totals:         2       0       0       0       0
  4710 ;;Total ram usage:        2 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		i1_lcd_envia_byte
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function i1_lcd_envia_nibble
  4721  0923                     i1_lcd_envia_nibble:	
  4722                           
  4723                           ;incstack = 0
  4724 ;; hardware stack exceeded
  4725                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  4726                           ;i1lcd_envia_nibble@n stored from wreg
  4727  0923  00F1               	movwf	i1lcd_envia_nibble@n
  4728                           
  4729                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  4730  0924  3000               	movlw	0
  4731  0925  1871               	btfsc	i1lcd_envia_nibble@n,0
  4732  0926  3001               	movlw	1
  4733  0927  00F0               	movwf	??i1_lcd_envia_nibble
  4734  0928  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0929  1303               	bcf	3,6	;RP1=0, select bank0
  4736  092A  0806               	movf	6,w	;volatile
  4737  092B  0670               	xorwf	??i1_lcd_envia_nibble,w
  4738  092C  39FE               	andlw	-2
  4739  092D  0670               	xorwf	??i1_lcd_envia_nibble,w
  4740  092E  0086               	movwf	6	;volatile
  4741                           
  4742                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  4743  092F  3000               	movlw	0
  4744  0930  18F1               	btfsc	i1lcd_envia_nibble@n,1
  4745  0931  3001               	movlw	1
  4746  0932  00F0               	movwf	??i1_lcd_envia_nibble
  4747  0933  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4748  0934  0806               	movf	6,w	;volatile
  4749  0935  0670               	xorwf	??i1_lcd_envia_nibble,w
  4750  0936  39FD               	andlw	-3
  4751  0937  0670               	xorwf	??i1_lcd_envia_nibble,w
  4752  0938  0086               	movwf	6	;volatile
  4753                           
  4754                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  4755  0939  3000               	movlw	0
  4756  093A  1971               	btfsc	i1lcd_envia_nibble@n,2
  4757  093B  3001               	movlw	1
  4758  093C  00F0               	movwf	??i1_lcd_envia_nibble
  4759  093D  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4760  093E  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4761  093F  0806               	movf	6,w	;volatile
  4762  0940  0670               	xorwf	??i1_lcd_envia_nibble,w
  4763  0941  39FB               	andlw	-5
  4764  0942  0670               	xorwf	??i1_lcd_envia_nibble,w
  4765  0943  0086               	movwf	6	;volatile
  4766                           
  4767                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  4768  0944  3000               	movlw	0
  4769  0945  19F1               	btfsc	i1lcd_envia_nibble@n,3
  4770  0946  3001               	movlw	1
  4771  0947  00F0               	movwf	??i1_lcd_envia_nibble
  4772  0948  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4773  0949  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4774  094A  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4775  094B  0806               	movf	6,w	;volatile
  4776  094C  0670               	xorwf	??i1_lcd_envia_nibble,w
  4777  094D  39F7               	andlw	-9
  4778  094E  0670               	xorwf	??i1_lcd_envia_nibble,w
  4779  094F  0086               	movwf	6	;volatile
  4780                           
  4781                           ;lcd_4bit.c: 46: _delay(1);
  4782  0950  0000               	nop
  4783                           
  4784                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  4785  0951  1283               	bcf	3,5	;RP0=0, select bank0
  4786  0952  1303               	bcf	3,6	;RP1=0, select bank0
  4787  0953  1606               	bsf	6,4	;volatile
  4788                           
  4789                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  4790  0954  3003               	movlw	3
  4791  0955  00F0               	movwf	??i1_lcd_envia_nibble
  4792  0956                     u410_27:	
  4793  0956  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  4794  0957  2956               	goto	u410_27
  4795                           
  4796                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  4797  0958  1283               	bcf	3,5	;RP0=0, select bank0
  4798  0959  1303               	bcf	3,6	;RP1=0, select bank0
  4799  095A  1206               	bcf	6,4	;volatile
  4800  095B  0008               	return
  4801  095C                     __end_ofi1_lcd_envia_nibble:	
  4802                           
  4803                           	psect	text26
  4804  0583                     __ptext26:	
  4805 ;; *************** function _ftoa *****************
  4806 ;; Defined at:
  4807 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  f               3   36[BANK0 ] float 
  4810 ;;  status          1   39[BANK0 ] PTR int 
  4811 ;;		 -> ISR@status(2), 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  l               4   45[BANK0 ] unsigned long 
  4814 ;;  rem             4   41[BANK0 ] unsigned long 
  4815 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4816 ;;		 -> ftoa@buf(17), 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      PTR unsigned char 
  4819 ;; Registers used:
  4820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4826 ;;      Params:         0       4       0       0       0
  4827 ;;      Locals:         0       9       0       0       0
  4828 ;;      Temps:          0       1       0       0       0
  4829 ;;      Totals:         0      14       0       0       0
  4830 ;;Total ram usage:       14 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    3
  4833 ;; This function calls:
  4834 ;;		___ftge
  4835 ;;		___ftmul
  4836 ;;		___ftneg
  4837 ;;		___ftsub
  4838 ;;		___fttol
  4839 ;;		___lltoft
  4840 ;;		_sprintf
  4841 ;; This function is called by:
  4842 ;;		_ISR
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function _ftoa
  4848  0583                     _ftoa:	
  4849                           
  4850                           ;incstack = 0
  4851 ;; hardware stack exceeded
  4852                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4853  0583  30C6               	movlw	ftoa@buf& (0+255)
  4854  0584  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0585  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0586  00C8               	movwf	??_ftoa
  4857  0587  0848               	movf	??_ftoa,w
  4858  0588  00D1               	movwf	ftoa@cp
  4859  0589  0844               	movf	ftoa@f,w
  4860  058A  00F0               	movwf	___ftge@ff1
  4861  058B  0845               	movf	ftoa@f+1,w
  4862  058C  00F1               	movwf	___ftge@ff1+1
  4863  058D  0846               	movf	ftoa@f+2,w
  4864  058E  00F2               	movwf	___ftge@ff1+2
  4865  058F  3000               	movlw	0
  4866  0590  00F3               	movwf	___ftge@ff2
  4867  0591  3000               	movlw	0
  4868  0592  00F4               	movwf	___ftge@ff2+1
  4869  0593  3000               	movlw	0
  4870  0594  00F5               	movwf	___ftge@ff2+2
  4871  0595  120A  158A  2350  120A  118A  	fcall	___ftge
  4872  059A  1803               	btfsc	3,0
  4873  059B  2DBC               	goto	i1l2765
  4874  059C  302D               	movlw	45
  4875  059D  1283               	bcf	3,5	;RP0=0, select bank0
  4876  059E  1303               	bcf	3,6	;RP1=0, select bank0
  4877  059F  00C8               	movwf	??_ftoa
  4878  05A0  0851               	movf	ftoa@cp,w
  4879  05A1  0084               	movwf	4
  4880  05A2  0848               	movf	??_ftoa,w
  4881  05A3  1383               	bcf	3,7	;select IRP bank0
  4882  05A4  0080               	movwf	0
  4883  05A5  3001               	movlw	1
  4884  05A6  00C8               	movwf	??_ftoa
  4885  05A7  0848               	movf	??_ftoa,w
  4886  05A8  07D1               	addwf	ftoa@cp,f
  4887  05A9  0844               	movf	ftoa@f,w
  4888  05AA  00F0               	movwf	___ftneg@f1
  4889  05AB  0845               	movf	ftoa@f+1,w
  4890  05AC  00F1               	movwf	___ftneg@f1+1
  4891  05AD  0846               	movf	ftoa@f+2,w
  4892  05AE  00F2               	movwf	___ftneg@f1+2
  4893  05AF  160A  118A  2649  120A  118A  	fcall	___ftneg
  4894  05B4  0870               	movf	?___ftneg,w
  4895  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  4896  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  4897  05B7  00C4               	movwf	ftoa@f
  4898  05B8  0871               	movf	?___ftneg+1,w
  4899  05B9  00C5               	movwf	ftoa@f+1
  4900  05BA  0872               	movf	?___ftneg+2,w
  4901  05BB  00C6               	movwf	ftoa@f+2
  4902  05BC                     i1l2765:	
  4903  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  4904  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  4905  05BE  0844               	movf	ftoa@f,w
  4906  05BF  00B0               	movwf	___fttol@f1
  4907  05C0  0845               	movf	ftoa@f+1,w
  4908  05C1  00B1               	movwf	___fttol@f1+1
  4909  05C2  0846               	movf	ftoa@f+2,w
  4910  05C3  00B2               	movwf	___fttol@f1+2
  4911  05C4  120A  158A  264A  120A  118A  	fcall	___fttol
  4912  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  4913  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  4914  05CB  0833               	movf	?___fttol+3,w
  4915  05CC  00D0               	movwf	ftoa@l+3
  4916  05CD  0832               	movf	?___fttol+2,w
  4917  05CE  00CF               	movwf	ftoa@l+2
  4918  05CF  0831               	movf	?___fttol+1,w
  4919  05D0  00CE               	movwf	ftoa@l+1
  4920  05D1  0830               	movf	?___fttol,w
  4921  05D2  00CD               	movwf	ftoa@l
  4922  05D3  0850               	movf	ftoa@l+3,w
  4923  05D4  00FB               	movwf	___lltoft@c+3
  4924  05D5  084F               	movf	ftoa@l+2,w
  4925  05D6  00FA               	movwf	___lltoft@c+2
  4926  05D7  084E               	movf	ftoa@l+1,w
  4927  05D8  00F9               	movwf	___lltoft@c+1
  4928  05D9  084D               	movf	ftoa@l,w
  4929  05DA  00F8               	movwf	___lltoft@c
  4930  05DB  160A  118A  27AA  120A  118A  	fcall	___lltoft
  4931  05E0  0878               	movf	?___lltoft,w
  4932  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  4933  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  4934  05E3  00A7               	movwf	___ftsub@f2
  4935  05E4  0879               	movf	?___lltoft+1,w
  4936  05E5  00A8               	movwf	___ftsub@f2+1
  4937  05E6  087A               	movf	?___lltoft+2,w
  4938  05E7  00A9               	movwf	___ftsub@f2+2
  4939  05E8  0844               	movf	ftoa@f,w
  4940  05E9  00AA               	movwf	___ftsub@f1
  4941  05EA  0845               	movf	ftoa@f+1,w
  4942  05EB  00AB               	movwf	___ftsub@f1+1
  4943  05EC  0846               	movf	ftoa@f+2,w
  4944  05ED  00AC               	movwf	___ftsub@f1+2
  4945  05EE  160A  118A  26E8  120A  118A  	fcall	___ftsub
  4946  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  4947  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  4948  05F5  0827               	movf	?___ftsub,w
  4949  05F6  00C4               	movwf	ftoa@f
  4950  05F7  0828               	movf	?___ftsub+1,w
  4951  05F8  00C5               	movwf	ftoa@f+1
  4952  05F9  0829               	movf	?___ftsub+2,w
  4953  05FA  00C6               	movwf	ftoa@f+2
  4954  05FB  0844               	movf	ftoa@f,w
  4955  05FC  00A3               	movwf	___ftmul@f2
  4956  05FD  0845               	movf	ftoa@f+1,w
  4957  05FE  00A4               	movwf	___ftmul@f2+1
  4958  05FF  0846               	movf	ftoa@f+2,w
  4959  0600  00A5               	movwf	___ftmul@f2+2
  4960  0601  3024               	movlw	36
  4961  0602  00A0               	movwf	___ftmul@f1
  4962  0603  3074               	movlw	116
  4963  0604  00A1               	movwf	___ftmul@f1+1
  4964  0605  3049               	movlw	73
  4965  0606  00A2               	movwf	___ftmul@f1+2
  4966  0607  120A  118A  24B0  120A  118A  	fcall	___ftmul
  4967  060C  1283               	bcf	3,5	;RP0=0, select bank0
  4968  060D  1303               	bcf	3,6	;RP1=0, select bank0
  4969  060E  0820               	movf	?___ftmul,w
  4970  060F  00B0               	movwf	___fttol@f1
  4971  0610  0821               	movf	?___ftmul+1,w
  4972  0611  00B1               	movwf	___fttol@f1+1
  4973  0612  0822               	movf	?___ftmul+2,w
  4974  0613  00B2               	movwf	___fttol@f1+2
  4975  0614  120A  158A  264A  120A  118A  	fcall	___fttol
  4976  0619  1283               	bcf	3,5	;RP0=0, select bank0
  4977  061A  1303               	bcf	3,6	;RP1=0, select bank0
  4978  061B  0833               	movf	?___fttol+3,w
  4979  061C  00CC               	movwf	ftoa@rem+3
  4980  061D  0832               	movf	?___fttol+2,w
  4981  061E  00CB               	movwf	ftoa@rem+2
  4982  061F  0831               	movf	?___fttol+1,w
  4983  0620  00CA               	movwf	ftoa@rem+1
  4984  0621  0830               	movf	?___fttol,w
  4985  0622  00C9               	movwf	ftoa@rem
  4986  0623  306B               	movlw	(STR_5-__stringbase)& (0+255)
  4987  0624  00C8               	movwf	??_ftoa
  4988  0625  0848               	movf	??_ftoa,w
  4989  0626  00AA               	movwf	sprintf@f
  4990  0627  0850               	movf	ftoa@l+3,w
  4991  0628  00AE               	movwf	?_sprintf+4
  4992  0629  084F               	movf	ftoa@l+2,w
  4993  062A  00AD               	movwf	?_sprintf+3
  4994  062B  084E               	movf	ftoa@l+1,w
  4995  062C  00AC               	movwf	?_sprintf+2
  4996  062D  084D               	movf	ftoa@l,w
  4997  062E  00AB               	movwf	?_sprintf+1
  4998  062F  084C               	movf	ftoa@rem+3,w
  4999  0630  00B2               	movwf	?_sprintf+8
  5000  0631  084B               	movf	ftoa@rem+2,w
  5001  0632  00B1               	movwf	?_sprintf+7
  5002  0633  084A               	movf	ftoa@rem+1,w
  5003  0634  00B0               	movwf	?_sprintf+6
  5004  0635  0849               	movf	ftoa@rem,w
  5005  0636  00AF               	movwf	?_sprintf+5
  5006  0637  0851               	movf	ftoa@cp,w
  5007  0638  120A  118A  203F   	fcall	_sprintf
  5008  063B  30C6               	movlw	ftoa@buf& (0+255)
  5009  063C  0008               	return
  5010  063D                     __end_of_ftoa:	
  5011                           
  5012                           	psect	text27
  5013  003F                     __ptext27:	
  5014 ;; *************** function _sprintf *****************
  5015 ;; Defined at:
  5016 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  sp              1    wreg     PTR unsigned char 
  5019 ;;		 -> ftoa@buf(17), 
  5020 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  5021 ;;		 -> STR_5(11), 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  5024 ;;		 -> ftoa@buf(17), 
  5025 ;;  _val            4   26[BANK0 ] struct .
  5026 ;;  prec            2   33[BANK0 ] int 
  5027 ;;  width           2   31[BANK0 ] int 
  5028 ;;  c               1   35[BANK0 ] char 
  5029 ;;  ap              1   25[BANK0 ] PTR void [1]
  5030 ;;		 -> ?_sprintf(2), 
  5031 ;;  flag            1   24[BANK0 ] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  2   10[BANK0 ] int 
  5034 ;; Registers used:
  5035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5041 ;;      Params:         0       9       0       0       0
  5042 ;;      Locals:         0      12       0       0       0
  5043 ;;      Temps:          0       5       0       0       0
  5044 ;;      Totals:         0      26       0       0       0
  5045 ;;Total ram usage:       26 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    1
  5048 ;; This function calls:
  5049 ;;		___lldiv
  5050 ;;		___llmod
  5051 ;;		___wmul
  5052 ;;		_isdigit
  5053 ;; This function is called by:
  5054 ;;		_ftoa
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _sprintf
  5060  003F                     _sprintf:	
  5061                           
  5062                           ;incstack = 0
  5063 ;; hardware stack exceeded
  5064                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5065                           ;sprintf@sp stored from wreg
  5066  003F  1283               	bcf	3,5	;RP0=0, select bank0
  5067  0040  1303               	bcf	3,6	;RP1=0, select bank0
  5068  0041  00BE               	movwf	sprintf@sp
  5069                           
  5070                           ;doprnt.c: 494: va_list ap;
  5071                           ;doprnt.c: 499: signed char c;
  5072                           ;doprnt.c: 501: int width;
  5073                           ;doprnt.c: 504: int prec;
  5074                           ;doprnt.c: 508: unsigned char flag;
  5075                           ;doprnt.c: 527: union {
  5076                           ;doprnt.c: 528: unsigned long _val;
  5077                           ;doprnt.c: 529: struct {
  5078                           ;doprnt.c: 530: const char * _cp;
  5079                           ;doprnt.c: 531: unsigned _len;
  5080                           ;doprnt.c: 532: } _str;
  5081                           ;doprnt.c: 533: } _val;
  5082                           ;doprnt.c: 542: *ap = __va_start();
  5083  0042  302B               	movlw	(?_sprintf+1)& (0+255)
  5084  0043  00B3               	movwf	??_sprintf
  5085  0044  0833               	movf	??_sprintf,w
  5086  0045  00B9               	movwf	sprintf@ap
  5087  0046                     i1l2481:	
  5088                           ;doprnt.c: 545: while(c = *f++) {
  5089                           
  5090  0046  3001               	movlw	1
  5091  0047  07AA               	addwf	sprintf@f,f
  5092  0048  30FF               	movlw	-1
  5093  0049  072A               	addwf	sprintf@f,w
  5094  004A  0084               	movwf	4
  5095  004B  120A  158A  200A  120A  118A  	fcall	stringdir
  5096  0050  00B3               	movwf	??_sprintf
  5097  0051  0833               	movf	??_sprintf,w
  5098  0052  00C3               	movwf	sprintf@c
  5099  0053  08C3               	movf	sprintf@c,f
  5100  0054  1903               	btfsc	3,2
  5101  0055  2A76               	goto	i1l2483
  5102                           
  5103                           ;doprnt.c: 547: if(c != '%')
  5104  0056  0843               	movf	sprintf@c,w
  5105  0057  3A25               	xorlw	37
  5106  0058  1903               	skipnz
  5107  0059  2866               	goto	i1l2391
  5108                           
  5109                           ;doprnt.c: 549: {
  5110                           ;doprnt.c: 550: ((*sp++ = (c)));
  5111  005A  0843               	movf	sprintf@c,w
  5112  005B  00B3               	movwf	??_sprintf
  5113  005C  083E               	movf	sprintf@sp,w
  5114  005D  0084               	movwf	4
  5115  005E  0833               	movf	??_sprintf,w
  5116  005F  1383               	bcf	3,7	;select IRP bank0
  5117  0060  0080               	movwf	0
  5118  0061  3001               	movlw	1
  5119  0062  00B3               	movwf	??_sprintf
  5120  0063  0833               	movf	??_sprintf,w
  5121  0064  07BE               	addwf	sprintf@sp,f
  5122                           
  5123                           ;doprnt.c: 551: continue;
  5124  0065  2846               	goto	i1l2481
  5125  0066                     i1l2391:	
  5126                           
  5127                           ;doprnt.c: 552: }
  5128                           ;doprnt.c: 555: width = 0;
  5129  0066  01BF               	clrf	sprintf@width
  5130  0067  01C0               	clrf	sprintf@width+1
  5131                           
  5132                           ;doprnt.c: 557: flag = 0;
  5133  0068  01B8               	clrf	sprintf@flag
  5134                           
  5135                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5136  0069  082A               	movf	sprintf@f,w
  5137  006A  0084               	movwf	4
  5138  006B  120A  158A  200A  120A  118A  	fcall	stringdir
  5139  0070  160A  118A  2671  120A  118A  	fcall	_isdigit
  5140  0075  1C03               	btfss	3,0
  5141  0076  28B9               	goto	i1l2405
  5142                           
  5143                           ;doprnt.c: 607: width = 0;
  5144  0077  1283               	bcf	3,5	;RP0=0, select bank0
  5145  0078  1303               	bcf	3,6	;RP1=0, select bank0
  5146  0079  01BF               	clrf	sprintf@width
  5147  007A  01C0               	clrf	sprintf@width+1
  5148  007B                     i1l2397:	
  5149                           ;doprnt.c: 608: do {
  5150                           
  5151                           
  5152                           ;doprnt.c: 609: width *= 10;
  5153  007B  300A               	movlw	10
  5154  007C  00F0               	movwf	___wmul@multiplier
  5155  007D  3000               	movlw	0
  5156  007E  00F1               	movwf	___wmul@multiplier+1
  5157  007F  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0080  1303               	bcf	3,6	;RP1=0, select bank0
  5159  0081  0840               	movf	sprintf@width+1,w
  5160  0082  01F3               	clrf	___wmul@multiplicand+1
  5161  0083  07F3               	addwf	___wmul@multiplicand+1,f
  5162  0084  083F               	movf	sprintf@width,w
  5163  0085  01F2               	clrf	___wmul@multiplicand
  5164  0086  07F2               	addwf	___wmul@multiplicand,f
  5165  0087  160A  118A  2764  120A  118A  	fcall	___wmul
  5166  008C  0871               	movf	?___wmul+1,w
  5167  008D  1283               	bcf	3,5	;RP0=0, select bank0
  5168  008E  1303               	bcf	3,6	;RP1=0, select bank0
  5169  008F  01C0               	clrf	sprintf@width+1
  5170  0090  07C0               	addwf	sprintf@width+1,f
  5171  0091  0870               	movf	?___wmul,w
  5172  0092  01BF               	clrf	sprintf@width
  5173  0093  07BF               	addwf	sprintf@width,f
  5174                           
  5175                           ;doprnt.c: 610: width += *f++ - '0';
  5176  0094  082A               	movf	sprintf@f,w
  5177  0095  0084               	movwf	4
  5178  0096  120A  158A  200A  120A  118A  	fcall	stringdir
  5179  009B  3ED0               	addlw	208
  5180  009C  00B3               	movwf	??_sprintf
  5181  009D  30FF               	movlw	255
  5182  009E  1803               	skipnc
  5183  009F  3000               	movlw	0
  5184  00A0  00B4               	movwf	??_sprintf+1
  5185  00A1  0833               	movf	??_sprintf,w
  5186  00A2  07BF               	addwf	sprintf@width,f
  5187  00A3  1803               	skipnc
  5188  00A4  0AC0               	incf	sprintf@width+1,f
  5189  00A5  0834               	movf	??_sprintf+1,w
  5190  00A6  07C0               	addwf	sprintf@width+1,f
  5191  00A7  3001               	movlw	1
  5192  00A8  00B3               	movwf	??_sprintf
  5193  00A9  0833               	movf	??_sprintf,w
  5194  00AA  07AA               	addwf	sprintf@f,f
  5195                           
  5196                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5197  00AB  082A               	movf	sprintf@f,w
  5198  00AC  0084               	movwf	4
  5199  00AD  120A  158A  200A  120A  118A  	fcall	stringdir
  5200  00B2  160A  118A  2671  120A  118A  	fcall	_isdigit
  5201  00B7  1803               	btfsc	3,0
  5202  00B8  287B               	goto	i1l2397
  5203  00B9                     i1l2405:	
  5204                           
  5205                           ;doprnt.c: 617: }
  5206                           ;doprnt.c: 620: if(*f == '.') {
  5207  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  5208  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  5209  00BB  082A               	movf	sprintf@f,w
  5210  00BC  0084               	movwf	4
  5211  00BD  120A  158A  200A  120A  118A  	fcall	stringdir
  5212  00C2  3A2E               	xorlw	46
  5213  00C3  1D03               	skipz
  5214  00C4  2907               	goto	i1l2417
  5215                           
  5216                           ;doprnt.c: 622: f++;
  5217  00C5  3001               	movlw	1
  5218  00C6  00B3               	movwf	??_sprintf
  5219  00C7  0833               	movf	??_sprintf,w
  5220  00C8  07AA               	addwf	sprintf@f,f
  5221                           
  5222                           ;doprnt.c: 629: {
  5223                           ;doprnt.c: 630: prec = 0;
  5224  00C9  01C1               	clrf	sprintf@prec
  5225  00CA  01C2               	clrf	sprintf@prec+1
  5226  00CB                     i1l2415:	
  5227                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5228                           
  5229  00CB  082A               	movf	sprintf@f,w
  5230  00CC  0084               	movwf	4
  5231  00CD  120A  158A  200A  120A  118A  	fcall	stringdir
  5232  00D2  160A  118A  2671  120A  118A  	fcall	_isdigit
  5233  00D7  1C03               	btfss	3,0
  5234  00D8  2913               	goto	i1l2423
  5235                           
  5236                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5237  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  5238  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  5239  00DB  0842               	movf	sprintf@prec+1,w
  5240  00DC  01F1               	clrf	___wmul@multiplier+1
  5241  00DD  07F1               	addwf	___wmul@multiplier+1,f
  5242  00DE  0841               	movf	sprintf@prec,w
  5243  00DF  01F0               	clrf	___wmul@multiplier
  5244  00E0  07F0               	addwf	___wmul@multiplier,f
  5245  00E1  300A               	movlw	10
  5246  00E2  00F2               	movwf	___wmul@multiplicand
  5247  00E3  3000               	movlw	0
  5248  00E4  00F3               	movwf	___wmul@multiplicand+1
  5249  00E5  160A  118A  2764  120A  118A  	fcall	___wmul
  5250  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  5251  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  5252  00EC  082A               	movf	sprintf@f,w
  5253  00ED  0084               	movwf	4
  5254  00EE  120A  158A  200A  120A  118A  	fcall	stringdir
  5255  00F3  0770               	addwf	?___wmul,w
  5256  00F4  00B3               	movwf	??_sprintf
  5257  00F5  3000               	movlw	0
  5258  00F6  1803               	skipnc
  5259  00F7  3001               	movlw	1
  5260  00F8  0771               	addwf	?___wmul+1,w
  5261  00F9  00B4               	movwf	??_sprintf+1
  5262  00FA  0833               	movf	??_sprintf,w
  5263  00FB  3ED0               	addlw	208
  5264  00FC  00C1               	movwf	sprintf@prec
  5265  00FD  0834               	movf	??_sprintf+1,w
  5266  00FE  1803               	skipnc
  5267  00FF  3E01               	addlw	1
  5268  0100  3EFF               	addlw	255
  5269  0101  00C2               	movwf	sprintf@prec+1
  5270  0102  3001               	movlw	1
  5271  0103  00B3               	movwf	??_sprintf
  5272  0104  0833               	movf	??_sprintf,w
  5273  0105  07AA               	addwf	sprintf@f,f
  5274  0106  28CB               	goto	i1l2415
  5275  0107                     i1l2417:	
  5276                           ;doprnt.c: 633: }
  5277                           ;doprnt.c: 634: } else {
  5278                           
  5279                           
  5280                           ;doprnt.c: 635: prec = 0;
  5281  0107  1283               	bcf	3,5	;RP0=0, select bank0
  5282  0108  1303               	bcf	3,6	;RP1=0, select bank0
  5283  0109  01C1               	clrf	sprintf@prec
  5284  010A  01C2               	clrf	sprintf@prec+1
  5285                           
  5286                           ;doprnt.c: 644: switch(c = *f++) {
  5287                           
  5288                           ;doprnt.c: 639: }
  5289                           ;doprnt.c: 642: loop:
  5290  010B  2913               	goto	i1l2423
  5291  010C                     i1l285:	
  5292                           ;doprnt.c: 650: case 'l':
  5293                           
  5294                           ;doprnt.c: 647: goto alldone;
  5295                           
  5296                           ;doprnt.c: 646: case 0:
  5297                           
  5298                           
  5299                           ;doprnt.c: 652: flag |= 0x10;
  5300  010C  1638               	bsf	sprintf@flag,4
  5301                           
  5302                           ;doprnt.c: 653: goto loop;
  5303  010D  2913               	goto	i1l2423
  5304  010E                     i1l2419:	
  5305                           ;doprnt.c: 826: case 'u':
  5306                           
  5307                           ;doprnt.c: 822: continue;
  5308                           
  5309                           ;doprnt.c: 811: default:
  5310                           
  5311                           
  5312                           ;doprnt.c: 827: flag |= 0xC0;
  5313  010E  30C0               	movlw	192
  5314  010F  00B3               	movwf	??_sprintf
  5315  0110  0833               	movf	??_sprintf,w
  5316  0111  04B8               	iorwf	sprintf@flag,f
  5317                           
  5318                           ;doprnt.c: 831: }
  5319                           
  5320                           ;doprnt.c: 828: break;
  5321  0112  292A               	goto	i1l288
  5322  0113                     i1l2423:	
  5323  0113  3001               	movlw	1
  5324  0114  1283               	bcf	3,5	;RP0=0, select bank0
  5325  0115  1303               	bcf	3,6	;RP1=0, select bank0
  5326  0116  07AA               	addwf	sprintf@f,f
  5327  0117  30FF               	movlw	-1
  5328  0118  072A               	addwf	sprintf@f,w
  5329  0119  0084               	movwf	4
  5330  011A  120A  158A  200A  120A  118A  	fcall	stringdir
  5331  011F  00C3               	movwf	sprintf@c
  5332                           
  5333                           ; Switch size 1, requested type "space"
  5334                           ; Number of cases is 3, Range of values is 0 to 117
  5335                           ; switch strategies available:
  5336                           ; Name         Instructions Cycles
  5337                           ; simple_byte           10     6 (average)
  5338                           ; jumptable            260     6 (fixed)
  5339                           ;	Chosen strategy is simple_byte
  5340  0120  3A00               	xorlw	0	; case 0
  5341  0121  1903               	skipnz
  5342  0122  2A76               	goto	i1l2483
  5343  0123  3A6C               	xorlw	108	; case 108
  5344  0124  1903               	skipnz
  5345  0125  290C               	goto	i1l285
  5346  0126  3A19               	xorlw	25	; case 117
  5347  0127  1903               	skipnz
  5348  0128  290E               	goto	i1l2419
  5349  0129  2846               	goto	i1l2481
  5350  012A                     i1l288:	
  5351                           
  5352                           ;doprnt.c: 1282: {
  5353                           ;doprnt.c: 1290: if(flag & 0x10)
  5354  012A  1E38               	btfss	sprintf@flag,4
  5355  012B  293C               	goto	i1l2429
  5356                           
  5357                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  5358  012C  0839               	movf	sprintf@ap,w
  5359  012D  0084               	movwf	4
  5360  012E  1383               	bcf	3,7	;select IRP bank0
  5361  012F  0800               	movf	0,w
  5362  0130  00BA               	movwf	sprintf@_val
  5363  0131  0A84               	incf	4,f
  5364  0132  0800               	movf	0,w
  5365  0133  00BB               	movwf	sprintf@_val+1
  5366  0134  0A84               	incf	4,f
  5367  0135  0800               	movf	0,w
  5368  0136  00BC               	movwf	sprintf@_val+2
  5369  0137  0A84               	incf	4,f
  5370  0138  0800               	movf	0,w
  5371  0139  00BD               	movwf	sprintf@_val+3
  5372  013A  3004               	movlw	4
  5373  013B  294B               	goto	L4
  5374  013C                     i1l2429:	
  5375                           
  5376                           ;doprnt.c: 1292: else
  5377                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5378  013C  0839               	movf	sprintf@ap,w
  5379  013D  0084               	movwf	4
  5380  013E  1383               	bcf	3,7	;select IRP bank0
  5381  013F  0800               	movf	0,w
  5382  0140  00B3               	movwf	??_sprintf
  5383  0141  0A84               	incf	4,f
  5384  0142  0800               	movf	0,w
  5385  0143  00B4               	movwf	??_sprintf+1
  5386  0144  0833               	movf	??_sprintf,w
  5387  0145  00BA               	movwf	sprintf@_val
  5388  0146  0834               	movf	??_sprintf+1,w
  5389  0147  00BB               	movwf	sprintf@_val+1
  5390  0148  01BC               	clrf	sprintf@_val+2
  5391  0149  01BD               	clrf	sprintf@_val+3
  5392  014A  3002               	movlw	2
  5393  014B                     L4:	
  5394  014B  00B3               	movwf	??_sprintf
  5395  014C  0833               	movf	??_sprintf,w
  5396  014D  07B9               	addwf	sprintf@ap,f
  5397                           
  5398                           ;doprnt.c: 1296: }
  5399                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  5400  014E  0842               	movf	sprintf@prec+1,w
  5401  014F  0441               	iorwf	sprintf@prec,w
  5402  0150  1D03               	skipz
  5403  0151  295E               	goto	i1l2439
  5404  0152  083D               	movf	sprintf@_val+3,w
  5405  0153  043C               	iorwf	sprintf@_val+2,w
  5406  0154  043B               	iorwf	sprintf@_val+1,w
  5407  0155  043A               	iorwf	sprintf@_val,w
  5408  0156  1D03               	skipz
  5409  0157  295E               	goto	i1l2439
  5410                           
  5411                           ;doprnt.c: 1300: prec++;
  5412  0158  3001               	movlw	1
  5413  0159  07C1               	addwf	sprintf@prec,f
  5414  015A  1803               	skipnc
  5415  015B  0AC2               	incf	sprintf@prec+1,f
  5416  015C  3000               	movlw	0
  5417  015D  07C2               	addwf	sprintf@prec+1,f
  5418  015E                     i1l2439:	
  5419                           
  5420                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5421  015E  01C3               	clrf	sprintf@c
  5422  015F  0AC3               	incf	sprintf@c,f
  5423  0160  0843               	movf	sprintf@c,w
  5424  0161  3A0A               	xorlw	10
  5425  0162  1903               	btfsc	3,2
  5426  0163  29A0               	goto	i1l2451
  5427  0164                     i1l2443:	
  5428                           
  5429                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5430  0164  0843               	movf	sprintf@c,w
  5431  0165  00B3               	movwf	??_sprintf
  5432  0166  3001               	movlw	1
  5433  0167                     u293_25:	
  5434  0167  1003               	clrc
  5435  0168  0DB3               	rlf	??_sprintf,f
  5436  0169  3EFF               	addlw	-1
  5437  016A  1D03               	skipz
  5438  016B  2967               	goto	u293_25
  5439  016C  1003               	clrc
  5440  016D  0D33               	rlf	??_sprintf,w
  5441  016E  3E01               	addlw	low (_dpowers-__stringbase)
  5442  016F  0084               	movwf	4
  5443  0170  120A  158A  200A  120A  118A  	fcall	stringdir
  5444  0175  00B4               	movwf	??_sprintf+1
  5445  0176  120A  158A  200A  120A  118A  	fcall	stringdir
  5446  017B  00B5               	movwf	??_sprintf+2
  5447  017C  120A  158A  200A  120A  118A  	fcall	stringdir
  5448  0181  00B6               	movwf	??_sprintf+3
  5449  0182  120A  158A  200A  120A  118A  	fcall	stringdir
  5450  0187  00B7               	movwf	??_sprintf+4
  5451  0188  0837               	movf	??_sprintf+4,w
  5452  0189  023D               	subwf	sprintf@_val+3,w
  5453  018A  1D03               	skipz
  5454  018B  2996               	goto	u294_25
  5455  018C  0836               	movf	??_sprintf+3,w
  5456  018D  023C               	subwf	sprintf@_val+2,w
  5457  018E  1D03               	skipz
  5458  018F  2996               	goto	u294_25
  5459  0190  0835               	movf	??_sprintf+2,w
  5460  0191  023B               	subwf	sprintf@_val+1,w
  5461  0192  1D03               	skipz
  5462  0193  2996               	goto	u294_25
  5463  0194  0834               	movf	??_sprintf+1,w
  5464  0195  023A               	subwf	sprintf@_val,w
  5465  0196                     u294_25:	
  5466  0196  1C03               	btfss	3,0
  5467  0197  29A0               	goto	i1l2451
  5468                           
  5469                           ;doprnt.c: 1316: break;
  5470  0198  3001               	movlw	1
  5471  0199  00B3               	movwf	??_sprintf
  5472  019A  0833               	movf	??_sprintf,w
  5473  019B  07C3               	addwf	sprintf@c,f
  5474  019C  0843               	movf	sprintf@c,w
  5475  019D  3A0A               	xorlw	10
  5476  019E  1D03               	skipz
  5477  019F  2964               	goto	i1l2443
  5478  01A0                     i1l2451:	
  5479                           
  5480                           ;doprnt.c: 1348: if(c < prec)
  5481  01A0  0843               	movf	sprintf@c,w
  5482  01A1  00B3               	movwf	??_sprintf
  5483  01A2  01B4               	clrf	??_sprintf+1
  5484  01A3  1BB3               	btfsc	??_sprintf,7
  5485  01A4  03B4               	decf	??_sprintf+1,f
  5486  01A5  0834               	movf	??_sprintf+1,w
  5487  01A6  3A80               	xorlw	128
  5488  01A7  00B5               	movwf	??_sprintf+2
  5489  01A8  0842               	movf	sprintf@prec+1,w
  5490  01A9  3A80               	xorlw	128
  5491  01AA  0235               	subwf	??_sprintf+2,w
  5492  01AB  1D03               	skipz
  5493  01AC  29AF               	goto	u296_25
  5494  01AD  0841               	movf	sprintf@prec,w
  5495  01AE  0233               	subwf	??_sprintf,w
  5496  01AF                     u296_25:	
  5497  01AF  1803               	skipnc
  5498  01B0  29B8               	goto	i1l2455
  5499                           
  5500                           ;doprnt.c: 1349: c = prec;
  5501  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  5502  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  5503  01B3  0841               	movf	sprintf@prec,w
  5504  01B4  00B3               	movwf	??_sprintf
  5505  01B5  0833               	movf	??_sprintf,w
  5506  01B6  00C3               	movwf	sprintf@c
  5507  01B7  29D2               	goto	i1l2459
  5508  01B8                     i1l2455:	
  5509                           
  5510                           ;doprnt.c: 1350: else if(prec < c)
  5511  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  5512  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  5513  01BA  0843               	movf	sprintf@c,w
  5514  01BB  00B3               	movwf	??_sprintf
  5515  01BC  01B4               	clrf	??_sprintf+1
  5516  01BD  1BB3               	btfsc	??_sprintf,7
  5517  01BE  03B4               	decf	??_sprintf+1,f
  5518  01BF  0842               	movf	sprintf@prec+1,w
  5519  01C0  3A80               	xorlw	128
  5520  01C1  00B5               	movwf	??_sprintf+2
  5521  01C2  0834               	movf	??_sprintf+1,w
  5522  01C3  3A80               	xorlw	128
  5523  01C4  0235               	subwf	??_sprintf+2,w
  5524  01C5  1D03               	skipz
  5525  01C6  29C9               	goto	u297_25
  5526  01C7  0833               	movf	??_sprintf,w
  5527  01C8  0241               	subwf	sprintf@prec,w
  5528  01C9                     u297_25:	
  5529  01C9  1803               	skipnc
  5530  01CA  29D2               	goto	i1l2459
  5531                           
  5532                           ;doprnt.c: 1351: prec = c;
  5533  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  5534  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  5535  01CD  0843               	movf	sprintf@c,w
  5536  01CE  00C1               	movwf	sprintf@prec
  5537  01CF  01C2               	clrf	sprintf@prec+1
  5538  01D0  1BC1               	btfsc	sprintf@prec,7
  5539  01D1  03C2               	decf	sprintf@prec+1,f
  5540  01D2                     i1l2459:	
  5541                           
  5542                           ;doprnt.c: 1390: if(width > c)
  5543  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  5544  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  5545  01D4  0843               	movf	sprintf@c,w
  5546  01D5  00B3               	movwf	??_sprintf
  5547  01D6  01B4               	clrf	??_sprintf+1
  5548  01D7  1BB3               	btfsc	??_sprintf,7
  5549  01D8  03B4               	decf	??_sprintf+1,f
  5550  01D9  0834               	movf	??_sprintf+1,w
  5551  01DA  3A80               	xorlw	128
  5552  01DB  00B5               	movwf	??_sprintf+2
  5553  01DC  0840               	movf	sprintf@width+1,w
  5554  01DD  3A80               	xorlw	128
  5555  01DE  0235               	subwf	??_sprintf+2,w
  5556  01DF  1D03               	skipz
  5557  01E0  29E3               	goto	u298_25
  5558  01E1  083F               	movf	sprintf@width,w
  5559  01E2  0233               	subwf	??_sprintf,w
  5560  01E3                     u298_25:	
  5561  01E3  1803               	skipnc
  5562  01E4  29F3               	goto	i1l2463
  5563                           
  5564                           ;doprnt.c: 1391: width -= c;
  5565  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5566  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5567  01E7  0843               	movf	sprintf@c,w
  5568  01E8  00B3               	movwf	??_sprintf
  5569  01E9  01B4               	clrf	??_sprintf+1
  5570  01EA  1BB3               	btfsc	??_sprintf,7
  5571  01EB  03B4               	decf	??_sprintf+1,f
  5572  01EC  0833               	movf	??_sprintf,w
  5573  01ED  02BF               	subwf	sprintf@width,f
  5574  01EE  0834               	movf	??_sprintf+1,w
  5575  01EF  1C03               	skipc
  5576  01F0  03C0               	decf	sprintf@width+1,f
  5577  01F1  02C0               	subwf	sprintf@width+1,f
  5578  01F2  29F7               	goto	i1l2465
  5579  01F3                     i1l2463:	
  5580                           
  5581                           ;doprnt.c: 1392: else
  5582                           ;doprnt.c: 1393: width = 0;
  5583  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  5584  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  5585  01F5  01BF               	clrf	sprintf@width
  5586  01F6  01C0               	clrf	sprintf@width+1
  5587  01F7                     i1l2465:	
  5588                           
  5589                           ;doprnt.c: 1431: {
  5590                           ;doprnt.c: 1433: if(width
  5591                           ;doprnt.c: 1437: )
  5592  01F7  0840               	movf	sprintf@width+1,w
  5593  01F8  043F               	iorwf	sprintf@width,w
  5594  01F9  1903               	skipnz
  5595  01FA  2A67               	goto	i1l2479
  5596                           
  5597                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  5598                           
  5599                           ;doprnt.c: 1438: do
  5600  01FB  3020               	movlw	32
  5601  01FC  00B3               	movwf	??_sprintf
  5602  01FD  083E               	movf	sprintf@sp,w
  5603  01FE  0084               	movwf	4
  5604  01FF  0833               	movf	??_sprintf,w
  5605  0200  1383               	bcf	3,7	;select IRP bank0
  5606  0201  0080               	movwf	0
  5607  0202  3001               	movlw	1
  5608  0203  00B3               	movwf	??_sprintf
  5609  0204  0833               	movf	??_sprintf,w
  5610  0205  07BE               	addwf	sprintf@sp,f
  5611                           
  5612                           ;doprnt.c: 1440: while(--width);
  5613  0206  30FF               	movlw	255
  5614  0207  07BF               	addwf	sprintf@width,f
  5615  0208  1803               	skipnc
  5616  0209  0AC0               	incf	sprintf@width+1,f
  5617  020A  30FF               	movlw	255
  5618  020B  07C0               	addwf	sprintf@width+1,f
  5619  020C  29F7               	goto	i1l2465
  5620  020D                     i1l2473:	
  5621                           ;doprnt.c: 1478: }
  5622                           ;doprnt.c: 1483: while(prec--) {
  5623                           
  5624                           
  5625                           ;doprnt.c: 1487: {
  5626                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5627  020D  3000               	movlw	0
  5628  020E  00A3               	movwf	___llmod@divisor+3
  5629  020F  3000               	movlw	0
  5630  0210  00A2               	movwf	___llmod@divisor+2
  5631  0211  3000               	movlw	0
  5632  0212  00A1               	movwf	___llmod@divisor+1
  5633  0213  300A               	movlw	10
  5634  0214  00A0               	movwf	___llmod@divisor
  5635  0215  0841               	movf	sprintf@prec,w
  5636  0216  00B3               	movwf	??_sprintf
  5637  0217  3001               	movlw	1
  5638  0218                     u301_25:	
  5639  0218  1003               	clrc
  5640  0219  0DB3               	rlf	??_sprintf,f
  5641  021A  3EFF               	addlw	-1
  5642  021B  1D03               	skipz
  5643  021C  2A18               	goto	u301_25
  5644  021D  1003               	clrc
  5645  021E  0D33               	rlf	??_sprintf,w
  5646  021F  3E01               	addlw	low (_dpowers-__stringbase)
  5647  0220  0084               	movwf	4
  5648  0221  120A  158A  200A  120A  118A  	fcall	stringdir
  5649  0226  00F0               	movwf	___lldiv@divisor
  5650  0227  120A  158A  200A  120A  118A  	fcall	stringdir
  5651  022C  00F1               	movwf	___lldiv@divisor+1
  5652  022D  120A  158A  200A  120A  118A  	fcall	stringdir
  5653  0232  00F2               	movwf	___lldiv@divisor+2
  5654  0233  120A  158A  200A  120A  118A  	fcall	stringdir
  5655  0238  00F3               	movwf	___lldiv@divisor+3
  5656  0239  083D               	movf	sprintf@_val+3,w
  5657  023A  00F7               	movwf	___lldiv@dividend+3
  5658  023B  083C               	movf	sprintf@_val+2,w
  5659  023C  00F6               	movwf	___lldiv@dividend+2
  5660  023D  083B               	movf	sprintf@_val+1,w
  5661  023E  00F5               	movwf	___lldiv@dividend+1
  5662  023F  083A               	movf	sprintf@_val,w
  5663  0240  00F4               	movwf	___lldiv@dividend
  5664  0241  120A  158A  23AD  120A  118A  	fcall	___lldiv
  5665  0246  0873               	movf	?___lldiv+3,w
  5666  0247  1283               	bcf	3,5	;RP0=0, select bank0
  5667  0248  1303               	bcf	3,6	;RP1=0, select bank0
  5668  0249  00A7               	movwf	___llmod@dividend+3
  5669  024A  0872               	movf	?___lldiv+2,w
  5670  024B  00A6               	movwf	___llmod@dividend+2
  5671  024C  0871               	movf	?___lldiv+1,w
  5672  024D  00A5               	movwf	___llmod@dividend+1
  5673  024E  0870               	movf	?___lldiv,w
  5674  024F  00A4               	movwf	___llmod@dividend
  5675  0250  120A  158A  22A9  120A  118A  	fcall	___llmod
  5676  0255  1283               	bcf	3,5	;RP0=0, select bank0
  5677  0256  1303               	bcf	3,6	;RP1=0, select bank0
  5678  0257  0820               	movf	?___llmod,w
  5679  0258  3E30               	addlw	48
  5680  0259  00B4               	movwf	??_sprintf+1
  5681  025A  0834               	movf	??_sprintf+1,w
  5682  025B  00C3               	movwf	sprintf@c
  5683                           
  5684                           ;doprnt.c: 1532: }
  5685                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5686  025C  0843               	movf	sprintf@c,w
  5687  025D  00B3               	movwf	??_sprintf
  5688  025E  083E               	movf	sprintf@sp,w
  5689  025F  0084               	movwf	4
  5690  0260  0833               	movf	??_sprintf,w
  5691  0261  1383               	bcf	3,7	;select IRP bank0
  5692  0262  0080               	movwf	0
  5693  0263  3001               	movlw	1
  5694  0264  00B3               	movwf	??_sprintf
  5695  0265  0833               	movf	??_sprintf,w
  5696  0266  07BE               	addwf	sprintf@sp,f
  5697  0267                     i1l2479:	
  5698  0267  30FF               	movlw	255
  5699  0268  07C1               	addwf	sprintf@prec,f
  5700  0269  1803               	skipnc
  5701  026A  0AC2               	incf	sprintf@prec+1,f
  5702  026B  30FF               	movlw	255
  5703  026C  07C2               	addwf	sprintf@prec+1,f
  5704  026D  30FF               	movlw	255
  5705  026E  0642               	xorwf	sprintf@prec+1,w
  5706  026F  1D03               	skipz
  5707  0270  2A73               	goto	u302_25
  5708  0271  30FF               	movlw	255
  5709  0272  0641               	xorwf	sprintf@prec,w
  5710  0273                     u302_25:	
  5711  0273  1903               	btfsc	3,2
  5712  0274  2846               	goto	i1l2481
  5713  0275  2A0D               	goto	i1l2473
  5714  0276                     i1l2483:	
  5715                           ;doprnt.c: 1534: }
  5716                           ;doprnt.c: 1542: }
  5717                           ;doprnt.c: 1544: alldone:
  5718                           
  5719                           
  5720                           ;doprnt.c: 1547: *sp = 0;
  5721  0276  083E               	movf	sprintf@sp,w
  5722  0277  0084               	movwf	4
  5723  0278  1383               	bcf	3,7	;select IRP bank0
  5724  0279  0180               	clrf	0
  5725  027A  0008               	return
  5726  027B                     __end_of_sprintf:	
  5727                           ;doprnt.c: 1549: return 0;
  5728                           ;	Return value of _sprintf is never used
  5729                           
  5730                           
  5731                           	psect	text28
  5732  1671                     __ptext28:	
  5733 ;; *************** function _isdigit *****************
  5734 ;; Defined at:
  5735 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  c               1    wreg     unsigned char 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  c               1    1[COMMON] unsigned char 
  5740 ;; Return value:  Size  Location     Type
  5741 ;;		None               void
  5742 ;; Registers used:
  5743 ;;		wreg, status,2, status,0
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5749 ;;      Params:         0       0       0       0       0
  5750 ;;      Locals:         2       0       0       0       0
  5751 ;;      Temps:          0       0       0       0       0
  5752 ;;      Totals:         2       0       0       0       0
  5753 ;;Total ram usage:        2 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; This function calls:
  5756 ;;		Nothing
  5757 ;; This function is called by:
  5758 ;;		_sprintf
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _isdigit
  5764  1671                     _isdigit:	
  5765                           
  5766                           ;incstack = 0
  5767 ;; hardware stack exceeded
  5768                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5769                           ;isdigit@c stored from wreg
  5770  1671  00F1               	movwf	isdigit@c
  5771  1672  01F0               	clrf	_isdigit$893
  5772  1673  303A               	movlw	58
  5773  1674  0271               	subwf	isdigit@c,w
  5774  1675  1803               	skipnc
  5775  1676  2E7D               	goto	i1l2047
  5776  1677  3030               	movlw	48
  5777  1678  0271               	subwf	isdigit@c,w
  5778  1679  1C03               	skipc
  5779  167A  2E7D               	goto	i1l2047
  5780  167B  01F0               	clrf	_isdigit$893
  5781  167C  0AF0               	incf	_isdigit$893,f
  5782  167D                     i1l2047:	
  5783  167D  0C70               	rrf	_isdigit$893,w
  5784  167E  0008               	return
  5785  167F                     __end_of_isdigit:	
  5786                           
  5787                           	psect	text29
  5788  1764                     __ptext29:	
  5789 ;; *************** function ___wmul *****************
  5790 ;; Defined at:
  5791 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  multiplier      2    0[COMMON] unsigned int 
  5794 ;;  multiplicand    2    2[COMMON] unsigned int 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  product         2    4[COMMON] unsigned int 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  2    0[COMMON] unsigned int 
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5806 ;;      Params:         4       0       0       0       0
  5807 ;;      Locals:         2       0       0       0       0
  5808 ;;      Temps:          0       0       0       0       0
  5809 ;;      Totals:         6       0       0       0       0
  5810 ;;Total ram usage:        6 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_sprintf
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function ___wmul
  5821  1764                     ___wmul:	
  5822                           
  5823                           ;incstack = 0
  5824 ;; hardware stack exceeded
  5825                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5826  1764  01F4               	clrf	___wmul@product
  5827  1765  01F5               	clrf	___wmul@product+1
  5828  1766                     i1l2053:	
  5829  1766  1C70               	btfss	___wmul@multiplier,0
  5830  1767  2F6E               	goto	i1l391
  5831  1768  0872               	movf	___wmul@multiplicand,w
  5832  1769  07F4               	addwf	___wmul@product,f
  5833  176A  1803               	skipnc
  5834  176B  0AF5               	incf	___wmul@product+1,f
  5835  176C  0873               	movf	___wmul@multiplicand+1,w
  5836  176D  07F5               	addwf	___wmul@product+1,f
  5837  176E                     i1l391:	
  5838  176E  3001               	movlw	1
  5839  176F                     u217_25:	
  5840  176F  1003               	clrc
  5841  1770  0DF2               	rlf	___wmul@multiplicand,f
  5842  1771  0DF3               	rlf	___wmul@multiplicand+1,f
  5843  1772  3EFF               	addlw	-1
  5844  1773  1D03               	skipz
  5845  1774  2F6F               	goto	u217_25
  5846  1775  3001               	movlw	1
  5847  1776                     u218_25:	
  5848  1776  1003               	clrc
  5849  1777  0CF1               	rrf	___wmul@multiplier+1,f
  5850  1778  0CF0               	rrf	___wmul@multiplier,f
  5851  1779  3EFF               	addlw	-1
  5852  177A  1D03               	skipz
  5853  177B  2F76               	goto	u218_25
  5854  177C  0871               	movf	___wmul@multiplier+1,w
  5855  177D  0470               	iorwf	___wmul@multiplier,w
  5856  177E  1D03               	skipz
  5857  177F  2F66               	goto	i1l2053
  5858  1780  0875               	movf	___wmul@product+1,w
  5859  1781  01F1               	clrf	?___wmul+1
  5860  1782  07F1               	addwf	?___wmul+1,f
  5861  1783  0874               	movf	___wmul@product,w
  5862  1784  01F0               	clrf	?___wmul
  5863  1785  07F0               	addwf	?___wmul,f
  5864  1786  0008               	return
  5865  1787                     __end_of___wmul:	
  5866                           
  5867                           	psect	text30
  5868  0AA9                     __ptext30:	
  5869 ;; *************** function ___llmod *****************
  5870 ;; Defined at:
  5871 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  divisor         4    0[BANK0 ] unsigned long 
  5874 ;;  dividend        4    4[BANK0 ] unsigned long 
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  counter         1    9[BANK0 ] unsigned char 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  4    0[BANK0 ] unsigned long 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5886 ;;      Params:         0       8       0       0       0
  5887 ;;      Locals:         0       1       0       0       0
  5888 ;;      Temps:          0       1       0       0       0
  5889 ;;      Totals:         0      10       0       0       0
  5890 ;;Total ram usage:       10 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_sprintf
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           
  5900                           ;psect for function ___llmod
  5901  0AA9                     ___llmod:	
  5902                           
  5903                           ;incstack = 0
  5904 ;; hardware stack exceeded
  5905                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5906  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  5907  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  5908  0AAB  0823               	movf	___llmod@divisor+3,w
  5909  0AAC  0422               	iorwf	___llmod@divisor+2,w
  5910  0AAD  0421               	iorwf	___llmod@divisor+1,w
  5911  0AAE  0420               	iorwf	___llmod@divisor,w
  5912  0AAF  1903               	skipnz
  5913  0AB0  2AEE               	goto	i1l2215
  5914  0AB1  01A9               	clrf	___llmod@counter
  5915  0AB2  0AA9               	incf	___llmod@counter,f
  5916  0AB3                     i1l2205:	
  5917  0AB3  1BA3               	btfsc	___llmod@divisor+3,7
  5918  0AB4  2AC3               	goto	i1l2207
  5919  0AB5  3001               	movlw	1
  5920  0AB6  00A8               	movwf	??___llmod
  5921  0AB7                     u262_25:	
  5922  0AB7  1003               	clrc
  5923  0AB8  0DA0               	rlf	___llmod@divisor,f
  5924  0AB9  0DA1               	rlf	___llmod@divisor+1,f
  5925  0ABA  0DA2               	rlf	___llmod@divisor+2,f
  5926  0ABB  0DA3               	rlf	___llmod@divisor+3,f
  5927  0ABC  0BA8               	decfsz	??___llmod,f
  5928  0ABD  2AB7               	goto	u262_25
  5929  0ABE  3001               	movlw	1
  5930  0ABF  00A8               	movwf	??___llmod
  5931  0AC0  0828               	movf	??___llmod,w
  5932  0AC1  07A9               	addwf	___llmod@counter,f
  5933  0AC2  2AB3               	goto	i1l2205
  5934  0AC3                     i1l2207:	
  5935  0AC3  0823               	movf	___llmod@divisor+3,w
  5936  0AC4  0227               	subwf	___llmod@dividend+3,w
  5937  0AC5  1D03               	skipz
  5938  0AC6  2AD1               	goto	u264_25
  5939  0AC7  0822               	movf	___llmod@divisor+2,w
  5940  0AC8  0226               	subwf	___llmod@dividend+2,w
  5941  0AC9  1D03               	skipz
  5942  0ACA  2AD1               	goto	u264_25
  5943  0ACB  0821               	movf	___llmod@divisor+1,w
  5944  0ACC  0225               	subwf	___llmod@dividend+1,w
  5945  0ACD  1D03               	skipz
  5946  0ACE  2AD1               	goto	u264_25
  5947  0ACF  0820               	movf	___llmod@divisor,w
  5948  0AD0  0224               	subwf	___llmod@dividend,w
  5949  0AD1                     u264_25:	
  5950  0AD1  1C03               	skipc
  5951  0AD2  2AE1               	goto	i1l2211
  5952  0AD3  0820               	movf	___llmod@divisor,w
  5953  0AD4  02A4               	subwf	___llmod@dividend,f
  5954  0AD5  0821               	movf	___llmod@divisor+1,w
  5955  0AD6  1C03               	skipc
  5956  0AD7  0F21               	incfsz	___llmod@divisor+1,w
  5957  0AD8  02A5               	subwf	___llmod@dividend+1,f
  5958  0AD9  0822               	movf	___llmod@divisor+2,w
  5959  0ADA  1C03               	skipc
  5960  0ADB  0F22               	incfsz	___llmod@divisor+2,w
  5961  0ADC  02A6               	subwf	___llmod@dividend+2,f
  5962  0ADD  0823               	movf	___llmod@divisor+3,w
  5963  0ADE  1C03               	skipc
  5964  0ADF  0F23               	incfsz	___llmod@divisor+3,w
  5965  0AE0  02A7               	subwf	___llmod@dividend+3,f
  5966  0AE1                     i1l2211:	
  5967  0AE1  3001               	movlw	1
  5968  0AE2                     u265_25:	
  5969  0AE2  1003               	clrc
  5970  0AE3  0CA3               	rrf	___llmod@divisor+3,f
  5971  0AE4  0CA2               	rrf	___llmod@divisor+2,f
  5972  0AE5  0CA1               	rrf	___llmod@divisor+1,f
  5973  0AE6  0CA0               	rrf	___llmod@divisor,f
  5974  0AE7  3EFF               	addlw	-1
  5975  0AE8  1D03               	skipz
  5976  0AE9  2AE2               	goto	u265_25
  5977  0AEA  3001               	movlw	1
  5978  0AEB  02A9               	subwf	___llmod@counter,f
  5979  0AEC  1D03               	btfss	3,2
  5980  0AED  2AC3               	goto	i1l2207
  5981  0AEE                     i1l2215:	
  5982  0AEE  0827               	movf	___llmod@dividend+3,w
  5983  0AEF  00A3               	movwf	?___llmod+3
  5984  0AF0  0826               	movf	___llmod@dividend+2,w
  5985  0AF1  00A2               	movwf	?___llmod+2
  5986  0AF2  0825               	movf	___llmod@dividend+1,w
  5987  0AF3  00A1               	movwf	?___llmod+1
  5988  0AF4  0824               	movf	___llmod@dividend,w
  5989  0AF5  00A0               	movwf	?___llmod
  5990  0AF6  0008               	return
  5991  0AF7                     __end_of___llmod:	
  5992                           
  5993                           	psect	text31
  5994  0BAD                     __ptext31:	
  5995 ;; *************** function ___lldiv *****************
  5996 ;; Defined at:
  5997 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  divisor         4    0[COMMON] unsigned long 
  6000 ;;  dividend        4    4[COMMON] unsigned long 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  quotient        4    9[COMMON] unsigned long 
  6003 ;;  counter         1   13[COMMON] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  4    0[COMMON] unsigned long 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6013 ;;      Params:         8       0       0       0       0
  6014 ;;      Locals:         5       0       0       0       0
  6015 ;;      Temps:          1       0       0       0       0
  6016 ;;      Totals:        14       0       0       0       0
  6017 ;;Total ram usage:       14 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_sprintf
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function ___lldiv
  6028  0BAD                     ___lldiv:	
  6029                           
  6030                           ;incstack = 0
  6031 ;; hardware stack exceeded
  6032                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6033  0BAD  3000               	movlw	0
  6034  0BAE  00FC               	movwf	___lldiv@quotient+3
  6035  0BAF  3000               	movlw	0
  6036  0BB0  00FB               	movwf	___lldiv@quotient+2
  6037  0BB1  3000               	movlw	0
  6038  0BB2  00FA               	movwf	___lldiv@quotient+1
  6039  0BB3  3000               	movlw	0
  6040  0BB4  00F9               	movwf	___lldiv@quotient
  6041  0BB5  0873               	movf	___lldiv@divisor+3,w
  6042  0BB6  0472               	iorwf	___lldiv@divisor+2,w
  6043  0BB7  0471               	iorwf	___lldiv@divisor+1,w
  6044  0BB8  0470               	iorwf	___lldiv@divisor,w
  6045  0BB9  1903               	skipnz
  6046  0BBA  2C02               	goto	i1l2195
  6047  0BBB  01FD               	clrf	___lldiv@counter
  6048  0BBC  0AFD               	incf	___lldiv@counter,f
  6049  0BBD                     i1l2181:	
  6050  0BBD  1BF3               	btfsc	___lldiv@divisor+3,7
  6051  0BBE  2BCD               	goto	i1l2183
  6052  0BBF  3001               	movlw	1
  6053  0BC0  00F8               	movwf	??___lldiv
  6054  0BC1                     u255_25:	
  6055  0BC1  1003               	clrc
  6056  0BC2  0DF0               	rlf	___lldiv@divisor,f
  6057  0BC3  0DF1               	rlf	___lldiv@divisor+1,f
  6058  0BC4  0DF2               	rlf	___lldiv@divisor+2,f
  6059  0BC5  0DF3               	rlf	___lldiv@divisor+3,f
  6060  0BC6  0BF8               	decfsz	??___lldiv,f
  6061  0BC7  2BC1               	goto	u255_25
  6062  0BC8  3001               	movlw	1
  6063  0BC9  00F8               	movwf	??___lldiv
  6064  0BCA  0878               	movf	??___lldiv,w
  6065  0BCB  07FD               	addwf	___lldiv@counter,f
  6066  0BCC  2BBD               	goto	i1l2181
  6067  0BCD                     i1l2183:	
  6068  0BCD  3001               	movlw	1
  6069  0BCE  00F8               	movwf	??___lldiv
  6070  0BCF                     u257_25:	
  6071  0BCF  1003               	clrc
  6072  0BD0  0DF9               	rlf	___lldiv@quotient,f
  6073  0BD1  0DFA               	rlf	___lldiv@quotient+1,f
  6074  0BD2  0DFB               	rlf	___lldiv@quotient+2,f
  6075  0BD3  0DFC               	rlf	___lldiv@quotient+3,f
  6076  0BD4  0BF8               	decfsz	??___lldiv,f
  6077  0BD5  2BCF               	goto	u257_25
  6078  0BD6  0873               	movf	___lldiv@divisor+3,w
  6079  0BD7  0277               	subwf	___lldiv@dividend+3,w
  6080  0BD8  1D03               	skipz
  6081  0BD9  2BE4               	goto	u258_25
  6082  0BDA  0872               	movf	___lldiv@divisor+2,w
  6083  0BDB  0276               	subwf	___lldiv@dividend+2,w
  6084  0BDC  1D03               	skipz
  6085  0BDD  2BE4               	goto	u258_25
  6086  0BDE  0871               	movf	___lldiv@divisor+1,w
  6087  0BDF  0275               	subwf	___lldiv@dividend+1,w
  6088  0BE0  1D03               	skipz
  6089  0BE1  2BE4               	goto	u258_25
  6090  0BE2  0870               	movf	___lldiv@divisor,w
  6091  0BE3  0274               	subwf	___lldiv@dividend,w
  6092  0BE4                     u258_25:	
  6093  0BE4  1C03               	skipc
  6094  0BE5  2BF5               	goto	i1l2191
  6095  0BE6  0870               	movf	___lldiv@divisor,w
  6096  0BE7  02F4               	subwf	___lldiv@dividend,f
  6097  0BE8  0871               	movf	___lldiv@divisor+1,w
  6098  0BE9  1C03               	skipc
  6099  0BEA  0F71               	incfsz	___lldiv@divisor+1,w
  6100  0BEB  02F5               	subwf	___lldiv@dividend+1,f
  6101  0BEC  0872               	movf	___lldiv@divisor+2,w
  6102  0BED  1C03               	skipc
  6103  0BEE  0F72               	incfsz	___lldiv@divisor+2,w
  6104  0BEF  02F6               	subwf	___lldiv@dividend+2,f
  6105  0BF0  0873               	movf	___lldiv@divisor+3,w
  6106  0BF1  1C03               	skipc
  6107  0BF2  0F73               	incfsz	___lldiv@divisor+3,w
  6108  0BF3  02F7               	subwf	___lldiv@dividend+3,f
  6109  0BF4  1479               	bsf	___lldiv@quotient,0
  6110  0BF5                     i1l2191:	
  6111  0BF5  3001               	movlw	1
  6112  0BF6                     u259_25:	
  6113  0BF6  1003               	clrc
  6114  0BF7  0CF3               	rrf	___lldiv@divisor+3,f
  6115  0BF8  0CF2               	rrf	___lldiv@divisor+2,f
  6116  0BF9  0CF1               	rrf	___lldiv@divisor+1,f
  6117  0BFA  0CF0               	rrf	___lldiv@divisor,f
  6118  0BFB  3EFF               	addlw	-1
  6119  0BFC  1D03               	skipz
  6120  0BFD  2BF6               	goto	u259_25
  6121  0BFE  3001               	movlw	1
  6122  0BFF  02FD               	subwf	___lldiv@counter,f
  6123  0C00  1D03               	btfss	3,2
  6124  0C01  2BCD               	goto	i1l2183
  6125  0C02                     i1l2195:	
  6126  0C02  087C               	movf	___lldiv@quotient+3,w
  6127  0C03  00F3               	movwf	?___lldiv+3
  6128  0C04  087B               	movf	___lldiv@quotient+2,w
  6129  0C05  00F2               	movwf	?___lldiv+2
  6130  0C06  087A               	movf	___lldiv@quotient+1,w
  6131  0C07  00F1               	movwf	?___lldiv+1
  6132  0C08  0879               	movf	___lldiv@quotient,w
  6133  0C09  00F0               	movwf	?___lldiv
  6134  0C0A  0008               	return
  6135  0C0B                     __end_of___lldiv:	
  6136                           
  6137                           	psect	text32
  6138  17AA                     __ptext32:	
  6139 ;; *************** function ___lltoft *****************
  6140 ;; Defined at:
  6141 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  c               4    8[COMMON] unsigned long 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  exp             1   13[COMMON] unsigned char 
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  3    8[COMMON] float 
  6148 ;; Registers used:
  6149 ;;		wreg, status,2, status,0, pclath, cstack
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6155 ;;      Params:         4       0       0       0       0
  6156 ;;      Locals:         1       0       0       0       0
  6157 ;;      Temps:          1       0       0       0       0
  6158 ;;      Totals:         6       0       0       0       0
  6159 ;;Total ram usage:        6 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; Hardware stack levels required when called:    1
  6162 ;; This function calls:
  6163 ;;		___ftpack
  6164 ;; This function is called by:
  6165 ;;		_ftoa
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           
  6170                           ;psect for function ___lltoft
  6171  17AA                     ___lltoft:	
  6172                           
  6173                           ;incstack = 0
  6174 ;; hardware stack exceeded
  6175                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6176  17AA  308E               	movlw	142
  6177  17AB  00FC               	movwf	??___lltoft
  6178  17AC  087C               	movf	??___lltoft,w
  6179  17AD  00FD               	movwf	___lltoft@exp
  6180  17AE                     i1l2619:	
  6181  17AE  30FF               	movlw	255
  6182  17AF  057B               	andwf	___lltoft@c+3,w
  6183  17B0  1903               	btfsc	3,2
  6184  17B1  2FC0               	goto	i1l2621
  6185  17B2  3001               	movlw	1
  6186  17B3                     u334_25:	
  6187  17B3  1003               	clrc
  6188  17B4  0CFB               	rrf	___lltoft@c+3,f
  6189  17B5  0CFA               	rrf	___lltoft@c+2,f
  6190  17B6  0CF9               	rrf	___lltoft@c+1,f
  6191  17B7  0CF8               	rrf	___lltoft@c,f
  6192  17B8  3EFF               	addlw	-1
  6193  17B9  1D03               	skipz
  6194  17BA  2FB3               	goto	u334_25
  6195  17BB  3001               	movlw	1
  6196  17BC  00FC               	movwf	??___lltoft
  6197  17BD  087C               	movf	??___lltoft,w
  6198  17BE  07FD               	addwf	___lltoft@exp,f
  6199  17BF  2FAE               	goto	i1l2619
  6200  17C0                     i1l2621:	
  6201  17C0  0878               	movf	___lltoft@c,w
  6202  17C1  00F0               	movwf	___ftpack@arg
  6203  17C2  0879               	movf	___lltoft@c+1,w
  6204  17C3  00F1               	movwf	___ftpack@arg+1
  6205  17C4  087A               	movf	___lltoft@c+2,w
  6206  17C5  00F2               	movwf	___ftpack@arg+2
  6207  17C6  087D               	movf	___lltoft@exp,w
  6208  17C7  00FC               	movwf	??___lltoft
  6209  17C8  087C               	movf	??___lltoft,w
  6210  17C9  00F3               	movwf	___ftpack@exp
  6211  17CA  01F4               	clrf	___ftpack@sign
  6212  17CB  120A  158A  2471   	fcall	___ftpack
  6213  17CE  0870               	movf	?___ftpack,w
  6214  17CF  00F8               	movwf	?___lltoft
  6215  17D0  0871               	movf	?___ftpack+1,w
  6216  17D1  00F9               	movwf	?___lltoft+1
  6217  17D2  0872               	movf	?___ftpack+2,w
  6218  17D3  00FA               	movwf	?___lltoft+2
  6219  17D4  0008               	return
  6220  17D5                     __end_of___lltoft:	
  6221                           
  6222                           	psect	text33
  6223  0E4A                     __ptext33:	
  6224 ;; *************** function ___fttol *****************
  6225 ;; Defined at:
  6226 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;  f1              3   16[BANK0 ] float 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  lval            4   25[BANK0 ] unsigned long 
  6231 ;;  exp1            1   29[BANK0 ] unsigned char 
  6232 ;;  sign1           1   24[BANK0 ] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  4   16[BANK0 ] long 
  6235 ;; Registers used:
  6236 ;;		wreg, status,2, status,0
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6242 ;;      Params:         0       4       0       0       0
  6243 ;;      Locals:         0       6       0       0       0
  6244 ;;      Temps:          0       4       0       0       0
  6245 ;;      Totals:         0      14       0       0       0
  6246 ;;Total ram usage:       14 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; This function calls:
  6249 ;;		Nothing
  6250 ;; This function is called by:
  6251 ;;		_ISR
  6252 ;;		_ftoa
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           
  6257                           ;psect for function ___fttol
  6258  0E4A                     ___fttol:	
  6259                           
  6260                           ;incstack = 0
  6261 ;; hardware stack exceeded
  6262                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6263  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  6264  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  6265  0E4C  0830               	movf	___fttol@f1,w
  6266  0E4D  00B4               	movwf	??___fttol
  6267  0E4E  0831               	movf	___fttol@f1+1,w
  6268  0E4F  00B5               	movwf	??___fttol+1
  6269  0E50  0832               	movf	___fttol@f1+2,w
  6270  0E51  00B6               	movwf	??___fttol+2
  6271  0E52  1003               	clrc
  6272  0E53  0D35               	rlf	??___fttol+1,w
  6273  0E54  0D36               	rlf	??___fttol+2,w
  6274  0E55  00B7               	movwf	??___fttol+3
  6275  0E56  0837               	movf	??___fttol+3,w
  6276  0E57  00BD               	movwf	___fttol@exp1
  6277  0E58  08BD               	movf	___fttol@exp1,f
  6278  0E59  1D03               	skipz
  6279  0E5A  2E64               	goto	i1l2577
  6280  0E5B  3000               	movlw	0
  6281  0E5C  00B3               	movwf	?___fttol+3
  6282  0E5D  3000               	movlw	0
  6283  0E5E  00B2               	movwf	?___fttol+2
  6284  0E5F  3000               	movlw	0
  6285  0E60  00B1               	movwf	?___fttol+1
  6286  0E61  3000               	movlw	0
  6287  0E62  00B0               	movwf	?___fttol
  6288  0E63  0008               	return
  6289  0E64                     i1l2577:	
  6290  0E64  0830               	movf	___fttol@f1,w
  6291  0E65  00B4               	movwf	??___fttol
  6292  0E66  0831               	movf	___fttol@f1+1,w
  6293  0E67  00B5               	movwf	??___fttol+1
  6294  0E68  0832               	movf	___fttol@f1+2,w
  6295  0E69  00B6               	movwf	??___fttol+2
  6296  0E6A  3017               	movlw	23
  6297  0E6B                     u325_25:	
  6298  0E6B  1003               	clrc
  6299  0E6C  0CB6               	rrf	??___fttol+2,f
  6300  0E6D  0CB5               	rrf	??___fttol+1,f
  6301  0E6E  0CB4               	rrf	??___fttol,f
  6302  0E6F  3EFF               	addlw	-1
  6303  0E70  1D03               	skipz
  6304  0E71  2E6B               	goto	u325_25
  6305  0E72  0834               	movf	??___fttol,w
  6306  0E73  00B7               	movwf	??___fttol+3
  6307  0E74  0837               	movf	??___fttol+3,w
  6308  0E75  00B8               	movwf	___fttol@sign1
  6309  0E76  17B1               	bsf	___fttol@f1+1,7
  6310  0E77  30FF               	movlw	255
  6311  0E78  05B0               	andwf	___fttol@f1,f
  6312  0E79  30FF               	movlw	255
  6313  0E7A  05B1               	andwf	___fttol@f1+1,f
  6314  0E7B  3000               	movlw	0
  6315  0E7C  05B2               	andwf	___fttol@f1+2,f
  6316  0E7D  0830               	movf	___fttol@f1,w
  6317  0E7E  00B9               	movwf	___fttol@lval
  6318  0E7F  0831               	movf	___fttol@f1+1,w
  6319  0E80  00BA               	movwf	___fttol@lval+1
  6320  0E81  0832               	movf	___fttol@f1+2,w
  6321  0E82  00BB               	movwf	___fttol@lval+2
  6322  0E83  01BC               	clrf	___fttol@lval+3
  6323  0E84  308E               	movlw	142
  6324  0E85  02BD               	subwf	___fttol@exp1,f
  6325  0E86  1FBD               	btfss	___fttol@exp1,7
  6326  0E87  2EA6               	goto	i1l2597
  6327  0E88  083D               	movf	___fttol@exp1,w
  6328  0E89  3A80               	xorlw	128
  6329  0E8A  3E8F               	addlw	143
  6330  0E8B  1803               	skipnc
  6331  0E8C  2E96               	goto	i1l2595
  6332  0E8D  3000               	movlw	0
  6333  0E8E  00B3               	movwf	?___fttol+3
  6334  0E8F  3000               	movlw	0
  6335  0E90  00B2               	movwf	?___fttol+2
  6336  0E91  3000               	movlw	0
  6337  0E92  00B1               	movwf	?___fttol+1
  6338  0E93  3000               	movlw	0
  6339  0E94  00B0               	movwf	?___fttol
  6340  0E95  0008               	return
  6341  0E96                     i1l2595:	
  6342  0E96  3001               	movlw	1
  6343  0E97                     u328_25:	
  6344  0E97  1003               	clrc
  6345  0E98  0CBC               	rrf	___fttol@lval+3,f
  6346  0E99  0CBB               	rrf	___fttol@lval+2,f
  6347  0E9A  0CBA               	rrf	___fttol@lval+1,f
  6348  0E9B  0CB9               	rrf	___fttol@lval,f
  6349  0E9C  3EFF               	addlw	-1
  6350  0E9D  1D03               	skipz
  6351  0E9E  2E97               	goto	u328_25
  6352  0E9F  3001               	movlw	1
  6353  0EA0  00B4               	movwf	??___fttol
  6354  0EA1  0834               	movf	??___fttol,w
  6355  0EA2  07BD               	addwf	___fttol@exp1,f
  6356  0EA3  1903               	btfsc	3,2
  6357  0EA4  2EC1               	goto	i1l2607
  6358  0EA5  2E96               	goto	i1l2595
  6359  0EA6                     i1l2597:	
  6360  0EA6  3018               	movlw	24
  6361  0EA7  023D               	subwf	___fttol@exp1,w
  6362  0EA8  1C03               	skipc
  6363  0EA9  2EBE               	goto	i1l2605
  6364  0EAA  3000               	movlw	0
  6365  0EAB  00B3               	movwf	?___fttol+3
  6366  0EAC  3000               	movlw	0
  6367  0EAD  00B2               	movwf	?___fttol+2
  6368  0EAE  3000               	movlw	0
  6369  0EAF  00B1               	movwf	?___fttol+1
  6370  0EB0  3000               	movlw	0
  6371  0EB1  00B0               	movwf	?___fttol
  6372  0EB2  0008               	return
  6373  0EB3                     i1l2603:	
  6374  0EB3  3001               	movlw	1
  6375  0EB4  00B4               	movwf	??___fttol
  6376  0EB5                     u331_25:	
  6377  0EB5  1003               	clrc
  6378  0EB6  0DB9               	rlf	___fttol@lval,f
  6379  0EB7  0DBA               	rlf	___fttol@lval+1,f
  6380  0EB8  0DBB               	rlf	___fttol@lval+2,f
  6381  0EB9  0DBC               	rlf	___fttol@lval+3,f
  6382  0EBA  0BB4               	decfsz	??___fttol,f
  6383  0EBB  2EB5               	goto	u331_25
  6384  0EBC  3001               	movlw	1
  6385  0EBD  02BD               	subwf	___fttol@exp1,f
  6386  0EBE                     i1l2605:	
  6387  0EBE  08BD               	movf	___fttol@exp1,f
  6388  0EBF  1D03               	skipz
  6389  0EC0  2EB3               	goto	i1l2603
  6390  0EC1                     i1l2607:	
  6391  0EC1  0838               	movf	___fttol@sign1,w
  6392  0EC2  1903               	btfsc	3,2
  6393  0EC3  2ECF               	goto	i1l2611
  6394  0EC4  09B9               	comf	___fttol@lval,f
  6395  0EC5  09BA               	comf	___fttol@lval+1,f
  6396  0EC6  09BB               	comf	___fttol@lval+2,f
  6397  0EC7  09BC               	comf	___fttol@lval+3,f
  6398  0EC8  0AB9               	incf	___fttol@lval,f
  6399  0EC9  1903               	skipnz
  6400  0ECA  0ABA               	incf	___fttol@lval+1,f
  6401  0ECB  1903               	skipnz
  6402  0ECC  0ABB               	incf	___fttol@lval+2,f
  6403  0ECD  1903               	skipnz
  6404  0ECE  0ABC               	incf	___fttol@lval+3,f
  6405  0ECF                     i1l2611:	
  6406  0ECF  083C               	movf	___fttol@lval+3,w
  6407  0ED0  00B3               	movwf	?___fttol+3
  6408  0ED1  083B               	movf	___fttol@lval+2,w
  6409  0ED2  00B2               	movwf	?___fttol+2
  6410  0ED3  083A               	movf	___fttol@lval+1,w
  6411  0ED4  00B1               	movwf	?___fttol+1
  6412  0ED5  0839               	movf	___fttol@lval,w
  6413  0ED6  00B0               	movwf	?___fttol
  6414  0ED7  0008               	return
  6415  0ED8                     __end_of___fttol:	
  6416                           
  6417                           	psect	text34
  6418  16E8                     __ptext34:	
  6419 ;; *************** function ___ftsub *****************
  6420 ;; Defined at:
  6421 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  f2              3    7[BANK0 ] float 
  6424 ;;  f1              3   10[BANK0 ] float 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;		None
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  3    7[BANK0 ] float 
  6429 ;; Registers used:
  6430 ;;		wreg, status,2, status,0, pclath, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6436 ;;      Params:         0       6       0       0       0
  6437 ;;      Locals:         0       0       0       0       0
  6438 ;;      Temps:          0       0       0       0       0
  6439 ;;      Totals:         0       6       0       0       0
  6440 ;;Total ram usage:        6 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    2
  6443 ;; This function calls:
  6444 ;;		___ftadd
  6445 ;; This function is called by:
  6446 ;;		_ftoa
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           
  6451                           ;psect for function ___ftsub
  6452  16E8                     ___ftsub:	
  6453                           
  6454                           ;incstack = 0
  6455 ;; hardware stack exceeded
  6456                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6457  16E8  3080               	movlw	128
  6458  16E9  1283               	bcf	3,5	;RP0=0, select bank0
  6459  16EA  1303               	bcf	3,6	;RP1=0, select bank0
  6460  16EB  06A9               	xorwf	___ftsub@f2+2,f
  6461  16EC  082A               	movf	___ftsub@f1,w
  6462  16ED  00F8               	movwf	___ftadd@f1
  6463  16EE  082B               	movf	___ftsub@f1+1,w
  6464  16EF  00F9               	movwf	___ftadd@f1+1
  6465  16F0  082C               	movf	___ftsub@f1+2,w
  6466  16F1  00FA               	movwf	___ftadd@f1+2
  6467  16F2  0827               	movf	___ftsub@f2,w
  6468  16F3  00FB               	movwf	___ftadd@f2
  6469  16F4  0828               	movf	___ftsub@f2+1,w
  6470  16F5  00FC               	movwf	___ftadd@f2+1
  6471  16F6  0829               	movf	___ftsub@f2+2,w
  6472  16F7  00FD               	movwf	___ftadd@f2+2
  6473  16F8  120A  118A  23A9   	fcall	___ftadd
  6474  16FB  0878               	movf	?___ftadd,w
  6475  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  6476  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  6477  16FE  00A7               	movwf	?___ftsub
  6478  16FF  0879               	movf	?___ftadd+1,w
  6479  1700  00A8               	movwf	?___ftsub+1
  6480  1701  087A               	movf	?___ftadd+2,w
  6481  1702  00A9               	movwf	?___ftsub+2
  6482  1703  0008               	return
  6483  1704                     __end_of___ftsub:	
  6484                           
  6485                           	psect	text35
  6486  03A9                     __ptext35:	
  6487 ;; *************** function ___ftadd *****************
  6488 ;; Defined at:
  6489 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;  f1              3    8[COMMON] float 
  6492 ;;  f2              3   11[COMMON] float 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  exp1            1    6[BANK0 ] unsigned char 
  6495 ;;  exp2            1    5[BANK0 ] unsigned char 
  6496 ;;  sign            1    4[BANK0 ] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  3    8[COMMON] float 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, pclath, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6506 ;;      Params:         6       0       0       0       0
  6507 ;;      Locals:         0       3       0       0       0
  6508 ;;      Temps:          0       4       0       0       0
  6509 ;;      Totals:         6       7       0       0       0
  6510 ;;Total ram usage:       13 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    1
  6513 ;; This function calls:
  6514 ;;		___ftpack
  6515 ;; This function is called by:
  6516 ;;		___ftsub
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           
  6521                           ;psect for function ___ftadd
  6522  03A9                     ___ftadd:	
  6523                           
  6524                           ;incstack = 0
  6525 ;; hardware stack exceeded
  6526                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6527  03A9  0878               	movf	___ftadd@f1,w
  6528  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  6529  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  6530  03AC  00A0               	movwf	??___ftadd
  6531  03AD  0879               	movf	___ftadd@f1+1,w
  6532  03AE  00A1               	movwf	??___ftadd+1
  6533  03AF  087A               	movf	___ftadd@f1+2,w
  6534  03B0  00A2               	movwf	??___ftadd+2
  6535  03B1  1003               	clrc
  6536  03B2  0D21               	rlf	??___ftadd+1,w
  6537  03B3  0D22               	rlf	??___ftadd+2,w
  6538  03B4  00A3               	movwf	??___ftadd+3
  6539  03B5  0823               	movf	??___ftadd+3,w
  6540  03B6  00A6               	movwf	___ftadd@exp1
  6541  03B7  087B               	movf	___ftadd@f2,w
  6542  03B8  00A0               	movwf	??___ftadd
  6543  03B9  087C               	movf	___ftadd@f2+1,w
  6544  03BA  00A1               	movwf	??___ftadd+1
  6545  03BB  087D               	movf	___ftadd@f2+2,w
  6546  03BC  00A2               	movwf	??___ftadd+2
  6547  03BD  1003               	clrc
  6548  03BE  0D21               	rlf	??___ftadd+1,w
  6549  03BF  0D22               	rlf	??___ftadd+2,w
  6550  03C0  00A3               	movwf	??___ftadd+3
  6551  03C1  0823               	movf	??___ftadd+3,w
  6552  03C2  00A5               	movwf	___ftadd@exp2
  6553  03C3  0826               	movf	___ftadd@exp1,w
  6554  03C4  1903               	btfsc	3,2
  6555  03C5  2BD2               	goto	i1l2111
  6556  03C6  0825               	movf	___ftadd@exp2,w
  6557  03C7  0226               	subwf	___ftadd@exp1,w
  6558  03C8  1803               	skipnc
  6559  03C9  2BD9               	goto	i1l2115
  6560  03CA  0326               	decf	___ftadd@exp1,w
  6561  03CB  3AFF               	xorlw	255
  6562  03CC  0725               	addwf	___ftadd@exp2,w
  6563  03CD  00A0               	movwf	??___ftadd
  6564  03CE  3019               	movlw	25
  6565  03CF  0220               	subwf	??___ftadd,w
  6566  03D0  1C03               	skipc
  6567  03D1  2BD9               	goto	i1l2115
  6568  03D2                     i1l2111:	
  6569  03D2  087B               	movf	___ftadd@f2,w
  6570  03D3  00F8               	movwf	?___ftadd
  6571  03D4  087C               	movf	___ftadd@f2+1,w
  6572  03D5  00F9               	movwf	?___ftadd+1
  6573  03D6  087D               	movf	___ftadd@f2+2,w
  6574  03D7  00FA               	movwf	?___ftadd+2
  6575  03D8  0008               	return
  6576  03D9                     i1l2115:	
  6577  03D9  0825               	movf	___ftadd@exp2,w
  6578  03DA  1903               	btfsc	3,2
  6579  03DB  0008               	return
  6580  03DC  0826               	movf	___ftadd@exp1,w
  6581  03DD  0225               	subwf	___ftadd@exp2,w
  6582  03DE  1803               	skipnc
  6583  03DF  2BE8               	goto	i1l2121
  6584  03E0  0325               	decf	___ftadd@exp2,w
  6585  03E1  3AFF               	xorlw	255
  6586  03E2  0726               	addwf	___ftadd@exp1,w
  6587  03E3  00A0               	movwf	??___ftadd
  6588  03E4  3019               	movlw	25
  6589  03E5  0220               	subwf	??___ftadd,w
  6590  03E6  1803               	btfsc	3,0
  6591  03E7  0008               	return
  6592  03E8                     i1l2121:	
  6593  03E8  3006               	movlw	6
  6594  03E9  00A0               	movwf	??___ftadd
  6595  03EA  0820               	movf	??___ftadd,w
  6596  03EB  00A4               	movwf	___ftadd@sign
  6597  03EC  1BFA               	btfsc	___ftadd@f1+2,7
  6598  03ED  17A4               	bsf	___ftadd@sign,7
  6599  03EE  1BFD               	btfsc	___ftadd@f2+2,7
  6600  03EF  1724               	bsf	___ftadd@sign,6
  6601  03F0  17F9               	bsf	___ftadd@f1+1,7
  6602  03F1  30FF               	movlw	255
  6603  03F2  05F8               	andwf	___ftadd@f1,f
  6604  03F3  30FF               	movlw	255
  6605  03F4  05F9               	andwf	___ftadd@f1+1,f
  6606  03F5  3000               	movlw	0
  6607  03F6  05FA               	andwf	___ftadd@f1+2,f
  6608  03F7  17FC               	bsf	___ftadd@f2+1,7
  6609  03F8  30FF               	movlw	255
  6610  03F9  05FB               	andwf	___ftadd@f2,f
  6611  03FA  30FF               	movlw	255
  6612  03FB  05FC               	andwf	___ftadd@f2+1,f
  6613  03FC  3000               	movlw	0
  6614  03FD  05FD               	andwf	___ftadd@f2+2,f
  6615  03FE  0825               	movf	___ftadd@exp2,w
  6616  03FF  0226               	subwf	___ftadd@exp1,w
  6617  0400  1803               	skipnc
  6618  0401  2C28               	goto	i1l2143
  6619  0402                     i1l2133:	
  6620  0402  3001               	movlw	1
  6621  0403                     u239_25:	
  6622  0403  1003               	clrc
  6623  0404  0DFB               	rlf	___ftadd@f2,f
  6624  0405  0DFC               	rlf	___ftadd@f2+1,f
  6625  0406  0DFD               	rlf	___ftadd@f2+2,f
  6626  0407  3EFF               	addlw	-1
  6627  0408  1D03               	skipz
  6628  0409  2C03               	goto	u239_25
  6629  040A  3001               	movlw	1
  6630  040B  02A5               	subwf	___ftadd@exp2,f
  6631  040C  0825               	movf	___ftadd@exp2,w
  6632  040D  0626               	xorwf	___ftadd@exp1,w
  6633  040E  1903               	skipnz
  6634  040F  2C23               	goto	i1l2141
  6635  0410  3001               	movlw	1
  6636  0411  02A4               	subwf	___ftadd@sign,f
  6637  0412  0824               	movf	___ftadd@sign,w
  6638  0413  3907               	andlw	7
  6639  0414  1903               	btfsc	3,2
  6640  0415  2C23               	goto	i1l2141
  6641  0416  2C02               	goto	i1l2133
  6642  0417                     i1l2139:	
  6643  0417  3001               	movlw	1
  6644  0418                     u242_25:	
  6645  0418  1003               	clrc
  6646  0419  0CFA               	rrf	___ftadd@f1+2,f
  6647  041A  0CF9               	rrf	___ftadd@f1+1,f
  6648  041B  0CF8               	rrf	___ftadd@f1,f
  6649  041C  3EFF               	addlw	-1
  6650  041D  1D03               	skipz
  6651  041E  2C18               	goto	u242_25
  6652  041F  3001               	movlw	1
  6653  0420  00A0               	movwf	??___ftadd
  6654  0421  0820               	movf	??___ftadd,w
  6655  0422  07A6               	addwf	___ftadd@exp1,f
  6656  0423                     i1l2141:	
  6657  0423  0826               	movf	___ftadd@exp1,w
  6658  0424  0625               	xorwf	___ftadd@exp2,w
  6659  0425  1903               	btfsc	3,2
  6660  0426  2C51               	goto	i1l581
  6661  0427  2C17               	goto	i1l2139
  6662  0428                     i1l2143:	
  6663  0428  0826               	movf	___ftadd@exp1,w
  6664  0429  0225               	subwf	___ftadd@exp2,w
  6665  042A  1803               	skipnc
  6666  042B  2C51               	goto	i1l581
  6667  042C                     i1l2145:	
  6668  042C  3001               	movlw	1
  6669  042D                     u245_25:	
  6670  042D  1003               	clrc
  6671  042E  0DF8               	rlf	___ftadd@f1,f
  6672  042F  0DF9               	rlf	___ftadd@f1+1,f
  6673  0430  0DFA               	rlf	___ftadd@f1+2,f
  6674  0431  3EFF               	addlw	-1
  6675  0432  1D03               	skipz
  6676  0433  2C2D               	goto	u245_25
  6677  0434  3001               	movlw	1
  6678  0435  02A6               	subwf	___ftadd@exp1,f
  6679  0436  0825               	movf	___ftadd@exp2,w
  6680  0437  0626               	xorwf	___ftadd@exp1,w
  6681  0438  1903               	skipnz
  6682  0439  2C4D               	goto	i1l2153
  6683  043A  3001               	movlw	1
  6684  043B  02A4               	subwf	___ftadd@sign,f
  6685  043C  0824               	movf	___ftadd@sign,w
  6686  043D  3907               	andlw	7
  6687  043E  1903               	btfsc	3,2
  6688  043F  2C4D               	goto	i1l2153
  6689  0440  2C2C               	goto	i1l2145
  6690  0441                     i1l2151:	
  6691  0441  3001               	movlw	1
  6692  0442                     u248_25:	
  6693  0442  1003               	clrc
  6694  0443  0CFD               	rrf	___ftadd@f2+2,f
  6695  0444  0CFC               	rrf	___ftadd@f2+1,f
  6696  0445  0CFB               	rrf	___ftadd@f2,f
  6697  0446  3EFF               	addlw	-1
  6698  0447  1D03               	skipz
  6699  0448  2C42               	goto	u248_25
  6700  0449  3001               	movlw	1
  6701  044A  00A0               	movwf	??___ftadd
  6702  044B  0820               	movf	??___ftadd,w
  6703  044C  07A5               	addwf	___ftadd@exp2,f
  6704  044D                     i1l2153:	
  6705  044D  0826               	movf	___ftadd@exp1,w
  6706  044E  0625               	xorwf	___ftadd@exp2,w
  6707  044F  1D03               	skipz
  6708  0450  2C41               	goto	i1l2151
  6709  0451                     i1l581:	
  6710  0451  1FA4               	btfss	___ftadd@sign,7
  6711  0452  2C63               	goto	i1l2157
  6712  0453  30FF               	movlw	255
  6713  0454  06F8               	xorwf	___ftadd@f1,f
  6714  0455  30FF               	movlw	255
  6715  0456  06F9               	xorwf	___ftadd@f1+1,f
  6716  0457  30FF               	movlw	255
  6717  0458  06FA               	xorwf	___ftadd@f1+2,f
  6718  0459  3001               	movlw	1
  6719  045A  07F8               	addwf	___ftadd@f1,f
  6720  045B  3000               	movlw	0
  6721  045C  1803               	skipnc
  6722  045D  3001               	movlw	1
  6723  045E  07F9               	addwf	___ftadd@f1+1,f
  6724  045F  3000               	movlw	0
  6725  0460  1803               	skipnc
  6726  0461  3001               	movlw	1
  6727  0462  07FA               	addwf	___ftadd@f1+2,f
  6728  0463                     i1l2157:	
  6729  0463  1F24               	btfss	___ftadd@sign,6
  6730  0464  2C75               	goto	i1l2161
  6731  0465  30FF               	movlw	255
  6732  0466  06FB               	xorwf	___ftadd@f2,f
  6733  0467  30FF               	movlw	255
  6734  0468  06FC               	xorwf	___ftadd@f2+1,f
  6735  0469  30FF               	movlw	255
  6736  046A  06FD               	xorwf	___ftadd@f2+2,f
  6737  046B  3001               	movlw	1
  6738  046C  07FB               	addwf	___ftadd@f2,f
  6739  046D  3000               	movlw	0
  6740  046E  1803               	skipnc
  6741  046F  3001               	movlw	1
  6742  0470  07FC               	addwf	___ftadd@f2+1,f
  6743  0471  3000               	movlw	0
  6744  0472  1803               	skipnc
  6745  0473  3001               	movlw	1
  6746  0474  07FD               	addwf	___ftadd@f2+2,f
  6747  0475                     i1l2161:	
  6748  0475  01A4               	clrf	___ftadd@sign
  6749  0476  0878               	movf	___ftadd@f1,w
  6750  0477  07FB               	addwf	___ftadd@f2,f
  6751  0478  0879               	movf	___ftadd@f1+1,w
  6752  0479  1103               	clrz
  6753  047A  1803               	skipnc
  6754  047B  0A79               	incf	___ftadd@f1+1,w
  6755  047C  1D03               	btfss	3,2
  6756  047D  07FC               	addwf	___ftadd@f2+1,f
  6757  047E  087A               	movf	___ftadd@f1+2,w
  6758  047F  1103               	clrz
  6759  0480  1803               	skipnc
  6760  0481  0A7A               	incf	___ftadd@f1+2,w
  6761  0482  1D03               	btfss	3,2
  6762  0483  07FD               	addwf	___ftadd@f2+2,f
  6763  0484  1FFD               	btfss	___ftadd@f2+2,7
  6764  0485  2C98               	goto	i1l2171
  6765  0486  30FF               	movlw	255
  6766  0487  06FB               	xorwf	___ftadd@f2,f
  6767  0488  30FF               	movlw	255
  6768  0489  06FC               	xorwf	___ftadd@f2+1,f
  6769  048A  30FF               	movlw	255
  6770  048B  06FD               	xorwf	___ftadd@f2+2,f
  6771  048C  3001               	movlw	1
  6772  048D  07FB               	addwf	___ftadd@f2,f
  6773  048E  3000               	movlw	0
  6774  048F  1803               	skipnc
  6775  0490  3001               	movlw	1
  6776  0491  07FC               	addwf	___ftadd@f2+1,f
  6777  0492  3000               	movlw	0
  6778  0493  1803               	skipnc
  6779  0494  3001               	movlw	1
  6780  0495  07FD               	addwf	___ftadd@f2+2,f
  6781  0496  01A4               	clrf	___ftadd@sign
  6782  0497  0AA4               	incf	___ftadd@sign,f
  6783  0498                     i1l2171:	
  6784  0498  087B               	movf	___ftadd@f2,w
  6785  0499  00F0               	movwf	___ftpack@arg
  6786  049A  087C               	movf	___ftadd@f2+1,w
  6787  049B  00F1               	movwf	___ftpack@arg+1
  6788  049C  087D               	movf	___ftadd@f2+2,w
  6789  049D  00F2               	movwf	___ftpack@arg+2
  6790  049E  0826               	movf	___ftadd@exp1,w
  6791  049F  00A0               	movwf	??___ftadd
  6792  04A0  0820               	movf	??___ftadd,w
  6793  04A1  00F3               	movwf	___ftpack@exp
  6794  04A2  0824               	movf	___ftadd@sign,w
  6795  04A3  00A1               	movwf	??___ftadd+1
  6796  04A4  0821               	movf	??___ftadd+1,w
  6797  04A5  00F4               	movwf	___ftpack@sign
  6798  04A6  120A  158A  2471   	fcall	___ftpack
  6799  04A9  0870               	movf	?___ftpack,w
  6800  04AA  00F8               	movwf	?___ftadd
  6801  04AB  0871               	movf	?___ftpack+1,w
  6802  04AC  00F9               	movwf	?___ftadd+1
  6803  04AD  0872               	movf	?___ftpack+2,w
  6804  04AE  00FA               	movwf	?___ftadd+2
  6805  04AF  0008               	return
  6806  04B0                     __end_of___ftadd:	
  6807                           
  6808                           	psect	text36
  6809  1649                     __ptext36:	
  6810 ;; *************** function ___ftneg *****************
  6811 ;; Defined at:
  6812 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;  f1              3    0[COMMON] float 
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  3    0[COMMON] float 
  6819 ;; Registers used:
  6820 ;;		wreg
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6826 ;;      Params:         3       0       0       0       0
  6827 ;;      Locals:         0       0       0       0       0
  6828 ;;      Temps:          0       0       0       0       0
  6829 ;;      Totals:         3       0       0       0       0
  6830 ;;Total ram usage:        3 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_ftoa
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function ___ftneg
  6841  1649                     ___ftneg:	
  6842                           
  6843                           ;incstack = 0
  6844 ;; hardware stack exceeded
  6845                           ; Regs used in ___ftneg: [wreg]
  6846  1649  0872               	movf	___ftneg@f1+2,w
  6847  164A  0471               	iorwf	___ftneg@f1+1,w
  6848  164B  0470               	iorwf	___ftneg@f1,w
  6849  164C  1903               	skipnz
  6850  164D  0008               	return
  6851  164E  3080               	movlw	128
  6852  164F  06F2               	xorwf	___ftneg@f1+2,f
  6853  1650  0008               	return
  6854  1651                     __end_of___ftneg:	
  6855                           
  6856                           	psect	text37
  6857  04B0                     __ptext37:	
  6858 ;; *************** function ___ftmul *****************
  6859 ;; Defined at:
  6860 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;  f1              3    0[BANK0 ] float 
  6863 ;;  f2              3    3[BANK0 ] float 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6866 ;;  sign            1   15[BANK0 ] unsigned char 
  6867 ;;  cntr            1   14[BANK0 ] unsigned char 
  6868 ;;  exp             1   10[BANK0 ] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  3    0[BANK0 ] float 
  6871 ;; Registers used:
  6872 ;;		wreg, status,2, status,0, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6878 ;;      Params:         0       6       0       0       0
  6879 ;;      Locals:         0       6       0       0       0
  6880 ;;      Temps:          0       4       0       0       0
  6881 ;;      Totals:         0      16       0       0       0
  6882 ;;Total ram usage:       16 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    1
  6885 ;; This function calls:
  6886 ;;		___ftpack
  6887 ;; This function is called by:
  6888 ;;		_ISR
  6889 ;;		_ftoa
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           
  6894                           ;psect for function ___ftmul
  6895  04B0                     ___ftmul:	
  6896                           
  6897                           ;incstack = 0
  6898 ;; hardware stack exceeded
  6899                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6900  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  6901  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  6902  04B2  0820               	movf	___ftmul@f1,w
  6903  04B3  00A6               	movwf	??___ftmul
  6904  04B4  0821               	movf	___ftmul@f1+1,w
  6905  04B5  00A7               	movwf	??___ftmul+1
  6906  04B6  0822               	movf	___ftmul@f1+2,w
  6907  04B7  00A8               	movwf	??___ftmul+2
  6908  04B8  1003               	clrc
  6909  04B9  0D27               	rlf	??___ftmul+1,w
  6910  04BA  0D28               	rlf	??___ftmul+2,w
  6911  04BB  00A9               	movwf	??___ftmul+3
  6912  04BC  0829               	movf	??___ftmul+3,w
  6913  04BD  00AA               	movwf	___ftmul@exp
  6914  04BE  08AA               	movf	___ftmul@exp,f
  6915  04BF  1D03               	skipz
  6916  04C0  2CC8               	goto	i1l2513
  6917  04C1  3000               	movlw	0
  6918  04C2  00A0               	movwf	?___ftmul
  6919  04C3  3000               	movlw	0
  6920  04C4  00A1               	movwf	?___ftmul+1
  6921  04C5  3000               	movlw	0
  6922  04C6  00A2               	movwf	?___ftmul+2
  6923  04C7  0008               	return
  6924  04C8                     i1l2513:	
  6925  04C8  0823               	movf	___ftmul@f2,w
  6926  04C9  00A6               	movwf	??___ftmul
  6927  04CA  0824               	movf	___ftmul@f2+1,w
  6928  04CB  00A7               	movwf	??___ftmul+1
  6929  04CC  0825               	movf	___ftmul@f2+2,w
  6930  04CD  00A8               	movwf	??___ftmul+2
  6931  04CE  1003               	clrc
  6932  04CF  0D27               	rlf	??___ftmul+1,w
  6933  04D0  0D28               	rlf	??___ftmul+2,w
  6934  04D1  00A9               	movwf	??___ftmul+3
  6935  04D2  0829               	movf	??___ftmul+3,w
  6936  04D3  00AF               	movwf	___ftmul@sign
  6937  04D4  08AF               	movf	___ftmul@sign,f
  6938  04D5  1D03               	skipz
  6939  04D6  2CDE               	goto	i1l2519
  6940  04D7  3000               	movlw	0
  6941  04D8  00A0               	movwf	?___ftmul
  6942  04D9  3000               	movlw	0
  6943  04DA  00A1               	movwf	?___ftmul+1
  6944  04DB  3000               	movlw	0
  6945  04DC  00A2               	movwf	?___ftmul+2
  6946  04DD  0008               	return
  6947  04DE                     i1l2519:	
  6948  04DE  082F               	movf	___ftmul@sign,w
  6949  04DF  3E7B               	addlw	123
  6950  04E0  00A6               	movwf	??___ftmul
  6951  04E1  0826               	movf	??___ftmul,w
  6952  04E2  07AA               	addwf	___ftmul@exp,f
  6953  04E3  0820               	movf	___ftmul@f1,w
  6954  04E4  00A6               	movwf	??___ftmul
  6955  04E5  0821               	movf	___ftmul@f1+1,w
  6956  04E6  00A7               	movwf	??___ftmul+1
  6957  04E7  0822               	movf	___ftmul@f1+2,w
  6958  04E8  00A8               	movwf	??___ftmul+2
  6959  04E9  3010               	movlw	16
  6960  04EA                     u311_25:	
  6961  04EA  1003               	clrc
  6962  04EB  0CA8               	rrf	??___ftmul+2,f
  6963  04EC  0CA7               	rrf	??___ftmul+1,f
  6964  04ED  0CA6               	rrf	??___ftmul,f
  6965  04EE  3EFF               	addlw	-1
  6966  04EF  1D03               	skipz
  6967  04F0  2CEA               	goto	u311_25
  6968  04F1  0826               	movf	??___ftmul,w
  6969  04F2  00A9               	movwf	??___ftmul+3
  6970  04F3  0829               	movf	??___ftmul+3,w
  6971  04F4  00AF               	movwf	___ftmul@sign
  6972  04F5  0823               	movf	___ftmul@f2,w
  6973  04F6  00A6               	movwf	??___ftmul
  6974  04F7  0824               	movf	___ftmul@f2+1,w
  6975  04F8  00A7               	movwf	??___ftmul+1
  6976  04F9  0825               	movf	___ftmul@f2+2,w
  6977  04FA  00A8               	movwf	??___ftmul+2
  6978  04FB  3010               	movlw	16
  6979  04FC                     u312_25:	
  6980  04FC  1003               	clrc
  6981  04FD  0CA8               	rrf	??___ftmul+2,f
  6982  04FE  0CA7               	rrf	??___ftmul+1,f
  6983  04FF  0CA6               	rrf	??___ftmul,f
  6984  0500  3EFF               	addlw	-1
  6985  0501  1D03               	skipz
  6986  0502  2CFC               	goto	u312_25
  6987  0503  0826               	movf	??___ftmul,w
  6988  0504  00A9               	movwf	??___ftmul+3
  6989  0505  0829               	movf	??___ftmul+3,w
  6990  0506  06AF               	xorwf	___ftmul@sign,f
  6991  0507  3080               	movlw	128
  6992  0508  00A6               	movwf	??___ftmul
  6993  0509  0826               	movf	??___ftmul,w
  6994  050A  05AF               	andwf	___ftmul@sign,f
  6995  050B  17A1               	bsf	___ftmul@f1+1,7
  6996  050C  17A4               	bsf	___ftmul@f2+1,7
  6997  050D  30FF               	movlw	255
  6998  050E  05A3               	andwf	___ftmul@f2,f
  6999  050F  30FF               	movlw	255
  7000  0510  05A4               	andwf	___ftmul@f2+1,f
  7001  0511  3000               	movlw	0
  7002  0512  05A5               	andwf	___ftmul@f2+2,f
  7003  0513  3000               	movlw	0
  7004  0514  00AB               	movwf	___ftmul@f3_as_product
  7005  0515  3000               	movlw	0
  7006  0516  00AC               	movwf	___ftmul@f3_as_product+1
  7007  0517  3000               	movlw	0
  7008  0518  00AD               	movwf	___ftmul@f3_as_product+2
  7009  0519  3007               	movlw	7
  7010  051A  00A6               	movwf	??___ftmul
  7011  051B  0826               	movf	??___ftmul,w
  7012  051C  00AE               	movwf	___ftmul@cntr
  7013  051D                     i1l2531:	
  7014  051D  1C20               	btfss	___ftmul@f1,0
  7015  051E  2D2D               	goto	i1l2535
  7016  051F  0823               	movf	___ftmul@f2,w
  7017  0520  07AB               	addwf	___ftmul@f3_as_product,f
  7018  0521  0824               	movf	___ftmul@f2+1,w
  7019  0522  1103               	clrz
  7020  0523  1803               	skipnc
  7021  0524  0A24               	incf	___ftmul@f2+1,w
  7022  0525  1D03               	btfss	3,2
  7023  0526  07AC               	addwf	___ftmul@f3_as_product+1,f
  7024  0527  0825               	movf	___ftmul@f2+2,w
  7025  0528  1103               	clrz
  7026  0529  1803               	skipnc
  7027  052A  0A25               	incf	___ftmul@f2+2,w
  7028  052B  1D03               	btfss	3,2
  7029  052C  07AD               	addwf	___ftmul@f3_as_product+2,f
  7030  052D                     i1l2535:	
  7031  052D  3001               	movlw	1
  7032  052E                     u315_25:	
  7033  052E  1003               	clrc
  7034  052F  0CA2               	rrf	___ftmul@f1+2,f
  7035  0530  0CA1               	rrf	___ftmul@f1+1,f
  7036  0531  0CA0               	rrf	___ftmul@f1,f
  7037  0532  3EFF               	addlw	-1
  7038  0533  1D03               	skipz
  7039  0534  2D2E               	goto	u315_25
  7040  0535  3001               	movlw	1
  7041  0536                     u316_25:	
  7042  0536  1003               	clrc
  7043  0537  0DA3               	rlf	___ftmul@f2,f
  7044  0538  0DA4               	rlf	___ftmul@f2+1,f
  7045  0539  0DA5               	rlf	___ftmul@f2+2,f
  7046  053A  3EFF               	addlw	-1
  7047  053B  1D03               	skipz
  7048  053C  2D36               	goto	u316_25
  7049  053D  3001               	movlw	1
  7050  053E  02AE               	subwf	___ftmul@cntr,f
  7051  053F  1D03               	btfss	3,2
  7052  0540  2D1D               	goto	i1l2531
  7053  0541  3009               	movlw	9
  7054  0542  00A6               	movwf	??___ftmul
  7055  0543  0826               	movf	??___ftmul,w
  7056  0544  00AE               	movwf	___ftmul@cntr
  7057  0545                     i1l2543:	
  7058  0545  1C20               	btfss	___ftmul@f1,0
  7059  0546  2D55               	goto	i1l2547
  7060  0547  0823               	movf	___ftmul@f2,w
  7061  0548  07AB               	addwf	___ftmul@f3_as_product,f
  7062  0549  0824               	movf	___ftmul@f2+1,w
  7063  054A  1103               	clrz
  7064  054B  1803               	skipnc
  7065  054C  0A24               	incf	___ftmul@f2+1,w
  7066  054D  1D03               	btfss	3,2
  7067  054E  07AC               	addwf	___ftmul@f3_as_product+1,f
  7068  054F  0825               	movf	___ftmul@f2+2,w
  7069  0550  1103               	clrz
  7070  0551  1803               	skipnc
  7071  0552  0A25               	incf	___ftmul@f2+2,w
  7072  0553  1D03               	btfss	3,2
  7073  0554  07AD               	addwf	___ftmul@f3_as_product+2,f
  7074  0555                     i1l2547:	
  7075  0555  3001               	movlw	1
  7076  0556                     u320_25:	
  7077  0556  1003               	clrc
  7078  0557  0CA2               	rrf	___ftmul@f1+2,f
  7079  0558  0CA1               	rrf	___ftmul@f1+1,f
  7080  0559  0CA0               	rrf	___ftmul@f1,f
  7081  055A  3EFF               	addlw	-1
  7082  055B  1D03               	skipz
  7083  055C  2D56               	goto	u320_25
  7084  055D  3001               	movlw	1
  7085  055E                     u321_25:	
  7086  055E  1003               	clrc
  7087  055F  0CAD               	rrf	___ftmul@f3_as_product+2,f
  7088  0560  0CAC               	rrf	___ftmul@f3_as_product+1,f
  7089  0561  0CAB               	rrf	___ftmul@f3_as_product,f
  7090  0562  3EFF               	addlw	-1
  7091  0563  1D03               	skipz
  7092  0564  2D5E               	goto	u321_25
  7093  0565  3001               	movlw	1
  7094  0566  02AE               	subwf	___ftmul@cntr,f
  7095  0567  1D03               	btfss	3,2
  7096  0568  2D45               	goto	i1l2543
  7097  0569  082B               	movf	___ftmul@f3_as_product,w
  7098  056A  00F0               	movwf	___ftpack@arg
  7099  056B  082C               	movf	___ftmul@f3_as_product+1,w
  7100  056C  00F1               	movwf	___ftpack@arg+1
  7101  056D  082D               	movf	___ftmul@f3_as_product+2,w
  7102  056E  00F2               	movwf	___ftpack@arg+2
  7103  056F  082A               	movf	___ftmul@exp,w
  7104  0570  00A6               	movwf	??___ftmul
  7105  0571  0826               	movf	??___ftmul,w
  7106  0572  00F3               	movwf	___ftpack@exp
  7107  0573  082F               	movf	___ftmul@sign,w
  7108  0574  00A7               	movwf	??___ftmul+1
  7109  0575  0827               	movf	??___ftmul+1,w
  7110  0576  00F4               	movwf	___ftpack@sign
  7111  0577  120A  158A  2471   	fcall	___ftpack
  7112  057A  0870               	movf	?___ftpack,w
  7113  057B  1283               	bcf	3,5	;RP0=0, select bank0
  7114  057C  1303               	bcf	3,6	;RP1=0, select bank0
  7115  057D  00A0               	movwf	?___ftmul
  7116  057E  0871               	movf	?___ftpack+1,w
  7117  057F  00A1               	movwf	?___ftmul+1
  7118  0580  0872               	movf	?___ftpack+2,w
  7119  0581  00A2               	movwf	?___ftmul+2
  7120  0582  0008               	return
  7121  0583                     __end_of___ftmul:	
  7122                           
  7123                           	psect	text38
  7124  0B50                     __ptext38:	
  7125 ;; *************** function ___ftge *****************
  7126 ;; Defined at:
  7127 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  ff1             3    0[COMMON] float 
  7130 ;;  ff2             3    3[COMMON] float 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;		None
  7133 ;; Return value:  Size  Location     Type
  7134 ;;		None               void
  7135 ;; Registers used:
  7136 ;;		wreg, status,2, status,0
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7142 ;;      Params:         6       0       0       0       0
  7143 ;;      Locals:         0       0       0       0       0
  7144 ;;      Temps:          6       0       0       0       0
  7145 ;;      Totals:        12       0       0       0       0
  7146 ;;Total ram usage:       12 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; This function calls:
  7149 ;;		Nothing
  7150 ;; This function is called by:
  7151 ;;		_ftoa
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function ___ftge
  7157  0B50                     ___ftge:	
  7158                           
  7159                           ;incstack = 0
  7160 ;; hardware stack exceeded
  7161                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7162  0B50  1FF2               	btfss	___ftge@ff1+2,7
  7163  0B51  2B77               	goto	i1l2491
  7164  0B52  3000               	movlw	0
  7165  0B53  00F6               	movwf	??___ftge
  7166  0B54  3000               	movlw	0
  7167  0B55  00F7               	movwf	??___ftge+1
  7168  0B56  3080               	movlw	128
  7169  0B57  00F8               	movwf	??___ftge+2
  7170  0B58  0970               	comf	___ftge@ff1,w
  7171  0B59  00F9               	movwf	??___ftge+3
  7172  0B5A  0971               	comf	___ftge@ff1+1,w
  7173  0B5B  00FA               	movwf	??___ftge+4
  7174  0B5C  0972               	comf	___ftge@ff1+2,w
  7175  0B5D  00FB               	movwf	??___ftge+5
  7176  0B5E  0AF9               	incf	??___ftge+3,f
  7177  0B5F  1903               	skipnz
  7178  0B60  0AFA               	incf	??___ftge+4,f
  7179  0B61  1903               	skipnz
  7180  0B62  0AFB               	incf	??___ftge+5,f
  7181  0B63  0879               	movf	??___ftge+3,w
  7182  0B64  07F6               	addwf	??___ftge,f
  7183  0B65  087A               	movf	??___ftge+4,w
  7184  0B66  1803               	skipnc
  7185  0B67  0F7A               	incfsz	??___ftge+4,w
  7186  0B68  2B6A               	goto	u305_21
  7187  0B69  2B6B               	goto	u305_22
  7188  0B6A                     u305_21:	
  7189  0B6A  07F7               	addwf	??___ftge+1,f
  7190  0B6B                     u305_22:	
  7191  0B6B  087B               	movf	??___ftge+5,w
  7192  0B6C  1803               	skipnc
  7193  0B6D  0F7B               	incfsz	??___ftge+5,w
  7194  0B6E  2B70               	goto	u305_23
  7195  0B6F  2B71               	goto	u305_24
  7196  0B70                     u305_23:	
  7197  0B70  07F8               	addwf	??___ftge+2,f
  7198  0B71                     u305_24:	
  7199  0B71  0876               	movf	??___ftge,w
  7200  0B72  00F0               	movwf	___ftge@ff1
  7201  0B73  0877               	movf	??___ftge+1,w
  7202  0B74  00F1               	movwf	___ftge@ff1+1
  7203  0B75  0878               	movf	??___ftge+2,w
  7204  0B76  00F2               	movwf	___ftge@ff1+2
  7205  0B77                     i1l2491:	
  7206  0B77  1FF5               	btfss	___ftge@ff2+2,7
  7207  0B78  2B9E               	goto	i1l2495
  7208  0B79  3000               	movlw	0
  7209  0B7A  00F6               	movwf	??___ftge
  7210  0B7B  3000               	movlw	0
  7211  0B7C  00F7               	movwf	??___ftge+1
  7212  0B7D  3080               	movlw	128
  7213  0B7E  00F8               	movwf	??___ftge+2
  7214  0B7F  0973               	comf	___ftge@ff2,w
  7215  0B80  00F9               	movwf	??___ftge+3
  7216  0B81  0974               	comf	___ftge@ff2+1,w
  7217  0B82  00FA               	movwf	??___ftge+4
  7218  0B83  0975               	comf	___ftge@ff2+2,w
  7219  0B84  00FB               	movwf	??___ftge+5
  7220  0B85  0AF9               	incf	??___ftge+3,f
  7221  0B86  1903               	skipnz
  7222  0B87  0AFA               	incf	??___ftge+4,f
  7223  0B88  1903               	skipnz
  7224  0B89  0AFB               	incf	??___ftge+5,f
  7225  0B8A  0879               	movf	??___ftge+3,w
  7226  0B8B  07F6               	addwf	??___ftge,f
  7227  0B8C  087A               	movf	??___ftge+4,w
  7228  0B8D  1803               	skipnc
  7229  0B8E  0F7A               	incfsz	??___ftge+4,w
  7230  0B8F  2B91               	goto	u307_21
  7231  0B90  2B92               	goto	u307_22
  7232  0B91                     u307_21:	
  7233  0B91  07F7               	addwf	??___ftge+1,f
  7234  0B92                     u307_22:	
  7235  0B92  087B               	movf	??___ftge+5,w
  7236  0B93  1803               	skipnc
  7237  0B94  0F7B               	incfsz	??___ftge+5,w
  7238  0B95  2B97               	goto	u307_23
  7239  0B96  2B98               	goto	u307_24
  7240  0B97                     u307_23:	
  7241  0B97  07F8               	addwf	??___ftge+2,f
  7242  0B98                     u307_24:	
  7243  0B98  0876               	movf	??___ftge,w
  7244  0B99  00F3               	movwf	___ftge@ff2
  7245  0B9A  0877               	movf	??___ftge+1,w
  7246  0B9B  00F4               	movwf	___ftge@ff2+1
  7247  0B9C  0878               	movf	??___ftge+2,w
  7248  0B9D  00F5               	movwf	___ftge@ff2+2
  7249  0B9E                     i1l2495:	
  7250  0B9E  3080               	movlw	128
  7251  0B9F  06F2               	xorwf	___ftge@ff1+2,f
  7252  0BA0  3080               	movlw	128
  7253  0BA1  06F5               	xorwf	___ftge@ff2+2,f
  7254  0BA2  0875               	movf	___ftge@ff2+2,w
  7255  0BA3  0272               	subwf	___ftge@ff1+2,w
  7256  0BA4  1D03               	skipz
  7257  0BA5  0008               	return
  7258  0BA6  0874               	movf	___ftge@ff2+1,w
  7259  0BA7  0271               	subwf	___ftge@ff1+1,w
  7260  0BA8  1D03               	skipz
  7261  0BA9  0008               	return
  7262  0BAA  0873               	movf	___ftge@ff2,w
  7263  0BAB  0270               	subwf	___ftge@ff1,w
  7264  0BAC  0008               	return
  7265  0BAD                     __end_of___ftge:	
  7266                           
  7267                           	psect	text39
  7268  063D                     __ptext39:	
  7269 ;; *************** function ___ftdiv *****************
  7270 ;; Defined at:
  7271 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  f2              3   16[BANK0 ] float 
  7274 ;;  f1              3   19[BANK0 ] float 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  f3              3   27[BANK0 ] float 
  7277 ;;  sign            1   31[BANK0 ] unsigned char 
  7278 ;;  exp             1   30[BANK0 ] unsigned char 
  7279 ;;  cntr            1   26[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  3   16[BANK0 ] float 
  7282 ;; Registers used:
  7283 ;;		wreg, status,2, status,0, pclath, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7289 ;;      Params:         0       6       0       0       0
  7290 ;;      Locals:         0       6       0       0       0
  7291 ;;      Temps:          0       4       0       0       0
  7292 ;;      Totals:         0      16       0       0       0
  7293 ;;Total ram usage:       16 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    1
  7296 ;; This function calls:
  7297 ;;		___ftpack
  7298 ;; This function is called by:
  7299 ;;		_ISR
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           
  7304                           ;psect for function ___ftdiv
  7305  063D                     ___ftdiv:	
  7306                           
  7307                           ;incstack = 0
  7308 ;; hardware stack exceeded
  7309                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7310  063D  1283               	bcf	3,5	;RP0=0, select bank0
  7311  063E  1303               	bcf	3,6	;RP1=0, select bank0
  7312  063F  0833               	movf	___ftdiv@f1,w
  7313  0640  00B6               	movwf	??___ftdiv
  7314  0641  0834               	movf	___ftdiv@f1+1,w
  7315  0642  00B7               	movwf	??___ftdiv+1
  7316  0643  0835               	movf	___ftdiv@f1+2,w
  7317  0644  00B8               	movwf	??___ftdiv+2
  7318  0645  1003               	clrc
  7319  0646  0D37               	rlf	??___ftdiv+1,w
  7320  0647  0D38               	rlf	??___ftdiv+2,w
  7321  0648  00B9               	movwf	??___ftdiv+3
  7322  0649  0839               	movf	??___ftdiv+3,w
  7323  064A  00BE               	movwf	___ftdiv@exp
  7324  064B  08BE               	movf	___ftdiv@exp,f
  7325  064C  1D03               	skipz
  7326  064D  2E55               	goto	i1l2861
  7327  064E  3000               	movlw	0
  7328  064F  00B0               	movwf	?___ftdiv
  7329  0650  3000               	movlw	0
  7330  0651  00B1               	movwf	?___ftdiv+1
  7331  0652  3000               	movlw	0
  7332  0653  00B2               	movwf	?___ftdiv+2
  7333  0654  0008               	return
  7334  0655                     i1l2861:	
  7335  0655  0830               	movf	___ftdiv@f2,w
  7336  0656  00B6               	movwf	??___ftdiv
  7337  0657  0831               	movf	___ftdiv@f2+1,w
  7338  0658  00B7               	movwf	??___ftdiv+1
  7339  0659  0832               	movf	___ftdiv@f2+2,w
  7340  065A  00B8               	movwf	??___ftdiv+2
  7341  065B  1003               	clrc
  7342  065C  0D37               	rlf	??___ftdiv+1,w
  7343  065D  0D38               	rlf	??___ftdiv+2,w
  7344  065E  00B9               	movwf	??___ftdiv+3
  7345  065F  0839               	movf	??___ftdiv+3,w
  7346  0660  00BF               	movwf	___ftdiv@sign
  7347  0661  08BF               	movf	___ftdiv@sign,f
  7348  0662  1D03               	skipz
  7349  0663  2E6B               	goto	i1l2867
  7350  0664  3000               	movlw	0
  7351  0665  00B0               	movwf	?___ftdiv
  7352  0666  3000               	movlw	0
  7353  0667  00B1               	movwf	?___ftdiv+1
  7354  0668  3000               	movlw	0
  7355  0669  00B2               	movwf	?___ftdiv+2
  7356  066A  0008               	return
  7357  066B                     i1l2867:	
  7358  066B  3000               	movlw	0
  7359  066C  00BB               	movwf	___ftdiv@f3
  7360  066D  3000               	movlw	0
  7361  066E  00BC               	movwf	___ftdiv@f3+1
  7362  066F  3000               	movlw	0
  7363  0670  00BD               	movwf	___ftdiv@f3+2
  7364  0671  3089               	movlw	137
  7365  0672  073F               	addwf	___ftdiv@sign,w
  7366  0673  00B6               	movwf	??___ftdiv
  7367  0674  0836               	movf	??___ftdiv,w
  7368  0675  02BE               	subwf	___ftdiv@exp,f
  7369  0676  0833               	movf	___ftdiv@f1,w
  7370  0677  00B6               	movwf	??___ftdiv
  7371  0678  0834               	movf	___ftdiv@f1+1,w
  7372  0679  00B7               	movwf	??___ftdiv+1
  7373  067A  0835               	movf	___ftdiv@f1+2,w
  7374  067B  00B8               	movwf	??___ftdiv+2
  7375  067C  3010               	movlw	16
  7376  067D                     u362_25:	
  7377  067D  1003               	clrc
  7378  067E  0CB8               	rrf	??___ftdiv+2,f
  7379  067F  0CB7               	rrf	??___ftdiv+1,f
  7380  0680  0CB6               	rrf	??___ftdiv,f
  7381  0681  3EFF               	addlw	-1
  7382  0682  1D03               	skipz
  7383  0683  2E7D               	goto	u362_25
  7384  0684  0836               	movf	??___ftdiv,w
  7385  0685  00B9               	movwf	??___ftdiv+3
  7386  0686  0839               	movf	??___ftdiv+3,w
  7387  0687  00BF               	movwf	___ftdiv@sign
  7388  0688  0830               	movf	___ftdiv@f2,w
  7389  0689  00B6               	movwf	??___ftdiv
  7390  068A  0831               	movf	___ftdiv@f2+1,w
  7391  068B  00B7               	movwf	??___ftdiv+1
  7392  068C  0832               	movf	___ftdiv@f2+2,w
  7393  068D  00B8               	movwf	??___ftdiv+2
  7394  068E  3010               	movlw	16
  7395  068F                     u363_25:	
  7396  068F  1003               	clrc
  7397  0690  0CB8               	rrf	??___ftdiv+2,f
  7398  0691  0CB7               	rrf	??___ftdiv+1,f
  7399  0692  0CB6               	rrf	??___ftdiv,f
  7400  0693  3EFF               	addlw	-1
  7401  0694  1D03               	skipz
  7402  0695  2E8F               	goto	u363_25
  7403  0696  0836               	movf	??___ftdiv,w
  7404  0697  00B9               	movwf	??___ftdiv+3
  7405  0698  0839               	movf	??___ftdiv+3,w
  7406  0699  06BF               	xorwf	___ftdiv@sign,f
  7407  069A  3080               	movlw	128
  7408  069B  00B6               	movwf	??___ftdiv
  7409  069C  0836               	movf	??___ftdiv,w
  7410  069D  05BF               	andwf	___ftdiv@sign,f
  7411  069E  17B4               	bsf	___ftdiv@f1+1,7
  7412  069F  30FF               	movlw	255
  7413  06A0  05B3               	andwf	___ftdiv@f1,f
  7414  06A1  30FF               	movlw	255
  7415  06A2  05B4               	andwf	___ftdiv@f1+1,f
  7416  06A3  3000               	movlw	0
  7417  06A4  05B5               	andwf	___ftdiv@f1+2,f
  7418  06A5  17B1               	bsf	___ftdiv@f2+1,7
  7419  06A6  30FF               	movlw	255
  7420  06A7  05B0               	andwf	___ftdiv@f2,f
  7421  06A8  30FF               	movlw	255
  7422  06A9  05B1               	andwf	___ftdiv@f2+1,f
  7423  06AA  3000               	movlw	0
  7424  06AB  05B2               	andwf	___ftdiv@f2+2,f
  7425  06AC  3018               	movlw	24
  7426  06AD  00B6               	movwf	??___ftdiv
  7427  06AE  0836               	movf	??___ftdiv,w
  7428  06AF  00BA               	movwf	___ftdiv@cntr
  7429  06B0                     i1l2881:	
  7430  06B0  3001               	movlw	1
  7431  06B1                     u364_25:	
  7432  06B1  1003               	clrc
  7433  06B2  0DBB               	rlf	___ftdiv@f3,f
  7434  06B3  0DBC               	rlf	___ftdiv@f3+1,f
  7435  06B4  0DBD               	rlf	___ftdiv@f3+2,f
  7436  06B5  3EFF               	addlw	-1
  7437  06B6  1D03               	skipz
  7438  06B7  2EB1               	goto	u364_25
  7439  06B8  0832               	movf	___ftdiv@f2+2,w
  7440  06B9  0235               	subwf	___ftdiv@f1+2,w
  7441  06BA  1D03               	skipz
  7442  06BB  2EC2               	goto	u365_25
  7443  06BC  0831               	movf	___ftdiv@f2+1,w
  7444  06BD  0234               	subwf	___ftdiv@f1+1,w
  7445  06BE  1D03               	skipz
  7446  06BF  2EC2               	goto	u365_25
  7447  06C0  0830               	movf	___ftdiv@f2,w
  7448  06C1  0233               	subwf	___ftdiv@f1,w
  7449  06C2                     u365_25:	
  7450  06C2  1C03               	skipc
  7451  06C3  2ECF               	goto	i1l2889
  7452  06C4  0830               	movf	___ftdiv@f2,w
  7453  06C5  02B3               	subwf	___ftdiv@f1,f
  7454  06C6  0831               	movf	___ftdiv@f2+1,w
  7455  06C7  1C03               	skipc
  7456  06C8  0F31               	incfsz	___ftdiv@f2+1,w
  7457  06C9  02B4               	subwf	___ftdiv@f1+1,f
  7458  06CA  0832               	movf	___ftdiv@f2+2,w
  7459  06CB  1C03               	skipc
  7460  06CC  0A32               	incf	___ftdiv@f2+2,w
  7461  06CD  02B5               	subwf	___ftdiv@f1+2,f
  7462  06CE  143B               	bsf	___ftdiv@f3,0
  7463  06CF                     i1l2889:	
  7464  06CF  3001               	movlw	1
  7465  06D0                     u366_25:	
  7466  06D0  1003               	clrc
  7467  06D1  0DB3               	rlf	___ftdiv@f1,f
  7468  06D2  0DB4               	rlf	___ftdiv@f1+1,f
  7469  06D3  0DB5               	rlf	___ftdiv@f1+2,f
  7470  06D4  3EFF               	addlw	-1
  7471  06D5  1D03               	skipz
  7472  06D6  2ED0               	goto	u366_25
  7473  06D7  3001               	movlw	1
  7474  06D8  02BA               	subwf	___ftdiv@cntr,f
  7475  06D9  1D03               	btfss	3,2
  7476  06DA  2EB0               	goto	i1l2881
  7477  06DB  083B               	movf	___ftdiv@f3,w
  7478  06DC  00F0               	movwf	___ftpack@arg
  7479  06DD  083C               	movf	___ftdiv@f3+1,w
  7480  06DE  00F1               	movwf	___ftpack@arg+1
  7481  06DF  083D               	movf	___ftdiv@f3+2,w
  7482  06E0  00F2               	movwf	___ftpack@arg+2
  7483  06E1  083E               	movf	___ftdiv@exp,w
  7484  06E2  00B6               	movwf	??___ftdiv
  7485  06E3  0836               	movf	??___ftdiv,w
  7486  06E4  00F3               	movwf	___ftpack@exp
  7487  06E5  083F               	movf	___ftdiv@sign,w
  7488  06E6  00B7               	movwf	??___ftdiv+1
  7489  06E7  0837               	movf	??___ftdiv+1,w
  7490  06E8  00F4               	movwf	___ftpack@sign
  7491  06E9  120A  158A  2471   	fcall	___ftpack
  7492  06EC  0870               	movf	?___ftpack,w
  7493  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  7494  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  7495  06EF  00B0               	movwf	?___ftdiv
  7496  06F0  0871               	movf	?___ftpack+1,w
  7497  06F1  00B1               	movwf	?___ftdiv+1
  7498  06F2  0872               	movf	?___ftpack+2,w
  7499  06F3  00B2               	movwf	?___ftdiv+2
  7500  06F4  0008               	return
  7501  06F5                     __end_of___ftdiv:	
  7502                           
  7503                           	psect	text40
  7504  1720                     __ptext40:	
  7505 ;; *************** function ___awtoft *****************
  7506 ;; Defined at:
  7507 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  c               2    8[COMMON] int 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  sign            1   13[COMMON] unsigned char 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  3    8[COMMON] float 
  7514 ;; Registers used:
  7515 ;;		wreg, status,2, status,0, pclath, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7521 ;;      Params:         3       0       0       0       0
  7522 ;;      Locals:         1       0       0       0       0
  7523 ;;      Temps:          2       0       0       0       0
  7524 ;;      Totals:         6       0       0       0       0
  7525 ;;Total ram usage:        6 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    1
  7528 ;; This function calls:
  7529 ;;		___ftpack
  7530 ;; This function is called by:
  7531 ;;		_ISR
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           
  7536                           ;psect for function ___awtoft
  7537  1720                     ___awtoft:	
  7538                           
  7539                           ;incstack = 0
  7540 ;; hardware stack exceeded
  7541                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7542  1720  01FD               	clrf	___awtoft@sign
  7543  1721  1FF9               	btfss	___awtoft@c+1,7
  7544  1722  2F2A               	goto	i1l2851
  7545  1723  09F8               	comf	___awtoft@c,f
  7546  1724  09F9               	comf	___awtoft@c+1,f
  7547  1725  0AF8               	incf	___awtoft@c,f
  7548  1726  1903               	skipnz
  7549  1727  0AF9               	incf	___awtoft@c+1,f
  7550  1728  01FD               	clrf	___awtoft@sign
  7551  1729  0AFD               	incf	___awtoft@sign,f
  7552  172A                     i1l2851:	
  7553  172A  0878               	movf	___awtoft@c,w
  7554  172B  00F0               	movwf	___ftpack@arg
  7555  172C  0879               	movf	___awtoft@c+1,w
  7556  172D  00F1               	movwf	___ftpack@arg+1
  7557  172E  01F2               	clrf	___ftpack@arg+2
  7558  172F  308E               	movlw	142
  7559  1730  00FB               	movwf	??___awtoft
  7560  1731  087B               	movf	??___awtoft,w
  7561  1732  00F3               	movwf	___ftpack@exp
  7562  1733  087D               	movf	___awtoft@sign,w
  7563  1734  00FC               	movwf	??___awtoft+1
  7564  1735  087C               	movf	??___awtoft+1,w
  7565  1736  00F4               	movwf	___ftpack@sign
  7566  1737  120A  158A  2471   	fcall	___ftpack
  7567  173A  0870               	movf	?___ftpack,w
  7568  173B  00F8               	movwf	?___awtoft
  7569  173C  0871               	movf	?___ftpack+1,w
  7570  173D  00F9               	movwf	?___awtoft+1
  7571  173E  0872               	movf	?___ftpack+2,w
  7572  173F  00FA               	movwf	?___awtoft+2
  7573  1740  0008               	return
  7574  1741                     __end_of___awtoft:	
  7575                           
  7576                           	psect	text41
  7577  0C71                     __ptext41:	
  7578 ;; *************** function ___ftpack *****************
  7579 ;; Defined at:
  7580 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  arg             3    0[COMMON] unsigned um
  7583 ;;  exp             1    3[COMMON] unsigned char 
  7584 ;;  sign            1    4[COMMON] unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  3    0[COMMON] float 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7596 ;;      Params:         5       0       0       0       0
  7597 ;;      Locals:         0       0       0       0       0
  7598 ;;      Temps:          3       0       0       0       0
  7599 ;;      Totals:         8       0       0       0       0
  7600 ;;Total ram usage:        8 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		___awtoft
  7606 ;;		___ftadd
  7607 ;;		___ftdiv
  7608 ;;		___ftmul
  7609 ;;		___lltoft
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function ___ftpack
  7615  0C71                     ___ftpack:	
  7616                           
  7617                           ;incstack = 0
  7618 ;; hardware stack exceeded
  7619                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7620  0C71  0873               	movf	___ftpack@exp,w
  7621  0C72  1903               	btfsc	3,2
  7622  0C73  2C79               	goto	i1l1983
  7623  0C74  0872               	movf	___ftpack@arg+2,w
  7624  0C75  0471               	iorwf	___ftpack@arg+1,w
  7625  0C76  0470               	iorwf	___ftpack@arg,w
  7626  0C77  1D03               	skipz
  7627  0C78  2C8C               	goto	i1l1989
  7628  0C79                     i1l1983:	
  7629  0C79  3000               	movlw	0
  7630  0C7A  00F0               	movwf	?___ftpack
  7631  0C7B  3000               	movlw	0
  7632  0C7C  00F1               	movwf	?___ftpack+1
  7633  0C7D  3000               	movlw	0
  7634  0C7E  00F2               	movwf	?___ftpack+2
  7635  0C7F  0008               	return
  7636  0C80                     i1l1987:	
  7637  0C80  3001               	movlw	1
  7638  0C81  00F5               	movwf	??___ftpack
  7639  0C82  0875               	movf	??___ftpack,w
  7640  0C83  07F3               	addwf	___ftpack@exp,f
  7641  0C84  3001               	movlw	1
  7642  0C85                     u203_25:	
  7643  0C85  1003               	clrc
  7644  0C86  0CF2               	rrf	___ftpack@arg+2,f
  7645  0C87  0CF1               	rrf	___ftpack@arg+1,f
  7646  0C88  0CF0               	rrf	___ftpack@arg,f
  7647  0C89  3EFF               	addlw	-1
  7648  0C8A  1D03               	skipz
  7649  0C8B  2C85               	goto	u203_25
  7650  0C8C                     i1l1989:	
  7651  0C8C  30FE               	movlw	254
  7652  0C8D  0572               	andwf	___ftpack@arg+2,w
  7653  0C8E  1903               	btfsc	3,2
  7654  0C8F  2CA7               	goto	i1l552
  7655  0C90  2C80               	goto	i1l1987
  7656  0C91                     i1l1991:	
  7657  0C91  3001               	movlw	1
  7658  0C92  00F5               	movwf	??___ftpack
  7659  0C93  0875               	movf	??___ftpack,w
  7660  0C94  07F3               	addwf	___ftpack@exp,f
  7661  0C95  3001               	movlw	1
  7662  0C96  07F0               	addwf	___ftpack@arg,f
  7663  0C97  3000               	movlw	0
  7664  0C98  1803               	skipnc
  7665  0C99  3001               	movlw	1
  7666  0C9A  07F1               	addwf	___ftpack@arg+1,f
  7667  0C9B  3000               	movlw	0
  7668  0C9C  1803               	skipnc
  7669  0C9D  3001               	movlw	1
  7670  0C9E  07F2               	addwf	___ftpack@arg+2,f
  7671  0C9F  3001               	movlw	1
  7672  0CA0                     u205_25:	
  7673  0CA0  1003               	clrc
  7674  0CA1  0CF2               	rrf	___ftpack@arg+2,f
  7675  0CA2  0CF1               	rrf	___ftpack@arg+1,f
  7676  0CA3  0CF0               	rrf	___ftpack@arg,f
  7677  0CA4  3EFF               	addlw	-1
  7678  0CA5  1D03               	skipz
  7679  0CA6  2CA0               	goto	u205_25
  7680  0CA7                     i1l552:	
  7681  0CA7  30FF               	movlw	255
  7682  0CA8  0572               	andwf	___ftpack@arg+2,w
  7683  0CA9  1903               	btfsc	3,2
  7684  0CAA  2CB6               	goto	i1l1999
  7685  0CAB  2C91               	goto	i1l1991
  7686  0CAC                     i1l1997:	
  7687  0CAC  3001               	movlw	1
  7688  0CAD  02F3               	subwf	___ftpack@exp,f
  7689  0CAE  3001               	movlw	1
  7690  0CAF                     u207_25:	
  7691  0CAF  1003               	clrc
  7692  0CB0  0DF0               	rlf	___ftpack@arg,f
  7693  0CB1  0DF1               	rlf	___ftpack@arg+1,f
  7694  0CB2  0DF2               	rlf	___ftpack@arg+2,f
  7695  0CB3  3EFF               	addlw	-1
  7696  0CB4  1D03               	skipz
  7697  0CB5  2CAF               	goto	u207_25
  7698  0CB6                     i1l1999:	
  7699  0CB6  1FF1               	btfss	___ftpack@arg+1,7
  7700  0CB7  2CAC               	goto	i1l1997
  7701  0CB8  1873               	btfsc	___ftpack@exp,0
  7702  0CB9  2CC0               	goto	i1l558
  7703  0CBA  30FF               	movlw	255
  7704  0CBB  05F0               	andwf	___ftpack@arg,f
  7705  0CBC  307F               	movlw	127
  7706  0CBD  05F1               	andwf	___ftpack@arg+1,f
  7707  0CBE  30FF               	movlw	255
  7708  0CBF  05F2               	andwf	___ftpack@arg+2,f
  7709  0CC0                     i1l558:	
  7710  0CC0  1003               	clrc
  7711  0CC1  0CF3               	rrf	___ftpack@exp,f
  7712  0CC2  0873               	movf	___ftpack@exp,w
  7713  0CC3  00F5               	movwf	??___ftpack
  7714  0CC4  01F6               	clrf	??___ftpack+1
  7715  0CC5  01F7               	clrf	??___ftpack+2
  7716  0CC6  3010               	movlw	16
  7717  0CC7                     u210_25:	
  7718  0CC7  1003               	clrc
  7719  0CC8  0DF5               	rlf	??___ftpack,f
  7720  0CC9  0DF6               	rlf	??___ftpack+1,f
  7721  0CCA  0DF7               	rlf	??___ftpack+2,f
  7722  0CCB  3EFF               	addlw	-1
  7723  0CCC  1D03               	skipz
  7724  0CCD  2CC7               	goto	u210_25
  7725  0CCE  0875               	movf	??___ftpack,w
  7726  0CCF  04F0               	iorwf	___ftpack@arg,f
  7727  0CD0  0876               	movf	??___ftpack+1,w
  7728  0CD1  04F1               	iorwf	___ftpack@arg+1,f
  7729  0CD2  0877               	movf	??___ftpack+2,w
  7730  0CD3  04F2               	iorwf	___ftpack@arg+2,f
  7731  0CD4  0874               	movf	___ftpack@sign,w
  7732  0CD5  1903               	btfsc	3,2
  7733  0CD6  0008               	return
  7734  0CD7  17F2               	bsf	___ftpack@arg+2,7
  7735  0CD8  0008               	return
  7736  0CD9                     __end_of___ftpack:	
  7737                           
  7738                           	psect	text42
  7739  16CD                     __ptext42:	
  7740 ;; *************** function _USARTReceiveChar *****************
  7741 ;; Defined at:
  7742 ;;		line 90 in file "main.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  USARTData       1    4[COMMON] unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      unsigned char 
  7749 ;; Registers used:
  7750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7756 ;;      Params:         0       0       0       0       0
  7757 ;;      Locals:         1       0       0       0       0
  7758 ;;      Temps:          1       0       0       0       0
  7759 ;;      Totals:         2       0       0       0       0
  7760 ;;Total ram usage:        2 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    2
  7763 ;; This function calls:
  7764 ;;		_USARTWriteString
  7765 ;; This function is called by:
  7766 ;;		_ISR
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _USARTReceiveChar
  7772  16CD                     _USARTReceiveChar:	
  7773                           
  7774                           ;main.c: 92: unsigned char USARTData;
  7775                           ;main.c: 94: if (!OERR)
  7776                           
  7777                           ;incstack = 0
  7778 ;; hardware stack exceeded
  7779                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7780  16CD  1283               	bcf	3,5	;RP0=0, select bank0
  7781  16CE  1303               	bcf	3,6	;RP1=0, select bank0
  7782  16CF  1898               	btfsc	24,1	;volatile
  7783  16D0  2ED6               	goto	i1l2671
  7784                           
  7785                           ;main.c: 95: {
  7786                           ;main.c: 96: USARTData = RCREG;
  7787  16D1  081A               	movf	26,w	;volatile
  7788  16D2  00F3               	movwf	??_USARTReceiveChar
  7789  16D3  0873               	movf	??_USARTReceiveChar,w
  7790  16D4  00F4               	movwf	USARTReceiveChar@USARTData
  7791  16D5  2EE5               	goto	i1l2679
  7792  16D6                     i1l2671:	
  7793                           ;main.c: 98: } else {
  7794                           
  7795                           ;main.c: 97: PIR1bits.RCIF = 0;
  7796                           
  7797                           
  7798                           ;main.c: 99: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7799  16D6  3033               	movlw	low (STR_1-__stringbase)
  7800  16D7  00F1               	movwf	USARTWriteString@str
  7801  16D8  3080               	movlw	128
  7802  16D9  00F2               	movwf	USARTWriteString@str+1
  7803  16DA  160A  118A  2741   	fcall	_USARTWriteString
  7804                           
  7805                           ;main.c: 101: RCSTAbits.CREN = 0;
  7806  16DD  1283               	bcf	3,5	;RP0=0, select bank0
  7807  16DE  1303               	bcf	3,6	;RP1=0, select bank0
  7808  16DF  1218               	bcf	24,4	;volatile
  7809                           
  7810                           ;main.c: 102: USARTData = RCREG;
  7811  16E0  081A               	movf	26,w	;volatile
  7812  16E1  00F3               	movwf	??_USARTReceiveChar
  7813  16E2  0873               	movf	??_USARTReceiveChar,w
  7814  16E3  00F4               	movwf	USARTReceiveChar@USARTData
  7815                           
  7816                           ;main.c: 103: RCSTAbits.CREN = 1;
  7817  16E4  1618               	bsf	24,4	;volatile
  7818  16E5                     i1l2679:	
  7819                           
  7820                           ;main.c: 104: PIR1bits.RCIF = 0;
  7821  16E5  128C               	bcf	12,5	;volatile
  7822                           
  7823                           ;main.c: 105: }
  7824                           ;main.c: 107: return (USARTData);
  7825  16E6  0874               	movf	USARTReceiveChar@USARTData,w
  7826  16E7  0008               	return
  7827  16E8                     __end_of_USARTReceiveChar:	
  7828                           
  7829                           	psect	text43
  7830  1741                     __ptext43:	
  7831 ;; *************** function _USARTWriteString *****************
  7832 ;; Defined at:
  7833 ;;		line 79 in file "main.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  str             2    1[COMMON] PTR const unsigned char 
  7836 ;;		 -> sendSerial@origem(40), STR_1(40), 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;		None               void
  7841 ;; Registers used:
  7842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7848 ;;      Params:         2       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0
  7851 ;;      Totals:         2       0       0       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    1
  7855 ;; This function calls:
  7856 ;;		i1_USARTWriteChar
  7857 ;; This function is called by:
  7858 ;;		_USARTReceiveChar
  7859 ;;		_sendSerial
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           
  7864                           ;psect for function _USARTWriteString
  7865  1741                     _USARTWriteString:	
  7866  1741                     i1l2291:	
  7867                           ;main.c: 81: while (*str != '\0') {
  7868                           
  7869                           ;incstack = 0
  7870 ;; hardware stack exceeded
  7871                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7872                           
  7873  1741  0872               	movf	USARTWriteString@str+1,w
  7874  1742  1283               	bcf	3,5	;RP0=0, select bank0
  7875  1743  1303               	bcf	3,6	;RP1=0, select bank0
  7876  1744  00FF               	movwf	127
  7877  1745  0871               	movf	USARTWriteString@str,w
  7878  1746  0084               	movwf	4
  7879  1747  120A  158A  2000  160A  118A  	fcall	stringtab
  7880  174C  3800               	iorlw	0
  7881  174D  1903               	btfsc	3,2
  7882  174E  0008               	return
  7883                           
  7884                           ;main.c: 83: USARTWriteChar(*str);
  7885  174F  0872               	movf	USARTWriteString@str+1,w
  7886  1750  1283               	bcf	3,5	;RP0=0, select bank0
  7887  1751  1303               	bcf	3,6	;RP1=0, select bank0
  7888  1752  00FF               	movwf	127
  7889  1753  0871               	movf	USARTWriteString@str,w
  7890  1754  0084               	movwf	4
  7891  1755  120A  158A  2000  160A  118A  	fcall	stringtab
  7892  175A  160A  118A  2641  160A  118A  	fcall	i1_USARTWriteChar
  7893                           
  7894                           ;main.c: 84: str++;
  7895  175F  3001               	movlw	1
  7896  1760  07F1               	addwf	USARTWriteString@str,f
  7897  1761  1803               	skipnc
  7898  1762  0AF2               	incf	USARTWriteString@str+1,f
  7899  1763  2F41               	goto	i1l2291
  7900  1764                     __end_of_USARTWriteString:	
  7901                           
  7902                           	psect	text44
  7903  1641                     __ptext44:	
  7904 ;; *************** function i1_USARTWriteChar *****************
  7905 ;; Defined at:
  7906 ;;		line 72 in file "main.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;  USARTData       1    wreg     unsigned char 
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;  USARTData       1    0[COMMON] unsigned char 
  7911 ;; Return value:  Size  Location     Type
  7912 ;;		None               void
  7913 ;; Registers used:
  7914 ;;		wreg
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7920 ;;      Params:         0       0       0       0       0
  7921 ;;      Locals:         1       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0
  7923 ;;      Totals:         1       0       0       0       0
  7924 ;;Total ram usage:        1 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; This function calls:
  7927 ;;		Nothing
  7928 ;; This function is called by:
  7929 ;;		_USARTWriteString
  7930 ;;		_ISR
  7931 ;;		i1_Ativar
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           
  7936                           ;psect for function i1_USARTWriteChar
  7937  1641                     i1_USARTWriteChar:	
  7938                           
  7939                           ;incstack = 0
  7940                           ; Regs used in i1_USARTWriteChar: [wreg]
  7941                           ;i1USARTWriteChar@USARTData stored from wreg
  7942  1641  00F0               	movwf	i1USARTWriteChar@USARTData
  7943  1642                     i1l88:	
  7944                           ;main.c: 73: while (!PIR1bits.TXIF);
  7945                           
  7946  1642  1283               	bcf	3,5	;RP0=0, select bank0
  7947  1643  1303               	bcf	3,6	;RP1=0, select bank0
  7948  1644  1E0C               	btfss	12,4	;volatile
  7949  1645  2E42               	goto	i1l88
  7950                           
  7951                           ;main.c: 74: TXREG = USARTData;
  7952  1646  0870               	movf	i1USARTWriteChar@USARTData,w
  7953  1647  0099               	movwf	25	;volatile
  7954  1648  0008               	return
  7955  1649                     __end_ofi1_USARTWriteChar:	
  7956  007E                     btemp	set	126	;btemp
  7957  007E                     wtemp	set	126
  7958  007E                     wtemp0	set	126
  7959  0080                     wtemp1	set	128
  7960  0082                     wtemp2	set	130
  7961  0084                     wtemp3	set	132
  7962  0086                     wtemp4	set	134
  7963  0088                     wtemp5	set	136
  7964  007F                     wtemp6	set	127
  7965  007E                     ttemp	set	126
  7966  007E                     ttemp0	set	126
  7967  0081                     ttemp1	set	129
  7968  0084                     ttemp2	set	132
  7969  0087                     ttemp3	set	135
  7970  007F                     ttemp4	set	127
  7971  007E                     ltemp	set	126
  7972  007E                     ltemp0	set	126
  7973  0082                     ltemp1	set	130
  7974  0086                     ltemp2	set	134
  7975  0080                     ltemp3	set	128


Data Sizes:
    Strings     76
    Constant    50
    Data        18
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      79
    BANK1            80     30      71
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status(BANK0[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_5(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S685$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK1[17]), STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> progressBar@aux(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    progressBar@result	PTR unsigned char  size(1) Largest target is 16
		 -> progressBar@aux(BANK0[16]), 

    sendSerial@envio	PTR const unsigned char  size(1) Largest target is 40
		 -> sendSerial@origem(BANK0[40]), 

    sendSerial@nivelRecipiente	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> sendSerial@origem(BANK0[40]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    _sendSerial->_USARTWriteString
    _refresh->i1_Ativar
    i1_Ativar->i1_USARTWriteChar
    _progressBar->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _USARTReceiveChar->_USARTWriteString
    _USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_inicialize
    _inicialize->_USARTInit
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTInit->___aldiv
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble
    _ativar->_ADCRead
    _ativar->_Ativar
    _Ativar->_USARTWriteChar

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4601
                             _ativar
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    4275
                                             27 BANK1      3     3      0
                            _ADCInit
                           _LCDClear
                          _USARTInit
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    1922
                                             12 BANK1      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    1661
                                              9 BANK1      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1     951
                                              5 BANK1      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0     868
                                              5 BANK1      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                           12     6      6     819
                                             15 BANK1     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     556
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     666
                                              5 BANK1      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     666
                                              2 BANK1      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0      88
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ativar                                               3     3      0     326
                                              3 BANK1      3     3      0
                            _ADCRead
                             _Ativar
 ---------------------------------------------------------------------------------
 (2) _Ativar                                               2     2      0     154
                                              1 BANK1      2     2      0
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2     172
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 21    21      0   23489
                                             50 BANK0     21    21      0
                   _USARTReceiveChar
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                        _progressBar
                            _refresh
                         _sendSerial
                           i1_Ativar
                   i1_USARTWriteChar
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) _sendSerial                                          45    45      0     480
                                              3 COMMON     1     1      0
                                              0 BANK0     44    44      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _refresh                                              0     0      0     154
                           i1_Ativar
 ---------------------------------------------------------------------------------
 (8) i1_Ativar                                             2     2      0     154
                                              1 COMMON     2     2      0
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (8) _progressBar                                         25    23      2    1093
                                              0 BANK0     25    23      2
               i1_lcd_escreve_string
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     219
                                              3 COMMON     2     2      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (9) _USARTWriteString                                     2     0      2     195
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ativar
     _ADCRead
     _Ativar
       _USARTWriteChar
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTInit
       ___aldiv
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     _USARTWriteString
       i1_USARTWriteChar
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _progressBar
     i1_lcd_escreve_string
       i1_lcd_putc
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
         i1_lcd_gotoxy
           i1_lcd_envia_byte
             i1_lcd_envia_nibble
   _refresh
     i1_Ativar
       i1_USARTWriteChar
   _sendSerial
     _USARTWriteString
       i1_USARTWriteChar
   i1_Ativar
     i1_USARTWriteChar
   i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1E      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     47      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A4      12        0.0%
ABS                  0      0      A4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 05 23:43:56 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l88 1667  
                           fsr 0004            ___wmul@multiplicand 0072                i1Ativar@comando 0072  
                 ___ftadd@exp1 0026                   ___ftadd@exp2 0025                   ___ftadd@sign 0024  
                          l205 0904                            l150 08BA                            l206 0907  
                          l446 0EEA              i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000  
                          _ISR 027B                            fsr0 0004                __end_of_ADCInit 16B3  
              __end_of_ADCRead 08BD                            indf 0000                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 095C                    lcd_gotoxy@x 00A7                    lcd_gotoxy@y 00A5  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                 ___ftdiv@sign 003F                           l2031 0A39                           l2033 0A44  
                         l2025 0A1A                           l2029 0A2E                           l2037 0A4F  
                         l2311 074C                           l2321 0781                           l2305 0730  
                         l2081 0F0B                           l2073 0EFB                           l2091 0F43  
                         l2083 0F1B                           l2331 08BD                           l2317 0768  
                         l2095 0F50                           l2247 0C25                           l2351 07C0  
                         l2099 0F5E                           l2359 07DB                           l2299 0713  
                         l1973 1710                           l2941 165E                           l2791 0D13  
                         l1975 1711                           l2787 0D05                           STR_1 0842  
                         STR_2 0885                           STR_3 088C                           STR_4 086A  
                         STR_5 087A                           u2235 0F0F                           u4007 0A10  
                         u2255 0F1D                           u4017 08F8                           u2265 0F32  
                         u4027 0B4A                           u2275 0F44                           u4037 0CE5  
                         u4047 0D2B                           u4057 0D45                           u2705 0C2E  
                         u4067 08B4                           u1975 0910                           u2695 0C1C  
                         u3917 0DFD                           u3927 0E10                           u3937 0E20  
                         u3947 0E3F                           u3957 0A28                           u3967 07B4  
                         i1l88 1642                           u3977 07CC                           _OERR 00C1  
                         u3987 09E6                           u3997 09FB                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 1671                           _main 1659                           _ftoa 0583  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E               __end_of_DESLIGAR 083D  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                          ??_ISR 0052  
             __end_of_LCDClear 0A16                   ___fttol@exp1 003D                   ___fttol@lval 0039  
   __end_of_lcd_escreve_string 08EE                __end_of___aldiv 0F67                          ?_main 0070  
                        ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A                __end_of___ftadd 04B0  
                __CFG_WDTE$OFF 0000      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 06F5  
              __end_of___ftneg 1651                __end_of___lldiv 0C0B                __end_of___ftmul 0583  
              __end_of___llmod 0AF7                __end_of___ftsub 1704                __end_of___fttol 0ED8  
                        _LIGAR 083F                          i1l205 17E5                          i1l206 17E8  
                        i1l158 039C                          i1l285 010C                          i1l391 176E  
                        i1l552 0CA7                          i1l288 012A                          i1l581 0451  
                        i1l558 0CC0                          _RCREG 001A                          _SPBRG 0099  
          i1lcd_envia_nibble@n 0071                          _TRISA 0085                          _TXREG 0019  
                __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D               __end_ofi1_Ativar 1000  
         i1_lcd_escreve_string 1787                  ___awtoft@sign 007D                __end_of_dpowers 0838  
              __end_of_isdigit 167F                  ___ftpack@sign 0074                  _countInferior 00BE  
              __end_of_refresh 0DC6                          ftoa@f 0044                          ftoa@l 004D  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                   progressBar@i 0036  
           __size_of_USARTInit 0066                ?_USARTWriteChar 0070                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 027B               i1_lcd_envia_byte 17D5                __initialization 0015  
                 i1_lcd_gotoxy 16B3                   __end_of_main 1664                   __end_of_ftoa 063D  
                _countSuperior 0069                    i1lcd_putc@c 007B                      ??_ADCInit 00A0  
                    ??_ADCRead 00A2      __size_of_lcd_envia_nibble 0059                         ??_main 00BE  
                       ??_ftoa 0048                  ___fttol@sign1 0038                         ISR@buf 0058  
                       ISR@per 0066                         ISR@pre 0059        USARTWriteChar@USARTData 00A0  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 00A0  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             __end_of___awtoft 1741               __end_of___ftpack 0CD9               __end_of___lltoft 17D5  
                       i1l2013 16BD                         i1l2111 03D2                         i1l2015 16BE  
                       i1l2121 03E8                         i1l2115 03D9                         i1l2211 0AE1  
                       i1l2141 0423                         i1l2133 0402                         i1l2205 0AB3  
                       i1l2053 1766                         i1l2151 0441                         i1l2143 0428  
                       i1l2207 0AC3                         i1l2215 0AEE                         i1l2047 167D  
                       i1l2231 0979                         i1l2161 0475                         i1l2153 044D  
                       i1l2145 042C                         i1l2233 0982                         i1l2225 095E  
                       i1l2171 0498                         i1l2139 0417                         i1l2157 0463  
                       i1l2181 0BBD                         i1l2405 00B9                         i1l2229 0970  
                       i1l2237 098B                         i1l2191 0BF5                         i1l2183 0BCD  
                       i1l2423 0113                         i1l2415 00CB                         i1l2513 04C8  
                       i1l2417 0107                         i1l2291 1741                         i1l2531 051D  
                       i1l2611 0ECF                         i1l2603 0EB3                         i1l2195 0C02  
                       i1l2451 01A0                         i1l2443 0164                         i1l2419 010E  
                       i1l2605 0EBE                         i1l2621 17C0                         i1l2429 013C  
                       i1l2701 09C3                         i1l2543 0545                         i1l2535 052D  
                       i1l2519 04DE                         i1l2607 0EC1                         i1l2463 01F3  
                       i1l2455 01B8                         i1l2439 015E                         i1l2391 0066  
                       i1l2631 0F83                         i1l2703 099C                         i1l2473 020D  
                       i1l2465 01F7                         i1l2481 0046                         i1l2721 0A8C  
                       i1l2705 09CA                         i1l2491 0B77                         i1l2547 0555  
                       i1l2619 17AE                         i1l2459 01D2                         i1l2483 0276  
                       i1l2643 0FB8                         u210_25 0CC7                         i1l2397 007B  
                       i1l2653 0FE9                         i1l2637 0F9E                         i1l2741 0D8A  
                       i1l2671 16D6                         i1l2495 0B9E                         i1l2479 0267  
                       i1l2663 1787                         i1l2719 0A76                         i1l2735 0D6E  
                       i1l2577 0E64                         i1l2649 0FD2                         i1l2851 172A  
                       i1l2595 0E96                         u203_25 0C85                         i1l2861 0655  
                       i1l2597 0EA6                         i1l2765 05BC                         i1l2749 0DAB  
                       i1l2693 09AC                         i1l2679 16E5                         i1l1991 0C91  
                       i1l1983 0C79                         i1l2935 0386                         i1l2881 06B0  
                       i1l2697 09B5                         i1l1987 0C80                         i1l2867 066B  
                       i1l1997 0CAC                         i1l1989 0C8C                         i1l1999 0CB6  
                       i1l2889 06CF                         u205_25 0CA0                         u301_25 0218  
                       u302_25 0273                         u207_25 0CAF                         u311_25 04EA  
                       u320_25 0556                         u312_25 04FC                         u305_21 0B6A  
                       u305_22 0B6B                         u305_23 0B70                         u305_24 0B71  
                       u321_25 055E                         u217_25 176F                         u242_25 0418  
                       u218_25 1776                         u410_27 0956                         u307_21 0B91  
                       u307_22 0B92                         u307_23 0B97                         u307_24 0B98  
                       u315_25 052E                         u331_25 0EB5                         u316_25 0536  
                       u245_25 042D                         u325_25 0E6B                         u334_25 17B3  
                       u262_25 0AB7                         u350_25 0D5C                         u239_25 0403  
                       u255_25 0BC1                         u351_25 0D79                         u407_27 0AA1  
                       u248_25 0442                         u328_25 0E97                         u264_25 0AD1  
                       u408_27 096A                         u257_25 0BCF                         u265_25 0AE2  
                       u353_25 0D9A                         u409_27 17DB                         u362_25 067D  
                       u258_25 0BE4                         u354_25 0DB6                         u347_20 0A69  
                       u363_25 068F                         u259_25 0BF6                         u364_25 06B1  
                       u365_25 06C2                         u293_25 0167                         u366_25 06D0  
                       u294_25 0196                         u199_25 17EF                         u296_25 01AF  
                       u297_25 01C9                         u298_25 01E3                  USARTInit@Mode 00B3  
    i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066                         _Ativar 06F5  
             __end_of_lcd_putc 0A5D                         ___ftge 0B50                      ??___aldiv 00A8  
                       ___wmul 1764                      ??___ftadd 0020                      ??___ftdiv 0036  
                    ??___ftneg 0073                      ??___lldiv 0078                      ??___ftmul 0026  
                    ??___llmod 0028                      ??___ftsub 007E                      ??___fttol 0034  
                       _ativar 0CD9       __end_of_USARTWriteString 1764               ??_lcd_envia_byte 00A3  
            __end_of_USARTInit 0C71                         ftoa@cp 0051          ___ftmul@f3_as_product 002B  
                    ??_isdigit 0070                      ??_refresh 0073                         saved_w 007E  
        i1lcd_escreve_string@y 007C                      ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 095C  
            ?_USARTReceiveChar 0070                      ?_LCDClear 0070        __end_of__initialization 003B  
           ??_USARTReceiveChar 0073                     ___ftadd@f1 0078                     ___ftadd@f2 007B  
                   ___ftge@ff1 0070                     ___ftge@ff2 0073                     ___ftdiv@f1 0033  
                   ___ftdiv@f2 0030                     ___ftdiv@f3 003B                  __end_of_LIGAR 0840  
                 ?_progressBar 0020                     ___ftneg@f1 0070                     ___awtoft@c 0078  
                   ___ftmul@f1 0020                     ___ftmul@f2 0023                     ___ftsub@f1 002A  
                   ___ftsub@f2 0027                     ___fttol@f1 0030                 __pcstackCOMMON 0070  
                 __pidataBANK0 088E                   __pidataBANK1 167F            __size_ofi1_lcd_putc 003B  
                   ___lltoft@c 0078                      ?i1_Ativar 0070               i1_USARTWriteChar 1641  
                _init_lcd_4bit 079A         ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 00A8  
                 sprintf@width 003F                     __pbssBANK0 0067                     __pbssBANK1 00BE  
             sendSerial@origem 0020                     ??_LCDClear 00A5                      ISR@input2 0063  
                    ISR@preint 005C                        ?_Ativar 0070                      ISR@status 005E  
    USARTReceiveChar@USARTData 0074                     __pmaintext 1659                        ?___ftge 0070  
                      ?___wmul 0070                     ??i1_Ativar 0071                     __pintentry 0004  
                   _flag_Start 00C0                        ?_ativar 0070                        _ADCInit 16A0  
                      _ADCRead 0890                      ?___awtoft 0078                      ?___ftpack 0070  
             _lcd_envia_nibble 0AF7                      ?___lltoft 0078                    sendSerial@x 004A  
               ?_init_lcd_4bit 0070                     _lcd_gotoxy 1704       __end_ofi1_lcd_envia_byte 1800  
             ??_USARTWriteChar 00A0             _lcd_escreve_string 08BD                      ?_lcd_putc 0070  
                   __stringtab 0800            ?_lcd_escreve_string 00AC                      _ADCResult 0067  
              __size_of_Ativar 00A5                     _inicialize 0DC6                        ___aldiv 0ED8  
              __size_of___ftge 005D                        ___ftadd 03A9                        ___ftdiv 063D  
                      ___ftneg 1649                        ___lldiv 0BAD                __size_of___wmul 0023  
                      ___ftmul 04B0                        ___llmod 0AA9                        ___ftsub 16E8  
                      ___fttol 0E4A                __size_of_ativar 0074                     ??___awtoft 007B  
                   ??___ftpack 0075                        _flag_an 006D                     ??___lltoft 007C  
                      __ptext1 0DC6                        __ptext2 08BD                        __ptext3 0A16  
                      __ptext4 1704                        __ptext5 079A                        __ptext6 0C0B  
                      __ptext7 0ED8                        __ptext8 09D6                        __ptext9 08EE  
         ??_lcd_escreve_string 00AE                   __size_of_ISR 012E                        _dpowers 0810  
                      _isdigit 1671               ___aldiv@dividend 00A4                        _refresh 0D4D  
              lcd_envia_byte@n 00A2                   ??i1_lcd_putc 0079                     _recipiente 006B  
                      _sprintf 003F                        clrloop0 1652                     ??_lcd_putc 00A9  
         end_of_initialization 003B                        ftoa@buf 00C6                        ftoa@rem 0049  
      i1lcd_envia_byte@address 0074                     _sendSerial 0997                ___lldiv@divisor 0070  
               progressBar@aux 0026                ___lldiv@counter 007D                      _RCSTAbits 0018  
             ___aldiv@quotient 00AB           __size_of_progressBar 004C             __end_ofi1_lcd_putc 0997  
              ??_init_lcd_4bit 00A5              ?_USARTWriteString 0071                      _PORTAbits 0005  
                    _PORTBbits 0006                      _PORTCbits 0007                      _PORTDbits 0008  
           ??_USARTWriteString 0073                      _USARTInit 0C0B                      _TRISBbits 0086  
                    _TRISCbits 0087                      _TRISDbits 0088                    ?_lcd_gotoxy 00A5  
              _LCD_INIT_STRING 0838                    ___ftdiv@exp 003E       __end_ofi1_USARTWriteChar 1649  
                    _TXSTAbits 0098              __size_of_LCDClear 0040                    ?_inicialize 0070  
                  ___ftmul@exp 002A                 __end_of_Ativar 079A             i1_lcd_envia_nibble 0923  
    __size_of_USARTReceiveChar 001B                 __end_of___ftge 0BAD                    USARTInit@BR 00B9  
               __end_of___wmul 1787            ?i1_lcd_envia_nibble 0070                 __end_of_ativar 0D4D  
            __size_ofi1_Ativar 0099                  _nivelInferior 00C2            start_initialization 0015  
                   ?_USARTInit 00AF                    __end_of_ISR 03A9                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075                    ?_sendSerial 0070  
         ??i1_lcd_envia_nibble 0070       __end_of_lcd_envia_nibble 0B50          lcd_envia_byte@address 00A4  
              ___llmod@divisor 0020                ___llmod@counter 0029                  _nivelSuperior 00C4  
                     ??_Ativar 00A1                       ??___ftge 0076            __size_of_lcd_gotoxy 001C  
                     ??___wmul 0074                     init_fetch0 168F                       ??_ativar 00A3  
                  __pdataBANK0 006D                    __pdataBANK1 00D7                       ?_ADCInit 0070  
                     ?_ADCRead 00A0            __end_of_LIGAR_BOMBA 0841            __end_of_LIGAR_MOTOR 0842  
      __end_of_LCD_INIT_STRING 083C              __size_of___awtoft 0021              __size_of___ftpack 0068  
            __size_of___lltoft 002B                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0            __end_of__stringdata 088E            __size_of_inicialize 0084  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                sendSerial@envio 0048  
                     ISR@input 0060                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___aldiv 00A0                       ?___ftadd 0078                       ?___ftdiv 0030  
                     ?___ftneg 0070                       ?___lldiv 0070                       ?___ftmul 0020  
                     ?___llmod 0020                       ?___ftsub 0027                       ?___fttol 0030  
          __size_of_sendSerial 003F                      __pstrings 0800                       ?_isdigit 0070  
                  ??_USARTInit 00B5                       ?_refresh 0070                       _DESLIGAR 083C  
               init_lcd_4bit@i 00A7                       ?_sprintf 002A              progressBar@preint 0020  
            progressBar@result 0038                       _LCDClear 09D6                ___aldiv@divisor 00A0  
            interrupt_function 0004                ___aldiv@counter 00A9                 ___wmul@product 0074  
                    clear_ram0 1651                       _PIE1bits 008C              lcd_envia_nibble@n 00A1  
               ??i1_lcd_gotoxy 0076                       _PIR1bits 000C                    _LIGAR_BOMBA 0840  
                  _LIGAR_MOTOR 0841               _USARTReceiveChar 16CD                       i1_Ativar 0F67  
    sendSerial@nivelRecipiente 0049               __size_of_ADCInit 0013               __size_of_ADCRead 002D  
                   _ADCON0bits 001F                    __stringbase 080F                     _ADCON1bits 009F  
                  __stringdata 0842              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 00AB                   ??_lcd_gotoxy 00A6            lcd_escreve_string@y 00AC  
    __size_of_USARTWriteString 0023              ?i1_USARTWriteChar 0070                  ??_progressBar 0022  
      __size_of_USARTWriteChar 000D                   ??_inicialize 00BB             ??i1_USARTWriteChar 0070  
           __end_of_lcd_gotoxy 1720               __size_of___aldiv 008F               __size_of___ftadd 0107  
             __size_of___ftdiv 00B8               __size_of___ftneg 0008               __size_of___lldiv 005E  
             __size_of___ftmul 00D3               __size_of___llmod 004E               __size_of___ftsub 001C  
             __size_of___fttol 008E                       ___awtoft 1720                       ___ftpack 0C71  
           __end_of__stringtab 0810                       ___lltoft 17AA                    _isdigit$893 0070  
        __end_of_init_lcd_4bit 0800               progressBar@F1347 00D7               __size_of_isdigit 000E  
             __size_of_refresh 0079                       __ptext10 0AF7                       __ptext11 16A0  
                     __ptext20 0A5D                       __ptext12 0CD9                       __ptext21 1787  
                     __ptext13 06F5                       __ptext30 0AA9                       __ptext22 095C  
                     __ptext14 1664                       __ptext31 0BAD                       __ptext23 16B3  
                     __ptext15 0890                       __ptext40 1720                       __ptext32 17AA  
                     __ptext24 17D5                       __ptext16 027B                       __ptext41 0C71  
                     __ptext33 0E4A                       __ptext25 0923                       __ptext17 0997  
                     __ptext42 16CD                       __ptext34 16E8                       __ptext26 0583  
                     __ptext18 0D4D                       __ptext43 1741                       __ptext35 03A9  
                     __ptext27 003F                       __ptext19 0F67                       __ptext44 1641  
                     __ptext36 1649                       __ptext28 1671                       __ptext37 04B0  
                     __ptext29 1764                       __ptext38 0B50                       __ptext39 063D  
               _lcd_envia_byte 08EE             __end_of_inicialize 0E4A                       _lcd_putc 0A16  
             __size_of_sprintf 023C                   ??_sendSerial 0073                  __size_of_main 000B  
                __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 00A0  
                Ativar@comando 00A2            __end_of_progressBar 0AA9             __end_of_sendSerial 09D6  
                   _INTCONbits 000B         __end_of_lcd_envia_byte 0923           __end_ofi1_lcd_gotoxy 16CD  
                     init_ram0 1693                       isdigit@c 0071                       intlevel1 0000  
                    sprintf@ap 0039                      sprintf@sp 003E    __size_ofi1_lcd_envia_nibble 0039  
             ___lldiv@dividend 0074                      stringcode 080A   __end_ofi1_lcd_escreve_string 17AA  
    __size_ofi1_lcd_envia_byte 002B              USARTInit@BaudRate 00AF                 _DESLIGAR_BOMBA 083D  
               _DESLIGAR_MOTOR 083E            USARTWriteString@str 0071                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                ?_lcd_envia_byte 00A2  
                     stringdir 080A                       stringtab 0800                   ___aldiv@sign 00AA  
     __end_of_USARTReceiveChar 16E8               _USARTWriteString 1741                 _USARTWriteChar 1664  
                  _progressBar 0A5D         __end_of_DESLIGAR_BOMBA 083E         __end_of_DESLIGAR_MOTOR 083F  
