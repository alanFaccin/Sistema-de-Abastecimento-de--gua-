

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Nov 06 07:48:38 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK1
   184  167F                     __pidataBANK1:	
   185                           
   186                           ;initializer for progressBar@F1346
   187  167F  3420               	retlw	32
   188  1680  3420               	retlw	32
   189  1681  3420               	retlw	32
   190  1682  3420               	retlw	32
   191  1683  3420               	retlw	32
   192  1684  3420               	retlw	32
   193  1685  3420               	retlw	32
   194  1686  3420               	retlw	32
   195  1687  3420               	retlw	32
   196  1688  3420               	retlw	32
   197  1689  3420               	retlw	32
   198  168A  3420               	retlw	32
   199  168B  3420               	retlw	32
   200  168C  3420               	retlw	32
   201  168D  3420               	retlw	32
   202  168E  3420               	retlw	32
   203                           
   204                           	psect	strings
   205  0800                     __pstrings:	
   206  0800                     stringtab:	
   207  0800                     __stringtab:	
   208                           
   209                           ;	String table - string pointers are 1 byte each
   210  0800  1BFF               	btfsc	btemp+1,7
   211  0801  280A               	ljmp	stringcode
   212  0802  1383               	bcf	3,7
   213  0803  187F               	btfsc	btemp+1,0
   214  0804  1783               	bsf	3,7
   215  0805  0800               	movf	0,w
   216  0806  0A84               	incf	4,f
   217  0807  1903               	skipnz
   218  0808  0AFF               	incf	btemp+1,f
   219  0809  0008               	return
   220  080A                     stringcode:	
   221  080A                     stringdir:	
   222  080A  3008               	movlw	high stringdir
   223  080B  008A               	movwf	10
   224  080C  0804               	movf	4,w
   225  080D  0A84               	incf	4,f
   226  080E  0782               	addwf	2,f
   227  080F                     __stringbase:	
   228  080F  3400               	retlw	0
   229  0810                     __end_of__stringtab:	
   230  0810                     _dpowers:	
   231  0810  3401               	retlw	1
   232  0811  3400               	retlw	0
   233  0812  3400               	retlw	0
   234  0813  3400               	retlw	0
   235  0814  340A               	retlw	10
   236  0815  3400               	retlw	0
   237  0816  3400               	retlw	0
   238  0817  3400               	retlw	0
   239  0818  3464               	retlw	100
   240  0819  3400               	retlw	0
   241  081A  3400               	retlw	0
   242  081B  3400               	retlw	0
   243  081C  34E8               	retlw	232
   244  081D  3403               	retlw	3
   245  081E  3400               	retlw	0
   246  081F  3400               	retlw	0
   247  0820  3410               	retlw	16
   248  0821  3427               	retlw	39
   249  0822  3400               	retlw	0
   250  0823  3400               	retlw	0
   251  0824  34A0               	retlw	160
   252  0825  3486               	retlw	134
   253  0826  3401               	retlw	1
   254  0827  3400               	retlw	0
   255  0828  3440               	retlw	64
   256  0829  3442               	retlw	66
   257  082A  340F               	retlw	15
   258  082B  3400               	retlw	0
   259  082C  3480               	retlw	128
   260  082D  3496               	retlw	150
   261  082E  3498               	retlw	152
   262  082F  3400               	retlw	0
   263  0830  3400               	retlw	0
   264  0831  34E1               	retlw	225
   265  0832  34F5               	retlw	245
   266  0833  3405               	retlw	5
   267  0834  3400               	retlw	0
   268  0835  34CA               	retlw	202
   269  0836  349A               	retlw	154
   270  0837  343B               	retlw	59
   271  0838                     __end_of_dpowers:	
   272  0838                     _LCD_INIT_STRING:	
   273  0838  341C               	retlw	28
   274  0839  340C               	retlw	12
   275  083A  3401               	retlw	1
   276  083B  3406               	retlw	6
   277  083C                     __end_of_LCD_INIT_STRING:	
   278  083C                     _DESLIGAR:	
   279  083C  346C               	retlw	108
   280  083D                     __end_of_DESLIGAR:	
   281  083D                     _DESLIGAR_BOMBA:	
   282  083D  3462               	retlw	98
   283  083E                     __end_of_DESLIGAR_BOMBA:	
   284  083E                     _DESLIGAR_MOTOR:	
   285  083E  346D               	retlw	109
   286  083F                     __end_of_DESLIGAR_MOTOR:	
   287  083F                     _LIGAR:	
   288  083F  344C               	retlw	76
   289  0840                     __end_of_LIGAR:	
   290  0840                     _LIGAR_BOMBA:	
   291  0840  3442               	retlw	66
   292  0841                     __end_of_LIGAR_BOMBA:	
   293  0841                     _LIGAR_MOTOR:	
   294  0841  344D               	retlw	77
   295  0842                     __end_of_LIGAR_MOTOR:	
   296  001F                     _ADCON0bits	set	31
   297  001E                     _ADRESH	set	30
   298  000B                     _INTCONbits	set	11
   299  000C                     _PIR1bits	set	12
   300  0005                     _PORTAbits	set	5
   301  0006                     _PORTBbits	set	6
   302  0007                     _PORTCbits	set	7
   303  0008                     _PORTDbits	set	8
   304  001A                     _RCREG	set	26
   305  0018                     _RCSTAbits	set	24
   306  0019                     _TXREG	set	25
   307  00C1                     _OERR	set	193
   308  009F                     _ADCON1bits	set	159
   309  009E                     _ADRESL	set	158
   310  008C                     _PIE1bits	set	140
   311  0099                     _SPBRG	set	153
   312  0085                     _TRISA	set	133
   313  0086                     _TRISBbits	set	134
   314  0087                     _TRISCbits	set	135
   315  0088                     _TRISDbits	set	136
   316  0098                     _TXSTAbits	set	152
   317  0842                     __stringdata:	
   318  0842                     STR_1:	
   319  0842  340A               	retlw	10
   320  0843  340D               	retlw	13
   321  0844  3420               	retlw	32	;' '
   322  0845  342D               	retlw	45	;'-'
   323  0846  342D               	retlw	45	;'-'
   324  0847  342D               	retlw	45	;'-'
   325  0848  342D               	retlw	45	;'-'
   326  0849  342D               	retlw	45	;'-'
   327  084A  342D               	retlw	45	;'-'
   328  084B  342D               	retlw	45	;'-'
   329  084C  3420               	retlw	32	;' '
   330  084D  3445               	retlw	69	;'E'
   331  084E  3453               	retlw	83	;'S'
   332  084F  3454               	retlw	84	;'T'
   333  0850  344F               	retlw	79	;'O'
   334  0851  3455               	retlw	85	;'U'
   335  0852  3452               	retlw	82	;'R'
   336  0853  344F               	retlw	79	;'O'
   337  0854  3420               	retlw	32	;' '
   338  0855  3444               	retlw	68	;'D'
   339  0856  3445               	retlw	69	;'E'
   340  0857  3420               	retlw	32	;' '
   341  0858  3450               	retlw	80	;'P'
   342  0859  3449               	retlw	73	;'I'
   343  085A  344C               	retlw	76	;'L'
   344  085B  3448               	retlw	72	;'H'
   345  085C  3441               	retlw	65	;'A'
   346  085D  3420               	retlw	32	;' '
   347  085E  342D               	retlw	45	;'-'
   348  085F  342D               	retlw	45	;'-'
   349  0860  342D               	retlw	45	;'-'
   350  0861  342D               	retlw	45	;'-'
   351  0862  342D               	retlw	45	;'-'
   352  0863  342D               	retlw	45	;'-'
   353  0864  342D               	retlw	45	;'-'
   354  0865  3420               	retlw	32	;' '
   355  0866  340A               	retlw	10
   356  0867  340D               	retlw	13
   357  0868  3420               	retlw	32	;' '
   358  0869  3400               	retlw	0
   359  086A                     STR_4:	
   360  086A  340C               	retlw	12
   361  086B  344C               	retlw	76	;'L'
   362  086C  346F               	retlw	111	;'o'
   363  086D  3461               	retlw	97	;'a'
   364  086E  3464               	retlw	100	;'d'
   365  086F  3469               	retlw	105	;'i'
   366  0870  346E               	retlw	110	;'n'
   367  0871  3467               	retlw	103	;'g'
   368  0872  3420               	retlw	32	;' '
   369  0873  3450               	retlw	80	;'P'
   370  0874  3449               	retlw	73	;'I'
   371  0875  3443               	retlw	67	;'C'
   372  0876  342E               	retlw	46	;'.'
   373  0877  342E               	retlw	46	;'.'
   374  0878  342E               	retlw	46	;'.'
   375  0879  3400               	retlw	0
   376  087A                     STR_5:	
   377  087A  3425               	retlw	37	;'%'
   378  087B  346C               	retlw	108	;'l'
   379  087C  3475               	retlw	117	;'u'
   380  087D  342E               	retlw	46	;'.'
   381  087E  3425               	retlw	37	;'%'
   382  087F  3436               	retlw	54	;'6'
   383  0880  342E               	retlw	46	;'.'
   384  0881  3436               	retlw	54	;'6'
   385  0882  346C               	retlw	108	;'l'
   386  0883  3475               	retlw	117	;'u'
   387  0884  3400               	retlw	0
   388  0885                     STR_2:	
   389  0885  344E               	retlw	78	;'N'
   390  0886  3469               	retlw	105	;'i'
   391  0887  3476               	retlw	118	;'v'
   392  0888  3465               	retlw	101	;'e'
   393  0889  346C               	retlw	108	;'l'
   394  088A  343A               	retlw	58	;':'
   395  088B  3400               	retlw	0
   396  088C                     STR_3:	
   397  088C  3425               	retlw	37	;'%'
   398  088D  3400               	retlw	0
   399  088E                     __end_of__stringdata:	
   400                           
   401                           ; #config settings
   402  0000                     
   403                           	psect	cinit
   404  0015                     start_initialization:	
   405  0015                     __initialization:	
   406                           
   407                           ; Clear objects allocated to BANK0
   408  0015  1383               	bcf	3,7	;select IRP bank0
   409  0016  3067               	movlw	low __pbssBANK0
   410  0017  0084               	movwf	4
   411  0018  306F               	movlw	low (__pbssBANK0+8)
   412  0019  160A  118A  2651  120A  118A  	fcall	clear_ram0
   413                           
   414                           ; Clear objects allocated to BANK1
   415  001E  30BE               	movlw	low __pbssBANK1
   416  001F  0084               	movwf	4
   417  0020  30D5               	movlw	low (__pbssBANK1+23)
   418  0021  160A  118A  2651  120A  118A  	fcall	clear_ram0
   419                           
   420                           ; Initialize objects allocated to BANK1
   421  0026  30E5               	movlw	low (__pdataBANK1+16)
   422  0027  00FD               	movwf	btemp+-1
   423  0028  3016               	movlw	high __pidataBANK1
   424  0029  00FE               	movwf	btemp
   425  002A  307F               	movlw	low __pidataBANK1
   426  002B  00FF               	movwf	btemp+1
   427  002C  30D5               	movlw	low __pdataBANK1
   428  002D  0084               	movwf	4
   429  002E  160A  118A  2693   	fcall	init_ram0
   430  0031                     end_of_initialization:	
   431                           ;End of C runtime variable initialization code
   432                           
   433  0031                     __end_of__initialization:	
   434  0031  0183               	clrf	3
   435  0032  160A  118A  2E59   	ljmp	_main	;jump to C main() function
   436                           
   437                           	psect	bssBANK0
   438  0067                     __pbssBANK0:	
   439  0067                     _ADCResult:	
   440  0067                     	ds	2
   441  0069                     _countInferior:	
   442  0069                     	ds	2
   443  006B                     _countSuperior:	
   444  006B                     	ds	2
   445  006D                     _recipiente:	
   446  006D                     	ds	2
   447                           
   448                           	psect	bssBANK1
   449  00BE                     __pbssBANK1:	
   450  00BE                     _flag_Start:	
   451  00BE                     	ds	2
   452  00C0                     _nivelInferior:	
   453  00C0                     	ds	2
   454  00C2                     _nivelSuperior:	
   455  00C2                     	ds	2
   456  00C4                     ftoa@buf:	
   457  00C4                     	ds	17
   458                           
   459                           	psect	dataBANK1
   460  00D5                     __pdataBANK1:	
   461  00D5                     progressBar@F1346:	
   462  00D5                     	ds	16
   463                           
   464                           	psect	clrtext
   465  1651                     clear_ram0:	
   466                           ;	Called with FSR containing the base address, and
   467                           ;	W with the last address+1
   468                           
   469  1651  0064               	clrwdt	;clear the watchdog before getting into this loop
   470  1652                     clrloop0:	
   471  1652  0180               	clrf	0	;clear RAM location pointed to by FSR
   472  1653  0A84               	incf	4,f	;increment pointer
   473  1654  0604               	xorwf	4,w	;XOR with final address
   474  1655  1903               	btfsc	3,2	;have we reached the end yet?
   475  1656  3400               	retlw	0	;all done for this memory range, return
   476  1657  0604               	xorwf	4,w	;XOR again to restore value
   477  1658  2E52               	goto	clrloop0	;do the next byte
   478                           
   479                           	psect	inittext
   480  168F                     init_fetch0:	
   481                           ;	Called with low address in FSR and high address in W
   482                           
   483  168F  087E               	movf	126,w
   484  1690  008A               	movwf	10
   485  1691  087F               	movf	127,w
   486  1692  0082               	movwf	2
   487  1693                     init_ram0:	
   488                           ;Called with:
   489                           ;	high address of idata address in btemp 
   490                           ;	low address of idata address in btemp+1 
   491                           ;	low address of data in FSR
   492                           ;	high address + 1 of data in btemp-1
   493                           
   494  1693  268F  160A  118A   	fcall	init_fetch0
   495  1696  0080               	movwf	0
   496  1697  0A84               	incf	4,f
   497  1698  0804               	movf	4,w
   498  1699  067D               	xorwf	125,w
   499  169A  1903               	btfsc	3,2
   500  169B  3400               	retlw	0
   501  169C  0AFF               	incf	127,f
   502  169D  1903               	btfsc	3,2
   503  169E  0AFE               	incf	126,f
   504  169F  2E93               	goto	init_ram0
   505                           
   506                           	psect	cstackBANK1
   507  00A0                     __pcstackBANK1:	
   508  00A0                     ??_lcd_envia_nibble:	
   509  00A0                     ??_USARTWriteChar:	
   510                           ; 0 bytes @ 0x0
   511                           
   512  00A0                     ??_ADCInit:	
   513                           ; 0 bytes @ 0x0
   514                           
   515  00A0                     ?_ADCRead:	
   516                           ; 0 bytes @ 0x0
   517                           
   518  00A0                     ?___aldiv:	
   519                           ; 0 bytes @ 0x0
   520                           
   521  00A0                     USARTWriteChar@USARTData:	
   522                           ; 4 bytes @ 0x0
   523                           
   524  00A0                     ADCRead@ch:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  00A0                     ___aldiv@divisor:	
   528                           ; 2 bytes @ 0x0
   529                           
   530                           
   531                           ; 4 bytes @ 0x0
   532  00A0                     	ds	1
   533  00A1                     ??_Ativar:	
   534  00A1                     lcd_envia_nibble@n:	
   535                           ; 0 bytes @ 0x1
   536                           
   537                           
   538                           ; 1 bytes @ 0x1
   539  00A1                     	ds	1
   540  00A2                     ?_lcd_envia_byte:	
   541  00A2                     ??_ADCRead:	
   542                           ; 0 bytes @ 0x2
   543                           
   544  00A2                     Ativar@comando:	
   545                           ; 0 bytes @ 0x2
   546                           
   547  00A2                     lcd_envia_byte@n:	
   548                           ; 1 bytes @ 0x2
   549                           
   550                           
   551                           ; 1 bytes @ 0x2
   552  00A2                     	ds	1
   553  00A3                     ??_lcd_envia_byte:	
   554  00A3                     ??_ativar:	
   555                           ; 0 bytes @ 0x3
   556                           
   557                           
   558                           ; 0 bytes @ 0x3
   559  00A3                     	ds	1
   560  00A4                     lcd_envia_byte@address:	
   561  00A4                     ___aldiv@dividend:	
   562                           ; 1 bytes @ 0x4
   563                           
   564                           
   565                           ; 4 bytes @ 0x4
   566  00A4                     	ds	1
   567  00A5                     ?_lcd_gotoxy:	
   568  00A5                     ??_init_lcd_4bit:	
   569                           ; 0 bytes @ 0x5
   570                           
   571  00A5                     ??_LCDClear:	
   572                           ; 0 bytes @ 0x5
   573                           
   574  00A5                     lcd_gotoxy@y:	
   575                           ; 0 bytes @ 0x5
   576                           
   577                           
   578                           ; 1 bytes @ 0x5
   579  00A5                     	ds	1
   580  00A6                     ??_lcd_gotoxy:	
   581                           
   582                           ; 0 bytes @ 0x6
   583  00A6                     	ds	1
   584  00A7                     init_lcd_4bit@i:	
   585  00A7                     lcd_gotoxy@x:	
   586                           ; 1 bytes @ 0x7
   587                           
   588                           
   589                           ; 1 bytes @ 0x7
   590  00A7                     	ds	1
   591  00A8                     ??___aldiv:	
   592  00A8                     lcd_gotoxy@address:	
   593                           ; 0 bytes @ 0x8
   594                           
   595                           
   596                           ; 1 bytes @ 0x8
   597  00A8                     	ds	1
   598  00A9                     ??_lcd_putc:	
   599  00A9                     ___aldiv@counter:	
   600                           ; 0 bytes @ 0x9
   601                           
   602                           
   603                           ; 1 bytes @ 0x9
   604  00A9                     	ds	1
   605  00AA                     ___aldiv@sign:	
   606                           
   607                           ; 1 bytes @ 0xA
   608  00AA                     	ds	1
   609  00AB                     lcd_putc@c:	
   610  00AB                     ___aldiv@quotient:	
   611                           ; 1 bytes @ 0xB
   612                           
   613                           
   614                           ; 4 bytes @ 0xB
   615  00AB                     	ds	1
   616  00AC                     ?_lcd_escreve_string:	
   617  00AC                     lcd_escreve_string@y:	
   618                           ; 0 bytes @ 0xC
   619                           
   620                           
   621                           ; 2 bytes @ 0xC
   622  00AC                     	ds	2
   623  00AE                     ??_lcd_escreve_string:	
   624                           
   625                           ; 0 bytes @ 0xE
   626  00AE                     	ds	1
   627  00AF                     ?_USARTInit:	
   628  00AF                     USARTInit@BaudRate:	
   629                           ; 0 bytes @ 0xF
   630                           
   631                           
   632                           ; 4 bytes @ 0xF
   633  00AF                     	ds	4
   634  00B3                     USARTInit@Mode:	
   635                           
   636                           ; 2 bytes @ 0x13
   637  00B3                     	ds	2
   638  00B5                     ??_USARTInit:	
   639                           
   640                           ; 0 bytes @ 0x15
   641  00B5                     	ds	4
   642  00B9                     USARTInit@BR:	
   643                           
   644                           ; 2 bytes @ 0x19
   645  00B9                     	ds	2
   646  00BB                     ??_inicialize:	
   647                           
   648                           ; 0 bytes @ 0x1B
   649  00BB                     	ds	3
   650  00BE                     ??_main:	
   651                           
   652                           	psect	cstackCOMMON
   653  0070                     __pcstackCOMMON:	
   654                           ; 0 bytes @ 0x1E
   655                           
   656  0070                     ?_init_lcd_4bit:	
   657  0070                     ?_LCDClear:	
   658                           ; 0 bytes @ 0x0
   659                           
   660  0070                     ?_lcd_envia_nibble:	
   661                           ; 0 bytes @ 0x0
   662                           
   663  0070                     ?_isdigit:	
   664                           ; 0 bytes @ 0x0
   665                           
   666  0070                     ??_isdigit:	
   667                           ; 1 bit 
   668                           
   669  0070                     ?_USARTWriteChar:	
   670                           ; 0 bytes @ 0x0
   671                           
   672  0070                     ?_Ativar:	
   673                           ; 0 bytes @ 0x0
   674                           
   675  0070                     ?_sendSerial:	
   676                           ; 0 bytes @ 0x0
   677                           
   678  0070                     ?_refresh:	
   679                           ; 0 bytes @ 0x0
   680                           
   681  0070                     ?_ADCInit:	
   682                           ; 0 bytes @ 0x0
   683                           
   684  0070                     ?_ISR:	
   685                           ; 0 bytes @ 0x0
   686                           
   687  0070                     ?_ativar:	
   688                           ; 0 bytes @ 0x0
   689                           
   690  0070                     ?_inicialize:	
   691                           ; 0 bytes @ 0x0
   692                           
   693  0070                     ?_main:	
   694                           ; 0 bytes @ 0x0
   695                           
   696  0070                     ?_lcd_putc:	
   697                           ; 0 bytes @ 0x0
   698                           
   699  0070                     ?___ftge:	
   700                           ; 0 bytes @ 0x0
   701                           
   702  0070                     ?i1_USARTWriteChar:	
   703                           ; 1 bit 
   704                           
   705  0070                     ??i1_USARTWriteChar:	
   706                           ; 0 bytes @ 0x0
   707                           
   708  0070                     ?i1_Ativar:	
   709                           ; 0 bytes @ 0x0
   710                           
   711  0070                     ?i1_lcd_envia_nibble:	
   712                           ; 0 bytes @ 0x0
   713                           
   714  0070                     ??i1_lcd_envia_nibble:	
   715                           ; 0 bytes @ 0x0
   716                           
   717  0070                     ?i1_lcd_putc:	
   718                           ; 0 bytes @ 0x0
   719                           
   720  0070                     ?_USARTReceiveChar:	
   721                           ; 0 bytes @ 0x0
   722                           
   723  0070                     ?___wmul:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?___ftpack:	
   727                           ; 2 bytes @ 0x0
   728                           
   729  0070                     ?___ftneg:	
   730                           ; 3 bytes @ 0x0
   731                           
   732  0070                     ?___lldiv:	
   733                           ; 3 bytes @ 0x0
   734                           
   735  0070                     _isdigit$892:	
   736                           ; 4 bytes @ 0x0
   737                           
   738  0070                     i1USARTWriteChar@USARTData:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ___wmul@multiplier:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ___ftpack@arg:	
   745                           ; 2 bytes @ 0x0
   746                           
   747  0070                     ___ftge@ff1:	
   748                           ; 3 bytes @ 0x0
   749                           
   750  0070                     ___ftneg@f1:	
   751                           ; 3 bytes @ 0x0
   752                           
   753  0070                     ___lldiv@divisor:	
   754                           ; 3 bytes @ 0x0
   755                           
   756                           
   757                           ; 4 bytes @ 0x0
   758  0070                     	ds	1
   759  0071                     ?_USARTWriteString:	
   760  0071                     ??i1_Ativar:	
   761                           ; 0 bytes @ 0x1
   762                           
   763  0071                     isdigit@c:	
   764                           ; 0 bytes @ 0x1
   765                           
   766  0071                     i1lcd_envia_nibble@n:	
   767                           ; 1 bytes @ 0x1
   768                           
   769  0071                     USARTWriteString@str:	
   770                           ; 1 bytes @ 0x1
   771                           
   772                           
   773                           ; 2 bytes @ 0x1
   774  0071                     	ds	1
   775  0072                     ?i1_lcd_envia_byte:	
   776  0072                     i1Ativar@comando:	
   777                           ; 0 bytes @ 0x2
   778                           
   779  0072                     i1lcd_envia_byte@n:	
   780                           ; 1 bytes @ 0x2
   781                           
   782  0072                     ___wmul@multiplicand:	
   783                           ; 1 bytes @ 0x2
   784                           
   785                           
   786                           ; 2 bytes @ 0x2
   787  0072                     	ds	1
   788  0073                     ??_USARTWriteString:	
   789  0073                     ??_USARTReceiveChar:	
   790                           ; 0 bytes @ 0x3
   791                           
   792  0073                     ??_sendSerial:	
   793                           ; 0 bytes @ 0x3
   794                           
   795  0073                     ??_refresh:	
   796                           ; 0 bytes @ 0x3
   797                           
   798  0073                     ??___ftneg:	
   799                           ; 0 bytes @ 0x3
   800                           
   801  0073                     ??i1_lcd_envia_byte:	
   802                           ; 0 bytes @ 0x3
   803                           
   804  0073                     ___ftpack@exp:	
   805                           ; 0 bytes @ 0x3
   806                           
   807  0073                     ___ftge@ff2:	
   808                           ; 1 bytes @ 0x3
   809                           
   810                           
   811                           ; 3 bytes @ 0x3
   812  0073                     	ds	1
   813  0074                     ??___wmul:	
   814  0074                     USARTReceiveChar@USARTData:	
   815                           ; 0 bytes @ 0x4
   816                           
   817  0074                     ___ftpack@sign:	
   818                           ; 1 bytes @ 0x4
   819                           
   820  0074                     i1lcd_envia_byte@address:	
   821                           ; 1 bytes @ 0x4
   822                           
   823  0074                     ___wmul@product:	
   824                           ; 1 bytes @ 0x4
   825                           
   826  0074                     ___lldiv@dividend:	
   827                           ; 2 bytes @ 0x4
   828                           
   829                           
   830                           ; 4 bytes @ 0x4
   831  0074                     	ds	1
   832  0075                     ??___ftpack:	
   833  0075                     ?i1_lcd_gotoxy:	
   834                           ; 0 bytes @ 0x5
   835                           
   836  0075                     i1lcd_gotoxy@y:	
   837                           ; 0 bytes @ 0x5
   838                           
   839                           
   840                           ; 1 bytes @ 0x5
   841  0075                     	ds	1
   842  0076                     ??___ftge:	
   843  0076                     ??i1_lcd_gotoxy:	
   844                           ; 0 bytes @ 0x6
   845                           
   846                           
   847                           ; 0 bytes @ 0x6
   848  0076                     	ds	1
   849  0077                     i1lcd_gotoxy@x:	
   850                           
   851                           ; 1 bytes @ 0x7
   852  0077                     	ds	1
   853  0078                     ??___lldiv:	
   854  0078                     ?___awtoft:	
   855                           ; 0 bytes @ 0x8
   856                           
   857  0078                     ?___ftadd:	
   858                           ; 3 bytes @ 0x8
   859                           
   860  0078                     ?___lltoft:	
   861                           ; 3 bytes @ 0x8
   862                           
   863  0078                     i1lcd_gotoxy@address:	
   864                           ; 3 bytes @ 0x8
   865                           
   866  0078                     ___awtoft@c:	
   867                           ; 1 bytes @ 0x8
   868                           
   869  0078                     ___ftadd@f1:	
   870                           ; 2 bytes @ 0x8
   871                           
   872  0078                     ___lltoft@c:	
   873                           ; 3 bytes @ 0x8
   874                           
   875                           
   876                           ; 4 bytes @ 0x8
   877  0078                     	ds	1
   878  0079                     ??i1_lcd_putc:	
   879  0079                     ___lldiv@quotient:	
   880                           ; 0 bytes @ 0x9
   881                           
   882                           
   883                           ; 4 bytes @ 0x9
   884  0079                     	ds	2
   885  007B                     ??___awtoft:	
   886  007B                     i1lcd_putc@c:	
   887                           ; 0 bytes @ 0xB
   888                           
   889  007B                     ___ftadd@f2:	
   890                           ; 1 bytes @ 0xB
   891                           
   892                           
   893                           ; 3 bytes @ 0xB
   894  007B                     	ds	1
   895  007C                     ??___lltoft:	
   896  007C                     ?i1_lcd_escreve_string:	
   897                           ; 0 bytes @ 0xC
   898                           
   899  007C                     i1lcd_escreve_string@y:	
   900                           ; 0 bytes @ 0xC
   901                           
   902                           
   903                           ; 2 bytes @ 0xC
   904  007C                     	ds	1
   905  007D                     ___awtoft@sign:	
   906  007D                     ___lldiv@counter:	
   907                           ; 1 bytes @ 0xD
   908                           
   909  007D                     ___lltoft@exp:	
   910                           ; 1 bytes @ 0xD
   911                           
   912                           
   913                           ; 1 bytes @ 0xD
   914  007D                     	ds	1
   915  007E                     ??___ftsub:	
   916  007E                     ??i1_lcd_escreve_string:	
   917                           ; 0 bytes @ 0xE
   918                           
   919                           
   920                           	psect	cstackBANK0
   921  0020                     __pcstackBANK0:	
   922                           ; 0 bytes @ 0xE
   923                           
   924  0020                     ?_progressBar:	
   925  0020                     ??___ftadd:	
   926                           ; 0 bytes @ 0x0
   927                           
   928  0020                     ?___ftmul:	
   929                           ; 0 bytes @ 0x0
   930                           
   931  0020                     ?___llmod:	
   932                           ; 3 bytes @ 0x0
   933                           
   934  0020                     progressBar@preint:	
   935                           ; 4 bytes @ 0x0
   936                           
   937  0020                     ___ftmul@f1:	
   938                           ; 2 bytes @ 0x0
   939                           
   940  0020                     ___llmod@divisor:	
   941                           ; 3 bytes @ 0x0
   942                           
   943  0020                     sendSerial@origem:	
   944                           ; 4 bytes @ 0x0
   945                           
   946                           
   947                           ; 40 bytes @ 0x0
   948  0020                     	ds	2
   949  0022                     ??_progressBar:	
   950                           
   951                           ; 0 bytes @ 0x2
   952  0022                     	ds	1
   953  0023                     ___ftmul@f2:	
   954                           
   955                           ; 3 bytes @ 0x3
   956  0023                     	ds	1
   957  0024                     ___ftadd@sign:	
   958  0024                     ___llmod@dividend:	
   959                           ; 1 bytes @ 0x4
   960                           
   961                           
   962                           ; 4 bytes @ 0x4
   963  0024                     	ds	1
   964  0025                     ___ftadd@exp2:	
   965                           
   966                           ; 1 bytes @ 0x5
   967  0025                     	ds	1
   968  0026                     ??___ftmul:	
   969  0026                     ___ftadd@exp1:	
   970                           ; 0 bytes @ 0x6
   971                           
   972  0026                     progressBar@aux:	
   973                           ; 1 bytes @ 0x6
   974                           
   975                           
   976                           ; 16 bytes @ 0x6
   977  0026                     	ds	1
   978  0027                     ?___ftsub:	
   979  0027                     ___ftsub@f2:	
   980                           ; 3 bytes @ 0x7
   981                           
   982                           
   983                           ; 3 bytes @ 0x7
   984  0027                     	ds	1
   985  0028                     ??___llmod:	
   986                           
   987                           ; 0 bytes @ 0x8
   988  0028                     	ds	1
   989  0029                     ___llmod@counter:	
   990                           
   991                           ; 1 bytes @ 0x9
   992  0029                     	ds	1
   993  002A                     ?_sprintf:	
   994  002A                     sprintf@f:	
   995                           ; 2 bytes @ 0xA
   996                           
   997  002A                     ___ftmul@exp:	
   998                           ; 1 bytes @ 0xA
   999                           
  1000  002A                     ___ftsub@f1:	
  1001                           ; 1 bytes @ 0xA
  1002                           
  1003                           
  1004                           ; 3 bytes @ 0xA
  1005  002A                     	ds	1
  1006  002B                     ___ftmul@f3_as_product:	
  1007                           
  1008                           ; 3 bytes @ 0xB
  1009  002B                     	ds	3
  1010  002E                     ___ftmul@cntr:	
  1011                           
  1012                           ; 1 bytes @ 0xE
  1013  002E                     	ds	1
  1014  002F                     ___ftmul@sign:	
  1015                           
  1016                           ; 1 bytes @ 0xF
  1017  002F                     	ds	1
  1018  0030                     ?___ftdiv:	
  1019  0030                     ?___fttol:	
  1020                           ; 3 bytes @ 0x10
  1021                           
  1022  0030                     ___ftdiv@f2:	
  1023                           ; 4 bytes @ 0x10
  1024                           
  1025  0030                     ___fttol@f1:	
  1026                           ; 3 bytes @ 0x10
  1027                           
  1028                           
  1029                           ; 3 bytes @ 0x10
  1030  0030                     	ds	3
  1031  0033                     ??_sprintf:	
  1032  0033                     ___ftdiv@f1:	
  1033                           ; 0 bytes @ 0x13
  1034                           
  1035                           
  1036                           ; 3 bytes @ 0x13
  1037  0033                     	ds	1
  1038  0034                     ??___fttol:	
  1039                           
  1040                           ; 0 bytes @ 0x14
  1041  0034                     	ds	2
  1042  0036                     ??___ftdiv:	
  1043  0036                     progressBar@i:	
  1044                           ; 0 bytes @ 0x16
  1045                           
  1046                           
  1047                           ; 2 bytes @ 0x16
  1048  0036                     	ds	2
  1049  0038                     progressBar@result:	
  1050  0038                     sprintf@flag:	
  1051                           ; 1 bytes @ 0x18
  1052                           
  1053  0038                     ___fttol@sign1:	
  1054                           ; 1 bytes @ 0x18
  1055                           
  1056                           
  1057                           ; 1 bytes @ 0x18
  1058  0038                     	ds	1
  1059  0039                     sprintf@ap:	
  1060  0039                     ___fttol@lval:	
  1061                           ; 1 bytes @ 0x19
  1062                           
  1063                           
  1064                           ; 4 bytes @ 0x19
  1065  0039                     	ds	1
  1066  003A                     ___ftdiv@cntr:	
  1067  003A                     sprintf@_val:	
  1068                           ; 1 bytes @ 0x1A
  1069                           
  1070                           
  1071                           ; 4 bytes @ 0x1A
  1072  003A                     	ds	1
  1073  003B                     ___ftdiv@f3:	
  1074                           
  1075                           ; 3 bytes @ 0x1B
  1076  003B                     	ds	2
  1077  003D                     ___fttol@exp1:	
  1078                           
  1079                           ; 1 bytes @ 0x1D
  1080  003D                     	ds	1
  1081  003E                     sprintf@sp:	
  1082  003E                     ___ftdiv@exp:	
  1083                           ; 1 bytes @ 0x1E
  1084                           
  1085                           
  1086                           ; 1 bytes @ 0x1E
  1087  003E                     	ds	1
  1088  003F                     ___ftdiv@sign:	
  1089  003F                     sprintf@width:	
  1090                           ; 1 bytes @ 0x1F
  1091                           
  1092                           
  1093                           ; 2 bytes @ 0x1F
  1094  003F                     	ds	2
  1095  0041                     sprintf@prec:	
  1096                           
  1097                           ; 2 bytes @ 0x21
  1098  0041                     	ds	2
  1099  0043                     sprintf@c:	
  1100                           
  1101                           ; 1 bytes @ 0x23
  1102  0043                     	ds	1
  1103  0044                     ?_ftoa:	
  1104  0044                     ftoa@f:	
  1105                           ; 1 bytes @ 0x24
  1106                           
  1107                           
  1108                           ; 3 bytes @ 0x24
  1109  0044                     	ds	3
  1110  0047                     ftoa@status:	
  1111                           
  1112                           ; 1 bytes @ 0x27
  1113  0047                     	ds	1
  1114  0048                     ??_ftoa:	
  1115  0048                     sendSerial@envio:	
  1116                           ; 0 bytes @ 0x28
  1117                           
  1118                           
  1119                           ; 1 bytes @ 0x28
  1120  0048                     	ds	1
  1121  0049                     sendSerial@nivelRecipiente:	
  1122  0049                     ftoa@rem:	
  1123                           ; 1 bytes @ 0x29
  1124                           
  1125                           
  1126                           ; 4 bytes @ 0x29
  1127  0049                     	ds	1
  1128  004A                     sendSerial@x:	
  1129                           
  1130                           ; 2 bytes @ 0x2A
  1131  004A                     	ds	3
  1132  004D                     ftoa@l:	
  1133                           
  1134                           ; 4 bytes @ 0x2D
  1135  004D                     	ds	4
  1136  0051                     ftoa@cp:	
  1137                           
  1138                           ; 1 bytes @ 0x31
  1139  0051                     	ds	1
  1140  0052                     ??_ISR:	
  1141                           
  1142                           ; 0 bytes @ 0x32
  1143  0052                     	ds	6
  1144  0058                     ISR@buf:	
  1145                           
  1146                           ; 1 bytes @ 0x38
  1147  0058                     	ds	1
  1148  0059                     ISR@pre:	
  1149                           
  1150                           ; 3 bytes @ 0x39
  1151  0059                     	ds	3
  1152  005C                     ISR@preint:	
  1153                           
  1154                           ; 2 bytes @ 0x3C
  1155  005C                     	ds	2
  1156  005E                     ISR@status:	
  1157                           
  1158                           ; 2 bytes @ 0x3E
  1159  005E                     	ds	2
  1160  0060                     ISR@input:	
  1161                           
  1162                           ; 3 bytes @ 0x40
  1163  0060                     	ds	3
  1164  0063                     ISR@input2:	
  1165                           
  1166                           ; 3 bytes @ 0x43
  1167  0063                     	ds	3
  1168  0066                     ISR@per:	
  1169                           
  1170                           ; 1 bytes @ 0x46
  1171  0066                     	ds	1
  1172                           
  1173                           	psect	maintext
  1174  1659                     __pmaintext:	
  1175 ;;
  1176 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1177 ;;
  1178 ;; *************** function _main *****************
  1179 ;; Defined at:
  1180 ;;		line 360 in file "main.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;		None
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;		None
  1185 ;; Return value:  Size  Location     Type
  1186 ;;		None               void
  1187 ;; Registers used:
  1188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 17F/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1194 ;;      Params:         0       0       0       0       0
  1195 ;;      Locals:         0       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0
  1197 ;;      Totals:         0       0       0       0       0
  1198 ;;Total ram usage:        0 bytes
  1199 ;; Hardware stack levels required when called:   13
  1200 ;; This function calls:
  1201 ;;		_ativar
  1202 ;;		_inicialize
  1203 ;; This function is called by:
  1204 ;;		Startup code after reset
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           
  1209                           ;psect for function _main
  1210  1659                     _main:	
  1211                           
  1212                           ;main.c: 362: inicialize();
  1213                           
  1214                           ;incstack = 0
  1215 ;; hardware stack exceeded
  1216                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1217  1659  120A  158A  254F  160A  118A  	fcall	_inicialize
  1218  165E                     l2955:	
  1219                           ;main.c: 364: while (1) {
  1220                           
  1221                           
  1222                           ;main.c: 365: ativar();
  1223  165E  120A  158A  24DB  160A  118A  	fcall	_ativar
  1224  1663  2E5E               	goto	l2955
  1225  1664                     __end_of_main:	
  1226                           
  1227                           	psect	text1
  1228  0D4F                     __ptext1:	
  1229 ;; *************** function _inicialize *****************
  1230 ;; Defined at:
  1231 ;;		line 331 in file "main.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;		None               void
  1238 ;; Registers used:
  1239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1245 ;;      Params:         0       0       0       0       0
  1246 ;;      Locals:         0       0       0       0       0
  1247 ;;      Temps:          0       0       3       0       0
  1248 ;;      Totals:         0       0       3       0       0
  1249 ;;Total ram usage:        3 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:   12
  1252 ;; This function calls:
  1253 ;;		_ADCInit
  1254 ;;		_LCDClear
  1255 ;;		_USARTInit
  1256 ;;		_init_lcd_4bit
  1257 ;;		_lcd_escreve_string
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           
  1264                           ;psect for function _inicialize
  1265  0D4F                     _inicialize:	
  1266                           
  1267                           ;main.c: 333: USARTInit(57600, 1);
  1268                           
  1269                           ;incstack = 0
  1270 ;; hardware stack exceeded
  1271                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1272  0D4F  3000               	movlw	0
  1273  0D50  1683               	bsf	3,5	;RP0=1, select bank1
  1274  0D51  1303               	bcf	3,6	;RP1=0, select bank1
  1275  0D52  00B2               	movwf	(USARTInit@BaudRate+3)^(0+128)
  1276  0D53  3000               	movlw	0
  1277  0D54  00B1               	movwf	(USARTInit@BaudRate+2)^(0+128)
  1278  0D55  30E1               	movlw	225
  1279  0D56  00B0               	movwf	(USARTInit@BaudRate+1)^(0+128)
  1280  0D57  3000               	movlw	0
  1281  0D58  00AF               	movwf	USARTInit@BaudRate^(0+128)
  1282  0D59  3001               	movlw	1
  1283  0D5A  00B3               	movwf	USARTInit@Mode^(0+128)
  1284  0D5B  3000               	movlw	0
  1285  0D5C  00B4               	movwf	(USARTInit@Mode^(0+128)+1)
  1286  0D5D  120A  158A  240F  120A  158A  	fcall	_USARTInit
  1287                           
  1288                           ;main.c: 335: TRISA = 0b11111111;
  1289  0D62  30FF               	movlw	255
  1290  0D63  1683               	bsf	3,5	;RP0=1, select bank1
  1291  0D64  1303               	bcf	3,6	;RP1=0, select bank1
  1292  0D65  0085               	movwf	5	;volatile
  1293                           
  1294                           ;main.c: 336: TRISDbits.TRISD3 = 0;
  1295  0D66  1188               	bcf	8,3	;volatile
  1296                           
  1297                           ;main.c: 337: TRISDbits.TRISD2 = 0;
  1298  0D67  1108               	bcf	8,2	;volatile
  1299                           
  1300                           ;main.c: 338: TRISCbits.TRISC0 = 1;
  1301  0D68  1407               	bsf	7,0	;volatile
  1302                           
  1303                           ;main.c: 339: TRISCbits.TRISC1 = 1;
  1304  0D69  1487               	bsf	7,1	;volatile
  1305                           
  1306                           ;main.c: 340: TRISCbits.TRISC2 = 1;
  1307  0D6A  1507               	bsf	7,2	;volatile
  1308                           
  1309                           ;main.c: 341: TRISCbits.TRISC3 = 1;
  1310  0D6B  1587               	bsf	7,3	;volatile
  1311                           
  1312                           ;main.c: 343: PORTAbits.RA0 = 0;
  1313  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  1314  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  1315  0D6E  1005               	bcf	5,0	;volatile
  1316                           
  1317                           ;main.c: 344: PORTDbits.RD2 = 1;
  1318  0D6F  1508               	bsf	8,2	;volatile
  1319                           
  1320                           ;main.c: 345: PORTDbits.RD3 = 0;
  1321  0D70  1188               	bcf	8,3	;volatile
  1322                           
  1323                           ;main.c: 346: PORTCbits.RC3 = 0;
  1324  0D71  1187               	bcf	7,3	;volatile
  1325                           
  1326                           ;main.c: 347: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1327  0D72  3033               	movlw	51
  1328  0D73  1683               	bsf	3,5	;RP0=1, select bank1
  1329  0D74  1303               	bcf	3,6	;RP1=0, select bank1
  1330  0D75  00BD               	movwf	(??_inicialize^(0+128)+2)
  1331  0D76  30BC               	movlw	188
  1332  0D77  00BC               	movwf	(??_inicialize^(0+128)+1)
  1333  0D78  3010               	movlw	16
  1334  0D79  00BB               	movwf	??_inicialize^(0+128)
  1335  0D7A                     u3917:	
  1336  0D7A  0BBB               	decfsz	??_inicialize^(0+128),f
  1337  0D7B  2D7A               	goto	u3917
  1338  0D7C  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1339  0D7D  2D7A               	goto	u3917
  1340  0D7E  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1341  0D7F  2D7A               	goto	u3917
  1342                           
  1343                           ;main.c: 349: init_lcd_4bit();
  1344  0D80  120A  158A  2475  120A  158A  	fcall	_init_lcd_4bit
  1345                           
  1346                           ;main.c: 350: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1347  0D85  3033               	movlw	51
  1348  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  1349  0D87  1303               	bcf	3,6	;RP1=0, select bank1
  1350  0D88  00BD               	movwf	(??_inicialize^(0+128)+2)
  1351  0D89  30BC               	movlw	188
  1352  0D8A  00BC               	movwf	(??_inicialize^(0+128)+1)
  1353  0D8B  3010               	movlw	16
  1354  0D8C  00BB               	movwf	??_inicialize^(0+128)
  1355  0D8D                     u3927:	
  1356  0D8D  0BBB               	decfsz	??_inicialize^(0+128),f
  1357  0D8E  2D8D               	goto	u3927
  1358  0D8F  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1359  0D90  2D8D               	goto	u3927
  1360  0D91  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1361  0D92  2D8D               	goto	u3927
  1362                           
  1363                           ;main.c: 351: INTCONbits.PEIE = 1;
  1364  0D93  170B               	bsf	11,6	;volatile
  1365                           
  1366                           ;main.c: 352: INTCONbits.GIE = 1;
  1367  0D94  178B               	bsf	11,7	;volatile
  1368                           
  1369                           ;main.c: 353: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1370  0D95  301A               	movlw	26
  1371  0D96  1683               	bsf	3,5	;RP0=1, select bank1
  1372  0D97  1303               	bcf	3,6	;RP1=0, select bank1
  1373  0D98  00BD               	movwf	(??_inicialize^(0+128)+2)
  1374  0D99  305E               	movlw	94
  1375  0D9A  00BC               	movwf	(??_inicialize^(0+128)+1)
  1376  0D9B  3086               	movlw	134
  1377  0D9C  00BB               	movwf	??_inicialize^(0+128)
  1378  0D9D                     u3937:	
  1379  0D9D  0BBB               	decfsz	??_inicialize^(0+128),f
  1380  0D9E  2D9D               	goto	u3937
  1381  0D9F  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1382  0DA0  2D9D               	goto	u3937
  1383  0DA1  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1384  0DA2  2D9D               	goto	u3937
  1385  0DA3  0000               	nop
  1386                           
  1387                           ;main.c: 354: ADCInit();
  1388  0DA4  160A  118A  26A0  120A  158A  	fcall	_ADCInit
  1389                           
  1390                           ;main.c: 355: lcd_escreve_string("\fLoading PIC...");
  1391  0DA9  305B               	movlw	low (STR_4-__stringbase)
  1392  0DAA  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0DAB  1303               	bcf	3,6	;RP1=0, select bank1
  1394  0DAC  00AC               	movwf	lcd_escreve_string@y^(0+128)
  1395  0DAD  3080               	movlw	128
  1396  0DAE  00AD               	movwf	(lcd_escreve_string@y+1)^(0+128)
  1397  0DAF  120A  158A  20C1  120A  158A  	fcall	_lcd_escreve_string
  1398                           
  1399                           ;main.c: 356: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1400  0DB4  307F               	movlw	127
  1401  0DB5  1683               	bsf	3,5	;RP0=1, select bank1
  1402  0DB6  1303               	bcf	3,6	;RP1=0, select bank1
  1403  0DB7  00BD               	movwf	(??_inicialize^(0+128)+2)
  1404  0DB8  30D4               	movlw	212
  1405  0DB9  00BC               	movwf	(??_inicialize^(0+128)+1)
  1406  0DBA  30AE               	movlw	174
  1407  0DBB  00BB               	movwf	??_inicialize^(0+128)
  1408  0DBC                     u3947:	
  1409  0DBC  0BBB               	decfsz	??_inicialize^(0+128),f
  1410  0DBD  2DBC               	goto	u3947
  1411  0DBE  0BBC               	decfsz	(??_inicialize^(0+128)+1),f
  1412  0DBF  2DBC               	goto	u3947
  1413  0DC0  0BBD               	decfsz	(??_inicialize^(0+128)+2),f
  1414  0DC1  2DBC               	goto	u3947
  1415  0DC2  2DC3               	nop2
  1416                           
  1417                           ;main.c: 357: LCDClear();
  1418  0DC3  120A  158A  21DA   	fcall	_LCDClear
  1419  0DC6  0008               	return
  1420  0DC7                     __end_of_inicialize:	
  1421                           
  1422                           	psect	text2
  1423  08C1                     __ptext2:	
  1424 ;; *************** function _lcd_escreve_string *****************
  1425 ;; Defined at:
  1426 ;;		line 168 in file "lcd_4bit.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  y               2   12[BANK1 ] PTR const unsigned char 
  1429 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  1430 ;;		 -> progressBar@aux(16), 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;		None               void
  1435 ;; Registers used:
  1436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1442 ;;      Params:         0       0       2       0       0
  1443 ;;      Locals:         0       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0
  1445 ;;      Totals:         0       0       2       0       0
  1446 ;;Total ram usage:        2 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:   11
  1449 ;; This function calls:
  1450 ;;		_lcd_putc
  1451 ;; This function is called by:
  1452 ;;		_inicialize
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function _lcd_escreve_string
  1458  08C1                     _lcd_escreve_string:	
  1459  08C1                     l2341:	
  1460                           ;lcd_4bit.c: 170: while(*y!='\0')
  1461                           
  1462                           ;incstack = 0
  1463 ;; hardware stack exceeded
  1464                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1465                           
  1466  08C1  1683               	bsf	3,5	;RP0=1, select bank1
  1467  08C2  1303               	bcf	3,6	;RP1=0, select bank1
  1468  08C3  082D               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1469  08C4  1283               	bcf	3,5	;RP0=0, select bank0
  1470  08C5  1303               	bcf	3,6	;RP1=0, select bank0
  1471  08C6  00FF               	movwf	127
  1472  08C7  1683               	bsf	3,5	;RP0=1, select bank1
  1473  08C8  1303               	bcf	3,6	;RP1=0, select bank1
  1474  08C9  082C               	movf	lcd_escreve_string@y^(0+128),w
  1475  08CA  0084               	movwf	4
  1476  08CB  1283               	bcf	3,5	;RP0=0, select bank0
  1477  08CC  1303               	bcf	3,6	;RP1=0, select bank0
  1478  08CD  120A  158A  2000  120A  158A  	fcall	stringtab
  1479  08D2  3800               	iorlw	0
  1480  08D3  1903               	btfsc	3,2
  1481  08D4  0008               	return
  1482                           
  1483                           ;lcd_4bit.c: 171: {
  1484                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1485  08D5  1683               	bsf	3,5	;RP0=1, select bank1
  1486  08D6  1303               	bcf	3,6	;RP1=0, select bank1
  1487  08D7  082D               	movf	(lcd_escreve_string@y+1)^(0+128),w
  1488  08D8  1283               	bcf	3,5	;RP0=0, select bank0
  1489  08D9  1303               	bcf	3,6	;RP1=0, select bank0
  1490  08DA  00FF               	movwf	127
  1491  08DB  1683               	bsf	3,5	;RP0=1, select bank1
  1492  08DC  1303               	bcf	3,6	;RP1=0, select bank1
  1493  08DD  082C               	movf	lcd_escreve_string@y^(0+128),w
  1494  08DE  0084               	movwf	4
  1495  08DF  1283               	bcf	3,5	;RP0=0, select bank0
  1496  08E0  1303               	bcf	3,6	;RP1=0, select bank0
  1497  08E1  120A  158A  2000  120A  158A  	fcall	stringtab
  1498  08E6  120A  158A  221A  120A  158A  	fcall	_lcd_putc
  1499                           
  1500                           ;lcd_4bit.c: 173: y++;
  1501  08EB  3001               	movlw	1
  1502  08EC  1683               	bsf	3,5	;RP0=1, select bank1
  1503  08ED  1303               	bcf	3,6	;RP1=0, select bank1
  1504  08EE  07AC               	addwf	lcd_escreve_string@y^(0+128),f
  1505  08EF  1803               	skipnc
  1506  08F0  0AAD               	incf	(lcd_escreve_string@y+1)^(0+128),f
  1507  08F1  28C1               	goto	l2341
  1508  08F2                     __end_of_lcd_escreve_string:	
  1509                           
  1510                           	psect	text3
  1511  0A1A                     __ptext3:	
  1512 ;; *************** function _lcd_putc *****************
  1513 ;; Defined at:
  1514 ;;		line 82 in file "lcd_4bit.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  c               1    wreg     unsigned char 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  c               1   11[BANK1 ] unsigned char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;		None               void
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         0       0       1       0       0
  1530 ;;      Temps:          0       0       2       0       0
  1531 ;;      Totals:         0       0       3       0       0
  1532 ;;Total ram usage:        3 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:   10
  1535 ;; This function calls:
  1536 ;;		_lcd_envia_byte
  1537 ;;		_lcd_gotoxy
  1538 ;; This function is called by:
  1539 ;;		_lcd_escreve_string
  1540 ;;		_lcd_escreve_p
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _lcd_putc
  1546  0A1A                     _lcd_putc:	
  1547                           
  1548                           ;incstack = 0
  1549 ;; hardware stack exceeded
  1550                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1551                           ;lcd_putc@c stored from wreg
  1552  0A1A  1683               	bsf	3,5	;RP0=1, select bank1
  1553  0A1B  1303               	bcf	3,6	;RP1=0, select bank1
  1554  0A1C  00AB               	movwf	lcd_putc@c^(0+128)
  1555                           
  1556                           ;lcd_4bit.c: 84: switch(c)
  1557  0A1D  2A53               	goto	l2043
  1558  0A1E                     l2031:	
  1559                           ;lcd_4bit.c: 85: {
  1560                           ;lcd_4bit.c: 86: case '\f':
  1561                           
  1562                           
  1563                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1564  0A1E  01A2               	clrf	lcd_envia_byte@n^(0+128)
  1565  0A1F  0AA2               	incf	lcd_envia_byte@n^(0+128),f
  1566  0A20  3000               	movlw	0
  1567  0A21  120A  158A  20F2  120A  158A  	fcall	_lcd_envia_byte
  1568                           
  1569                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1570  0A26  300D               	movlw	13
  1571  0A27  1683               	bsf	3,5	;RP0=1, select bank1
  1572  0A28  1303               	bcf	3,6	;RP1=0, select bank1
  1573  0A29  00AA               	movwf	(??_lcd_putc^(0+128)+1)
  1574  0A2A  30FB               	movlw	251
  1575  0A2B  00A9               	movwf	??_lcd_putc^(0+128)
  1576  0A2C                     u3957:	
  1577  0A2C  0BA9               	decfsz	??_lcd_putc^(0+128),f
  1578  0A2D  2A2C               	goto	u3957
  1579  0A2E  0BAA               	decfsz	(??_lcd_putc^(0+128)+1),f
  1580  0A2F  2A2C               	goto	u3957
  1581  0A30  2A31               	nop2
  1582                           
  1583                           ;lcd_4bit.c: 89: break;
  1584  0A31  0008               	return
  1585  0A32                     l2035:	
  1586                           ;lcd_4bit.c: 91: case '\n':
  1587                           
  1588                           
  1589                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1590  0A32  3002               	movlw	2
  1591  0A33  1683               	bsf	3,5	;RP0=1, select bank1
  1592  0A34  1303               	bcf	3,6	;RP1=0, select bank1
  1593  0A35  00A9               	movwf	??_lcd_putc^(0+128)
  1594  0A36  0829               	movf	??_lcd_putc^(0+128),w
  1595  0A37  00A5               	movwf	lcd_gotoxy@y^(0+128)
  1596  0A38  3001               	movlw	1
  1597  0A39  160A  118A  2704   	fcall	_lcd_gotoxy
  1598                           
  1599                           ;lcd_4bit.c: 93: break;
  1600  0A3C  0008               	return
  1601  0A3D                     l2037:	
  1602                           ;lcd_4bit.c: 95: case '\b':
  1603                           
  1604                           
  1605                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1606  0A3D  3010               	movlw	16
  1607  0A3E  1683               	bsf	3,5	;RP0=1, select bank1
  1608  0A3F  1303               	bcf	3,6	;RP1=0, select bank1
  1609  0A40  00A9               	movwf	??_lcd_putc^(0+128)
  1610  0A41  0829               	movf	??_lcd_putc^(0+128),w
  1611  0A42  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1612  0A43  3000               	movlw	0
  1613  0A44  120A  158A  20F2   	fcall	_lcd_envia_byte
  1614                           
  1615                           ;lcd_4bit.c: 97: break;
  1616  0A47  0008               	return
  1617  0A48                     l2039:	
  1618                           ;lcd_4bit.c: 99: default:
  1619                           
  1620                           
  1621                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1622  0A48  1683               	bsf	3,5	;RP0=1, select bank1
  1623  0A49  1303               	bcf	3,6	;RP1=0, select bank1
  1624  0A4A  082B               	movf	lcd_putc@c^(0+128),w
  1625  0A4B  00A9               	movwf	??_lcd_putc^(0+128)
  1626  0A4C  0829               	movf	??_lcd_putc^(0+128),w
  1627  0A4D  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1628  0A4E  3001               	movlw	1
  1629  0A4F  120A  158A  20F2   	fcall	_lcd_envia_byte
  1630                           
  1631                           ;lcd_4bit.c: 102: }
  1632                           
  1633                           ;lcd_4bit.c: 101: break;
  1634  0A52  0008               	return
  1635  0A53                     l2043:	
  1636  0A53  1683               	bsf	3,5	;RP0=1, select bank1
  1637  0A54  1303               	bcf	3,6	;RP1=0, select bank1
  1638  0A55  082B               	movf	lcd_putc@c^(0+128),w
  1639                           
  1640                           ; Switch size 1, requested type "space"
  1641                           ; Number of cases is 3, Range of values is 8 to 12
  1642                           ; switch strategies available:
  1643                           ; Name         Instructions Cycles
  1644                           ; simple_byte           10     6 (average)
  1645                           ; direct_byte           26    11 (fixed)
  1646                           ; jumptable            263     9 (fixed)
  1647                           ;	Chosen strategy is simple_byte
  1648  0A56  3A08               	xorlw	8	; case 8
  1649  0A57  1903               	skipnz
  1650  0A58  2A3D               	goto	l2037
  1651  0A59  3A02               	xorlw	2	; case 10
  1652  0A5A  1903               	skipnz
  1653  0A5B  2A32               	goto	l2035
  1654  0A5C  3A06               	xorlw	6	; case 12
  1655  0A5D  1903               	skipnz
  1656  0A5E  2A1E               	goto	l2031
  1657  0A5F  2A48               	goto	l2039
  1658  0A60  0008               	return
  1659  0A61                     __end_of_lcd_putc:	
  1660                           
  1661                           	psect	text4
  1662  1704                     __ptext4:	
  1663 ;; *************** function _lcd_gotoxy *****************
  1664 ;; Defined at:
  1665 ;;		line 70 in file "lcd_4bit.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  x               1    wreg     unsigned char 
  1668 ;;  y               1    5[BANK1 ] unsigned char 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  x               1    7[BANK1 ] unsigned char 
  1671 ;;  address         1    8[BANK1 ] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;		None               void
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, pclath, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1681 ;;      Params:         0       0       1       0       0
  1682 ;;      Locals:         0       0       2       0       0
  1683 ;;      Temps:          0       0       1       0       0
  1684 ;;      Totals:         0       0       4       0       0
  1685 ;;Total ram usage:        4 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    9
  1688 ;; This function calls:
  1689 ;;		_lcd_envia_byte
  1690 ;; This function is called by:
  1691 ;;		_lcd_putc
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _lcd_gotoxy
  1697  1704                     _lcd_gotoxy:	
  1698                           
  1699                           ;incstack = 0
  1700 ;; hardware stack exceeded
  1701                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1702                           ;lcd_gotoxy@x stored from wreg
  1703  1704  1683               	bsf	3,5	;RP0=1, select bank1
  1704  1705  1303               	bcf	3,6	;RP1=0, select bank1
  1705  1706  00A7               	movwf	lcd_gotoxy@x^(0+128)
  1706                           
  1707                           ;lcd_4bit.c: 72: unsigned char address;
  1708                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1709  1707  0825               	movf	lcd_gotoxy@y^(0+128),w
  1710  1708  3A01               	xorlw	1
  1711  1709  1903               	skipnz
  1712  170A  2F10               	goto	l1979
  1713  170B  3040               	movlw	64
  1714  170C  00A6               	movwf	??_lcd_gotoxy^(0+128)
  1715  170D  0826               	movf	??_lcd_gotoxy^(0+128),w
  1716  170E  00A8               	movwf	lcd_gotoxy@address^(0+128)
  1717  170F  2F11               	goto	l1981
  1718  1710                     l1979:	
  1719                           
  1720                           ;lcd_4bit.c: 75: else address=0;
  1721  1710  01A8               	clrf	lcd_gotoxy@address^(0+128)
  1722  1711                     l1981:	
  1723                           
  1724                           ;lcd_4bit.c: 77: address += x-1;
  1725  1711  0827               	movf	lcd_gotoxy@x^(0+128),w
  1726  1712  3EFF               	addlw	255
  1727  1713  00A6               	movwf	??_lcd_gotoxy^(0+128)
  1728  1714  0826               	movf	??_lcd_gotoxy^(0+128),w
  1729  1715  07A8               	addwf	lcd_gotoxy@address^(0+128),f
  1730                           
  1731                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1732  1716  0828               	movf	lcd_gotoxy@address^(0+128),w
  1733  1717  3880               	iorlw	128
  1734  1718  00A6               	movwf	??_lcd_gotoxy^(0+128)
  1735  1719  0826               	movf	??_lcd_gotoxy^(0+128),w
  1736  171A  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1737  171B  3000               	movlw	0
  1738  171C  120A  158A  20F2   	fcall	_lcd_envia_byte
  1739  171F  0008               	return
  1740  1720                     __end_of_lcd_gotoxy:	
  1741                           
  1742                           	psect	text5
  1743  0C75                     __ptext5:	
  1744 ;; *************** function _init_lcd_4bit *****************
  1745 ;; Defined at:
  1746 ;;		line 6 in file "lcd_4bit.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  i               1    7[BANK1 ] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;		None               void
  1753 ;; Registers used:
  1754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1760 ;;      Params:         0       0       0       0       0
  1761 ;;      Locals:         0       0       1       0       0
  1762 ;;      Temps:          0       0       2       0       0
  1763 ;;      Totals:         0       0       3       0       0
  1764 ;;Total ram usage:        3 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    9
  1767 ;; This function calls:
  1768 ;;		_lcd_envia_byte
  1769 ;;		_lcd_envia_nibble
  1770 ;; This function is called by:
  1771 ;;		_inicialize
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           
  1776                           ;psect for function _init_lcd_4bit
  1777  0C75                     _init_lcd_4bit:	
  1778                           
  1779                           ;lcd_4bit.c: 8: unsigned char i;
  1780                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1781                           
  1782                           ;incstack = 0
  1783 ;; hardware stack exceeded
  1784                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1785  0C75  1683               	bsf	3,5	;RP0=1, select bank1
  1786  0C76  1303               	bcf	3,6	;RP1=0, select bank1
  1787  0C77  1206               	bcf	6,4	;volatile
  1788                           
  1789                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1790  0C78  1286               	bcf	6,5	;volatile
  1791                           
  1792                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1793  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  1794  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  1795  0C7B  1206               	bcf	6,4	;volatile
  1796                           
  1797                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1798  0C7C  1286               	bcf	6,5	;volatile
  1799                           
  1800                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1801  0C7D  1683               	bsf	3,5	;RP0=1, select bank1
  1802  0C7E  1303               	bcf	3,6	;RP1=0, select bank1
  1803  0C7F  1006               	bcf	6,0	;volatile
  1804                           
  1805                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1806  0C80  1086               	bcf	6,1	;volatile
  1807                           
  1808                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1809  0C81  1106               	bcf	6,2	;volatile
  1810                           
  1811                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1812  0C82  1186               	bcf	6,3	;volatile
  1813                           
  1814                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1815  0C83  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0C84  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0C85  1006               	bcf	6,0	;volatile
  1818                           
  1819                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1820  0C86  1086               	bcf	6,1	;volatile
  1821                           
  1822                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1823  0C87  1106               	bcf	6,2	;volatile
  1824                           
  1825                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1826  0C88  1186               	bcf	6,3	;volatile
  1827                           
  1828                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1829  0C89  3062               	movlw	98
  1830  0C8A  1683               	bsf	3,5	;RP0=1, select bank1
  1831  0C8B  1303               	bcf	3,6	;RP1=0, select bank1
  1832  0C8C  00A6               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1833  0C8D  3065               	movlw	101
  1834  0C8E  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1835  0C8F                     u3967:	
  1836  0C8F  0BA5               	decfsz	??_init_lcd_4bit^(0+128),f
  1837  0C90  2C8F               	goto	u3967
  1838  0C91  0BA6               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1839  0C92  2C8F               	goto	u3967
  1840  0C93  2C94               	nop2
  1841                           
  1842                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1843  0C94  1683               	bsf	3,5	;RP0=1, select bank1
  1844  0C95  1303               	bcf	3,6	;RP1=0, select bank1
  1845  0C96  01A7               	clrf	init_lcd_4bit@i^(0+128)
  1846  0C97  3003               	movlw	3
  1847  0C98  0227               	subwf	init_lcd_4bit@i^(0+128),w
  1848  0C99  1803               	btfsc	3,0
  1849  0C9A  2CB6               	goto	l2369
  1850  0C9B                     l2361:	
  1851                           
  1852                           ;lcd_4bit.c: 26: {
  1853                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1854  0C9B  3003               	movlw	3
  1855  0C9C  120A  158A  22FB  120A  158A  	fcall	_lcd_envia_nibble
  1856                           
  1857                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1858  0CA1  3021               	movlw	33
  1859  0CA2  1683               	bsf	3,5	;RP0=1, select bank1
  1860  0CA3  1303               	bcf	3,6	;RP1=0, select bank1
  1861  0CA4  00A6               	movwf	(??_init_lcd_4bit^(0+128)+1)
  1862  0CA5  3076               	movlw	118
  1863  0CA6  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1864  0CA7                     u3977:	
  1865  0CA7  0BA5               	decfsz	??_init_lcd_4bit^(0+128),f
  1866  0CA8  2CA7               	goto	u3977
  1867  0CA9  0BA6               	decfsz	(??_init_lcd_4bit^(0+128)+1),f
  1868  0CAA  2CA7               	goto	u3977
  1869  0CAB  0000               	nop
  1870  0CAC  3001               	movlw	1
  1871  0CAD  1683               	bsf	3,5	;RP0=1, select bank1
  1872  0CAE  1303               	bcf	3,6	;RP1=0, select bank1
  1873  0CAF  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1874  0CB0  0825               	movf	??_init_lcd_4bit^(0+128),w
  1875  0CB1  07A7               	addwf	init_lcd_4bit@i^(0+128),f
  1876  0CB2  3003               	movlw	3
  1877  0CB3  0227               	subwf	init_lcd_4bit@i^(0+128),w
  1878  0CB4  1C03               	skipc
  1879  0CB5  2C9B               	goto	l2361
  1880  0CB6                     l2369:	
  1881                           
  1882                           ;lcd_4bit.c: 29: }
  1883                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1884  0CB6  3002               	movlw	2
  1885  0CB7  120A  158A  22FB  120A  158A  	fcall	_lcd_envia_nibble
  1886                           
  1887                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1888  0CBC  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0CBD  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0CBE  01A7               	clrf	init_lcd_4bit@i^(0+128)
  1891  0CBF                     L1:	
  1892  0CBF  3004               	movlw	4
  1893  0CC0  0227               	subwf	init_lcd_4bit@i^(0+128),w
  1894  0CC1  1803               	btfsc	3,0
  1895  0CC2  0008               	return
  1896                           
  1897                           ;lcd_4bit.c: 33: {
  1898                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1899  0CC3  0827               	movf	init_lcd_4bit@i^(0+128),w
  1900  0CC4  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1901  0CC5  0084               	movwf	4
  1902  0CC6  120A  158A  200A  120A  158A  	fcall	stringdir
  1903  0CCB  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1904  0CCC  0825               	movf	??_init_lcd_4bit^(0+128),w
  1905  0CCD  00A2               	movwf	lcd_envia_byte@n^(0+128)
  1906  0CCE  3000               	movlw	0
  1907  0CCF  120A  158A  20F2  120A  158A  	fcall	_lcd_envia_byte
  1908  0CD4  3001               	movlw	1
  1909  0CD5  1683               	bsf	3,5	;RP0=1, select bank1
  1910  0CD6  1303               	bcf	3,6	;RP1=0, select bank1
  1911  0CD7  00A5               	movwf	??_init_lcd_4bit^(0+128)
  1912  0CD8  0825               	movf	??_init_lcd_4bit^(0+128),w
  1913  0CD9  07A7               	addwf	init_lcd_4bit@i^(0+128),f
  1914  0CDA  2CBF               	goto	L1
  1915  0CDB                     __end_of_init_lcd_4bit:	
  1916                           
  1917                           	psect	text6
  1918  0C0F                     __ptext6:	
  1919 ;; *************** function _USARTInit *****************
  1920 ;; Defined at:
  1921 ;;		line 34 in file "main.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  BaudRate        4   15[BANK1 ] long 
  1924 ;;  Mode            2   19[BANK1 ] int 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  BR              2   25[BANK1 ] int 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;		None               void
  1929 ;; Registers used:
  1930 ;;		wreg, status,2, status,0, pclath, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1936 ;;      Params:         0       0       6       0       0
  1937 ;;      Locals:         0       0       2       0       0
  1938 ;;      Temps:          0       0       4       0       0
  1939 ;;      Totals:         0       0      12       0       0
  1940 ;;Total ram usage:       12 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    8
  1943 ;; This function calls:
  1944 ;;		___aldiv
  1945 ;; This function is called by:
  1946 ;;		_inicialize
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           
  1951                           ;psect for function _USARTInit
  1952  0C0F                     _USARTInit:	
  1953                           
  1954                           ;main.c: 35: int BR = 0;
  1955                           
  1956                           ;incstack = 0
  1957 ;; hardware stack exceeded
  1958                           ; Regs used in _USARTInit: [wreg+status,2+status,0+pclath+cstack]
  1959  0C0F  1683               	bsf	3,5	;RP0=1, select bank1
  1960  0C10  1303               	bcf	3,6	;RP1=0, select bank1
  1961  0C11  01B9               	clrf	USARTInit@BR^(0+128)
  1962  0C12  01BA               	clrf	(USARTInit@BR+1)^(0+128)
  1963                           
  1964                           ;main.c: 38: if (Mode == 0)
  1965  0C13  0834               	movf	(USARTInit@Mode+1)^(0+128),w
  1966  0C14  0433               	iorwf	USARTInit@Mode^(0+128),w
  1967  0C15  1D03               	skipz
  1968  0C16  2C29               	goto	l2253
  1969                           
  1970                           ;main.c: 39: {
  1971                           ;main.c: 40: BR = (20000000 / (64 * BaudRate)) - 1;
  1972  0C17  082F               	movf	USARTInit@BaudRate^(0+128),w
  1973  0C18  00B5               	movwf	??_USARTInit^(0+128)
  1974  0C19  0830               	movf	(USARTInit@BaudRate+1)^(0+128),w
  1975  0C1A  00B6               	movwf	(??_USARTInit^(0+128)+1)
  1976  0C1B  0831               	movf	(USARTInit@BaudRate+2)^(0+128),w
  1977  0C1C  00B7               	movwf	(??_USARTInit^(0+128)+2)
  1978  0C1D  0832               	movf	(USARTInit@BaudRate+3)^(0+128),w
  1979  0C1E  00B8               	movwf	(??_USARTInit^(0+128)+3)
  1980  0C1F  3006               	movlw	6
  1981  0C20                     u2695:	
  1982  0C20  1003               	clrc
  1983  0C21  0DB5               	rlf	??_USARTInit^(0+128),f
  1984  0C22  0DB6               	rlf	(??_USARTInit^(0+128)+1),f
  1985  0C23  0DB7               	rlf	(??_USARTInit^(0+128)+2),f
  1986  0C24  0DB8               	rlf	(??_USARTInit^(0+128)+3),f
  1987  0C25  3EFF               	addlw	-1
  1988  0C26  1D03               	skipz
  1989  0C27  2C20               	goto	u2695
  1990  0C28  2C3A               	goto	L2
  1991  0C29                     l2253:	
  1992                           ;main.c: 42: } else
  1993                           
  1994                           ;main.c: 41: SPBRG = BR;
  1995                           
  1996                           
  1997                           ;main.c: 43: {
  1998                           ;main.c: 44: BR = (20000000 / (16 * BaudRate)) - 1;
  1999  0C29  082F               	movf	USARTInit@BaudRate^(0+128),w
  2000  0C2A  00B5               	movwf	??_USARTInit^(0+128)
  2001  0C2B  0830               	movf	(USARTInit@BaudRate+1)^(0+128),w
  2002  0C2C  00B6               	movwf	(??_USARTInit^(0+128)+1)
  2003  0C2D  0831               	movf	(USARTInit@BaudRate+2)^(0+128),w
  2004  0C2E  00B7               	movwf	(??_USARTInit^(0+128)+2)
  2005  0C2F  0832               	movf	(USARTInit@BaudRate+3)^(0+128),w
  2006  0C30  00B8               	movwf	(??_USARTInit^(0+128)+3)
  2007  0C31  3004               	movlw	4
  2008  0C32                     u2705:	
  2009  0C32  1003               	clrc
  2010  0C33  0DB5               	rlf	??_USARTInit^(0+128),f
  2011  0C34  0DB6               	rlf	(??_USARTInit^(0+128)+1),f
  2012  0C35  0DB7               	rlf	(??_USARTInit^(0+128)+2),f
  2013  0C36  0DB8               	rlf	(??_USARTInit^(0+128)+3),f
  2014  0C37  3EFF               	addlw	-1
  2015  0C38  1D03               	skipz
  2016  0C39  2C32               	goto	u2705
  2017  0C3A                     L2:	
  2018  0C3A  0838               	movf	(??_USARTInit+3)^(0+128),w
  2019  0C3B  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  2020  0C3C  0837               	movf	(??_USARTInit+2)^(0+128),w
  2021  0C3D  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  2022  0C3E  0836               	movf	(??_USARTInit+1)^(0+128),w
  2023  0C3F  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  2024  0C40  0835               	movf	??_USARTInit^(0+128),w
  2025  0C41  00A0               	movwf	___aldiv@divisor^(0+128)
  2026  0C42  3001               	movlw	1
  2027  0C43  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  2028  0C44  3031               	movlw	49
  2029  0C45  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  2030  0C46  302D               	movlw	45
  2031  0C47  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  2032  0C48  3000               	movlw	0
  2033  0C49  00A4               	movwf	___aldiv@dividend^(0+128)
  2034  0C4A  120A  158A  26CE   	fcall	___aldiv
  2035  0C4D  1683               	bsf	3,5	;RP0=1, select bank1
  2036  0C4E  1303               	bcf	3,6	;RP1=0, select bank1
  2037  0C4F  0820               	movf	?___aldiv^(0+128),w
  2038  0C50  3EFF               	addlw	255
  2039  0C51  00B9               	movwf	USARTInit@BR^(0+128)
  2040  0C52  0821               	movf	(?___aldiv^(0+128)+1),w
  2041  0C53  1803               	skipnc
  2042  0C54  3E01               	addlw	1
  2043  0C55  3EFF               	addlw	255
  2044  0C56  00BA               	movwf	(USARTInit@BR+1)^(0+128)
  2045                           
  2046                           ;main.c: 45: SPBRG = BR;
  2047  0C57  0839               	movf	USARTInit@BR^(0+128),w
  2048  0C58  0099               	movwf	25	;volatile
  2049                           
  2050                           ;main.c: 46: }
  2051                           ;main.c: 49: TXSTAbits.CSRC = 1;
  2052  0C59  1798               	bsf	24,7	;volatile
  2053                           
  2054                           ;main.c: 50: TXSTAbits.TX9 = 0;
  2055  0C5A  1318               	bcf	24,6	;volatile
  2056                           
  2057                           ;main.c: 51: TXSTAbits.TXEN = 1;
  2058  0C5B  1698               	bsf	24,5	;volatile
  2059                           
  2060                           ;main.c: 52: TXSTAbits.SYNC = 0;
  2061  0C5C  1218               	bcf	24,4	;volatile
  2062                           
  2063                           ;main.c: 53: TXSTAbits.BRGH = Mode;
  2064  0C5D  0833               	movf	USARTInit@Mode^(0+128),w
  2065  0C5E  1D03               	skipz
  2066  0C5F  1518               	bsf	24,2	;volatile
  2067  0C60  1903               	skipnz
  2068  0C61  1118               	bcf	24,2	;volatile
  2069                           
  2070                           ;main.c: 54: TXSTAbits.TRMT = 1;
  2071  0C62  1498               	bsf	24,1	;volatile
  2072                           
  2073                           ;main.c: 55: TXSTAbits.TX9D = 0;
  2074  0C63  1018               	bcf	24,0	;volatile
  2075                           
  2076                           ;main.c: 58: RCSTAbits.SPEN = 1;
  2077  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  2078  0C65  1303               	bcf	3,6	;RP1=0, select bank0
  2079  0C66  1798               	bsf	24,7	;volatile
  2080                           
  2081                           ;main.c: 59: RCSTAbits.RX9 = 0;
  2082  0C67  1318               	bcf	24,6	;volatile
  2083                           
  2084                           ;main.c: 60: RCSTAbits.SREN = 0;
  2085  0C68  1298               	bcf	24,5	;volatile
  2086                           
  2087                           ;main.c: 61: RCSTAbits.CREN = 1;
  2088  0C69  1618               	bsf	24,4	;volatile
  2089                           
  2090                           ;main.c: 62: RCSTAbits.ADDEN = 0;
  2091  0C6A  1198               	bcf	24,3	;volatile
  2092                           
  2093                           ;main.c: 63: RCSTAbits.FERR = 0;
  2094  0C6B  1118               	bcf	24,2	;volatile
  2095                           
  2096                           ;main.c: 64: RCSTAbits.OERR = 0;
  2097  0C6C  1098               	bcf	24,1	;volatile
  2098                           
  2099                           ;main.c: 65: RCSTAbits.RX9D = 0;
  2100  0C6D  1018               	bcf	24,0	;volatile
  2101                           
  2102                           ;main.c: 68: PIE1bits.RCIE = 1;
  2103  0C6E  1683               	bsf	3,5	;RP0=1, select bank1
  2104  0C6F  1303               	bcf	3,6	;RP1=0, select bank1
  2105  0C70  168C               	bsf	12,5	;volatile
  2106                           
  2107                           ;main.c: 69: PIR1bits.RCIF = 0;
  2108  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  2109  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  2110  0C73  128C               	bcf	12,5	;volatile
  2111  0C74  0008               	return
  2112  0C75                     __end_of_USARTInit:	
  2113                           
  2114                           	psect	text7
  2115  0ECE                     __ptext7:	
  2116 ;; *************** function ___aldiv *****************
  2117 ;; Defined at:
  2118 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\aldiv.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  divisor         4    0[BANK1 ] long 
  2121 ;;  dividend        4    4[BANK1 ] long 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  quotient        4   11[BANK1 ] long 
  2124 ;;  sign            1   10[BANK1 ] unsigned char 
  2125 ;;  counter         1    9[BANK1 ] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  4    0[BANK1 ] long 
  2128 ;; Registers used:
  2129 ;;		wreg, status,2, status,0
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2135 ;;      Params:         0       0       8       0       0
  2136 ;;      Locals:         0       0       6       0       0
  2137 ;;      Temps:          0       0       1       0       0
  2138 ;;      Totals:         0       0      15       0       0
  2139 ;;Total ram usage:       15 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    7
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_USARTInit
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           
  2150                           ;psect for function ___aldiv
  2151  0ECE                     ___aldiv:	
  2152                           
  2153                           ;incstack = 0
  2154 ;; hardware stack exceeded
  2155                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2156  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  2157  0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  2158  0ED0  01AA               	clrf	___aldiv@sign^(0+128)
  2159  0ED1  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  2160  0ED2  2EE0               	goto	l444
  2161  0ED3  09A0               	comf	___aldiv@divisor^(0+128),f
  2162  0ED4  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  2163  0ED5  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  2164  0ED6  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  2165  0ED7  0AA0               	incf	___aldiv@divisor^(0+128),f
  2166  0ED8  1903               	skipnz
  2167  0ED9  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  2168  0EDA  1903               	skipnz
  2169  0EDB  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  2170  0EDC  1903               	skipnz
  2171  0EDD  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  2172  0EDE  01AA               	clrf	___aldiv@sign^(0+128)
  2173  0EDF  0AAA               	incf	___aldiv@sign^(0+128),f
  2174  0EE0                     l444:	
  2175  0EE0  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  2176  0EE1  2EF1               	goto	l2079
  2177  0EE2  09A4               	comf	___aldiv@dividend^(0+128),f
  2178  0EE3  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  2179  0EE4  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  2180  0EE5  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  2181  0EE6  0AA4               	incf	___aldiv@dividend^(0+128),f
  2182  0EE7  1903               	skipnz
  2183  0EE8  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  2184  0EE9  1903               	skipnz
  2185  0EEA  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  2186  0EEB  1903               	skipnz
  2187  0EEC  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  2188  0EED  3001               	movlw	1
  2189  0EEE  00A8               	movwf	??___aldiv^(0+128)
  2190  0EEF  0828               	movf	??___aldiv^(0+128),w
  2191  0EF0  06AA               	xorwf	___aldiv@sign^(0+128),f
  2192  0EF1                     l2079:	
  2193  0EF1  3000               	movlw	0
  2194  0EF2  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  2195  0EF3  3000               	movlw	0
  2196  0EF4  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  2197  0EF5  3000               	movlw	0
  2198  0EF6  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  2199  0EF7  3000               	movlw	0
  2200  0EF8  00AB               	movwf	___aldiv@quotient^(0+128)
  2201  0EF9  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2202  0EFA  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  2203  0EFB  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  2204  0EFC  0420               	iorwf	___aldiv@divisor^(0+128),w
  2205  0EFD  1903               	skipnz
  2206  0EFE  2F46               	goto	l2101
  2207  0EFF  01A9               	clrf	___aldiv@counter^(0+128)
  2208  0F00  0AA9               	incf	___aldiv@counter^(0+128),f
  2209  0F01                     l2087:	
  2210  0F01  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  2211  0F02  2F11               	goto	l2089
  2212  0F03  3001               	movlw	1
  2213  0F04  00A8               	movwf	??___aldiv^(0+128)
  2214  0F05                     u2235:	
  2215  0F05  1003               	clrc
  2216  0F06  0DA0               	rlf	___aldiv@divisor^(0+128),f
  2217  0F07  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  2218  0F08  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  2219  0F09  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  2220  0F0A  0BA8               	decfsz	??___aldiv^(0+128),f
  2221  0F0B  2F05               	goto	u2235
  2222  0F0C  3001               	movlw	1
  2223  0F0D  00A8               	movwf	??___aldiv^(0+128)
  2224  0F0E  0828               	movf	??___aldiv^(0+128),w
  2225  0F0F  07A9               	addwf	___aldiv@counter^(0+128),f
  2226  0F10  2F01               	goto	l2087
  2227  0F11                     l2089:	
  2228  0F11  3001               	movlw	1
  2229  0F12  00A8               	movwf	??___aldiv^(0+128)
  2230  0F13                     u2255:	
  2231  0F13  1003               	clrc
  2232  0F14  0DAB               	rlf	___aldiv@quotient^(0+128),f
  2233  0F15  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  2234  0F16  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  2235  0F17  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  2236  0F18  0BA8               	decfsz	??___aldiv^(0+128),f
  2237  0F19  2F13               	goto	u2255
  2238  0F1A  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2239  0F1B  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  2240  0F1C  1D03               	skipz
  2241  0F1D  2F28               	goto	u2265
  2242  0F1E  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2243  0F1F  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  2244  0F20  1D03               	skipz
  2245  0F21  2F28               	goto	u2265
  2246  0F22  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2247  0F23  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  2248  0F24  1D03               	skipz
  2249  0F25  2F28               	goto	u2265
  2250  0F26  0820               	movf	___aldiv@divisor^(0+128),w
  2251  0F27  0224               	subwf	___aldiv@dividend^(0+128),w
  2252  0F28                     u2265:	
  2253  0F28  1C03               	skipc
  2254  0F29  2F39               	goto	l2097
  2255  0F2A  0820               	movf	___aldiv@divisor^(0+128),w
  2256  0F2B  02A4               	subwf	___aldiv@dividend^(0+128),f
  2257  0F2C  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2258  0F2D  1C03               	skipc
  2259  0F2E  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  2260  0F2F  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  2261  0F30  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2262  0F31  1C03               	skipc
  2263  0F32  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  2264  0F33  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  2265  0F34  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2266  0F35  1C03               	skipc
  2267  0F36  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  2268  0F37  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  2269  0F38  142B               	bsf	___aldiv@quotient^(0+128),0
  2270  0F39                     l2097:	
  2271  0F39  3001               	movlw	1
  2272  0F3A                     u2275:	
  2273  0F3A  1003               	clrc
  2274  0F3B  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  2275  0F3C  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  2276  0F3D  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  2277  0F3E  0CA0               	rrf	___aldiv@divisor^(0+128),f
  2278  0F3F  3EFF               	addlw	-1
  2279  0F40  1D03               	skipz
  2280  0F41  2F3A               	goto	u2275
  2281  0F42  3001               	movlw	1
  2282  0F43  02A9               	subwf	___aldiv@counter^(0+128),f
  2283  0F44  1D03               	btfss	3,2
  2284  0F45  2F11               	goto	l2089
  2285  0F46                     l2101:	
  2286  0F46  082A               	movf	___aldiv@sign^(0+128),w
  2287  0F47  1903               	btfsc	3,2
  2288  0F48  2F54               	goto	l2105
  2289  0F49  09AB               	comf	___aldiv@quotient^(0+128),f
  2290  0F4A  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  2291  0F4B  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  2292  0F4C  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  2293  0F4D  0AAB               	incf	___aldiv@quotient^(0+128),f
  2294  0F4E  1903               	skipnz
  2295  0F4F  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  2296  0F50  1903               	skipnz
  2297  0F51  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  2298  0F52  1903               	skipnz
  2299  0F53  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  2300  0F54                     l2105:	
  2301  0F54  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  2302  0F55  00A3               	movwf	(?___aldiv+3)^(0+128)
  2303  0F56  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  2304  0F57  00A2               	movwf	(?___aldiv+2)^(0+128)
  2305  0F58  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  2306  0F59  00A1               	movwf	(?___aldiv+1)^(0+128)
  2307  0F5A  082B               	movf	___aldiv@quotient^(0+128),w
  2308  0F5B  00A0               	movwf	?___aldiv^(0+128)
  2309  0F5C  0008               	return
  2310  0F5D                     __end_of___aldiv:	
  2311                           
  2312                           	psect	text8
  2313  09DA                     __ptext8:	
  2314 ;; *************** function _LCDClear *****************
  2315 ;; Defined at:
  2316 ;;		line 179 in file "lcd_4bit.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;		None
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;		None
  2321 ;; Return value:  Size  Location     Type
  2322 ;;		None               void
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0, pclath, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2330 ;;      Params:         0       0       0       0       0
  2331 ;;      Locals:         0       0       0       0       0
  2332 ;;      Temps:          0       0       2       0       0
  2333 ;;      Totals:         0       0       2       0       0
  2334 ;;Total ram usage:        2 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    9
  2337 ;; This function calls:
  2338 ;;		_lcd_envia_byte
  2339 ;; This function is called by:
  2340 ;;		_inicialize
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           
  2345                           ;psect for function _LCDClear
  2346  09DA                     _LCDClear:	
  2347                           
  2348                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2349                           
  2350                           ;incstack = 0
  2351 ;; hardware stack exceeded
  2352                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2353  09DA  1683               	bsf	3,5	;RP0=1, select bank1
  2354  09DB  1303               	bcf	3,6	;RP1=0, select bank1
  2355  09DC  01A2               	clrf	lcd_envia_byte@n^(0+128)
  2356  09DD  0AA2               	incf	lcd_envia_byte@n^(0+128),f
  2357  09DE  3000               	movlw	0
  2358  09DF  120A  158A  20F2  120A  158A  	fcall	_lcd_envia_byte
  2359                           
  2360                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2361  09E4  3041               	movlw	65
  2362  09E5  1683               	bsf	3,5	;RP0=1, select bank1
  2363  09E6  1303               	bcf	3,6	;RP1=0, select bank1
  2364  09E7  00A6               	movwf	(??_LCDClear^(0+128)+1)
  2365  09E8  30EE               	movlw	238
  2366  09E9  00A5               	movwf	??_LCDClear^(0+128)
  2367  09EA                     u3987:	
  2368  09EA  0BA5               	decfsz	??_LCDClear^(0+128),f
  2369  09EB  29EA               	goto	u3987
  2370  09EC  0BA6               	decfsz	(??_LCDClear^(0+128)+1),f
  2371  09ED  29EA               	goto	u3987
  2372  09EE  0000               	nop
  2373                           
  2374                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2375  09EF  300C               	movlw	12
  2376  09F0  1683               	bsf	3,5	;RP0=1, select bank1
  2377  09F1  1303               	bcf	3,6	;RP1=0, select bank1
  2378  09F2  00A5               	movwf	??_LCDClear^(0+128)
  2379  09F3  0825               	movf	??_LCDClear^(0+128),w
  2380  09F4  00A2               	movwf	lcd_envia_byte@n^(0+128)
  2381  09F5  3000               	movlw	0
  2382  09F6  120A  158A  20F2  120A  158A  	fcall	_lcd_envia_byte
  2383                           
  2384                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2385  09FB  30F9               	movlw	249
  2386  09FC  1683               	bsf	3,5	;RP0=1, select bank1
  2387  09FD  1303               	bcf	3,6	;RP1=0, select bank1
  2388  09FE  00A5               	movwf	??_LCDClear^(0+128)
  2389  09FF                     u3997:	
  2390  09FF  0000               	nop
  2391  0A00  0BA5               	decfsz	??_LCDClear^(0+128),f
  2392  0A01  29FF               	goto	u3997
  2393  0A02  2A03               	nop2	;nop
  2394  0A03  0000               	nop
  2395                           
  2396                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2397  0A04  3006               	movlw	6
  2398  0A05  1683               	bsf	3,5	;RP0=1, select bank1
  2399  0A06  1303               	bcf	3,6	;RP1=0, select bank1
  2400  0A07  00A5               	movwf	??_LCDClear^(0+128)
  2401  0A08  0825               	movf	??_LCDClear^(0+128),w
  2402  0A09  00A2               	movwf	lcd_envia_byte@n^(0+128)
  2403  0A0A  3000               	movlw	0
  2404  0A0B  120A  158A  20F2  120A  158A  	fcall	_lcd_envia_byte
  2405                           
  2406                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2407  0A10  30F9               	movlw	249
  2408  0A11  1683               	bsf	3,5	;RP0=1, select bank1
  2409  0A12  1303               	bcf	3,6	;RP1=0, select bank1
  2410  0A13  00A5               	movwf	??_LCDClear^(0+128)
  2411  0A14                     u4007:	
  2412  0A14  0000               	nop
  2413  0A15  0BA5               	decfsz	??_LCDClear^(0+128),f
  2414  0A16  2A14               	goto	u4007
  2415  0A17  2A18               	nop2	;nop
  2416  0A18  0000               	nop
  2417  0A19  0008               	return
  2418  0A1A                     __end_of_LCDClear:	
  2419                           
  2420                           	psect	text9
  2421  08F2                     __ptext9:	
  2422 ;; *************** function _lcd_envia_byte *****************
  2423 ;; Defined at:
  2424 ;;		line 53 in file "lcd_4bit.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  address         1    wreg     unsigned char 
  2427 ;;  n               1    2[BANK1 ] unsigned char 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  address         1    4[BANK1 ] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;		None               void
  2432 ;; Registers used:
  2433 ;;		wreg, status,2, status,0, pclath, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2439 ;;      Params:         0       0       1       0       0
  2440 ;;      Locals:         0       0       1       0       0
  2441 ;;      Temps:          0       0       1       0       0
  2442 ;;      Totals:         0       0       3       0       0
  2443 ;;Total ram usage:        3 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:    8
  2446 ;; This function calls:
  2447 ;;		_lcd_envia_nibble
  2448 ;; This function is called by:
  2449 ;;		_init_lcd_4bit
  2450 ;;		_lcd_gotoxy
  2451 ;;		_lcd_putc
  2452 ;;		_LCDClear
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           
  2457                           ;psect for function _lcd_envia_byte
  2458  08F2                     _lcd_envia_byte:	
  2459                           
  2460                           ;incstack = 0
  2461 ;; hardware stack exceeded
  2462                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2463                           ;lcd_envia_byte@address stored from wreg
  2464  08F2  1683               	bsf	3,5	;RP0=1, select bank1
  2465  08F3  1303               	bcf	3,6	;RP1=0, select bank1
  2466  08F4  00A4               	movwf	lcd_envia_byte@address^(0+128)
  2467                           
  2468                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2469  08F5  1283               	bcf	3,5	;RP0=0, select bank0
  2470  08F6  1303               	bcf	3,6	;RP1=0, select bank0
  2471  08F7  1286               	bcf	6,5	;volatile
  2472                           
  2473                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2474  08F8  3063               	movlw	99
  2475  08F9  1683               	bsf	3,5	;RP0=1, select bank1
  2476  08FA  1303               	bcf	3,6	;RP1=0, select bank1
  2477  08FB  00A3               	movwf	??_lcd_envia_byte^(0+128)
  2478  08FC                     u4017:	
  2479  08FC  0BA3               	decfsz	??_lcd_envia_byte^(0+128),f
  2480  08FD  28FC               	goto	u4017
  2481  08FE  28FF               	nop2	;nop
  2482                           
  2483                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2484  08FF  1683               	bsf	3,5	;RP0=1, select bank1
  2485  0900  1303               	bcf	3,6	;RP1=0, select bank1
  2486  0901  0824               	movf	lcd_envia_byte@address^(0+128),w
  2487  0902  1903               	btfsc	3,2
  2488  0903  2908               	goto	l203
  2489  0904  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0905  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0906  1686               	bsf	6,5	;volatile
  2492  0907  290B               	goto	l204
  2493  0908                     l203:	
  2494                           
  2495                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2496  0908  1283               	bcf	3,5	;RP0=0, select bank0
  2497  0909  1303               	bcf	3,6	;RP1=0, select bank0
  2498  090A  1286               	bcf	6,5	;volatile
  2499  090B                     l204:	
  2500                           
  2501                           ;lcd_4bit.c: 61: _delay(1);
  2502  090B  0000               	nop
  2503                           
  2504                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2505  090C  1283               	bcf	3,5	;RP0=0, select bank0
  2506  090D  1303               	bcf	3,6	;RP1=0, select bank0
  2507  090E  1206               	bcf	6,4	;volatile
  2508                           
  2509                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2510  090F  1683               	bsf	3,5	;RP0=1, select bank1
  2511  0910  1303               	bcf	3,6	;RP1=0, select bank1
  2512  0911  0822               	movf	lcd_envia_byte@n^(0+128),w
  2513  0912  00A3               	movwf	??_lcd_envia_byte^(0+128)
  2514  0913  3004               	movlw	4
  2515  0914                     u1975:	
  2516  0914  1003               	clrc
  2517  0915  0CA3               	rrf	??_lcd_envia_byte^(0+128),f
  2518  0916  3EFF               	addlw	-1
  2519  0917  1D03               	skipz
  2520  0918  2914               	goto	u1975
  2521  0919  0823               	movf	??_lcd_envia_byte^(0+128),w
  2522  091A  120A  158A  22FB  120A  158A  	fcall	_lcd_envia_nibble
  2523                           
  2524                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2525  091F  1683               	bsf	3,5	;RP0=1, select bank1
  2526  0920  1303               	bcf	3,6	;RP1=0, select bank1
  2527  0921  0822               	movf	lcd_envia_byte@n^(0+128),w
  2528  0922  390F               	andlw	15
  2529  0923  120A  158A  22FB   	fcall	_lcd_envia_nibble
  2530  0926  0008               	return
  2531  0927                     __end_of_lcd_envia_byte:	
  2532                           
  2533                           	psect	text10
  2534  0AFB                     __ptext10:	
  2535 ;; *************** function _lcd_envia_nibble *****************
  2536 ;; Defined at:
  2537 ;;		line 39 in file "lcd_4bit.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  n               1    wreg     unsigned char 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  n               1    1[BANK1 ] unsigned char 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;		None               void
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2551 ;;      Params:         0       0       0       0       0
  2552 ;;      Locals:         0       0       1       0       0
  2553 ;;      Temps:          0       0       1       0       0
  2554 ;;      Totals:         0       0       2       0       0
  2555 ;;Total ram usage:        2 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    7
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_init_lcd_4bit
  2562 ;;		_lcd_envia_byte
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           
  2567                           ;psect for function _lcd_envia_nibble
  2568  0AFB                     _lcd_envia_nibble:	
  2569                           
  2570                           ;incstack = 0
  2571 ;; hardware stack exceeded
  2572                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2573                           ;lcd_envia_nibble@n stored from wreg
  2574  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
  2575  0AFC  1303               	bcf	3,6	;RP1=0, select bank1
  2576  0AFD  00A1               	movwf	lcd_envia_nibble@n^(0+128)
  2577                           
  2578                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2579  0AFE  3000               	movlw	0
  2580  0AFF  1821               	btfsc	lcd_envia_nibble@n^(0+128),0
  2581  0B00  3001               	movlw	1
  2582  0B01  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2583  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  2585  0B04  0806               	movf	6,w	;volatile
  2586  0B05  1683               	bsf	3,5	;RP0=1, select bank1
  2587  0B06  1303               	bcf	3,6	;RP1=0, select bank1
  2588  0B07  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2589  0B08  39FE               	andlw	-2
  2590  0B09  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2591  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0B0C  0086               	movwf	6	;volatile
  2594                           
  2595                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2596  0B0D  3000               	movlw	0
  2597  0B0E  1683               	bsf	3,5	;RP0=1, select bank1
  2598  0B0F  1303               	bcf	3,6	;RP1=0, select bank1
  2599  0B10  18A1               	btfsc	lcd_envia_nibble@n^(0+128),1
  2600  0B11  3001               	movlw	1
  2601  0B12  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2602  0B13  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2603  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  2604  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  2605  0B16  0806               	movf	6,w	;volatile
  2606  0B17  1683               	bsf	3,5	;RP0=1, select bank1
  2607  0B18  1303               	bcf	3,6	;RP1=0, select bank1
  2608  0B19  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2609  0B1A  39FD               	andlw	-3
  2610  0B1B  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2611  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  2612  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  2613  0B1E  0086               	movwf	6	;volatile
  2614                           
  2615                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2616  0B1F  3000               	movlw	0
  2617  0B20  1683               	bsf	3,5	;RP0=1, select bank1
  2618  0B21  1303               	bcf	3,6	;RP1=0, select bank1
  2619  0B22  1921               	btfsc	lcd_envia_nibble@n^(0+128),2
  2620  0B23  3001               	movlw	1
  2621  0B24  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2622  0B25  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2623  0B26  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2624  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  2625  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  2626  0B29  0806               	movf	6,w	;volatile
  2627  0B2A  1683               	bsf	3,5	;RP0=1, select bank1
  2628  0B2B  1303               	bcf	3,6	;RP1=0, select bank1
  2629  0B2C  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2630  0B2D  39FB               	andlw	-5
  2631  0B2E  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2632  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0B31  0086               	movwf	6	;volatile
  2635                           
  2636                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2637  0B32  3000               	movlw	0
  2638  0B33  1683               	bsf	3,5	;RP0=1, select bank1
  2639  0B34  1303               	bcf	3,6	;RP1=0, select bank1
  2640  0B35  19A1               	btfsc	lcd_envia_nibble@n^(0+128),3
  2641  0B36  3001               	movlw	1
  2642  0B37  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2643  0B38  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2644  0B39  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2645  0B3A  0DA0               	rlf	??_lcd_envia_nibble^(0+128),f
  2646  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0B3D  0806               	movf	6,w	;volatile
  2649  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  2650  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  2651  0B40  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2652  0B41  39F7               	andlw	-9
  2653  0B42  0620               	xorwf	??_lcd_envia_nibble^(0+128),w
  2654  0B43  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0B44  1303               	bcf	3,6	;RP1=0, select bank0
  2656  0B45  0086               	movwf	6	;volatile
  2657                           
  2658                           ;lcd_4bit.c: 46: _delay(1);
  2659  0B46  0000               	nop
  2660                           
  2661                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2662  0B47  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0B48  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0B49  1606               	bsf	6,4	;volatile
  2665                           
  2666                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2667  0B4A  3003               	movlw	3
  2668  0B4B  1683               	bsf	3,5	;RP0=1, select bank1
  2669  0B4C  1303               	bcf	3,6	;RP1=0, select bank1
  2670  0B4D  00A0               	movwf	??_lcd_envia_nibble^(0+128)
  2671  0B4E                     u4027:	
  2672  0B4E  0BA0               	decfsz	??_lcd_envia_nibble^(0+128),f
  2673  0B4F  2B4E               	goto	u4027
  2674                           
  2675                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2676  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  2677  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  2678  0B52  1206               	bcf	6,4	;volatile
  2679  0B53  0008               	return
  2680  0B54                     __end_of_lcd_envia_nibble:	
  2681                           
  2682                           	psect	text11
  2683  16A0                     __ptext11:	
  2684 ;; *************** function _ADCInit *****************
  2685 ;; Defined at:
  2686 ;;		line 229 in file "main.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;		None               void
  2693 ;; Registers used:
  2694 ;;		None
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2700 ;;      Params:         0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    7
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_inicialize
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           
  2715                           ;psect for function _ADCInit
  2716  16A0                     _ADCInit:	
  2717                           
  2718                           ;main.c: 231: ADCON1bits.ADFM = 1;
  2719                           
  2720                           ;incstack = 0
  2721 ;; hardware stack exceeded
  2722                           ; Regs used in _ADCInit: []
  2723  16A0  1683               	bsf	3,5	;RP0=1, select bank1
  2724  16A1  1303               	bcf	3,6	;RP1=0, select bank1
  2725  16A2  179F               	bsf	31,7	;volatile
  2726                           
  2727                           ;main.c: 232: ADCON1bits.PCFG3 = 0;
  2728  16A3  119F               	bcf	31,3	;volatile
  2729                           
  2730                           ;main.c: 233: ADCON1bits.PCFG2 = 0;
  2731  16A4  111F               	bcf	31,2	;volatile
  2732                           
  2733                           ;main.c: 234: ADCON1bits.PCFG1 = 0;
  2734  16A5  109F               	bcf	31,1	;volatile
  2735                           
  2736                           ;main.c: 235: ADCON1bits.PCFG0 = 0;
  2737  16A6  101F               	bcf	31,0	;volatile
  2738                           
  2739                           ;main.c: 237: ADCON0bits.ADCS1 = 1;
  2740  16A7  1283               	bcf	3,5	;RP0=0, select bank0
  2741  16A8  1303               	bcf	3,6	;RP1=0, select bank0
  2742  16A9  179F               	bsf	31,7	;volatile
  2743                           
  2744                           ;main.c: 238: ADCON0bits.ADCS0 = 0;
  2745  16AA  131F               	bcf	31,6	;volatile
  2746                           
  2747                           ;main.c: 239: ADCON0bits.ADON = 1;
  2748  16AB  141F               	bsf	31,0	;volatile
  2749                           
  2750                           ;main.c: 241: PIE1bits.ADIE = 1;
  2751  16AC  1683               	bsf	3,5	;RP0=1, select bank1
  2752  16AD  1303               	bcf	3,6	;RP1=0, select bank1
  2753  16AE  170C               	bsf	12,6	;volatile
  2754                           
  2755                           ;main.c: 242: PIR1bits.ADIF = 0;
  2756  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  2757  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  2758  16B1  130C               	bcf	12,6	;volatile
  2759  16B2  0008               	return
  2760  16B3                     __end_of_ADCInit:	
  2761                           
  2762                           	psect	text12
  2763  0CDB                     __ptext12:	
  2764 ;; *************** function _ativar *****************
  2765 ;; Defined at:
  2766 ;;		line 307 in file "main.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;		None               void
  2773 ;; Registers used:
  2774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2780 ;;      Params:         0       0       0       0       0
  2781 ;;      Locals:         0       0       0       0       0
  2782 ;;      Temps:          0       0       3       0       0
  2783 ;;      Totals:         0       0       3       0       0
  2784 ;;Total ram usage:        3 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    9
  2787 ;; This function calls:
  2788 ;;		_ADCRead
  2789 ;;		_Ativar
  2790 ;; This function is called by:
  2791 ;;		_main
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function _ativar
  2797  0CDB                     _ativar:	
  2798                           
  2799                           ;main.c: 308: if (PORTCbits.RC3 == 1) {
  2800                           
  2801                           ;incstack = 0
  2802 ;; hardware stack exceeded
  2803                           ; Regs used in _ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2804  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  2806  0CDD  1D87               	btfss	7,3	;volatile
  2807  0CDE  2D15               	goto	l2805
  2808                           
  2809                           ;main.c: 309: _delay((unsigned long)((300)*(20000000/4000.0)));
  2810  0CDF  3008               	movlw	8
  2811  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  2812  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  2813  0CE2  00A5               	movwf	(??_ativar^(0+128)+2)
  2814  0CE3  309D               	movlw	157
  2815  0CE4  00A4               	movwf	(??_ativar^(0+128)+1)
  2816  0CE5  300B               	movlw	11
  2817  0CE6  00A3               	movwf	??_ativar^(0+128)
  2818  0CE7                     u4037:	
  2819  0CE7  0BA3               	decfsz	??_ativar^(0+128),f
  2820  0CE8  2CE7               	goto	u4037
  2821  0CE9  0BA4               	decfsz	(??_ativar^(0+128)+1),f
  2822  0CEA  2CE7               	goto	u4037
  2823  0CEB  0BA5               	decfsz	(??_ativar^(0+128)+2),f
  2824  0CEC  2CE7               	goto	u4037
  2825  0CED  2CEE               	nop2
  2826                           
  2827                           ;main.c: 310: if (flag_Start == 0) {
  2828  0CEE  1683               	bsf	3,5	;RP0=1, select bank1
  2829  0CEF  1303               	bcf	3,6	;RP1=0, select bank1
  2830  0CF0  083F               	movf	(_flag_Start+1)^(0+128),w
  2831  0CF1  043E               	iorwf	_flag_Start^(0+128),w
  2832  0CF2  1D03               	skipz
  2833  0CF3  2D07               	goto	l2801
  2834                           
  2835                           ;main.c: 311: Ativar(LIGAR);
  2836  0CF4  3030               	movlw	_LIGAR-__stringbase
  2837  0CF5  0084               	movwf	4
  2838  0CF6  120A  158A  200A  120A  158A  	fcall	stringdir
  2839  0CFB  120A  118A  26EB  120A  158A  	fcall	_Ativar
  2840                           
  2841                           ;main.c: 312: flag_Start = 1;
  2842  0D00  3001               	movlw	1
  2843  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0D02  1303               	bcf	3,6	;RP1=0, select bank1
  2845  0D03  00BE               	movwf	_flag_Start^(0+128)
  2846  0D04  3000               	movlw	0
  2847  0D05  00BF               	movwf	(_flag_Start^(0+128)+1)
  2848                           
  2849                           ;main.c: 313: } else {
  2850  0D06  2D15               	goto	l2805
  2851  0D07                     l2801:	
  2852                           
  2853                           ;main.c: 314: flag_Start = 0;
  2854  0D07  01BE               	clrf	_flag_Start^(0+128)
  2855  0D08  01BF               	clrf	(_flag_Start+1)^(0+128)
  2856                           
  2857                           ;main.c: 315: Ativar(DESLIGAR);
  2858  0D09  302D               	movlw	_DESLIGAR-__stringbase
  2859  0D0A  0084               	movwf	4
  2860  0D0B  120A  158A  200A  120A  158A  	fcall	stringdir
  2861  0D10  120A  118A  26EB  120A  158A  	fcall	_Ativar
  2862  0D15                     l2805:	
  2863                           
  2864                           ;main.c: 316: }
  2865                           ;main.c: 317: }
  2866                           ;main.c: 319: if (flag_Start == 1) {
  2867  0D15  3001               	movlw	1
  2868  0D16  1683               	bsf	3,5	;RP0=1, select bank1
  2869  0D17  1303               	bcf	3,6	;RP1=0, select bank1
  2870  0D18  063E               	xorwf	_flag_Start^(0+128),w
  2871  0D19  043F               	iorwf	(_flag_Start+1)^(0+128),w
  2872  0D1A  1D03               	skipz
  2873  0D1B  0008               	return
  2874                           
  2875                           ;main.c: 320: ADCRead(0);
  2876  0D1C  3000               	movlw	0
  2877  0D1D  00A0               	movwf	ADCRead@ch^(0+128)
  2878  0D1E  3000               	movlw	0
  2879  0D1F  00A1               	movwf	(ADCRead@ch^(0+128)+1)
  2880  0D20  120A  158A  2094  120A  158A  	fcall	_ADCRead
  2881                           
  2882                           ;main.c: 321: _delay((unsigned long)((300)*(20000000/4000.0)));
  2883  0D25  3008               	movlw	8
  2884  0D26  1683               	bsf	3,5	;RP0=1, select bank1
  2885  0D27  1303               	bcf	3,6	;RP1=0, select bank1
  2886  0D28  00A5               	movwf	(??_ativar^(0+128)+2)
  2887  0D29  309D               	movlw	157
  2888  0D2A  00A4               	movwf	(??_ativar^(0+128)+1)
  2889  0D2B  300B               	movlw	11
  2890  0D2C  00A3               	movwf	??_ativar^(0+128)
  2891  0D2D                     u4047:	
  2892  0D2D  0BA3               	decfsz	??_ativar^(0+128),f
  2893  0D2E  2D2D               	goto	u4047
  2894  0D2F  0BA4               	decfsz	(??_ativar^(0+128)+1),f
  2895  0D30  2D2D               	goto	u4047
  2896  0D31  0BA5               	decfsz	(??_ativar^(0+128)+2),f
  2897  0D32  2D2D               	goto	u4047
  2898  0D33  2D34               	nop2
  2899                           
  2900                           ;main.c: 322: ADCRead(1);
  2901  0D34  3001               	movlw	1
  2902  0D35  1683               	bsf	3,5	;RP0=1, select bank1
  2903  0D36  1303               	bcf	3,6	;RP1=0, select bank1
  2904  0D37  00A0               	movwf	ADCRead@ch^(0+128)
  2905  0D38  3000               	movlw	0
  2906  0D39  00A1               	movwf	(ADCRead@ch^(0+128)+1)
  2907  0D3A  120A  158A  2094  120A  158A  	fcall	_ADCRead
  2908                           
  2909                           ;main.c: 323: _delay((unsigned long)((300)*(20000000/4000.0)));
  2910  0D3F  3008               	movlw	8
  2911  0D40  1683               	bsf	3,5	;RP0=1, select bank1
  2912  0D41  1303               	bcf	3,6	;RP1=0, select bank1
  2913  0D42  00A5               	movwf	(??_ativar^(0+128)+2)
  2914  0D43  309D               	movlw	157
  2915  0D44  00A4               	movwf	(??_ativar^(0+128)+1)
  2916  0D45  300B               	movlw	11
  2917  0D46  00A3               	movwf	??_ativar^(0+128)
  2918  0D47                     u4057:	
  2919  0D47  0BA3               	decfsz	??_ativar^(0+128),f
  2920  0D48  2D47               	goto	u4057
  2921  0D49  0BA4               	decfsz	(??_ativar^(0+128)+1),f
  2922  0D4A  2D47               	goto	u4057
  2923  0D4B  0BA5               	decfsz	(??_ativar^(0+128)+2),f
  2924  0D4C  2D47               	goto	u4057
  2925  0D4D  2D4E               	nop2
  2926  0D4E  0008               	return
  2927  0D4F                     __end_of_ativar:	
  2928                           
  2929                           	psect	text13
  2930  06EB                     __ptext13:	
  2931 ;; *************** function _Ativar *****************
  2932 ;; Defined at:
  2933 ;;		line 123 in file "main.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  comando         1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  comando         1    2[BANK1 ] unsigned char 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;		None               void
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2947 ;;      Params:         0       0       0       0       0
  2948 ;;      Locals:         0       0       1       0       0
  2949 ;;      Temps:          0       0       1       0       0
  2950 ;;      Totals:         0       0       2       0       0
  2951 ;;Total ram usage:        2 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    8
  2954 ;; This function calls:
  2955 ;;		_USARTWriteChar
  2956 ;; This function is called by:
  2957 ;;		_ativar
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function _Ativar
  2963  06EB                     _Ativar:	
  2964                           
  2965                           ;incstack = 0
  2966 ;; hardware stack exceeded
  2967                           ; Regs used in _Ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2968                           ;Ativar@comando stored from wreg
  2969  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  2970  06EC  1303               	bcf	3,6	;RP1=0, select bank1
  2971  06ED  00A2               	movwf	Ativar@comando^(0+128)
  2972                           
  2973                           ;main.c: 124: if (comando == LIGAR_BOMBA) {
  2974  06EE  3031               	movlw	_LIGAR_BOMBA-__stringbase
  2975  06EF  0084               	movwf	4
  2976  06F0  120A  158A  200A  120A  118A  	fcall	stringdir
  2977  06F5  00A1               	movwf	??_Ativar^(0+128)
  2978  06F6  0822               	movf	Ativar@comando^(0+128),w
  2979  06F7  0621               	xorwf	??_Ativar^(0+128),w
  2980  06F8  1D03               	skipz
  2981  06F9  2F09               	goto	l2305
  2982                           
  2983                           ;main.c: 125: PORTDbits.RD2 = 0;
  2984  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2985  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2986  06FC  1108               	bcf	8,2	;volatile
  2987                           
  2988                           ;main.c: 126: PORTDbits.RD3 = 1;
  2989  06FD  1588               	bsf	8,3	;volatile
  2990                           
  2991                           ;main.c: 127: USARTWriteChar(LIGAR_BOMBA);
  2992  06FE  3031               	movlw	_LIGAR_BOMBA-__stringbase
  2993  06FF  0084               	movwf	4
  2994  0700  120A  158A  200A  120A  118A  	fcall	stringdir
  2995  0705  160A  118A  2664   	fcall	_USARTWriteChar
  2996                           
  2997                           ;main.c: 128: } else if (comando == DESLIGAR_BOMBA) {
  2998  0708  0008               	return
  2999  0709                     l2305:	
  3000  0709  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  3001  070A  0084               	movwf	4
  3002  070B  120A  158A  200A  120A  118A  	fcall	stringdir
  3003  0710  1683               	bsf	3,5	;RP0=1, select bank1
  3004  0711  1303               	bcf	3,6	;RP1=0, select bank1
  3005  0712  00A1               	movwf	??_Ativar^(0+128)
  3006  0713  0822               	movf	Ativar@comando^(0+128),w
  3007  0714  0621               	xorwf	??_Ativar^(0+128),w
  3008  0715  1D03               	skipz
  3009  0716  2F26               	goto	l2311
  3010                           
  3011                           ;main.c: 129: PORTDbits.RD2 = 1;
  3012  0717  1283               	bcf	3,5	;RP0=0, select bank0
  3013  0718  1303               	bcf	3,6	;RP1=0, select bank0
  3014  0719  1508               	bsf	8,2	;volatile
  3015                           
  3016                           ;main.c: 130: PORTDbits.RD3 = 0;
  3017  071A  1188               	bcf	8,3	;volatile
  3018                           
  3019                           ;main.c: 131: USARTWriteChar(DESLIGAR_BOMBA);
  3020  071B  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  3021  071C  0084               	movwf	4
  3022  071D  120A  158A  200A  120A  118A  	fcall	stringdir
  3023  0722  160A  118A  2664   	fcall	_USARTWriteChar
  3024                           
  3025                           ;main.c: 132: } else if (comando == LIGAR_MOTOR) {
  3026  0725  0008               	return
  3027  0726                     l2311:	
  3028  0726  3032               	movlw	_LIGAR_MOTOR-__stringbase
  3029  0727  0084               	movwf	4
  3030  0728  120A  158A  200A  120A  118A  	fcall	stringdir
  3031  072D  1683               	bsf	3,5	;RP0=1, select bank1
  3032  072E  1303               	bcf	3,6	;RP1=0, select bank1
  3033  072F  00A1               	movwf	??_Ativar^(0+128)
  3034  0730  0822               	movf	Ativar@comando^(0+128),w
  3035  0731  0621               	xorwf	??_Ativar^(0+128),w
  3036  0732  1D03               	skipz
  3037  0733  2F42               	goto	l2317
  3038                           
  3039                           ;main.c: 133: PORTDbits.RD4 = 1;
  3040  0734  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0735  1303               	bcf	3,6	;RP1=0, select bank0
  3042  0736  1608               	bsf	8,4	;volatile
  3043                           
  3044                           ;main.c: 134: USARTWriteChar(LIGAR_MOTOR);
  3045  0737  3032               	movlw	_LIGAR_MOTOR-__stringbase
  3046  0738  0084               	movwf	4
  3047  0739  120A  158A  200A  120A  118A  	fcall	stringdir
  3048  073E  160A  118A  2664   	fcall	_USARTWriteChar
  3049                           
  3050                           ;main.c: 135: } else if (comando == DESLIGAR_MOTOR) {
  3051  0741  0008               	return
  3052  0742                     l2317:	
  3053  0742  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  3054  0743  0084               	movwf	4
  3055  0744  120A  158A  200A  120A  118A  	fcall	stringdir
  3056  0749  1683               	bsf	3,5	;RP0=1, select bank1
  3057  074A  1303               	bcf	3,6	;RP1=0, select bank1
  3058  074B  00A1               	movwf	??_Ativar^(0+128)
  3059  074C  0822               	movf	Ativar@comando^(0+128),w
  3060  074D  0621               	xorwf	??_Ativar^(0+128),w
  3061  074E  1D03               	skipz
  3062  074F  2F5E               	goto	l2323
  3063                           
  3064                           ;main.c: 136: PORTDbits.RD4 = 0;
  3065  0750  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0751  1303               	bcf	3,6	;RP1=0, select bank0
  3067  0752  1208               	bcf	8,4	;volatile
  3068                           
  3069                           ;main.c: 137: USARTWriteChar(DESLIGAR_MOTOR);
  3070  0753  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  3071  0754  0084               	movwf	4
  3072  0755  120A  158A  200A  120A  118A  	fcall	stringdir
  3073  075A  160A  118A  2664   	fcall	_USARTWriteChar
  3074                           
  3075                           ;main.c: 138: } else if (comando == LIGAR) {
  3076  075D  0008               	return
  3077  075E                     l2323:	
  3078  075E  3030               	movlw	_LIGAR-__stringbase
  3079  075F  0084               	movwf	4
  3080  0760  120A  158A  200A  120A  118A  	fcall	stringdir
  3081  0765  1683               	bsf	3,5	;RP0=1, select bank1
  3082  0766  1303               	bcf	3,6	;RP1=0, select bank1
  3083  0767  00A1               	movwf	??_Ativar^(0+128)
  3084  0768  0822               	movf	Ativar@comando^(0+128),w
  3085  0769  0621               	xorwf	??_Ativar^(0+128),w
  3086  076A  1D03               	skipz
  3087  076B  2F7B               	goto	l2329
  3088                           
  3089                           ;main.c: 139: flag_Start = 1;
  3090  076C  3001               	movlw	1
  3091  076D  00BE               	movwf	_flag_Start^(0+128)
  3092  076E  3000               	movlw	0
  3093  076F  00BF               	movwf	(_flag_Start^(0+128)+1)
  3094                           
  3095                           ;main.c: 140: USARTWriteChar(LIGAR);
  3096  0770  3030               	movlw	_LIGAR-__stringbase
  3097  0771  0084               	movwf	4
  3098  0772  120A  158A  200A  120A  118A  	fcall	stringdir
  3099  0777  160A  118A  2664   	fcall	_USARTWriteChar
  3100                           
  3101                           ;main.c: 141: } else if (comando == DESLIGAR) {
  3102  077A  0008               	return
  3103  077B                     l2329:	
  3104  077B  302D               	movlw	_DESLIGAR-__stringbase
  3105  077C  0084               	movwf	4
  3106  077D  120A  158A  200A  120A  118A  	fcall	stringdir
  3107  0782  1683               	bsf	3,5	;RP0=1, select bank1
  3108  0783  1303               	bcf	3,6	;RP1=0, select bank1
  3109  0784  00A1               	movwf	??_Ativar^(0+128)
  3110  0785  0822               	movf	Ativar@comando^(0+128),w
  3111  0786  0621               	xorwf	??_Ativar^(0+128),w
  3112  0787  1D03               	skipz
  3113  0788  0008               	return
  3114                           
  3115                           ;main.c: 142: flag_Start = 0;
  3116  0789  01BE               	clrf	_flag_Start^(0+128)
  3117  078A  01BF               	clrf	(_flag_Start+1)^(0+128)
  3118                           
  3119                           ;main.c: 143: USARTWriteChar(DESLIGAR);
  3120  078B  302D               	movlw	_DESLIGAR-__stringbase
  3121  078C  0084               	movwf	4
  3122  078D  120A  158A  200A  120A  118A  	fcall	stringdir
  3123  0792  160A  118A  2664   	fcall	_USARTWriteChar
  3124  0795  0008               	return
  3125  0796                     __end_of_Ativar:	
  3126                           
  3127                           	psect	text14
  3128  1664                     __ptext14:	
  3129 ;; *************** function _USARTWriteChar *****************
  3130 ;; Defined at:
  3131 ;;		line 76 in file "main.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  USARTData       1    wreg     unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  USARTData       1    0[BANK1 ] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;		None               void
  3138 ;; Registers used:
  3139 ;;		wreg
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3145 ;;      Params:         0       0       0       0       0
  3146 ;;      Locals:         0       0       1       0       0
  3147 ;;      Temps:          0       0       0       0       0
  3148 ;;      Totals:         0       0       1       0       0
  3149 ;;Total ram usage:        1 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    7
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_Ativar
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _USARTWriteChar
  3161  1664                     _USARTWriteChar:	
  3162                           
  3163                           ;incstack = 0
  3164 ;; hardware stack exceeded
  3165                           ; Regs used in _USARTWriteChar: [wreg]
  3166                           ;USARTWriteChar@USARTData stored from wreg
  3167  1664  1683               	bsf	3,5	;RP0=1, select bank1
  3168  1665  1303               	bcf	3,6	;RP1=0, select bank1
  3169  1666  00A0               	movwf	USARTWriteChar@USARTData^(0+128)
  3170  1667                     l86:	
  3171                           ;main.c: 77: while (!PIR1bits.TXIF);
  3172                           
  3173  1667  1283               	bcf	3,5	;RP0=0, select bank0
  3174  1668  1E0C               	btfss	12,4	;volatile
  3175  1669  2E67               	goto	l86
  3176                           
  3177                           ;main.c: 78: TXREG = USARTData;
  3178  166A  1683               	bsf	3,5	;RP0=1, select bank1
  3179  166B  1303               	bcf	3,6	;RP1=0, select bank1
  3180  166C  0820               	movf	USARTWriteChar@USARTData^(0+128),w
  3181  166D  1283               	bcf	3,5	;RP0=0, select bank0
  3182  166E  1303               	bcf	3,6	;RP1=0, select bank0
  3183  166F  0099               	movwf	25	;volatile
  3184  1670  0008               	return
  3185  1671                     __end_of_USARTWriteChar:	
  3186                           
  3187                           	psect	text15
  3188  0894                     __ptext15:	
  3189 ;; *************** function _ADCRead *****************
  3190 ;; Defined at:
  3191 ;;		line 249 in file "main.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  ch              2    0[BANK1 ] int 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;		None               void
  3198 ;; Registers used:
  3199 ;;		wreg, status,2, status,0
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3205 ;;      Params:         0       0       2       0       0
  3206 ;;      Locals:         0       0       0       0       0
  3207 ;;      Temps:          0       0       1       0       0
  3208 ;;      Totals:         0       0       3       0       0
  3209 ;;Total ram usage:        3 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    7
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_ativar
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _ADCRead
  3221  0894                     _ADCRead:	
  3222                           
  3223                           ;main.c: 251: ADCON0bits.CHS = ch;
  3224                           
  3225                           ;incstack = 0
  3226 ;; hardware stack exceeded
  3227                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  3228  0894  1683               	bsf	3,5	;RP0=1, select bank1
  3229  0895  1303               	bcf	3,6	;RP1=0, select bank1
  3230  0896  0820               	movf	ADCRead@ch^(0+128),w
  3231  0897  00A2               	movwf	??_ADCRead^(0+128)
  3232  0898  0DA2               	rlf	??_ADCRead^(0+128),f
  3233  0899  0DA2               	rlf	??_ADCRead^(0+128),f
  3234  089A  0DA2               	rlf	??_ADCRead^(0+128),f
  3235  089B  1283               	bcf	3,5	;RP0=0, select bank0
  3236  089C  1303               	bcf	3,6	;RP1=0, select bank0
  3237  089D  081F               	movf	31,w	;volatile
  3238  089E  1683               	bsf	3,5	;RP0=1, select bank1
  3239  089F  1303               	bcf	3,6	;RP1=0, select bank1
  3240  08A0  0622               	xorwf	??_ADCRead^(0+128),w
  3241  08A1  39C7               	andlw	-57
  3242  08A2  0622               	xorwf	??_ADCRead^(0+128),w
  3243  08A3  1283               	bcf	3,5	;RP0=0, select bank0
  3244  08A4  1303               	bcf	3,6	;RP1=0, select bank0
  3245  08A5  009F               	movwf	31	;volatile
  3246                           
  3247                           ;main.c: 252: recipiente = ch;
  3248  08A6  1683               	bsf	3,5	;RP0=1, select bank1
  3249  08A7  1303               	bcf	3,6	;RP1=0, select bank1
  3250  08A8  0821               	movf	(ADCRead@ch+1)^(0+128),w
  3251  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  3252  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  3253  08AB  01EE               	clrf	_recipiente+1
  3254  08AC  07EE               	addwf	_recipiente+1,f
  3255  08AD  1683               	bsf	3,5	;RP0=1, select bank1
  3256  08AE  1303               	bcf	3,6	;RP1=0, select bank1
  3257  08AF  0820               	movf	ADCRead@ch^(0+128),w
  3258  08B0  1283               	bcf	3,5	;RP0=0, select bank0
  3259  08B1  1303               	bcf	3,6	;RP1=0, select bank0
  3260  08B2  01ED               	clrf	_recipiente
  3261  08B3  07ED               	addwf	_recipiente,f
  3262                           
  3263                           ;main.c: 253: _delay((unsigned long)((25)*(20000000/4000000.0)));
  3264  08B4  3029               	movlw	41
  3265  08B5  1683               	bsf	3,5	;RP0=1, select bank1
  3266  08B6  1303               	bcf	3,6	;RP1=0, select bank1
  3267  08B7  00A2               	movwf	??_ADCRead^(0+128)
  3268  08B8                     u4067:	
  3269  08B8  0BA2               	decfsz	??_ADCRead^(0+128),f
  3270  08B9  28B8               	goto	u4067
  3271  08BA  0000               	nop
  3272                           
  3273                           ;main.c: 254: ADCON0bits.GO = 1;
  3274  08BB  1283               	bcf	3,5	;RP0=0, select bank0
  3275  08BC  1303               	bcf	3,6	;RP1=0, select bank0
  3276  08BD  151F               	bsf	31,2	;volatile
  3277  08BE                     l148:	
  3278                           ;main.c: 255: while (ADCON0bits.GO_DONE);
  3279                           
  3280  08BE  1D1F               	btfss	31,2	;volatile
  3281  08BF  0008               	return
  3282  08C0  28BE               	goto	l148
  3283  08C1                     __end_of_ADCRead:	
  3284                           
  3285                           	psect	text16
  3286  0271                     __ptext16:	
  3287 ;; *************** function _ISR *****************
  3288 ;; Defined at:
  3289 ;;		line 261 in file "main.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  input2          3   67[BANK0 ] float 
  3294 ;;  input           3   64[BANK0 ] float 
  3295 ;;  pre             3   57[BANK0 ] float 
  3296 ;;  status          2   62[BANK0 ] int 
  3297 ;;  preint          2   60[BANK0 ] int 
  3298 ;;  per             1   70[BANK0 ] PTR unsigned char 
  3299 ;;		 -> ftoa@buf(17), 
  3300 ;;  buf             1   56[BANK0 ] PTR unsigned char 
  3301 ;;		 -> ftoa@buf(17), 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;		None               void
  3304 ;; Registers used:
  3305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3311 ;;      Params:         0       0       0       0       0
  3312 ;;      Locals:         0      15       0       0       0
  3313 ;;      Temps:          0       6       0       0       0
  3314 ;;      Totals:         0      21       0       0       0
  3315 ;;Total ram usage:       21 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    6
  3318 ;; This function calls:
  3319 ;;		_USARTReceiveChar
  3320 ;;		___awtoft
  3321 ;;		___ftdiv
  3322 ;;		___ftmul
  3323 ;;		___fttol
  3324 ;;		_ftoa
  3325 ;;		_progressBar
  3326 ;;		_refresh
  3327 ;;		_sendSerial
  3328 ;;		i1_Ativar
  3329 ;;		i1_USARTWriteChar
  3330 ;;		i1_lcd_escreve_string
  3331 ;;		i1_lcd_gotoxy
  3332 ;; This function is called by:
  3333 ;;		Interrupt level 1
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _ISR
  3339  0271                     _ISR:	
  3340                           
  3341                           ;main.c: 263: if (PIR1bits.ADIF) {
  3342  0271  1F0C               	btfss	12,6	;volatile
  3343  0272  2B7C               	goto	i1l2949
  3344                           
  3345                           ;main.c: 265: ADCResult = ((ADRESH << 8) + ADRESL);
  3346  0273  081E               	movf	30,w	;volatile
  3347  0274  01E8               	clrf	_ADCResult+1
  3348  0275  07E8               	addwf	_ADCResult+1,f
  3349  0276  1683               	bsf	3,5	;RP0=1, select bank1
  3350  0277  1303               	bcf	3,6	;RP1=0, select bank1
  3351  0278  081E               	movf	30,w	;volatile
  3352  0279  1283               	bcf	3,5	;RP0=0, select bank0
  3353  027A  1303               	bcf	3,6	;RP1=0, select bank0
  3354  027B  01E7               	clrf	_ADCResult
  3355  027C  07E7               	addwf	_ADCResult,f
  3356                           
  3357                           ;main.c: 267: char * buf, * per;
  3358                           ;main.c: 268: float input, input2;
  3359                           ;main.c: 269: float pre;
  3360                           ;main.c: 270: int preint, status;
  3361                           ;main.c: 272: input = ADCResult * 0.0048828125;
  3362  027D  3000               	movlw	0
  3363  027E  00A0               	movwf	___ftmul@f1
  3364  027F  30A0               	movlw	160
  3365  0280  00A1               	movwf	___ftmul@f1+1
  3366  0281  303B               	movlw	59
  3367  0282  00A2               	movwf	___ftmul@f1+2
  3368  0283  0868               	movf	_ADCResult+1,w
  3369  0284  01F9               	clrf	___awtoft@c+1
  3370  0285  07F9               	addwf	___awtoft@c+1,f
  3371  0286  0867               	movf	_ADCResult,w
  3372  0287  01F8               	clrf	___awtoft@c
  3373  0288  07F8               	addwf	___awtoft@c,f
  3374  0289  160A  118A  2720  120A  118A  	fcall	___awtoft
  3375  028E  0878               	movf	?___awtoft,w
  3376  028F  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0290  1303               	bcf	3,6	;RP1=0, select bank0
  3378  0291  00A3               	movwf	___ftmul@f2
  3379  0292  0879               	movf	?___awtoft+1,w
  3380  0293  00A4               	movwf	___ftmul@f2+1
  3381  0294  087A               	movf	?___awtoft+2,w
  3382  0295  00A5               	movwf	___ftmul@f2+2
  3383  0296  120A  118A  24A6  120A  118A  	fcall	___ftmul
  3384  029B  1283               	bcf	3,5	;RP0=0, select bank0
  3385  029C  1303               	bcf	3,6	;RP1=0, select bank0
  3386  029D  0820               	movf	?___ftmul,w
  3387  029E  00E0               	movwf	ISR@input
  3388  029F  0821               	movf	?___ftmul+1,w
  3389  02A0  00E1               	movwf	ISR@input+1
  3390  02A1  0822               	movf	?___ftmul+2,w
  3391  02A2  00E2               	movwf	ISR@input+2
  3392                           
  3393                           ;main.c: 273: buf = ftoa(input, &status);
  3394  02A3  0860               	movf	ISR@input,w
  3395  02A4  00C4               	movwf	ftoa@f
  3396  02A5  0861               	movf	ISR@input+1,w
  3397  02A6  00C5               	movwf	ftoa@f+1
  3398  02A7  0862               	movf	ISR@input+2,w
  3399  02A8  00C6               	movwf	ftoa@f+2
  3400  02A9  305E               	movlw	ISR@status& (0+255)
  3401  02AA  00D2               	movwf	??_ISR
  3402  02AB  0852               	movf	??_ISR,w
  3403  02AC  00C7               	movwf	ftoa@status
  3404  02AD  120A  118A  2579  120A  118A  	fcall	_ftoa
  3405  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  3406  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  3407  02B4  00D3               	movwf	??_ISR+1
  3408  02B5  0853               	movf	??_ISR+1,w
  3409  02B6  00D8               	movwf	ISR@buf
  3410                           
  3411                           ;main.c: 275: lcd_gotoxy(0, 1);
  3412  02B7  01F5               	clrf	i1lcd_gotoxy@y
  3413  02B8  0AF5               	incf	i1lcd_gotoxy@y,f
  3414  02B9  3000               	movlw	0
  3415  02BA  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3416                           
  3417                           ;main.c: 276: lcd_escreve_string("Nivel:");
  3418  02BF  3076               	movlw	low (STR_2-__stringbase)
  3419  02C0  00FC               	movwf	i1lcd_escreve_string@y
  3420  02C1  3080               	movlw	128
  3421  02C2  00FD               	movwf	i1lcd_escreve_string@y+1
  3422  02C3  160A  118A  2787  120A  118A  	fcall	i1_lcd_escreve_string
  3423                           
  3424                           ;main.c: 277: lcd_gotoxy(7, 1);
  3425  02C8  01F5               	clrf	i1lcd_gotoxy@y
  3426  02C9  0AF5               	incf	i1lcd_gotoxy@y,f
  3427  02CA  3007               	movlw	7
  3428  02CB  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3429                           
  3430                           ;main.c: 279: input2 = ((input * 100) / 1);
  3431  02D0  3000               	movlw	0
  3432  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  3433  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  3434  02D3  00B0               	movwf	___ftdiv@f2
  3435  02D4  3080               	movlw	128
  3436  02D5  00B1               	movwf	___ftdiv@f2+1
  3437  02D6  303F               	movlw	63
  3438  02D7  00B2               	movwf	___ftdiv@f2+2
  3439  02D8  3000               	movlw	0
  3440  02D9  00A0               	movwf	___ftmul@f1
  3441  02DA  30C8               	movlw	200
  3442  02DB  00A1               	movwf	___ftmul@f1+1
  3443  02DC  3042               	movlw	66
  3444  02DD  00A2               	movwf	___ftmul@f1+2
  3445  02DE  0860               	movf	ISR@input,w
  3446  02DF  00A3               	movwf	___ftmul@f2
  3447  02E0  0861               	movf	ISR@input+1,w
  3448  02E1  00A4               	movwf	___ftmul@f2+1
  3449  02E2  0862               	movf	ISR@input+2,w
  3450  02E3  00A5               	movwf	___ftmul@f2+2
  3451  02E4  120A  118A  24A6  120A  118A  	fcall	___ftmul
  3452  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  3453  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  3454  02EB  0820               	movf	?___ftmul,w
  3455  02EC  00B3               	movwf	___ftdiv@f1
  3456  02ED  0821               	movf	?___ftmul+1,w
  3457  02EE  00B4               	movwf	___ftdiv@f1+1
  3458  02EF  0822               	movf	?___ftmul+2,w
  3459  02F0  00B5               	movwf	___ftdiv@f1+2
  3460  02F1  120A  118A  2633  120A  118A  	fcall	___ftdiv
  3461  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  3462  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  3463  02F8  0830               	movf	?___ftdiv,w
  3464  02F9  00E3               	movwf	ISR@input2
  3465  02FA  0831               	movf	?___ftdiv+1,w
  3466  02FB  00E4               	movwf	ISR@input2+1
  3467  02FC  0832               	movf	?___ftdiv+2,w
  3468  02FD  00E5               	movwf	ISR@input2+2
  3469                           
  3470                           ;main.c: 280: per = ftoa(input2, &status);
  3471  02FE  0863               	movf	ISR@input2,w
  3472  02FF  00C4               	movwf	ftoa@f
  3473  0300  0864               	movf	ISR@input2+1,w
  3474  0301  00C5               	movwf	ftoa@f+1
  3475  0302  0865               	movf	ISR@input2+2,w
  3476  0303  00C6               	movwf	ftoa@f+2
  3477  0304  305E               	movlw	ISR@status& (0+255)
  3478  0305  00D2               	movwf	??_ISR
  3479  0306  0852               	movf	??_ISR,w
  3480  0307  00C7               	movwf	ftoa@status
  3481  0308  120A  118A  2579  120A  118A  	fcall	_ftoa
  3482  030D  1283               	bcf	3,5	;RP0=0, select bank0
  3483  030E  1303               	bcf	3,6	;RP1=0, select bank0
  3484  030F  00D3               	movwf	??_ISR+1
  3485  0310  0853               	movf	??_ISR+1,w
  3486  0311  00E6               	movwf	ISR@per
  3487                           
  3488                           ;main.c: 282: lcd_escreve_string(per);
  3489  0312  0866               	movf	ISR@per,w
  3490  0313  00FC               	movwf	i1lcd_escreve_string@y
  3491  0314  3000               	movlw	0
  3492  0315  00FD               	movwf	i1lcd_escreve_string@y+1
  3493  0316  160A  118A  2787  120A  118A  	fcall	i1_lcd_escreve_string
  3494                           
  3495                           ;main.c: 283: lcd_gotoxy(16, 1);
  3496  031B  01F5               	clrf	i1lcd_gotoxy@y
  3497  031C  0AF5               	incf	i1lcd_gotoxy@y,f
  3498  031D  3010               	movlw	16
  3499  031E  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3500                           
  3501                           ;main.c: 284: lcd_escreve_string("%");
  3502  0323  307D               	movlw	low (STR_3-__stringbase)
  3503  0324  00FC               	movwf	i1lcd_escreve_string@y
  3504  0325  3080               	movlw	128
  3505  0326  00FD               	movwf	i1lcd_escreve_string@y+1
  3506  0327  160A  118A  2787  120A  118A  	fcall	i1_lcd_escreve_string
  3507                           
  3508                           ;main.c: 285: lcd_gotoxy(0, 0);
  3509  032C  01F5               	clrf	i1lcd_gotoxy@y
  3510  032D  3000               	movlw	0
  3511  032E  160A  118A  26B3  120A  118A  	fcall	i1_lcd_gotoxy
  3512                           
  3513                           ;main.c: 287: pre = input2 * 0.16;
  3514  0333  30D7               	movlw	215
  3515  0334  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0335  1303               	bcf	3,6	;RP1=0, select bank0
  3517  0336  00A0               	movwf	___ftmul@f1
  3518  0337  3023               	movlw	35
  3519  0338  00A1               	movwf	___ftmul@f1+1
  3520  0339  303E               	movlw	62
  3521  033A  00A2               	movwf	___ftmul@f1+2
  3522  033B  0863               	movf	ISR@input2,w
  3523  033C  00A3               	movwf	___ftmul@f2
  3524  033D  0864               	movf	ISR@input2+1,w
  3525  033E  00A4               	movwf	___ftmul@f2+1
  3526  033F  0865               	movf	ISR@input2+2,w
  3527  0340  00A5               	movwf	___ftmul@f2+2
  3528  0341  120A  118A  24A6  120A  118A  	fcall	___ftmul
  3529  0346  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0347  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0348  0820               	movf	?___ftmul,w
  3532  0349  00D9               	movwf	ISR@pre
  3533  034A  0821               	movf	?___ftmul+1,w
  3534  034B  00DA               	movwf	ISR@pre+1
  3535  034C  0822               	movf	?___ftmul+2,w
  3536  034D  00DB               	movwf	ISR@pre+2
  3537                           
  3538                           ;main.c: 288: preint = (int) pre;
  3539  034E  0859               	movf	ISR@pre,w
  3540  034F  00B0               	movwf	___fttol@f1
  3541  0350  085A               	movf	ISR@pre+1,w
  3542  0351  00B1               	movwf	___fttol@f1+1
  3543  0352  085B               	movf	ISR@pre+2,w
  3544  0353  00B2               	movwf	___fttol@f1+2
  3545  0354  120A  158A  2640  120A  118A  	fcall	___fttol
  3546  0359  1283               	bcf	3,5	;RP0=0, select bank0
  3547  035A  1303               	bcf	3,6	;RP1=0, select bank0
  3548  035B  0831               	movf	?___fttol+1,w
  3549  035C  01DD               	clrf	ISR@preint+1
  3550  035D  07DD               	addwf	ISR@preint+1,f
  3551  035E  0830               	movf	?___fttol,w
  3552  035F  01DC               	clrf	ISR@preint
  3553  0360  07DC               	addwf	ISR@preint,f
  3554                           
  3555                           ;main.c: 290: sendSerial(per);
  3556  0361  0866               	movf	ISR@per,w
  3557  0362  120A  158A  219B  120A  118A  	fcall	_sendSerial
  3558                           
  3559                           ;main.c: 291: progressBar(preint);
  3560  0367  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0368  1303               	bcf	3,6	;RP1=0, select bank0
  3562  0369  085D               	movf	ISR@preint+1,w
  3563  036A  01A1               	clrf	progressBar@preint+1
  3564  036B  07A1               	addwf	progressBar@preint+1,f
  3565  036C  085C               	movf	ISR@preint,w
  3566  036D  01A0               	clrf	progressBar@preint
  3567  036E  07A0               	addwf	progressBar@preint,f
  3568  036F  120A  158A  2261  120A  118A  	fcall	_progressBar
  3569                           
  3570                           ;main.c: 292: refresh();
  3571  0374  120A  158A  25C7  120A  118A  	fcall	_refresh
  3572                           
  3573                           ;main.c: 294: PIR1bits.ADIF = 0;
  3574  0379  1283               	bcf	3,5	;RP0=0, select bank0
  3575  037A  1303               	bcf	3,6	;RP1=0, select bank0
  3576  037B  130C               	bcf	12,6	;volatile
  3577  037C                     i1l2949:	
  3578                           
  3579                           ;main.c: 295: }
  3580                           ;main.c: 297: if (PIR1bits.RCIF) {
  3581  037C  1E8C               	btfss	12,5	;volatile
  3582  037D  2B92               	goto	i1l156
  3583                           
  3584                           ;main.c: 298: USARTWriteChar(USARTReceiveChar());
  3585  037E  160A  118A  26CD  120A  118A  	fcall	_USARTReceiveChar
  3586  0383  160A  118A  2641  120A  118A  	fcall	i1_USARTWriteChar
  3587                           
  3588                           ;main.c: 299: Ativar(USARTReceiveChar());
  3589  0388  160A  118A  26CD  120A  118A  	fcall	_USARTReceiveChar
  3590  038D  120A  158A  275D  120A  118A  	fcall	i1_Ativar
  3591  0392                     i1l156:	
  3592  0392  1283               	bcf	3,5	;RP0=0, select bank0
  3593  0393  1303               	bcf	3,6	;RP1=0, select bank0
  3594  0394  0857               	movf	??_ISR+5,w
  3595  0395  00FF               	movwf	127
  3596  0396  0856               	movf	??_ISR+4,w
  3597  0397  008A               	movwf	10
  3598  0398  0855               	movf	??_ISR+3,w
  3599  0399  0084               	movwf	4
  3600  039A  0E54               	swapf	(??_ISR+2)^0,w
  3601  039B  0083               	movwf	3
  3602  039C  0EFE               	swapf	126,f
  3603  039D  0E7E               	swapf	126,w
  3604  039E  0009               	retfie
  3605  039F                     __end_of_ISR:	
  3606                           
  3607                           	psect	intentry
  3608  0004                     __pintentry:	
  3609                           ;incstack = 0
  3610 ;; hardware stack exceeded
  3611                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3612                           
  3613  0004                     interrupt_function:	
  3614  007E                     saved_w	set	btemp
  3615  0004  00FE               	movwf	btemp
  3616  0005  0E03               	swapf	3,w
  3617  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3618  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3619  0008  00D4               	movwf	??_ISR+2
  3620  0009  0804               	movf	4,w
  3621  000A  00D5               	movwf	??_ISR+3
  3622  000B  080A               	movf	10,w
  3623  000C  00D6               	movwf	??_ISR+4
  3624  000D  087F               	movf	btemp+1,w
  3625  000E  00D7               	movwf	??_ISR+5
  3626  000F  120A  118A  2A71   	ljmp	_ISR
  3627                           
  3628                           	psect	text17
  3629  099B                     __ptext17:	
  3630 ;; *************** function _sendSerial *****************
  3631 ;; Defined at:
  3632 ;;		line 151 in file "main.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  nivelRecipie    1    wreg     PTR unsigned char 
  3635 ;;		 -> ftoa@buf(17), 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  nivelRecipie    1   41[BANK0 ] PTR unsigned char 
  3638 ;;		 -> ftoa@buf(17), 
  3639 ;;  origem         40    0[BANK0 ] unsigned char [40]
  3640 ;;  x               2   42[BANK0 ] int 
  3641 ;;  envio           1   40[BANK0 ] PTR const unsigned char 
  3642 ;;		 -> sendSerial@origem(40), 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;		None               void
  3645 ;; Registers used:
  3646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3652 ;;      Params:         0       0       0       0       0
  3653 ;;      Locals:         0      44       0       0       0
  3654 ;;      Temps:          1       0       0       0       0
  3655 ;;      Totals:         1      44       0       0       0
  3656 ;;Total ram usage:       45 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    2
  3659 ;; This function calls:
  3660 ;;		_USARTWriteString
  3661 ;; This function is called by:
  3662 ;;		_ISR
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _sendSerial
  3668  099B                     _sendSerial:	
  3669                           
  3670                           ;incstack = 0
  3671 ;; hardware stack exceeded
  3672                           ; Regs used in _sendSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3673                           ;sendSerial@nivelRecipiente stored from wreg
  3674  099B  1283               	bcf	3,5	;RP0=0, select bank0
  3675  099C  1303               	bcf	3,6	;RP1=0, select bank0
  3676  099D  00C9               	movwf	sendSerial@nivelRecipiente
  3677                           
  3678                           ;main.c: 152: int x = 0;
  3679  099E  01CA               	clrf	sendSerial@x
  3680  099F  01CB               	clrf	sendSerial@x+1
  3681  09A0                     i1l2717:	
  3682                           ;main.c: 153: char origem [40];
  3683                           ;main.c: 154: const char * envio;
  3684                           ;main.c: 156: while (*nivelRecipiente != '\0') {
  3685                           
  3686  09A0  0849               	movf	sendSerial@nivelRecipiente,w
  3687  09A1  0084               	movwf	4
  3688  09A2  1383               	bcf	3,7	;select IRP bank0
  3689  09A3  0880               	movf	0,f
  3690  09A4  1903               	btfsc	3,2
  3691  09A5  29CE               	goto	i1l2719
  3692                           
  3693                           ;main.c: 157: if ((x == 0)) {
  3694  09A6  084B               	movf	sendSerial@x+1,w
  3695  09A7  044A               	iorwf	sendSerial@x,w
  3696  09A8  1D03               	skipz
  3697  09A9  29B9               	goto	i1l2711
  3698                           
  3699                           ;main.c: 158: if (recipiente == 0) {
  3700  09AA  086E               	movf	_recipiente+1,w
  3701  09AB  046D               	iorwf	_recipiente,w
  3702  09AC  1D03               	skipz
  3703  09AD  29B0               	goto	i1l2707
  3704                           
  3705                           ;main.c: 159: origem[x] = 'S';
  3706  09AE  3053               	movlw	83
  3707  09AF  29B1               	goto	L3
  3708  09B0                     i1l2707:	
  3709                           ;main.c: 160: } else {
  3710                           
  3711                           
  3712                           ;main.c: 161: origem[x] = 'I';
  3713  09B0  3049               	movlw	73
  3714  09B1                     L3:	
  3715  09B1  00F3               	movwf	??_sendSerial
  3716  09B2  084A               	movf	sendSerial@x,w
  3717  09B3  3E20               	addlw	sendSerial@origem& (0+255)
  3718  09B4  0084               	movwf	4
  3719  09B5  0873               	movf	??_sendSerial,w
  3720  09B6  1383               	bcf	3,7	;select IRP bank0
  3721  09B7  0080               	movwf	0
  3722  09B8  29C7               	goto	i1l2715
  3723  09B9                     i1l2711:	
  3724                           ;main.c: 164: } else {
  3725                           
  3726                           ;main.c: 162: }
  3727                           ;main.c: 163: x++;
  3728                           
  3729                           
  3730                           ;main.c: 165: origem[x] = *nivelRecipiente;
  3731  09B9  0849               	movf	sendSerial@nivelRecipiente,w
  3732  09BA  0084               	movwf	4
  3733  09BB  1383               	bcf	3,7	;select IRP bank0
  3734  09BC  0800               	movf	0,w
  3735  09BD  00F3               	movwf	??_sendSerial
  3736  09BE  084A               	movf	sendSerial@x,w
  3737  09BF  3E20               	addlw	sendSerial@origem& (0+255)
  3738  09C0  0084               	movwf	4
  3739  09C1  0873               	movf	??_sendSerial,w
  3740  09C2  0080               	movwf	0
  3741                           
  3742                           ;main.c: 166: *nivelRecipiente++;
  3743  09C3  3001               	movlw	1
  3744  09C4  00F3               	movwf	??_sendSerial
  3745  09C5  0873               	movf	??_sendSerial,w
  3746  09C6  07C9               	addwf	sendSerial@nivelRecipiente,f
  3747  09C7                     i1l2715:	
  3748                           
  3749                           ;main.c: 167: x++;
  3750  09C7  3001               	movlw	1
  3751  09C8  07CA               	addwf	sendSerial@x,f
  3752  09C9  1803               	skipnc
  3753  09CA  0ACB               	incf	sendSerial@x+1,f
  3754  09CB  3000               	movlw	0
  3755  09CC  07CB               	addwf	sendSerial@x+1,f
  3756  09CD  29A0               	goto	i1l2717
  3757  09CE                     i1l2719:	
  3758                           
  3759                           ;main.c: 168: }
  3760                           ;main.c: 169: }
  3761                           ;main.c: 170: envio = &origem;
  3762  09CE  3020               	movlw	sendSerial@origem& (0+255)
  3763  09CF  00F3               	movwf	??_sendSerial
  3764  09D0  0873               	movf	??_sendSerial,w
  3765  09D1  00C8               	movwf	sendSerial@envio
  3766                           
  3767                           ;main.c: 171: USARTWriteString(envio);
  3768  09D2  0848               	movf	sendSerial@envio,w
  3769  09D3  00F1               	movwf	USARTWriteString@str
  3770  09D4  3000               	movlw	0
  3771  09D5  00F2               	movwf	USARTWriteString@str+1
  3772  09D6  160A  118A  2741   	fcall	_USARTWriteString
  3773  09D9  0008               	return
  3774  09DA                     __end_of_sendSerial:	
  3775                           
  3776                           	psect	text18
  3777  0DC7                     __ptext18:	
  3778 ;; *************** function _refresh *****************
  3779 ;; Defined at:
  3780 ;;		line 199 in file "main.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;		None               void
  3787 ;; Registers used:
  3788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3794 ;;      Params:         0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    2
  3801 ;; This function calls:
  3802 ;;		i1_Ativar
  3803 ;; This function is called by:
  3804 ;;		_ISR
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           
  3809                           ;psect for function _refresh
  3810  0DC7                     _refresh:	
  3811                           
  3812                           ;main.c: 200: if (recipiente == 0) {
  3813                           
  3814                           ;incstack = 0
  3815 ;; hardware stack exceeded
  3816                           ; Regs used in _refresh: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3817  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  3818  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  3819  0DC9  086E               	movf	_recipiente+1,w
  3820  0DCA  046D               	iorwf	_recipiente,w
  3821  0DCB  1D03               	skipz
  3822  0DCC  2E04               	goto	i1l2755
  3823                           
  3824                           ;main.c: 201: if (ADCResult < 80) {
  3825  0DCD  0868               	movf	_ADCResult+1,w
  3826  0DCE  3A80               	xorlw	128
  3827  0DCF  00FF               	movwf	127
  3828  0DD0  3080               	movlw	128
  3829  0DD1  027F               	subwf	127,w
  3830  0DD2  1D03               	skipz
  3831  0DD3  2DD6               	goto	u350_25
  3832  0DD4  3050               	movlw	80
  3833  0DD5  0267               	subwf	_ADCResult,w
  3834  0DD6                     u350_25:	
  3835  0DD6  1803               	skipnc
  3836  0DD7  2DE8               	goto	i1l2749
  3837                           
  3838                           ;main.c: 202: PORTDbits.RD2 = 0;
  3839  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  3840  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  3841  0DDA  1108               	bcf	8,2	;volatile
  3842                           
  3843                           ;main.c: 203: PORTDbits.RD3 = 1;
  3844  0DDB  1588               	bsf	8,3	;volatile
  3845                           
  3846                           ;main.c: 204: Ativar(LIGAR_BOMBA);
  3847  0DDC  3031               	movlw	_LIGAR_BOMBA-__stringbase
  3848  0DDD  0084               	movwf	4
  3849  0DDE  120A  158A  200A  120A  158A  	fcall	stringdir
  3850  0DE3  120A  158A  275D  120A  158A  	fcall	i1_Ativar
  3851  0DE8                     i1l2749:	
  3852                           
  3853                           ;main.c: 205: }
  3854                           ;main.c: 207: if (ADCResult > 200) {
  3855  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  3856  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  3857  0DEA  0868               	movf	_ADCResult+1,w
  3858  0DEB  3A80               	xorlw	128
  3859  0DEC  00FF               	movwf	127
  3860  0DED  3080               	movlw	128
  3861  0DEE  027F               	subwf	127,w
  3862  0DEF  1D03               	skipz
  3863  0DF0  2DF3               	goto	u351_25
  3864  0DF1  30C9               	movlw	201
  3865  0DF2  0267               	subwf	_ADCResult,w
  3866  0DF3                     u351_25:	
  3867  0DF3  1C03               	skipc
  3868  0DF4  0008               	return
  3869                           
  3870                           ;main.c: 208: PORTDbits.RD2 = 1;
  3871  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0DF7  1508               	bsf	8,2	;volatile
  3874                           
  3875                           ;main.c: 209: PORTDbits.RD3 = 0;
  3876  0DF8  1188               	bcf	8,3	;volatile
  3877                           
  3878                           ;main.c: 210: Ativar(DESLIGAR_BOMBA);
  3879  0DF9  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  3880  0DFA  0084               	movwf	4
  3881  0DFB  120A  158A  200A  120A  158A  	fcall	stringdir
  3882  0E00  120A  158A  275D   	fcall	i1_Ativar
  3883                           
  3884                           ;main.c: 211: }
  3885                           ;main.c: 212: } else if (recipiente == 1) {
  3886  0E03  0008               	return
  3887  0E04                     i1l2755:	
  3888  0E04  3001               	movlw	1
  3889  0E05  1283               	bcf	3,5	;RP0=0, select bank0
  3890  0E06  1303               	bcf	3,6	;RP1=0, select bank0
  3891  0E07  066D               	xorwf	_recipiente,w
  3892  0E08  046E               	iorwf	_recipiente+1,w
  3893  0E09  1D03               	skipz
  3894  0E0A  0008               	return
  3895                           
  3896                           ;main.c: 214: if (ADCResult < 80) {
  3897  0E0B  0868               	movf	_ADCResult+1,w
  3898  0E0C  3A80               	xorlw	128
  3899  0E0D  00FF               	movwf	127
  3900  0E0E  3080               	movlw	128
  3901  0E0F  027F               	subwf	127,w
  3902  0E10  1D03               	skipz
  3903  0E11  2E14               	goto	u353_25
  3904  0E12  3050               	movlw	80
  3905  0E13  0267               	subwf	_ADCResult,w
  3906  0E14                     u353_25:	
  3907  0E14  1803               	skipnc
  3908  0E15  2E25               	goto	i1l2763
  3909                           
  3910                           ;main.c: 215: PORTDbits.RD4 = 0;
  3911  0E16  1283               	bcf	3,5	;RP0=0, select bank0
  3912  0E17  1303               	bcf	3,6	;RP1=0, select bank0
  3913  0E18  1208               	bcf	8,4	;volatile
  3914                           
  3915                           ;main.c: 216: Ativar(LIGAR_MOTOR);
  3916  0E19  3032               	movlw	_LIGAR_MOTOR-__stringbase
  3917  0E1A  0084               	movwf	4
  3918  0E1B  120A  158A  200A  120A  158A  	fcall	stringdir
  3919  0E20  120A  158A  275D  120A  158A  	fcall	i1_Ativar
  3920  0E25                     i1l2763:	
  3921                           
  3922                           ;main.c: 217: }
  3923                           ;main.c: 219: if (ADCResult > 200) {
  3924  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  3926  0E27  0868               	movf	_ADCResult+1,w
  3927  0E28  3A80               	xorlw	128
  3928  0E29  00FF               	movwf	127
  3929  0E2A  3080               	movlw	128
  3930  0E2B  027F               	subwf	127,w
  3931  0E2C  1D03               	skipz
  3932  0E2D  2E30               	goto	u354_25
  3933  0E2E  30C9               	movlw	201
  3934  0E2F  0267               	subwf	_ADCResult,w
  3935  0E30                     u354_25:	
  3936  0E30  1C03               	skipc
  3937  0E31  0008               	return
  3938                           
  3939                           ;main.c: 220: PORTDbits.RD4 = 1;
  3940  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  3941  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  3942  0E34  1608               	bsf	8,4	;volatile
  3943                           
  3944                           ;main.c: 221: Ativar(DESLIGAR_MOTOR);
  3945  0E35  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  3946  0E36  0084               	movwf	4
  3947  0E37  120A  158A  200A  120A  158A  	fcall	stringdir
  3948  0E3C  120A  158A  275D   	fcall	i1_Ativar
  3949  0E3F  0008               	return
  3950  0E40                     __end_of_refresh:	
  3951                           
  3952                           	psect	text19
  3953  0F5D                     __ptext19:	
  3954 ;; *************** function i1_Ativar *****************
  3955 ;; Defined at:
  3956 ;;		line 123 in file "main.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  comando         1    wreg     unsigned char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  comando         1    2[COMMON] unsigned char 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;		None               void
  3963 ;; Registers used:
  3964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3970 ;;      Params:         0       0       0       0       0
  3971 ;;      Locals:         1       0       0       0       0
  3972 ;;      Temps:          1       0       0       0       0
  3973 ;;      Totals:         2       0       0       0       0
  3974 ;;Total ram usage:        2 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    1
  3977 ;; This function calls:
  3978 ;;		i1_USARTWriteChar
  3979 ;; This function is called by:
  3980 ;;		_refresh
  3981 ;;		_ISR
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           
  3986                           ;psect for function i1_Ativar
  3987  0F5D                     i1_Ativar:	
  3988                           
  3989                           ;incstack = 0
  3990 ;; hardware stack exceeded
  3991                           ; Regs used in i1_Ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3992                           ;i1Ativar@comando stored from wreg
  3993  0F5D  00F2               	movwf	i1Ativar@comando
  3994                           
  3995                           ;main.c: 124: if (comando == LIGAR_BOMBA) {
  3996  0F5E  3031               	movlw	_LIGAR_BOMBA-__stringbase
  3997  0F5F  0084               	movwf	4
  3998  0F60  120A  158A  200A  120A  158A  	fcall	stringdir
  3999  0F65  00F1               	movwf	??i1_Ativar
  4000  0F66  0872               	movf	i1Ativar@comando,w
  4001  0F67  0671               	xorwf	??i1_Ativar,w
  4002  0F68  1D03               	skipz
  4003  0F69  2F79               	goto	i1l2641
  4004                           
  4005                           ;main.c: 125: PORTDbits.RD2 = 0;
  4006  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  4007  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  4008  0F6C  1108               	bcf	8,2	;volatile
  4009                           
  4010                           ;main.c: 126: PORTDbits.RD3 = 1;
  4011  0F6D  1588               	bsf	8,3	;volatile
  4012                           
  4013                           ;main.c: 127: USARTWriteChar(LIGAR_BOMBA);
  4014  0F6E  3031               	movlw	_LIGAR_BOMBA-__stringbase
  4015  0F6F  0084               	movwf	4
  4016  0F70  120A  158A  200A  120A  158A  	fcall	stringdir
  4017  0F75  160A  118A  2641   	fcall	i1_USARTWriteChar
  4018                           
  4019                           ;main.c: 128: } else if (comando == DESLIGAR_BOMBA) {
  4020  0F78  0008               	return
  4021  0F79                     i1l2641:	
  4022  0F79  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  4023  0F7A  0084               	movwf	4
  4024  0F7B  120A  158A  200A  120A  158A  	fcall	stringdir
  4025  0F80  00F1               	movwf	??i1_Ativar
  4026  0F81  0872               	movf	i1Ativar@comando,w
  4027  0F82  0671               	xorwf	??i1_Ativar,w
  4028  0F83  1D03               	skipz
  4029  0F84  2F94               	goto	i1l2647
  4030                           
  4031                           ;main.c: 129: PORTDbits.RD2 = 1;
  4032  0F85  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0F86  1303               	bcf	3,6	;RP1=0, select bank0
  4034  0F87  1508               	bsf	8,2	;volatile
  4035                           
  4036                           ;main.c: 130: PORTDbits.RD3 = 0;
  4037  0F88  1188               	bcf	8,3	;volatile
  4038                           
  4039                           ;main.c: 131: USARTWriteChar(DESLIGAR_BOMBA);
  4040  0F89  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  4041  0F8A  0084               	movwf	4
  4042  0F8B  120A  158A  200A  120A  158A  	fcall	stringdir
  4043  0F90  160A  118A  2641   	fcall	i1_USARTWriteChar
  4044                           
  4045                           ;main.c: 132: } else if (comando == LIGAR_MOTOR) {
  4046  0F93  0008               	return
  4047  0F94                     i1l2647:	
  4048  0F94  3032               	movlw	_LIGAR_MOTOR-__stringbase
  4049  0F95  0084               	movwf	4
  4050  0F96  120A  158A  200A  120A  158A  	fcall	stringdir
  4051  0F9B  00F1               	movwf	??i1_Ativar
  4052  0F9C  0872               	movf	i1Ativar@comando,w
  4053  0F9D  0671               	xorwf	??i1_Ativar,w
  4054  0F9E  1D03               	skipz
  4055  0F9F  2FAE               	goto	i1l2653
  4056                           
  4057                           ;main.c: 133: PORTDbits.RD4 = 1;
  4058  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  4059  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  4060  0FA2  1608               	bsf	8,4	;volatile
  4061                           
  4062                           ;main.c: 134: USARTWriteChar(LIGAR_MOTOR);
  4063  0FA3  3032               	movlw	_LIGAR_MOTOR-__stringbase
  4064  0FA4  0084               	movwf	4
  4065  0FA5  120A  158A  200A  120A  158A  	fcall	stringdir
  4066  0FAA  160A  118A  2641   	fcall	i1_USARTWriteChar
  4067                           
  4068                           ;main.c: 135: } else if (comando == DESLIGAR_MOTOR) {
  4069  0FAD  0008               	return
  4070  0FAE                     i1l2653:	
  4071  0FAE  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  4072  0FAF  0084               	movwf	4
  4073  0FB0  120A  158A  200A  120A  158A  	fcall	stringdir
  4074  0FB5  00F1               	movwf	??i1_Ativar
  4075  0FB6  0872               	movf	i1Ativar@comando,w
  4076  0FB7  0671               	xorwf	??i1_Ativar,w
  4077  0FB8  1D03               	skipz
  4078  0FB9  2FC8               	goto	i1l2659
  4079                           
  4080                           ;main.c: 136: PORTDbits.RD4 = 0;
  4081  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  4082  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  4083  0FBC  1208               	bcf	8,4	;volatile
  4084                           
  4085                           ;main.c: 137: USARTWriteChar(DESLIGAR_MOTOR);
  4086  0FBD  302F               	movlw	_DESLIGAR_MOTOR-__stringbase
  4087  0FBE  0084               	movwf	4
  4088  0FBF  120A  158A  200A  120A  158A  	fcall	stringdir
  4089  0FC4  160A  118A  2641   	fcall	i1_USARTWriteChar
  4090                           
  4091                           ;main.c: 138: } else if (comando == LIGAR) {
  4092  0FC7  0008               	return
  4093  0FC8                     i1l2659:	
  4094  0FC8  3030               	movlw	_LIGAR-__stringbase
  4095  0FC9  0084               	movwf	4
  4096  0FCA  120A  158A  200A  120A  158A  	fcall	stringdir
  4097  0FCF  00F1               	movwf	??i1_Ativar
  4098  0FD0  0872               	movf	i1Ativar@comando,w
  4099  0FD1  0671               	xorwf	??i1_Ativar,w
  4100  0FD2  1D03               	skipz
  4101  0FD3  2FE5               	goto	i1l2665
  4102                           
  4103                           ;main.c: 139: flag_Start = 1;
  4104  0FD4  3001               	movlw	1
  4105  0FD5  1683               	bsf	3,5	;RP0=1, select bank1
  4106  0FD6  1303               	bcf	3,6	;RP1=0, select bank1
  4107  0FD7  00BE               	movwf	_flag_Start^(0+128)
  4108  0FD8  3000               	movlw	0
  4109  0FD9  00BF               	movwf	(_flag_Start^(0+128)+1)
  4110                           
  4111                           ;main.c: 140: USARTWriteChar(LIGAR);
  4112  0FDA  3030               	movlw	_LIGAR-__stringbase
  4113  0FDB  0084               	movwf	4
  4114  0FDC  120A  158A  200A  120A  158A  	fcall	stringdir
  4115  0FE1  160A  118A  2641   	fcall	i1_USARTWriteChar
  4116                           
  4117                           ;main.c: 141: } else if (comando == DESLIGAR) {
  4118  0FE4  0008               	return
  4119  0FE5                     i1l2665:	
  4120  0FE5  302D               	movlw	_DESLIGAR-__stringbase
  4121  0FE6  0084               	movwf	4
  4122  0FE7  120A  158A  200A  120A  158A  	fcall	stringdir
  4123  0FEC  00F1               	movwf	??i1_Ativar
  4124  0FED  0872               	movf	i1Ativar@comando,w
  4125  0FEE  0671               	xorwf	??i1_Ativar,w
  4126  0FEF  1D03               	skipz
  4127  0FF0  0008               	return
  4128                           
  4129                           ;main.c: 142: flag_Start = 0;
  4130  0FF1  1683               	bsf	3,5	;RP0=1, select bank1
  4131  0FF2  1303               	bcf	3,6	;RP1=0, select bank1
  4132  0FF3  01BE               	clrf	_flag_Start^(0+128)
  4133  0FF4  01BF               	clrf	(_flag_Start+1)^(0+128)
  4134                           
  4135                           ;main.c: 143: USARTWriteChar(DESLIGAR);
  4136  0FF5  302D               	movlw	_DESLIGAR-__stringbase
  4137  0FF6  0084               	movwf	4
  4138  0FF7  120A  158A  200A  120A  158A  	fcall	stringdir
  4139  0FFC  160A  118A  2641   	fcall	i1_USARTWriteChar
  4140  0FFF  0008               	return
  4141  1000                     __end_ofi1_Ativar:	
  4142                           
  4143                           	psect	text20
  4144  0A61                     __ptext20:	
  4145 ;; *************** function _progressBar *****************
  4146 ;; Defined at:
  4147 ;;		line 178 in file "main.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  preint          2    0[BANK0 ] int 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  aux            16    6[BANK0 ] unsigned char [16]
  4152 ;;  i               2   22[BANK0 ] int 
  4153 ;;  result          1   24[BANK0 ] PTR unsigned char 
  4154 ;;		 -> progressBar@aux(16), 
  4155 ;; Return value:  Size  Location     Type
  4156 ;;		None               void
  4157 ;; Registers used:
  4158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4164 ;;      Params:         0       2       0       0       0
  4165 ;;      Locals:         0      19       0       0       0
  4166 ;;      Temps:          0       4       0       0       0
  4167 ;;      Totals:         0      25       0       0       0
  4168 ;;Total ram usage:       25 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    5
  4171 ;; This function calls:
  4172 ;;		i1_lcd_escreve_string
  4173 ;; This function is called by:
  4174 ;;		_ISR
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function _progressBar
  4180  0A61                     _progressBar:	
  4181                           
  4182                           ;main.c: 179: int i = 0;
  4183                           
  4184                           ;incstack = 0
  4185 ;; hardware stack exceeded
  4186                           ; Regs used in _progressBar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4187  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  4188  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  4189  0A63  01B6               	clrf	progressBar@i
  4190  0A64  01B7               	clrf	progressBar@i+1
  4191                           
  4192                           ;main.c: 180: unsigned char *result;
  4193                           ;main.c: 181: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ',
  4194                           ;main.c: 182: ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
  4195  0A65  3026               	movlw	progressBar@aux& (0+255)
  4196  0A66  0084               	movwf	4
  4197  0A67  30D5               	movlw	low progressBar@F1346
  4198  0A68  00A2               	movwf	??_progressBar
  4199  0A69  0804               	movf	4,w
  4200  0A6A  00A3               	movwf	??_progressBar+1
  4201  0A6B  3010               	movlw	16
  4202  0A6C  00A4               	movwf	??_progressBar+2
  4203  0A6D                     u347_20:	
  4204  0A6D  0822               	movf	??_progressBar,w
  4205  0A6E  0084               	movwf	4
  4206  0A6F  1383               	bcf	3,7	;select IRP bank1
  4207  0A70  0800               	movf	0,w
  4208  0A71  00A5               	movwf	??_progressBar+3
  4209  0A72  0AA2               	incf	??_progressBar,f
  4210  0A73  0823               	movf	??_progressBar+1,w
  4211  0A74  0084               	movwf	4
  4212  0A75  0825               	movf	??_progressBar+3,w
  4213  0A76  0080               	movwf	0
  4214  0A77  0AA3               	incf	??_progressBar+1,f
  4215  0A78  0BA4               	decfsz	??_progressBar+2,f
  4216  0A79  2A6D               	goto	u347_20
  4217  0A7A                     i1l2733:	
  4218                           ;main.c: 184: while (preint >= 0) {
  4219                           
  4220  0A7A  1BA1               	btfsc	progressBar@preint+1,7
  4221  0A7B  2A90               	goto	i1l2735
  4222                           
  4223                           ;main.c: 185: aux[i] = 0xFF;
  4224  0A7C  30FF               	movlw	255
  4225  0A7D  00A2               	movwf	??_progressBar
  4226  0A7E  0836               	movf	progressBar@i,w
  4227  0A7F  3E26               	addlw	progressBar@aux& (0+255)
  4228  0A80  0084               	movwf	4
  4229  0A81  0822               	movf	??_progressBar,w
  4230  0A82  0080               	movwf	0
  4231                           
  4232                           ;main.c: 186: preint--;
  4233  0A83  30FF               	movlw	255
  4234  0A84  07A0               	addwf	progressBar@preint,f
  4235  0A85  1803               	skipnc
  4236  0A86  0AA1               	incf	progressBar@preint+1,f
  4237  0A87  30FF               	movlw	255
  4238  0A88  07A1               	addwf	progressBar@preint+1,f
  4239                           
  4240                           ;main.c: 187: i++;
  4241  0A89  3001               	movlw	1
  4242  0A8A  07B6               	addwf	progressBar@i,f
  4243  0A8B  1803               	skipnc
  4244  0A8C  0AB7               	incf	progressBar@i+1,f
  4245  0A8D  3000               	movlw	0
  4246  0A8E  07B7               	addwf	progressBar@i+1,f
  4247  0A8F  2A7A               	goto	i1l2733
  4248  0A90                     i1l2735:	
  4249                           
  4250                           ;main.c: 188: }
  4251                           ;main.c: 189: result = &aux;
  4252  0A90  3026               	movlw	progressBar@aux& (0+255)
  4253  0A91  00A2               	movwf	??_progressBar
  4254  0A92  0822               	movf	??_progressBar,w
  4255  0A93  00B8               	movwf	progressBar@result
  4256                           
  4257                           ;main.c: 190: lcd_escreve_string(result);
  4258  0A94  0838               	movf	progressBar@result,w
  4259  0A95  00FC               	movwf	i1lcd_escreve_string@y
  4260  0A96  3000               	movlw	0
  4261  0A97  00FD               	movwf	i1lcd_escreve_string@y+1
  4262  0A98  160A  118A  2787  120A  158A  	fcall	i1_lcd_escreve_string
  4263                           
  4264                           ;main.c: 191: _delay((unsigned long)((200)*(20000000/4000.0)));
  4265  0A9D  3006               	movlw	6
  4266  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  4267  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  4268  0AA0  00A4               	movwf	??_progressBar+2
  4269  0AA1  3013               	movlw	19
  4270  0AA2  00A3               	movwf	??_progressBar+1
  4271  0AA3  30B1               	movlw	177
  4272  0AA4  00A2               	movwf	??_progressBar
  4273  0AA5                     u407_27:	
  4274  0AA5  0BA2               	decfsz	??_progressBar,f
  4275  0AA6  2AA5               	goto	u407_27
  4276  0AA7  0BA3               	decfsz	??_progressBar+1,f
  4277  0AA8  2AA5               	goto	u407_27
  4278  0AA9  0BA4               	decfsz	??_progressBar+2,f
  4279  0AAA  2AA5               	goto	u407_27
  4280  0AAB  2AAC               	nop2
  4281  0AAC  0008               	return
  4282  0AAD                     __end_of_progressBar:	
  4283                           
  4284                           	psect	text21
  4285  1787                     __ptext21:	
  4286 ;; *************** function i1_lcd_escreve_string *****************
  4287 ;; Defined at:
  4288 ;;		line 168 in file "lcd_4bit.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  y               2   12[COMMON] PTR const unsigned char 
  4291 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  4292 ;;		 -> progressBar@aux(16), 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;		None               void
  4297 ;; Registers used:
  4298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4304 ;;      Params:         2       0       0       0       0
  4305 ;;      Locals:         0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0
  4307 ;;      Totals:         2       0       0       0       0
  4308 ;;Total ram usage:        2 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    4
  4311 ;; This function calls:
  4312 ;;		i1_lcd_putc
  4313 ;; This function is called by:
  4314 ;;		_progressBar
  4315 ;;		_ISR
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           
  4320                           ;psect for function i1_lcd_escreve_string
  4321  1787                     i1_lcd_escreve_string:	
  4322  1787                     i1l2677:	
  4323                           ;lcd_4bit.c: 170: while(*y!='\0')
  4324                           
  4325                           ;incstack = 0
  4326 ;; hardware stack exceeded
  4327                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4328                           
  4329  1787  087D               	movf	i1lcd_escreve_string@y+1,w
  4330  1788  1283               	bcf	3,5	;RP0=0, select bank0
  4331  1789  1303               	bcf	3,6	;RP1=0, select bank0
  4332  178A  00FF               	movwf	127
  4333  178B  087C               	movf	i1lcd_escreve_string@y,w
  4334  178C  0084               	movwf	4
  4335  178D  120A  158A  2000  160A  118A  	fcall	stringtab
  4336  1792  3800               	iorlw	0
  4337  1793  1903               	btfsc	3,2
  4338  1794  0008               	return
  4339                           
  4340                           ;lcd_4bit.c: 171: {
  4341                           ;lcd_4bit.c: 172: lcd_putc(*y);
  4342  1795  087D               	movf	i1lcd_escreve_string@y+1,w
  4343  1796  1283               	bcf	3,5	;RP0=0, select bank0
  4344  1797  1303               	bcf	3,6	;RP1=0, select bank0
  4345  1798  00FF               	movwf	127
  4346  1799  087C               	movf	i1lcd_escreve_string@y,w
  4347  179A  0084               	movwf	4
  4348  179B  120A  158A  2000  160A  118A  	fcall	stringtab
  4349  17A0  120A  158A  2160  160A  118A  	fcall	i1_lcd_putc
  4350                           
  4351                           ;lcd_4bit.c: 173: y++;
  4352  17A5  3001               	movlw	1
  4353  17A6  07FC               	addwf	i1lcd_escreve_string@y,f
  4354  17A7  1803               	skipnc
  4355  17A8  0AFD               	incf	i1lcd_escreve_string@y+1,f
  4356  17A9  2F87               	goto	i1l2677
  4357  17AA                     __end_ofi1_lcd_escreve_string:	
  4358                           
  4359                           	psect	text22
  4360  0960                     __ptext22:	
  4361 ;; *************** function i1_lcd_putc *****************
  4362 ;; Defined at:
  4363 ;;		line 82 in file "lcd_4bit.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  c               1    wreg     unsigned char 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  c               1   11[COMMON] unsigned char 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;		None               void
  4370 ;; Registers used:
  4371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4377 ;;      Params:         0       0       0       0       0
  4378 ;;      Locals:         1       0       0       0       0
  4379 ;;      Temps:          2       0       0       0       0
  4380 ;;      Totals:         3       0       0       0       0
  4381 ;;Total ram usage:        3 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    3
  4384 ;; This function calls:
  4385 ;;		i1_lcd_envia_byte
  4386 ;;		i1_lcd_gotoxy
  4387 ;; This function is called by:
  4388 ;;		i1_lcd_escreve_string
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           
  4393                           ;psect for function i1_lcd_putc
  4394  0960                     i1_lcd_putc:	
  4395                           
  4396                           ;incstack = 0
  4397 ;; hardware stack exceeded
  4398                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4399                           ;i1lcd_putc@c stored from wreg
  4400  0960  00FB               	movwf	i1lcd_putc@c
  4401                           
  4402                           ;lcd_4bit.c: 84: switch(c)
  4403  0961  298F               	goto	i1l2243
  4404  0962                     i1l2231:	
  4405                           ;lcd_4bit.c: 85: {
  4406                           ;lcd_4bit.c: 86: case '\f':
  4407                           
  4408                           
  4409                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  4410  0962  01F2               	clrf	i1lcd_envia_byte@n
  4411  0963  0AF2               	incf	i1lcd_envia_byte@n,f
  4412  0964  3000               	movlw	0
  4413  0965  160A  118A  27D5  120A  158A  	fcall	i1_lcd_envia_byte
  4414                           
  4415                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  4416  096A  300D               	movlw	13
  4417  096B  00FA               	movwf	??i1_lcd_putc+1
  4418  096C  30FB               	movlw	251
  4419  096D  00F9               	movwf	??i1_lcd_putc
  4420  096E                     u408_27:	
  4421  096E  0BF9               	decfsz	??i1_lcd_putc,f
  4422  096F  296E               	goto	u408_27
  4423  0970  0BFA               	decfsz	??i1_lcd_putc+1,f
  4424  0971  296E               	goto	u408_27
  4425  0972  2973               	nop2
  4426                           
  4427                           ;lcd_4bit.c: 89: break;
  4428  0973  0008               	return
  4429  0974                     i1l2235:	
  4430                           ;lcd_4bit.c: 91: case '\n':
  4431                           
  4432                           
  4433                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  4434  0974  3002               	movlw	2
  4435  0975  00F9               	movwf	??i1_lcd_putc
  4436  0976  0879               	movf	??i1_lcd_putc,w
  4437  0977  00F5               	movwf	i1lcd_gotoxy@y
  4438  0978  3001               	movlw	1
  4439  0979  160A  118A  26B3   	fcall	i1_lcd_gotoxy
  4440                           
  4441                           ;lcd_4bit.c: 93: break;
  4442  097C  0008               	return
  4443  097D                     i1l2237:	
  4444                           ;lcd_4bit.c: 95: case '\b':
  4445                           
  4446                           
  4447                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  4448  097D  3010               	movlw	16
  4449  097E  00F9               	movwf	??i1_lcd_putc
  4450  097F  0879               	movf	??i1_lcd_putc,w
  4451  0980  00F2               	movwf	i1lcd_envia_byte@n
  4452  0981  3000               	movlw	0
  4453  0982  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4454                           
  4455                           ;lcd_4bit.c: 97: break;
  4456  0985  0008               	return
  4457  0986                     i1l2239:	
  4458                           ;lcd_4bit.c: 99: default:
  4459                           
  4460                           
  4461                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  4462  0986  087B               	movf	i1lcd_putc@c,w
  4463  0987  00F9               	movwf	??i1_lcd_putc
  4464  0988  0879               	movf	??i1_lcd_putc,w
  4465  0989  00F2               	movwf	i1lcd_envia_byte@n
  4466  098A  3001               	movlw	1
  4467  098B  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4468                           
  4469                           ;lcd_4bit.c: 102: }
  4470                           
  4471                           ;lcd_4bit.c: 101: break;
  4472  098E  0008               	return
  4473  098F                     i1l2243:	
  4474  098F  087B               	movf	i1lcd_putc@c,w
  4475                           
  4476                           ; Switch size 1, requested type "space"
  4477                           ; Number of cases is 3, Range of values is 8 to 12
  4478                           ; switch strategies available:
  4479                           ; Name         Instructions Cycles
  4480                           ; simple_byte           10     6 (average)
  4481                           ; direct_byte           26    11 (fixed)
  4482                           ; jumptable            263     9 (fixed)
  4483                           ;	Chosen strategy is simple_byte
  4484  0990  3A08               	xorlw	8	; case 8
  4485  0991  1903               	skipnz
  4486  0992  297D               	goto	i1l2237
  4487  0993  3A02               	xorlw	2	; case 10
  4488  0994  1903               	skipnz
  4489  0995  2974               	goto	i1l2235
  4490  0996  3A06               	xorlw	6	; case 12
  4491  0997  1903               	skipnz
  4492  0998  2962               	goto	i1l2231
  4493  0999  2986               	goto	i1l2239
  4494  099A  0008               	return
  4495  099B                     __end_ofi1_lcd_putc:	
  4496                           
  4497                           	psect	text23
  4498  16B3                     __ptext23:	
  4499 ;; *************** function i1_lcd_gotoxy *****************
  4500 ;; Defined at:
  4501 ;;		line 70 in file "lcd_4bit.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  x               1    wreg     unsigned char 
  4504 ;;  y               1    5[COMMON] unsigned char 
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;  x               1    7[COMMON] unsigned char 
  4507 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;		None               void
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, pclath, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4517 ;;      Params:         1       0       0       0       0
  4518 ;;      Locals:         2       0       0       0       0
  4519 ;;      Temps:          1       0       0       0       0
  4520 ;;      Totals:         4       0       0       0       0
  4521 ;;Total ram usage:        4 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    2
  4524 ;; This function calls:
  4525 ;;		i1_lcd_envia_byte
  4526 ;; This function is called by:
  4527 ;;		_ISR
  4528 ;;		i1_lcd_putc
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           
  4533                           ;psect for function i1_lcd_gotoxy
  4534  16B3                     i1_lcd_gotoxy:	
  4535                           
  4536                           ;incstack = 0
  4537 ;; hardware stack exceeded
  4538                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4539                           ;i1lcd_gotoxy@x stored from wreg
  4540  16B3  00F7               	movwf	i1lcd_gotoxy@x
  4541                           
  4542                           ;lcd_4bit.c: 72: unsigned char address;
  4543                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  4544  16B4  0875               	movf	i1lcd_gotoxy@y,w
  4545  16B5  3A01               	xorlw	1
  4546  16B6  1903               	skipnz
  4547  16B7  2EBD               	goto	i1l2019
  4548  16B8  3040               	movlw	64
  4549  16B9  00F6               	movwf	??i1_lcd_gotoxy
  4550  16BA  0876               	movf	??i1_lcd_gotoxy,w
  4551  16BB  00F8               	movwf	i1lcd_gotoxy@address
  4552  16BC  2EBE               	goto	i1l2021
  4553  16BD                     i1l2019:	
  4554                           
  4555                           ;lcd_4bit.c: 75: else address=0;
  4556  16BD  01F8               	clrf	i1lcd_gotoxy@address
  4557  16BE                     i1l2021:	
  4558                           
  4559                           ;lcd_4bit.c: 77: address += x-1;
  4560  16BE  0877               	movf	i1lcd_gotoxy@x,w
  4561  16BF  3EFF               	addlw	255
  4562  16C0  00F6               	movwf	??i1_lcd_gotoxy
  4563  16C1  0876               	movf	??i1_lcd_gotoxy,w
  4564  16C2  07F8               	addwf	i1lcd_gotoxy@address,f
  4565                           
  4566                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  4567  16C3  0878               	movf	i1lcd_gotoxy@address,w
  4568  16C4  3880               	iorlw	128
  4569  16C5  00F6               	movwf	??i1_lcd_gotoxy
  4570  16C6  0876               	movf	??i1_lcd_gotoxy,w
  4571  16C7  00F2               	movwf	i1lcd_envia_byte@n
  4572  16C8  3000               	movlw	0
  4573  16C9  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4574  16CC  0008               	return
  4575  16CD                     __end_ofi1_lcd_gotoxy:	
  4576                           
  4577                           	psect	text24
  4578  17D5                     __ptext24:	
  4579 ;; *************** function i1_lcd_envia_byte *****************
  4580 ;; Defined at:
  4581 ;;		line 53 in file "lcd_4bit.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  address         1    wreg     unsigned char 
  4584 ;;  n               1    2[COMMON] unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  address         1    4[COMMON] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;		None               void
  4589 ;; Registers used:
  4590 ;;		wreg, status,2, status,0, pclath, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4596 ;;      Params:         1       0       0       0       0
  4597 ;;      Locals:         1       0       0       0       0
  4598 ;;      Temps:          1       0       0       0       0
  4599 ;;      Totals:         3       0       0       0       0
  4600 ;;Total ram usage:        3 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    1
  4603 ;; This function calls:
  4604 ;;		i1_lcd_envia_nibble
  4605 ;; This function is called by:
  4606 ;;		i1_lcd_gotoxy
  4607 ;;		i1_lcd_putc
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           
  4612                           ;psect for function i1_lcd_envia_byte
  4613  17D5                     i1_lcd_envia_byte:	
  4614                           
  4615                           ;incstack = 0
  4616 ;; hardware stack exceeded
  4617                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  4618                           ;i1lcd_envia_byte@address stored from wreg
  4619  17D5  00F4               	movwf	i1lcd_envia_byte@address
  4620                           
  4621                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  4622  17D6  1283               	bcf	3,5	;RP0=0, select bank0
  4623  17D7  1303               	bcf	3,6	;RP1=0, select bank0
  4624  17D8  1286               	bcf	6,5	;volatile
  4625                           
  4626                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  4627  17D9  3063               	movlw	99
  4628  17DA  00F3               	movwf	??i1_lcd_envia_byte
  4629  17DB                     u409_27:	
  4630  17DB  0BF3               	decfsz	??i1_lcd_envia_byte,f
  4631  17DC  2FDB               	goto	u409_27
  4632  17DD  2FDE               	nop2	;nop
  4633                           
  4634                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  4635  17DE  0874               	movf	i1lcd_envia_byte@address,w
  4636  17DF  1903               	btfsc	3,2
  4637  17E0  2FE5               	goto	i1l203
  4638  17E1  1283               	bcf	3,5	;RP0=0, select bank0
  4639  17E2  1303               	bcf	3,6	;RP1=0, select bank0
  4640  17E3  1686               	bsf	6,5	;volatile
  4641  17E4  2FE8               	goto	i1l204
  4642  17E5                     i1l203:	
  4643                           
  4644                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  4645  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  4646  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  4647  17E7  1286               	bcf	6,5	;volatile
  4648  17E8                     i1l204:	
  4649                           
  4650                           ;lcd_4bit.c: 61: _delay(1);
  4651  17E8  0000               	nop
  4652                           
  4653                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  4654  17E9  1283               	bcf	3,5	;RP0=0, select bank0
  4655  17EA  1303               	bcf	3,6	;RP1=0, select bank0
  4656  17EB  1206               	bcf	6,4	;volatile
  4657                           
  4658                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  4659  17EC  0872               	movf	i1lcd_envia_byte@n,w
  4660  17ED  00F3               	movwf	??i1_lcd_envia_byte
  4661  17EE  3004               	movlw	4
  4662  17EF                     u199_25:	
  4663  17EF  1003               	clrc
  4664  17F0  0CF3               	rrf	??i1_lcd_envia_byte,f
  4665  17F1  3EFF               	addlw	-1
  4666  17F2  1D03               	skipz
  4667  17F3  2FEF               	goto	u199_25
  4668  17F4  0873               	movf	??i1_lcd_envia_byte,w
  4669  17F5  120A  158A  2127  160A  118A  	fcall	i1_lcd_envia_nibble
  4670                           
  4671                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  4672  17FA  0872               	movf	i1lcd_envia_byte@n,w
  4673  17FB  390F               	andlw	15
  4674  17FC  120A  158A  2127   	fcall	i1_lcd_envia_nibble
  4675  17FF  0008               	return
  4676  1800                     __end_ofi1_lcd_envia_byte:	
  4677                           
  4678                           	psect	text25
  4679  0927                     __ptext25:	
  4680 ;; *************** function i1_lcd_envia_nibble *****************
  4681 ;; Defined at:
  4682 ;;		line 39 in file "lcd_4bit.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  n               1    wreg     unsigned char 
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  n               1    1[COMMON] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;		None               void
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4696 ;;      Params:         0       0       0       0       0
  4697 ;;      Locals:         1       0       0       0       0
  4698 ;;      Temps:          1       0       0       0       0
  4699 ;;      Totals:         2       0       0       0       0
  4700 ;;Total ram usage:        2 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		i1_lcd_envia_byte
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function i1_lcd_envia_nibble
  4711  0927                     i1_lcd_envia_nibble:	
  4712                           
  4713                           ;incstack = 0
  4714 ;; hardware stack exceeded
  4715                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  4716                           ;i1lcd_envia_nibble@n stored from wreg
  4717  0927  00F1               	movwf	i1lcd_envia_nibble@n
  4718                           
  4719                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  4720  0928  3000               	movlw	0
  4721  0929  1871               	btfsc	i1lcd_envia_nibble@n,0
  4722  092A  3001               	movlw	1
  4723  092B  00F0               	movwf	??i1_lcd_envia_nibble
  4724  092C  1283               	bcf	3,5	;RP0=0, select bank0
  4725  092D  1303               	bcf	3,6	;RP1=0, select bank0
  4726  092E  0806               	movf	6,w	;volatile
  4727  092F  0670               	xorwf	??i1_lcd_envia_nibble,w
  4728  0930  39FE               	andlw	-2
  4729  0931  0670               	xorwf	??i1_lcd_envia_nibble,w
  4730  0932  0086               	movwf	6	;volatile
  4731                           
  4732                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  4733  0933  3000               	movlw	0
  4734  0934  18F1               	btfsc	i1lcd_envia_nibble@n,1
  4735  0935  3001               	movlw	1
  4736  0936  00F0               	movwf	??i1_lcd_envia_nibble
  4737  0937  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4738  0938  0806               	movf	6,w	;volatile
  4739  0939  0670               	xorwf	??i1_lcd_envia_nibble,w
  4740  093A  39FD               	andlw	-3
  4741  093B  0670               	xorwf	??i1_lcd_envia_nibble,w
  4742  093C  0086               	movwf	6	;volatile
  4743                           
  4744                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  4745  093D  3000               	movlw	0
  4746  093E  1971               	btfsc	i1lcd_envia_nibble@n,2
  4747  093F  3001               	movlw	1
  4748  0940  00F0               	movwf	??i1_lcd_envia_nibble
  4749  0941  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4750  0942  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4751  0943  0806               	movf	6,w	;volatile
  4752  0944  0670               	xorwf	??i1_lcd_envia_nibble,w
  4753  0945  39FB               	andlw	-5
  4754  0946  0670               	xorwf	??i1_lcd_envia_nibble,w
  4755  0947  0086               	movwf	6	;volatile
  4756                           
  4757                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  4758  0948  3000               	movlw	0
  4759  0949  19F1               	btfsc	i1lcd_envia_nibble@n,3
  4760  094A  3001               	movlw	1
  4761  094B  00F0               	movwf	??i1_lcd_envia_nibble
  4762  094C  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4763  094D  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4764  094E  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4765  094F  0806               	movf	6,w	;volatile
  4766  0950  0670               	xorwf	??i1_lcd_envia_nibble,w
  4767  0951  39F7               	andlw	-9
  4768  0952  0670               	xorwf	??i1_lcd_envia_nibble,w
  4769  0953  0086               	movwf	6	;volatile
  4770                           
  4771                           ;lcd_4bit.c: 46: _delay(1);
  4772  0954  0000               	nop
  4773                           
  4774                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  4775  0955  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0956  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0957  1606               	bsf	6,4	;volatile
  4778                           
  4779                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  4780  0958  3003               	movlw	3
  4781  0959  00F0               	movwf	??i1_lcd_envia_nibble
  4782  095A                     u410_27:	
  4783  095A  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  4784  095B  295A               	goto	u410_27
  4785                           
  4786                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  4787  095C  1283               	bcf	3,5	;RP0=0, select bank0
  4788  095D  1303               	bcf	3,6	;RP1=0, select bank0
  4789  095E  1206               	bcf	6,4	;volatile
  4790  095F  0008               	return
  4791  0960                     __end_ofi1_lcd_envia_nibble:	
  4792                           
  4793                           	psect	text26
  4794  0579                     __ptext26:	
  4795 ;; *************** function _ftoa *****************
  4796 ;; Defined at:
  4797 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  f               3   36[BANK0 ] float 
  4800 ;;  status          1   39[BANK0 ] PTR int 
  4801 ;;		 -> ISR@status(2), 
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  l               4   45[BANK0 ] unsigned long 
  4804 ;;  rem             4   41[BANK0 ] unsigned long 
  4805 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4806 ;;		 -> ftoa@buf(17), 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      PTR unsigned char 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4816 ;;      Params:         0       4       0       0       0
  4817 ;;      Locals:         0       9       0       0       0
  4818 ;;      Temps:          0       1       0       0       0
  4819 ;;      Totals:         0      14       0       0       0
  4820 ;;Total ram usage:       14 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    3
  4823 ;; This function calls:
  4824 ;;		___ftge
  4825 ;;		___ftmul
  4826 ;;		___ftneg
  4827 ;;		___ftsub
  4828 ;;		___fttol
  4829 ;;		___lltoft
  4830 ;;		_sprintf
  4831 ;; This function is called by:
  4832 ;;		_ISR
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _ftoa
  4838  0579                     _ftoa:	
  4839                           
  4840                           ;incstack = 0
  4841 ;; hardware stack exceeded
  4842                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4843  0579  30C4               	movlw	ftoa@buf& (0+255)
  4844  057A  1283               	bcf	3,5	;RP0=0, select bank0
  4845  057B  1303               	bcf	3,6	;RP1=0, select bank0
  4846  057C  00C8               	movwf	??_ftoa
  4847  057D  0848               	movf	??_ftoa,w
  4848  057E  00D1               	movwf	ftoa@cp
  4849  057F  0844               	movf	ftoa@f,w
  4850  0580  00F0               	movwf	___ftge@ff1
  4851  0581  0845               	movf	ftoa@f+1,w
  4852  0582  00F1               	movwf	___ftge@ff1+1
  4853  0583  0846               	movf	ftoa@f+2,w
  4854  0584  00F2               	movwf	___ftge@ff1+2
  4855  0585  3000               	movlw	0
  4856  0586  00F3               	movwf	___ftge@ff2
  4857  0587  3000               	movlw	0
  4858  0588  00F4               	movwf	___ftge@ff2+1
  4859  0589  3000               	movlw	0
  4860  058A  00F5               	movwf	___ftge@ff2+2
  4861  058B  120A  158A  2354  120A  118A  	fcall	___ftge
  4862  0590  1803               	btfsc	3,0
  4863  0591  2DB2               	goto	i1l2779
  4864  0592  302D               	movlw	45
  4865  0593  1283               	bcf	3,5	;RP0=0, select bank0
  4866  0594  1303               	bcf	3,6	;RP1=0, select bank0
  4867  0595  00C8               	movwf	??_ftoa
  4868  0596  0851               	movf	ftoa@cp,w
  4869  0597  0084               	movwf	4
  4870  0598  0848               	movf	??_ftoa,w
  4871  0599  1383               	bcf	3,7	;select IRP bank0
  4872  059A  0080               	movwf	0
  4873  059B  3001               	movlw	1
  4874  059C  00C8               	movwf	??_ftoa
  4875  059D  0848               	movf	??_ftoa,w
  4876  059E  07D1               	addwf	ftoa@cp,f
  4877  059F  0844               	movf	ftoa@f,w
  4878  05A0  00F0               	movwf	___ftneg@f1
  4879  05A1  0845               	movf	ftoa@f+1,w
  4880  05A2  00F1               	movwf	___ftneg@f1+1
  4881  05A3  0846               	movf	ftoa@f+2,w
  4882  05A4  00F2               	movwf	___ftneg@f1+2
  4883  05A5  160A  118A  2649  120A  118A  	fcall	___ftneg
  4884  05AA  0870               	movf	?___ftneg,w
  4885  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  4886  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  4887  05AD  00C4               	movwf	ftoa@f
  4888  05AE  0871               	movf	?___ftneg+1,w
  4889  05AF  00C5               	movwf	ftoa@f+1
  4890  05B0  0872               	movf	?___ftneg+2,w
  4891  05B1  00C6               	movwf	ftoa@f+2
  4892  05B2                     i1l2779:	
  4893  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  4894  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  4895  05B4  0844               	movf	ftoa@f,w
  4896  05B5  00B0               	movwf	___fttol@f1
  4897  05B6  0845               	movf	ftoa@f+1,w
  4898  05B7  00B1               	movwf	___fttol@f1+1
  4899  05B8  0846               	movf	ftoa@f+2,w
  4900  05B9  00B2               	movwf	___fttol@f1+2
  4901  05BA  120A  158A  2640  120A  118A  	fcall	___fttol
  4902  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  4903  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  4904  05C1  0833               	movf	?___fttol+3,w
  4905  05C2  00D0               	movwf	ftoa@l+3
  4906  05C3  0832               	movf	?___fttol+2,w
  4907  05C4  00CF               	movwf	ftoa@l+2
  4908  05C5  0831               	movf	?___fttol+1,w
  4909  05C6  00CE               	movwf	ftoa@l+1
  4910  05C7  0830               	movf	?___fttol,w
  4911  05C8  00CD               	movwf	ftoa@l
  4912  05C9  0850               	movf	ftoa@l+3,w
  4913  05CA  00FB               	movwf	___lltoft@c+3
  4914  05CB  084F               	movf	ftoa@l+2,w
  4915  05CC  00FA               	movwf	___lltoft@c+2
  4916  05CD  084E               	movf	ftoa@l+1,w
  4917  05CE  00F9               	movwf	___lltoft@c+1
  4918  05CF  084D               	movf	ftoa@l,w
  4919  05D0  00F8               	movwf	___lltoft@c
  4920  05D1  160A  118A  27AA  120A  118A  	fcall	___lltoft
  4921  05D6  0878               	movf	?___lltoft,w
  4922  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  4923  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  4924  05D9  00A7               	movwf	___ftsub@f2
  4925  05DA  0879               	movf	?___lltoft+1,w
  4926  05DB  00A8               	movwf	___ftsub@f2+1
  4927  05DC  087A               	movf	?___lltoft+2,w
  4928  05DD  00A9               	movwf	___ftsub@f2+2
  4929  05DE  0844               	movf	ftoa@f,w
  4930  05DF  00AA               	movwf	___ftsub@f1
  4931  05E0  0845               	movf	ftoa@f+1,w
  4932  05E1  00AB               	movwf	___ftsub@f1+1
  4933  05E2  0846               	movf	ftoa@f+2,w
  4934  05E3  00AC               	movwf	___ftsub@f1+2
  4935  05E4  160A  118A  26E8  120A  118A  	fcall	___ftsub
  4936  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  4937  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  4938  05EB  0827               	movf	?___ftsub,w
  4939  05EC  00C4               	movwf	ftoa@f
  4940  05ED  0828               	movf	?___ftsub+1,w
  4941  05EE  00C5               	movwf	ftoa@f+1
  4942  05EF  0829               	movf	?___ftsub+2,w
  4943  05F0  00C6               	movwf	ftoa@f+2
  4944  05F1  0844               	movf	ftoa@f,w
  4945  05F2  00A3               	movwf	___ftmul@f2
  4946  05F3  0845               	movf	ftoa@f+1,w
  4947  05F4  00A4               	movwf	___ftmul@f2+1
  4948  05F5  0846               	movf	ftoa@f+2,w
  4949  05F6  00A5               	movwf	___ftmul@f2+2
  4950  05F7  3024               	movlw	36
  4951  05F8  00A0               	movwf	___ftmul@f1
  4952  05F9  3074               	movlw	116
  4953  05FA  00A1               	movwf	___ftmul@f1+1
  4954  05FB  3049               	movlw	73
  4955  05FC  00A2               	movwf	___ftmul@f1+2
  4956  05FD  120A  118A  24A6  120A  118A  	fcall	___ftmul
  4957  0602  1283               	bcf	3,5	;RP0=0, select bank0
  4958  0603  1303               	bcf	3,6	;RP1=0, select bank0
  4959  0604  0820               	movf	?___ftmul,w
  4960  0605  00B0               	movwf	___fttol@f1
  4961  0606  0821               	movf	?___ftmul+1,w
  4962  0607  00B1               	movwf	___fttol@f1+1
  4963  0608  0822               	movf	?___ftmul+2,w
  4964  0609  00B2               	movwf	___fttol@f1+2
  4965  060A  120A  158A  2640  120A  118A  	fcall	___fttol
  4966  060F  1283               	bcf	3,5	;RP0=0, select bank0
  4967  0610  1303               	bcf	3,6	;RP1=0, select bank0
  4968  0611  0833               	movf	?___fttol+3,w
  4969  0612  00CC               	movwf	ftoa@rem+3
  4970  0613  0832               	movf	?___fttol+2,w
  4971  0614  00CB               	movwf	ftoa@rem+2
  4972  0615  0831               	movf	?___fttol+1,w
  4973  0616  00CA               	movwf	ftoa@rem+1
  4974  0617  0830               	movf	?___fttol,w
  4975  0618  00C9               	movwf	ftoa@rem
  4976  0619  306B               	movlw	(STR_5-__stringbase)& (0+255)
  4977  061A  00C8               	movwf	??_ftoa
  4978  061B  0848               	movf	??_ftoa,w
  4979  061C  00AA               	movwf	sprintf@f
  4980  061D  0850               	movf	ftoa@l+3,w
  4981  061E  00AE               	movwf	?_sprintf+4
  4982  061F  084F               	movf	ftoa@l+2,w
  4983  0620  00AD               	movwf	?_sprintf+3
  4984  0621  084E               	movf	ftoa@l+1,w
  4985  0622  00AC               	movwf	?_sprintf+2
  4986  0623  084D               	movf	ftoa@l,w
  4987  0624  00AB               	movwf	?_sprintf+1
  4988  0625  084C               	movf	ftoa@rem+3,w
  4989  0626  00B2               	movwf	?_sprintf+8
  4990  0627  084B               	movf	ftoa@rem+2,w
  4991  0628  00B1               	movwf	?_sprintf+7
  4992  0629  084A               	movf	ftoa@rem+1,w
  4993  062A  00B0               	movwf	?_sprintf+6
  4994  062B  0849               	movf	ftoa@rem,w
  4995  062C  00AF               	movwf	?_sprintf+5
  4996  062D  0851               	movf	ftoa@cp,w
  4997  062E  120A  118A  2035   	fcall	_sprintf
  4998  0631  30C4               	movlw	ftoa@buf& (0+255)
  4999  0632  0008               	return
  5000  0633                     __end_of_ftoa:	
  5001                           
  5002                           	psect	text27
  5003  0035                     __ptext27:	
  5004 ;; *************** function _sprintf *****************
  5005 ;; Defined at:
  5006 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\doprnt.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  sp              1    wreg     PTR unsigned char 
  5009 ;;		 -> ftoa@buf(17), 
  5010 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  5011 ;;		 -> STR_5(11), 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  5014 ;;		 -> ftoa@buf(17), 
  5015 ;;  _val            4   26[BANK0 ] struct .
  5016 ;;  prec            2   33[BANK0 ] int 
  5017 ;;  width           2   31[BANK0 ] int 
  5018 ;;  c               1   35[BANK0 ] char 
  5019 ;;  ap              1   25[BANK0 ] PTR void [1]
  5020 ;;		 -> ?_sprintf(2), 
  5021 ;;  flag            1   24[BANK0 ] unsigned char 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  2   10[BANK0 ] int 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5031 ;;      Params:         0       9       0       0       0
  5032 ;;      Locals:         0      12       0       0       0
  5033 ;;      Temps:          0       5       0       0       0
  5034 ;;      Totals:         0      26       0       0       0
  5035 ;;Total ram usage:       26 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    1
  5038 ;; This function calls:
  5039 ;;		___lldiv
  5040 ;;		___llmod
  5041 ;;		___wmul
  5042 ;;		_isdigit
  5043 ;; This function is called by:
  5044 ;;		_ftoa
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _sprintf
  5050  0035                     _sprintf:	
  5051                           
  5052                           ;incstack = 0
  5053 ;; hardware stack exceeded
  5054                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5055                           ;sprintf@sp stored from wreg
  5056  0035  1283               	bcf	3,5	;RP0=0, select bank0
  5057  0036  1303               	bcf	3,6	;RP1=0, select bank0
  5058  0037  00BE               	movwf	sprintf@sp
  5059                           
  5060                           ;doprnt.c: 494: va_list ap;
  5061                           ;doprnt.c: 499: signed char c;
  5062                           ;doprnt.c: 501: int width;
  5063                           ;doprnt.c: 504: int prec;
  5064                           ;doprnt.c: 508: unsigned char flag;
  5065                           ;doprnt.c: 527: union {
  5066                           ;doprnt.c: 528: unsigned long _val;
  5067                           ;doprnt.c: 529: struct {
  5068                           ;doprnt.c: 530: const char * _cp;
  5069                           ;doprnt.c: 531: unsigned _len;
  5070                           ;doprnt.c: 532: } _str;
  5071                           ;doprnt.c: 533: } _val;
  5072                           ;doprnt.c: 542: *ap = __va_start();
  5073  0038  302B               	movlw	(?_sprintf+1)& (0+255)
  5074  0039  00B3               	movwf	??_sprintf
  5075  003A  0833               	movf	??_sprintf,w
  5076  003B  00B9               	movwf	sprintf@ap
  5077  003C                     i1l2491:	
  5078                           ;doprnt.c: 545: while(c = *f++) {
  5079                           
  5080  003C  3001               	movlw	1
  5081  003D  07AA               	addwf	sprintf@f,f
  5082  003E  30FF               	movlw	-1
  5083  003F  072A               	addwf	sprintf@f,w
  5084  0040  0084               	movwf	4
  5085  0041  120A  158A  200A  120A  118A  	fcall	stringdir
  5086  0046  00B3               	movwf	??_sprintf
  5087  0047  0833               	movf	??_sprintf,w
  5088  0048  00C3               	movwf	sprintf@c
  5089  0049  08C3               	movf	sprintf@c,f
  5090  004A  1903               	btfsc	3,2
  5091  004B  2A6C               	goto	i1l2493
  5092                           
  5093                           ;doprnt.c: 547: if(c != '%')
  5094  004C  0843               	movf	sprintf@c,w
  5095  004D  3A25               	xorlw	37
  5096  004E  1903               	skipnz
  5097  004F  285C               	goto	i1l2401
  5098                           
  5099                           ;doprnt.c: 549: {
  5100                           ;doprnt.c: 550: ((*sp++ = (c)));
  5101  0050  0843               	movf	sprintf@c,w
  5102  0051  00B3               	movwf	??_sprintf
  5103  0052  083E               	movf	sprintf@sp,w
  5104  0053  0084               	movwf	4
  5105  0054  0833               	movf	??_sprintf,w
  5106  0055  1383               	bcf	3,7	;select IRP bank0
  5107  0056  0080               	movwf	0
  5108  0057  3001               	movlw	1
  5109  0058  00B3               	movwf	??_sprintf
  5110  0059  0833               	movf	??_sprintf,w
  5111  005A  07BE               	addwf	sprintf@sp,f
  5112                           
  5113                           ;doprnt.c: 551: continue;
  5114  005B  283C               	goto	i1l2491
  5115  005C                     i1l2401:	
  5116                           
  5117                           ;doprnt.c: 552: }
  5118                           ;doprnt.c: 555: width = 0;
  5119  005C  01BF               	clrf	sprintf@width
  5120  005D  01C0               	clrf	sprintf@width+1
  5121                           
  5122                           ;doprnt.c: 557: flag = 0;
  5123  005E  01B8               	clrf	sprintf@flag
  5124                           
  5125                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5126  005F  082A               	movf	sprintf@f,w
  5127  0060  0084               	movwf	4
  5128  0061  120A  158A  200A  120A  118A  	fcall	stringdir
  5129  0066  160A  118A  2671  120A  118A  	fcall	_isdigit
  5130  006B  1C03               	btfss	3,0
  5131  006C  28AF               	goto	i1l2415
  5132                           
  5133                           ;doprnt.c: 607: width = 0;
  5134  006D  1283               	bcf	3,5	;RP0=0, select bank0
  5135  006E  1303               	bcf	3,6	;RP1=0, select bank0
  5136  006F  01BF               	clrf	sprintf@width
  5137  0070  01C0               	clrf	sprintf@width+1
  5138  0071                     i1l2407:	
  5139                           ;doprnt.c: 608: do {
  5140                           
  5141                           
  5142                           ;doprnt.c: 609: width *= 10;
  5143  0071  300A               	movlw	10
  5144  0072  00F0               	movwf	___wmul@multiplier
  5145  0073  3000               	movlw	0
  5146  0074  00F1               	movwf	___wmul@multiplier+1
  5147  0075  1283               	bcf	3,5	;RP0=0, select bank0
  5148  0076  1303               	bcf	3,6	;RP1=0, select bank0
  5149  0077  0840               	movf	sprintf@width+1,w
  5150  0078  01F3               	clrf	___wmul@multiplicand+1
  5151  0079  07F3               	addwf	___wmul@multiplicand+1,f
  5152  007A  083F               	movf	sprintf@width,w
  5153  007B  01F2               	clrf	___wmul@multiplicand
  5154  007C  07F2               	addwf	___wmul@multiplicand,f
  5155  007D  160A  118A  2764  120A  118A  	fcall	___wmul
  5156  0082  0871               	movf	?___wmul+1,w
  5157  0083  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0084  1303               	bcf	3,6	;RP1=0, select bank0
  5159  0085  01C0               	clrf	sprintf@width+1
  5160  0086  07C0               	addwf	sprintf@width+1,f
  5161  0087  0870               	movf	?___wmul,w
  5162  0088  01BF               	clrf	sprintf@width
  5163  0089  07BF               	addwf	sprintf@width,f
  5164                           
  5165                           ;doprnt.c: 610: width += *f++ - '0';
  5166  008A  082A               	movf	sprintf@f,w
  5167  008B  0084               	movwf	4
  5168  008C  120A  158A  200A  120A  118A  	fcall	stringdir
  5169  0091  3ED0               	addlw	208
  5170  0092  00B3               	movwf	??_sprintf
  5171  0093  30FF               	movlw	255
  5172  0094  1803               	skipnc
  5173  0095  3000               	movlw	0
  5174  0096  00B4               	movwf	??_sprintf+1
  5175  0097  0833               	movf	??_sprintf,w
  5176  0098  07BF               	addwf	sprintf@width,f
  5177  0099  1803               	skipnc
  5178  009A  0AC0               	incf	sprintf@width+1,f
  5179  009B  0834               	movf	??_sprintf+1,w
  5180  009C  07C0               	addwf	sprintf@width+1,f
  5181  009D  3001               	movlw	1
  5182  009E  00B3               	movwf	??_sprintf
  5183  009F  0833               	movf	??_sprintf,w
  5184  00A0  07AA               	addwf	sprintf@f,f
  5185                           
  5186                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5187  00A1  082A               	movf	sprintf@f,w
  5188  00A2  0084               	movwf	4
  5189  00A3  120A  158A  200A  120A  118A  	fcall	stringdir
  5190  00A8  160A  118A  2671  120A  118A  	fcall	_isdigit
  5191  00AD  1803               	btfsc	3,0
  5192  00AE  2871               	goto	i1l2407
  5193  00AF                     i1l2415:	
  5194                           
  5195                           ;doprnt.c: 617: }
  5196                           ;doprnt.c: 620: if(*f == '.') {
  5197  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  5198  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  5199  00B1  082A               	movf	sprintf@f,w
  5200  00B2  0084               	movwf	4
  5201  00B3  120A  158A  200A  120A  118A  	fcall	stringdir
  5202  00B8  3A2E               	xorlw	46
  5203  00B9  1D03               	skipz
  5204  00BA  28FD               	goto	i1l2427
  5205                           
  5206                           ;doprnt.c: 622: f++;
  5207  00BB  3001               	movlw	1
  5208  00BC  00B3               	movwf	??_sprintf
  5209  00BD  0833               	movf	??_sprintf,w
  5210  00BE  07AA               	addwf	sprintf@f,f
  5211                           
  5212                           ;doprnt.c: 629: {
  5213                           ;doprnt.c: 630: prec = 0;
  5214  00BF  01C1               	clrf	sprintf@prec
  5215  00C0  01C2               	clrf	sprintf@prec+1
  5216  00C1                     i1l2425:	
  5217                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5218                           
  5219  00C1  082A               	movf	sprintf@f,w
  5220  00C2  0084               	movwf	4
  5221  00C3  120A  158A  200A  120A  118A  	fcall	stringdir
  5222  00C8  160A  118A  2671  120A  118A  	fcall	_isdigit
  5223  00CD  1C03               	btfss	3,0
  5224  00CE  2909               	goto	i1l2433
  5225                           
  5226                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5227  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  5228  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  5229  00D1  0842               	movf	sprintf@prec+1,w
  5230  00D2  01F1               	clrf	___wmul@multiplier+1
  5231  00D3  07F1               	addwf	___wmul@multiplier+1,f
  5232  00D4  0841               	movf	sprintf@prec,w
  5233  00D5  01F0               	clrf	___wmul@multiplier
  5234  00D6  07F0               	addwf	___wmul@multiplier,f
  5235  00D7  300A               	movlw	10
  5236  00D8  00F2               	movwf	___wmul@multiplicand
  5237  00D9  3000               	movlw	0
  5238  00DA  00F3               	movwf	___wmul@multiplicand+1
  5239  00DB  160A  118A  2764  120A  118A  	fcall	___wmul
  5240  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  5241  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  5242  00E2  082A               	movf	sprintf@f,w
  5243  00E3  0084               	movwf	4
  5244  00E4  120A  158A  200A  120A  118A  	fcall	stringdir
  5245  00E9  0770               	addwf	?___wmul,w
  5246  00EA  00B3               	movwf	??_sprintf
  5247  00EB  3000               	movlw	0
  5248  00EC  1803               	skipnc
  5249  00ED  3001               	movlw	1
  5250  00EE  0771               	addwf	?___wmul+1,w
  5251  00EF  00B4               	movwf	??_sprintf+1
  5252  00F0  0833               	movf	??_sprintf,w
  5253  00F1  3ED0               	addlw	208
  5254  00F2  00C1               	movwf	sprintf@prec
  5255  00F3  0834               	movf	??_sprintf+1,w
  5256  00F4  1803               	skipnc
  5257  00F5  3E01               	addlw	1
  5258  00F6  3EFF               	addlw	255
  5259  00F7  00C2               	movwf	sprintf@prec+1
  5260  00F8  3001               	movlw	1
  5261  00F9  00B3               	movwf	??_sprintf
  5262  00FA  0833               	movf	??_sprintf,w
  5263  00FB  07AA               	addwf	sprintf@f,f
  5264  00FC  28C1               	goto	i1l2425
  5265  00FD                     i1l2427:	
  5266                           ;doprnt.c: 633: }
  5267                           ;doprnt.c: 634: } else {
  5268                           
  5269                           
  5270                           ;doprnt.c: 635: prec = 0;
  5271  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  5272  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  5273  00FF  01C1               	clrf	sprintf@prec
  5274  0100  01C2               	clrf	sprintf@prec+1
  5275                           
  5276                           ;doprnt.c: 644: switch(c = *f++) {
  5277                           
  5278                           ;doprnt.c: 639: }
  5279                           ;doprnt.c: 642: loop:
  5280  0101  2909               	goto	i1l2433
  5281  0102                     i1l283:	
  5282                           ;doprnt.c: 650: case 'l':
  5283                           
  5284                           ;doprnt.c: 647: goto alldone;
  5285                           
  5286                           ;doprnt.c: 646: case 0:
  5287                           
  5288                           
  5289                           ;doprnt.c: 652: flag |= 0x10;
  5290  0102  1638               	bsf	sprintf@flag,4
  5291                           
  5292                           ;doprnt.c: 653: goto loop;
  5293  0103  2909               	goto	i1l2433
  5294  0104                     i1l2429:	
  5295                           ;doprnt.c: 826: case 'u':
  5296                           
  5297                           ;doprnt.c: 822: continue;
  5298                           
  5299                           ;doprnt.c: 811: default:
  5300                           
  5301                           
  5302                           ;doprnt.c: 827: flag |= 0xC0;
  5303  0104  30C0               	movlw	192
  5304  0105  00B3               	movwf	??_sprintf
  5305  0106  0833               	movf	??_sprintf,w
  5306  0107  04B8               	iorwf	sprintf@flag,f
  5307                           
  5308                           ;doprnt.c: 831: }
  5309                           
  5310                           ;doprnt.c: 828: break;
  5311  0108  2920               	goto	i1l286
  5312  0109                     i1l2433:	
  5313  0109  3001               	movlw	1
  5314  010A  1283               	bcf	3,5	;RP0=0, select bank0
  5315  010B  1303               	bcf	3,6	;RP1=0, select bank0
  5316  010C  07AA               	addwf	sprintf@f,f
  5317  010D  30FF               	movlw	-1
  5318  010E  072A               	addwf	sprintf@f,w
  5319  010F  0084               	movwf	4
  5320  0110  120A  158A  200A  120A  118A  	fcall	stringdir
  5321  0115  00C3               	movwf	sprintf@c
  5322                           
  5323                           ; Switch size 1, requested type "space"
  5324                           ; Number of cases is 3, Range of values is 0 to 117
  5325                           ; switch strategies available:
  5326                           ; Name         Instructions Cycles
  5327                           ; simple_byte           10     6 (average)
  5328                           ; jumptable            260     6 (fixed)
  5329                           ;	Chosen strategy is simple_byte
  5330  0116  3A00               	xorlw	0	; case 0
  5331  0117  1903               	skipnz
  5332  0118  2A6C               	goto	i1l2493
  5333  0119  3A6C               	xorlw	108	; case 108
  5334  011A  1903               	skipnz
  5335  011B  2902               	goto	i1l283
  5336  011C  3A19               	xorlw	25	; case 117
  5337  011D  1903               	skipnz
  5338  011E  2904               	goto	i1l2429
  5339  011F  283C               	goto	i1l2491
  5340  0120                     i1l286:	
  5341                           
  5342                           ;doprnt.c: 1282: {
  5343                           ;doprnt.c: 1290: if(flag & 0x10)
  5344  0120  1E38               	btfss	sprintf@flag,4
  5345  0121  2932               	goto	i1l2439
  5346                           
  5347                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  5348  0122  0839               	movf	sprintf@ap,w
  5349  0123  0084               	movwf	4
  5350  0124  1383               	bcf	3,7	;select IRP bank0
  5351  0125  0800               	movf	0,w
  5352  0126  00BA               	movwf	sprintf@_val
  5353  0127  0A84               	incf	4,f
  5354  0128  0800               	movf	0,w
  5355  0129  00BB               	movwf	sprintf@_val+1
  5356  012A  0A84               	incf	4,f
  5357  012B  0800               	movf	0,w
  5358  012C  00BC               	movwf	sprintf@_val+2
  5359  012D  0A84               	incf	4,f
  5360  012E  0800               	movf	0,w
  5361  012F  00BD               	movwf	sprintf@_val+3
  5362  0130  3004               	movlw	4
  5363  0131  2941               	goto	L4
  5364  0132                     i1l2439:	
  5365                           
  5366                           ;doprnt.c: 1292: else
  5367                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5368  0132  0839               	movf	sprintf@ap,w
  5369  0133  0084               	movwf	4
  5370  0134  1383               	bcf	3,7	;select IRP bank0
  5371  0135  0800               	movf	0,w
  5372  0136  00B3               	movwf	??_sprintf
  5373  0137  0A84               	incf	4,f
  5374  0138  0800               	movf	0,w
  5375  0139  00B4               	movwf	??_sprintf+1
  5376  013A  0833               	movf	??_sprintf,w
  5377  013B  00BA               	movwf	sprintf@_val
  5378  013C  0834               	movf	??_sprintf+1,w
  5379  013D  00BB               	movwf	sprintf@_val+1
  5380  013E  01BC               	clrf	sprintf@_val+2
  5381  013F  01BD               	clrf	sprintf@_val+3
  5382  0140  3002               	movlw	2
  5383  0141                     L4:	
  5384  0141  00B3               	movwf	??_sprintf
  5385  0142  0833               	movf	??_sprintf,w
  5386  0143  07B9               	addwf	sprintf@ap,f
  5387                           
  5388                           ;doprnt.c: 1296: }
  5389                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  5390  0144  0842               	movf	sprintf@prec+1,w
  5391  0145  0441               	iorwf	sprintf@prec,w
  5392  0146  1D03               	skipz
  5393  0147  2954               	goto	i1l2449
  5394  0148  083D               	movf	sprintf@_val+3,w
  5395  0149  043C               	iorwf	sprintf@_val+2,w
  5396  014A  043B               	iorwf	sprintf@_val+1,w
  5397  014B  043A               	iorwf	sprintf@_val,w
  5398  014C  1D03               	skipz
  5399  014D  2954               	goto	i1l2449
  5400                           
  5401                           ;doprnt.c: 1300: prec++;
  5402  014E  3001               	movlw	1
  5403  014F  07C1               	addwf	sprintf@prec,f
  5404  0150  1803               	skipnc
  5405  0151  0AC2               	incf	sprintf@prec+1,f
  5406  0152  3000               	movlw	0
  5407  0153  07C2               	addwf	sprintf@prec+1,f
  5408  0154                     i1l2449:	
  5409                           
  5410                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5411  0154  01C3               	clrf	sprintf@c
  5412  0155  0AC3               	incf	sprintf@c,f
  5413  0156  0843               	movf	sprintf@c,w
  5414  0157  3A0A               	xorlw	10
  5415  0158  1903               	btfsc	3,2
  5416  0159  2996               	goto	i1l2461
  5417  015A                     i1l2453:	
  5418                           
  5419                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5420  015A  0843               	movf	sprintf@c,w
  5421  015B  00B3               	movwf	??_sprintf
  5422  015C  3001               	movlw	1
  5423  015D                     u293_25:	
  5424  015D  1003               	clrc
  5425  015E  0DB3               	rlf	??_sprintf,f
  5426  015F  3EFF               	addlw	-1
  5427  0160  1D03               	skipz
  5428  0161  295D               	goto	u293_25
  5429  0162  1003               	clrc
  5430  0163  0D33               	rlf	??_sprintf,w
  5431  0164  3E01               	addlw	low (_dpowers-__stringbase)
  5432  0165  0084               	movwf	4
  5433  0166  120A  158A  200A  120A  118A  	fcall	stringdir
  5434  016B  00B4               	movwf	??_sprintf+1
  5435  016C  120A  158A  200A  120A  118A  	fcall	stringdir
  5436  0171  00B5               	movwf	??_sprintf+2
  5437  0172  120A  158A  200A  120A  118A  	fcall	stringdir
  5438  0177  00B6               	movwf	??_sprintf+3
  5439  0178  120A  158A  200A  120A  118A  	fcall	stringdir
  5440  017D  00B7               	movwf	??_sprintf+4
  5441  017E  0837               	movf	??_sprintf+4,w
  5442  017F  023D               	subwf	sprintf@_val+3,w
  5443  0180  1D03               	skipz
  5444  0181  298C               	goto	u294_25
  5445  0182  0836               	movf	??_sprintf+3,w
  5446  0183  023C               	subwf	sprintf@_val+2,w
  5447  0184  1D03               	skipz
  5448  0185  298C               	goto	u294_25
  5449  0186  0835               	movf	??_sprintf+2,w
  5450  0187  023B               	subwf	sprintf@_val+1,w
  5451  0188  1D03               	skipz
  5452  0189  298C               	goto	u294_25
  5453  018A  0834               	movf	??_sprintf+1,w
  5454  018B  023A               	subwf	sprintf@_val,w
  5455  018C                     u294_25:	
  5456  018C  1C03               	btfss	3,0
  5457  018D  2996               	goto	i1l2461
  5458                           
  5459                           ;doprnt.c: 1316: break;
  5460  018E  3001               	movlw	1
  5461  018F  00B3               	movwf	??_sprintf
  5462  0190  0833               	movf	??_sprintf,w
  5463  0191  07C3               	addwf	sprintf@c,f
  5464  0192  0843               	movf	sprintf@c,w
  5465  0193  3A0A               	xorlw	10
  5466  0194  1D03               	skipz
  5467  0195  295A               	goto	i1l2453
  5468  0196                     i1l2461:	
  5469                           
  5470                           ;doprnt.c: 1348: if(c < prec)
  5471  0196  0843               	movf	sprintf@c,w
  5472  0197  00B3               	movwf	??_sprintf
  5473  0198  01B4               	clrf	??_sprintf+1
  5474  0199  1BB3               	btfsc	??_sprintf,7
  5475  019A  03B4               	decf	??_sprintf+1,f
  5476  019B  0834               	movf	??_sprintf+1,w
  5477  019C  3A80               	xorlw	128
  5478  019D  00B5               	movwf	??_sprintf+2
  5479  019E  0842               	movf	sprintf@prec+1,w
  5480  019F  3A80               	xorlw	128
  5481  01A0  0235               	subwf	??_sprintf+2,w
  5482  01A1  1D03               	skipz
  5483  01A2  29A5               	goto	u296_25
  5484  01A3  0841               	movf	sprintf@prec,w
  5485  01A4  0233               	subwf	??_sprintf,w
  5486  01A5                     u296_25:	
  5487  01A5  1803               	skipnc
  5488  01A6  29AE               	goto	i1l2465
  5489                           
  5490                           ;doprnt.c: 1349: c = prec;
  5491  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  5492  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  5493  01A9  0841               	movf	sprintf@prec,w
  5494  01AA  00B3               	movwf	??_sprintf
  5495  01AB  0833               	movf	??_sprintf,w
  5496  01AC  00C3               	movwf	sprintf@c
  5497  01AD  29C8               	goto	i1l2469
  5498  01AE                     i1l2465:	
  5499                           
  5500                           ;doprnt.c: 1350: else if(prec < c)
  5501  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  5502  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  5503  01B0  0843               	movf	sprintf@c,w
  5504  01B1  00B3               	movwf	??_sprintf
  5505  01B2  01B4               	clrf	??_sprintf+1
  5506  01B3  1BB3               	btfsc	??_sprintf,7
  5507  01B4  03B4               	decf	??_sprintf+1,f
  5508  01B5  0842               	movf	sprintf@prec+1,w
  5509  01B6  3A80               	xorlw	128
  5510  01B7  00B5               	movwf	??_sprintf+2
  5511  01B8  0834               	movf	??_sprintf+1,w
  5512  01B9  3A80               	xorlw	128
  5513  01BA  0235               	subwf	??_sprintf+2,w
  5514  01BB  1D03               	skipz
  5515  01BC  29BF               	goto	u297_25
  5516  01BD  0833               	movf	??_sprintf,w
  5517  01BE  0241               	subwf	sprintf@prec,w
  5518  01BF                     u297_25:	
  5519  01BF  1803               	skipnc
  5520  01C0  29C8               	goto	i1l2469
  5521                           
  5522                           ;doprnt.c: 1351: prec = c;
  5523  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  5524  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  5525  01C3  0843               	movf	sprintf@c,w
  5526  01C4  00C1               	movwf	sprintf@prec
  5527  01C5  01C2               	clrf	sprintf@prec+1
  5528  01C6  1BC1               	btfsc	sprintf@prec,7
  5529  01C7  03C2               	decf	sprintf@prec+1,f
  5530  01C8                     i1l2469:	
  5531                           
  5532                           ;doprnt.c: 1390: if(width > c)
  5533  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  5534  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  5535  01CA  0843               	movf	sprintf@c,w
  5536  01CB  00B3               	movwf	??_sprintf
  5537  01CC  01B4               	clrf	??_sprintf+1
  5538  01CD  1BB3               	btfsc	??_sprintf,7
  5539  01CE  03B4               	decf	??_sprintf+1,f
  5540  01CF  0834               	movf	??_sprintf+1,w
  5541  01D0  3A80               	xorlw	128
  5542  01D1  00B5               	movwf	??_sprintf+2
  5543  01D2  0840               	movf	sprintf@width+1,w
  5544  01D3  3A80               	xorlw	128
  5545  01D4  0235               	subwf	??_sprintf+2,w
  5546  01D5  1D03               	skipz
  5547  01D6  29D9               	goto	u298_25
  5548  01D7  083F               	movf	sprintf@width,w
  5549  01D8  0233               	subwf	??_sprintf,w
  5550  01D9                     u298_25:	
  5551  01D9  1803               	skipnc
  5552  01DA  29E9               	goto	i1l2473
  5553                           
  5554                           ;doprnt.c: 1391: width -= c;
  5555  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  5556  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  5557  01DD  0843               	movf	sprintf@c,w
  5558  01DE  00B3               	movwf	??_sprintf
  5559  01DF  01B4               	clrf	??_sprintf+1
  5560  01E0  1BB3               	btfsc	??_sprintf,7
  5561  01E1  03B4               	decf	??_sprintf+1,f
  5562  01E2  0833               	movf	??_sprintf,w
  5563  01E3  02BF               	subwf	sprintf@width,f
  5564  01E4  0834               	movf	??_sprintf+1,w
  5565  01E5  1C03               	skipc
  5566  01E6  03C0               	decf	sprintf@width+1,f
  5567  01E7  02C0               	subwf	sprintf@width+1,f
  5568  01E8  29ED               	goto	i1l2475
  5569  01E9                     i1l2473:	
  5570                           
  5571                           ;doprnt.c: 1392: else
  5572                           ;doprnt.c: 1393: width = 0;
  5573  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  5574  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  5575  01EB  01BF               	clrf	sprintf@width
  5576  01EC  01C0               	clrf	sprintf@width+1
  5577  01ED                     i1l2475:	
  5578                           
  5579                           ;doprnt.c: 1431: {
  5580                           ;doprnt.c: 1433: if(width
  5581                           ;doprnt.c: 1437: )
  5582  01ED  0840               	movf	sprintf@width+1,w
  5583  01EE  043F               	iorwf	sprintf@width,w
  5584  01EF  1903               	skipnz
  5585  01F0  2A5D               	goto	i1l2489
  5586                           
  5587                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  5588                           
  5589                           ;doprnt.c: 1438: do
  5590  01F1  3020               	movlw	32
  5591  01F2  00B3               	movwf	??_sprintf
  5592  01F3  083E               	movf	sprintf@sp,w
  5593  01F4  0084               	movwf	4
  5594  01F5  0833               	movf	??_sprintf,w
  5595  01F6  1383               	bcf	3,7	;select IRP bank0
  5596  01F7  0080               	movwf	0
  5597  01F8  3001               	movlw	1
  5598  01F9  00B3               	movwf	??_sprintf
  5599  01FA  0833               	movf	??_sprintf,w
  5600  01FB  07BE               	addwf	sprintf@sp,f
  5601                           
  5602                           ;doprnt.c: 1440: while(--width);
  5603  01FC  30FF               	movlw	255
  5604  01FD  07BF               	addwf	sprintf@width,f
  5605  01FE  1803               	skipnc
  5606  01FF  0AC0               	incf	sprintf@width+1,f
  5607  0200  30FF               	movlw	255
  5608  0201  07C0               	addwf	sprintf@width+1,f
  5609  0202  29ED               	goto	i1l2475
  5610  0203                     i1l2483:	
  5611                           ;doprnt.c: 1478: }
  5612                           ;doprnt.c: 1483: while(prec--) {
  5613                           
  5614                           
  5615                           ;doprnt.c: 1487: {
  5616                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5617  0203  3000               	movlw	0
  5618  0204  00A3               	movwf	___llmod@divisor+3
  5619  0205  3000               	movlw	0
  5620  0206  00A2               	movwf	___llmod@divisor+2
  5621  0207  3000               	movlw	0
  5622  0208  00A1               	movwf	___llmod@divisor+1
  5623  0209  300A               	movlw	10
  5624  020A  00A0               	movwf	___llmod@divisor
  5625  020B  0841               	movf	sprintf@prec,w
  5626  020C  00B3               	movwf	??_sprintf
  5627  020D  3001               	movlw	1
  5628  020E                     u301_25:	
  5629  020E  1003               	clrc
  5630  020F  0DB3               	rlf	??_sprintf,f
  5631  0210  3EFF               	addlw	-1
  5632  0211  1D03               	skipz
  5633  0212  2A0E               	goto	u301_25
  5634  0213  1003               	clrc
  5635  0214  0D33               	rlf	??_sprintf,w
  5636  0215  3E01               	addlw	low (_dpowers-__stringbase)
  5637  0216  0084               	movwf	4
  5638  0217  120A  158A  200A  120A  118A  	fcall	stringdir
  5639  021C  00F0               	movwf	___lldiv@divisor
  5640  021D  120A  158A  200A  120A  118A  	fcall	stringdir
  5641  0222  00F1               	movwf	___lldiv@divisor+1
  5642  0223  120A  158A  200A  120A  118A  	fcall	stringdir
  5643  0228  00F2               	movwf	___lldiv@divisor+2
  5644  0229  120A  158A  200A  120A  118A  	fcall	stringdir
  5645  022E  00F3               	movwf	___lldiv@divisor+3
  5646  022F  083D               	movf	sprintf@_val+3,w
  5647  0230  00F7               	movwf	___lldiv@dividend+3
  5648  0231  083C               	movf	sprintf@_val+2,w
  5649  0232  00F6               	movwf	___lldiv@dividend+2
  5650  0233  083B               	movf	sprintf@_val+1,w
  5651  0234  00F5               	movwf	___lldiv@dividend+1
  5652  0235  083A               	movf	sprintf@_val,w
  5653  0236  00F4               	movwf	___lldiv@dividend
  5654  0237  120A  158A  23B1  120A  118A  	fcall	___lldiv
  5655  023C  0873               	movf	?___lldiv+3,w
  5656  023D  1283               	bcf	3,5	;RP0=0, select bank0
  5657  023E  1303               	bcf	3,6	;RP1=0, select bank0
  5658  023F  00A7               	movwf	___llmod@dividend+3
  5659  0240  0872               	movf	?___lldiv+2,w
  5660  0241  00A6               	movwf	___llmod@dividend+2
  5661  0242  0871               	movf	?___lldiv+1,w
  5662  0243  00A5               	movwf	___llmod@dividend+1
  5663  0244  0870               	movf	?___lldiv,w
  5664  0245  00A4               	movwf	___llmod@dividend
  5665  0246  120A  158A  22AD  120A  118A  	fcall	___llmod
  5666  024B  1283               	bcf	3,5	;RP0=0, select bank0
  5667  024C  1303               	bcf	3,6	;RP1=0, select bank0
  5668  024D  0820               	movf	?___llmod,w
  5669  024E  3E30               	addlw	48
  5670  024F  00B4               	movwf	??_sprintf+1
  5671  0250  0834               	movf	??_sprintf+1,w
  5672  0251  00C3               	movwf	sprintf@c
  5673                           
  5674                           ;doprnt.c: 1532: }
  5675                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5676  0252  0843               	movf	sprintf@c,w
  5677  0253  00B3               	movwf	??_sprintf
  5678  0254  083E               	movf	sprintf@sp,w
  5679  0255  0084               	movwf	4
  5680  0256  0833               	movf	??_sprintf,w
  5681  0257  1383               	bcf	3,7	;select IRP bank0
  5682  0258  0080               	movwf	0
  5683  0259  3001               	movlw	1
  5684  025A  00B3               	movwf	??_sprintf
  5685  025B  0833               	movf	??_sprintf,w
  5686  025C  07BE               	addwf	sprintf@sp,f
  5687  025D                     i1l2489:	
  5688  025D  30FF               	movlw	255
  5689  025E  07C1               	addwf	sprintf@prec,f
  5690  025F  1803               	skipnc
  5691  0260  0AC2               	incf	sprintf@prec+1,f
  5692  0261  30FF               	movlw	255
  5693  0262  07C2               	addwf	sprintf@prec+1,f
  5694  0263  30FF               	movlw	255
  5695  0264  0642               	xorwf	sprintf@prec+1,w
  5696  0265  1D03               	skipz
  5697  0266  2A69               	goto	u302_25
  5698  0267  30FF               	movlw	255
  5699  0268  0641               	xorwf	sprintf@prec,w
  5700  0269                     u302_25:	
  5701  0269  1903               	btfsc	3,2
  5702  026A  283C               	goto	i1l2491
  5703  026B  2A03               	goto	i1l2483
  5704  026C                     i1l2493:	
  5705                           ;doprnt.c: 1534: }
  5706                           ;doprnt.c: 1542: }
  5707                           ;doprnt.c: 1544: alldone:
  5708                           
  5709                           
  5710                           ;doprnt.c: 1547: *sp = 0;
  5711  026C  083E               	movf	sprintf@sp,w
  5712  026D  0084               	movwf	4
  5713  026E  1383               	bcf	3,7	;select IRP bank0
  5714  026F  0180               	clrf	0
  5715  0270  0008               	return
  5716  0271                     __end_of_sprintf:	
  5717                           ;doprnt.c: 1549: return 0;
  5718                           ;	Return value of _sprintf is never used
  5719                           
  5720                           
  5721                           	psect	text28
  5722  1671                     __ptext28:	
  5723 ;; *************** function _isdigit *****************
  5724 ;; Defined at:
  5725 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  c               1    wreg     unsigned char 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;  c               1    1[COMMON] unsigned char 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;		None               void
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5739 ;;      Params:         0       0       0       0       0
  5740 ;;      Locals:         2       0       0       0       0
  5741 ;;      Temps:          0       0       0       0       0
  5742 ;;      Totals:         2       0       0       0       0
  5743 ;;Total ram usage:        2 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_sprintf
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           
  5753                           ;psect for function _isdigit
  5754  1671                     _isdigit:	
  5755                           
  5756                           ;incstack = 0
  5757 ;; hardware stack exceeded
  5758                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5759                           ;isdigit@c stored from wreg
  5760  1671  00F1               	movwf	isdigit@c
  5761  1672  01F0               	clrf	_isdigit$892
  5762  1673  303A               	movlw	58
  5763  1674  0271               	subwf	isdigit@c,w
  5764  1675  1803               	skipnc
  5765  1676  2E7D               	goto	i1l2053
  5766  1677  3030               	movlw	48
  5767  1678  0271               	subwf	isdigit@c,w
  5768  1679  1C03               	skipc
  5769  167A  2E7D               	goto	i1l2053
  5770  167B  01F0               	clrf	_isdigit$892
  5771  167C  0AF0               	incf	_isdigit$892,f
  5772  167D                     i1l2053:	
  5773  167D  0C70               	rrf	_isdigit$892,w
  5774  167E  0008               	return
  5775  167F                     __end_of_isdigit:	
  5776                           
  5777                           	psect	text29
  5778  1764                     __ptext29:	
  5779 ;; *************** function ___wmul *****************
  5780 ;; Defined at:
  5781 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;  multiplier      2    0[COMMON] unsigned int 
  5784 ;;  multiplicand    2    2[COMMON] unsigned int 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  product         2    4[COMMON] unsigned int 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  2    0[COMMON] unsigned int 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5796 ;;      Params:         4       0       0       0       0
  5797 ;;      Locals:         2       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0
  5799 ;;      Totals:         6       0       0       0       0
  5800 ;;Total ram usage:        6 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_sprintf
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           
  5810                           ;psect for function ___wmul
  5811  1764                     ___wmul:	
  5812                           
  5813                           ;incstack = 0
  5814 ;; hardware stack exceeded
  5815                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5816  1764  01F4               	clrf	___wmul@product
  5817  1765  01F5               	clrf	___wmul@product+1
  5818  1766                     i1l2059:	
  5819  1766  1C70               	btfss	___wmul@multiplier,0
  5820  1767  2F6E               	goto	i1l389
  5821  1768  0872               	movf	___wmul@multiplicand,w
  5822  1769  07F4               	addwf	___wmul@product,f
  5823  176A  1803               	skipnc
  5824  176B  0AF5               	incf	___wmul@product+1,f
  5825  176C  0873               	movf	___wmul@multiplicand+1,w
  5826  176D  07F5               	addwf	___wmul@product+1,f
  5827  176E                     i1l389:	
  5828  176E  3001               	movlw	1
  5829  176F                     u217_25:	
  5830  176F  1003               	clrc
  5831  1770  0DF2               	rlf	___wmul@multiplicand,f
  5832  1771  0DF3               	rlf	___wmul@multiplicand+1,f
  5833  1772  3EFF               	addlw	-1
  5834  1773  1D03               	skipz
  5835  1774  2F6F               	goto	u217_25
  5836  1775  3001               	movlw	1
  5837  1776                     u218_25:	
  5838  1776  1003               	clrc
  5839  1777  0CF1               	rrf	___wmul@multiplier+1,f
  5840  1778  0CF0               	rrf	___wmul@multiplier,f
  5841  1779  3EFF               	addlw	-1
  5842  177A  1D03               	skipz
  5843  177B  2F76               	goto	u218_25
  5844  177C  0871               	movf	___wmul@multiplier+1,w
  5845  177D  0470               	iorwf	___wmul@multiplier,w
  5846  177E  1D03               	skipz
  5847  177F  2F66               	goto	i1l2059
  5848  1780  0875               	movf	___wmul@product+1,w
  5849  1781  01F1               	clrf	?___wmul+1
  5850  1782  07F1               	addwf	?___wmul+1,f
  5851  1783  0874               	movf	___wmul@product,w
  5852  1784  01F0               	clrf	?___wmul
  5853  1785  07F0               	addwf	?___wmul,f
  5854  1786  0008               	return
  5855  1787                     __end_of___wmul:	
  5856                           
  5857                           	psect	text30
  5858  0AAD                     __ptext30:	
  5859 ;; *************** function ___llmod *****************
  5860 ;; Defined at:
  5861 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\llmod.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  divisor         4    0[BANK0 ] unsigned long 
  5864 ;;  dividend        4    4[BANK0 ] unsigned long 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  counter         1    9[BANK0 ] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  4    0[BANK0 ] unsigned long 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5876 ;;      Params:         0       8       0       0       0
  5877 ;;      Locals:         0       1       0       0       0
  5878 ;;      Temps:          0       1       0       0       0
  5879 ;;      Totals:         0      10       0       0       0
  5880 ;;Total ram usage:       10 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		_sprintf
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           
  5890                           ;psect for function ___llmod
  5891  0AAD                     ___llmod:	
  5892                           
  5893                           ;incstack = 0
  5894 ;; hardware stack exceeded
  5895                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5896  0AAD  1283               	bcf	3,5	;RP0=0, select bank0
  5897  0AAE  1303               	bcf	3,6	;RP1=0, select bank0
  5898  0AAF  0823               	movf	___llmod@divisor+3,w
  5899  0AB0  0422               	iorwf	___llmod@divisor+2,w
  5900  0AB1  0421               	iorwf	___llmod@divisor+1,w
  5901  0AB2  0420               	iorwf	___llmod@divisor,w
  5902  0AB3  1903               	skipnz
  5903  0AB4  2AF2               	goto	i1l2221
  5904  0AB5  01A9               	clrf	___llmod@counter
  5905  0AB6  0AA9               	incf	___llmod@counter,f
  5906  0AB7                     i1l2211:	
  5907  0AB7  1BA3               	btfsc	___llmod@divisor+3,7
  5908  0AB8  2AC7               	goto	i1l2213
  5909  0AB9  3001               	movlw	1
  5910  0ABA  00A8               	movwf	??___llmod
  5911  0ABB                     u262_25:	
  5912  0ABB  1003               	clrc
  5913  0ABC  0DA0               	rlf	___llmod@divisor,f
  5914  0ABD  0DA1               	rlf	___llmod@divisor+1,f
  5915  0ABE  0DA2               	rlf	___llmod@divisor+2,f
  5916  0ABF  0DA3               	rlf	___llmod@divisor+3,f
  5917  0AC0  0BA8               	decfsz	??___llmod,f
  5918  0AC1  2ABB               	goto	u262_25
  5919  0AC2  3001               	movlw	1
  5920  0AC3  00A8               	movwf	??___llmod
  5921  0AC4  0828               	movf	??___llmod,w
  5922  0AC5  07A9               	addwf	___llmod@counter,f
  5923  0AC6  2AB7               	goto	i1l2211
  5924  0AC7                     i1l2213:	
  5925  0AC7  0823               	movf	___llmod@divisor+3,w
  5926  0AC8  0227               	subwf	___llmod@dividend+3,w
  5927  0AC9  1D03               	skipz
  5928  0ACA  2AD5               	goto	u264_25
  5929  0ACB  0822               	movf	___llmod@divisor+2,w
  5930  0ACC  0226               	subwf	___llmod@dividend+2,w
  5931  0ACD  1D03               	skipz
  5932  0ACE  2AD5               	goto	u264_25
  5933  0ACF  0821               	movf	___llmod@divisor+1,w
  5934  0AD0  0225               	subwf	___llmod@dividend+1,w
  5935  0AD1  1D03               	skipz
  5936  0AD2  2AD5               	goto	u264_25
  5937  0AD3  0820               	movf	___llmod@divisor,w
  5938  0AD4  0224               	subwf	___llmod@dividend,w
  5939  0AD5                     u264_25:	
  5940  0AD5  1C03               	skipc
  5941  0AD6  2AE5               	goto	i1l2217
  5942  0AD7  0820               	movf	___llmod@divisor,w
  5943  0AD8  02A4               	subwf	___llmod@dividend,f
  5944  0AD9  0821               	movf	___llmod@divisor+1,w
  5945  0ADA  1C03               	skipc
  5946  0ADB  0F21               	incfsz	___llmod@divisor+1,w
  5947  0ADC  02A5               	subwf	___llmod@dividend+1,f
  5948  0ADD  0822               	movf	___llmod@divisor+2,w
  5949  0ADE  1C03               	skipc
  5950  0ADF  0F22               	incfsz	___llmod@divisor+2,w
  5951  0AE0  02A6               	subwf	___llmod@dividend+2,f
  5952  0AE1  0823               	movf	___llmod@divisor+3,w
  5953  0AE2  1C03               	skipc
  5954  0AE3  0F23               	incfsz	___llmod@divisor+3,w
  5955  0AE4  02A7               	subwf	___llmod@dividend+3,f
  5956  0AE5                     i1l2217:	
  5957  0AE5  3001               	movlw	1
  5958  0AE6                     u265_25:	
  5959  0AE6  1003               	clrc
  5960  0AE7  0CA3               	rrf	___llmod@divisor+3,f
  5961  0AE8  0CA2               	rrf	___llmod@divisor+2,f
  5962  0AE9  0CA1               	rrf	___llmod@divisor+1,f
  5963  0AEA  0CA0               	rrf	___llmod@divisor,f
  5964  0AEB  3EFF               	addlw	-1
  5965  0AEC  1D03               	skipz
  5966  0AED  2AE6               	goto	u265_25
  5967  0AEE  3001               	movlw	1
  5968  0AEF  02A9               	subwf	___llmod@counter,f
  5969  0AF0  1D03               	btfss	3,2
  5970  0AF1  2AC7               	goto	i1l2213
  5971  0AF2                     i1l2221:	
  5972  0AF2  0827               	movf	___llmod@dividend+3,w
  5973  0AF3  00A3               	movwf	?___llmod+3
  5974  0AF4  0826               	movf	___llmod@dividend+2,w
  5975  0AF5  00A2               	movwf	?___llmod+2
  5976  0AF6  0825               	movf	___llmod@dividend+1,w
  5977  0AF7  00A1               	movwf	?___llmod+1
  5978  0AF8  0824               	movf	___llmod@dividend,w
  5979  0AF9  00A0               	movwf	?___llmod
  5980  0AFA  0008               	return
  5981  0AFB                     __end_of___llmod:	
  5982                           
  5983                           	psect	text31
  5984  0BB1                     __ptext31:	
  5985 ;; *************** function ___lldiv *****************
  5986 ;; Defined at:
  5987 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;  divisor         4    0[COMMON] unsigned long 
  5990 ;;  dividend        4    4[COMMON] unsigned long 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  quotient        4    9[COMMON] unsigned long 
  5993 ;;  counter         1   13[COMMON] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  4    0[COMMON] unsigned long 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6003 ;;      Params:         8       0       0       0       0
  6004 ;;      Locals:         5       0       0       0       0
  6005 ;;      Temps:          1       0       0       0       0
  6006 ;;      Totals:        14       0       0       0       0
  6007 ;;Total ram usage:       14 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		_sprintf
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           
  6017                           ;psect for function ___lldiv
  6018  0BB1                     ___lldiv:	
  6019                           
  6020                           ;incstack = 0
  6021 ;; hardware stack exceeded
  6022                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6023  0BB1  3000               	movlw	0
  6024  0BB2  00FC               	movwf	___lldiv@quotient+3
  6025  0BB3  3000               	movlw	0
  6026  0BB4  00FB               	movwf	___lldiv@quotient+2
  6027  0BB5  3000               	movlw	0
  6028  0BB6  00FA               	movwf	___lldiv@quotient+1
  6029  0BB7  3000               	movlw	0
  6030  0BB8  00F9               	movwf	___lldiv@quotient
  6031  0BB9  0873               	movf	___lldiv@divisor+3,w
  6032  0BBA  0472               	iorwf	___lldiv@divisor+2,w
  6033  0BBB  0471               	iorwf	___lldiv@divisor+1,w
  6034  0BBC  0470               	iorwf	___lldiv@divisor,w
  6035  0BBD  1903               	skipnz
  6036  0BBE  2C06               	goto	i1l2201
  6037  0BBF  01FD               	clrf	___lldiv@counter
  6038  0BC0  0AFD               	incf	___lldiv@counter,f
  6039  0BC1                     i1l2187:	
  6040  0BC1  1BF3               	btfsc	___lldiv@divisor+3,7
  6041  0BC2  2BD1               	goto	i1l2189
  6042  0BC3  3001               	movlw	1
  6043  0BC4  00F8               	movwf	??___lldiv
  6044  0BC5                     u255_25:	
  6045  0BC5  1003               	clrc
  6046  0BC6  0DF0               	rlf	___lldiv@divisor,f
  6047  0BC7  0DF1               	rlf	___lldiv@divisor+1,f
  6048  0BC8  0DF2               	rlf	___lldiv@divisor+2,f
  6049  0BC9  0DF3               	rlf	___lldiv@divisor+3,f
  6050  0BCA  0BF8               	decfsz	??___lldiv,f
  6051  0BCB  2BC5               	goto	u255_25
  6052  0BCC  3001               	movlw	1
  6053  0BCD  00F8               	movwf	??___lldiv
  6054  0BCE  0878               	movf	??___lldiv,w
  6055  0BCF  07FD               	addwf	___lldiv@counter,f
  6056  0BD0  2BC1               	goto	i1l2187
  6057  0BD1                     i1l2189:	
  6058  0BD1  3001               	movlw	1
  6059  0BD2  00F8               	movwf	??___lldiv
  6060  0BD3                     u257_25:	
  6061  0BD3  1003               	clrc
  6062  0BD4  0DF9               	rlf	___lldiv@quotient,f
  6063  0BD5  0DFA               	rlf	___lldiv@quotient+1,f
  6064  0BD6  0DFB               	rlf	___lldiv@quotient+2,f
  6065  0BD7  0DFC               	rlf	___lldiv@quotient+3,f
  6066  0BD8  0BF8               	decfsz	??___lldiv,f
  6067  0BD9  2BD3               	goto	u257_25
  6068  0BDA  0873               	movf	___lldiv@divisor+3,w
  6069  0BDB  0277               	subwf	___lldiv@dividend+3,w
  6070  0BDC  1D03               	skipz
  6071  0BDD  2BE8               	goto	u258_25
  6072  0BDE  0872               	movf	___lldiv@divisor+2,w
  6073  0BDF  0276               	subwf	___lldiv@dividend+2,w
  6074  0BE0  1D03               	skipz
  6075  0BE1  2BE8               	goto	u258_25
  6076  0BE2  0871               	movf	___lldiv@divisor+1,w
  6077  0BE3  0275               	subwf	___lldiv@dividend+1,w
  6078  0BE4  1D03               	skipz
  6079  0BE5  2BE8               	goto	u258_25
  6080  0BE6  0870               	movf	___lldiv@divisor,w
  6081  0BE7  0274               	subwf	___lldiv@dividend,w
  6082  0BE8                     u258_25:	
  6083  0BE8  1C03               	skipc
  6084  0BE9  2BF9               	goto	i1l2197
  6085  0BEA  0870               	movf	___lldiv@divisor,w
  6086  0BEB  02F4               	subwf	___lldiv@dividend,f
  6087  0BEC  0871               	movf	___lldiv@divisor+1,w
  6088  0BED  1C03               	skipc
  6089  0BEE  0F71               	incfsz	___lldiv@divisor+1,w
  6090  0BEF  02F5               	subwf	___lldiv@dividend+1,f
  6091  0BF0  0872               	movf	___lldiv@divisor+2,w
  6092  0BF1  1C03               	skipc
  6093  0BF2  0F72               	incfsz	___lldiv@divisor+2,w
  6094  0BF3  02F6               	subwf	___lldiv@dividend+2,f
  6095  0BF4  0873               	movf	___lldiv@divisor+3,w
  6096  0BF5  1C03               	skipc
  6097  0BF6  0F73               	incfsz	___lldiv@divisor+3,w
  6098  0BF7  02F7               	subwf	___lldiv@dividend+3,f
  6099  0BF8  1479               	bsf	___lldiv@quotient,0
  6100  0BF9                     i1l2197:	
  6101  0BF9  3001               	movlw	1
  6102  0BFA                     u259_25:	
  6103  0BFA  1003               	clrc
  6104  0BFB  0CF3               	rrf	___lldiv@divisor+3,f
  6105  0BFC  0CF2               	rrf	___lldiv@divisor+2,f
  6106  0BFD  0CF1               	rrf	___lldiv@divisor+1,f
  6107  0BFE  0CF0               	rrf	___lldiv@divisor,f
  6108  0BFF  3EFF               	addlw	-1
  6109  0C00  1D03               	skipz
  6110  0C01  2BFA               	goto	u259_25
  6111  0C02  3001               	movlw	1
  6112  0C03  02FD               	subwf	___lldiv@counter,f
  6113  0C04  1D03               	btfss	3,2
  6114  0C05  2BD1               	goto	i1l2189
  6115  0C06                     i1l2201:	
  6116  0C06  087C               	movf	___lldiv@quotient+3,w
  6117  0C07  00F3               	movwf	?___lldiv+3
  6118  0C08  087B               	movf	___lldiv@quotient+2,w
  6119  0C09  00F2               	movwf	?___lldiv+2
  6120  0C0A  087A               	movf	___lldiv@quotient+1,w
  6121  0C0B  00F1               	movwf	?___lldiv+1
  6122  0C0C  0879               	movf	___lldiv@quotient,w
  6123  0C0D  00F0               	movwf	?___lldiv
  6124  0C0E  0008               	return
  6125  0C0F                     __end_of___lldiv:	
  6126                           
  6127                           	psect	text32
  6128  17AA                     __ptext32:	
  6129 ;; *************** function ___lltoft *****************
  6130 ;; Defined at:
  6131 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lltoft.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  c               4    8[COMMON] unsigned long 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  exp             1   13[COMMON] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  3    8[COMMON] float 
  6138 ;; Registers used:
  6139 ;;		wreg, status,2, status,0, pclath, cstack
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6145 ;;      Params:         4       0       0       0       0
  6146 ;;      Locals:         1       0       0       0       0
  6147 ;;      Temps:          1       0       0       0       0
  6148 ;;      Totals:         6       0       0       0       0
  6149 ;;Total ram usage:        6 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    1
  6152 ;; This function calls:
  6153 ;;		___ftpack
  6154 ;; This function is called by:
  6155 ;;		_ftoa
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           
  6160                           ;psect for function ___lltoft
  6161  17AA                     ___lltoft:	
  6162                           
  6163                           ;incstack = 0
  6164 ;; hardware stack exceeded
  6165                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6166  17AA  308E               	movlw	142
  6167  17AB  00FC               	movwf	??___lltoft
  6168  17AC  087C               	movf	??___lltoft,w
  6169  17AD  00FD               	movwf	___lltoft@exp
  6170  17AE                     i1l2629:	
  6171  17AE  30FF               	movlw	255
  6172  17AF  057B               	andwf	___lltoft@c+3,w
  6173  17B0  1903               	btfsc	3,2
  6174  17B1  2FC0               	goto	i1l2631
  6175  17B2  3001               	movlw	1
  6176  17B3                     u334_25:	
  6177  17B3  1003               	clrc
  6178  17B4  0CFB               	rrf	___lltoft@c+3,f
  6179  17B5  0CFA               	rrf	___lltoft@c+2,f
  6180  17B6  0CF9               	rrf	___lltoft@c+1,f
  6181  17B7  0CF8               	rrf	___lltoft@c,f
  6182  17B8  3EFF               	addlw	-1
  6183  17B9  1D03               	skipz
  6184  17BA  2FB3               	goto	u334_25
  6185  17BB  3001               	movlw	1
  6186  17BC  00FC               	movwf	??___lltoft
  6187  17BD  087C               	movf	??___lltoft,w
  6188  17BE  07FD               	addwf	___lltoft@exp,f
  6189  17BF  2FAE               	goto	i1l2629
  6190  17C0                     i1l2631:	
  6191  17C0  0878               	movf	___lltoft@c,w
  6192  17C1  00F0               	movwf	___ftpack@arg
  6193  17C2  0879               	movf	___lltoft@c+1,w
  6194  17C3  00F1               	movwf	___ftpack@arg+1
  6195  17C4  087A               	movf	___lltoft@c+2,w
  6196  17C5  00F2               	movwf	___ftpack@arg+2
  6197  17C6  087D               	movf	___lltoft@exp,w
  6198  17C7  00FC               	movwf	??___lltoft
  6199  17C8  087C               	movf	??___lltoft,w
  6200  17C9  00F3               	movwf	___ftpack@exp
  6201  17CA  01F4               	clrf	___ftpack@sign
  6202  17CB  120A  118A  2796   	fcall	___ftpack
  6203  17CE  0870               	movf	?___ftpack,w
  6204  17CF  00F8               	movwf	?___lltoft
  6205  17D0  0871               	movf	?___ftpack+1,w
  6206  17D1  00F9               	movwf	?___lltoft+1
  6207  17D2  0872               	movf	?___ftpack+2,w
  6208  17D3  00FA               	movwf	?___lltoft+2
  6209  17D4  0008               	return
  6210  17D5                     __end_of___lltoft:	
  6211                           
  6212                           	psect	text33
  6213  0E40                     __ptext33:	
  6214 ;; *************** function ___fttol *****************
  6215 ;; Defined at:
  6216 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  f1              3   16[BANK0 ] float 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  lval            4   25[BANK0 ] unsigned long 
  6221 ;;  exp1            1   29[BANK0 ] unsigned char 
  6222 ;;  sign1           1   24[BANK0 ] unsigned char 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  4   16[BANK0 ] long 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6232 ;;      Params:         0       4       0       0       0
  6233 ;;      Locals:         0       6       0       0       0
  6234 ;;      Temps:          0       4       0       0       0
  6235 ;;      Totals:         0      14       0       0       0
  6236 ;;Total ram usage:       14 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_ISR
  6242 ;;		_ftoa
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           
  6247                           ;psect for function ___fttol
  6248  0E40                     ___fttol:	
  6249                           
  6250                           ;incstack = 0
  6251 ;; hardware stack exceeded
  6252                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6253  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  6254  0E41  1303               	bcf	3,6	;RP1=0, select bank0
  6255  0E42  0830               	movf	___fttol@f1,w
  6256  0E43  00B4               	movwf	??___fttol
  6257  0E44  0831               	movf	___fttol@f1+1,w
  6258  0E45  00B5               	movwf	??___fttol+1
  6259  0E46  0832               	movf	___fttol@f1+2,w
  6260  0E47  00B6               	movwf	??___fttol+2
  6261  0E48  1003               	clrc
  6262  0E49  0D35               	rlf	??___fttol+1,w
  6263  0E4A  0D36               	rlf	??___fttol+2,w
  6264  0E4B  00B7               	movwf	??___fttol+3
  6265  0E4C  0837               	movf	??___fttol+3,w
  6266  0E4D  00BD               	movwf	___fttol@exp1
  6267  0E4E  08BD               	movf	___fttol@exp1,f
  6268  0E4F  1D03               	skipz
  6269  0E50  2E5A               	goto	i1l2587
  6270  0E51  3000               	movlw	0
  6271  0E52  00B3               	movwf	?___fttol+3
  6272  0E53  3000               	movlw	0
  6273  0E54  00B2               	movwf	?___fttol+2
  6274  0E55  3000               	movlw	0
  6275  0E56  00B1               	movwf	?___fttol+1
  6276  0E57  3000               	movlw	0
  6277  0E58  00B0               	movwf	?___fttol
  6278  0E59  0008               	return
  6279  0E5A                     i1l2587:	
  6280  0E5A  0830               	movf	___fttol@f1,w
  6281  0E5B  00B4               	movwf	??___fttol
  6282  0E5C  0831               	movf	___fttol@f1+1,w
  6283  0E5D  00B5               	movwf	??___fttol+1
  6284  0E5E  0832               	movf	___fttol@f1+2,w
  6285  0E5F  00B6               	movwf	??___fttol+2
  6286  0E60  3017               	movlw	23
  6287  0E61                     u325_25:	
  6288  0E61  1003               	clrc
  6289  0E62  0CB6               	rrf	??___fttol+2,f
  6290  0E63  0CB5               	rrf	??___fttol+1,f
  6291  0E64  0CB4               	rrf	??___fttol,f
  6292  0E65  3EFF               	addlw	-1
  6293  0E66  1D03               	skipz
  6294  0E67  2E61               	goto	u325_25
  6295  0E68  0834               	movf	??___fttol,w
  6296  0E69  00B7               	movwf	??___fttol+3
  6297  0E6A  0837               	movf	??___fttol+3,w
  6298  0E6B  00B8               	movwf	___fttol@sign1
  6299  0E6C  17B1               	bsf	___fttol@f1+1,7
  6300  0E6D  30FF               	movlw	255
  6301  0E6E  05B0               	andwf	___fttol@f1,f
  6302  0E6F  30FF               	movlw	255
  6303  0E70  05B1               	andwf	___fttol@f1+1,f
  6304  0E71  3000               	movlw	0
  6305  0E72  05B2               	andwf	___fttol@f1+2,f
  6306  0E73  0830               	movf	___fttol@f1,w
  6307  0E74  00B9               	movwf	___fttol@lval
  6308  0E75  0831               	movf	___fttol@f1+1,w
  6309  0E76  00BA               	movwf	___fttol@lval+1
  6310  0E77  0832               	movf	___fttol@f1+2,w
  6311  0E78  00BB               	movwf	___fttol@lval+2
  6312  0E79  01BC               	clrf	___fttol@lval+3
  6313  0E7A  308E               	movlw	142
  6314  0E7B  02BD               	subwf	___fttol@exp1,f
  6315  0E7C  1FBD               	btfss	___fttol@exp1,7
  6316  0E7D  2E9C               	goto	i1l2607
  6317  0E7E  083D               	movf	___fttol@exp1,w
  6318  0E7F  3A80               	xorlw	128
  6319  0E80  3E8F               	addlw	143
  6320  0E81  1803               	skipnc
  6321  0E82  2E8C               	goto	i1l2605
  6322  0E83  3000               	movlw	0
  6323  0E84  00B3               	movwf	?___fttol+3
  6324  0E85  3000               	movlw	0
  6325  0E86  00B2               	movwf	?___fttol+2
  6326  0E87  3000               	movlw	0
  6327  0E88  00B1               	movwf	?___fttol+1
  6328  0E89  3000               	movlw	0
  6329  0E8A  00B0               	movwf	?___fttol
  6330  0E8B  0008               	return
  6331  0E8C                     i1l2605:	
  6332  0E8C  3001               	movlw	1
  6333  0E8D                     u328_25:	
  6334  0E8D  1003               	clrc
  6335  0E8E  0CBC               	rrf	___fttol@lval+3,f
  6336  0E8F  0CBB               	rrf	___fttol@lval+2,f
  6337  0E90  0CBA               	rrf	___fttol@lval+1,f
  6338  0E91  0CB9               	rrf	___fttol@lval,f
  6339  0E92  3EFF               	addlw	-1
  6340  0E93  1D03               	skipz
  6341  0E94  2E8D               	goto	u328_25
  6342  0E95  3001               	movlw	1
  6343  0E96  00B4               	movwf	??___fttol
  6344  0E97  0834               	movf	??___fttol,w
  6345  0E98  07BD               	addwf	___fttol@exp1,f
  6346  0E99  1903               	btfsc	3,2
  6347  0E9A  2EB7               	goto	i1l2617
  6348  0E9B  2E8C               	goto	i1l2605
  6349  0E9C                     i1l2607:	
  6350  0E9C  3018               	movlw	24
  6351  0E9D  023D               	subwf	___fttol@exp1,w
  6352  0E9E  1C03               	skipc
  6353  0E9F  2EB4               	goto	i1l2615
  6354  0EA0  3000               	movlw	0
  6355  0EA1  00B3               	movwf	?___fttol+3
  6356  0EA2  3000               	movlw	0
  6357  0EA3  00B2               	movwf	?___fttol+2
  6358  0EA4  3000               	movlw	0
  6359  0EA5  00B1               	movwf	?___fttol+1
  6360  0EA6  3000               	movlw	0
  6361  0EA7  00B0               	movwf	?___fttol
  6362  0EA8  0008               	return
  6363  0EA9                     i1l2613:	
  6364  0EA9  3001               	movlw	1
  6365  0EAA  00B4               	movwf	??___fttol
  6366  0EAB                     u331_25:	
  6367  0EAB  1003               	clrc
  6368  0EAC  0DB9               	rlf	___fttol@lval,f
  6369  0EAD  0DBA               	rlf	___fttol@lval+1,f
  6370  0EAE  0DBB               	rlf	___fttol@lval+2,f
  6371  0EAF  0DBC               	rlf	___fttol@lval+3,f
  6372  0EB0  0BB4               	decfsz	??___fttol,f
  6373  0EB1  2EAB               	goto	u331_25
  6374  0EB2  3001               	movlw	1
  6375  0EB3  02BD               	subwf	___fttol@exp1,f
  6376  0EB4                     i1l2615:	
  6377  0EB4  08BD               	movf	___fttol@exp1,f
  6378  0EB5  1D03               	skipz
  6379  0EB6  2EA9               	goto	i1l2613
  6380  0EB7                     i1l2617:	
  6381  0EB7  0838               	movf	___fttol@sign1,w
  6382  0EB8  1903               	btfsc	3,2
  6383  0EB9  2EC5               	goto	i1l2621
  6384  0EBA  09B9               	comf	___fttol@lval,f
  6385  0EBB  09BA               	comf	___fttol@lval+1,f
  6386  0EBC  09BB               	comf	___fttol@lval+2,f
  6387  0EBD  09BC               	comf	___fttol@lval+3,f
  6388  0EBE  0AB9               	incf	___fttol@lval,f
  6389  0EBF  1903               	skipnz
  6390  0EC0  0ABA               	incf	___fttol@lval+1,f
  6391  0EC1  1903               	skipnz
  6392  0EC2  0ABB               	incf	___fttol@lval+2,f
  6393  0EC3  1903               	skipnz
  6394  0EC4  0ABC               	incf	___fttol@lval+3,f
  6395  0EC5                     i1l2621:	
  6396  0EC5  083C               	movf	___fttol@lval+3,w
  6397  0EC6  00B3               	movwf	?___fttol+3
  6398  0EC7  083B               	movf	___fttol@lval+2,w
  6399  0EC8  00B2               	movwf	?___fttol+2
  6400  0EC9  083A               	movf	___fttol@lval+1,w
  6401  0ECA  00B1               	movwf	?___fttol+1
  6402  0ECB  0839               	movf	___fttol@lval,w
  6403  0ECC  00B0               	movwf	?___fttol
  6404  0ECD  0008               	return
  6405  0ECE                     __end_of___fttol:	
  6406                           
  6407                           	psect	text34
  6408  16E8                     __ptext34:	
  6409 ;; *************** function ___ftsub *****************
  6410 ;; Defined at:
  6411 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftsub.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  f2              3    7[BANK0 ] float 
  6414 ;;  f1              3   10[BANK0 ] float 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  3    7[BANK0 ] float 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0, pclath, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6426 ;;      Params:         0       6       0       0       0
  6427 ;;      Locals:         0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0
  6429 ;;      Totals:         0       6       0       0       0
  6430 ;;Total ram usage:        6 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    2
  6433 ;; This function calls:
  6434 ;;		___ftadd
  6435 ;; This function is called by:
  6436 ;;		_ftoa
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function ___ftsub
  6442  16E8                     ___ftsub:	
  6443                           
  6444                           ;incstack = 0
  6445 ;; hardware stack exceeded
  6446                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6447  16E8  3080               	movlw	128
  6448  16E9  1283               	bcf	3,5	;RP0=0, select bank0
  6449  16EA  1303               	bcf	3,6	;RP1=0, select bank0
  6450  16EB  06A9               	xorwf	___ftsub@f2+2,f
  6451  16EC  082A               	movf	___ftsub@f1,w
  6452  16ED  00F8               	movwf	___ftadd@f1
  6453  16EE  082B               	movf	___ftsub@f1+1,w
  6454  16EF  00F9               	movwf	___ftadd@f1+1
  6455  16F0  082C               	movf	___ftsub@f1+2,w
  6456  16F1  00FA               	movwf	___ftadd@f1+2
  6457  16F2  0827               	movf	___ftsub@f2,w
  6458  16F3  00FB               	movwf	___ftadd@f2
  6459  16F4  0828               	movf	___ftsub@f2+1,w
  6460  16F5  00FC               	movwf	___ftadd@f2+1
  6461  16F6  0829               	movf	___ftsub@f2+2,w
  6462  16F7  00FD               	movwf	___ftadd@f2+2
  6463  16F8  120A  118A  239F   	fcall	___ftadd
  6464  16FB  0878               	movf	?___ftadd,w
  6465  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  6466  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  6467  16FE  00A7               	movwf	?___ftsub
  6468  16FF  0879               	movf	?___ftadd+1,w
  6469  1700  00A8               	movwf	?___ftsub+1
  6470  1701  087A               	movf	?___ftadd+2,w
  6471  1702  00A9               	movwf	?___ftsub+2
  6472  1703  0008               	return
  6473  1704                     __end_of___ftsub:	
  6474                           
  6475                           	psect	text35
  6476  039F                     __ptext35:	
  6477 ;; *************** function ___ftadd *****************
  6478 ;; Defined at:
  6479 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  f1              3    8[COMMON] float 
  6482 ;;  f2              3   11[COMMON] float 
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;  exp1            1    6[BANK0 ] unsigned char 
  6485 ;;  exp2            1    5[BANK0 ] unsigned char 
  6486 ;;  sign            1    4[BANK0 ] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  3    8[COMMON] float 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0, pclath, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6496 ;;      Params:         6       0       0       0       0
  6497 ;;      Locals:         0       3       0       0       0
  6498 ;;      Temps:          0       4       0       0       0
  6499 ;;      Totals:         6       7       0       0       0
  6500 ;;Total ram usage:       13 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    1
  6503 ;; This function calls:
  6504 ;;		___ftpack
  6505 ;; This function is called by:
  6506 ;;		___ftsub
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function ___ftadd
  6512  039F                     ___ftadd:	
  6513                           
  6514                           ;incstack = 0
  6515 ;; hardware stack exceeded
  6516                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6517  039F  0878               	movf	___ftadd@f1,w
  6518  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  6519  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  6520  03A2  00A0               	movwf	??___ftadd
  6521  03A3  0879               	movf	___ftadd@f1+1,w
  6522  03A4  00A1               	movwf	??___ftadd+1
  6523  03A5  087A               	movf	___ftadd@f1+2,w
  6524  03A6  00A2               	movwf	??___ftadd+2
  6525  03A7  1003               	clrc
  6526  03A8  0D21               	rlf	??___ftadd+1,w
  6527  03A9  0D22               	rlf	??___ftadd+2,w
  6528  03AA  00A3               	movwf	??___ftadd+3
  6529  03AB  0823               	movf	??___ftadd+3,w
  6530  03AC  00A6               	movwf	___ftadd@exp1
  6531  03AD  087B               	movf	___ftadd@f2,w
  6532  03AE  00A0               	movwf	??___ftadd
  6533  03AF  087C               	movf	___ftadd@f2+1,w
  6534  03B0  00A1               	movwf	??___ftadd+1
  6535  03B1  087D               	movf	___ftadd@f2+2,w
  6536  03B2  00A2               	movwf	??___ftadd+2
  6537  03B3  1003               	clrc
  6538  03B4  0D21               	rlf	??___ftadd+1,w
  6539  03B5  0D22               	rlf	??___ftadd+2,w
  6540  03B6  00A3               	movwf	??___ftadd+3
  6541  03B7  0823               	movf	??___ftadd+3,w
  6542  03B8  00A5               	movwf	___ftadd@exp2
  6543  03B9  0826               	movf	___ftadd@exp1,w
  6544  03BA  1903               	btfsc	3,2
  6545  03BB  2BC8               	goto	i1l2117
  6546  03BC  0825               	movf	___ftadd@exp2,w
  6547  03BD  0226               	subwf	___ftadd@exp1,w
  6548  03BE  1803               	skipnc
  6549  03BF  2BCF               	goto	i1l2121
  6550  03C0  0326               	decf	___ftadd@exp1,w
  6551  03C1  3AFF               	xorlw	255
  6552  03C2  0725               	addwf	___ftadd@exp2,w
  6553  03C3  00A0               	movwf	??___ftadd
  6554  03C4  3019               	movlw	25
  6555  03C5  0220               	subwf	??___ftadd,w
  6556  03C6  1C03               	skipc
  6557  03C7  2BCF               	goto	i1l2121
  6558  03C8                     i1l2117:	
  6559  03C8  087B               	movf	___ftadd@f2,w
  6560  03C9  00F8               	movwf	?___ftadd
  6561  03CA  087C               	movf	___ftadd@f2+1,w
  6562  03CB  00F9               	movwf	?___ftadd+1
  6563  03CC  087D               	movf	___ftadd@f2+2,w
  6564  03CD  00FA               	movwf	?___ftadd+2
  6565  03CE  0008               	return
  6566  03CF                     i1l2121:	
  6567  03CF  0825               	movf	___ftadd@exp2,w
  6568  03D0  1903               	btfsc	3,2
  6569  03D1  0008               	return
  6570  03D2  0826               	movf	___ftadd@exp1,w
  6571  03D3  0225               	subwf	___ftadd@exp2,w
  6572  03D4  1803               	skipnc
  6573  03D5  2BDE               	goto	i1l2127
  6574  03D6  0325               	decf	___ftadd@exp2,w
  6575  03D7  3AFF               	xorlw	255
  6576  03D8  0726               	addwf	___ftadd@exp1,w
  6577  03D9  00A0               	movwf	??___ftadd
  6578  03DA  3019               	movlw	25
  6579  03DB  0220               	subwf	??___ftadd,w
  6580  03DC  1803               	btfsc	3,0
  6581  03DD  0008               	return
  6582  03DE                     i1l2127:	
  6583  03DE  3006               	movlw	6
  6584  03DF  00A0               	movwf	??___ftadd
  6585  03E0  0820               	movf	??___ftadd,w
  6586  03E1  00A4               	movwf	___ftadd@sign
  6587  03E2  1BFA               	btfsc	___ftadd@f1+2,7
  6588  03E3  17A4               	bsf	___ftadd@sign,7
  6589  03E4  1BFD               	btfsc	___ftadd@f2+2,7
  6590  03E5  1724               	bsf	___ftadd@sign,6
  6591  03E6  17F9               	bsf	___ftadd@f1+1,7
  6592  03E7  30FF               	movlw	255
  6593  03E8  05F8               	andwf	___ftadd@f1,f
  6594  03E9  30FF               	movlw	255
  6595  03EA  05F9               	andwf	___ftadd@f1+1,f
  6596  03EB  3000               	movlw	0
  6597  03EC  05FA               	andwf	___ftadd@f1+2,f
  6598  03ED  17FC               	bsf	___ftadd@f2+1,7
  6599  03EE  30FF               	movlw	255
  6600  03EF  05FB               	andwf	___ftadd@f2,f
  6601  03F0  30FF               	movlw	255
  6602  03F1  05FC               	andwf	___ftadd@f2+1,f
  6603  03F2  3000               	movlw	0
  6604  03F3  05FD               	andwf	___ftadd@f2+2,f
  6605  03F4  0825               	movf	___ftadd@exp2,w
  6606  03F5  0226               	subwf	___ftadd@exp1,w
  6607  03F6  1803               	skipnc
  6608  03F7  2C1E               	goto	i1l2149
  6609  03F8                     i1l2139:	
  6610  03F8  3001               	movlw	1
  6611  03F9                     u239_25:	
  6612  03F9  1003               	clrc
  6613  03FA  0DFB               	rlf	___ftadd@f2,f
  6614  03FB  0DFC               	rlf	___ftadd@f2+1,f
  6615  03FC  0DFD               	rlf	___ftadd@f2+2,f
  6616  03FD  3EFF               	addlw	-1
  6617  03FE  1D03               	skipz
  6618  03FF  2BF9               	goto	u239_25
  6619  0400  3001               	movlw	1
  6620  0401  02A5               	subwf	___ftadd@exp2,f
  6621  0402  0825               	movf	___ftadd@exp2,w
  6622  0403  0626               	xorwf	___ftadd@exp1,w
  6623  0404  1903               	skipnz
  6624  0405  2C19               	goto	i1l2147
  6625  0406  3001               	movlw	1
  6626  0407  02A4               	subwf	___ftadd@sign,f
  6627  0408  0824               	movf	___ftadd@sign,w
  6628  0409  3907               	andlw	7
  6629  040A  1903               	btfsc	3,2
  6630  040B  2C19               	goto	i1l2147
  6631  040C  2BF8               	goto	i1l2139
  6632  040D                     i1l2145:	
  6633  040D  3001               	movlw	1
  6634  040E                     u242_25:	
  6635  040E  1003               	clrc
  6636  040F  0CFA               	rrf	___ftadd@f1+2,f
  6637  0410  0CF9               	rrf	___ftadd@f1+1,f
  6638  0411  0CF8               	rrf	___ftadd@f1,f
  6639  0412  3EFF               	addlw	-1
  6640  0413  1D03               	skipz
  6641  0414  2C0E               	goto	u242_25
  6642  0415  3001               	movlw	1
  6643  0416  00A0               	movwf	??___ftadd
  6644  0417  0820               	movf	??___ftadd,w
  6645  0418  07A6               	addwf	___ftadd@exp1,f
  6646  0419                     i1l2147:	
  6647  0419  0826               	movf	___ftadd@exp1,w
  6648  041A  0625               	xorwf	___ftadd@exp2,w
  6649  041B  1903               	btfsc	3,2
  6650  041C  2C47               	goto	i1l579
  6651  041D  2C0D               	goto	i1l2145
  6652  041E                     i1l2149:	
  6653  041E  0826               	movf	___ftadd@exp1,w
  6654  041F  0225               	subwf	___ftadd@exp2,w
  6655  0420  1803               	skipnc
  6656  0421  2C47               	goto	i1l579
  6657  0422                     i1l2151:	
  6658  0422  3001               	movlw	1
  6659  0423                     u245_25:	
  6660  0423  1003               	clrc
  6661  0424  0DF8               	rlf	___ftadd@f1,f
  6662  0425  0DF9               	rlf	___ftadd@f1+1,f
  6663  0426  0DFA               	rlf	___ftadd@f1+2,f
  6664  0427  3EFF               	addlw	-1
  6665  0428  1D03               	skipz
  6666  0429  2C23               	goto	u245_25
  6667  042A  3001               	movlw	1
  6668  042B  02A6               	subwf	___ftadd@exp1,f
  6669  042C  0825               	movf	___ftadd@exp2,w
  6670  042D  0626               	xorwf	___ftadd@exp1,w
  6671  042E  1903               	skipnz
  6672  042F  2C43               	goto	i1l2159
  6673  0430  3001               	movlw	1
  6674  0431  02A4               	subwf	___ftadd@sign,f
  6675  0432  0824               	movf	___ftadd@sign,w
  6676  0433  3907               	andlw	7
  6677  0434  1903               	btfsc	3,2
  6678  0435  2C43               	goto	i1l2159
  6679  0436  2C22               	goto	i1l2151
  6680  0437                     i1l2157:	
  6681  0437  3001               	movlw	1
  6682  0438                     u248_25:	
  6683  0438  1003               	clrc
  6684  0439  0CFD               	rrf	___ftadd@f2+2,f
  6685  043A  0CFC               	rrf	___ftadd@f2+1,f
  6686  043B  0CFB               	rrf	___ftadd@f2,f
  6687  043C  3EFF               	addlw	-1
  6688  043D  1D03               	skipz
  6689  043E  2C38               	goto	u248_25
  6690  043F  3001               	movlw	1
  6691  0440  00A0               	movwf	??___ftadd
  6692  0441  0820               	movf	??___ftadd,w
  6693  0442  07A5               	addwf	___ftadd@exp2,f
  6694  0443                     i1l2159:	
  6695  0443  0826               	movf	___ftadd@exp1,w
  6696  0444  0625               	xorwf	___ftadd@exp2,w
  6697  0445  1D03               	skipz
  6698  0446  2C37               	goto	i1l2157
  6699  0447                     i1l579:	
  6700  0447  1FA4               	btfss	___ftadd@sign,7
  6701  0448  2C59               	goto	i1l2163
  6702  0449  30FF               	movlw	255
  6703  044A  06F8               	xorwf	___ftadd@f1,f
  6704  044B  30FF               	movlw	255
  6705  044C  06F9               	xorwf	___ftadd@f1+1,f
  6706  044D  30FF               	movlw	255
  6707  044E  06FA               	xorwf	___ftadd@f1+2,f
  6708  044F  3001               	movlw	1
  6709  0450  07F8               	addwf	___ftadd@f1,f
  6710  0451  3000               	movlw	0
  6711  0452  1803               	skipnc
  6712  0453  3001               	movlw	1
  6713  0454  07F9               	addwf	___ftadd@f1+1,f
  6714  0455  3000               	movlw	0
  6715  0456  1803               	skipnc
  6716  0457  3001               	movlw	1
  6717  0458  07FA               	addwf	___ftadd@f1+2,f
  6718  0459                     i1l2163:	
  6719  0459  1F24               	btfss	___ftadd@sign,6
  6720  045A  2C6B               	goto	i1l2167
  6721  045B  30FF               	movlw	255
  6722  045C  06FB               	xorwf	___ftadd@f2,f
  6723  045D  30FF               	movlw	255
  6724  045E  06FC               	xorwf	___ftadd@f2+1,f
  6725  045F  30FF               	movlw	255
  6726  0460  06FD               	xorwf	___ftadd@f2+2,f
  6727  0461  3001               	movlw	1
  6728  0462  07FB               	addwf	___ftadd@f2,f
  6729  0463  3000               	movlw	0
  6730  0464  1803               	skipnc
  6731  0465  3001               	movlw	1
  6732  0466  07FC               	addwf	___ftadd@f2+1,f
  6733  0467  3000               	movlw	0
  6734  0468  1803               	skipnc
  6735  0469  3001               	movlw	1
  6736  046A  07FD               	addwf	___ftadd@f2+2,f
  6737  046B                     i1l2167:	
  6738  046B  01A4               	clrf	___ftadd@sign
  6739  046C  0878               	movf	___ftadd@f1,w
  6740  046D  07FB               	addwf	___ftadd@f2,f
  6741  046E  0879               	movf	___ftadd@f1+1,w
  6742  046F  1103               	clrz
  6743  0470  1803               	skipnc
  6744  0471  0A79               	incf	___ftadd@f1+1,w
  6745  0472  1D03               	btfss	3,2
  6746  0473  07FC               	addwf	___ftadd@f2+1,f
  6747  0474  087A               	movf	___ftadd@f1+2,w
  6748  0475  1103               	clrz
  6749  0476  1803               	skipnc
  6750  0477  0A7A               	incf	___ftadd@f1+2,w
  6751  0478  1D03               	btfss	3,2
  6752  0479  07FD               	addwf	___ftadd@f2+2,f
  6753  047A  1FFD               	btfss	___ftadd@f2+2,7
  6754  047B  2C8E               	goto	i1l2177
  6755  047C  30FF               	movlw	255
  6756  047D  06FB               	xorwf	___ftadd@f2,f
  6757  047E  30FF               	movlw	255
  6758  047F  06FC               	xorwf	___ftadd@f2+1,f
  6759  0480  30FF               	movlw	255
  6760  0481  06FD               	xorwf	___ftadd@f2+2,f
  6761  0482  3001               	movlw	1
  6762  0483  07FB               	addwf	___ftadd@f2,f
  6763  0484  3000               	movlw	0
  6764  0485  1803               	skipnc
  6765  0486  3001               	movlw	1
  6766  0487  07FC               	addwf	___ftadd@f2+1,f
  6767  0488  3000               	movlw	0
  6768  0489  1803               	skipnc
  6769  048A  3001               	movlw	1
  6770  048B  07FD               	addwf	___ftadd@f2+2,f
  6771  048C  01A4               	clrf	___ftadd@sign
  6772  048D  0AA4               	incf	___ftadd@sign,f
  6773  048E                     i1l2177:	
  6774  048E  087B               	movf	___ftadd@f2,w
  6775  048F  00F0               	movwf	___ftpack@arg
  6776  0490  087C               	movf	___ftadd@f2+1,w
  6777  0491  00F1               	movwf	___ftpack@arg+1
  6778  0492  087D               	movf	___ftadd@f2+2,w
  6779  0493  00F2               	movwf	___ftpack@arg+2
  6780  0494  0826               	movf	___ftadd@exp1,w
  6781  0495  00A0               	movwf	??___ftadd
  6782  0496  0820               	movf	??___ftadd,w
  6783  0497  00F3               	movwf	___ftpack@exp
  6784  0498  0824               	movf	___ftadd@sign,w
  6785  0499  00A1               	movwf	??___ftadd+1
  6786  049A  0821               	movf	??___ftadd+1,w
  6787  049B  00F4               	movwf	___ftpack@sign
  6788  049C  120A  118A  2796   	fcall	___ftpack
  6789  049F  0870               	movf	?___ftpack,w
  6790  04A0  00F8               	movwf	?___ftadd
  6791  04A1  0871               	movf	?___ftpack+1,w
  6792  04A2  00F9               	movwf	?___ftadd+1
  6793  04A3  0872               	movf	?___ftpack+2,w
  6794  04A4  00FA               	movwf	?___ftadd+2
  6795  04A5  0008               	return
  6796  04A6                     __end_of___ftadd:	
  6797                           
  6798                           	psect	text36
  6799  1649                     __ptext36:	
  6800 ;; *************** function ___ftneg *****************
  6801 ;; Defined at:
  6802 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;  f1              3    0[COMMON] float 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;		None
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  3    0[COMMON] float 
  6809 ;; Registers used:
  6810 ;;		wreg
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6816 ;;      Params:         3       0       0       0       0
  6817 ;;      Locals:         0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0
  6819 ;;      Totals:         3       0       0       0       0
  6820 ;;Total ram usage:        3 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_ftoa
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function ___ftneg
  6831  1649                     ___ftneg:	
  6832                           
  6833                           ;incstack = 0
  6834 ;; hardware stack exceeded
  6835                           ; Regs used in ___ftneg: [wreg]
  6836  1649  0872               	movf	___ftneg@f1+2,w
  6837  164A  0471               	iorwf	___ftneg@f1+1,w
  6838  164B  0470               	iorwf	___ftneg@f1,w
  6839  164C  1903               	skipnz
  6840  164D  0008               	return
  6841  164E  3080               	movlw	128
  6842  164F  06F2               	xorwf	___ftneg@f1+2,f
  6843  1650  0008               	return
  6844  1651                     __end_of___ftneg:	
  6845                           
  6846                           	psect	text37
  6847  04A6                     __ptext37:	
  6848 ;; *************** function ___ftmul *****************
  6849 ;; Defined at:
  6850 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  f1              3    0[BANK0 ] float 
  6853 ;;  f2              3    3[BANK0 ] float 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6856 ;;  sign            1   15[BANK0 ] unsigned char 
  6857 ;;  cntr            1   14[BANK0 ] unsigned char 
  6858 ;;  exp             1   10[BANK0 ] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  3    0[BANK0 ] float 
  6861 ;; Registers used:
  6862 ;;		wreg, status,2, status,0, pclath, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6868 ;;      Params:         0       6       0       0       0
  6869 ;;      Locals:         0       6       0       0       0
  6870 ;;      Temps:          0       4       0       0       0
  6871 ;;      Totals:         0      16       0       0       0
  6872 ;;Total ram usage:       16 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    1
  6875 ;; This function calls:
  6876 ;;		___ftpack
  6877 ;; This function is called by:
  6878 ;;		_ISR
  6879 ;;		_ftoa
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           
  6884                           ;psect for function ___ftmul
  6885  04A6                     ___ftmul:	
  6886                           
  6887                           ;incstack = 0
  6888 ;; hardware stack exceeded
  6889                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6890  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  6891  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  6892  04A8  0820               	movf	___ftmul@f1,w
  6893  04A9  00A6               	movwf	??___ftmul
  6894  04AA  0821               	movf	___ftmul@f1+1,w
  6895  04AB  00A7               	movwf	??___ftmul+1
  6896  04AC  0822               	movf	___ftmul@f1+2,w
  6897  04AD  00A8               	movwf	??___ftmul+2
  6898  04AE  1003               	clrc
  6899  04AF  0D27               	rlf	??___ftmul+1,w
  6900  04B0  0D28               	rlf	??___ftmul+2,w
  6901  04B1  00A9               	movwf	??___ftmul+3
  6902  04B2  0829               	movf	??___ftmul+3,w
  6903  04B3  00AA               	movwf	___ftmul@exp
  6904  04B4  08AA               	movf	___ftmul@exp,f
  6905  04B5  1D03               	skipz
  6906  04B6  2CBE               	goto	i1l2523
  6907  04B7  3000               	movlw	0
  6908  04B8  00A0               	movwf	?___ftmul
  6909  04B9  3000               	movlw	0
  6910  04BA  00A1               	movwf	?___ftmul+1
  6911  04BB  3000               	movlw	0
  6912  04BC  00A2               	movwf	?___ftmul+2
  6913  04BD  0008               	return
  6914  04BE                     i1l2523:	
  6915  04BE  0823               	movf	___ftmul@f2,w
  6916  04BF  00A6               	movwf	??___ftmul
  6917  04C0  0824               	movf	___ftmul@f2+1,w
  6918  04C1  00A7               	movwf	??___ftmul+1
  6919  04C2  0825               	movf	___ftmul@f2+2,w
  6920  04C3  00A8               	movwf	??___ftmul+2
  6921  04C4  1003               	clrc
  6922  04C5  0D27               	rlf	??___ftmul+1,w
  6923  04C6  0D28               	rlf	??___ftmul+2,w
  6924  04C7  00A9               	movwf	??___ftmul+3
  6925  04C8  0829               	movf	??___ftmul+3,w
  6926  04C9  00AF               	movwf	___ftmul@sign
  6927  04CA  08AF               	movf	___ftmul@sign,f
  6928  04CB  1D03               	skipz
  6929  04CC  2CD4               	goto	i1l2529
  6930  04CD  3000               	movlw	0
  6931  04CE  00A0               	movwf	?___ftmul
  6932  04CF  3000               	movlw	0
  6933  04D0  00A1               	movwf	?___ftmul+1
  6934  04D1  3000               	movlw	0
  6935  04D2  00A2               	movwf	?___ftmul+2
  6936  04D3  0008               	return
  6937  04D4                     i1l2529:	
  6938  04D4  082F               	movf	___ftmul@sign,w
  6939  04D5  3E7B               	addlw	123
  6940  04D6  00A6               	movwf	??___ftmul
  6941  04D7  0826               	movf	??___ftmul,w
  6942  04D8  07AA               	addwf	___ftmul@exp,f
  6943  04D9  0820               	movf	___ftmul@f1,w
  6944  04DA  00A6               	movwf	??___ftmul
  6945  04DB  0821               	movf	___ftmul@f1+1,w
  6946  04DC  00A7               	movwf	??___ftmul+1
  6947  04DD  0822               	movf	___ftmul@f1+2,w
  6948  04DE  00A8               	movwf	??___ftmul+2
  6949  04DF  3010               	movlw	16
  6950  04E0                     u311_25:	
  6951  04E0  1003               	clrc
  6952  04E1  0CA8               	rrf	??___ftmul+2,f
  6953  04E2  0CA7               	rrf	??___ftmul+1,f
  6954  04E3  0CA6               	rrf	??___ftmul,f
  6955  04E4  3EFF               	addlw	-1
  6956  04E5  1D03               	skipz
  6957  04E6  2CE0               	goto	u311_25
  6958  04E7  0826               	movf	??___ftmul,w
  6959  04E8  00A9               	movwf	??___ftmul+3
  6960  04E9  0829               	movf	??___ftmul+3,w
  6961  04EA  00AF               	movwf	___ftmul@sign
  6962  04EB  0823               	movf	___ftmul@f2,w
  6963  04EC  00A6               	movwf	??___ftmul
  6964  04ED  0824               	movf	___ftmul@f2+1,w
  6965  04EE  00A7               	movwf	??___ftmul+1
  6966  04EF  0825               	movf	___ftmul@f2+2,w
  6967  04F0  00A8               	movwf	??___ftmul+2
  6968  04F1  3010               	movlw	16
  6969  04F2                     u312_25:	
  6970  04F2  1003               	clrc
  6971  04F3  0CA8               	rrf	??___ftmul+2,f
  6972  04F4  0CA7               	rrf	??___ftmul+1,f
  6973  04F5  0CA6               	rrf	??___ftmul,f
  6974  04F6  3EFF               	addlw	-1
  6975  04F7  1D03               	skipz
  6976  04F8  2CF2               	goto	u312_25
  6977  04F9  0826               	movf	??___ftmul,w
  6978  04FA  00A9               	movwf	??___ftmul+3
  6979  04FB  0829               	movf	??___ftmul+3,w
  6980  04FC  06AF               	xorwf	___ftmul@sign,f
  6981  04FD  3080               	movlw	128
  6982  04FE  00A6               	movwf	??___ftmul
  6983  04FF  0826               	movf	??___ftmul,w
  6984  0500  05AF               	andwf	___ftmul@sign,f
  6985  0501  17A1               	bsf	___ftmul@f1+1,7
  6986  0502  17A4               	bsf	___ftmul@f2+1,7
  6987  0503  30FF               	movlw	255
  6988  0504  05A3               	andwf	___ftmul@f2,f
  6989  0505  30FF               	movlw	255
  6990  0506  05A4               	andwf	___ftmul@f2+1,f
  6991  0507  3000               	movlw	0
  6992  0508  05A5               	andwf	___ftmul@f2+2,f
  6993  0509  3000               	movlw	0
  6994  050A  00AB               	movwf	___ftmul@f3_as_product
  6995  050B  3000               	movlw	0
  6996  050C  00AC               	movwf	___ftmul@f3_as_product+1
  6997  050D  3000               	movlw	0
  6998  050E  00AD               	movwf	___ftmul@f3_as_product+2
  6999  050F  3007               	movlw	7
  7000  0510  00A6               	movwf	??___ftmul
  7001  0511  0826               	movf	??___ftmul,w
  7002  0512  00AE               	movwf	___ftmul@cntr
  7003  0513                     i1l2541:	
  7004  0513  1C20               	btfss	___ftmul@f1,0
  7005  0514  2D23               	goto	i1l2545
  7006  0515  0823               	movf	___ftmul@f2,w
  7007  0516  07AB               	addwf	___ftmul@f3_as_product,f
  7008  0517  0824               	movf	___ftmul@f2+1,w
  7009  0518  1103               	clrz
  7010  0519  1803               	skipnc
  7011  051A  0A24               	incf	___ftmul@f2+1,w
  7012  051B  1D03               	btfss	3,2
  7013  051C  07AC               	addwf	___ftmul@f3_as_product+1,f
  7014  051D  0825               	movf	___ftmul@f2+2,w
  7015  051E  1103               	clrz
  7016  051F  1803               	skipnc
  7017  0520  0A25               	incf	___ftmul@f2+2,w
  7018  0521  1D03               	btfss	3,2
  7019  0522  07AD               	addwf	___ftmul@f3_as_product+2,f
  7020  0523                     i1l2545:	
  7021  0523  3001               	movlw	1
  7022  0524                     u315_25:	
  7023  0524  1003               	clrc
  7024  0525  0CA2               	rrf	___ftmul@f1+2,f
  7025  0526  0CA1               	rrf	___ftmul@f1+1,f
  7026  0527  0CA0               	rrf	___ftmul@f1,f
  7027  0528  3EFF               	addlw	-1
  7028  0529  1D03               	skipz
  7029  052A  2D24               	goto	u315_25
  7030  052B  3001               	movlw	1
  7031  052C                     u316_25:	
  7032  052C  1003               	clrc
  7033  052D  0DA3               	rlf	___ftmul@f2,f
  7034  052E  0DA4               	rlf	___ftmul@f2+1,f
  7035  052F  0DA5               	rlf	___ftmul@f2+2,f
  7036  0530  3EFF               	addlw	-1
  7037  0531  1D03               	skipz
  7038  0532  2D2C               	goto	u316_25
  7039  0533  3001               	movlw	1
  7040  0534  02AE               	subwf	___ftmul@cntr,f
  7041  0535  1D03               	btfss	3,2
  7042  0536  2D13               	goto	i1l2541
  7043  0537  3009               	movlw	9
  7044  0538  00A6               	movwf	??___ftmul
  7045  0539  0826               	movf	??___ftmul,w
  7046  053A  00AE               	movwf	___ftmul@cntr
  7047  053B                     i1l2553:	
  7048  053B  1C20               	btfss	___ftmul@f1,0
  7049  053C  2D4B               	goto	i1l2557
  7050  053D  0823               	movf	___ftmul@f2,w
  7051  053E  07AB               	addwf	___ftmul@f3_as_product,f
  7052  053F  0824               	movf	___ftmul@f2+1,w
  7053  0540  1103               	clrz
  7054  0541  1803               	skipnc
  7055  0542  0A24               	incf	___ftmul@f2+1,w
  7056  0543  1D03               	btfss	3,2
  7057  0544  07AC               	addwf	___ftmul@f3_as_product+1,f
  7058  0545  0825               	movf	___ftmul@f2+2,w
  7059  0546  1103               	clrz
  7060  0547  1803               	skipnc
  7061  0548  0A25               	incf	___ftmul@f2+2,w
  7062  0549  1D03               	btfss	3,2
  7063  054A  07AD               	addwf	___ftmul@f3_as_product+2,f
  7064  054B                     i1l2557:	
  7065  054B  3001               	movlw	1
  7066  054C                     u320_25:	
  7067  054C  1003               	clrc
  7068  054D  0CA2               	rrf	___ftmul@f1+2,f
  7069  054E  0CA1               	rrf	___ftmul@f1+1,f
  7070  054F  0CA0               	rrf	___ftmul@f1,f
  7071  0550  3EFF               	addlw	-1
  7072  0551  1D03               	skipz
  7073  0552  2D4C               	goto	u320_25
  7074  0553  3001               	movlw	1
  7075  0554                     u321_25:	
  7076  0554  1003               	clrc
  7077  0555  0CAD               	rrf	___ftmul@f3_as_product+2,f
  7078  0556  0CAC               	rrf	___ftmul@f3_as_product+1,f
  7079  0557  0CAB               	rrf	___ftmul@f3_as_product,f
  7080  0558  3EFF               	addlw	-1
  7081  0559  1D03               	skipz
  7082  055A  2D54               	goto	u321_25
  7083  055B  3001               	movlw	1
  7084  055C  02AE               	subwf	___ftmul@cntr,f
  7085  055D  1D03               	btfss	3,2
  7086  055E  2D3B               	goto	i1l2553
  7087  055F  082B               	movf	___ftmul@f3_as_product,w
  7088  0560  00F0               	movwf	___ftpack@arg
  7089  0561  082C               	movf	___ftmul@f3_as_product+1,w
  7090  0562  00F1               	movwf	___ftpack@arg+1
  7091  0563  082D               	movf	___ftmul@f3_as_product+2,w
  7092  0564  00F2               	movwf	___ftpack@arg+2
  7093  0565  082A               	movf	___ftmul@exp,w
  7094  0566  00A6               	movwf	??___ftmul
  7095  0567  0826               	movf	??___ftmul,w
  7096  0568  00F3               	movwf	___ftpack@exp
  7097  0569  082F               	movf	___ftmul@sign,w
  7098  056A  00A7               	movwf	??___ftmul+1
  7099  056B  0827               	movf	??___ftmul+1,w
  7100  056C  00F4               	movwf	___ftpack@sign
  7101  056D  120A  118A  2796   	fcall	___ftpack
  7102  0570  0870               	movf	?___ftpack,w
  7103  0571  1283               	bcf	3,5	;RP0=0, select bank0
  7104  0572  1303               	bcf	3,6	;RP1=0, select bank0
  7105  0573  00A0               	movwf	?___ftmul
  7106  0574  0871               	movf	?___ftpack+1,w
  7107  0575  00A1               	movwf	?___ftmul+1
  7108  0576  0872               	movf	?___ftpack+2,w
  7109  0577  00A2               	movwf	?___ftmul+2
  7110  0578  0008               	return
  7111  0579                     __end_of___ftmul:	
  7112                           
  7113                           	psect	text38
  7114  0B54                     __ptext38:	
  7115 ;; *************** function ___ftge *****************
  7116 ;; Defined at:
  7117 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftge.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  ff1             3    0[COMMON] float 
  7120 ;;  ff2             3    3[COMMON] float 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;		None               void
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7132 ;;      Params:         6       0       0       0       0
  7133 ;;      Locals:         0       0       0       0       0
  7134 ;;      Temps:          6       0       0       0       0
  7135 ;;      Totals:        12       0       0       0       0
  7136 ;;Total ram usage:       12 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_ftoa
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           
  7146                           ;psect for function ___ftge
  7147  0B54                     ___ftge:	
  7148                           
  7149                           ;incstack = 0
  7150 ;; hardware stack exceeded
  7151                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7152  0B54  1FF2               	btfss	___ftge@ff1+2,7
  7153  0B55  2B7B               	goto	i1l2501
  7154  0B56  3000               	movlw	0
  7155  0B57  00F6               	movwf	??___ftge
  7156  0B58  3000               	movlw	0
  7157  0B59  00F7               	movwf	??___ftge+1
  7158  0B5A  3080               	movlw	128
  7159  0B5B  00F8               	movwf	??___ftge+2
  7160  0B5C  0970               	comf	___ftge@ff1,w
  7161  0B5D  00F9               	movwf	??___ftge+3
  7162  0B5E  0971               	comf	___ftge@ff1+1,w
  7163  0B5F  00FA               	movwf	??___ftge+4
  7164  0B60  0972               	comf	___ftge@ff1+2,w
  7165  0B61  00FB               	movwf	??___ftge+5
  7166  0B62  0AF9               	incf	??___ftge+3,f
  7167  0B63  1903               	skipnz
  7168  0B64  0AFA               	incf	??___ftge+4,f
  7169  0B65  1903               	skipnz
  7170  0B66  0AFB               	incf	??___ftge+5,f
  7171  0B67  0879               	movf	??___ftge+3,w
  7172  0B68  07F6               	addwf	??___ftge,f
  7173  0B69  087A               	movf	??___ftge+4,w
  7174  0B6A  1803               	skipnc
  7175  0B6B  0F7A               	incfsz	??___ftge+4,w
  7176  0B6C  2B6E               	goto	u305_21
  7177  0B6D  2B6F               	goto	u305_22
  7178  0B6E                     u305_21:	
  7179  0B6E  07F7               	addwf	??___ftge+1,f
  7180  0B6F                     u305_22:	
  7181  0B6F  087B               	movf	??___ftge+5,w
  7182  0B70  1803               	skipnc
  7183  0B71  0F7B               	incfsz	??___ftge+5,w
  7184  0B72  2B74               	goto	u305_23
  7185  0B73  2B75               	goto	u305_24
  7186  0B74                     u305_23:	
  7187  0B74  07F8               	addwf	??___ftge+2,f
  7188  0B75                     u305_24:	
  7189  0B75  0876               	movf	??___ftge,w
  7190  0B76  00F0               	movwf	___ftge@ff1
  7191  0B77  0877               	movf	??___ftge+1,w
  7192  0B78  00F1               	movwf	___ftge@ff1+1
  7193  0B79  0878               	movf	??___ftge+2,w
  7194  0B7A  00F2               	movwf	___ftge@ff1+2
  7195  0B7B                     i1l2501:	
  7196  0B7B  1FF5               	btfss	___ftge@ff2+2,7
  7197  0B7C  2BA2               	goto	i1l2505
  7198  0B7D  3000               	movlw	0
  7199  0B7E  00F6               	movwf	??___ftge
  7200  0B7F  3000               	movlw	0
  7201  0B80  00F7               	movwf	??___ftge+1
  7202  0B81  3080               	movlw	128
  7203  0B82  00F8               	movwf	??___ftge+2
  7204  0B83  0973               	comf	___ftge@ff2,w
  7205  0B84  00F9               	movwf	??___ftge+3
  7206  0B85  0974               	comf	___ftge@ff2+1,w
  7207  0B86  00FA               	movwf	??___ftge+4
  7208  0B87  0975               	comf	___ftge@ff2+2,w
  7209  0B88  00FB               	movwf	??___ftge+5
  7210  0B89  0AF9               	incf	??___ftge+3,f
  7211  0B8A  1903               	skipnz
  7212  0B8B  0AFA               	incf	??___ftge+4,f
  7213  0B8C  1903               	skipnz
  7214  0B8D  0AFB               	incf	??___ftge+5,f
  7215  0B8E  0879               	movf	??___ftge+3,w
  7216  0B8F  07F6               	addwf	??___ftge,f
  7217  0B90  087A               	movf	??___ftge+4,w
  7218  0B91  1803               	skipnc
  7219  0B92  0F7A               	incfsz	??___ftge+4,w
  7220  0B93  2B95               	goto	u307_21
  7221  0B94  2B96               	goto	u307_22
  7222  0B95                     u307_21:	
  7223  0B95  07F7               	addwf	??___ftge+1,f
  7224  0B96                     u307_22:	
  7225  0B96  087B               	movf	??___ftge+5,w
  7226  0B97  1803               	skipnc
  7227  0B98  0F7B               	incfsz	??___ftge+5,w
  7228  0B99  2B9B               	goto	u307_23
  7229  0B9A  2B9C               	goto	u307_24
  7230  0B9B                     u307_23:	
  7231  0B9B  07F8               	addwf	??___ftge+2,f
  7232  0B9C                     u307_24:	
  7233  0B9C  0876               	movf	??___ftge,w
  7234  0B9D  00F3               	movwf	___ftge@ff2
  7235  0B9E  0877               	movf	??___ftge+1,w
  7236  0B9F  00F4               	movwf	___ftge@ff2+1
  7237  0BA0  0878               	movf	??___ftge+2,w
  7238  0BA1  00F5               	movwf	___ftge@ff2+2
  7239  0BA2                     i1l2505:	
  7240  0BA2  3080               	movlw	128
  7241  0BA3  06F2               	xorwf	___ftge@ff1+2,f
  7242  0BA4  3080               	movlw	128
  7243  0BA5  06F5               	xorwf	___ftge@ff2+2,f
  7244  0BA6  0875               	movf	___ftge@ff2+2,w
  7245  0BA7  0272               	subwf	___ftge@ff1+2,w
  7246  0BA8  1D03               	skipz
  7247  0BA9  0008               	return
  7248  0BAA  0874               	movf	___ftge@ff2+1,w
  7249  0BAB  0271               	subwf	___ftge@ff1+1,w
  7250  0BAC  1D03               	skipz
  7251  0BAD  0008               	return
  7252  0BAE  0873               	movf	___ftge@ff2,w
  7253  0BAF  0270               	subwf	___ftge@ff1,w
  7254  0BB0  0008               	return
  7255  0BB1                     __end_of___ftge:	
  7256                           
  7257                           	psect	text39
  7258  0633                     __ptext39:	
  7259 ;; *************** function ___ftdiv *****************
  7260 ;; Defined at:
  7261 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  f2              3   16[BANK0 ] float 
  7264 ;;  f1              3   19[BANK0 ] float 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  f3              3   27[BANK0 ] float 
  7267 ;;  sign            1   31[BANK0 ] unsigned char 
  7268 ;;  exp             1   30[BANK0 ] unsigned char 
  7269 ;;  cntr            1   26[BANK0 ] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  3   16[BANK0 ] float 
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0, pclath, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7279 ;;      Params:         0       6       0       0       0
  7280 ;;      Locals:         0       6       0       0       0
  7281 ;;      Temps:          0       4       0       0       0
  7282 ;;      Totals:         0      16       0       0       0
  7283 ;;Total ram usage:       16 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    1
  7286 ;; This function calls:
  7287 ;;		___ftpack
  7288 ;; This function is called by:
  7289 ;;		_ISR
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           
  7294                           ;psect for function ___ftdiv
  7295  0633                     ___ftdiv:	
  7296                           
  7297                           ;incstack = 0
  7298 ;; hardware stack exceeded
  7299                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7300  0633  1283               	bcf	3,5	;RP0=0, select bank0
  7301  0634  1303               	bcf	3,6	;RP1=0, select bank0
  7302  0635  0833               	movf	___ftdiv@f1,w
  7303  0636  00B6               	movwf	??___ftdiv
  7304  0637  0834               	movf	___ftdiv@f1+1,w
  7305  0638  00B7               	movwf	??___ftdiv+1
  7306  0639  0835               	movf	___ftdiv@f1+2,w
  7307  063A  00B8               	movwf	??___ftdiv+2
  7308  063B  1003               	clrc
  7309  063C  0D37               	rlf	??___ftdiv+1,w
  7310  063D  0D38               	rlf	??___ftdiv+2,w
  7311  063E  00B9               	movwf	??___ftdiv+3
  7312  063F  0839               	movf	??___ftdiv+3,w
  7313  0640  00BE               	movwf	___ftdiv@exp
  7314  0641  08BE               	movf	___ftdiv@exp,f
  7315  0642  1D03               	skipz
  7316  0643  2E4B               	goto	i1l2875
  7317  0644  3000               	movlw	0
  7318  0645  00B0               	movwf	?___ftdiv
  7319  0646  3000               	movlw	0
  7320  0647  00B1               	movwf	?___ftdiv+1
  7321  0648  3000               	movlw	0
  7322  0649  00B2               	movwf	?___ftdiv+2
  7323  064A  0008               	return
  7324  064B                     i1l2875:	
  7325  064B  0830               	movf	___ftdiv@f2,w
  7326  064C  00B6               	movwf	??___ftdiv
  7327  064D  0831               	movf	___ftdiv@f2+1,w
  7328  064E  00B7               	movwf	??___ftdiv+1
  7329  064F  0832               	movf	___ftdiv@f2+2,w
  7330  0650  00B8               	movwf	??___ftdiv+2
  7331  0651  1003               	clrc
  7332  0652  0D37               	rlf	??___ftdiv+1,w
  7333  0653  0D38               	rlf	??___ftdiv+2,w
  7334  0654  00B9               	movwf	??___ftdiv+3
  7335  0655  0839               	movf	??___ftdiv+3,w
  7336  0656  00BF               	movwf	___ftdiv@sign
  7337  0657  08BF               	movf	___ftdiv@sign,f
  7338  0658  1D03               	skipz
  7339  0659  2E61               	goto	i1l2881
  7340  065A  3000               	movlw	0
  7341  065B  00B0               	movwf	?___ftdiv
  7342  065C  3000               	movlw	0
  7343  065D  00B1               	movwf	?___ftdiv+1
  7344  065E  3000               	movlw	0
  7345  065F  00B2               	movwf	?___ftdiv+2
  7346  0660  0008               	return
  7347  0661                     i1l2881:	
  7348  0661  3000               	movlw	0
  7349  0662  00BB               	movwf	___ftdiv@f3
  7350  0663  3000               	movlw	0
  7351  0664  00BC               	movwf	___ftdiv@f3+1
  7352  0665  3000               	movlw	0
  7353  0666  00BD               	movwf	___ftdiv@f3+2
  7354  0667  3089               	movlw	137
  7355  0668  073F               	addwf	___ftdiv@sign,w
  7356  0669  00B6               	movwf	??___ftdiv
  7357  066A  0836               	movf	??___ftdiv,w
  7358  066B  02BE               	subwf	___ftdiv@exp,f
  7359  066C  0833               	movf	___ftdiv@f1,w
  7360  066D  00B6               	movwf	??___ftdiv
  7361  066E  0834               	movf	___ftdiv@f1+1,w
  7362  066F  00B7               	movwf	??___ftdiv+1
  7363  0670  0835               	movf	___ftdiv@f1+2,w
  7364  0671  00B8               	movwf	??___ftdiv+2
  7365  0672  3010               	movlw	16
  7366  0673                     u362_25:	
  7367  0673  1003               	clrc
  7368  0674  0CB8               	rrf	??___ftdiv+2,f
  7369  0675  0CB7               	rrf	??___ftdiv+1,f
  7370  0676  0CB6               	rrf	??___ftdiv,f
  7371  0677  3EFF               	addlw	-1
  7372  0678  1D03               	skipz
  7373  0679  2E73               	goto	u362_25
  7374  067A  0836               	movf	??___ftdiv,w
  7375  067B  00B9               	movwf	??___ftdiv+3
  7376  067C  0839               	movf	??___ftdiv+3,w
  7377  067D  00BF               	movwf	___ftdiv@sign
  7378  067E  0830               	movf	___ftdiv@f2,w
  7379  067F  00B6               	movwf	??___ftdiv
  7380  0680  0831               	movf	___ftdiv@f2+1,w
  7381  0681  00B7               	movwf	??___ftdiv+1
  7382  0682  0832               	movf	___ftdiv@f2+2,w
  7383  0683  00B8               	movwf	??___ftdiv+2
  7384  0684  3010               	movlw	16
  7385  0685                     u363_25:	
  7386  0685  1003               	clrc
  7387  0686  0CB8               	rrf	??___ftdiv+2,f
  7388  0687  0CB7               	rrf	??___ftdiv+1,f
  7389  0688  0CB6               	rrf	??___ftdiv,f
  7390  0689  3EFF               	addlw	-1
  7391  068A  1D03               	skipz
  7392  068B  2E85               	goto	u363_25
  7393  068C  0836               	movf	??___ftdiv,w
  7394  068D  00B9               	movwf	??___ftdiv+3
  7395  068E  0839               	movf	??___ftdiv+3,w
  7396  068F  06BF               	xorwf	___ftdiv@sign,f
  7397  0690  3080               	movlw	128
  7398  0691  00B6               	movwf	??___ftdiv
  7399  0692  0836               	movf	??___ftdiv,w
  7400  0693  05BF               	andwf	___ftdiv@sign,f
  7401  0694  17B4               	bsf	___ftdiv@f1+1,7
  7402  0695  30FF               	movlw	255
  7403  0696  05B3               	andwf	___ftdiv@f1,f
  7404  0697  30FF               	movlw	255
  7405  0698  05B4               	andwf	___ftdiv@f1+1,f
  7406  0699  3000               	movlw	0
  7407  069A  05B5               	andwf	___ftdiv@f1+2,f
  7408  069B  17B1               	bsf	___ftdiv@f2+1,7
  7409  069C  30FF               	movlw	255
  7410  069D  05B0               	andwf	___ftdiv@f2,f
  7411  069E  30FF               	movlw	255
  7412  069F  05B1               	andwf	___ftdiv@f2+1,f
  7413  06A0  3000               	movlw	0
  7414  06A1  05B2               	andwf	___ftdiv@f2+2,f
  7415  06A2  3018               	movlw	24
  7416  06A3  00B6               	movwf	??___ftdiv
  7417  06A4  0836               	movf	??___ftdiv,w
  7418  06A5  00BA               	movwf	___ftdiv@cntr
  7419  06A6                     i1l2895:	
  7420  06A6  3001               	movlw	1
  7421  06A7                     u364_25:	
  7422  06A7  1003               	clrc
  7423  06A8  0DBB               	rlf	___ftdiv@f3,f
  7424  06A9  0DBC               	rlf	___ftdiv@f3+1,f
  7425  06AA  0DBD               	rlf	___ftdiv@f3+2,f
  7426  06AB  3EFF               	addlw	-1
  7427  06AC  1D03               	skipz
  7428  06AD  2EA7               	goto	u364_25
  7429  06AE  0832               	movf	___ftdiv@f2+2,w
  7430  06AF  0235               	subwf	___ftdiv@f1+2,w
  7431  06B0  1D03               	skipz
  7432  06B1  2EB8               	goto	u365_25
  7433  06B2  0831               	movf	___ftdiv@f2+1,w
  7434  06B3  0234               	subwf	___ftdiv@f1+1,w
  7435  06B4  1D03               	skipz
  7436  06B5  2EB8               	goto	u365_25
  7437  06B6  0830               	movf	___ftdiv@f2,w
  7438  06B7  0233               	subwf	___ftdiv@f1,w
  7439  06B8                     u365_25:	
  7440  06B8  1C03               	skipc
  7441  06B9  2EC5               	goto	i1l2903
  7442  06BA  0830               	movf	___ftdiv@f2,w
  7443  06BB  02B3               	subwf	___ftdiv@f1,f
  7444  06BC  0831               	movf	___ftdiv@f2+1,w
  7445  06BD  1C03               	skipc
  7446  06BE  0F31               	incfsz	___ftdiv@f2+1,w
  7447  06BF  02B4               	subwf	___ftdiv@f1+1,f
  7448  06C0  0832               	movf	___ftdiv@f2+2,w
  7449  06C1  1C03               	skipc
  7450  06C2  0A32               	incf	___ftdiv@f2+2,w
  7451  06C3  02B5               	subwf	___ftdiv@f1+2,f
  7452  06C4  143B               	bsf	___ftdiv@f3,0
  7453  06C5                     i1l2903:	
  7454  06C5  3001               	movlw	1
  7455  06C6                     u366_25:	
  7456  06C6  1003               	clrc
  7457  06C7  0DB3               	rlf	___ftdiv@f1,f
  7458  06C8  0DB4               	rlf	___ftdiv@f1+1,f
  7459  06C9  0DB5               	rlf	___ftdiv@f1+2,f
  7460  06CA  3EFF               	addlw	-1
  7461  06CB  1D03               	skipz
  7462  06CC  2EC6               	goto	u366_25
  7463  06CD  3001               	movlw	1
  7464  06CE  02BA               	subwf	___ftdiv@cntr,f
  7465  06CF  1D03               	btfss	3,2
  7466  06D0  2EA6               	goto	i1l2895
  7467  06D1  083B               	movf	___ftdiv@f3,w
  7468  06D2  00F0               	movwf	___ftpack@arg
  7469  06D3  083C               	movf	___ftdiv@f3+1,w
  7470  06D4  00F1               	movwf	___ftpack@arg+1
  7471  06D5  083D               	movf	___ftdiv@f3+2,w
  7472  06D6  00F2               	movwf	___ftpack@arg+2
  7473  06D7  083E               	movf	___ftdiv@exp,w
  7474  06D8  00B6               	movwf	??___ftdiv
  7475  06D9  0836               	movf	??___ftdiv,w
  7476  06DA  00F3               	movwf	___ftpack@exp
  7477  06DB  083F               	movf	___ftdiv@sign,w
  7478  06DC  00B7               	movwf	??___ftdiv+1
  7479  06DD  0837               	movf	??___ftdiv+1,w
  7480  06DE  00F4               	movwf	___ftpack@sign
  7481  06DF  120A  118A  2796   	fcall	___ftpack
  7482  06E2  0870               	movf	?___ftpack,w
  7483  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  7484  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  7485  06E5  00B0               	movwf	?___ftdiv
  7486  06E6  0871               	movf	?___ftpack+1,w
  7487  06E7  00B1               	movwf	?___ftdiv+1
  7488  06E8  0872               	movf	?___ftpack+2,w
  7489  06E9  00B2               	movwf	?___ftdiv+2
  7490  06EA  0008               	return
  7491  06EB                     __end_of___ftdiv:	
  7492                           
  7493                           	psect	text40
  7494  1720                     __ptext40:	
  7495 ;; *************** function ___awtoft *****************
  7496 ;; Defined at:
  7497 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  c               2    8[COMMON] int 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  sign            1   13[COMMON] unsigned char 
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  3    8[COMMON] float 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0, pclath, cstack
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7511 ;;      Params:         3       0       0       0       0
  7512 ;;      Locals:         1       0       0       0       0
  7513 ;;      Temps:          2       0       0       0       0
  7514 ;;      Totals:         6       0       0       0       0
  7515 ;;Total ram usage:        6 bytes
  7516 ;; Hardware stack levels used:    1
  7517 ;; Hardware stack levels required when called:    1
  7518 ;; This function calls:
  7519 ;;		___ftpack
  7520 ;; This function is called by:
  7521 ;;		_ISR
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           
  7526                           ;psect for function ___awtoft
  7527  1720                     ___awtoft:	
  7528                           
  7529                           ;incstack = 0
  7530 ;; hardware stack exceeded
  7531                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7532  1720  01FD               	clrf	___awtoft@sign
  7533  1721  1FF9               	btfss	___awtoft@c+1,7
  7534  1722  2F2A               	goto	i1l2865
  7535  1723  09F8               	comf	___awtoft@c,f
  7536  1724  09F9               	comf	___awtoft@c+1,f
  7537  1725  0AF8               	incf	___awtoft@c,f
  7538  1726  1903               	skipnz
  7539  1727  0AF9               	incf	___awtoft@c+1,f
  7540  1728  01FD               	clrf	___awtoft@sign
  7541  1729  0AFD               	incf	___awtoft@sign,f
  7542  172A                     i1l2865:	
  7543  172A  0878               	movf	___awtoft@c,w
  7544  172B  00F0               	movwf	___ftpack@arg
  7545  172C  0879               	movf	___awtoft@c+1,w
  7546  172D  00F1               	movwf	___ftpack@arg+1
  7547  172E  01F2               	clrf	___ftpack@arg+2
  7548  172F  308E               	movlw	142
  7549  1730  00FB               	movwf	??___awtoft
  7550  1731  087B               	movf	??___awtoft,w
  7551  1732  00F3               	movwf	___ftpack@exp
  7552  1733  087D               	movf	___awtoft@sign,w
  7553  1734  00FC               	movwf	??___awtoft+1
  7554  1735  087C               	movf	??___awtoft+1,w
  7555  1736  00F4               	movwf	___ftpack@sign
  7556  1737  120A  118A  2796   	fcall	___ftpack
  7557  173A  0870               	movf	?___ftpack,w
  7558  173B  00F8               	movwf	?___awtoft
  7559  173C  0871               	movf	?___ftpack+1,w
  7560  173D  00F9               	movwf	?___awtoft+1
  7561  173E  0872               	movf	?___ftpack+2,w
  7562  173F  00FA               	movwf	?___awtoft+2
  7563  1740  0008               	return
  7564  1741                     __end_of___awtoft:	
  7565                           
  7566                           	psect	text41
  7567  0796                     __ptext41:	
  7568 ;; *************** function ___ftpack *****************
  7569 ;; Defined at:
  7570 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  arg             3    0[COMMON] unsigned um
  7573 ;;  exp             1    3[COMMON] unsigned char 
  7574 ;;  sign            1    4[COMMON] unsigned char 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  3    0[COMMON] float 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7586 ;;      Params:         5       0       0       0       0
  7587 ;;      Locals:         0       0       0       0       0
  7588 ;;      Temps:          3       0       0       0       0
  7589 ;;      Totals:         8       0       0       0       0
  7590 ;;Total ram usage:        8 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; This function calls:
  7593 ;;		Nothing
  7594 ;; This function is called by:
  7595 ;;		___awtoft
  7596 ;;		___ftadd
  7597 ;;		___ftdiv
  7598 ;;		___ftmul
  7599 ;;		___lltoft
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           
  7604                           ;psect for function ___ftpack
  7605  0796                     ___ftpack:	
  7606                           
  7607                           ;incstack = 0
  7608 ;; hardware stack exceeded
  7609                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7610  0796  0873               	movf	___ftpack@exp,w
  7611  0797  1903               	btfsc	3,2
  7612  0798  2F9E               	goto	i1l1989
  7613  0799  0872               	movf	___ftpack@arg+2,w
  7614  079A  0471               	iorwf	___ftpack@arg+1,w
  7615  079B  0470               	iorwf	___ftpack@arg,w
  7616  079C  1D03               	skipz
  7617  079D  2FB1               	goto	i1l1995
  7618  079E                     i1l1989:	
  7619  079E  3000               	movlw	0
  7620  079F  00F0               	movwf	?___ftpack
  7621  07A0  3000               	movlw	0
  7622  07A1  00F1               	movwf	?___ftpack+1
  7623  07A2  3000               	movlw	0
  7624  07A3  00F2               	movwf	?___ftpack+2
  7625  07A4  0008               	return
  7626  07A5                     i1l1993:	
  7627  07A5  3001               	movlw	1
  7628  07A6  00F5               	movwf	??___ftpack
  7629  07A7  0875               	movf	??___ftpack,w
  7630  07A8  07F3               	addwf	___ftpack@exp,f
  7631  07A9  3001               	movlw	1
  7632  07AA                     u203_25:	
  7633  07AA  1003               	clrc
  7634  07AB  0CF2               	rrf	___ftpack@arg+2,f
  7635  07AC  0CF1               	rrf	___ftpack@arg+1,f
  7636  07AD  0CF0               	rrf	___ftpack@arg,f
  7637  07AE  3EFF               	addlw	-1
  7638  07AF  1D03               	skipz
  7639  07B0  2FAA               	goto	u203_25
  7640  07B1                     i1l1995:	
  7641  07B1  30FE               	movlw	254
  7642  07B2  0572               	andwf	___ftpack@arg+2,w
  7643  07B3  1903               	btfsc	3,2
  7644  07B4  2FCC               	goto	i1l550
  7645  07B5  2FA5               	goto	i1l1993
  7646  07B6                     i1l1997:	
  7647  07B6  3001               	movlw	1
  7648  07B7  00F5               	movwf	??___ftpack
  7649  07B8  0875               	movf	??___ftpack,w
  7650  07B9  07F3               	addwf	___ftpack@exp,f
  7651  07BA  3001               	movlw	1
  7652  07BB  07F0               	addwf	___ftpack@arg,f
  7653  07BC  3000               	movlw	0
  7654  07BD  1803               	skipnc
  7655  07BE  3001               	movlw	1
  7656  07BF  07F1               	addwf	___ftpack@arg+1,f
  7657  07C0  3000               	movlw	0
  7658  07C1  1803               	skipnc
  7659  07C2  3001               	movlw	1
  7660  07C3  07F2               	addwf	___ftpack@arg+2,f
  7661  07C4  3001               	movlw	1
  7662  07C5                     u205_25:	
  7663  07C5  1003               	clrc
  7664  07C6  0CF2               	rrf	___ftpack@arg+2,f
  7665  07C7  0CF1               	rrf	___ftpack@arg+1,f
  7666  07C8  0CF0               	rrf	___ftpack@arg,f
  7667  07C9  3EFF               	addlw	-1
  7668  07CA  1D03               	skipz
  7669  07CB  2FC5               	goto	u205_25
  7670  07CC                     i1l550:	
  7671  07CC  30FF               	movlw	255
  7672  07CD  0572               	andwf	___ftpack@arg+2,w
  7673  07CE  1903               	btfsc	3,2
  7674  07CF  2FDB               	goto	i1l2005
  7675  07D0  2FB6               	goto	i1l1997
  7676  07D1                     i1l2003:	
  7677  07D1  3001               	movlw	1
  7678  07D2  02F3               	subwf	___ftpack@exp,f
  7679  07D3  3001               	movlw	1
  7680  07D4                     u207_25:	
  7681  07D4  1003               	clrc
  7682  07D5  0DF0               	rlf	___ftpack@arg,f
  7683  07D6  0DF1               	rlf	___ftpack@arg+1,f
  7684  07D7  0DF2               	rlf	___ftpack@arg+2,f
  7685  07D8  3EFF               	addlw	-1
  7686  07D9  1D03               	skipz
  7687  07DA  2FD4               	goto	u207_25
  7688  07DB                     i1l2005:	
  7689  07DB  1FF1               	btfss	___ftpack@arg+1,7
  7690  07DC  2FD1               	goto	i1l2003
  7691  07DD  1873               	btfsc	___ftpack@exp,0
  7692  07DE  2FE5               	goto	i1l556
  7693  07DF  30FF               	movlw	255
  7694  07E0  05F0               	andwf	___ftpack@arg,f
  7695  07E1  307F               	movlw	127
  7696  07E2  05F1               	andwf	___ftpack@arg+1,f
  7697  07E3  30FF               	movlw	255
  7698  07E4  05F2               	andwf	___ftpack@arg+2,f
  7699  07E5                     i1l556:	
  7700  07E5  1003               	clrc
  7701  07E6  0CF3               	rrf	___ftpack@exp,f
  7702  07E7  0873               	movf	___ftpack@exp,w
  7703  07E8  00F5               	movwf	??___ftpack
  7704  07E9  01F6               	clrf	??___ftpack+1
  7705  07EA  01F7               	clrf	??___ftpack+2
  7706  07EB  3010               	movlw	16
  7707  07EC                     u210_25:	
  7708  07EC  1003               	clrc
  7709  07ED  0DF5               	rlf	??___ftpack,f
  7710  07EE  0DF6               	rlf	??___ftpack+1,f
  7711  07EF  0DF7               	rlf	??___ftpack+2,f
  7712  07F0  3EFF               	addlw	-1
  7713  07F1  1D03               	skipz
  7714  07F2  2FEC               	goto	u210_25
  7715  07F3  0875               	movf	??___ftpack,w
  7716  07F4  04F0               	iorwf	___ftpack@arg,f
  7717  07F5  0876               	movf	??___ftpack+1,w
  7718  07F6  04F1               	iorwf	___ftpack@arg+1,f
  7719  07F7  0877               	movf	??___ftpack+2,w
  7720  07F8  04F2               	iorwf	___ftpack@arg+2,f
  7721  07F9  0874               	movf	___ftpack@sign,w
  7722  07FA  1903               	btfsc	3,2
  7723  07FB  0008               	return
  7724  07FC  17F2               	bsf	___ftpack@arg+2,7
  7725  07FD  0008               	return
  7726  07FE                     __end_of___ftpack:	
  7727                           
  7728                           	psect	text42
  7729  16CD                     __ptext42:	
  7730 ;; *************** function _USARTReceiveChar *****************
  7731 ;; Defined at:
  7732 ;;		line 98 in file "main.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  USARTData       1    4[COMMON] unsigned char 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      unsigned char 
  7739 ;; Registers used:
  7740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7746 ;;      Params:         0       0       0       0       0
  7747 ;;      Locals:         1       0       0       0       0
  7748 ;;      Temps:          1       0       0       0       0
  7749 ;;      Totals:         2       0       0       0       0
  7750 ;;Total ram usage:        2 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    2
  7753 ;; This function calls:
  7754 ;;		_USARTWriteString
  7755 ;; This function is called by:
  7756 ;;		_ISR
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           
  7761                           ;psect for function _USARTReceiveChar
  7762  16CD                     _USARTReceiveChar:	
  7763                           
  7764                           ;main.c: 100: unsigned char USARTData;
  7765                           ;main.c: 102: if (!OERR)
  7766                           
  7767                           ;incstack = 0
  7768 ;; hardware stack exceeded
  7769                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7770  16CD  1283               	bcf	3,5	;RP0=0, select bank0
  7771  16CE  1303               	bcf	3,6	;RP1=0, select bank0
  7772  16CF  1898               	btfsc	24,1	;volatile
  7773  16D0  2ED6               	goto	i1l2685
  7774                           
  7775                           ;main.c: 103: {
  7776                           ;main.c: 104: USARTData = RCREG;
  7777  16D1  081A               	movf	26,w	;volatile
  7778  16D2  00F3               	movwf	??_USARTReceiveChar
  7779  16D3  0873               	movf	??_USARTReceiveChar,w
  7780  16D4  00F4               	movwf	USARTReceiveChar@USARTData
  7781  16D5  2EE5               	goto	i1l2693
  7782  16D6                     i1l2685:	
  7783                           ;main.c: 106: } else {
  7784                           
  7785                           ;main.c: 105: PIR1bits.RCIF = 0;
  7786                           
  7787                           
  7788                           ;main.c: 107: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7789  16D6  3033               	movlw	low (STR_1-__stringbase)
  7790  16D7  00F1               	movwf	USARTWriteString@str
  7791  16D8  3080               	movlw	128
  7792  16D9  00F2               	movwf	USARTWriteString@str+1
  7793  16DA  160A  118A  2741   	fcall	_USARTWriteString
  7794                           
  7795                           ;main.c: 109: RCSTAbits.CREN = 0;
  7796  16DD  1283               	bcf	3,5	;RP0=0, select bank0
  7797  16DE  1303               	bcf	3,6	;RP1=0, select bank0
  7798  16DF  1218               	bcf	24,4	;volatile
  7799                           
  7800                           ;main.c: 110: USARTData = RCREG;
  7801  16E0  081A               	movf	26,w	;volatile
  7802  16E1  00F3               	movwf	??_USARTReceiveChar
  7803  16E2  0873               	movf	??_USARTReceiveChar,w
  7804  16E3  00F4               	movwf	USARTReceiveChar@USARTData
  7805                           
  7806                           ;main.c: 111: RCSTAbits.CREN = 1;
  7807  16E4  1618               	bsf	24,4	;volatile
  7808  16E5                     i1l2693:	
  7809                           
  7810                           ;main.c: 112: PIR1bits.RCIF = 0;
  7811  16E5  128C               	bcf	12,5	;volatile
  7812                           
  7813                           ;main.c: 113: }
  7814                           ;main.c: 115: return (USARTData);
  7815  16E6  0874               	movf	USARTReceiveChar@USARTData,w
  7816  16E7  0008               	return
  7817  16E8                     __end_of_USARTReceiveChar:	
  7818                           
  7819                           	psect	text43
  7820  1741                     __ptext43:	
  7821 ;; *************** function _USARTWriteString *****************
  7822 ;; Defined at:
  7823 ;;		line 85 in file "main.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  str             2    1[COMMON] PTR const unsigned char 
  7826 ;;		 -> sendSerial@origem(40), STR_1(40), 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;		None
  7829 ;; Return value:  Size  Location     Type
  7830 ;;		None               void
  7831 ;; Registers used:
  7832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7838 ;;      Params:         2       0       0       0       0
  7839 ;;      Locals:         0       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0
  7841 ;;      Totals:         2       0       0       0       0
  7842 ;;Total ram usage:        2 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    1
  7845 ;; This function calls:
  7846 ;;		i1_USARTWriteChar
  7847 ;; This function is called by:
  7848 ;;		_USARTReceiveChar
  7849 ;;		_sendSerial
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _USARTWriteString
  7855  1741                     _USARTWriteString:	
  7856  1741                     i1l2297:	
  7857                           ;main.c: 87: while (*str != '\0') {
  7858                           
  7859                           ;incstack = 0
  7860 ;; hardware stack exceeded
  7861                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7862                           
  7863  1741  0872               	movf	USARTWriteString@str+1,w
  7864  1742  1283               	bcf	3,5	;RP0=0, select bank0
  7865  1743  1303               	bcf	3,6	;RP1=0, select bank0
  7866  1744  00FF               	movwf	127
  7867  1745  0871               	movf	USARTWriteString@str,w
  7868  1746  0084               	movwf	4
  7869  1747  120A  158A  2000  160A  118A  	fcall	stringtab
  7870  174C  3800               	iorlw	0
  7871  174D  1903               	btfsc	3,2
  7872  174E  0008               	return
  7873                           
  7874                           ;main.c: 89: USARTWriteChar(*str);
  7875  174F  0872               	movf	USARTWriteString@str+1,w
  7876  1750  1283               	bcf	3,5	;RP0=0, select bank0
  7877  1751  1303               	bcf	3,6	;RP1=0, select bank0
  7878  1752  00FF               	movwf	127
  7879  1753  0871               	movf	USARTWriteString@str,w
  7880  1754  0084               	movwf	4
  7881  1755  120A  158A  2000  160A  118A  	fcall	stringtab
  7882  175A  160A  118A  2641  160A  118A  	fcall	i1_USARTWriteChar
  7883                           
  7884                           ;main.c: 90: str++;
  7885  175F  3001               	movlw	1
  7886  1760  07F1               	addwf	USARTWriteString@str,f
  7887  1761  1803               	skipnc
  7888  1762  0AF2               	incf	USARTWriteString@str+1,f
  7889  1763  2F41               	goto	i1l2297
  7890  1764                     __end_of_USARTWriteString:	
  7891                           
  7892                           	psect	text44
  7893  1641                     __ptext44:	
  7894 ;; *************** function i1_USARTWriteChar *****************
  7895 ;; Defined at:
  7896 ;;		line 76 in file "main.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  USARTData       1    wreg     unsigned char 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  USARTData       1    0[COMMON] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;		None               void
  7903 ;; Registers used:
  7904 ;;		wreg
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7910 ;;      Params:         0       0       0       0       0
  7911 ;;      Locals:         1       0       0       0       0
  7912 ;;      Temps:          0       0       0       0       0
  7913 ;;      Totals:         1       0       0       0       0
  7914 ;;Total ram usage:        1 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; This function calls:
  7917 ;;		Nothing
  7918 ;; This function is called by:
  7919 ;;		_USARTWriteString
  7920 ;;		_ISR
  7921 ;;		i1_Ativar
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           
  7926                           ;psect for function i1_USARTWriteChar
  7927  1641                     i1_USARTWriteChar:	
  7928                           
  7929                           ;incstack = 0
  7930                           ; Regs used in i1_USARTWriteChar: [wreg]
  7931                           ;i1USARTWriteChar@USARTData stored from wreg
  7932  1641  00F0               	movwf	i1USARTWriteChar@USARTData
  7933  1642                     i1l86:	
  7934                           ;main.c: 77: while (!PIR1bits.TXIF);
  7935                           
  7936  1642  1283               	bcf	3,5	;RP0=0, select bank0
  7937  1643  1303               	bcf	3,6	;RP1=0, select bank0
  7938  1644  1E0C               	btfss	12,4	;volatile
  7939  1645  2E42               	goto	i1l86
  7940                           
  7941                           ;main.c: 78: TXREG = USARTData;
  7942  1646  0870               	movf	i1USARTWriteChar@USARTData,w
  7943  1647  0099               	movwf	25	;volatile
  7944  1648  0008               	return
  7945  1649                     __end_ofi1_USARTWriteChar:	
  7946  007E                     btemp	set	126	;btemp
  7947  007E                     wtemp	set	126
  7948  007E                     wtemp0	set	126
  7949  0080                     wtemp1	set	128
  7950  0082                     wtemp2	set	130
  7951  0084                     wtemp3	set	132
  7952  0086                     wtemp4	set	134
  7953  0088                     wtemp5	set	136
  7954  007F                     wtemp6	set	127
  7955  007E                     ttemp	set	126
  7956  007E                     ttemp0	set	126
  7957  0081                     ttemp1	set	129
  7958  0084                     ttemp2	set	132
  7959  0087                     ttemp3	set	135
  7960  007F                     ttemp4	set	127
  7961  007E                     ltemp	set	126
  7962  007E                     ltemp0	set	126
  7963  0082                     ltemp1	set	130
  7964  0086                     ltemp2	set	134
  7965  0080                     ltemp3	set	128


Data Sizes:
    Strings     76
    Constant    50
    Data        16
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      79
    BANK1            80     30      69
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status(BANK0[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_5(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S684$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK1[17]), STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> progressBar@aux(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    progressBar@result	PTR unsigned char  size(1) Largest target is 16
		 -> progressBar@aux(BANK0[16]), 

    sendSerial@envio	PTR const unsigned char  size(1) Largest target is 40
		 -> sendSerial@origem(BANK0[40]), 

    sendSerial@nivelRecipiente	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> sendSerial@origem(BANK0[40]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    _sendSerial->_USARTWriteString
    _refresh->i1_Ativar
    i1_Ativar->i1_USARTWriteChar
    _progressBar->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _USARTReceiveChar->_USARTWriteString
    _USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_inicialize
    _inicialize->_USARTInit
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTInit->___aldiv
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble
    _ativar->_ADCRead
    _ativar->_Ativar
    _Ativar->_USARTWriteChar

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4601
                             _ativar
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    4275
                                             27 BANK1      3     3      0
                            _ADCInit
                           _LCDClear
                          _USARTInit
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    1922
                                             12 BANK1      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    1661
                                              9 BANK1      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1     951
                                              5 BANK1      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0     868
                                              5 BANK1      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                           12     6      6     819
                                             15 BANK1     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     556
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     666
                                              5 BANK1      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     666
                                              2 BANK1      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0      88
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ativar                                               3     3      0     326
                                              3 BANK1      3     3      0
                            _ADCRead
                             _Ativar
 ---------------------------------------------------------------------------------
 (2) _Ativar                                               2     2      0     154
                                              1 BANK1      2     2      0
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2     172
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 21    21      0   23489
                                             50 BANK0     21    21      0
                   _USARTReceiveChar
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                        _progressBar
                            _refresh
                         _sendSerial
                           i1_Ativar
                   i1_USARTWriteChar
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) _sendSerial                                          45    45      0     480
                                              3 COMMON     1     1      0
                                              0 BANK0     44    44      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _refresh                                              0     0      0     154
                           i1_Ativar
 ---------------------------------------------------------------------------------
 (8) i1_Ativar                                             2     2      0     154
                                              1 COMMON     2     2      0
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (8) _progressBar                                         25    23      2    1093
                                              0 BANK0     25    23      2
               i1_lcd_escreve_string
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     219
                                              3 COMMON     2     2      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (9) _USARTWriteString                                     2     0      2     195
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ativar
     _ADCRead
     _Ativar
       _USARTWriteChar
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTInit
       ___aldiv
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     _USARTWriteString
       i1_USARTWriteChar
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _progressBar
     i1_lcd_escreve_string
       i1_lcd_putc
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
         i1_lcd_gotoxy
           i1_lcd_envia_byte
             i1_lcd_envia_nibble
   _refresh
     i1_Ativar
       i1_USARTWriteChar
   _sendSerial
     _USARTWriteString
       i1_USARTWriteChar
   i1_Ativar
     i1_USARTWriteChar
   i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1E      45       7       86.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     47      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A2      12        0.0%
ABS                  0      0      A2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Nov 06 07:48:38 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l86 1667  
                           fsr 0004            ___wmul@multiplicand 0072                i1Ativar@comando 0072  
                 ___ftadd@exp1 0026                   ___ftadd@exp2 0025                   ___ftadd@sign 0024  
                          l203 0908                            l204 090B                            l148 08BE  
                          l444 0EE0              i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000  
                          _ISR 0271                            fsr0 0004                __end_of_ADCInit 16B3  
              __end_of_ADCRead 08C1                            indf 0000                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 0960                    lcd_gotoxy@x 00A7                    lcd_gotoxy@y 00A5  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                 ___ftdiv@sign 003F                           l2101 0F46                           l2031 0A1E  
                         l2105 0F54                           l2035 0A32                           l2043 0A53  
                         l2037 0A3D                           l2311 0726                           l2039 0A48  
                         l2305 0709                           l2323 075E                           l2317 0742  
                         l2253 0C29                           l2341 08C1                           l2087 0F01  
                         l2079 0EF1                           l2329 077B                           l2097 0F39  
                         l2089 0F11                           l2361 0C9B                           l2801 0D07  
                         l2369 0CB6                           l2805 0D15                           l1981 1711  
                         l1979 1710                           l2955 165E                           STR_1 0842  
                         STR_2 0885                           STR_3 088C                           STR_4 086A  
                         STR_5 087A                           u2235 0F05                           u4007 0A14  
                         u2255 0F13                           u4017 08FC                           u2265 0F28  
                         u4027 0B4E                           u2275 0F3A                           u4037 0CE7  
                         u4047 0D2D                           u4057 0D47                           u2705 0C32  
                         u4067 08B8                           u1975 0914                           u2695 0C20  
                         u3917 0D7A                           u3927 0D8D                           u3937 0D9D  
                         u3947 0DBC                           u3957 0A2C                           i1l86 1642  
                         u3967 0C8F                           u3977 0CA7                           _OERR 00C1  
                         u3987 09EA                           u3997 09FF                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 1671                           _main 1659                           _ftoa 0579  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E               __end_of_DESLIGAR 083D  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                          ??_ISR 0052  
             __end_of_LCDClear 0A1A                   ___fttol@exp1 003D                   ___fttol@lval 0039  
   __end_of_lcd_escreve_string 08F2                __end_of___aldiv 0F5D                          ?_main 0070  
                        ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A                __end_of___ftadd 04A6  
                __CFG_WDTE$OFF 0000      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 06EB  
              __end_of___ftneg 1651                __end_of___lldiv 0C0F                __end_of___ftmul 0579  
              __end_of___llmod 0AFB                __end_of___ftsub 1704                __end_of___fttol 0ECE  
                        _LIGAR 083F                          i1l203 17E5                          i1l204 17E8  
                        i1l156 0392                          i1l283 0102                          i1l550 07CC  
                        i1l286 0120                          i1l556 07E5                          i1l389 176E  
                        i1l579 0447                          _RCREG 001A                          _SPBRG 0099  
          i1lcd_envia_nibble@n 0071                          _TRISA 0085                          _TXREG 0019  
                __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D               __end_ofi1_Ativar 1000  
         i1_lcd_escreve_string 1787                  ___awtoft@sign 007D                __end_of_dpowers 0838  
              __end_of_isdigit 167F                  ___ftpack@sign 0074                  _countInferior 0069  
              __end_of_refresh 0E40                          ftoa@f 0044                          ftoa@l 004D  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                   progressBar@i 0036  
           __size_of_USARTInit 0066                ?_USARTWriteChar 0070                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 0271               i1_lcd_envia_byte 17D5                __initialization 0015  
                 i1_lcd_gotoxy 16B3                   __end_of_main 1664                   __end_of_ftoa 0633  
                _countSuperior 006B                    i1lcd_putc@c 007B                      ??_ADCInit 00A0  
                    ??_ADCRead 00A2      __size_of_lcd_envia_nibble 0059                         ??_main 00BE  
                       ??_ftoa 0048                  ___fttol@sign1 0038                         ISR@buf 0058  
                       ISR@per 0066                         ISR@pre 0059        USARTWriteChar@USARTData 00A0  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 00A0  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             __end_of___awtoft 1741               __end_of___ftpack 07FE               __end_of___lltoft 17D5  
                       i1l2003 07D1                         i1l2005 07DB                         i1l2021 16BE  
                       i1l2121 03CF                         i1l2201 0C06                         i1l2211 0AB7  
                       i1l2019 16BD                         i1l2117 03C8                         i1l2213 0AC7  
                       i1l2221 0AF2                         i1l2053 167D                         i1l2151 0422  
                       i1l2127 03DE                         i1l2231 0962                         i1l2145 040D  
                       i1l2217 0AE5                         i1l2401 005C                         i1l2163 0459  
                       i1l2147 0419                         i1l2139 03F8                         i1l2059 1766  
                       i1l2235 0974                         i1l2243 098F                         i1l2501 0B7B  
                       i1l2157 0437                         i1l2149 041E                         i1l2237 097D  
                       i1l2167 046B                         i1l2159 0443                         i1l2407 0071  
                       i1l2415 00AF                         i1l2239 0986                         i1l2505 0BA2  
                       i1l2177 048E                         i1l2433 0109                         i1l2425 00C1  
                       i1l2523 04BE                         i1l2187 0BC1                         i1l2427 00FD  
                       i1l2541 0513                         i1l2621 0EC5                         i1l2613 0EA9  
                       i1l2605 0E8C                         i1l2197 0BF9                         i1l2189 0BD1  
                       i1l2461 0196                         i1l2453 015A                         i1l2429 0104  
                       i1l2615 0EB4                         i1l2607 0E9C                         i1l2631 17C0  
                       i1l2439 0132                         i1l2711 09B9                         i1l2297 1741  
                       i1l2553 053B                         i1l2545 0523                         i1l2529 04D4  
                       i1l2617 0EB7                         i1l2473 01E9                         i1l2465 01AE  
                       i1l2449 0154                         i1l2641 0F79                         i1l2483 0203  
                       i1l2475 01ED                         i1l2491 003C                         i1l2715 09C7  
                       i1l2707 09B0                         u210_25 07EC                         i1l2557 054B  
                       i1l2629 17AE                         i1l2469 01C8                         i1l2493 026C  
                       i1l2733 0A7A                         i1l2653 0FAE                         i1l2717 09A0  
                       i1l2903 06C5                         i1l2735 0A90                         i1l2647 0F94  
                       i1l2719 09CE                         i1l2489 025D                         i1l2665 0FE5  
                       i1l2587 0E5A                         i1l2659 0FC8                         i1l2763 0E25  
                       i1l2755 0E04                         i1l2693 16E5                         i1l2685 16D6  
                       u203_25 07AA                         i1l2677 1787                         i1l2749 0DE8  
                       i1l1993 07A5                         i1l2865 172A                         i1l2881 0661  
                       i1l1995 07B1                         i1l2875 064B                         i1l2779 05B2  
                       i1l1997 07B6                         i1l1989 079E                         i1l2949 037C  
                       i1l2895 06A6                         u205_25 07C5                         u301_25 020E  
                       u302_25 0269                         u207_25 07D4                         u311_25 04E0  
                       u320_25 054C                         u312_25 04F2                         u305_21 0B6E  
                       u305_22 0B6F                         u305_23 0B74                         u305_24 0B75  
                       u321_25 0554                         u217_25 176F                         u242_25 040E  
                       u218_25 1776                         u410_27 095A                         u307_21 0B95  
                       u307_22 0B96                         u307_23 0B9B                         u307_24 0B9C  
                       u315_25 0524                         u331_25 0EAB                         u316_25 052C  
                       u245_25 0423                         u325_25 0E61                         u334_25 17B3  
                       u262_25 0ABB                         u350_25 0DD6                         u239_25 03F9  
                       u255_25 0BC5                         u351_25 0DF3                         u407_27 0AA5  
                       u248_25 0438                         u328_25 0E8D                         u264_25 0AD5  
                       u408_27 096E                         u257_25 0BD3                         u265_25 0AE6  
                       u353_25 0E14                         u409_27 17DB                         u362_25 0673  
                       u258_25 0BE8                         u354_25 0E30                         u347_20 0A6D  
                       u363_25 0685                         u259_25 0BFA                         u364_25 06A7  
                       u365_25 06B8                         u293_25 015D                         u366_25 06C6  
                       u294_25 018C                         u199_25 17EF                         u296_25 01A5  
                       u297_25 01BF                         u298_25 01D9                  USARTInit@Mode 00B3  
    i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066                         _Ativar 06EB  
             __end_of_lcd_putc 0A61                         ___ftge 0B54                      ??___aldiv 00A8  
                       ___wmul 1764                      ??___ftadd 0020                      ??___ftdiv 0036  
                    ??___ftneg 0073                      ??___lldiv 0078                      ??___ftmul 0026  
                    ??___llmod 0028                      ??___ftsub 007E                      ??___fttol 0034  
                       _ativar 0CDB       __end_of_USARTWriteString 1764               ??_lcd_envia_byte 00A3  
            __end_of_USARTInit 0C75                         ftoa@cp 0051          ___ftmul@f3_as_product 002B  
                    ??_isdigit 0070                      ??_refresh 0073                         saved_w 007E  
        i1lcd_escreve_string@y 007C                      ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 0960  
            ?_USARTReceiveChar 0070                      ?_LCDClear 0070        __end_of__initialization 0031  
           ??_USARTReceiveChar 0073                     ___ftadd@f1 0078                     ___ftadd@f2 007B  
                   ___ftge@ff1 0070                     ___ftge@ff2 0073                     ___ftdiv@f1 0033  
                   ___ftdiv@f2 0030                     ___ftdiv@f3 003B                  __end_of_LIGAR 0840  
                 ?_progressBar 0020                     ___ftneg@f1 0070                     ___awtoft@c 0078  
                   ___ftmul@f1 0020                     ___ftmul@f2 0023                     ___ftsub@f1 002A  
                   ___ftsub@f2 0027                     ___fttol@f1 0030                 __pcstackCOMMON 0070  
                 __pidataBANK1 167F            __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078  
                    ?i1_Ativar 0070               i1_USARTWriteChar 1641                  _init_lcd_4bit 0C75  
       ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 00A8                   sprintf@width 003F  
                   __pbssBANK0 0067                     __pbssBANK1 00BE               sendSerial@origem 0020  
                   ??_LCDClear 00A5                      ISR@input2 0063                      ISR@preint 005C  
                      ?_Ativar 0070                      ISR@status 005E      USARTReceiveChar@USARTData 0074  
                   __pmaintext 1659                        ?___ftge 0070                        ?___wmul 0070  
                   ??i1_Ativar 0071                     __pintentry 0004                     _flag_Start 00BE  
                      ?_ativar 0070                        _ADCInit 16A0                        _ADCRead 0894  
                    ?___awtoft 0078                      ?___ftpack 0070               _lcd_envia_nibble 0AFB  
                    ?___lltoft 0078                    sendSerial@x 004A                 ?_init_lcd_4bit 0070  
                   _lcd_gotoxy 1704       __end_ofi1_lcd_envia_byte 1800               ??_USARTWriteChar 00A0  
           _lcd_escreve_string 08C1                      ?_lcd_putc 0070                     __stringtab 0800  
          ?_lcd_escreve_string 00AC                      _ADCResult 0067                __size_of_Ativar 00AB  
                   _inicialize 0D4F                        ___aldiv 0ECE                __size_of___ftge 005D  
                      ___ftadd 039F                        ___ftdiv 0633                        ___ftneg 1649  
                      ___lldiv 0BB1                __size_of___wmul 0023                        ___ftmul 04A6  
                      ___llmod 0AAD                        ___ftsub 16E8                        ___fttol 0E40  
              __size_of_ativar 0074                     ??___awtoft 007B                     ??___ftpack 0075  
                   ??___lltoft 007C                        __ptext1 0D4F                        __ptext2 08C1  
                      __ptext3 0A1A                        __ptext4 1704                        __ptext5 0C75  
                      __ptext6 0C0F                        __ptext7 0ECE                        __ptext8 09DA  
                      __ptext9 08F2           ??_lcd_escreve_string 00AE                   __size_of_ISR 012E  
                      _dpowers 0810                        _isdigit 1671               ___aldiv@dividend 00A4  
                      _refresh 0DC7                lcd_envia_byte@n 00A2                   ??i1_lcd_putc 0079  
                   _recipiente 006D                        _sprintf 0035                        clrloop0 1652  
                   ??_lcd_putc 00A9           end_of_initialization 0031                        ftoa@buf 00C4  
                      ftoa@rem 0049        i1lcd_envia_byte@address 0074                     _sendSerial 099B  
              ___lldiv@divisor 0070                 progressBar@aux 0026                ___lldiv@counter 007D  
                    _RCSTAbits 0018               ___aldiv@quotient 00AB           __size_of_progressBar 004C  
           __end_ofi1_lcd_putc 099B                ??_init_lcd_4bit 00A5              ?_USARTWriteString 0071  
                    _PORTAbits 0005                      _PORTBbits 0006                      _PORTCbits 0007  
                    _PORTDbits 0008             ??_USARTWriteString 0073                      _USARTInit 0C0F  
                    _TRISBbits 0086                      _TRISCbits 0087                      _TRISDbits 0088  
                  ?_lcd_gotoxy 00A5                _LCD_INIT_STRING 0838                    ___ftdiv@exp 003E  
     __end_ofi1_USARTWriteChar 1649                      _TXSTAbits 0098              __size_of_LCDClear 0040  
                  ?_inicialize 0070                    ___ftmul@exp 002A                 __end_of_Ativar 0796  
           i1_lcd_envia_nibble 0927      __size_of_USARTReceiveChar 001B                 __end_of___ftge 0BB1  
                  USARTInit@BR 00B9                 __end_of___wmul 1787            ?i1_lcd_envia_nibble 0070  
               __end_of_ativar 0D4F              __size_ofi1_Ativar 00A3                  _nivelInferior 00C0  
          start_initialization 0015                     ?_USARTInit 00AF                    __end_of_ISR 039F  
                   ftoa@status 0047                  i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075  
                  ?_sendSerial 0070           ??i1_lcd_envia_nibble 0070       __end_of_lcd_envia_nibble 0B54  
        lcd_envia_byte@address 00A4                ___llmod@divisor 0020                ___llmod@counter 0029  
                _nivelSuperior 00C2                       ??_Ativar 00A1                       ??___ftge 0076  
          __size_of_lcd_gotoxy 001C                       ??___wmul 0074                     init_fetch0 168F  
                     ??_ativar 00A3                    __pdataBANK1 00D5                       ?_ADCInit 0070  
                     ?_ADCRead 00A0            __end_of_LIGAR_BOMBA 0841            __end_of_LIGAR_MOTOR 0842  
      __end_of_LCD_INIT_STRING 083C              __size_of___awtoft 0021              __size_of___ftpack 0068  
            __size_of___lltoft 002B                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0            __end_of__stringdata 088E            __size_of_inicialize 0078  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                sendSerial@envio 0048  
                     ISR@input 0060                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___aldiv 00A0                       ?___ftadd 0078                       ?___ftdiv 0030  
                     ?___ftneg 0070                       ?___lldiv 0070                       ?___ftmul 0020  
                     ?___llmod 0020                       ?___ftsub 0027                       ?___fttol 0030  
          __size_of_sendSerial 003F                      __pstrings 0800                       ?_isdigit 0070  
                  ??_USARTInit 00B5                       ?_refresh 0070                       _DESLIGAR 083C  
               init_lcd_4bit@i 00A7                       ?_sprintf 002A              progressBar@preint 0020  
            progressBar@result 0038                       _LCDClear 09DA                ___aldiv@divisor 00A0  
            interrupt_function 0004                ___aldiv@counter 00A9                 ___wmul@product 0074  
                    clear_ram0 1651                       _PIE1bits 008C              lcd_envia_nibble@n 00A1  
               ??i1_lcd_gotoxy 0076                       _PIR1bits 000C                    _LIGAR_BOMBA 0840  
                  _LIGAR_MOTOR 0841               _USARTReceiveChar 16CD                       i1_Ativar 0F5D  
    sendSerial@nivelRecipiente 0049               __size_of_ADCInit 0013               __size_of_ADCRead 002D  
                   _ADCON0bits 001F                    __stringbase 080F                     _ADCON1bits 009F  
                  __stringdata 0842              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 00AB                   ??_lcd_gotoxy 00A6            lcd_escreve_string@y 00AC  
    __size_of_USARTWriteString 0023              ?i1_USARTWriteChar 0070                  ??_progressBar 0022  
      __size_of_USARTWriteChar 000D                   ??_inicialize 00BB             ??i1_USARTWriteChar 0070  
           __end_of_lcd_gotoxy 1720               __size_of___aldiv 008F               __size_of___ftadd 0107  
             __size_of___ftdiv 00B8               __size_of___ftneg 0008               __size_of___lldiv 005E  
             __size_of___ftmul 00D3               __size_of___llmod 004E               __size_of___ftsub 001C  
             __size_of___fttol 008E                       ___awtoft 1720                       ___ftpack 0796  
           __end_of__stringtab 0810                       ___lltoft 17AA                    _isdigit$892 0070  
        __end_of_init_lcd_4bit 0CDB               progressBar@F1346 00D5               __size_of_isdigit 000E  
             __size_of_refresh 0079                       __ptext10 0AFB                       __ptext11 16A0  
                     __ptext20 0A61                       __ptext12 0CDB                       __ptext21 1787  
                     __ptext13 06EB                       __ptext30 0AAD                       __ptext22 0960  
                     __ptext14 1664                       __ptext31 0BB1                       __ptext23 16B3  
                     __ptext15 0894                       __ptext40 1720                       __ptext32 17AA  
                     __ptext24 17D5                       __ptext16 0271                       __ptext41 0796  
                     __ptext33 0E40                       __ptext25 0927                       __ptext17 099B  
                     __ptext42 16CD                       __ptext34 16E8                       __ptext26 0579  
                     __ptext18 0DC7                       __ptext43 1741                       __ptext35 039F  
                     __ptext27 0035                       __ptext19 0F5D                       __ptext44 1641  
                     __ptext36 1649                       __ptext28 1671                       __ptext37 04A6  
                     __ptext29 1764                       __ptext38 0B54                       __ptext39 0633  
               _lcd_envia_byte 08F2             __end_of_inicialize 0DC7                       _lcd_putc 0A1A  
             __size_of_sprintf 023C                   ??_sendSerial 0073                  __size_of_main 000B  
                __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 00A0  
                Ativar@comando 00A2            __end_of_progressBar 0AAD             __end_of_sendSerial 09DA  
                   _INTCONbits 000B         __end_of_lcd_envia_byte 0927           __end_ofi1_lcd_gotoxy 16CD  
                     init_ram0 1693                       isdigit@c 0071                       intlevel1 0000  
                    sprintf@ap 0039                      sprintf@sp 003E    __size_ofi1_lcd_envia_nibble 0039  
             ___lldiv@dividend 0074                      stringcode 080A   __end_ofi1_lcd_escreve_string 17AA  
    __size_ofi1_lcd_envia_byte 002B              USARTInit@BaudRate 00AF                 _DESLIGAR_BOMBA 083D  
               _DESLIGAR_MOTOR 083E            USARTWriteString@str 0071                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                ?_lcd_envia_byte 00A2  
                     stringdir 080A                       stringtab 0800                   ___aldiv@sign 00AA  
     __end_of_USARTReceiveChar 16E8               _USARTWriteString 1741                 _USARTWriteChar 1664  
                  _progressBar 0A61         __end_of_DESLIGAR_BOMBA 083E         __end_of_DESLIGAR_MOTOR 083F  
