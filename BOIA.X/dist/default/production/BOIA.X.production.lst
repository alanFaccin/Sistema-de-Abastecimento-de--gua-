

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 03 20:12:50 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  0088                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010D                     	;# 
   175  010E                     	;# 
   176  010F                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179                           
   180                           	psect	idataBANK1
   181  098A                     __pidataBANK1:	
   182                           
   183                           ;initializer for ProgressBar@F1338
   184  098A  3420               	retlw	32
   185  098B  3420               	retlw	32
   186  098C  3420               	retlw	32
   187  098D  3420               	retlw	32
   188  098E  3420               	retlw	32
   189  098F  3420               	retlw	32
   190  0990  3420               	retlw	32
   191  0991  3420               	retlw	32
   192  0992  3420               	retlw	32
   193  0993  3420               	retlw	32
   194  0994  3420               	retlw	32
   195  0995  3420               	retlw	32
   196  0996  3420               	retlw	32
   197  0997  3420               	retlw	32
   198  0998  3420               	retlw	32
   199  0999  3420               	retlw	32
   200                           
   201                           ;initializer for _flag_an
   202  099A  34FF               	retlw	255
   203  099B  34FF               	retlw	255
   204                           
   205                           	psect	strings
   206  0800                     __pstrings:	
   207  0800                     stringtab:	
   208  0800                     __stringtab:	
   209                           
   210                           ;	String table - string pointers are 1 byte each
   211  0800  1BFF               	btfsc	btemp+1,7
   212  0801  280A               	ljmp	stringcode
   213  0802  1383               	bcf	3,7
   214  0803  187F               	btfsc	btemp+1,0
   215  0804  1783               	bsf	3,7
   216  0805  0800               	movf	0,w
   217  0806  0A84               	incf	4,f
   218  0807  1903               	skipnz
   219  0808  0AFF               	incf	btemp+1,f
   220  0809  0008               	return
   221  080A                     stringcode:	
   222  080A                     stringdir:	
   223  080A  3008               	movlw	high stringdir
   224  080B  008A               	movwf	10
   225  080C  0804               	movf	4,w
   226  080D  0A84               	incf	4,f
   227  080E  0782               	addwf	2,f
   228  080F                     __stringbase:	
   229  080F  3400               	retlw	0
   230  0810                     __end_of__stringtab:	
   231  0810                     _dpowers:	
   232  0810  3401               	retlw	1
   233  0811  3400               	retlw	0
   234  0812  3400               	retlw	0
   235  0813  3400               	retlw	0
   236  0814  340A               	retlw	10
   237  0815  3400               	retlw	0
   238  0816  3400               	retlw	0
   239  0817  3400               	retlw	0
   240  0818  3464               	retlw	100
   241  0819  3400               	retlw	0
   242  081A  3400               	retlw	0
   243  081B  3400               	retlw	0
   244  081C  34E8               	retlw	232
   245  081D  3403               	retlw	3
   246  081E  3400               	retlw	0
   247  081F  3400               	retlw	0
   248  0820  3410               	retlw	16
   249  0821  3427               	retlw	39
   250  0822  3400               	retlw	0
   251  0823  3400               	retlw	0
   252  0824  34A0               	retlw	160
   253  0825  3486               	retlw	134
   254  0826  3401               	retlw	1
   255  0827  3400               	retlw	0
   256  0828  3440               	retlw	64
   257  0829  3442               	retlw	66
   258  082A  340F               	retlw	15
   259  082B  3400               	retlw	0
   260  082C  3480               	retlw	128
   261  082D  3496               	retlw	150
   262  082E  3498               	retlw	152
   263  082F  3400               	retlw	0
   264  0830  3400               	retlw	0
   265  0831  34E1               	retlw	225
   266  0832  34F5               	retlw	245
   267  0833  3405               	retlw	5
   268  0834  3400               	retlw	0
   269  0835  34CA               	retlw	202
   270  0836  349A               	retlw	154
   271  0837  343B               	retlw	59
   272  0838                     __end_of_dpowers:	
   273  0838                     _LCD_INIT_STRING:	
   274  0838  341C               	retlw	28
   275  0839  340C               	retlw	12
   276  083A  3401               	retlw	1
   277  083B  3406               	retlw	6
   278  083C                     __end_of_LCD_INIT_STRING:	
   279  083C                     _INFERIOR:	
   280  083C  3401               	retlw	1
   281  083D  3400               	retlw	0
   282  083E                     __end_of_INFERIOR:	
   283  083E                     _SUPERIOR:	
   284  083E  3400               	retlw	0
   285  083F  3400               	retlw	0
   286  0840                     __end_of_SUPERIOR:	
   287  001F                     _ADCON0bits	set	31
   288  001E                     _ADRESH	set	30
   289  000B                     _INTCONbits	set	11
   290  000C                     _PIR1bits	set	12
   291  0005                     _PORTAbits	set	5
   292  0006                     _PORTBbits	set	6
   293  0007                     _PORTCbits	set	7
   294  0008                     _PORTDbits	set	8
   295  001A                     _RCREG	set	26
   296  0018                     _RCSTAbits	set	24
   297  0019                     _TXREG	set	25
   298  00C1                     _OERR	set	193
   299  009F                     _ADCON1bits	set	159
   300  009E                     _ADRESL	set	158
   301  008C                     _PIE1bits	set	140
   302  0099                     _SPBRG	set	153
   303  0085                     _TRISA	set	133
   304  0086                     _TRISBbits	set	134
   305  0087                     _TRISCbits	set	135
   306  0088                     _TRISDbits	set	136
   307  0098                     _TXSTAbits	set	152
   308  0840                     __stringdata:	
   309  0840                     STR_1:	
   310  0840  340A               	retlw	10
   311  0841  340D               	retlw	13
   312  0842  3420               	retlw	32	;' '
   313  0843  342D               	retlw	45	;'-'
   314  0844  342D               	retlw	45	;'-'
   315  0845  342D               	retlw	45	;'-'
   316  0846  342D               	retlw	45	;'-'
   317  0847  342D               	retlw	45	;'-'
   318  0848  342D               	retlw	45	;'-'
   319  0849  342D               	retlw	45	;'-'
   320  084A  3420               	retlw	32	;' '
   321  084B  3445               	retlw	69	;'E'
   322  084C  3453               	retlw	83	;'S'
   323  084D  3454               	retlw	84	;'T'
   324  084E  344F               	retlw	79	;'O'
   325  084F  3455               	retlw	85	;'U'
   326  0850  3452               	retlw	82	;'R'
   327  0851  344F               	retlw	79	;'O'
   328  0852  3420               	retlw	32	;' '
   329  0853  3444               	retlw	68	;'D'
   330  0854  3445               	retlw	69	;'E'
   331  0855  3420               	retlw	32	;' '
   332  0856  3450               	retlw	80	;'P'
   333  0857  3449               	retlw	73	;'I'
   334  0858  344C               	retlw	76	;'L'
   335  0859  3448               	retlw	72	;'H'
   336  085A  3441               	retlw	65	;'A'
   337  085B  3420               	retlw	32	;' '
   338  085C  342D               	retlw	45	;'-'
   339  085D  342D               	retlw	45	;'-'
   340  085E  342D               	retlw	45	;'-'
   341  085F  342D               	retlw	45	;'-'
   342  0860  342D               	retlw	45	;'-'
   343  0861  342D               	retlw	45	;'-'
   344  0862  342D               	retlw	45	;'-'
   345  0863  3420               	retlw	32	;' '
   346  0864  340A               	retlw	10
   347  0865  340D               	retlw	13
   348  0866  3420               	retlw	32	;' '
   349  0867  3400               	retlw	0
   350  0868                     STR_4:	
   351  0868  340C               	retlw	12
   352  0869  344C               	retlw	76	;'L'
   353  086A  346F               	retlw	111	;'o'
   354  086B  3461               	retlw	97	;'a'
   355  086C  3464               	retlw	100	;'d'
   356  086D  3469               	retlw	105	;'i'
   357  086E  346E               	retlw	110	;'n'
   358  086F  3467               	retlw	103	;'g'
   359  0870  3420               	retlw	32	;' '
   360  0871  3450               	retlw	80	;'P'
   361  0872  3449               	retlw	73	;'I'
   362  0873  3443               	retlw	67	;'C'
   363  0874  342E               	retlw	46	;'.'
   364  0875  342E               	retlw	46	;'.'
   365  0876  342E               	retlw	46	;'.'
   366  0877  3400               	retlw	0
   367  0878                     STR_5:	
   368  0878  3425               	retlw	37	;'%'
   369  0879  346C               	retlw	108	;'l'
   370  087A  3475               	retlw	117	;'u'
   371  087B  342E               	retlw	46	;'.'
   372  087C  3425               	retlw	37	;'%'
   373  087D  3436               	retlw	54	;'6'
   374  087E  342E               	retlw	46	;'.'
   375  087F  3436               	retlw	54	;'6'
   376  0880  346C               	retlw	108	;'l'
   377  0881  3475               	retlw	117	;'u'
   378  0882  3400               	retlw	0
   379  0883                     STR_2:	
   380  0883  344E               	retlw	78	;'N'
   381  0884  3469               	retlw	105	;'i'
   382  0885  3476               	retlw	118	;'v'
   383  0886  3465               	retlw	101	;'e'
   384  0887  346C               	retlw	108	;'l'
   385  0888  343A               	retlw	58	;':'
   386  0889  3400               	retlw	0
   387  088A                     STR_3:	
   388  088A  3425               	retlw	37	;'%'
   389  088B  3400               	retlw	0
   390  088C                     __end_of__stringdata:	
   391                           
   392                           ; #config settings
   393  0000                     
   394                           	psect	cinit
   395  0015                     start_initialization:	
   396  0015                     __initialization:	
   397                           
   398                           ; Clear objects allocated to BANK0
   399  0015  01EE               	clrf	__pbssBANK0& (0+127)
   400  0016  01EF               	clrf	(__pbssBANK0+1)& (0+127)
   401                           
   402                           ; Clear objects allocated to BANK3
   403  0017  1783               	bsf	3,7	;select IRP bank2
   404  0018  30A4               	movlw	low __pbssBANK3
   405  0019  0084               	movwf	4
   406  001A  30B5               	movlw	low (__pbssBANK3+17)
   407  001B  120A  158A  2163  120A  118A  	fcall	clear_ram0
   408                           
   409                           ; Initialize objects allocated to BANK1
   410  0020  1383               	bcf	3,7	;select IRP bank0
   411  0021  30E0               	movlw	low (__pdataBANK1+18)
   412  0022  00FD               	movwf	btemp+-1
   413  0023  3009               	movlw	high __pidataBANK1
   414  0024  00FE               	movwf	btemp
   415  0025  308A               	movlw	low __pidataBANK1
   416  0026  00FF               	movwf	btemp+1
   417  0027  30CE               	movlw	low __pdataBANK1
   418  0028  0084               	movwf	4
   419  0029  120A  158A  217D   	fcall	init_ram0
   420  002C                     end_of_initialization:	
   421                           ;End of C runtime variable initialization code
   422                           
   423  002C                     __end_of__initialization:	
   424  002C  0183               	clrf	3
   425  002D  120A  158A  2B36   	ljmp	_main	;jump to C main() function
   426                           
   427                           	psect	bssBANK0
   428  006E                     __pbssBANK0:	
   429  006E                     _ADCResult:	
   430  006E                     	ds	2
   431                           
   432                           	psect	dataBANK1
   433  00CE                     __pdataBANK1:	
   434  00CE                     ProgressBar@F1338:	
   435  00CE                     	ds	16
   436  00DE                     _flag_an:	
   437  00DE                     	ds	2
   438                           
   439                           	psect	bssBANK3
   440  01A4                     __pbssBANK3:	
   441  01A4                     ftoa@buf:	
   442  01A4                     	ds	17
   443                           
   444                           	psect	clrtext
   445  0963                     clear_ram0:	
   446                           ;	Called with FSR containing the base address, and
   447                           ;	W with the last address+1
   448                           
   449  0963  0064               	clrwdt	;clear the watchdog before getting into this loop
   450  0964                     clrloop0:	
   451  0964  0180               	clrf	0	;clear RAM location pointed to by FSR
   452  0965  0A84               	incf	4,f	;increment pointer
   453  0966  0604               	xorwf	4,w	;XOR with final address
   454  0967  1903               	btfsc	3,2	;have we reached the end yet?
   455  0968  3400               	retlw	0	;all done for this memory range, return
   456  0969  0604               	xorwf	4,w	;XOR again to restore value
   457  096A  2964               	goto	clrloop0	;do the next byte
   458                           
   459                           	psect	inittext
   460  0979                     init_fetch0:	
   461                           ;	Called with low address in FSR and high address in W
   462                           
   463  0979  087E               	movf	126,w
   464  097A  008A               	movwf	10
   465  097B  087F               	movf	127,w
   466  097C  0082               	movwf	2
   467  097D                     init_ram0:	
   468                           ;Called with:
   469                           ;	high address of idata address in btemp 
   470                           ;	low address of idata address in btemp+1 
   471                           ;	low address of data in FSR
   472                           ;	high address + 1 of data in btemp-1
   473                           
   474  097D  2179  120A  158A   	fcall	init_fetch0
   475  0980  0080               	movwf	0
   476  0981  0A84               	incf	4,f
   477  0982  0804               	movf	4,w
   478  0983  067D               	xorwf	125,w
   479  0984  1903               	btfsc	3,2
   480  0985  3400               	retlw	0
   481  0986  0AFF               	incf	127,f
   482  0987  1903               	btfsc	3,2
   483  0988  0AFE               	incf	126,f
   484  0989  297D               	goto	init_ram0
   485                           
   486                           	psect	cstackBANK3
   487  0190                     __pcstackBANK3:	
   488  0190                     ??_lcd_envia_nibble:	
   489  0190                     ??_ADCInit:	
   490                           ; 0 bytes @ 0x0
   491                           
   492  0190                     ?_ADCRead:	
   493                           ; 0 bytes @ 0x0
   494                           
   495  0190                     ??_reset:	
   496                           ; 0 bytes @ 0x0
   497                           
   498  0190                     ADCRead@ch:	
   499                           ; 0 bytes @ 0x0
   500                           
   501                           
   502                           ; 2 bytes @ 0x0
   503  0190                     	ds	1
   504  0191                     lcd_envia_nibble@n:	
   505                           
   506                           ; 1 bytes @ 0x1
   507  0191                     	ds	1
   508  0192                     ?_lcd_envia_byte:	
   509  0192                     ??_ADCRead:	
   510                           ; 0 bytes @ 0x2
   511                           
   512  0192                     lcd_envia_byte@n:	
   513                           ; 0 bytes @ 0x2
   514                           
   515                           
   516                           ; 1 bytes @ 0x2
   517  0192                     	ds	1
   518  0193                     ??_lcd_envia_byte:	
   519                           
   520                           ; 0 bytes @ 0x3
   521  0193                     	ds	1
   522  0194                     lcd_envia_byte@address:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  0194                     	ds	1
   526  0195                     ?_lcd_gotoxy:	
   527  0195                     ??_init_lcd_4bit:	
   528                           ; 0 bytes @ 0x5
   529                           
   530  0195                     ??_LCDClear:	
   531                           ; 0 bytes @ 0x5
   532                           
   533  0195                     lcd_gotoxy@y:	
   534                           ; 0 bytes @ 0x5
   535                           
   536                           
   537                           ; 1 bytes @ 0x5
   538  0195                     	ds	1
   539  0196                     ??_lcd_gotoxy:	
   540                           
   541                           ; 0 bytes @ 0x6
   542  0196                     	ds	1
   543  0197                     init_lcd_4bit@i:	
   544  0197                     lcd_gotoxy@x:	
   545                           ; 1 bytes @ 0x7
   546                           
   547                           
   548                           ; 1 bytes @ 0x7
   549  0197                     	ds	1
   550  0198                     lcd_gotoxy@address:	
   551                           
   552                           ; 1 bytes @ 0x8
   553  0198                     	ds	1
   554  0199                     ??_lcd_putc:	
   555                           
   556                           ; 0 bytes @ 0x9
   557  0199                     	ds	2
   558  019B                     lcd_putc@c:	
   559                           
   560                           ; 1 bytes @ 0xB
   561  019B                     	ds	1
   562  019C                     ?_lcd_escreve_string:	
   563  019C                     lcd_escreve_string@y:	
   564                           ; 0 bytes @ 0xC
   565                           
   566                           
   567                           ; 2 bytes @ 0xC
   568  019C                     	ds	2
   569  019E                     ??_lcd_escreve_string:	
   570  019E                     ??_inicialize:	
   571                           ; 0 bytes @ 0xE
   572                           
   573                           
   574                           ; 0 bytes @ 0xE
   575  019E                     	ds	3
   576  01A1                     ??_main:	
   577                           
   578                           ; 0 bytes @ 0x11
   579  01A1                     	ds	3
   580                           
   581                           	psect	cstackBANK1
   582  00A0                     __pcstackBANK1:	
   583  00A0                     sendSerial@origem:	
   584                           
   585                           ; 40 bytes @ 0x0
   586  00A0                     	ds	40
   587  00C8                     sendSerial@status:	
   588                           
   589                           ; 2 bytes @ 0x28
   590  00C8                     	ds	2
   591  00CA                     sendSerial@envio:	
   592                           
   593                           ; 1 bytes @ 0x2A
   594  00CA                     	ds	1
   595  00CB                     sendSerial@nivelRecipiente:	
   596                           
   597                           ; 1 bytes @ 0x2B
   598  00CB                     	ds	1
   599  00CC                     sendSerial@x:	
   600                           
   601                           ; 2 bytes @ 0x2C
   602  00CC                     	ds	2
   603                           
   604                           	psect	cstackCOMMON
   605  0070                     __pcstackCOMMON:	
   606  0070                     ?_init_lcd_4bit:	
   607  0070                     ?_LCDClear:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0070                     ?_lcd_envia_nibble:	
   611                           ; 0 bytes @ 0x0
   612                           
   613  0070                     ?_isdigit:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0070                     ??_isdigit:	
   617                           ; 1 bit 
   618                           
   619  0070                     ?_USARTWriteChar:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ??_USARTWriteChar:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0070                     ?_USARTWriteString:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ?_ADCInit:	
   629                           ; 0 bytes @ 0x0
   630                           
   631  0070                     ?_Ativar:	
   632                           ; 0 bytes @ 0x0
   633                           
   634  0070                     ?_Bomba:	
   635                           ; 0 bytes @ 0x0
   636                           
   637  0070                     ?_ISR:	
   638                           ; 0 bytes @ 0x0
   639                           
   640  0070                     ?_reset:	
   641                           ; 0 bytes @ 0x0
   642                           
   643  0070                     ?_inicialize:	
   644                           ; 0 bytes @ 0x0
   645                           
   646  0070                     ?_main:	
   647                           ; 0 bytes @ 0x0
   648                           
   649  0070                     ?_lcd_putc:	
   650                           ; 0 bytes @ 0x0
   651                           
   652  0070                     ?___ftge:	
   653                           ; 0 bytes @ 0x0
   654                           
   655  0070                     ?i1_lcd_envia_nibble:	
   656                           ; 1 bit 
   657                           
   658  0070                     ??i1_lcd_envia_nibble:	
   659                           ; 0 bytes @ 0x0
   660                           
   661  0070                     ?i1_lcd_putc:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  0070                     ?_USARTReceiveChar:	
   665                           ; 0 bytes @ 0x0
   666                           
   667  0070                     ?___wmul:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?___ftpack:	
   671                           ; 2 bytes @ 0x0
   672                           
   673  0070                     ?___ftneg:	
   674                           ; 3 bytes @ 0x0
   675                           
   676  0070                     ?___lldiv:	
   677                           ; 3 bytes @ 0x0
   678                           
   679  0070                     USARTWriteChar@USARTData:	
   680                           ; 4 bytes @ 0x0
   681                           
   682  0070                     _isdigit$887:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ___wmul@multiplier:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ___ftpack@arg:	
   689                           ; 2 bytes @ 0x0
   690                           
   691  0070                     ___ftge@ff1:	
   692                           ; 3 bytes @ 0x0
   693                           
   694  0070                     ___ftneg@f1:	
   695                           ; 3 bytes @ 0x0
   696                           
   697  0070                     ___lldiv@divisor:	
   698                           ; 3 bytes @ 0x0
   699                           
   700                           
   701                           ; 4 bytes @ 0x0
   702  0070                     	ds	1
   703  0071                     ??_USARTWriteString:	
   704  0071                     isdigit@c:	
   705                           ; 0 bytes @ 0x1
   706                           
   707  0071                     i1lcd_envia_nibble@n:	
   708                           ; 1 bytes @ 0x1
   709                           
   710                           
   711                           ; 1 bytes @ 0x1
   712  0071                     	ds	1
   713  0072                     ?i1_lcd_envia_byte:	
   714  0072                     USARTWriteString@str:	
   715                           ; 0 bytes @ 0x2
   716                           
   717  0072                     i1lcd_envia_byte@n:	
   718                           ; 1 bytes @ 0x2
   719                           
   720  0072                     ___wmul@multiplicand:	
   721                           ; 1 bytes @ 0x2
   722                           
   723                           
   724                           ; 2 bytes @ 0x2
   725  0072                     	ds	1
   726  0073                     ??_USARTReceiveChar:	
   727  0073                     ??_Ativar:	
   728                           ; 0 bytes @ 0x3
   729                           
   730  0073                     ??___ftneg:	
   731                           ; 0 bytes @ 0x3
   732                           
   733  0073                     ??i1_lcd_envia_byte:	
   734                           ; 0 bytes @ 0x3
   735                           
   736  0073                     Ativar@comando:	
   737                           ; 0 bytes @ 0x3
   738                           
   739  0073                     ___ftpack@exp:	
   740                           ; 1 bytes @ 0x3
   741                           
   742  0073                     ___ftge@ff2:	
   743                           ; 1 bytes @ 0x3
   744                           
   745                           
   746                           ; 3 bytes @ 0x3
   747  0073                     	ds	1
   748  0074                     ??_Bomba:	
   749  0074                     ??___wmul:	
   750                           ; 0 bytes @ 0x4
   751                           
   752  0074                     USARTReceiveChar@USARTData:	
   753                           ; 0 bytes @ 0x4
   754                           
   755  0074                     ___ftpack@sign:	
   756                           ; 1 bytes @ 0x4
   757                           
   758  0074                     i1lcd_envia_byte@address:	
   759                           ; 1 bytes @ 0x4
   760                           
   761  0074                     ___wmul@product:	
   762                           ; 1 bytes @ 0x4
   763                           
   764  0074                     ___lldiv@dividend:	
   765                           ; 2 bytes @ 0x4
   766                           
   767                           
   768                           ; 4 bytes @ 0x4
   769  0074                     	ds	1
   770  0075                     ??___ftpack:	
   771  0075                     ?i1_lcd_gotoxy:	
   772                           ; 0 bytes @ 0x5
   773                           
   774  0075                     i1lcd_gotoxy@y:	
   775                           ; 0 bytes @ 0x5
   776                           
   777                           
   778                           ; 1 bytes @ 0x5
   779  0075                     	ds	1
   780  0076                     ??___ftge:	
   781  0076                     ??i1_lcd_gotoxy:	
   782                           ; 0 bytes @ 0x6
   783                           
   784                           
   785                           ; 0 bytes @ 0x6
   786  0076                     	ds	1
   787  0077                     i1lcd_gotoxy@x:	
   788                           
   789                           ; 1 bytes @ 0x7
   790  0077                     	ds	1
   791  0078                     ??___lldiv:	
   792  0078                     ?___awtoft:	
   793                           ; 0 bytes @ 0x8
   794                           
   795  0078                     ?___ftadd:	
   796                           ; 3 bytes @ 0x8
   797                           
   798  0078                     ?___lltoft:	
   799                           ; 3 bytes @ 0x8
   800                           
   801  0078                     i1lcd_gotoxy@address:	
   802                           ; 3 bytes @ 0x8
   803                           
   804  0078                     ___awtoft@c:	
   805                           ; 1 bytes @ 0x8
   806                           
   807  0078                     ___ftadd@f1:	
   808                           ; 2 bytes @ 0x8
   809                           
   810  0078                     ___lltoft@c:	
   811                           ; 3 bytes @ 0x8
   812                           
   813                           
   814                           ; 4 bytes @ 0x8
   815  0078                     	ds	1
   816  0079                     ??i1_lcd_putc:	
   817  0079                     ___lldiv@quotient:	
   818                           ; 0 bytes @ 0x9
   819                           
   820                           
   821                           ; 4 bytes @ 0x9
   822  0079                     	ds	2
   823  007B                     ??___awtoft:	
   824  007B                     i1lcd_putc@c:	
   825                           ; 0 bytes @ 0xB
   826                           
   827  007B                     ___ftadd@f2:	
   828                           ; 1 bytes @ 0xB
   829                           
   830                           
   831                           ; 3 bytes @ 0xB
   832  007B                     	ds	1
   833  007C                     ??___lltoft:	
   834  007C                     ?i1_lcd_escreve_string:	
   835                           ; 0 bytes @ 0xC
   836                           
   837  007C                     i1lcd_escreve_string@y:	
   838                           ; 0 bytes @ 0xC
   839                           
   840                           
   841                           ; 2 bytes @ 0xC
   842  007C                     	ds	1
   843  007D                     ___awtoft@sign:	
   844  007D                     ___lldiv@counter:	
   845                           ; 1 bytes @ 0xD
   846                           
   847  007D                     ___lltoft@exp:	
   848                           ; 1 bytes @ 0xD
   849                           
   850                           
   851                           ; 1 bytes @ 0xD
   852  007D                     	ds	1
   853  007E                     ??___ftsub:	
   854  007E                     ??i1_lcd_escreve_string:	
   855                           ; 0 bytes @ 0xE
   856                           
   857                           
   858                           	psect	cstackBANK0
   859  0020                     __pcstackBANK0:	
   860                           ; 0 bytes @ 0xE
   861                           
   862  0020                     ?_ProgressBar:	
   863  0020                     ??___ftadd:	
   864                           ; 0 bytes @ 0x0
   865                           
   866  0020                     ?___ftmul:	
   867                           ; 0 bytes @ 0x0
   868                           
   869  0020                     ?___llmod:	
   870                           ; 3 bytes @ 0x0
   871                           
   872  0020                     ProgressBar@preint:	
   873                           ; 4 bytes @ 0x0
   874                           
   875  0020                     ___ftmul@f1:	
   876                           ; 2 bytes @ 0x0
   877                           
   878  0020                     ___llmod@divisor:	
   879                           ; 3 bytes @ 0x0
   880                           
   881                           
   882                           ; 4 bytes @ 0x0
   883  0020                     	ds	2
   884  0022                     ??_ProgressBar:	
   885                           
   886                           ; 0 bytes @ 0x2
   887  0022                     	ds	1
   888  0023                     ___ftmul@f2:	
   889                           
   890                           ; 3 bytes @ 0x3
   891  0023                     	ds	1
   892  0024                     ___ftadd@sign:	
   893  0024                     ___llmod@dividend:	
   894                           ; 1 bytes @ 0x4
   895                           
   896                           
   897                           ; 4 bytes @ 0x4
   898  0024                     	ds	1
   899  0025                     ___ftadd@exp2:	
   900                           
   901                           ; 1 bytes @ 0x5
   902  0025                     	ds	1
   903  0026                     ??___ftmul:	
   904  0026                     ___ftadd@exp1:	
   905                           ; 0 bytes @ 0x6
   906                           
   907  0026                     ProgressBar@aux:	
   908                           ; 1 bytes @ 0x6
   909                           
   910                           
   911                           ; 16 bytes @ 0x6
   912  0026                     	ds	1
   913  0027                     ?___ftsub:	
   914  0027                     ___ftsub@f2:	
   915                           ; 3 bytes @ 0x7
   916                           
   917                           
   918                           ; 3 bytes @ 0x7
   919  0027                     	ds	1
   920  0028                     ??___llmod:	
   921                           
   922                           ; 0 bytes @ 0x8
   923  0028                     	ds	1
   924  0029                     ___llmod@counter:	
   925                           
   926                           ; 1 bytes @ 0x9
   927  0029                     	ds	1
   928  002A                     ?_sprintf:	
   929  002A                     sprintf@f:	
   930                           ; 2 bytes @ 0xA
   931                           
   932  002A                     ___ftmul@exp:	
   933                           ; 1 bytes @ 0xA
   934                           
   935  002A                     ___ftsub@f1:	
   936                           ; 1 bytes @ 0xA
   937                           
   938                           
   939                           ; 3 bytes @ 0xA
   940  002A                     	ds	1
   941  002B                     ___ftmul@f3_as_product:	
   942                           
   943                           ; 3 bytes @ 0xB
   944  002B                     	ds	3
   945  002E                     ___ftmul@cntr:	
   946                           
   947                           ; 1 bytes @ 0xE
   948  002E                     	ds	1
   949  002F                     ___ftmul@sign:	
   950                           
   951                           ; 1 bytes @ 0xF
   952  002F                     	ds	1
   953  0030                     ?___ftdiv:	
   954  0030                     ?___fttol:	
   955                           ; 3 bytes @ 0x10
   956                           
   957  0030                     ___ftdiv@f2:	
   958                           ; 4 bytes @ 0x10
   959                           
   960  0030                     ___fttol@f1:	
   961                           ; 3 bytes @ 0x10
   962                           
   963                           
   964                           ; 3 bytes @ 0x10
   965  0030                     	ds	3
   966  0033                     ??_sprintf:	
   967  0033                     ___ftdiv@f1:	
   968                           ; 0 bytes @ 0x13
   969                           
   970                           
   971                           ; 3 bytes @ 0x13
   972  0033                     	ds	1
   973  0034                     ??___fttol:	
   974                           
   975                           ; 0 bytes @ 0x14
   976  0034                     	ds	2
   977  0036                     ??___ftdiv:	
   978  0036                     ProgressBar@i:	
   979                           ; 0 bytes @ 0x16
   980                           
   981                           
   982                           ; 2 bytes @ 0x16
   983  0036                     	ds	2
   984  0038                     ProgressBar@result:	
   985  0038                     sprintf@flag:	
   986                           ; 1 bytes @ 0x18
   987                           
   988  0038                     ___fttol@sign1:	
   989                           ; 1 bytes @ 0x18
   990                           
   991                           
   992                           ; 1 bytes @ 0x18
   993  0038                     	ds	1
   994  0039                     sprintf@ap:	
   995  0039                     ___fttol@lval:	
   996                           ; 1 bytes @ 0x19
   997                           
   998                           
   999                           ; 4 bytes @ 0x19
  1000  0039                     	ds	1
  1001  003A                     ___ftdiv@cntr:	
  1002  003A                     sprintf@_val:	
  1003                           ; 1 bytes @ 0x1A
  1004                           
  1005                           
  1006                           ; 4 bytes @ 0x1A
  1007  003A                     	ds	1
  1008  003B                     ___ftdiv@f3:	
  1009                           
  1010                           ; 3 bytes @ 0x1B
  1011  003B                     	ds	2
  1012  003D                     ___fttol@exp1:	
  1013                           
  1014                           ; 1 bytes @ 0x1D
  1015  003D                     	ds	1
  1016  003E                     sprintf@sp:	
  1017  003E                     ___ftdiv@exp:	
  1018                           ; 1 bytes @ 0x1E
  1019                           
  1020                           
  1021                           ; 1 bytes @ 0x1E
  1022  003E                     	ds	1
  1023  003F                     ___ftdiv@sign:	
  1024  003F                     sprintf@width:	
  1025                           ; 1 bytes @ 0x1F
  1026                           
  1027                           
  1028                           ; 2 bytes @ 0x1F
  1029  003F                     	ds	2
  1030  0041                     sprintf@prec:	
  1031                           
  1032                           ; 2 bytes @ 0x21
  1033  0041                     	ds	2
  1034  0043                     sprintf@c:	
  1035                           
  1036                           ; 1 bytes @ 0x23
  1037  0043                     	ds	1
  1038  0044                     ?_ftoa:	
  1039  0044                     ftoa@f:	
  1040                           ; 1 bytes @ 0x24
  1041                           
  1042                           
  1043                           ; 3 bytes @ 0x24
  1044  0044                     	ds	3
  1045  0047                     ftoa@status:	
  1046                           
  1047                           ; 1 bytes @ 0x27
  1048  0047                     	ds	1
  1049  0048                     ??_ftoa:	
  1050                           
  1051                           ; 0 bytes @ 0x28
  1052  0048                     	ds	1
  1053  0049                     ftoa@rem:	
  1054                           
  1055                           ; 4 bytes @ 0x29
  1056  0049                     	ds	4
  1057  004D                     ftoa@l:	
  1058                           
  1059                           ; 4 bytes @ 0x2D
  1060  004D                     	ds	4
  1061  0051                     ftoa@cp:	
  1062                           
  1063                           ; 1 bytes @ 0x31
  1064  0051                     	ds	1
  1065  0052                     ?_sendSerial:	
  1066  0052                     sendSerial@preint:	
  1067                           ; 0 bytes @ 0x32
  1068                           
  1069                           
  1070                           ; 2 bytes @ 0x32
  1071  0052                     	ds	2
  1072  0054                     sendSerial@recipiente:	
  1073                           
  1074                           ; 2 bytes @ 0x34
  1075  0054                     	ds	2
  1076  0056                     ??_sendSerial:	
  1077                           
  1078                           ; 0 bytes @ 0x36
  1079  0056                     	ds	2
  1080  0058                     ??_ISR:	
  1081                           
  1082                           ; 0 bytes @ 0x38
  1083  0058                     	ds	6
  1084  005E                     ISR@bufferConversor:	
  1085                           
  1086                           ; 1 bytes @ 0x3E
  1087  005E                     	ds	1
  1088  005F                     ISR@pre:	
  1089                           
  1090                           ; 3 bytes @ 0x3F
  1091  005F                     	ds	3
  1092  0062                     ISR@percentual:	
  1093                           
  1094                           ; 1 bytes @ 0x42
  1095  0062                     	ds	1
  1096  0063                     ISR@recebido:	
  1097                           
  1098                           ; 1 bytes @ 0x43
  1099  0063                     	ds	1
  1100  0064                     ISR@status:	
  1101                           
  1102                           ; 2 bytes @ 0x44
  1103  0064                     	ds	2
  1104  0066                     ISR@input:	
  1105                           
  1106                           ; 3 bytes @ 0x46
  1107  0066                     	ds	3
  1108  0069                     ISR@input2:	
  1109                           
  1110                           ; 3 bytes @ 0x49
  1111  0069                     	ds	3
  1112  006C                     ISR@preint:	
  1113                           
  1114                           ; 2 bytes @ 0x4C
  1115  006C                     	ds	2
  1116                           
  1117                           	psect	maintext
  1118  0B36                     __pmaintext:	
  1119 ;;
  1120 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1121 ;;
  1122 ;; *************** function _main *****************
  1123 ;; Defined at:
  1124 ;;		line 321 in file "main.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;		None               void
  1131 ;; Registers used:
  1132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 17F/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1138 ;;      Params:         0       0       0       0       0
  1139 ;;      Locals:         0       0       0       0       0
  1140 ;;      Temps:          0       0       0       3       0
  1141 ;;      Totals:         0       0       0       3       0
  1142 ;;Total ram usage:        3 bytes
  1143 ;; Hardware stack levels required when called:   13
  1144 ;; This function calls:
  1145 ;;		_ADCRead
  1146 ;;		_inicialize
  1147 ;;		_reset
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           
  1154                           ;psect for function _main
  1155  0B36                     _main:	
  1156                           
  1157                           ;main.c: 322: inicialize();
  1158                           
  1159                           ;incstack = 0
  1160 ;; hardware stack exceeded
  1161                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1162  0B36  120A  118A  2785  120A  158A  	fcall	_inicialize
  1163                           
  1164                           ;main.c: 323: if (PORTCbits.RC2==1) {
  1165  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  1166  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  1167  0B3D  1D07               	btfss	7,2	;volatile
  1168  0B3E  2B5F               	goto	l146
  1169  0B3F                     l2625:	
  1170                           ;main.c: 324: while (1) {
  1171                           
  1172                           
  1173                           ;main.c: 325: ADCRead(1);
  1174  0B3F  3001               	movlw	1
  1175  0B40  1683               	bsf	3,5	;RP0=1, select bank3
  1176  0B41  1703               	bsf	3,6	;RP1=1, select bank3
  1177  0B42  0090               	movwf	ADCRead@ch^(0+384)
  1178  0B43  3000               	movlw	0
  1179  0B44  0091               	movwf	(ADCRead@ch^(0+384)+1)
  1180  0B45  120A  158A  2235  120A  158A  	fcall	_ADCRead
  1181                           
  1182                           ;main.c: 326: _delay((unsigned long)((300)*(20000000/4000.0)));
  1183  0B4A  3008               	movlw	8
  1184  0B4B  1683               	bsf	3,5	;RP0=1, select bank3
  1185  0B4C  1703               	bsf	3,6	;RP1=1, select bank3
  1186  0B4D  00A3               	movwf	(??_main^(0+384)+2)
  1187  0B4E  309D               	movlw	157
  1188  0B4F  00A2               	movwf	(??_main^(0+384)+1)
  1189  0B50  300B               	movlw	11
  1190  0B51  00A1               	movwf	??_main^(0+384)
  1191  0B52                     u3427:	
  1192  0B52  0BA1               	decfsz	??_main^(0+384),f
  1193  0B53  2B52               	goto	u3427
  1194  0B54  0BA2               	decfsz	(??_main^(0+384)+1),f
  1195  0B55  2B52               	goto	u3427
  1196  0B56  0BA3               	decfsz	(??_main^(0+384)+2),f
  1197  0B57  2B52               	goto	u3427
  1198  0B58  2B59               	nop2
  1199                           
  1200                           ;main.c: 327: reset();
  1201  0B59  120A  118A  27F7  120A  158A  	fcall	_reset
  1202  0B5E  2B3F               	goto	l2625
  1203  0B5F                     l146:	
  1204  0B5F  120A  118A  2812   	ljmp	start
  1205  0B62                     __end_of_main:	
  1206                           
  1207                           	psect	text1
  1208  07F7                     __ptext1:	
  1209 ;; *************** function _reset *****************
  1210 ;; Defined at:
  1211 ;;		line 283 in file "main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;		None               void
  1218 ;; Registers used:
  1219 ;;		None
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       0       0       0       0
  1226 ;;      Locals:         0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0
  1228 ;;      Totals:         0       0       0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    7
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _reset
  1241  07F7                     _reset:	
  1242                           
  1243                           ;main.c: 284: if (PORTCbits.RC3 == 1) {
  1244                           
  1245                           ;incstack = 0
  1246                           ; Regs used in _reset: []
  1247  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  1248  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  1249  07F9  1D87               	btfss	7,3	;volatile
  1250  07FA  0008               	return
  1251  07FB                     l133:	
  1252  07FB  1D87               	btfss	7,3	;volatile
  1253  07FC  0008               	return
  1254                           
  1255                           ;main.c: 286: PORTDbits.RD2 = 1;
  1256                           
  1257                           ;main.c: 285: while (PORTCbits.RC3 == 1) {
  1258  07FD  1508               	bsf	8,2	;volatile
  1259                           
  1260                           ;main.c: 287: PORTDbits.RD3 = 0;
  1261  07FE  1188               	bcf	8,3	;volatile
  1262  07FF  2FFB               	goto	l133
  1263  0800                     __end_of_reset:	
  1264                           
  1265                           	psect	text2
  1266  0785                     __ptext2:	
  1267 ;; *************** function _inicialize *****************
  1268 ;; Defined at:
  1269 ;;		line 295 in file "main.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;		None
  1274 ;; Return value:  Size  Location     Type
  1275 ;;		None               void
  1276 ;; Registers used:
  1277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1283 ;;      Params:         0       0       0       0       0
  1284 ;;      Locals:         0       0       0       0       0
  1285 ;;      Temps:          0       0       0       3       0
  1286 ;;      Totals:         0       0       0       3       0
  1287 ;;Total ram usage:        3 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:   12
  1290 ;; This function calls:
  1291 ;;		_ADCInit
  1292 ;;		_LCDClear
  1293 ;;		_init_lcd_4bit
  1294 ;;		_lcd_escreve_string
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _inicialize
  1302  0785                     _inicialize:	
  1303                           
  1304                           ;main.c: 296: TRISA = 0b11111111;
  1305                           
  1306                           ;incstack = 0
  1307 ;; hardware stack exceeded
  1308                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1309  0785  30FF               	movlw	255
  1310  0786  1683               	bsf	3,5	;RP0=1, select bank1
  1311  0787  1303               	bcf	3,6	;RP1=0, select bank1
  1312  0788  0085               	movwf	5	;volatile
  1313                           
  1314                           ;main.c: 297: PORTAbits.RA0 = 0;
  1315  0789  1283               	bcf	3,5	;RP0=0, select bank0
  1316  078A  1303               	bcf	3,6	;RP1=0, select bank0
  1317  078B  1005               	bcf	5,0	;volatile
  1318                           
  1319                           ;main.c: 298: TRISDbits.TRISD2 = 0;
  1320  078C  1683               	bsf	3,5	;RP0=1, select bank1
  1321  078D  1303               	bcf	3,6	;RP1=0, select bank1
  1322  078E  1108               	bcf	8,2	;volatile
  1323                           
  1324                           ;main.c: 299: PORTDbits.RD2 = 1;
  1325  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1326  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1327  0791  1508               	bsf	8,2	;volatile
  1328                           
  1329                           ;main.c: 300: TRISDbits.TRISD3 = 0;
  1330  0792  1683               	bsf	3,5	;RP0=1, select bank1
  1331  0793  1303               	bcf	3,6	;RP1=0, select bank1
  1332  0794  1188               	bcf	8,3	;volatile
  1333                           
  1334                           ;main.c: 301: PORTDbits.RD3 = 0;
  1335  0795  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0796  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0797  1188               	bcf	8,3	;volatile
  1338                           
  1339                           ;main.c: 303: TRISCbits.TRISC0 = 1;
  1340  0798  1683               	bsf	3,5	;RP0=1, select bank1
  1341  0799  1303               	bcf	3,6	;RP1=0, select bank1
  1342  079A  1407               	bsf	7,0	;volatile
  1343                           
  1344                           ;main.c: 304: TRISCbits.TRISC1 = 1;
  1345  079B  1487               	bsf	7,1	;volatile
  1346                           
  1347                           ;main.c: 305: TRISCbits.TRISC2 = 1;
  1348  079C  1507               	bsf	7,2	;volatile
  1349                           
  1350                           ;main.c: 306: TRISCbits.TRISC3 = 1;
  1351  079D  1587               	bsf	7,3	;volatile
  1352                           
  1353                           ;main.c: 307: PORTCbits.RC3 = 0;
  1354  079E  1283               	bcf	3,5	;RP0=0, select bank0
  1355  079F  1303               	bcf	3,6	;RP1=0, select bank0
  1356  07A0  1187               	bcf	7,3	;volatile
  1357                           
  1358                           ;main.c: 308: PORTCbits.RC2 = 0;
  1359  07A1  1107               	bcf	7,2	;volatile
  1360                           
  1361                           ;main.c: 309: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1362  07A2  3033               	movlw	51
  1363  07A3  1683               	bsf	3,5	;RP0=1, select bank3
  1364  07A4  1703               	bsf	3,6	;RP1=1, select bank3
  1365  07A5  00A0               	movwf	(??_inicialize^(0+384)+2)
  1366  07A6  30BC               	movlw	188
  1367  07A7  009F               	movwf	(??_inicialize^(0+384)+1)
  1368  07A8  3010               	movlw	16
  1369  07A9  009E               	movwf	??_inicialize^(0+384)
  1370  07AA                     u3437:	
  1371  07AA  0B9E               	decfsz	??_inicialize^(0+384),f
  1372  07AB  2FAA               	goto	u3437
  1373  07AC  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1374  07AD  2FAA               	goto	u3437
  1375  07AE  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1376  07AF  2FAA               	goto	u3437
  1377                           
  1378                           ;main.c: 310: init_lcd_4bit();
  1379  07B0  120A  158A  26A4  120A  118A  	fcall	_init_lcd_4bit
  1380                           
  1381                           ;main.c: 311: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1382  07B5  3033               	movlw	51
  1383  07B6  1683               	bsf	3,5	;RP0=1, select bank3
  1384  07B7  1703               	bsf	3,6	;RP1=1, select bank3
  1385  07B8  00A0               	movwf	(??_inicialize^(0+384)+2)
  1386  07B9  30BC               	movlw	188
  1387  07BA  009F               	movwf	(??_inicialize^(0+384)+1)
  1388  07BB  3010               	movlw	16
  1389  07BC  009E               	movwf	??_inicialize^(0+384)
  1390  07BD                     u3447:	
  1391  07BD  0B9E               	decfsz	??_inicialize^(0+384),f
  1392  07BE  2FBD               	goto	u3447
  1393  07BF  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1394  07C0  2FBD               	goto	u3447
  1395  07C1  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1396  07C2  2FBD               	goto	u3447
  1397                           
  1398                           ;main.c: 312: INTCONbits.PEIE = 1;
  1399  07C3  170B               	bsf	11,6	;volatile
  1400                           
  1401                           ;main.c: 313: INTCONbits.GIE = 1;
  1402  07C4  178B               	bsf	11,7	;volatile
  1403                           
  1404                           ;main.c: 314: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1405  07C5  301A               	movlw	26
  1406  07C6  1683               	bsf	3,5	;RP0=1, select bank3
  1407  07C7  1703               	bsf	3,6	;RP1=1, select bank3
  1408  07C8  00A0               	movwf	(??_inicialize^(0+384)+2)
  1409  07C9  305E               	movlw	94
  1410  07CA  009F               	movwf	(??_inicialize^(0+384)+1)
  1411  07CB  3086               	movlw	134
  1412  07CC  009E               	movwf	??_inicialize^(0+384)
  1413  07CD                     u3457:	
  1414  07CD  0B9E               	decfsz	??_inicialize^(0+384),f
  1415  07CE  2FCD               	goto	u3457
  1416  07CF  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1417  07D0  2FCD               	goto	u3457
  1418  07D1  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1419  07D2  2FCD               	goto	u3457
  1420  07D3  0000               	nop
  1421                           
  1422                           ;main.c: 315: ADCInit();
  1423  07D4  120A  158A  219C  120A  118A  	fcall	_ADCInit
  1424                           
  1425                           ;main.c: 316: lcd_escreve_string("\fLoading PIC...");
  1426  07D9  3059               	movlw	low (STR_4-__stringbase)
  1427  07DA  1683               	bsf	3,5	;RP0=1, select bank3
  1428  07DB  1703               	bsf	3,6	;RP1=1, select bank3
  1429  07DC  009C               	movwf	lcd_escreve_string@y^(0+384)
  1430  07DD  3080               	movlw	128
  1431  07DE  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1432  07DF  120A  158A  2362  120A  118A  	fcall	_lcd_escreve_string
  1433                           
  1434                           ;main.c: 317: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1435  07E4  307F               	movlw	127
  1436  07E5  1683               	bsf	3,5	;RP0=1, select bank3
  1437  07E6  1703               	bsf	3,6	;RP1=1, select bank3
  1438  07E7  00A0               	movwf	(??_inicialize^(0+384)+2)
  1439  07E8  30D4               	movlw	212
  1440  07E9  009F               	movwf	(??_inicialize^(0+384)+1)
  1441  07EA  30AE               	movlw	174
  1442  07EB  009E               	movwf	??_inicialize^(0+384)
  1443  07EC                     u3467:	
  1444  07EC  0B9E               	decfsz	??_inicialize^(0+384),f
  1445  07ED  2FEC               	goto	u3467
  1446  07EE  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1447  07EF  2FEC               	goto	u3467
  1448  07F0  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1449  07F1  2FEC               	goto	u3467
  1450  07F2  2FF3               	nop2
  1451                           
  1452                           ;main.c: 318: LCDClear();
  1453  07F3  120A  158A  246F   	fcall	_LCDClear
  1454  07F6  0008               	return
  1455  07F7                     __end_of_inicialize:	
  1456                           
  1457                           	psect	text3
  1458  0B62                     __ptext3:	
  1459 ;; *************** function _lcd_escreve_string *****************
  1460 ;; Defined at:
  1461 ;;		line 168 in file "lcd_4bit.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1464 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  1465 ;;		 -> ProgressBar@aux(16), 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;		None               void
  1470 ;; Registers used:
  1471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1477 ;;      Params:         0       0       0       2       0
  1478 ;;      Locals:         0       0       0       0       0
  1479 ;;      Temps:          0       0       0       0       0
  1480 ;;      Totals:         0       0       0       2       0
  1481 ;;Total ram usage:        2 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:   11
  1484 ;; This function calls:
  1485 ;;		_lcd_putc
  1486 ;; This function is called by:
  1487 ;;		_inicialize
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _lcd_escreve_string
  1493  0B62                     _lcd_escreve_string:	
  1494  0B62                     l2329:	
  1495                           ;lcd_4bit.c: 170: while(*y!='\0')
  1496                           
  1497                           ;incstack = 0
  1498 ;; hardware stack exceeded
  1499                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1500                           
  1501  0B62  1683               	bsf	3,5	;RP0=1, select bank3
  1502  0B63  1703               	bsf	3,6	;RP1=1, select bank3
  1503  0B64  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1504  0B65  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0B66  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0B67  00FF               	movwf	127
  1507  0B68  1683               	bsf	3,5	;RP0=1, select bank3
  1508  0B69  1703               	bsf	3,6	;RP1=1, select bank3
  1509  0B6A  081C               	movf	lcd_escreve_string@y^(0+384),w
  1510  0B6B  0084               	movwf	4
  1511  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0B6E  120A  158A  2000  120A  158A  	fcall	stringtab
  1514  0B73  3800               	iorlw	0
  1515  0B74  1903               	btfsc	3,2
  1516  0B75  0008               	return
  1517                           
  1518                           ;lcd_4bit.c: 171: {
  1519                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1520  0B76  1683               	bsf	3,5	;RP0=1, select bank3
  1521  0B77  1703               	bsf	3,6	;RP1=1, select bank3
  1522  0B78  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1523  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  1525  0B7B  00FF               	movwf	127
  1526  0B7C  1683               	bsf	3,5	;RP0=1, select bank3
  1527  0B7D  1703               	bsf	3,6	;RP1=1, select bank3
  1528  0B7E  081C               	movf	lcd_escreve_string@y^(0+384),w
  1529  0B7F  0084               	movwf	4
  1530  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0B81  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0B82  120A  158A  2000  120A  158A  	fcall	stringtab
  1533  0B87  120A  158A  24AF  120A  158A  	fcall	_lcd_putc
  1534                           
  1535                           ;lcd_4bit.c: 173: y++;
  1536  0B8C  3001               	movlw	1
  1537  0B8D  1683               	bsf	3,5	;RP0=1, select bank3
  1538  0B8E  1703               	bsf	3,6	;RP1=1, select bank3
  1539  0B8F  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1540  0B90  1803               	skipnc
  1541  0B91  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1542  0B92  2B62               	goto	l2329
  1543  0B93                     __end_of_lcd_escreve_string:	
  1544                           
  1545                           	psect	text4
  1546  0CAF                     __ptext4:	
  1547 ;; *************** function _lcd_putc *****************
  1548 ;; Defined at:
  1549 ;;		line 82 in file "lcd_4bit.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  c               1    wreg     unsigned char 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  c               1   11[BANK3 ] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;		None               void
  1556 ;; Registers used:
  1557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1563 ;;      Params:         0       0       0       0       0
  1564 ;;      Locals:         0       0       0       1       0
  1565 ;;      Temps:          0       0       0       2       0
  1566 ;;      Totals:         0       0       0       3       0
  1567 ;;Total ram usage:        3 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:   10
  1570 ;; This function calls:
  1571 ;;		_lcd_envia_byte
  1572 ;;		_lcd_gotoxy
  1573 ;; This function is called by:
  1574 ;;		_lcd_escreve_string
  1575 ;;		_lcd_escreve_p
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function _lcd_putc
  1581  0CAF                     _lcd_putc:	
  1582                           
  1583                           ;incstack = 0
  1584 ;; hardware stack exceeded
  1585                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1586                           ;lcd_putc@c stored from wreg
  1587  0CAF  1683               	bsf	3,5	;RP0=1, select bank3
  1588  0CB0  1703               	bsf	3,6	;RP1=1, select bank3
  1589  0CB1  009B               	movwf	lcd_putc@c^(0+384)
  1590                           
  1591                           ;lcd_4bit.c: 84: switch(c)
  1592  0CB2  2CE8               	goto	l2037
  1593  0CB3                     l2025:	
  1594                           ;lcd_4bit.c: 85: {
  1595                           ;lcd_4bit.c: 86: case '\f':
  1596                           
  1597                           
  1598                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1599  0CB3  0192               	clrf	lcd_envia_byte@n^(0+384)
  1600  0CB4  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1601  0CB5  3000               	movlw	0
  1602  0CB6  120A  158A  23C6  120A  158A  	fcall	_lcd_envia_byte
  1603                           
  1604                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1605  0CBB  300D               	movlw	13
  1606  0CBC  1683               	bsf	3,5	;RP0=1, select bank3
  1607  0CBD  1703               	bsf	3,6	;RP1=1, select bank3
  1608  0CBE  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1609  0CBF  30FB               	movlw	251
  1610  0CC0  0099               	movwf	??_lcd_putc^(0+384)
  1611  0CC1                     u3477:	
  1612  0CC1  0B99               	decfsz	??_lcd_putc^(0+384),f
  1613  0CC2  2CC1               	goto	u3477
  1614  0CC3  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1615  0CC4  2CC1               	goto	u3477
  1616  0CC5  2CC6               	nop2
  1617                           
  1618                           ;lcd_4bit.c: 89: break;
  1619  0CC6  0008               	return
  1620  0CC7                     l2029:	
  1621                           ;lcd_4bit.c: 91: case '\n':
  1622                           
  1623                           
  1624                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1625  0CC7  3002               	movlw	2
  1626  0CC8  1683               	bsf	3,5	;RP0=1, select bank3
  1627  0CC9  1703               	bsf	3,6	;RP1=1, select bank3
  1628  0CCA  0099               	movwf	??_lcd_putc^(0+384)
  1629  0CCB  0819               	movf	??_lcd_putc^(0+384),w
  1630  0CCC  0095               	movwf	lcd_gotoxy@y^(0+384)
  1631  0CCD  3001               	movlw	1
  1632  0CCE  120A  158A  2219   	fcall	_lcd_gotoxy
  1633                           
  1634                           ;lcd_4bit.c: 93: break;
  1635  0CD1  0008               	return
  1636  0CD2                     l2031:	
  1637                           ;lcd_4bit.c: 95: case '\b':
  1638                           
  1639                           
  1640                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1641  0CD2  3010               	movlw	16
  1642  0CD3  1683               	bsf	3,5	;RP0=1, select bank3
  1643  0CD4  1703               	bsf	3,6	;RP1=1, select bank3
  1644  0CD5  0099               	movwf	??_lcd_putc^(0+384)
  1645  0CD6  0819               	movf	??_lcd_putc^(0+384),w
  1646  0CD7  0092               	movwf	lcd_envia_byte@n^(0+384)
  1647  0CD8  3000               	movlw	0
  1648  0CD9  120A  158A  23C6   	fcall	_lcd_envia_byte
  1649                           
  1650                           ;lcd_4bit.c: 97: break;
  1651  0CDC  0008               	return
  1652  0CDD                     l2033:	
  1653                           ;lcd_4bit.c: 99: default:
  1654                           
  1655                           
  1656                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1657  0CDD  1683               	bsf	3,5	;RP0=1, select bank3
  1658  0CDE  1703               	bsf	3,6	;RP1=1, select bank3
  1659  0CDF  081B               	movf	lcd_putc@c^(0+384),w
  1660  0CE0  0099               	movwf	??_lcd_putc^(0+384)
  1661  0CE1  0819               	movf	??_lcd_putc^(0+384),w
  1662  0CE2  0092               	movwf	lcd_envia_byte@n^(0+384)
  1663  0CE3  3001               	movlw	1
  1664  0CE4  120A  158A  23C6   	fcall	_lcd_envia_byte
  1665                           
  1666                           ;lcd_4bit.c: 102: }
  1667                           
  1668                           ;lcd_4bit.c: 101: break;
  1669  0CE7  0008               	return
  1670  0CE8                     l2037:	
  1671  0CE8  1683               	bsf	3,5	;RP0=1, select bank3
  1672  0CE9  1703               	bsf	3,6	;RP1=1, select bank3
  1673  0CEA  081B               	movf	lcd_putc@c^(0+384),w
  1674                           
  1675                           ; Switch size 1, requested type "space"
  1676                           ; Number of cases is 3, Range of values is 8 to 12
  1677                           ; switch strategies available:
  1678                           ; Name         Instructions Cycles
  1679                           ; simple_byte           10     6 (average)
  1680                           ; direct_byte           26    11 (fixed)
  1681                           ; jumptable            263     9 (fixed)
  1682                           ;	Chosen strategy is simple_byte
  1683  0CEB  3A08               	xorlw	8	; case 8
  1684  0CEC  1903               	skipnz
  1685  0CED  2CD2               	goto	l2031
  1686  0CEE  3A02               	xorlw	2	; case 10
  1687  0CEF  1903               	skipnz
  1688  0CF0  2CC7               	goto	l2029
  1689  0CF1  3A06               	xorlw	6	; case 12
  1690  0CF2  1903               	skipnz
  1691  0CF3  2CB3               	goto	l2025
  1692  0CF4  2CDD               	goto	l2033
  1693  0CF5  0008               	return
  1694  0CF6                     __end_of_lcd_putc:	
  1695                           
  1696                           	psect	text5
  1697  0A19                     __ptext5:	
  1698 ;; *************** function _lcd_gotoxy *****************
  1699 ;; Defined at:
  1700 ;;		line 70 in file "lcd_4bit.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  x               1    wreg     unsigned char 
  1703 ;;  y               1    5[BANK3 ] unsigned char 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  x               1    7[BANK3 ] unsigned char 
  1706 ;;  address         1    8[BANK3 ] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;		None               void
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0, pclath, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1716 ;;      Params:         0       0       0       1       0
  1717 ;;      Locals:         0       0       0       2       0
  1718 ;;      Temps:          0       0       0       1       0
  1719 ;;      Totals:         0       0       0       4       0
  1720 ;;Total ram usage:        4 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    9
  1723 ;; This function calls:
  1724 ;;		_lcd_envia_byte
  1725 ;; This function is called by:
  1726 ;;		_lcd_putc
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function _lcd_gotoxy
  1732  0A19                     _lcd_gotoxy:	
  1733                           
  1734                           ;incstack = 0
  1735 ;; hardware stack exceeded
  1736                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1737                           ;lcd_gotoxy@x stored from wreg
  1738  0A19  1683               	bsf	3,5	;RP0=1, select bank3
  1739  0A1A  1703               	bsf	3,6	;RP1=1, select bank3
  1740  0A1B  0097               	movwf	lcd_gotoxy@x^(0+384)
  1741                           
  1742                           ;lcd_4bit.c: 72: unsigned char address;
  1743                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1744  0A1C  0815               	movf	lcd_gotoxy@y^(0+384),w
  1745  0A1D  3A01               	xorlw	1
  1746  0A1E  1903               	skipnz
  1747  0A1F  2A25               	goto	l1859
  1748  0A20  3040               	movlw	64
  1749  0A21  0096               	movwf	??_lcd_gotoxy^(0+384)
  1750  0A22  0816               	movf	??_lcd_gotoxy^(0+384),w
  1751  0A23  0098               	movwf	lcd_gotoxy@address^(0+384)
  1752  0A24  2A26               	goto	l1861
  1753  0A25                     l1859:	
  1754                           
  1755                           ;lcd_4bit.c: 75: else address=0;
  1756  0A25  0198               	clrf	lcd_gotoxy@address^(0+384)
  1757  0A26                     l1861:	
  1758                           
  1759                           ;lcd_4bit.c: 77: address += x-1;
  1760  0A26  0817               	movf	lcd_gotoxy@x^(0+384),w
  1761  0A27  3EFF               	addlw	255
  1762  0A28  0096               	movwf	??_lcd_gotoxy^(0+384)
  1763  0A29  0816               	movf	??_lcd_gotoxy^(0+384),w
  1764  0A2A  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1765                           
  1766                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1767  0A2B  0818               	movf	lcd_gotoxy@address^(0+384),w
  1768  0A2C  3880               	iorlw	128
  1769  0A2D  0096               	movwf	??_lcd_gotoxy^(0+384)
  1770  0A2E  0816               	movf	??_lcd_gotoxy^(0+384),w
  1771  0A2F  0092               	movwf	lcd_envia_byte@n^(0+384)
  1772  0A30  3000               	movlw	0
  1773  0A31  120A  158A  23C6   	fcall	_lcd_envia_byte
  1774  0A34  0008               	return
  1775  0A35                     __end_of_lcd_gotoxy:	
  1776                           
  1777                           	psect	text6
  1778  0EA4                     __ptext6:	
  1779 ;; *************** function _init_lcd_4bit *****************
  1780 ;; Defined at:
  1781 ;;		line 6 in file "lcd_4bit.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  i               1    7[BANK3 ] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;		None               void
  1788 ;; Registers used:
  1789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1795 ;;      Params:         0       0       0       0       0
  1796 ;;      Locals:         0       0       0       1       0
  1797 ;;      Temps:          0       0       0       2       0
  1798 ;;      Totals:         0       0       0       3       0
  1799 ;;Total ram usage:        3 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    9
  1802 ;; This function calls:
  1803 ;;		_lcd_envia_byte
  1804 ;;		_lcd_envia_nibble
  1805 ;; This function is called by:
  1806 ;;		_inicialize
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _init_lcd_4bit
  1812  0EA4                     _init_lcd_4bit:	
  1813                           
  1814                           ;lcd_4bit.c: 8: unsigned char i;
  1815                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1816                           
  1817                           ;incstack = 0
  1818 ;; hardware stack exceeded
  1819                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1820  0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  1821  0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  1822  0EA6  1206               	bcf	6,4	;volatile
  1823                           
  1824                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1825  0EA7  1286               	bcf	6,5	;volatile
  1826                           
  1827                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1828  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0EAA  1206               	bcf	6,4	;volatile
  1831                           
  1832                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1833  0EAB  1286               	bcf	6,5	;volatile
  1834                           
  1835                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1836  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  1837  0EAD  1303               	bcf	3,6	;RP1=0, select bank1
  1838  0EAE  1006               	bcf	6,0	;volatile
  1839                           
  1840                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1841  0EAF  1086               	bcf	6,1	;volatile
  1842                           
  1843                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1844  0EB0  1106               	bcf	6,2	;volatile
  1845                           
  1846                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1847  0EB1  1186               	bcf	6,3	;volatile
  1848                           
  1849                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1850  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0EB4  1006               	bcf	6,0	;volatile
  1853                           
  1854                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1855  0EB5  1086               	bcf	6,1	;volatile
  1856                           
  1857                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1858  0EB6  1106               	bcf	6,2	;volatile
  1859                           
  1860                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1861  0EB7  1186               	bcf	6,3	;volatile
  1862                           
  1863                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1864  0EB8  3062               	movlw	98
  1865  0EB9  1683               	bsf	3,5	;RP0=1, select bank3
  1866  0EBA  1703               	bsf	3,6	;RP1=1, select bank3
  1867  0EBB  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1868  0EBC  3065               	movlw	101
  1869  0EBD  0095               	movwf	??_init_lcd_4bit^(0+384)
  1870  0EBE                     u3487:	
  1871  0EBE  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1872  0EBF  2EBE               	goto	u3487
  1873  0EC0  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1874  0EC1  2EBE               	goto	u3487
  1875  0EC2  2EC3               	nop2
  1876                           
  1877                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1878  0EC3  1683               	bsf	3,5	;RP0=1, select bank3
  1879  0EC4  1703               	bsf	3,6	;RP1=1, select bank3
  1880  0EC5  0197               	clrf	init_lcd_4bit@i^(0+384)
  1881  0EC6  3003               	movlw	3
  1882  0EC7  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1883  0EC8  1803               	btfsc	3,0
  1884  0EC9  2EE5               	goto	l2371
  1885  0ECA                     l2363:	
  1886                           
  1887                           ;lcd_4bit.c: 26: {
  1888                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1889  0ECA  3003               	movlw	3
  1890  0ECB  120A  158A  2590  120A  158A  	fcall	_lcd_envia_nibble
  1891                           
  1892                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1893  0ED0  3021               	movlw	33
  1894  0ED1  1683               	bsf	3,5	;RP0=1, select bank3
  1895  0ED2  1703               	bsf	3,6	;RP1=1, select bank3
  1896  0ED3  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1897  0ED4  3076               	movlw	118
  1898  0ED5  0095               	movwf	??_init_lcd_4bit^(0+384)
  1899  0ED6                     u3497:	
  1900  0ED6  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1901  0ED7  2ED6               	goto	u3497
  1902  0ED8  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1903  0ED9  2ED6               	goto	u3497
  1904  0EDA  0000               	nop
  1905  0EDB  3001               	movlw	1
  1906  0EDC  1683               	bsf	3,5	;RP0=1, select bank3
  1907  0EDD  1703               	bsf	3,6	;RP1=1, select bank3
  1908  0EDE  0095               	movwf	??_init_lcd_4bit^(0+384)
  1909  0EDF  0815               	movf	??_init_lcd_4bit^(0+384),w
  1910  0EE0  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1911  0EE1  3003               	movlw	3
  1912  0EE2  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1913  0EE3  1C03               	skipc
  1914  0EE4  2ECA               	goto	l2363
  1915  0EE5                     l2371:	
  1916                           
  1917                           ;lcd_4bit.c: 29: }
  1918                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1919  0EE5  3002               	movlw	2
  1920  0EE6  120A  158A  2590  120A  158A  	fcall	_lcd_envia_nibble
  1921                           
  1922                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1923  0EEB  1683               	bsf	3,5	;RP0=1, select bank3
  1924  0EEC  1703               	bsf	3,6	;RP1=1, select bank3
  1925  0EED  0197               	clrf	init_lcd_4bit@i^(0+384)
  1926  0EEE                     L1:	
  1927  0EEE  3004               	movlw	4
  1928  0EEF  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1929  0EF0  1803               	btfsc	3,0
  1930  0EF1  0008               	return
  1931                           
  1932                           ;lcd_4bit.c: 33: {
  1933                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1934  0EF2  0817               	movf	init_lcd_4bit@i^(0+384),w
  1935  0EF3  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1936  0EF4  0084               	movwf	4
  1937  0EF5  120A  158A  200A  120A  158A  	fcall	stringdir
  1938  0EFA  0095               	movwf	??_init_lcd_4bit^(0+384)
  1939  0EFB  0815               	movf	??_init_lcd_4bit^(0+384),w
  1940  0EFC  0092               	movwf	lcd_envia_byte@n^(0+384)
  1941  0EFD  3000               	movlw	0
  1942  0EFE  120A  158A  23C6  120A  158A  	fcall	_lcd_envia_byte
  1943  0F03  3001               	movlw	1
  1944  0F04  1683               	bsf	3,5	;RP0=1, select bank3
  1945  0F05  1703               	bsf	3,6	;RP1=1, select bank3
  1946  0F06  0095               	movwf	??_init_lcd_4bit^(0+384)
  1947  0F07  0815               	movf	??_init_lcd_4bit^(0+384),w
  1948  0F08  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1949  0F09  2EEE               	goto	L1
  1950  0F0A                     __end_of_init_lcd_4bit:	
  1951                           
  1952                           	psect	text7
  1953  0C6F                     __ptext7:	
  1954 ;; *************** function _LCDClear *****************
  1955 ;; Defined at:
  1956 ;;		line 179 in file "lcd_4bit.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;		None               void
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0, pclath, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1970 ;;      Params:         0       0       0       0       0
  1971 ;;      Locals:         0       0       0       0       0
  1972 ;;      Temps:          0       0       0       2       0
  1973 ;;      Totals:         0       0       0       2       0
  1974 ;;Total ram usage:        2 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    9
  1977 ;; This function calls:
  1978 ;;		_lcd_envia_byte
  1979 ;; This function is called by:
  1980 ;;		_inicialize
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           
  1985                           ;psect for function _LCDClear
  1986  0C6F                     _LCDClear:	
  1987                           
  1988                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  1989                           
  1990                           ;incstack = 0
  1991 ;; hardware stack exceeded
  1992                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  1993  0C6F  1683               	bsf	3,5	;RP0=1, select bank3
  1994  0C70  1703               	bsf	3,6	;RP1=1, select bank3
  1995  0C71  0192               	clrf	lcd_envia_byte@n^(0+384)
  1996  0C72  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1997  0C73  3000               	movlw	0
  1998  0C74  120A  158A  23C6  120A  158A  	fcall	_lcd_envia_byte
  1999                           
  2000                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2001  0C79  3041               	movlw	65
  2002  0C7A  1683               	bsf	3,5	;RP0=1, select bank3
  2003  0C7B  1703               	bsf	3,6	;RP1=1, select bank3
  2004  0C7C  0096               	movwf	(??_LCDClear^(0+384)+1)
  2005  0C7D  30EE               	movlw	238
  2006  0C7E  0095               	movwf	??_LCDClear^(0+384)
  2007  0C7F                     u3507:	
  2008  0C7F  0B95               	decfsz	??_LCDClear^(0+384),f
  2009  0C80  2C7F               	goto	u3507
  2010  0C81  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2011  0C82  2C7F               	goto	u3507
  2012  0C83  0000               	nop
  2013                           
  2014                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2015  0C84  300C               	movlw	12
  2016  0C85  1683               	bsf	3,5	;RP0=1, select bank3
  2017  0C86  1703               	bsf	3,6	;RP1=1, select bank3
  2018  0C87  0095               	movwf	??_LCDClear^(0+384)
  2019  0C88  0815               	movf	??_LCDClear^(0+384),w
  2020  0C89  0092               	movwf	lcd_envia_byte@n^(0+384)
  2021  0C8A  3000               	movlw	0
  2022  0C8B  120A  158A  23C6  120A  158A  	fcall	_lcd_envia_byte
  2023                           
  2024                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2025  0C90  30F9               	movlw	249
  2026  0C91  1683               	bsf	3,5	;RP0=1, select bank3
  2027  0C92  1703               	bsf	3,6	;RP1=1, select bank3
  2028  0C93  0095               	movwf	??_LCDClear^(0+384)
  2029  0C94                     u3517:	
  2030  0C94  0000               	nop
  2031  0C95  0B95               	decfsz	??_LCDClear^(0+384),f
  2032  0C96  2C94               	goto	u3517
  2033  0C97  2C98               	nop2	;nop
  2034  0C98  0000               	nop
  2035                           
  2036                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2037  0C99  3006               	movlw	6
  2038  0C9A  1683               	bsf	3,5	;RP0=1, select bank3
  2039  0C9B  1703               	bsf	3,6	;RP1=1, select bank3
  2040  0C9C  0095               	movwf	??_LCDClear^(0+384)
  2041  0C9D  0815               	movf	??_LCDClear^(0+384),w
  2042  0C9E  0092               	movwf	lcd_envia_byte@n^(0+384)
  2043  0C9F  3000               	movlw	0
  2044  0CA0  120A  158A  23C6  120A  158A  	fcall	_lcd_envia_byte
  2045                           
  2046                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2047  0CA5  30F9               	movlw	249
  2048  0CA6  1683               	bsf	3,5	;RP0=1, select bank3
  2049  0CA7  1703               	bsf	3,6	;RP1=1, select bank3
  2050  0CA8  0095               	movwf	??_LCDClear^(0+384)
  2051  0CA9                     u3527:	
  2052  0CA9  0000               	nop
  2053  0CAA  0B95               	decfsz	??_LCDClear^(0+384),f
  2054  0CAB  2CA9               	goto	u3527
  2055  0CAC  2CAD               	nop2	;nop
  2056  0CAD  0000               	nop
  2057  0CAE  0008               	return
  2058  0CAF                     __end_of_LCDClear:	
  2059                           
  2060                           	psect	text8
  2061  0BC6                     __ptext8:	
  2062 ;; *************** function _lcd_envia_byte *****************
  2063 ;; Defined at:
  2064 ;;		line 53 in file "lcd_4bit.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  address         1    wreg     unsigned char 
  2067 ;;  n               1    2[BANK3 ] unsigned char 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  address         1    4[BANK3 ] unsigned char 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0, pclath, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2079 ;;      Params:         0       0       0       1       0
  2080 ;;      Locals:         0       0       0       1       0
  2081 ;;      Temps:          0       0       0       1       0
  2082 ;;      Totals:         0       0       0       3       0
  2083 ;;Total ram usage:        3 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    8
  2086 ;; This function calls:
  2087 ;;		_lcd_envia_nibble
  2088 ;; This function is called by:
  2089 ;;		_init_lcd_4bit
  2090 ;;		_lcd_gotoxy
  2091 ;;		_lcd_putc
  2092 ;;		_LCDClear
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           
  2097                           ;psect for function _lcd_envia_byte
  2098  0BC6                     _lcd_envia_byte:	
  2099                           
  2100                           ;incstack = 0
  2101 ;; hardware stack exceeded
  2102                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2103                           ;lcd_envia_byte@address stored from wreg
  2104  0BC6  1683               	bsf	3,5	;RP0=1, select bank3
  2105  0BC7  1703               	bsf	3,6	;RP1=1, select bank3
  2106  0BC8  0094               	movwf	lcd_envia_byte@address^(0+384)
  2107                           
  2108                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2109  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0BCB  1286               	bcf	6,5	;volatile
  2112                           
  2113                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2114  0BCC  3063               	movlw	99
  2115  0BCD  1683               	bsf	3,5	;RP0=1, select bank3
  2116  0BCE  1703               	bsf	3,6	;RP1=1, select bank3
  2117  0BCF  0093               	movwf	??_lcd_envia_byte^(0+384)
  2118  0BD0                     u3537:	
  2119  0BD0  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2120  0BD1  2BD0               	goto	u3537
  2121  0BD2  2BD3               	nop2	;nop
  2122                           
  2123                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2124  0BD3  1683               	bsf	3,5	;RP0=1, select bank3
  2125  0BD4  1703               	bsf	3,6	;RP1=1, select bank3
  2126  0BD5  0814               	movf	lcd_envia_byte@address^(0+384),w
  2127  0BD6  1903               	btfsc	3,2
  2128  0BD7  2BDC               	goto	l177
  2129  0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0BDA  1686               	bsf	6,5	;volatile
  2132  0BDB  2BDF               	goto	l178
  2133  0BDC                     l177:	
  2134                           
  2135                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2136  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  2137  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  2138  0BDE  1286               	bcf	6,5	;volatile
  2139  0BDF                     l178:	
  2140                           
  2141                           ;lcd_4bit.c: 61: _delay(1);
  2142  0BDF  0000               	nop
  2143                           
  2144                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2145  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  2147  0BE2  1206               	bcf	6,4	;volatile
  2148                           
  2149                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2150  0BE3  1683               	bsf	3,5	;RP0=1, select bank3
  2151  0BE4  1703               	bsf	3,6	;RP1=1, select bank3
  2152  0BE5  0812               	movf	lcd_envia_byte@n^(0+384),w
  2153  0BE6  0093               	movwf	??_lcd_envia_byte^(0+384)
  2154  0BE7  3004               	movlw	4
  2155  0BE8                     u1745:	
  2156  0BE8  1003               	clrc
  2157  0BE9  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2158  0BEA  3EFF               	addlw	-1
  2159  0BEB  1D03               	skipz
  2160  0BEC  2BE8               	goto	u1745
  2161  0BED  0813               	movf	??_lcd_envia_byte^(0+384),w
  2162  0BEE  120A  158A  2590  120A  158A  	fcall	_lcd_envia_nibble
  2163                           
  2164                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2165  0BF3  1683               	bsf	3,5	;RP0=1, select bank3
  2166  0BF4  1703               	bsf	3,6	;RP1=1, select bank3
  2167  0BF5  0812               	movf	lcd_envia_byte@n^(0+384),w
  2168  0BF6  390F               	andlw	15
  2169  0BF7  120A  158A  2590   	fcall	_lcd_envia_nibble
  2170  0BFA  0008               	return
  2171  0BFB                     __end_of_lcd_envia_byte:	
  2172                           
  2173                           	psect	text9
  2174  0D90                     __ptext9:	
  2175 ;; *************** function _lcd_envia_nibble *****************
  2176 ;; Defined at:
  2177 ;;		line 39 in file "lcd_4bit.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  n               1    wreg     unsigned char 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  n               1    1[BANK3 ] unsigned char 
  2182 ;; Return value:  Size  Location     Type
  2183 ;;		None               void
  2184 ;; Registers used:
  2185 ;;		wreg, status,2, status,0
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2191 ;;      Params:         0       0       0       0       0
  2192 ;;      Locals:         0       0       0       1       0
  2193 ;;      Temps:          0       0       0       1       0
  2194 ;;      Totals:         0       0       0       2       0
  2195 ;;Total ram usage:        2 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:    7
  2198 ;; This function calls:
  2199 ;;		Nothing
  2200 ;; This function is called by:
  2201 ;;		_init_lcd_4bit
  2202 ;;		_lcd_envia_byte
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           
  2207                           ;psect for function _lcd_envia_nibble
  2208  0D90                     _lcd_envia_nibble:	
  2209                           
  2210                           ;incstack = 0
  2211 ;; hardware stack exceeded
  2212                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2213                           ;lcd_envia_nibble@n stored from wreg
  2214  0D90  1683               	bsf	3,5	;RP0=1, select bank3
  2215  0D91  1703               	bsf	3,6	;RP1=1, select bank3
  2216  0D92  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2217                           
  2218                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2219  0D93  3000               	movlw	0
  2220  0D94  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2221  0D95  3001               	movlw	1
  2222  0D96  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2223  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0D99  0806               	movf	6,w	;volatile
  2226  0D9A  1683               	bsf	3,5	;RP0=1, select bank3
  2227  0D9B  1703               	bsf	3,6	;RP1=1, select bank3
  2228  0D9C  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2229  0D9D  39FE               	andlw	-2
  2230  0D9E  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2231  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0DA1  0086               	movwf	6	;volatile
  2234                           
  2235                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2236  0DA2  3000               	movlw	0
  2237  0DA3  1683               	bsf	3,5	;RP0=1, select bank3
  2238  0DA4  1703               	bsf	3,6	;RP1=1, select bank3
  2239  0DA5  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2240  0DA6  3001               	movlw	1
  2241  0DA7  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2242  0DA8  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2243  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0DAB  0806               	movf	6,w	;volatile
  2246  0DAC  1683               	bsf	3,5	;RP0=1, select bank3
  2247  0DAD  1703               	bsf	3,6	;RP1=1, select bank3
  2248  0DAE  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2249  0DAF  39FD               	andlw	-3
  2250  0DB0  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2251  0DB1  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0DB2  1303               	bcf	3,6	;RP1=0, select bank0
  2253  0DB3  0086               	movwf	6	;volatile
  2254                           
  2255                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2256  0DB4  3000               	movlw	0
  2257  0DB5  1683               	bsf	3,5	;RP0=1, select bank3
  2258  0DB6  1703               	bsf	3,6	;RP1=1, select bank3
  2259  0DB7  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2260  0DB8  3001               	movlw	1
  2261  0DB9  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2262  0DBA  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2263  0DBB  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2264  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  2265  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  2266  0DBE  0806               	movf	6,w	;volatile
  2267  0DBF  1683               	bsf	3,5	;RP0=1, select bank3
  2268  0DC0  1703               	bsf	3,6	;RP1=1, select bank3
  2269  0DC1  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2270  0DC2  39FB               	andlw	-5
  2271  0DC3  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2272  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  2273  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  2274  0DC6  0086               	movwf	6	;volatile
  2275                           
  2276                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2277  0DC7  3000               	movlw	0
  2278  0DC8  1683               	bsf	3,5	;RP0=1, select bank3
  2279  0DC9  1703               	bsf	3,6	;RP1=1, select bank3
  2280  0DCA  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2281  0DCB  3001               	movlw	1
  2282  0DCC  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2283  0DCD  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2284  0DCE  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2285  0DCF  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2286  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  2287  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  2288  0DD2  0806               	movf	6,w	;volatile
  2289  0DD3  1683               	bsf	3,5	;RP0=1, select bank3
  2290  0DD4  1703               	bsf	3,6	;RP1=1, select bank3
  2291  0DD5  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2292  0DD6  39F7               	andlw	-9
  2293  0DD7  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2294  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0DDA  0086               	movwf	6	;volatile
  2297                           
  2298                           ;lcd_4bit.c: 46: _delay(1);
  2299  0DDB  0000               	nop
  2300                           
  2301                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2302  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  2303  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  2304  0DDE  1606               	bsf	6,4	;volatile
  2305                           
  2306                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2307  0DDF  3003               	movlw	3
  2308  0DE0  1683               	bsf	3,5	;RP0=1, select bank3
  2309  0DE1  1703               	bsf	3,6	;RP1=1, select bank3
  2310  0DE2  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2311  0DE3                     u3547:	
  2312  0DE3  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2313  0DE4  2DE3               	goto	u3547
  2314                           
  2315                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2316  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0DE7  1206               	bcf	6,4	;volatile
  2319  0DE8  0008               	return
  2320  0DE9                     __end_of_lcd_envia_nibble:	
  2321                           
  2322                           	psect	text10
  2323  099C                     __ptext10:	
  2324 ;; *************** function _ADCInit *****************
  2325 ;; Defined at:
  2326 ;;		line 112 in file "main.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;		None               void
  2333 ;; Registers used:
  2334 ;;		None
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2340 ;;      Params:         0       0       0       0       0
  2341 ;;      Locals:         0       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0
  2343 ;;      Totals:         0       0       0       0       0
  2344 ;;Total ram usage:        0 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    7
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		_inicialize
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           
  2355                           ;psect for function _ADCInit
  2356  099C                     _ADCInit:	
  2357                           
  2358                           ;main.c: 114: ADCON1bits.ADFM = 1;
  2359                           
  2360                           ;incstack = 0
  2361 ;; hardware stack exceeded
  2362                           ; Regs used in _ADCInit: []
  2363  099C  1683               	bsf	3,5	;RP0=1, select bank1
  2364  099D  1303               	bcf	3,6	;RP1=0, select bank1
  2365  099E  179F               	bsf	31,7	;volatile
  2366                           
  2367                           ;main.c: 115: ADCON1bits.PCFG3 = 0;
  2368  099F  119F               	bcf	31,3	;volatile
  2369                           
  2370                           ;main.c: 116: ADCON1bits.PCFG2 = 0;
  2371  09A0  111F               	bcf	31,2	;volatile
  2372                           
  2373                           ;main.c: 117: ADCON1bits.PCFG1 = 0;
  2374  09A1  109F               	bcf	31,1	;volatile
  2375                           
  2376                           ;main.c: 118: ADCON1bits.PCFG0 = 0;
  2377  09A2  101F               	bcf	31,0	;volatile
  2378                           
  2379                           ;main.c: 121: ADCON0bits.ADCS1 = 1;
  2380  09A3  1283               	bcf	3,5	;RP0=0, select bank0
  2381  09A4  1303               	bcf	3,6	;RP1=0, select bank0
  2382  09A5  179F               	bsf	31,7	;volatile
  2383                           
  2384                           ;main.c: 122: ADCON0bits.ADCS0 = 0;
  2385  09A6  131F               	bcf	31,6	;volatile
  2386                           
  2387                           ;main.c: 123: ADCON0bits.ADON = 1;
  2388  09A7  141F               	bsf	31,0	;volatile
  2389                           
  2390                           ;main.c: 126: PIE1bits.ADIE = 1;
  2391  09A8  1683               	bsf	3,5	;RP0=1, select bank1
  2392  09A9  1303               	bcf	3,6	;RP1=0, select bank1
  2393  09AA  170C               	bsf	12,6	;volatile
  2394                           
  2395                           ;main.c: 127: PIR1bits.ADIF = 0;
  2396  09AB  1283               	bcf	3,5	;RP0=0, select bank0
  2397  09AC  1303               	bcf	3,6	;RP1=0, select bank0
  2398  09AD  130C               	bcf	12,6	;volatile
  2399  09AE  0008               	return
  2400  09AF                     __end_of_ADCInit:	
  2401                           
  2402                           	psect	text11
  2403  0A35                     __ptext11:	
  2404 ;; *************** function _ADCRead *****************
  2405 ;; Defined at:
  2406 ;;		line 134 in file "main.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  ch              2    0[BANK3 ] int 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;		None               void
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2420 ;;      Params:         0       0       0       2       0
  2421 ;;      Locals:         0       0       0       0       0
  2422 ;;      Temps:          0       0       0       1       0
  2423 ;;      Totals:         0       0       0       3       0
  2424 ;;Total ram usage:        3 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    7
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _ADCRead
  2436  0A35                     _ADCRead:	
  2437                           
  2438                           ;main.c: 135: ADCON0bits.CHS = ch;
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2442  0A35  1683               	bsf	3,5	;RP0=1, select bank3
  2443  0A36  1703               	bsf	3,6	;RP1=1, select bank3
  2444  0A37  0810               	movf	ADCRead@ch^(0+384),w
  2445  0A38  0092               	movwf	??_ADCRead^(0+384)
  2446  0A39  0D92               	rlf	??_ADCRead^(0+384),f
  2447  0A3A  0D92               	rlf	??_ADCRead^(0+384),f
  2448  0A3B  0D92               	rlf	??_ADCRead^(0+384),f
  2449  0A3C  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0A3D  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0A3E  081F               	movf	31,w	;volatile
  2452  0A3F  1683               	bsf	3,5	;RP0=1, select bank3
  2453  0A40  1703               	bsf	3,6	;RP1=1, select bank3
  2454  0A41  0612               	xorwf	??_ADCRead^(0+384),w
  2455  0A42  39C7               	andlw	-57
  2456  0A43  0612               	xorwf	??_ADCRead^(0+384),w
  2457  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0A46  009F               	movwf	31	;volatile
  2460                           
  2461                           ;main.c: 136: _delay((unsigned long)((25)*(20000000/4000000.0)));
  2462  0A47  3029               	movlw	41
  2463  0A48  1683               	bsf	3,5	;RP0=1, select bank3
  2464  0A49  1703               	bsf	3,6	;RP1=1, select bank3
  2465  0A4A  0092               	movwf	??_ADCRead^(0+384)
  2466  0A4B                     u3557:	
  2467  0A4B  0B92               	decfsz	??_ADCRead^(0+384),f
  2468  0A4C  2A4B               	goto	u3557
  2469  0A4D  0000               	nop
  2470                           
  2471                           ;main.c: 137: ADCON0bits.GO = 1;
  2472  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0A50  151F               	bsf	31,2	;volatile
  2475  0A51                     l88:	
  2476                           ;main.c: 138: while (ADCON0bits.GO_DONE);
  2477                           
  2478  0A51  1D1F               	btfss	31,2	;volatile
  2479  0A52  0008               	return
  2480  0A53  2A51               	goto	l88
  2481  0A54                     __end_of_ADCRead:	
  2482                           
  2483                           	psect	text12
  2484  026C                     __ptext12:	
  2485 ;; *************** function _ISR *****************
  2486 ;; Defined at:
  2487 ;;		line 232 in file "main.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  recebido        1   67[BANK0 ] unsigned char 
  2492 ;;  input2          3   73[BANK0 ] float 
  2493 ;;  input           3   70[BANK0 ] float 
  2494 ;;  pre             3   63[BANK0 ] float 
  2495 ;;  preint          2   76[BANK0 ] int 
  2496 ;;  status          2   68[BANK0 ] int 
  2497 ;;  percentual      1   66[BANK0 ] PTR unsigned char 
  2498 ;;		 -> ftoa@buf(17), 
  2499 ;;  bufferConver    1   62[BANK0 ] PTR unsigned char 
  2500 ;;		 -> ftoa@buf(17), 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2510 ;;      Params:         0       0       0       0       0
  2511 ;;      Locals:         0      16       0       0       0
  2512 ;;      Temps:          0       6       0       0       0
  2513 ;;      Totals:         0      22       0       0       0
  2514 ;;Total ram usage:       22 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    6
  2517 ;; This function calls:
  2518 ;;		_Ativar
  2519 ;;		_Bomba
  2520 ;;		_ProgressBar
  2521 ;;		_USARTReceiveChar
  2522 ;;		___awtoft
  2523 ;;		___ftdiv
  2524 ;;		___ftmul
  2525 ;;		___fttol
  2526 ;;		_ftoa
  2527 ;;		_sendSerial
  2528 ;;		i1_lcd_escreve_string
  2529 ;;		i1_lcd_gotoxy
  2530 ;; This function is called by:
  2531 ;;		Interrupt level 1
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           
  2536                           ;psect for function _ISR
  2537  026C                     _ISR:	
  2538                           
  2539                           ;main.c: 234: if (PIR1bits.ADIF) {
  2540  026C  1F0C               	btfss	12,6	;volatile
  2541  026D  2B8C               	goto	i1l2617
  2542                           
  2543                           ;main.c: 236: ADCResult = ((ADRESH << 8) + ADRESL);
  2544  026E  081E               	movf	30,w	;volatile
  2545  026F  01EF               	clrf	_ADCResult+1
  2546  0270  07EF               	addwf	_ADCResult+1,f
  2547  0271  1683               	bsf	3,5	;RP0=1, select bank1
  2548  0272  1303               	bcf	3,6	;RP1=0, select bank1
  2549  0273  081E               	movf	30,w	;volatile
  2550  0274  1283               	bcf	3,5	;RP0=0, select bank0
  2551  0275  1303               	bcf	3,6	;RP1=0, select bank0
  2552  0276  01EE               	clrf	_ADCResult
  2553  0277  07EE               	addwf	_ADCResult,f
  2554                           
  2555                           ;main.c: 238: char * bufferConversor;
  2556                           ;main.c: 239: char * percentual;
  2557                           ;main.c: 240: float input;
  2558                           ;main.c: 241: float input2;
  2559                           ;main.c: 242: float pre;
  2560                           ;main.c: 243: int preint;
  2561                           ;main.c: 244: int status;
  2562                           ;main.c: 246: input = ADCResult * 0.0048828125;
  2563  0278  3000               	movlw	0
  2564  0279  00A0               	movwf	___ftmul@f1
  2565  027A  30A0               	movlw	160
  2566  027B  00A1               	movwf	___ftmul@f1+1
  2567  027C  303B               	movlw	59
  2568  027D  00A2               	movwf	___ftmul@f1+2
  2569  027E  086F               	movf	_ADCResult+1,w
  2570  027F  01F9               	clrf	___awtoft@c+1
  2571  0280  07F9               	addwf	___awtoft@c+1,f
  2572  0281  086E               	movf	_ADCResult,w
  2573  0282  01F8               	clrf	___awtoft@c
  2574  0283  07F8               	addwf	___awtoft@c,f
  2575  0284  120A  158A  2254  120A  118A  	fcall	___awtoft
  2576  0289  0878               	movf	?___awtoft,w
  2577  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2578  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2579  028C  00A3               	movwf	___ftmul@f2
  2580  028D  0879               	movf	?___awtoft+1,w
  2581  028E  00A4               	movwf	___ftmul@f2+1
  2582  028F  087A               	movf	?___awtoft+2,w
  2583  0290  00A5               	movwf	___ftmul@f2+2
  2584  0291  120A  118A  24B2  120A  118A  	fcall	___ftmul
  2585  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0298  0820               	movf	?___ftmul,w
  2588  0299  00E6               	movwf	ISR@input
  2589  029A  0821               	movf	?___ftmul+1,w
  2590  029B  00E7               	movwf	ISR@input+1
  2591  029C  0822               	movf	?___ftmul+2,w
  2592  029D  00E8               	movwf	ISR@input+2
  2593                           
  2594                           ;main.c: 247: bufferConversor = ftoa(input, &status);
  2595  029E  0866               	movf	ISR@input,w
  2596  029F  00C4               	movwf	ftoa@f
  2597  02A0  0867               	movf	ISR@input+1,w
  2598  02A1  00C5               	movwf	ftoa@f+1
  2599  02A2  0868               	movf	ISR@input+2,w
  2600  02A3  00C6               	movwf	ftoa@f+2
  2601  02A4  3064               	movlw	ISR@status& (0+255)
  2602  02A5  00D8               	movwf	??_ISR
  2603  02A6  0858               	movf	??_ISR,w
  2604  02A7  00C7               	movwf	ftoa@status
  2605  02A8  120A  118A  2585  120A  118A  	fcall	_ftoa
  2606  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2607  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2608  02AF  00D9               	movwf	??_ISR+1
  2609  02B0  0859               	movf	??_ISR+1,w
  2610  02B1  00DE               	movwf	ISR@bufferConversor
  2611                           
  2612                           ;main.c: 251: lcd_gotoxy(0, 1);
  2613  02B2  01F5               	clrf	i1lcd_gotoxy@y
  2614  02B3  0AF5               	incf	i1lcd_gotoxy@y,f
  2615  02B4  3000               	movlw	0
  2616  02B5  120A  158A  21C7  120A  118A  	fcall	i1_lcd_gotoxy
  2617                           
  2618                           ;main.c: 252: lcd_escreve_string("Nivel:");
  2619  02BA  3074               	movlw	low (STR_2-__stringbase)
  2620  02BB  00FC               	movwf	i1lcd_escreve_string@y
  2621  02BC  3080               	movlw	128
  2622  02BD  00FD               	movwf	i1lcd_escreve_string@y+1
  2623  02BE  120A  158A  2275  120A  118A  	fcall	i1_lcd_escreve_string
  2624                           
  2625                           ;main.c: 253: lcd_gotoxy(7, 1);
  2626  02C3  01F5               	clrf	i1lcd_gotoxy@y
  2627  02C4  0AF5               	incf	i1lcd_gotoxy@y,f
  2628  02C5  3007               	movlw	7
  2629  02C6  120A  158A  21C7  120A  118A  	fcall	i1_lcd_gotoxy
  2630                           
  2631                           ;main.c: 254: input2 = ((input * 100) / 0.8);
  2632  02CB  30CD               	movlw	205
  2633  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2634  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2635  02CE  00B0               	movwf	___ftdiv@f2
  2636  02CF  304C               	movlw	76
  2637  02D0  00B1               	movwf	___ftdiv@f2+1
  2638  02D1  303F               	movlw	63
  2639  02D2  00B2               	movwf	___ftdiv@f2+2
  2640  02D3  3000               	movlw	0
  2641  02D4  00A0               	movwf	___ftmul@f1
  2642  02D5  30C8               	movlw	200
  2643  02D6  00A1               	movwf	___ftmul@f1+1
  2644  02D7  3042               	movlw	66
  2645  02D8  00A2               	movwf	___ftmul@f1+2
  2646  02D9  0866               	movf	ISR@input,w
  2647  02DA  00A3               	movwf	___ftmul@f2
  2648  02DB  0867               	movf	ISR@input+1,w
  2649  02DC  00A4               	movwf	___ftmul@f2+1
  2650  02DD  0868               	movf	ISR@input+2,w
  2651  02DE  00A5               	movwf	___ftmul@f2+2
  2652  02DF  120A  118A  24B2  120A  118A  	fcall	___ftmul
  2653  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2654  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2655  02E6  0820               	movf	?___ftmul,w
  2656  02E7  00B3               	movwf	___ftdiv@f1
  2657  02E8  0821               	movf	?___ftmul+1,w
  2658  02E9  00B4               	movwf	___ftdiv@f1+1
  2659  02EA  0822               	movf	?___ftmul+2,w
  2660  02EB  00B5               	movwf	___ftdiv@f1+2
  2661  02EC  120A  118A  263F  120A  118A  	fcall	___ftdiv
  2662  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  2663  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  2664  02F3  0830               	movf	?___ftdiv,w
  2665  02F4  00E9               	movwf	ISR@input2
  2666  02F5  0831               	movf	?___ftdiv+1,w
  2667  02F6  00EA               	movwf	ISR@input2+1
  2668  02F7  0832               	movf	?___ftdiv+2,w
  2669  02F8  00EB               	movwf	ISR@input2+2
  2670                           
  2671                           ;main.c: 255: percentual = ftoa(input2, &status);
  2672  02F9  0869               	movf	ISR@input2,w
  2673  02FA  00C4               	movwf	ftoa@f
  2674  02FB  086A               	movf	ISR@input2+1,w
  2675  02FC  00C5               	movwf	ftoa@f+1
  2676  02FD  086B               	movf	ISR@input2+2,w
  2677  02FE  00C6               	movwf	ftoa@f+2
  2678  02FF  3064               	movlw	ISR@status& (0+255)
  2679  0300  00D8               	movwf	??_ISR
  2680  0301  0858               	movf	??_ISR,w
  2681  0302  00C7               	movwf	ftoa@status
  2682  0303  120A  118A  2585  120A  118A  	fcall	_ftoa
  2683  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2685  030A  00D9               	movwf	??_ISR+1
  2686  030B  0859               	movf	??_ISR+1,w
  2687  030C  00E2               	movwf	ISR@percentual
  2688                           
  2689                           ;main.c: 256: lcd_escreve_string(percentual);
  2690  030D  0862               	movf	ISR@percentual,w
  2691  030E  00FC               	movwf	i1lcd_escreve_string@y
  2692  030F  3001               	movlw	1
  2693  0310  00FD               	movwf	i1lcd_escreve_string@y+1
  2694  0311  120A  158A  2275  120A  118A  	fcall	i1_lcd_escreve_string
  2695                           
  2696                           ;main.c: 257: lcd_gotoxy(16, 1);
  2697  0316  01F5               	clrf	i1lcd_gotoxy@y
  2698  0317  0AF5               	incf	i1lcd_gotoxy@y,f
  2699  0318  3010               	movlw	16
  2700  0319  120A  158A  21C7  120A  118A  	fcall	i1_lcd_gotoxy
  2701                           
  2702                           ;main.c: 258: lcd_escreve_string("%");
  2703  031E  307B               	movlw	low (STR_3-__stringbase)
  2704  031F  00FC               	movwf	i1lcd_escreve_string@y
  2705  0320  3080               	movlw	128
  2706  0321  00FD               	movwf	i1lcd_escreve_string@y+1
  2707  0322  120A  158A  2275  120A  118A  	fcall	i1_lcd_escreve_string
  2708                           
  2709                           ;main.c: 259: lcd_gotoxy(0, 0);
  2710  0327  01F5               	clrf	i1lcd_gotoxy@y
  2711  0328  3000               	movlw	0
  2712  0329  120A  158A  21C7  120A  118A  	fcall	i1_lcd_gotoxy
  2713                           
  2714                           ;main.c: 260: pre = input2 * 0.16;
  2715  032E  30D7               	movlw	215
  2716  032F  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0330  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0331  00A0               	movwf	___ftmul@f1
  2719  0332  3023               	movlw	35
  2720  0333  00A1               	movwf	___ftmul@f1+1
  2721  0334  303E               	movlw	62
  2722  0335  00A2               	movwf	___ftmul@f1+2
  2723  0336  0869               	movf	ISR@input2,w
  2724  0337  00A3               	movwf	___ftmul@f2
  2725  0338  086A               	movf	ISR@input2+1,w
  2726  0339  00A4               	movwf	___ftmul@f2+1
  2727  033A  086B               	movf	ISR@input2+2,w
  2728  033B  00A5               	movwf	___ftmul@f2+2
  2729  033C  120A  118A  24B2  120A  118A  	fcall	___ftmul
  2730  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0342  1303               	bcf	3,6	;RP1=0, select bank0
  2732  0343  0820               	movf	?___ftmul,w
  2733  0344  00DF               	movwf	ISR@pre
  2734  0345  0821               	movf	?___ftmul+1,w
  2735  0346  00E0               	movwf	ISR@pre+1
  2736  0347  0822               	movf	?___ftmul+2,w
  2737  0348  00E1               	movwf	ISR@pre+2
  2738                           
  2739                           ;main.c: 261: preint = (int) pre;
  2740  0349  085F               	movf	ISR@pre,w
  2741  034A  00B0               	movwf	___fttol@f1
  2742  034B  0860               	movf	ISR@pre+1,w
  2743  034C  00B1               	movwf	___fttol@f1+1
  2744  034D  0861               	movf	ISR@pre+2,w
  2745  034E  00B2               	movwf	___fttol@f1+2
  2746  034F  120A  158A  2772  120A  118A  	fcall	___fttol
  2747  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0356  0831               	movf	?___fttol+1,w
  2750  0357  01ED               	clrf	ISR@preint+1
  2751  0358  07ED               	addwf	ISR@preint+1,f
  2752  0359  0830               	movf	?___fttol,w
  2753  035A  01EC               	clrf	ISR@preint
  2754  035B  07EC               	addwf	ISR@preint,f
  2755                           
  2756                           ;main.c: 262: Bomba();
  2757  035C  120A  158A  22BB  120A  118A  	fcall	_Bomba
  2758                           
  2759                           ;main.c: 263: ProgressBar(preint);
  2760  0361  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0362  1303               	bcf	3,6	;RP1=0, select bank0
  2762  0363  086D               	movf	ISR@preint+1,w
  2763  0364  01A1               	clrf	ProgressBar@preint+1
  2764  0365  07A1               	addwf	ProgressBar@preint+1,f
  2765  0366  086C               	movf	ISR@preint,w
  2766  0367  01A0               	clrf	ProgressBar@preint
  2767  0368  07A0               	addwf	ProgressBar@preint,f
  2768  0369  120A  158A  24F6  120A  118A  	fcall	_ProgressBar
  2769                           
  2770                           ;main.c: 264: sendSerial(preint, SUPERIOR);
  2771  036E  1283               	bcf	3,5	;RP0=0, select bank0
  2772  036F  1303               	bcf	3,6	;RP1=0, select bank0
  2773  0370  086D               	movf	ISR@preint+1,w
  2774  0371  01D3               	clrf	sendSerial@preint+1
  2775  0372  07D3               	addwf	sendSerial@preint+1,f
  2776  0373  086C               	movf	ISR@preint,w
  2777  0374  01D2               	clrf	sendSerial@preint
  2778  0375  07D2               	addwf	sendSerial@preint,f
  2779  0376  302F               	movlw	_SUPERIOR-__stringbase
  2780  0377  0084               	movwf	4
  2781  0378  120A  158A  200A  120A  118A  	fcall	stringdir
  2782  037D  00D4               	movwf	sendSerial@recipiente
  2783  037E  120A  158A  200A  120A  118A  	fcall	stringdir
  2784  0383  00D5               	movwf	sendSerial@recipiente+1
  2785  0384  120A  118A  26F7  120A  118A  	fcall	_sendSerial
  2786                           
  2787                           ;main.c: 265: PIR1bits.ADIF = 0;
  2788  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2789  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2790  038B  130C               	bcf	12,6	;volatile
  2791  038C                     i1l2617:	
  2792                           
  2793                           ;main.c: 266: }
  2794                           ;main.c: 269: if (PIR1bits.RCIF) {
  2795  038C  1E8C               	btfss	12,5	;volatile
  2796  038D  2B9E               	goto	i1l129
  2797                           
  2798                           ;main.c: 270: char recebido = USARTReceiveChar();
  2799  038E  120A  158A  21AF  120A  118A  	fcall	_USARTReceiveChar
  2800  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0394  1303               	bcf	3,6	;RP1=0, select bank0
  2802  0395  00D8               	movwf	??_ISR
  2803  0396  0858               	movf	??_ISR,w
  2804  0397  00E3               	movwf	ISR@recebido
  2805                           
  2806                           ;main.c: 272: Ativar(recebido);
  2807  0398  0863               	movf	ISR@recebido,w
  2808  0399  120A  158A  2393  120A  118A  	fcall	_Ativar
  2809  039E                     i1l129:	
  2810  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2811  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2812  03A0  085D               	movf	??_ISR+5,w
  2813  03A1  00FF               	movwf	127
  2814  03A2  085C               	movf	??_ISR+4,w
  2815  03A3  008A               	movwf	10
  2816  03A4  085B               	movf	??_ISR+3,w
  2817  03A5  0084               	movwf	4
  2818  03A6  0E5A               	swapf	(??_ISR+2)^0,w
  2819  03A7  0083               	movwf	3
  2820  03A8  0EFE               	swapf	126,f
  2821  03A9  0E7E               	swapf	126,w
  2822  03AA  0009               	retfie
  2823  03AB                     __end_of_ISR:	
  2824                           
  2825                           	psect	intentry
  2826  0004                     __pintentry:	
  2827                           ;incstack = 0
  2828 ;; hardware stack exceeded
  2829                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2830                           
  2831  0004                     interrupt_function:	
  2832  007E                     saved_w	set	btemp
  2833  0004  00FE               	movwf	btemp
  2834  0005  0E03               	swapf	3,w
  2835  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2837  0008  00DA               	movwf	??_ISR+2
  2838  0009  0804               	movf	4,w
  2839  000A  00DB               	movwf	??_ISR+3
  2840  000B  080A               	movf	10,w
  2841  000C  00DC               	movwf	??_ISR+4
  2842  000D  087F               	movf	btemp+1,w
  2843  000E  00DD               	movwf	??_ISR+5
  2844  000F  120A  118A  2A6C   	ljmp	_ISR
  2845                           
  2846                           	psect	text13
  2847  06F7                     __ptext13:	
  2848 ;; *************** function _sendSerial *****************
  2849 ;; Defined at:
  2850 ;;		line 204 in file "main.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  preint          2   50[BANK0 ] int 
  2853 ;;  recipiente      2   52[BANK0 ] int 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  origem         40    0[BANK1 ] unsigned char [40]
  2856 ;;  x               2   44[BANK1 ] int 
  2857 ;;  status          2   40[BANK1 ] int 
  2858 ;;  nivelRecipie    1   43[BANK1 ] PTR const unsigned char 
  2859 ;;		 -> ftoa@buf(17), 
  2860 ;;  envio           1   42[BANK1 ] PTR const unsigned char 
  2861 ;;		 -> sendSerial@origem(40), 
  2862 ;; Return value:  Size  Location     Type
  2863 ;;		None               void
  2864 ;; Registers used:
  2865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2871 ;;      Params:         0       4       0       0       0
  2872 ;;      Locals:         0       0      46       0       0
  2873 ;;      Temps:          0       2       0       0       0
  2874 ;;      Totals:         0       6      46       0       0
  2875 ;;Total ram usage:       52 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    4
  2878 ;; This function calls:
  2879 ;;		_USARTWriteString
  2880 ;;		___awtoft
  2881 ;;		_ftoa
  2882 ;; This function is called by:
  2883 ;;		_ISR
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           
  2888                           ;psect for function _sendSerial
  2889  06F7                     _sendSerial:	
  2890                           
  2891                           ;main.c: 205: int status = 0, x = 0;
  2892                           
  2893                           ;incstack = 0
  2894 ;; hardware stack exceeded
  2895                           ; Regs used in _sendSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2896  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  2897  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  2898  06F9  01C8               	clrf	sendSerial@status^(0+128)
  2899  06FA  01C9               	clrf	(sendSerial@status+1)^(0+128)
  2900  06FB  01CC               	clrf	sendSerial@x^(0+128)
  2901  06FC  01CD               	clrf	(sendSerial@x+1)^(0+128)
  2902                           
  2903                           ;main.c: 206: char origem [40];
  2904                           ;main.c: 207: const char * envio;
  2905                           ;main.c: 208: const char * nivelRecipiente;
  2906                           ;main.c: 209: nivelRecipiente = ftoa(preint, &status);
  2907  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  2908  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  2909  06FF  0853               	movf	sendSerial@preint+1,w
  2910  0700  01F9               	clrf	___awtoft@c+1
  2911  0701  07F9               	addwf	___awtoft@c+1,f
  2912  0702  0852               	movf	sendSerial@preint,w
  2913  0703  01F8               	clrf	___awtoft@c
  2914  0704  07F8               	addwf	___awtoft@c,f
  2915  0705  120A  158A  2254  120A  118A  	fcall	___awtoft
  2916  070A  0878               	movf	?___awtoft,w
  2917  070B  1283               	bcf	3,5	;RP0=0, select bank0
  2918  070C  1303               	bcf	3,6	;RP1=0, select bank0
  2919  070D  00C4               	movwf	ftoa@f
  2920  070E  0879               	movf	?___awtoft+1,w
  2921  070F  00C5               	movwf	ftoa@f+1
  2922  0710  087A               	movf	?___awtoft+2,w
  2923  0711  00C6               	movwf	ftoa@f+2
  2924  0712  30C8               	movlw	sendSerial@status& (0+255)
  2925  0713  00D6               	movwf	??_sendSerial
  2926  0714  0856               	movf	??_sendSerial,w
  2927  0715  00C7               	movwf	ftoa@status
  2928  0716  120A  118A  2585  120A  118A  	fcall	_ftoa
  2929  071B  1283               	bcf	3,5	;RP0=0, select bank0
  2930  071C  1303               	bcf	3,6	;RP1=0, select bank0
  2931  071D  00D7               	movwf	??_sendSerial+1
  2932  071E  0857               	movf	??_sendSerial+1,w
  2933  071F  1683               	bsf	3,5	;RP0=1, select bank1
  2934  0720  1303               	bcf	3,6	;RP1=0, select bank1
  2935  0721  00CB               	movwf	sendSerial@nivelRecipiente^(0+128)
  2936  0722                     i1l117:	
  2937                           ;main.c: 211: while (*nivelRecipiente != '\n') {
  2938                           
  2939  0722  084B               	movf	sendSerial@nivelRecipiente^(0+128),w
  2940  0723  0084               	movwf	4
  2941  0724  1783               	bsf	3,7	;select IRP bank2
  2942  0725  0800               	movf	0,w
  2943  0726  3A0A               	xorlw	10
  2944  0727  1903               	btfsc	3,2
  2945  0728  2F75               	goto	i1l2487
  2946                           
  2947                           ;main.c: 212: if ((x == 0)) {
  2948  0729  084D               	movf	(sendSerial@x+1)^(0+128),w
  2949  072A  044C               	iorwf	sendSerial@x^(0+128),w
  2950  072B  1D03               	skipz
  2951  072C  2F57               	goto	i1l2481
  2952                           
  2953                           ;main.c: 213: if (recipiente == SUPERIOR) {
  2954  072D  302F               	movlw	_SUPERIOR-__stringbase
  2955  072E  0084               	movwf	4
  2956  072F  120A  158A  200A  120A  118A  	fcall	stringdir
  2957  0734  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0735  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0736  00D6               	movwf	??_sendSerial
  2960  0737  120A  158A  200A  120A  118A  	fcall	stringdir
  2961  073C  00D7               	movwf	??_sendSerial+1
  2962  073D  0857               	movf	??_sendSerial+1,w
  2963  073E  0655               	xorwf	sendSerial@recipiente+1,w
  2964  073F  1D03               	skipz
  2965  0740  2F43               	goto	u306_25
  2966  0741  0856               	movf	??_sendSerial,w
  2967  0742  0654               	xorwf	sendSerial@recipiente,w
  2968  0743                     u306_25:	
  2969  0743  1D03               	skipz
  2970  0744  2F47               	goto	i1l2477
  2971                           
  2972                           ;main.c: 214: origem[x] = 'S';
  2973  0745  3053               	movlw	83
  2974  0746  2F48               	goto	L2
  2975  0747                     i1l2477:	
  2976                           ;main.c: 215: } else {
  2977                           
  2978                           
  2979                           ;main.c: 216: origem[x] = 'I';
  2980  0747  3049               	movlw	73
  2981  0748                     L2:	
  2982  0748  00D6               	movwf	??_sendSerial
  2983  0749  1683               	bsf	3,5	;RP0=1, select bank1
  2984  074A  1303               	bcf	3,6	;RP1=0, select bank1
  2985  074B  084C               	movf	sendSerial@x^(0+128),w
  2986  074C  3EA0               	addlw	sendSerial@origem& (0+255)
  2987  074D  0084               	movwf	4
  2988  074E  1283               	bcf	3,5	;RP0=0, select bank0
  2989  074F  1303               	bcf	3,6	;RP1=0, select bank0
  2990  0750  0856               	movf	??_sendSerial,w
  2991  0751  1383               	bcf	3,7	;select IRP bank1
  2992  0752  0080               	movwf	0
  2993                           
  2994                           ;main.c: 217: }
  2995                           ;main.c: 218: x++;
  2996  0753  3001               	movlw	1
  2997  0754  1683               	bsf	3,5	;RP0=1, select bank1
  2998  0755  1303               	bcf	3,6	;RP1=0, select bank1
  2999  0756  2F6F               	goto	L3
  3000  0757                     i1l2481:	
  3001                           ;main.c: 219: } else {
  3002                           
  3003                           
  3004                           ;main.c: 220: origem[x] = *nivelRecipiente;
  3005  0757  084B               	movf	sendSerial@nivelRecipiente^(0+128),w
  3006  0758  0084               	movwf	4
  3007  0759  1783               	bsf	3,7	;select IRP bank2
  3008  075A  0800               	movf	0,w
  3009  075B  1283               	bcf	3,5	;RP0=0, select bank0
  3010  075C  1303               	bcf	3,6	;RP1=0, select bank0
  3011  075D  00D6               	movwf	??_sendSerial
  3012  075E  1683               	bsf	3,5	;RP0=1, select bank1
  3013  075F  1303               	bcf	3,6	;RP1=0, select bank1
  3014  0760  084C               	movf	sendSerial@x^(0+128),w
  3015  0761  3EA0               	addlw	sendSerial@origem& (0+255)
  3016  0762  0084               	movwf	4
  3017  0763  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0764  1303               	bcf	3,6	;RP1=0, select bank0
  3019  0765  0856               	movf	??_sendSerial,w
  3020  0766  1383               	bcf	3,7	;select IRP bank1
  3021  0767  0080               	movwf	0
  3022                           
  3023                           ;main.c: 221: *nivelRecipiente++;
  3024  0768  3001               	movlw	1
  3025  0769  00D6               	movwf	??_sendSerial
  3026  076A  0856               	movf	??_sendSerial,w
  3027  076B  1683               	bsf	3,5	;RP0=1, select bank1
  3028  076C  1303               	bcf	3,6	;RP1=0, select bank1
  3029  076D  07CB               	addwf	sendSerial@nivelRecipiente^(0+128),f
  3030                           
  3031                           ;main.c: 222: x++;
  3032  076E  3001               	movlw	1
  3033  076F                     L3:	
  3034  076F  07CC               	addwf	sendSerial@x^(0+128),f
  3035  0770  1803               	skipnc
  3036  0771  0ACD               	incf	(sendSerial@x+1)^(0+128),f
  3037  0772  3000               	movlw	0
  3038  0773  07CD               	addwf	(sendSerial@x+1)^(0+128),f
  3039  0774  2F22               	goto	i1l117
  3040  0775                     i1l2487:	
  3041                           
  3042                           ;main.c: 223: }
  3043                           ;main.c: 224: }
  3044                           ;main.c: 225: envio = &origem;
  3045  0775  30A0               	movlw	sendSerial@origem& (0+255)
  3046  0776  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0777  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0778  00D6               	movwf	??_sendSerial
  3049  0779  0856               	movf	??_sendSerial,w
  3050  077A  1683               	bsf	3,5	;RP0=1, select bank1
  3051  077B  1303               	bcf	3,6	;RP1=0, select bank1
  3052  077C  00CA               	movwf	sendSerial@envio^(0+128)
  3053                           
  3054                           ;main.c: 226: USARTWriteString(*envio);
  3055  077D  084A               	movf	sendSerial@envio^(0+128),w
  3056  077E  0084               	movwf	4
  3057  077F  1383               	bcf	3,7	;select IRP bank0
  3058  0780  0800               	movf	0,w
  3059  0781  120A  158A  21E1   	fcall	_USARTWriteString
  3060  0784  0008               	return
  3061  0785                     __end_of_sendSerial:	
  3062                           
  3063                           	psect	text14
  3064  0585                     __ptext14:	
  3065 ;; *************** function _ftoa *****************
  3066 ;; Defined at:
  3067 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  f               3   36[BANK0 ] float 
  3070 ;;  status          1   39[BANK0 ] PTR int 
  3071 ;;		 -> ISR@status(2), sendSerial@status(2), 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  l               4   45[BANK0 ] unsigned long 
  3074 ;;  rem             4   41[BANK0 ] unsigned long 
  3075 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  3076 ;;		 -> ftoa@buf(17), 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      PTR unsigned char 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3086 ;;      Params:         0       4       0       0       0
  3087 ;;      Locals:         0       9       0       0       0
  3088 ;;      Temps:          0       1       0       0       0
  3089 ;;      Totals:         0      14       0       0       0
  3090 ;;Total ram usage:       14 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    3
  3093 ;; This function calls:
  3094 ;;		___ftge
  3095 ;;		___ftmul
  3096 ;;		___ftneg
  3097 ;;		___ftsub
  3098 ;;		___fttol
  3099 ;;		___lltoft
  3100 ;;		_sprintf
  3101 ;; This function is called by:
  3102 ;;		_sendSerial
  3103 ;;		_ISR
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           
  3108                           ;psect for function _ftoa
  3109  0585                     _ftoa:	
  3110                           
  3111                           ;incstack = 0
  3112 ;; hardware stack exceeded
  3113                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3114  0585  30A4               	movlw	ftoa@buf& (0+255)
  3115  0586  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0587  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0588  00C8               	movwf	??_ftoa
  3118  0589  0848               	movf	??_ftoa,w
  3119  058A  00D1               	movwf	ftoa@cp
  3120  058B  0844               	movf	ftoa@f,w
  3121  058C  00F0               	movwf	___ftge@ff1
  3122  058D  0845               	movf	ftoa@f+1,w
  3123  058E  00F1               	movwf	___ftge@ff1+1
  3124  058F  0846               	movf	ftoa@f+2,w
  3125  0590  00F2               	movwf	___ftge@ff1+2
  3126  0591  3000               	movlw	0
  3127  0592  00F3               	movwf	___ftge@ff2
  3128  0593  3000               	movlw	0
  3129  0594  00F4               	movwf	___ftge@ff2+1
  3130  0595  3000               	movlw	0
  3131  0596  00F5               	movwf	___ftge@ff2+2
  3132  0597  120A  158A  25E9  120A  118A  	fcall	___ftge
  3133  059C  1803               	btfsc	3,0
  3134  059D  2DBE               	goto	i1l2341
  3135  059E  302D               	movlw	45
  3136  059F  1283               	bcf	3,5	;RP0=0, select bank0
  3137  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  3138  05A1  00C8               	movwf	??_ftoa
  3139  05A2  0851               	movf	ftoa@cp,w
  3140  05A3  0084               	movwf	4
  3141  05A4  0848               	movf	??_ftoa,w
  3142  05A5  1783               	bsf	3,7	;select IRP bank2
  3143  05A6  0080               	movwf	0
  3144  05A7  3001               	movlw	1
  3145  05A8  00C8               	movwf	??_ftoa
  3146  05A9  0848               	movf	??_ftoa,w
  3147  05AA  07D1               	addwf	ftoa@cp,f
  3148  05AB  0844               	movf	ftoa@f,w
  3149  05AC  00F0               	movwf	___ftneg@f1
  3150  05AD  0845               	movf	ftoa@f+1,w
  3151  05AE  00F1               	movwf	___ftneg@f1+1
  3152  05AF  0846               	movf	ftoa@f+2,w
  3153  05B0  00F2               	movwf	___ftneg@f1+2
  3154  05B1  120A  158A  215B  120A  118A  	fcall	___ftneg
  3155  05B6  0870               	movf	?___ftneg,w
  3156  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  3157  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  3158  05B9  00C4               	movwf	ftoa@f
  3159  05BA  0871               	movf	?___ftneg+1,w
  3160  05BB  00C5               	movwf	ftoa@f+1
  3161  05BC  0872               	movf	?___ftneg+2,w
  3162  05BD  00C6               	movwf	ftoa@f+2
  3163  05BE                     i1l2341:	
  3164  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  3165  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  3166  05C0  0844               	movf	ftoa@f,w
  3167  05C1  00B0               	movwf	___fttol@f1
  3168  05C2  0845               	movf	ftoa@f+1,w
  3169  05C3  00B1               	movwf	___fttol@f1+1
  3170  05C4  0846               	movf	ftoa@f+2,w
  3171  05C5  00B2               	movwf	___fttol@f1+2
  3172  05C6  120A  158A  2772  120A  118A  	fcall	___fttol
  3173  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  3174  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  3175  05CD  0833               	movf	?___fttol+3,w
  3176  05CE  00D0               	movwf	ftoa@l+3
  3177  05CF  0832               	movf	?___fttol+2,w
  3178  05D0  00CF               	movwf	ftoa@l+2
  3179  05D1  0831               	movf	?___fttol+1,w
  3180  05D2  00CE               	movwf	ftoa@l+1
  3181  05D3  0830               	movf	?___fttol,w
  3182  05D4  00CD               	movwf	ftoa@l
  3183  05D5  0850               	movf	ftoa@l+3,w
  3184  05D6  00FB               	movwf	___lltoft@c+3
  3185  05D7  084F               	movf	ftoa@l+2,w
  3186  05D8  00FA               	movwf	___lltoft@c+2
  3187  05D9  084E               	movf	ftoa@l+1,w
  3188  05DA  00F9               	movwf	___lltoft@c+1
  3189  05DB  084D               	movf	ftoa@l,w
  3190  05DC  00F8               	movwf	___lltoft@c
  3191  05DD  120A  158A  230B  120A  118A  	fcall	___lltoft
  3192  05E2  0878               	movf	?___lltoft,w
  3193  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3194  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  3195  05E5  00A7               	movwf	___ftsub@f2
  3196  05E6  0879               	movf	?___lltoft+1,w
  3197  05E7  00A8               	movwf	___ftsub@f2+1
  3198  05E8  087A               	movf	?___lltoft+2,w
  3199  05E9  00A9               	movwf	___ftsub@f2+2
  3200  05EA  0844               	movf	ftoa@f,w
  3201  05EB  00AA               	movwf	___ftsub@f1
  3202  05EC  0845               	movf	ftoa@f+1,w
  3203  05ED  00AB               	movwf	___ftsub@f1+1
  3204  05EE  0846               	movf	ftoa@f+2,w
  3205  05EF  00AC               	movwf	___ftsub@f1+2
  3206  05F0  120A  158A  21FD  120A  118A  	fcall	___ftsub
  3207  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  3208  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  3209  05F7  0827               	movf	?___ftsub,w
  3210  05F8  00C4               	movwf	ftoa@f
  3211  05F9  0828               	movf	?___ftsub+1,w
  3212  05FA  00C5               	movwf	ftoa@f+1
  3213  05FB  0829               	movf	?___ftsub+2,w
  3214  05FC  00C6               	movwf	ftoa@f+2
  3215  05FD  0844               	movf	ftoa@f,w
  3216  05FE  00A3               	movwf	___ftmul@f2
  3217  05FF  0845               	movf	ftoa@f+1,w
  3218  0600  00A4               	movwf	___ftmul@f2+1
  3219  0601  0846               	movf	ftoa@f+2,w
  3220  0602  00A5               	movwf	___ftmul@f2+2
  3221  0603  3024               	movlw	36
  3222  0604  00A0               	movwf	___ftmul@f1
  3223  0605  3074               	movlw	116
  3224  0606  00A1               	movwf	___ftmul@f1+1
  3225  0607  3049               	movlw	73
  3226  0608  00A2               	movwf	___ftmul@f1+2
  3227  0609  120A  118A  24B2  120A  118A  	fcall	___ftmul
  3228  060E  1283               	bcf	3,5	;RP0=0, select bank0
  3229  060F  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0610  0820               	movf	?___ftmul,w
  3231  0611  00B0               	movwf	___fttol@f1
  3232  0612  0821               	movf	?___ftmul+1,w
  3233  0613  00B1               	movwf	___fttol@f1+1
  3234  0614  0822               	movf	?___ftmul+2,w
  3235  0615  00B2               	movwf	___fttol@f1+2
  3236  0616  120A  158A  2772  120A  118A  	fcall	___fttol
  3237  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3238  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3239  061D  0833               	movf	?___fttol+3,w
  3240  061E  00CC               	movwf	ftoa@rem+3
  3241  061F  0832               	movf	?___fttol+2,w
  3242  0620  00CB               	movwf	ftoa@rem+2
  3243  0621  0831               	movf	?___fttol+1,w
  3244  0622  00CA               	movwf	ftoa@rem+1
  3245  0623  0830               	movf	?___fttol,w
  3246  0624  00C9               	movwf	ftoa@rem
  3247  0625  3069               	movlw	(STR_5-__stringbase)& (0+255)
  3248  0626  00C8               	movwf	??_ftoa
  3249  0627  0848               	movf	??_ftoa,w
  3250  0628  00AA               	movwf	sprintf@f
  3251  0629  0850               	movf	ftoa@l+3,w
  3252  062A  00AE               	movwf	?_sprintf+4
  3253  062B  084F               	movf	ftoa@l+2,w
  3254  062C  00AD               	movwf	?_sprintf+3
  3255  062D  084E               	movf	ftoa@l+1,w
  3256  062E  00AC               	movwf	?_sprintf+2
  3257  062F  084D               	movf	ftoa@l,w
  3258  0630  00AB               	movwf	?_sprintf+1
  3259  0631  084C               	movf	ftoa@rem+3,w
  3260  0632  00B2               	movwf	?_sprintf+8
  3261  0633  084B               	movf	ftoa@rem+2,w
  3262  0634  00B1               	movwf	?_sprintf+7
  3263  0635  084A               	movf	ftoa@rem+1,w
  3264  0636  00B0               	movwf	?_sprintf+6
  3265  0637  0849               	movf	ftoa@rem,w
  3266  0638  00AF               	movwf	?_sprintf+5
  3267  0639  0851               	movf	ftoa@cp,w
  3268  063A  120A  118A  2030   	fcall	_sprintf
  3269  063D  30A4               	movlw	ftoa@buf& (0+255)
  3270  063E  0008               	return
  3271  063F                     __end_of_ftoa:	
  3272                           
  3273                           	psect	text15
  3274  0030                     __ptext15:	
  3275 ;; *************** function _sprintf *****************
  3276 ;; Defined at:
  3277 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  sp              1    wreg     PTR unsigned char 
  3280 ;;		 -> ftoa@buf(17), 
  3281 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  3282 ;;		 -> STR_5(11), 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  3285 ;;		 -> ftoa@buf(17), 
  3286 ;;  _val            4   26[BANK0 ] struct .
  3287 ;;  prec            2   33[BANK0 ] int 
  3288 ;;  width           2   31[BANK0 ] int 
  3289 ;;  c               1   35[BANK0 ] char 
  3290 ;;  ap              1   25[BANK0 ] PTR void [1]
  3291 ;;		 -> ?_sprintf(2), 
  3292 ;;  flag            1   24[BANK0 ] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  2   10[BANK0 ] int 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3302 ;;      Params:         0       9       0       0       0
  3303 ;;      Locals:         0      12       0       0       0
  3304 ;;      Temps:          0       5       0       0       0
  3305 ;;      Totals:         0      26       0       0       0
  3306 ;;Total ram usage:       26 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    1
  3309 ;; This function calls:
  3310 ;;		___lldiv
  3311 ;;		___llmod
  3312 ;;		___wmul
  3313 ;;		_isdigit
  3314 ;; This function is called by:
  3315 ;;		_ftoa
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _sprintf
  3321  0030                     _sprintf:	
  3322                           
  3323                           ;incstack = 0
  3324 ;; hardware stack exceeded
  3325                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3326                           ;sprintf@sp stored from wreg
  3327  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3328  0031  1303               	bcf	3,6	;RP1=0, select bank0
  3329  0032  00BE               	movwf	sprintf@sp
  3330                           
  3331                           ;doprnt.c: 494: va_list ap;
  3332                           ;doprnt.c: 499: signed char c;
  3333                           ;doprnt.c: 501: int width;
  3334                           ;doprnt.c: 504: int prec;
  3335                           ;doprnt.c: 508: unsigned char flag;
  3336                           ;doprnt.c: 527: union {
  3337                           ;doprnt.c: 528: unsigned long _val;
  3338                           ;doprnt.c: 529: struct {
  3339                           ;doprnt.c: 530: const char * _cp;
  3340                           ;doprnt.c: 531: unsigned _len;
  3341                           ;doprnt.c: 532: } _str;
  3342                           ;doprnt.c: 533: } _val;
  3343                           ;doprnt.c: 542: *ap = __va_start();
  3344  0033  302B               	movlw	(?_sprintf+1)& (0+255)
  3345  0034  00B3               	movwf	??_sprintf
  3346  0035  0833               	movf	??_sprintf,w
  3347  0036  00B9               	movwf	sprintf@ap
  3348  0037                     i1l2137:	
  3349                           ;doprnt.c: 545: while(c = *f++) {
  3350                           
  3351  0037  3001               	movlw	1
  3352  0038  07AA               	addwf	sprintf@f,f
  3353  0039  30FF               	movlw	-1
  3354  003A  072A               	addwf	sprintf@f,w
  3355  003B  0084               	movwf	4
  3356  003C  120A  158A  200A  120A  118A  	fcall	stringdir
  3357  0041  00B3               	movwf	??_sprintf
  3358  0042  0833               	movf	??_sprintf,w
  3359  0043  00C3               	movwf	sprintf@c
  3360  0044  08C3               	movf	sprintf@c,f
  3361  0045  1903               	btfsc	3,2
  3362  0046  2A67               	goto	i1l2139
  3363                           
  3364                           ;doprnt.c: 547: if(c != '%')
  3365  0047  0843               	movf	sprintf@c,w
  3366  0048  3A25               	xorlw	37
  3367  0049  1903               	skipnz
  3368  004A  2857               	goto	i1l2047
  3369                           
  3370                           ;doprnt.c: 549: {
  3371                           ;doprnt.c: 550: ((*sp++ = (c)));
  3372  004B  0843               	movf	sprintf@c,w
  3373  004C  00B3               	movwf	??_sprintf
  3374  004D  083E               	movf	sprintf@sp,w
  3375  004E  0084               	movwf	4
  3376  004F  0833               	movf	??_sprintf,w
  3377  0050  1783               	bsf	3,7	;select IRP bank2
  3378  0051  0080               	movwf	0
  3379  0052  3001               	movlw	1
  3380  0053  00B3               	movwf	??_sprintf
  3381  0054  0833               	movf	??_sprintf,w
  3382  0055  07BE               	addwf	sprintf@sp,f
  3383                           
  3384                           ;doprnt.c: 551: continue;
  3385  0056  2837               	goto	i1l2137
  3386  0057                     i1l2047:	
  3387                           
  3388                           ;doprnt.c: 552: }
  3389                           ;doprnt.c: 555: width = 0;
  3390  0057  01BF               	clrf	sprintf@width
  3391  0058  01C0               	clrf	sprintf@width+1
  3392                           
  3393                           ;doprnt.c: 557: flag = 0;
  3394  0059  01B8               	clrf	sprintf@flag
  3395                           
  3396                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  3397  005A  082A               	movf	sprintf@f,w
  3398  005B  0084               	movwf	4
  3399  005C  120A  158A  200A  120A  118A  	fcall	stringdir
  3400  0061  120A  158A  216B  120A  118A  	fcall	_isdigit
  3401  0066  1C03               	btfss	3,0
  3402  0067  28AA               	goto	i1l2061
  3403                           
  3404                           ;doprnt.c: 607: width = 0;
  3405  0068  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0069  1303               	bcf	3,6	;RP1=0, select bank0
  3407  006A  01BF               	clrf	sprintf@width
  3408  006B  01C0               	clrf	sprintf@width+1
  3409  006C                     i1l2053:	
  3410                           ;doprnt.c: 608: do {
  3411                           
  3412                           
  3413                           ;doprnt.c: 609: width *= 10;
  3414  006C  300A               	movlw	10
  3415  006D  00F0               	movwf	___wmul@multiplier
  3416  006E  3000               	movlw	0
  3417  006F  00F1               	movwf	___wmul@multiplier+1
  3418  0070  1283               	bcf	3,5	;RP0=0, select bank0
  3419  0071  1303               	bcf	3,6	;RP1=0, select bank0
  3420  0072  0840               	movf	sprintf@width+1,w
  3421  0073  01F3               	clrf	___wmul@multiplicand+1
  3422  0074  07F3               	addwf	___wmul@multiplicand+1,f
  3423  0075  083F               	movf	sprintf@width,w
  3424  0076  01F2               	clrf	___wmul@multiplicand
  3425  0077  07F2               	addwf	___wmul@multiplicand,f
  3426  0078  120A  158A  2298  120A  118A  	fcall	___wmul
  3427  007D  0871               	movf	?___wmul+1,w
  3428  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3429  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3430  0080  01C0               	clrf	sprintf@width+1
  3431  0081  07C0               	addwf	sprintf@width+1,f
  3432  0082  0870               	movf	?___wmul,w
  3433  0083  01BF               	clrf	sprintf@width
  3434  0084  07BF               	addwf	sprintf@width,f
  3435                           
  3436                           ;doprnt.c: 610: width += *f++ - '0';
  3437  0085  082A               	movf	sprintf@f,w
  3438  0086  0084               	movwf	4
  3439  0087  120A  158A  200A  120A  118A  	fcall	stringdir
  3440  008C  3ED0               	addlw	208
  3441  008D  00B3               	movwf	??_sprintf
  3442  008E  30FF               	movlw	255
  3443  008F  1803               	skipnc
  3444  0090  3000               	movlw	0
  3445  0091  00B4               	movwf	??_sprintf+1
  3446  0092  0833               	movf	??_sprintf,w
  3447  0093  07BF               	addwf	sprintf@width,f
  3448  0094  1803               	skipnc
  3449  0095  0AC0               	incf	sprintf@width+1,f
  3450  0096  0834               	movf	??_sprintf+1,w
  3451  0097  07C0               	addwf	sprintf@width+1,f
  3452  0098  3001               	movlw	1
  3453  0099  00B3               	movwf	??_sprintf
  3454  009A  0833               	movf	??_sprintf,w
  3455  009B  07AA               	addwf	sprintf@f,f
  3456                           
  3457                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  3458  009C  082A               	movf	sprintf@f,w
  3459  009D  0084               	movwf	4
  3460  009E  120A  158A  200A  120A  118A  	fcall	stringdir
  3461  00A3  120A  158A  216B  120A  118A  	fcall	_isdigit
  3462  00A8  1803               	btfsc	3,0
  3463  00A9  286C               	goto	i1l2053
  3464  00AA                     i1l2061:	
  3465                           
  3466                           ;doprnt.c: 617: }
  3467                           ;doprnt.c: 620: if(*f == '.') {
  3468  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  3469  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  3470  00AC  082A               	movf	sprintf@f,w
  3471  00AD  0084               	movwf	4
  3472  00AE  120A  158A  200A  120A  118A  	fcall	stringdir
  3473  00B3  3A2E               	xorlw	46
  3474  00B4  1D03               	skipz
  3475  00B5  28F8               	goto	i1l2073
  3476                           
  3477                           ;doprnt.c: 622: f++;
  3478  00B6  3001               	movlw	1
  3479  00B7  00B3               	movwf	??_sprintf
  3480  00B8  0833               	movf	??_sprintf,w
  3481  00B9  07AA               	addwf	sprintf@f,f
  3482                           
  3483                           ;doprnt.c: 629: {
  3484                           ;doprnt.c: 630: prec = 0;
  3485  00BA  01C1               	clrf	sprintf@prec
  3486  00BB  01C2               	clrf	sprintf@prec+1
  3487  00BC                     i1l2071:	
  3488                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  3489                           
  3490  00BC  082A               	movf	sprintf@f,w
  3491  00BD  0084               	movwf	4
  3492  00BE  120A  158A  200A  120A  118A  	fcall	stringdir
  3493  00C3  120A  158A  216B  120A  118A  	fcall	_isdigit
  3494  00C8  1C03               	btfss	3,0
  3495  00C9  2904               	goto	i1l2079
  3496                           
  3497                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  3498  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  3499  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  3500  00CC  0842               	movf	sprintf@prec+1,w
  3501  00CD  01F1               	clrf	___wmul@multiplier+1
  3502  00CE  07F1               	addwf	___wmul@multiplier+1,f
  3503  00CF  0841               	movf	sprintf@prec,w
  3504  00D0  01F0               	clrf	___wmul@multiplier
  3505  00D1  07F0               	addwf	___wmul@multiplier,f
  3506  00D2  300A               	movlw	10
  3507  00D3  00F2               	movwf	___wmul@multiplicand
  3508  00D4  3000               	movlw	0
  3509  00D5  00F3               	movwf	___wmul@multiplicand+1
  3510  00D6  120A  158A  2298  120A  118A  	fcall	___wmul
  3511  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  3512  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  3513  00DD  082A               	movf	sprintf@f,w
  3514  00DE  0084               	movwf	4
  3515  00DF  120A  158A  200A  120A  118A  	fcall	stringdir
  3516  00E4  0770               	addwf	?___wmul,w
  3517  00E5  00B3               	movwf	??_sprintf
  3518  00E6  3000               	movlw	0
  3519  00E7  1803               	skipnc
  3520  00E8  3001               	movlw	1
  3521  00E9  0771               	addwf	?___wmul+1,w
  3522  00EA  00B4               	movwf	??_sprintf+1
  3523  00EB  0833               	movf	??_sprintf,w
  3524  00EC  3ED0               	addlw	208
  3525  00ED  00C1               	movwf	sprintf@prec
  3526  00EE  0834               	movf	??_sprintf+1,w
  3527  00EF  1803               	skipnc
  3528  00F0  3E01               	addlw	1
  3529  00F1  3EFF               	addlw	255
  3530  00F2  00C2               	movwf	sprintf@prec+1
  3531  00F3  3001               	movlw	1
  3532  00F4  00B3               	movwf	??_sprintf
  3533  00F5  0833               	movf	??_sprintf,w
  3534  00F6  07AA               	addwf	sprintf@f,f
  3535  00F7  28BC               	goto	i1l2071
  3536  00F8                     i1l2073:	
  3537                           ;doprnt.c: 633: }
  3538                           ;doprnt.c: 634: } else {
  3539                           
  3540                           
  3541                           ;doprnt.c: 635: prec = 0;
  3542  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  3543  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  3544  00FA  01C1               	clrf	sprintf@prec
  3545  00FB  01C2               	clrf	sprintf@prec+1
  3546                           
  3547                           ;doprnt.c: 644: switch(c = *f++) {
  3548                           
  3549                           ;doprnt.c: 639: }
  3550                           ;doprnt.c: 642: loop:
  3551  00FC  2904               	goto	i1l2079
  3552  00FD                     i1l257:	
  3553                           ;doprnt.c: 650: case 'l':
  3554                           
  3555                           ;doprnt.c: 647: goto alldone;
  3556                           
  3557                           ;doprnt.c: 646: case 0:
  3558                           
  3559                           
  3560                           ;doprnt.c: 652: flag |= 0x10;
  3561  00FD  1638               	bsf	sprintf@flag,4
  3562                           
  3563                           ;doprnt.c: 653: goto loop;
  3564  00FE  2904               	goto	i1l2079
  3565  00FF                     i1l2075:	
  3566                           ;doprnt.c: 826: case 'u':
  3567                           
  3568                           ;doprnt.c: 822: continue;
  3569                           
  3570                           ;doprnt.c: 811: default:
  3571                           
  3572                           
  3573                           ;doprnt.c: 827: flag |= 0xC0;
  3574  00FF  30C0               	movlw	192
  3575  0100  00B3               	movwf	??_sprintf
  3576  0101  0833               	movf	??_sprintf,w
  3577  0102  04B8               	iorwf	sprintf@flag,f
  3578                           
  3579                           ;doprnt.c: 831: }
  3580                           
  3581                           ;doprnt.c: 828: break;
  3582  0103  291B               	goto	i1l260
  3583  0104                     i1l2079:	
  3584  0104  3001               	movlw	1
  3585  0105  1283               	bcf	3,5	;RP0=0, select bank0
  3586  0106  1303               	bcf	3,6	;RP1=0, select bank0
  3587  0107  07AA               	addwf	sprintf@f,f
  3588  0108  30FF               	movlw	-1
  3589  0109  072A               	addwf	sprintf@f,w
  3590  010A  0084               	movwf	4
  3591  010B  120A  158A  200A  120A  118A  	fcall	stringdir
  3592  0110  00C3               	movwf	sprintf@c
  3593                           
  3594                           ; Switch size 1, requested type "space"
  3595                           ; Number of cases is 3, Range of values is 0 to 117
  3596                           ; switch strategies available:
  3597                           ; Name         Instructions Cycles
  3598                           ; simple_byte           10     6 (average)
  3599                           ; jumptable            260     6 (fixed)
  3600                           ;	Chosen strategy is simple_byte
  3601  0111  3A00               	xorlw	0	; case 0
  3602  0112  1903               	skipnz
  3603  0113  2A67               	goto	i1l2139
  3604  0114  3A6C               	xorlw	108	; case 108
  3605  0115  1903               	skipnz
  3606  0116  28FD               	goto	i1l257
  3607  0117  3A19               	xorlw	25	; case 117
  3608  0118  1903               	skipnz
  3609  0119  28FF               	goto	i1l2075
  3610  011A  2837               	goto	i1l2137
  3611  011B                     i1l260:	
  3612                           
  3613                           ;doprnt.c: 1282: {
  3614                           ;doprnt.c: 1290: if(flag & 0x10)
  3615  011B  1E38               	btfss	sprintf@flag,4
  3616  011C  292D               	goto	i1l2085
  3617                           
  3618                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  3619  011D  0839               	movf	sprintf@ap,w
  3620  011E  0084               	movwf	4
  3621  011F  1383               	bcf	3,7	;select IRP bank0
  3622  0120  0800               	movf	0,w
  3623  0121  00BA               	movwf	sprintf@_val
  3624  0122  0A84               	incf	4,f
  3625  0123  0800               	movf	0,w
  3626  0124  00BB               	movwf	sprintf@_val+1
  3627  0125  0A84               	incf	4,f
  3628  0126  0800               	movf	0,w
  3629  0127  00BC               	movwf	sprintf@_val+2
  3630  0128  0A84               	incf	4,f
  3631  0129  0800               	movf	0,w
  3632  012A  00BD               	movwf	sprintf@_val+3
  3633  012B  3004               	movlw	4
  3634  012C  293C               	goto	L4
  3635  012D                     i1l2085:	
  3636                           
  3637                           ;doprnt.c: 1292: else
  3638                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3639  012D  0839               	movf	sprintf@ap,w
  3640  012E  0084               	movwf	4
  3641  012F  1383               	bcf	3,7	;select IRP bank0
  3642  0130  0800               	movf	0,w
  3643  0131  00B3               	movwf	??_sprintf
  3644  0132  0A84               	incf	4,f
  3645  0133  0800               	movf	0,w
  3646  0134  00B4               	movwf	??_sprintf+1
  3647  0135  0833               	movf	??_sprintf,w
  3648  0136  00BA               	movwf	sprintf@_val
  3649  0137  0834               	movf	??_sprintf+1,w
  3650  0138  00BB               	movwf	sprintf@_val+1
  3651  0139  01BC               	clrf	sprintf@_val+2
  3652  013A  01BD               	clrf	sprintf@_val+3
  3653  013B  3002               	movlw	2
  3654  013C                     L4:	
  3655  013C  00B3               	movwf	??_sprintf
  3656  013D  0833               	movf	??_sprintf,w
  3657  013E  07B9               	addwf	sprintf@ap,f
  3658                           
  3659                           ;doprnt.c: 1296: }
  3660                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  3661  013F  0842               	movf	sprintf@prec+1,w
  3662  0140  0441               	iorwf	sprintf@prec,w
  3663  0141  1D03               	skipz
  3664  0142  294F               	goto	i1l2095
  3665  0143  083D               	movf	sprintf@_val+3,w
  3666  0144  043C               	iorwf	sprintf@_val+2,w
  3667  0145  043B               	iorwf	sprintf@_val+1,w
  3668  0146  043A               	iorwf	sprintf@_val,w
  3669  0147  1D03               	skipz
  3670  0148  294F               	goto	i1l2095
  3671                           
  3672                           ;doprnt.c: 1300: prec++;
  3673  0149  3001               	movlw	1
  3674  014A  07C1               	addwf	sprintf@prec,f
  3675  014B  1803               	skipnc
  3676  014C  0AC2               	incf	sprintf@prec+1,f
  3677  014D  3000               	movlw	0
  3678  014E  07C2               	addwf	sprintf@prec+1,f
  3679  014F                     i1l2095:	
  3680                           
  3681                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3682  014F  01C3               	clrf	sprintf@c
  3683  0150  0AC3               	incf	sprintf@c,f
  3684  0151  0843               	movf	sprintf@c,w
  3685  0152  3A0A               	xorlw	10
  3686  0153  1903               	btfsc	3,2
  3687  0154  2991               	goto	i1l2107
  3688  0155                     i1l2099:	
  3689                           
  3690                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  3691  0155  0843               	movf	sprintf@c,w
  3692  0156  00B3               	movwf	??_sprintf
  3693  0157  3001               	movlw	1
  3694  0158                     u244_25:	
  3695  0158  1003               	clrc
  3696  0159  0DB3               	rlf	??_sprintf,f
  3697  015A  3EFF               	addlw	-1
  3698  015B  1D03               	skipz
  3699  015C  2958               	goto	u244_25
  3700  015D  1003               	clrc
  3701  015E  0D33               	rlf	??_sprintf,w
  3702  015F  3E01               	addlw	low (_dpowers-__stringbase)
  3703  0160  0084               	movwf	4
  3704  0161  120A  158A  200A  120A  118A  	fcall	stringdir
  3705  0166  00B4               	movwf	??_sprintf+1
  3706  0167  120A  158A  200A  120A  118A  	fcall	stringdir
  3707  016C  00B5               	movwf	??_sprintf+2
  3708  016D  120A  158A  200A  120A  118A  	fcall	stringdir
  3709  0172  00B6               	movwf	??_sprintf+3
  3710  0173  120A  158A  200A  120A  118A  	fcall	stringdir
  3711  0178  00B7               	movwf	??_sprintf+4
  3712  0179  0837               	movf	??_sprintf+4,w
  3713  017A  023D               	subwf	sprintf@_val+3,w
  3714  017B  1D03               	skipz
  3715  017C  2987               	goto	u245_25
  3716  017D  0836               	movf	??_sprintf+3,w
  3717  017E  023C               	subwf	sprintf@_val+2,w
  3718  017F  1D03               	skipz
  3719  0180  2987               	goto	u245_25
  3720  0181  0835               	movf	??_sprintf+2,w
  3721  0182  023B               	subwf	sprintf@_val+1,w
  3722  0183  1D03               	skipz
  3723  0184  2987               	goto	u245_25
  3724  0185  0834               	movf	??_sprintf+1,w
  3725  0186  023A               	subwf	sprintf@_val,w
  3726  0187                     u245_25:	
  3727  0187  1C03               	btfss	3,0
  3728  0188  2991               	goto	i1l2107
  3729                           
  3730                           ;doprnt.c: 1316: break;
  3731  0189  3001               	movlw	1
  3732  018A  00B3               	movwf	??_sprintf
  3733  018B  0833               	movf	??_sprintf,w
  3734  018C  07C3               	addwf	sprintf@c,f
  3735  018D  0843               	movf	sprintf@c,w
  3736  018E  3A0A               	xorlw	10
  3737  018F  1D03               	skipz
  3738  0190  2955               	goto	i1l2099
  3739  0191                     i1l2107:	
  3740                           
  3741                           ;doprnt.c: 1348: if(c < prec)
  3742  0191  0843               	movf	sprintf@c,w
  3743  0192  00B3               	movwf	??_sprintf
  3744  0193  01B4               	clrf	??_sprintf+1
  3745  0194  1BB3               	btfsc	??_sprintf,7
  3746  0195  03B4               	decf	??_sprintf+1,f
  3747  0196  0834               	movf	??_sprintf+1,w
  3748  0197  3A80               	xorlw	128
  3749  0198  00B5               	movwf	??_sprintf+2
  3750  0199  0842               	movf	sprintf@prec+1,w
  3751  019A  3A80               	xorlw	128
  3752  019B  0235               	subwf	??_sprintf+2,w
  3753  019C  1D03               	skipz
  3754  019D  29A0               	goto	u247_25
  3755  019E  0841               	movf	sprintf@prec,w
  3756  019F  0233               	subwf	??_sprintf,w
  3757  01A0                     u247_25:	
  3758  01A0  1803               	skipnc
  3759  01A1  29A9               	goto	i1l2111
  3760                           
  3761                           ;doprnt.c: 1349: c = prec;
  3762  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3763  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3764  01A4  0841               	movf	sprintf@prec,w
  3765  01A5  00B3               	movwf	??_sprintf
  3766  01A6  0833               	movf	??_sprintf,w
  3767  01A7  00C3               	movwf	sprintf@c
  3768  01A8  29C3               	goto	i1l2115
  3769  01A9                     i1l2111:	
  3770                           
  3771                           ;doprnt.c: 1350: else if(prec < c)
  3772  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  3773  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  3774  01AB  0843               	movf	sprintf@c,w
  3775  01AC  00B3               	movwf	??_sprintf
  3776  01AD  01B4               	clrf	??_sprintf+1
  3777  01AE  1BB3               	btfsc	??_sprintf,7
  3778  01AF  03B4               	decf	??_sprintf+1,f
  3779  01B0  0842               	movf	sprintf@prec+1,w
  3780  01B1  3A80               	xorlw	128
  3781  01B2  00B5               	movwf	??_sprintf+2
  3782  01B3  0834               	movf	??_sprintf+1,w
  3783  01B4  3A80               	xorlw	128
  3784  01B5  0235               	subwf	??_sprintf+2,w
  3785  01B6  1D03               	skipz
  3786  01B7  29BA               	goto	u248_25
  3787  01B8  0833               	movf	??_sprintf,w
  3788  01B9  0241               	subwf	sprintf@prec,w
  3789  01BA                     u248_25:	
  3790  01BA  1803               	skipnc
  3791  01BB  29C3               	goto	i1l2115
  3792                           
  3793                           ;doprnt.c: 1351: prec = c;
  3794  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  3795  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  3796  01BE  0843               	movf	sprintf@c,w
  3797  01BF  00C1               	movwf	sprintf@prec
  3798  01C0  01C2               	clrf	sprintf@prec+1
  3799  01C1  1BC1               	btfsc	sprintf@prec,7
  3800  01C2  03C2               	decf	sprintf@prec+1,f
  3801  01C3                     i1l2115:	
  3802                           
  3803                           ;doprnt.c: 1390: if(width > c)
  3804  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  3805  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  3806  01C5  0843               	movf	sprintf@c,w
  3807  01C6  00B3               	movwf	??_sprintf
  3808  01C7  01B4               	clrf	??_sprintf+1
  3809  01C8  1BB3               	btfsc	??_sprintf,7
  3810  01C9  03B4               	decf	??_sprintf+1,f
  3811  01CA  0834               	movf	??_sprintf+1,w
  3812  01CB  3A80               	xorlw	128
  3813  01CC  00B5               	movwf	??_sprintf+2
  3814  01CD  0840               	movf	sprintf@width+1,w
  3815  01CE  3A80               	xorlw	128
  3816  01CF  0235               	subwf	??_sprintf+2,w
  3817  01D0  1D03               	skipz
  3818  01D1  29D4               	goto	u249_25
  3819  01D2  083F               	movf	sprintf@width,w
  3820  01D3  0233               	subwf	??_sprintf,w
  3821  01D4                     u249_25:	
  3822  01D4  1803               	skipnc
  3823  01D5  29E4               	goto	i1l2119
  3824                           
  3825                           ;doprnt.c: 1391: width -= c;
  3826  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3827  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  3828  01D8  0843               	movf	sprintf@c,w
  3829  01D9  00B3               	movwf	??_sprintf
  3830  01DA  01B4               	clrf	??_sprintf+1
  3831  01DB  1BB3               	btfsc	??_sprintf,7
  3832  01DC  03B4               	decf	??_sprintf+1,f
  3833  01DD  0833               	movf	??_sprintf,w
  3834  01DE  02BF               	subwf	sprintf@width,f
  3835  01DF  0834               	movf	??_sprintf+1,w
  3836  01E0  1C03               	skipc
  3837  01E1  03C0               	decf	sprintf@width+1,f
  3838  01E2  02C0               	subwf	sprintf@width+1,f
  3839  01E3  29E8               	goto	i1l2121
  3840  01E4                     i1l2119:	
  3841                           
  3842                           ;doprnt.c: 1392: else
  3843                           ;doprnt.c: 1393: width = 0;
  3844  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  3845  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  3846  01E6  01BF               	clrf	sprintf@width
  3847  01E7  01C0               	clrf	sprintf@width+1
  3848  01E8                     i1l2121:	
  3849                           
  3850                           ;doprnt.c: 1431: {
  3851                           ;doprnt.c: 1433: if(width
  3852                           ;doprnt.c: 1437: )
  3853  01E8  0840               	movf	sprintf@width+1,w
  3854  01E9  043F               	iorwf	sprintf@width,w
  3855  01EA  1903               	skipnz
  3856  01EB  2A58               	goto	i1l2135
  3857                           
  3858                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  3859                           
  3860                           ;doprnt.c: 1438: do
  3861  01EC  3020               	movlw	32
  3862  01ED  00B3               	movwf	??_sprintf
  3863  01EE  083E               	movf	sprintf@sp,w
  3864  01EF  0084               	movwf	4
  3865  01F0  0833               	movf	??_sprintf,w
  3866  01F1  1783               	bsf	3,7	;select IRP bank2
  3867  01F2  0080               	movwf	0
  3868  01F3  3001               	movlw	1
  3869  01F4  00B3               	movwf	??_sprintf
  3870  01F5  0833               	movf	??_sprintf,w
  3871  01F6  07BE               	addwf	sprintf@sp,f
  3872                           
  3873                           ;doprnt.c: 1440: while(--width);
  3874  01F7  30FF               	movlw	255
  3875  01F8  07BF               	addwf	sprintf@width,f
  3876  01F9  1803               	skipnc
  3877  01FA  0AC0               	incf	sprintf@width+1,f
  3878  01FB  30FF               	movlw	255
  3879  01FC  07C0               	addwf	sprintf@width+1,f
  3880  01FD  29E8               	goto	i1l2121
  3881  01FE                     i1l2129:	
  3882                           ;doprnt.c: 1478: }
  3883                           ;doprnt.c: 1483: while(prec--) {
  3884                           
  3885                           
  3886                           ;doprnt.c: 1487: {
  3887                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3888  01FE  3000               	movlw	0
  3889  01FF  00A3               	movwf	___llmod@divisor+3
  3890  0200  3000               	movlw	0
  3891  0201  00A2               	movwf	___llmod@divisor+2
  3892  0202  3000               	movlw	0
  3893  0203  00A1               	movwf	___llmod@divisor+1
  3894  0204  300A               	movlw	10
  3895  0205  00A0               	movwf	___llmod@divisor
  3896  0206  0841               	movf	sprintf@prec,w
  3897  0207  00B3               	movwf	??_sprintf
  3898  0208  3001               	movlw	1
  3899  0209                     u252_25:	
  3900  0209  1003               	clrc
  3901  020A  0DB3               	rlf	??_sprintf,f
  3902  020B  3EFF               	addlw	-1
  3903  020C  1D03               	skipz
  3904  020D  2A09               	goto	u252_25
  3905  020E  1003               	clrc
  3906  020F  0D33               	rlf	??_sprintf,w
  3907  0210  3E01               	addlw	low (_dpowers-__stringbase)
  3908  0211  0084               	movwf	4
  3909  0212  120A  158A  200A  120A  118A  	fcall	stringdir
  3910  0217  00F0               	movwf	___lldiv@divisor
  3911  0218  120A  158A  200A  120A  118A  	fcall	stringdir
  3912  021D  00F1               	movwf	___lldiv@divisor+1
  3913  021E  120A  158A  200A  120A  118A  	fcall	stringdir
  3914  0223  00F2               	movwf	___lldiv@divisor+2
  3915  0224  120A  158A  200A  120A  118A  	fcall	stringdir
  3916  0229  00F3               	movwf	___lldiv@divisor+3
  3917  022A  083D               	movf	sprintf@_val+3,w
  3918  022B  00F7               	movwf	___lldiv@dividend+3
  3919  022C  083C               	movf	sprintf@_val+2,w
  3920  022D  00F6               	movwf	___lldiv@dividend+2
  3921  022E  083B               	movf	sprintf@_val+1,w
  3922  022F  00F5               	movwf	___lldiv@dividend+1
  3923  0230  083A               	movf	sprintf@_val,w
  3924  0231  00F4               	movwf	___lldiv@dividend
  3925  0232  120A  158A  2646  120A  118A  	fcall	___lldiv
  3926  0237  0873               	movf	?___lldiv+3,w
  3927  0238  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0239  1303               	bcf	3,6	;RP1=0, select bank0
  3929  023A  00A7               	movwf	___llmod@dividend+3
  3930  023B  0872               	movf	?___lldiv+2,w
  3931  023C  00A6               	movwf	___llmod@dividend+2
  3932  023D  0871               	movf	?___lldiv+1,w
  3933  023E  00A5               	movwf	___llmod@dividend+1
  3934  023F  0870               	movf	?___lldiv,w
  3935  0240  00A4               	movwf	___llmod@dividend
  3936  0241  120A  158A  2542  120A  118A  	fcall	___llmod
  3937  0246  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0247  1303               	bcf	3,6	;RP1=0, select bank0
  3939  0248  0820               	movf	?___llmod,w
  3940  0249  3E30               	addlw	48
  3941  024A  00B4               	movwf	??_sprintf+1
  3942  024B  0834               	movf	??_sprintf+1,w
  3943  024C  00C3               	movwf	sprintf@c
  3944                           
  3945                           ;doprnt.c: 1532: }
  3946                           ;doprnt.c: 1533: ((*sp++ = (c)));
  3947  024D  0843               	movf	sprintf@c,w
  3948  024E  00B3               	movwf	??_sprintf
  3949  024F  083E               	movf	sprintf@sp,w
  3950  0250  0084               	movwf	4
  3951  0251  0833               	movf	??_sprintf,w
  3952  0252  1783               	bsf	3,7	;select IRP bank2
  3953  0253  0080               	movwf	0
  3954  0254  3001               	movlw	1
  3955  0255  00B3               	movwf	??_sprintf
  3956  0256  0833               	movf	??_sprintf,w
  3957  0257  07BE               	addwf	sprintf@sp,f
  3958  0258                     i1l2135:	
  3959  0258  30FF               	movlw	255
  3960  0259  07C1               	addwf	sprintf@prec,f
  3961  025A  1803               	skipnc
  3962  025B  0AC2               	incf	sprintf@prec+1,f
  3963  025C  30FF               	movlw	255
  3964  025D  07C2               	addwf	sprintf@prec+1,f
  3965  025E  30FF               	movlw	255
  3966  025F  0642               	xorwf	sprintf@prec+1,w
  3967  0260  1D03               	skipz
  3968  0261  2A64               	goto	u253_25
  3969  0262  30FF               	movlw	255
  3970  0263  0641               	xorwf	sprintf@prec,w
  3971  0264                     u253_25:	
  3972  0264  1903               	btfsc	3,2
  3973  0265  2837               	goto	i1l2137
  3974  0266  29FE               	goto	i1l2129
  3975  0267                     i1l2139:	
  3976                           ;doprnt.c: 1534: }
  3977                           ;doprnt.c: 1542: }
  3978                           ;doprnt.c: 1544: alldone:
  3979                           
  3980                           
  3981                           ;doprnt.c: 1547: *sp = 0;
  3982  0267  083E               	movf	sprintf@sp,w
  3983  0268  0084               	movwf	4
  3984  0269  1783               	bsf	3,7	;select IRP bank2
  3985  026A  0180               	clrf	0
  3986  026B  0008               	return
  3987  026C                     __end_of_sprintf:	
  3988                           ;doprnt.c: 1549: return 0;
  3989                           ;	Return value of _sprintf is never used
  3990                           
  3991                           
  3992                           	psect	text16
  3993  096B                     __ptext16:	
  3994 ;; *************** function _isdigit *****************
  3995 ;; Defined at:
  3996 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  c               1    wreg     unsigned char 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  c               1    1[COMMON] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4010 ;;      Params:         0       0       0       0       0
  4011 ;;      Locals:         2       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0
  4013 ;;      Totals:         2       0       0       0       0
  4014 ;;Total ram usage:        2 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_sprintf
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function _isdigit
  4025  096B                     _isdigit:	
  4026                           
  4027                           ;incstack = 0
  4028 ;; hardware stack exceeded
  4029                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4030                           ;isdigit@c stored from wreg
  4031  096B  00F1               	movwf	isdigit@c
  4032  096C  01F0               	clrf	_isdigit$887
  4033  096D  303A               	movlw	58
  4034  096E  0271               	subwf	isdigit@c,w
  4035  096F  1803               	skipnc
  4036  0970  2977               	goto	i1l1873
  4037  0971  3030               	movlw	48
  4038  0972  0271               	subwf	isdigit@c,w
  4039  0973  1C03               	skipc
  4040  0974  2977               	goto	i1l1873
  4041  0975  01F0               	clrf	_isdigit$887
  4042  0976  0AF0               	incf	_isdigit$887,f
  4043  0977                     i1l1873:	
  4044  0977  0C70               	rrf	_isdigit$887,w
  4045  0978  0008               	return
  4046  0979                     __end_of_isdigit:	
  4047                           
  4048                           	psect	text17
  4049  0A98                     __ptext17:	
  4050 ;; *************** function ___wmul *****************
  4051 ;; Defined at:
  4052 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  multiplier      2    0[COMMON] unsigned int 
  4055 ;;  multiplicand    2    2[COMMON] unsigned int 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  product         2    4[COMMON] unsigned int 
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  2    0[COMMON] unsigned int 
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4067 ;;      Params:         4       0       0       0       0
  4068 ;;      Locals:         2       0       0       0       0
  4069 ;;      Temps:          0       0       0       0       0
  4070 ;;      Totals:         6       0       0       0       0
  4071 ;;Total ram usage:        6 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_sprintf
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function ___wmul
  4082  0A98                     ___wmul:	
  4083                           
  4084                           ;incstack = 0
  4085 ;; hardware stack exceeded
  4086                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4087  0A98  01F4               	clrf	___wmul@product
  4088  0A99  01F5               	clrf	___wmul@product+1
  4089  0A9A                     i1l1879:	
  4090  0A9A  1C70               	btfss	___wmul@multiplier,0
  4091  0A9B  2AA2               	goto	i1l363
  4092  0A9C  0872               	movf	___wmul@multiplicand,w
  4093  0A9D  07F4               	addwf	___wmul@product,f
  4094  0A9E  1803               	skipnc
  4095  0A9F  0AF5               	incf	___wmul@product+1,f
  4096  0AA0  0873               	movf	___wmul@multiplicand+1,w
  4097  0AA1  07F5               	addwf	___wmul@product+1,f
  4098  0AA2                     i1l363:	
  4099  0AA2  3001               	movlw	1
  4100  0AA3                     u193_25:	
  4101  0AA3  1003               	clrc
  4102  0AA4  0DF2               	rlf	___wmul@multiplicand,f
  4103  0AA5  0DF3               	rlf	___wmul@multiplicand+1,f
  4104  0AA6  3EFF               	addlw	-1
  4105  0AA7  1D03               	skipz
  4106  0AA8  2AA3               	goto	u193_25
  4107  0AA9  3001               	movlw	1
  4108  0AAA                     u194_25:	
  4109  0AAA  1003               	clrc
  4110  0AAB  0CF1               	rrf	___wmul@multiplier+1,f
  4111  0AAC  0CF0               	rrf	___wmul@multiplier,f
  4112  0AAD  3EFF               	addlw	-1
  4113  0AAE  1D03               	skipz
  4114  0AAF  2AAA               	goto	u194_25
  4115  0AB0  0871               	movf	___wmul@multiplier+1,w
  4116  0AB1  0470               	iorwf	___wmul@multiplier,w
  4117  0AB2  1D03               	skipz
  4118  0AB3  2A9A               	goto	i1l1879
  4119  0AB4  0875               	movf	___wmul@product+1,w
  4120  0AB5  01F1               	clrf	?___wmul+1
  4121  0AB6  07F1               	addwf	?___wmul+1,f
  4122  0AB7  0874               	movf	___wmul@product,w
  4123  0AB8  01F0               	clrf	?___wmul
  4124  0AB9  07F0               	addwf	?___wmul,f
  4125  0ABA  0008               	return
  4126  0ABB                     __end_of___wmul:	
  4127                           
  4128                           	psect	text18
  4129  0D42                     __ptext18:	
  4130 ;; *************** function ___llmod *****************
  4131 ;; Defined at:
  4132 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  divisor         4    0[BANK0 ] unsigned long 
  4135 ;;  dividend        4    4[BANK0 ] unsigned long 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  counter         1    9[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  4    0[BANK0 ] unsigned long 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4147 ;;      Params:         0       8       0       0       0
  4148 ;;      Locals:         0       1       0       0       0
  4149 ;;      Temps:          0       1       0       0       0
  4150 ;;      Totals:         0      10       0       0       0
  4151 ;;Total ram usage:       10 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_sprintf
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function ___llmod
  4162  0D42                     ___llmod:	
  4163                           
  4164                           ;incstack = 0
  4165 ;; hardware stack exceeded
  4166                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4167  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  4168  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  4169  0D44  0823               	movf	___llmod@divisor+3,w
  4170  0D45  0422               	iorwf	___llmod@divisor+2,w
  4171  0D46  0421               	iorwf	___llmod@divisor+1,w
  4172  0D47  0420               	iorwf	___llmod@divisor,w
  4173  0D48  1903               	skipnz
  4174  0D49  2D87               	goto	i1l2001
  4175  0D4A  01A9               	clrf	___llmod@counter
  4176  0D4B  0AA9               	incf	___llmod@counter,f
  4177  0D4C                     i1l1991:	
  4178  0D4C  1BA3               	btfsc	___llmod@divisor+3,7
  4179  0D4D  2D5C               	goto	i1l1993
  4180  0D4E  3001               	movlw	1
  4181  0D4F  00A8               	movwf	??___llmod
  4182  0D50                     u228_25:	
  4183  0D50  1003               	clrc
  4184  0D51  0DA0               	rlf	___llmod@divisor,f
  4185  0D52  0DA1               	rlf	___llmod@divisor+1,f
  4186  0D53  0DA2               	rlf	___llmod@divisor+2,f
  4187  0D54  0DA3               	rlf	___llmod@divisor+3,f
  4188  0D55  0BA8               	decfsz	??___llmod,f
  4189  0D56  2D50               	goto	u228_25
  4190  0D57  3001               	movlw	1
  4191  0D58  00A8               	movwf	??___llmod
  4192  0D59  0828               	movf	??___llmod,w
  4193  0D5A  07A9               	addwf	___llmod@counter,f
  4194  0D5B  2D4C               	goto	i1l1991
  4195  0D5C                     i1l1993:	
  4196  0D5C  0823               	movf	___llmod@divisor+3,w
  4197  0D5D  0227               	subwf	___llmod@dividend+3,w
  4198  0D5E  1D03               	skipz
  4199  0D5F  2D6A               	goto	u230_25
  4200  0D60  0822               	movf	___llmod@divisor+2,w
  4201  0D61  0226               	subwf	___llmod@dividend+2,w
  4202  0D62  1D03               	skipz
  4203  0D63  2D6A               	goto	u230_25
  4204  0D64  0821               	movf	___llmod@divisor+1,w
  4205  0D65  0225               	subwf	___llmod@dividend+1,w
  4206  0D66  1D03               	skipz
  4207  0D67  2D6A               	goto	u230_25
  4208  0D68  0820               	movf	___llmod@divisor,w
  4209  0D69  0224               	subwf	___llmod@dividend,w
  4210  0D6A                     u230_25:	
  4211  0D6A  1C03               	skipc
  4212  0D6B  2D7A               	goto	i1l1997
  4213  0D6C  0820               	movf	___llmod@divisor,w
  4214  0D6D  02A4               	subwf	___llmod@dividend,f
  4215  0D6E  0821               	movf	___llmod@divisor+1,w
  4216  0D6F  1C03               	skipc
  4217  0D70  0F21               	incfsz	___llmod@divisor+1,w
  4218  0D71  02A5               	subwf	___llmod@dividend+1,f
  4219  0D72  0822               	movf	___llmod@divisor+2,w
  4220  0D73  1C03               	skipc
  4221  0D74  0F22               	incfsz	___llmod@divisor+2,w
  4222  0D75  02A6               	subwf	___llmod@dividend+2,f
  4223  0D76  0823               	movf	___llmod@divisor+3,w
  4224  0D77  1C03               	skipc
  4225  0D78  0F23               	incfsz	___llmod@divisor+3,w
  4226  0D79  02A7               	subwf	___llmod@dividend+3,f
  4227  0D7A                     i1l1997:	
  4228  0D7A  3001               	movlw	1
  4229  0D7B                     u231_25:	
  4230  0D7B  1003               	clrc
  4231  0D7C  0CA3               	rrf	___llmod@divisor+3,f
  4232  0D7D  0CA2               	rrf	___llmod@divisor+2,f
  4233  0D7E  0CA1               	rrf	___llmod@divisor+1,f
  4234  0D7F  0CA0               	rrf	___llmod@divisor,f
  4235  0D80  3EFF               	addlw	-1
  4236  0D81  1D03               	skipz
  4237  0D82  2D7B               	goto	u231_25
  4238  0D83  3001               	movlw	1
  4239  0D84  02A9               	subwf	___llmod@counter,f
  4240  0D85  1D03               	btfss	3,2
  4241  0D86  2D5C               	goto	i1l1993
  4242  0D87                     i1l2001:	
  4243  0D87  0827               	movf	___llmod@dividend+3,w
  4244  0D88  00A3               	movwf	?___llmod+3
  4245  0D89  0826               	movf	___llmod@dividend+2,w
  4246  0D8A  00A2               	movwf	?___llmod+2
  4247  0D8B  0825               	movf	___llmod@dividend+1,w
  4248  0D8C  00A1               	movwf	?___llmod+1
  4249  0D8D  0824               	movf	___llmod@dividend,w
  4250  0D8E  00A0               	movwf	?___llmod
  4251  0D8F  0008               	return
  4252  0D90                     __end_of___llmod:	
  4253                           
  4254                           	psect	text19
  4255  0E46                     __ptext19:	
  4256 ;; *************** function ___lldiv *****************
  4257 ;; Defined at:
  4258 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;  divisor         4    0[COMMON] unsigned long 
  4261 ;;  dividend        4    4[COMMON] unsigned long 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  quotient        4    9[COMMON] unsigned long 
  4264 ;;  counter         1   13[COMMON] unsigned char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  4    0[COMMON] unsigned long 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4274 ;;      Params:         8       0       0       0       0
  4275 ;;      Locals:         5       0       0       0       0
  4276 ;;      Temps:          1       0       0       0       0
  4277 ;;      Totals:        14       0       0       0       0
  4278 ;;Total ram usage:       14 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_sprintf
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function ___lldiv
  4289  0E46                     ___lldiv:	
  4290                           
  4291                           ;incstack = 0
  4292 ;; hardware stack exceeded
  4293                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4294  0E46  3000               	movlw	0
  4295  0E47  00FC               	movwf	___lldiv@quotient+3
  4296  0E48  3000               	movlw	0
  4297  0E49  00FB               	movwf	___lldiv@quotient+2
  4298  0E4A  3000               	movlw	0
  4299  0E4B  00FA               	movwf	___lldiv@quotient+1
  4300  0E4C  3000               	movlw	0
  4301  0E4D  00F9               	movwf	___lldiv@quotient
  4302  0E4E  0873               	movf	___lldiv@divisor+3,w
  4303  0E4F  0472               	iorwf	___lldiv@divisor+2,w
  4304  0E50  0471               	iorwf	___lldiv@divisor+1,w
  4305  0E51  0470               	iorwf	___lldiv@divisor,w
  4306  0E52  1903               	skipnz
  4307  0E53  2E9B               	goto	i1l1981
  4308  0E54  01FD               	clrf	___lldiv@counter
  4309  0E55  0AFD               	incf	___lldiv@counter,f
  4310  0E56                     i1l1967:	
  4311  0E56  1BF3               	btfsc	___lldiv@divisor+3,7
  4312  0E57  2E66               	goto	i1l1969
  4313  0E58  3001               	movlw	1
  4314  0E59  00F8               	movwf	??___lldiv
  4315  0E5A                     u221_25:	
  4316  0E5A  1003               	clrc
  4317  0E5B  0DF0               	rlf	___lldiv@divisor,f
  4318  0E5C  0DF1               	rlf	___lldiv@divisor+1,f
  4319  0E5D  0DF2               	rlf	___lldiv@divisor+2,f
  4320  0E5E  0DF3               	rlf	___lldiv@divisor+3,f
  4321  0E5F  0BF8               	decfsz	??___lldiv,f
  4322  0E60  2E5A               	goto	u221_25
  4323  0E61  3001               	movlw	1
  4324  0E62  00F8               	movwf	??___lldiv
  4325  0E63  0878               	movf	??___lldiv,w
  4326  0E64  07FD               	addwf	___lldiv@counter,f
  4327  0E65  2E56               	goto	i1l1967
  4328  0E66                     i1l1969:	
  4329  0E66  3001               	movlw	1
  4330  0E67  00F8               	movwf	??___lldiv
  4331  0E68                     u223_25:	
  4332  0E68  1003               	clrc
  4333  0E69  0DF9               	rlf	___lldiv@quotient,f
  4334  0E6A  0DFA               	rlf	___lldiv@quotient+1,f
  4335  0E6B  0DFB               	rlf	___lldiv@quotient+2,f
  4336  0E6C  0DFC               	rlf	___lldiv@quotient+3,f
  4337  0E6D  0BF8               	decfsz	??___lldiv,f
  4338  0E6E  2E68               	goto	u223_25
  4339  0E6F  0873               	movf	___lldiv@divisor+3,w
  4340  0E70  0277               	subwf	___lldiv@dividend+3,w
  4341  0E71  1D03               	skipz
  4342  0E72  2E7D               	goto	u224_25
  4343  0E73  0872               	movf	___lldiv@divisor+2,w
  4344  0E74  0276               	subwf	___lldiv@dividend+2,w
  4345  0E75  1D03               	skipz
  4346  0E76  2E7D               	goto	u224_25
  4347  0E77  0871               	movf	___lldiv@divisor+1,w
  4348  0E78  0275               	subwf	___lldiv@dividend+1,w
  4349  0E79  1D03               	skipz
  4350  0E7A  2E7D               	goto	u224_25
  4351  0E7B  0870               	movf	___lldiv@divisor,w
  4352  0E7C  0274               	subwf	___lldiv@dividend,w
  4353  0E7D                     u224_25:	
  4354  0E7D  1C03               	skipc
  4355  0E7E  2E8E               	goto	i1l1977
  4356  0E7F  0870               	movf	___lldiv@divisor,w
  4357  0E80  02F4               	subwf	___lldiv@dividend,f
  4358  0E81  0871               	movf	___lldiv@divisor+1,w
  4359  0E82  1C03               	skipc
  4360  0E83  0F71               	incfsz	___lldiv@divisor+1,w
  4361  0E84  02F5               	subwf	___lldiv@dividend+1,f
  4362  0E85  0872               	movf	___lldiv@divisor+2,w
  4363  0E86  1C03               	skipc
  4364  0E87  0F72               	incfsz	___lldiv@divisor+2,w
  4365  0E88  02F6               	subwf	___lldiv@dividend+2,f
  4366  0E89  0873               	movf	___lldiv@divisor+3,w
  4367  0E8A  1C03               	skipc
  4368  0E8B  0F73               	incfsz	___lldiv@divisor+3,w
  4369  0E8C  02F7               	subwf	___lldiv@dividend+3,f
  4370  0E8D  1479               	bsf	___lldiv@quotient,0
  4371  0E8E                     i1l1977:	
  4372  0E8E  3001               	movlw	1
  4373  0E8F                     u225_25:	
  4374  0E8F  1003               	clrc
  4375  0E90  0CF3               	rrf	___lldiv@divisor+3,f
  4376  0E91  0CF2               	rrf	___lldiv@divisor+2,f
  4377  0E92  0CF1               	rrf	___lldiv@divisor+1,f
  4378  0E93  0CF0               	rrf	___lldiv@divisor,f
  4379  0E94  3EFF               	addlw	-1
  4380  0E95  1D03               	skipz
  4381  0E96  2E8F               	goto	u225_25
  4382  0E97  3001               	movlw	1
  4383  0E98  02FD               	subwf	___lldiv@counter,f
  4384  0E99  1D03               	btfss	3,2
  4385  0E9A  2E66               	goto	i1l1969
  4386  0E9B                     i1l1981:	
  4387  0E9B  087C               	movf	___lldiv@quotient+3,w
  4388  0E9C  00F3               	movwf	?___lldiv+3
  4389  0E9D  087B               	movf	___lldiv@quotient+2,w
  4390  0E9E  00F2               	movwf	?___lldiv+2
  4391  0E9F  087A               	movf	___lldiv@quotient+1,w
  4392  0EA0  00F1               	movwf	?___lldiv+1
  4393  0EA1  0879               	movf	___lldiv@quotient,w
  4394  0EA2  00F0               	movwf	?___lldiv
  4395  0EA3  0008               	return
  4396  0EA4                     __end_of___lldiv:	
  4397                           
  4398                           	psect	text20
  4399  0B0B                     __ptext20:	
  4400 ;; *************** function ___lltoft *****************
  4401 ;; Defined at:
  4402 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  c               4    8[COMMON] unsigned long 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  exp             1   13[COMMON] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  3    8[COMMON] float 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0, pclath, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4416 ;;      Params:         4       0       0       0       0
  4417 ;;      Locals:         1       0       0       0       0
  4418 ;;      Temps:          1       0       0       0       0
  4419 ;;      Totals:         6       0       0       0       0
  4420 ;;Total ram usage:        6 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    1
  4423 ;; This function calls:
  4424 ;;		___ftpack
  4425 ;; This function is called by:
  4426 ;;		_ftoa
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           
  4431                           ;psect for function ___lltoft
  4432  0B0B                     ___lltoft:	
  4433                           
  4434                           ;incstack = 0
  4435 ;; hardware stack exceeded
  4436                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  4437  0B0B  308E               	movlw	142
  4438  0B0C  00FC               	movwf	??___lltoft
  4439  0B0D  087C               	movf	??___lltoft,w
  4440  0B0E  00FD               	movwf	___lltoft@exp
  4441  0B0F                     i1l2275:	
  4442  0B0F  30FF               	movlw	255
  4443  0B10  057B               	andwf	___lltoft@c+3,w
  4444  0B11  1903               	btfsc	3,2
  4445  0B12  2B21               	goto	i1l2277
  4446  0B13  3001               	movlw	1
  4447  0B14                     u285_25:	
  4448  0B14  1003               	clrc
  4449  0B15  0CFB               	rrf	___lltoft@c+3,f
  4450  0B16  0CFA               	rrf	___lltoft@c+2,f
  4451  0B17  0CF9               	rrf	___lltoft@c+1,f
  4452  0B18  0CF8               	rrf	___lltoft@c,f
  4453  0B19  3EFF               	addlw	-1
  4454  0B1A  1D03               	skipz
  4455  0B1B  2B14               	goto	u285_25
  4456  0B1C  3001               	movlw	1
  4457  0B1D  00FC               	movwf	??___lltoft
  4458  0B1E  087C               	movf	??___lltoft,w
  4459  0B1F  07FD               	addwf	___lltoft@exp,f
  4460  0B20  2B0F               	goto	i1l2275
  4461  0B21                     i1l2277:	
  4462  0B21  0878               	movf	___lltoft@c,w
  4463  0B22  00F0               	movwf	___ftpack@arg
  4464  0B23  0879               	movf	___lltoft@c+1,w
  4465  0B24  00F1               	movwf	___ftpack@arg+1
  4466  0B25  087A               	movf	___lltoft@c+2,w
  4467  0B26  00F2               	movwf	___ftpack@arg+2
  4468  0B27  087D               	movf	___lltoft@exp,w
  4469  0B28  00FC               	movwf	??___lltoft
  4470  0B29  087C               	movf	??___lltoft,w
  4471  0B2A  00F3               	movwf	___ftpack@exp
  4472  0B2B  01F4               	clrf	___ftpack@sign
  4473  0B2C  120A  158A  270A   	fcall	___ftpack
  4474  0B2F  0870               	movf	?___ftpack,w
  4475  0B30  00F8               	movwf	?___lltoft
  4476  0B31  0871               	movf	?___ftpack+1,w
  4477  0B32  00F9               	movwf	?___lltoft+1
  4478  0B33  0872               	movf	?___ftpack+2,w
  4479  0B34  00FA               	movwf	?___lltoft+2
  4480  0B35  0008               	return
  4481  0B36                     __end_of___lltoft:	
  4482                           
  4483                           	psect	text21
  4484  0F72                     __ptext21:	
  4485 ;; *************** function ___fttol *****************
  4486 ;; Defined at:
  4487 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  f1              3   16[BANK0 ] float 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  lval            4   25[BANK0 ] unsigned long 
  4492 ;;  exp1            1   29[BANK0 ] unsigned char 
  4493 ;;  sign1           1   24[BANK0 ] unsigned char 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  4   16[BANK0 ] long 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4503 ;;      Params:         0       4       0       0       0
  4504 ;;      Locals:         0       6       0       0       0
  4505 ;;      Temps:          0       4       0       0       0
  4506 ;;      Totals:         0      14       0       0       0
  4507 ;;Total ram usage:       14 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_ISR
  4513 ;;		_ftoa
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function ___fttol
  4519  0F72                     ___fttol:	
  4520                           
  4521                           ;incstack = 0
  4522 ;; hardware stack exceeded
  4523                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4524  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  4525  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  4526  0F74  0830               	movf	___fttol@f1,w
  4527  0F75  00B4               	movwf	??___fttol
  4528  0F76  0831               	movf	___fttol@f1+1,w
  4529  0F77  00B5               	movwf	??___fttol+1
  4530  0F78  0832               	movf	___fttol@f1+2,w
  4531  0F79  00B6               	movwf	??___fttol+2
  4532  0F7A  1003               	clrc
  4533  0F7B  0D35               	rlf	??___fttol+1,w
  4534  0F7C  0D36               	rlf	??___fttol+2,w
  4535  0F7D  00B7               	movwf	??___fttol+3
  4536  0F7E  0837               	movf	??___fttol+3,w
  4537  0F7F  00BD               	movwf	___fttol@exp1
  4538  0F80  08BD               	movf	___fttol@exp1,f
  4539  0F81  1D03               	skipz
  4540  0F82  2F8C               	goto	i1l2233
  4541  0F83  3000               	movlw	0
  4542  0F84  00B3               	movwf	?___fttol+3
  4543  0F85  3000               	movlw	0
  4544  0F86  00B2               	movwf	?___fttol+2
  4545  0F87  3000               	movlw	0
  4546  0F88  00B1               	movwf	?___fttol+1
  4547  0F89  3000               	movlw	0
  4548  0F8A  00B0               	movwf	?___fttol
  4549  0F8B  0008               	return
  4550  0F8C                     i1l2233:	
  4551  0F8C  0830               	movf	___fttol@f1,w
  4552  0F8D  00B4               	movwf	??___fttol
  4553  0F8E  0831               	movf	___fttol@f1+1,w
  4554  0F8F  00B5               	movwf	??___fttol+1
  4555  0F90  0832               	movf	___fttol@f1+2,w
  4556  0F91  00B6               	movwf	??___fttol+2
  4557  0F92  3017               	movlw	23
  4558  0F93                     u276_25:	
  4559  0F93  1003               	clrc
  4560  0F94  0CB6               	rrf	??___fttol+2,f
  4561  0F95  0CB5               	rrf	??___fttol+1,f
  4562  0F96  0CB4               	rrf	??___fttol,f
  4563  0F97  3EFF               	addlw	-1
  4564  0F98  1D03               	skipz
  4565  0F99  2F93               	goto	u276_25
  4566  0F9A  0834               	movf	??___fttol,w
  4567  0F9B  00B7               	movwf	??___fttol+3
  4568  0F9C  0837               	movf	??___fttol+3,w
  4569  0F9D  00B8               	movwf	___fttol@sign1
  4570  0F9E  17B1               	bsf	___fttol@f1+1,7
  4571  0F9F  30FF               	movlw	255
  4572  0FA0  05B0               	andwf	___fttol@f1,f
  4573  0FA1  30FF               	movlw	255
  4574  0FA2  05B1               	andwf	___fttol@f1+1,f
  4575  0FA3  3000               	movlw	0
  4576  0FA4  05B2               	andwf	___fttol@f1+2,f
  4577  0FA5  0830               	movf	___fttol@f1,w
  4578  0FA6  00B9               	movwf	___fttol@lval
  4579  0FA7  0831               	movf	___fttol@f1+1,w
  4580  0FA8  00BA               	movwf	___fttol@lval+1
  4581  0FA9  0832               	movf	___fttol@f1+2,w
  4582  0FAA  00BB               	movwf	___fttol@lval+2
  4583  0FAB  01BC               	clrf	___fttol@lval+3
  4584  0FAC  308E               	movlw	142
  4585  0FAD  02BD               	subwf	___fttol@exp1,f
  4586  0FAE  1FBD               	btfss	___fttol@exp1,7
  4587  0FAF  2FCE               	goto	i1l2253
  4588  0FB0  083D               	movf	___fttol@exp1,w
  4589  0FB1  3A80               	xorlw	128
  4590  0FB2  3E8F               	addlw	143
  4591  0FB3  1803               	skipnc
  4592  0FB4  2FBE               	goto	i1l2251
  4593  0FB5  3000               	movlw	0
  4594  0FB6  00B3               	movwf	?___fttol+3
  4595  0FB7  3000               	movlw	0
  4596  0FB8  00B2               	movwf	?___fttol+2
  4597  0FB9  3000               	movlw	0
  4598  0FBA  00B1               	movwf	?___fttol+1
  4599  0FBB  3000               	movlw	0
  4600  0FBC  00B0               	movwf	?___fttol
  4601  0FBD  0008               	return
  4602  0FBE                     i1l2251:	
  4603  0FBE  3001               	movlw	1
  4604  0FBF                     u279_25:	
  4605  0FBF  1003               	clrc
  4606  0FC0  0CBC               	rrf	___fttol@lval+3,f
  4607  0FC1  0CBB               	rrf	___fttol@lval+2,f
  4608  0FC2  0CBA               	rrf	___fttol@lval+1,f
  4609  0FC3  0CB9               	rrf	___fttol@lval,f
  4610  0FC4  3EFF               	addlw	-1
  4611  0FC5  1D03               	skipz
  4612  0FC6  2FBF               	goto	u279_25
  4613  0FC7  3001               	movlw	1
  4614  0FC8  00B4               	movwf	??___fttol
  4615  0FC9  0834               	movf	??___fttol,w
  4616  0FCA  07BD               	addwf	___fttol@exp1,f
  4617  0FCB  1903               	btfsc	3,2
  4618  0FCC  2FE9               	goto	i1l2263
  4619  0FCD  2FBE               	goto	i1l2251
  4620  0FCE                     i1l2253:	
  4621  0FCE  3018               	movlw	24
  4622  0FCF  023D               	subwf	___fttol@exp1,w
  4623  0FD0  1C03               	skipc
  4624  0FD1  2FE6               	goto	i1l2261
  4625  0FD2  3000               	movlw	0
  4626  0FD3  00B3               	movwf	?___fttol+3
  4627  0FD4  3000               	movlw	0
  4628  0FD5  00B2               	movwf	?___fttol+2
  4629  0FD6  3000               	movlw	0
  4630  0FD7  00B1               	movwf	?___fttol+1
  4631  0FD8  3000               	movlw	0
  4632  0FD9  00B0               	movwf	?___fttol
  4633  0FDA  0008               	return
  4634  0FDB                     i1l2259:	
  4635  0FDB  3001               	movlw	1
  4636  0FDC  00B4               	movwf	??___fttol
  4637  0FDD                     u282_25:	
  4638  0FDD  1003               	clrc
  4639  0FDE  0DB9               	rlf	___fttol@lval,f
  4640  0FDF  0DBA               	rlf	___fttol@lval+1,f
  4641  0FE0  0DBB               	rlf	___fttol@lval+2,f
  4642  0FE1  0DBC               	rlf	___fttol@lval+3,f
  4643  0FE2  0BB4               	decfsz	??___fttol,f
  4644  0FE3  2FDD               	goto	u282_25
  4645  0FE4  3001               	movlw	1
  4646  0FE5  02BD               	subwf	___fttol@exp1,f
  4647  0FE6                     i1l2261:	
  4648  0FE6  08BD               	movf	___fttol@exp1,f
  4649  0FE7  1D03               	skipz
  4650  0FE8  2FDB               	goto	i1l2259
  4651  0FE9                     i1l2263:	
  4652  0FE9  0838               	movf	___fttol@sign1,w
  4653  0FEA  1903               	btfsc	3,2
  4654  0FEB  2FF7               	goto	i1l2267
  4655  0FEC  09B9               	comf	___fttol@lval,f
  4656  0FED  09BA               	comf	___fttol@lval+1,f
  4657  0FEE  09BB               	comf	___fttol@lval+2,f
  4658  0FEF  09BC               	comf	___fttol@lval+3,f
  4659  0FF0  0AB9               	incf	___fttol@lval,f
  4660  0FF1  1903               	skipnz
  4661  0FF2  0ABA               	incf	___fttol@lval+1,f
  4662  0FF3  1903               	skipnz
  4663  0FF4  0ABB               	incf	___fttol@lval+2,f
  4664  0FF5  1903               	skipnz
  4665  0FF6  0ABC               	incf	___fttol@lval+3,f
  4666  0FF7                     i1l2267:	
  4667  0FF7  083C               	movf	___fttol@lval+3,w
  4668  0FF8  00B3               	movwf	?___fttol+3
  4669  0FF9  083B               	movf	___fttol@lval+2,w
  4670  0FFA  00B2               	movwf	?___fttol+2
  4671  0FFB  083A               	movf	___fttol@lval+1,w
  4672  0FFC  00B1               	movwf	?___fttol+1
  4673  0FFD  0839               	movf	___fttol@lval,w
  4674  0FFE  00B0               	movwf	?___fttol
  4675  0FFF  0008               	return
  4676  1000                     __end_of___fttol:	
  4677                           
  4678                           	psect	text22
  4679  09FD                     __ptext22:	
  4680 ;; *************** function ___ftsub *****************
  4681 ;; Defined at:
  4682 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  f2              3    7[BANK0 ] float 
  4685 ;;  f1              3   10[BANK0 ] float 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  3    7[BANK0 ] float 
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0, pclath, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4697 ;;      Params:         0       6       0       0       0
  4698 ;;      Locals:         0       0       0       0       0
  4699 ;;      Temps:          0       0       0       0       0
  4700 ;;      Totals:         0       6       0       0       0
  4701 ;;Total ram usage:        6 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    2
  4704 ;; This function calls:
  4705 ;;		___ftadd
  4706 ;; This function is called by:
  4707 ;;		_ftoa
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           
  4712                           ;psect for function ___ftsub
  4713  09FD                     ___ftsub:	
  4714                           
  4715                           ;incstack = 0
  4716 ;; hardware stack exceeded
  4717                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4718  09FD  3080               	movlw	128
  4719  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  4720  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  4721  0A00  06A9               	xorwf	___ftsub@f2+2,f
  4722  0A01  082A               	movf	___ftsub@f1,w
  4723  0A02  00F8               	movwf	___ftadd@f1
  4724  0A03  082B               	movf	___ftsub@f1+1,w
  4725  0A04  00F9               	movwf	___ftadd@f1+1
  4726  0A05  082C               	movf	___ftsub@f1+2,w
  4727  0A06  00FA               	movwf	___ftadd@f1+2
  4728  0A07  0827               	movf	___ftsub@f2,w
  4729  0A08  00FB               	movwf	___ftadd@f2
  4730  0A09  0828               	movf	___ftsub@f2+1,w
  4731  0A0A  00FC               	movwf	___ftadd@f2+1
  4732  0A0B  0829               	movf	___ftsub@f2+2,w
  4733  0A0C  00FD               	movwf	___ftadd@f2+2
  4734  0A0D  120A  118A  23AB   	fcall	___ftadd
  4735  0A10  0878               	movf	?___ftadd,w
  4736  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  4737  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  4738  0A13  00A7               	movwf	?___ftsub
  4739  0A14  0879               	movf	?___ftadd+1,w
  4740  0A15  00A8               	movwf	?___ftsub+1
  4741  0A16  087A               	movf	?___ftadd+2,w
  4742  0A17  00A9               	movwf	?___ftsub+2
  4743  0A18  0008               	return
  4744  0A19                     __end_of___ftsub:	
  4745                           
  4746                           	psect	text23
  4747  03AB                     __ptext23:	
  4748 ;; *************** function ___ftadd *****************
  4749 ;; Defined at:
  4750 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  f1              3    8[COMMON] float 
  4753 ;;  f2              3   11[COMMON] float 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  exp1            1    6[BANK0 ] unsigned char 
  4756 ;;  exp2            1    5[BANK0 ] unsigned char 
  4757 ;;  sign            1    4[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  3    8[COMMON] float 
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4767 ;;      Params:         6       0       0       0       0
  4768 ;;      Locals:         0       3       0       0       0
  4769 ;;      Temps:          0       4       0       0       0
  4770 ;;      Totals:         6       7       0       0       0
  4771 ;;Total ram usage:       13 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    1
  4774 ;; This function calls:
  4775 ;;		___ftpack
  4776 ;; This function is called by:
  4777 ;;		___ftsub
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function ___ftadd
  4783  03AB                     ___ftadd:	
  4784                           
  4785                           ;incstack = 0
  4786 ;; hardware stack exceeded
  4787                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4788  03AB  0878               	movf	___ftadd@f1,w
  4789  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  4790  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  4791  03AE  00A0               	movwf	??___ftadd
  4792  03AF  0879               	movf	___ftadd@f1+1,w
  4793  03B0  00A1               	movwf	??___ftadd+1
  4794  03B1  087A               	movf	___ftadd@f1+2,w
  4795  03B2  00A2               	movwf	??___ftadd+2
  4796  03B3  1003               	clrc
  4797  03B4  0D21               	rlf	??___ftadd+1,w
  4798  03B5  0D22               	rlf	??___ftadd+2,w
  4799  03B6  00A3               	movwf	??___ftadd+3
  4800  03B7  0823               	movf	??___ftadd+3,w
  4801  03B8  00A6               	movwf	___ftadd@exp1
  4802  03B9  087B               	movf	___ftadd@f2,w
  4803  03BA  00A0               	movwf	??___ftadd
  4804  03BB  087C               	movf	___ftadd@f2+1,w
  4805  03BC  00A1               	movwf	??___ftadd+1
  4806  03BD  087D               	movf	___ftadd@f2+2,w
  4807  03BE  00A2               	movwf	??___ftadd+2
  4808  03BF  1003               	clrc
  4809  03C0  0D21               	rlf	??___ftadd+1,w
  4810  03C1  0D22               	rlf	??___ftadd+2,w
  4811  03C2  00A3               	movwf	??___ftadd+3
  4812  03C3  0823               	movf	??___ftadd+3,w
  4813  03C4  00A5               	movwf	___ftadd@exp2
  4814  03C5  0826               	movf	___ftadd@exp1,w
  4815  03C6  1903               	btfsc	3,2
  4816  03C7  2BD4               	goto	i1l1897
  4817  03C8  0825               	movf	___ftadd@exp2,w
  4818  03C9  0226               	subwf	___ftadd@exp1,w
  4819  03CA  1803               	skipnc
  4820  03CB  2BDB               	goto	i1l1901
  4821  03CC  0326               	decf	___ftadd@exp1,w
  4822  03CD  3AFF               	xorlw	255
  4823  03CE  0725               	addwf	___ftadd@exp2,w
  4824  03CF  00A0               	movwf	??___ftadd
  4825  03D0  3019               	movlw	25
  4826  03D1  0220               	subwf	??___ftadd,w
  4827  03D2  1C03               	skipc
  4828  03D3  2BDB               	goto	i1l1901
  4829  03D4                     i1l1897:	
  4830  03D4  087B               	movf	___ftadd@f2,w
  4831  03D5  00F8               	movwf	?___ftadd
  4832  03D6  087C               	movf	___ftadd@f2+1,w
  4833  03D7  00F9               	movwf	?___ftadd+1
  4834  03D8  087D               	movf	___ftadd@f2+2,w
  4835  03D9  00FA               	movwf	?___ftadd+2
  4836  03DA  0008               	return
  4837  03DB                     i1l1901:	
  4838  03DB  0825               	movf	___ftadd@exp2,w
  4839  03DC  1903               	btfsc	3,2
  4840  03DD  0008               	return
  4841  03DE  0826               	movf	___ftadd@exp1,w
  4842  03DF  0225               	subwf	___ftadd@exp2,w
  4843  03E0  1803               	skipnc
  4844  03E1  2BEA               	goto	i1l1907
  4845  03E2  0325               	decf	___ftadd@exp2,w
  4846  03E3  3AFF               	xorlw	255
  4847  03E4  0726               	addwf	___ftadd@exp1,w
  4848  03E5  00A0               	movwf	??___ftadd
  4849  03E6  3019               	movlw	25
  4850  03E7  0220               	subwf	??___ftadd,w
  4851  03E8  1803               	btfsc	3,0
  4852  03E9  0008               	return
  4853  03EA                     i1l1907:	
  4854  03EA  3006               	movlw	6
  4855  03EB  00A0               	movwf	??___ftadd
  4856  03EC  0820               	movf	??___ftadd,w
  4857  03ED  00A4               	movwf	___ftadd@sign
  4858  03EE  1BFA               	btfsc	___ftadd@f1+2,7
  4859  03EF  17A4               	bsf	___ftadd@sign,7
  4860  03F0  1BFD               	btfsc	___ftadd@f2+2,7
  4861  03F1  1724               	bsf	___ftadd@sign,6
  4862  03F2  17F9               	bsf	___ftadd@f1+1,7
  4863  03F3  30FF               	movlw	255
  4864  03F4  05F8               	andwf	___ftadd@f1,f
  4865  03F5  30FF               	movlw	255
  4866  03F6  05F9               	andwf	___ftadd@f1+1,f
  4867  03F7  3000               	movlw	0
  4868  03F8  05FA               	andwf	___ftadd@f1+2,f
  4869  03F9  17FC               	bsf	___ftadd@f2+1,7
  4870  03FA  30FF               	movlw	255
  4871  03FB  05FB               	andwf	___ftadd@f2,f
  4872  03FC  30FF               	movlw	255
  4873  03FD  05FC               	andwf	___ftadd@f2+1,f
  4874  03FE  3000               	movlw	0
  4875  03FF  05FD               	andwf	___ftadd@f2+2,f
  4876  0400  0825               	movf	___ftadd@exp2,w
  4877  0401  0226               	subwf	___ftadd@exp1,w
  4878  0402  1803               	skipnc
  4879  0403  2C2A               	goto	i1l1929
  4880  0404                     i1l1919:	
  4881  0404  3001               	movlw	1
  4882  0405                     u205_25:	
  4883  0405  1003               	clrc
  4884  0406  0DFB               	rlf	___ftadd@f2,f
  4885  0407  0DFC               	rlf	___ftadd@f2+1,f
  4886  0408  0DFD               	rlf	___ftadd@f2+2,f
  4887  0409  3EFF               	addlw	-1
  4888  040A  1D03               	skipz
  4889  040B  2C05               	goto	u205_25
  4890  040C  3001               	movlw	1
  4891  040D  02A5               	subwf	___ftadd@exp2,f
  4892  040E  0825               	movf	___ftadd@exp2,w
  4893  040F  0626               	xorwf	___ftadd@exp1,w
  4894  0410  1903               	skipnz
  4895  0411  2C25               	goto	i1l1927
  4896  0412  3001               	movlw	1
  4897  0413  02A4               	subwf	___ftadd@sign,f
  4898  0414  0824               	movf	___ftadd@sign,w
  4899  0415  3907               	andlw	7
  4900  0416  1903               	btfsc	3,2
  4901  0417  2C25               	goto	i1l1927
  4902  0418  2C04               	goto	i1l1919
  4903  0419                     i1l1925:	
  4904  0419  3001               	movlw	1
  4905  041A                     u208_25:	
  4906  041A  1003               	clrc
  4907  041B  0CFA               	rrf	___ftadd@f1+2,f
  4908  041C  0CF9               	rrf	___ftadd@f1+1,f
  4909  041D  0CF8               	rrf	___ftadd@f1,f
  4910  041E  3EFF               	addlw	-1
  4911  041F  1D03               	skipz
  4912  0420  2C1A               	goto	u208_25
  4913  0421  3001               	movlw	1
  4914  0422  00A0               	movwf	??___ftadd
  4915  0423  0820               	movf	??___ftadd,w
  4916  0424  07A6               	addwf	___ftadd@exp1,f
  4917  0425                     i1l1927:	
  4918  0425  0826               	movf	___ftadd@exp1,w
  4919  0426  0625               	xorwf	___ftadd@exp2,w
  4920  0427  1903               	btfsc	3,2
  4921  0428  2C53               	goto	i1l553
  4922  0429  2C19               	goto	i1l1925
  4923  042A                     i1l1929:	
  4924  042A  0826               	movf	___ftadd@exp1,w
  4925  042B  0225               	subwf	___ftadd@exp2,w
  4926  042C  1803               	skipnc
  4927  042D  2C53               	goto	i1l553
  4928  042E                     i1l1931:	
  4929  042E  3001               	movlw	1
  4930  042F                     u211_25:	
  4931  042F  1003               	clrc
  4932  0430  0DF8               	rlf	___ftadd@f1,f
  4933  0431  0DF9               	rlf	___ftadd@f1+1,f
  4934  0432  0DFA               	rlf	___ftadd@f1+2,f
  4935  0433  3EFF               	addlw	-1
  4936  0434  1D03               	skipz
  4937  0435  2C2F               	goto	u211_25
  4938  0436  3001               	movlw	1
  4939  0437  02A6               	subwf	___ftadd@exp1,f
  4940  0438  0825               	movf	___ftadd@exp2,w
  4941  0439  0626               	xorwf	___ftadd@exp1,w
  4942  043A  1903               	skipnz
  4943  043B  2C4F               	goto	i1l1939
  4944  043C  3001               	movlw	1
  4945  043D  02A4               	subwf	___ftadd@sign,f
  4946  043E  0824               	movf	___ftadd@sign,w
  4947  043F  3907               	andlw	7
  4948  0440  1903               	btfsc	3,2
  4949  0441  2C4F               	goto	i1l1939
  4950  0442  2C2E               	goto	i1l1931
  4951  0443                     i1l1937:	
  4952  0443  3001               	movlw	1
  4953  0444                     u214_25:	
  4954  0444  1003               	clrc
  4955  0445  0CFD               	rrf	___ftadd@f2+2,f
  4956  0446  0CFC               	rrf	___ftadd@f2+1,f
  4957  0447  0CFB               	rrf	___ftadd@f2,f
  4958  0448  3EFF               	addlw	-1
  4959  0449  1D03               	skipz
  4960  044A  2C44               	goto	u214_25
  4961  044B  3001               	movlw	1
  4962  044C  00A0               	movwf	??___ftadd
  4963  044D  0820               	movf	??___ftadd,w
  4964  044E  07A5               	addwf	___ftadd@exp2,f
  4965  044F                     i1l1939:	
  4966  044F  0826               	movf	___ftadd@exp1,w
  4967  0450  0625               	xorwf	___ftadd@exp2,w
  4968  0451  1D03               	skipz
  4969  0452  2C43               	goto	i1l1937
  4970  0453                     i1l553:	
  4971  0453  1FA4               	btfss	___ftadd@sign,7
  4972  0454  2C65               	goto	i1l1943
  4973  0455  30FF               	movlw	255
  4974  0456  06F8               	xorwf	___ftadd@f1,f
  4975  0457  30FF               	movlw	255
  4976  0458  06F9               	xorwf	___ftadd@f1+1,f
  4977  0459  30FF               	movlw	255
  4978  045A  06FA               	xorwf	___ftadd@f1+2,f
  4979  045B  3001               	movlw	1
  4980  045C  07F8               	addwf	___ftadd@f1,f
  4981  045D  3000               	movlw	0
  4982  045E  1803               	skipnc
  4983  045F  3001               	movlw	1
  4984  0460  07F9               	addwf	___ftadd@f1+1,f
  4985  0461  3000               	movlw	0
  4986  0462  1803               	skipnc
  4987  0463  3001               	movlw	1
  4988  0464  07FA               	addwf	___ftadd@f1+2,f
  4989  0465                     i1l1943:	
  4990  0465  1F24               	btfss	___ftadd@sign,6
  4991  0466  2C77               	goto	i1l1947
  4992  0467  30FF               	movlw	255
  4993  0468  06FB               	xorwf	___ftadd@f2,f
  4994  0469  30FF               	movlw	255
  4995  046A  06FC               	xorwf	___ftadd@f2+1,f
  4996  046B  30FF               	movlw	255
  4997  046C  06FD               	xorwf	___ftadd@f2+2,f
  4998  046D  3001               	movlw	1
  4999  046E  07FB               	addwf	___ftadd@f2,f
  5000  046F  3000               	movlw	0
  5001  0470  1803               	skipnc
  5002  0471  3001               	movlw	1
  5003  0472  07FC               	addwf	___ftadd@f2+1,f
  5004  0473  3000               	movlw	0
  5005  0474  1803               	skipnc
  5006  0475  3001               	movlw	1
  5007  0476  07FD               	addwf	___ftadd@f2+2,f
  5008  0477                     i1l1947:	
  5009  0477  01A4               	clrf	___ftadd@sign
  5010  0478  0878               	movf	___ftadd@f1,w
  5011  0479  07FB               	addwf	___ftadd@f2,f
  5012  047A  0879               	movf	___ftadd@f1+1,w
  5013  047B  1103               	clrz
  5014  047C  1803               	skipnc
  5015  047D  0A79               	incf	___ftadd@f1+1,w
  5016  047E  1D03               	btfss	3,2
  5017  047F  07FC               	addwf	___ftadd@f2+1,f
  5018  0480  087A               	movf	___ftadd@f1+2,w
  5019  0481  1103               	clrz
  5020  0482  1803               	skipnc
  5021  0483  0A7A               	incf	___ftadd@f1+2,w
  5022  0484  1D03               	btfss	3,2
  5023  0485  07FD               	addwf	___ftadd@f2+2,f
  5024  0486  1FFD               	btfss	___ftadd@f2+2,7
  5025  0487  2C9A               	goto	i1l1957
  5026  0488  30FF               	movlw	255
  5027  0489  06FB               	xorwf	___ftadd@f2,f
  5028  048A  30FF               	movlw	255
  5029  048B  06FC               	xorwf	___ftadd@f2+1,f
  5030  048C  30FF               	movlw	255
  5031  048D  06FD               	xorwf	___ftadd@f2+2,f
  5032  048E  3001               	movlw	1
  5033  048F  07FB               	addwf	___ftadd@f2,f
  5034  0490  3000               	movlw	0
  5035  0491  1803               	skipnc
  5036  0492  3001               	movlw	1
  5037  0493  07FC               	addwf	___ftadd@f2+1,f
  5038  0494  3000               	movlw	0
  5039  0495  1803               	skipnc
  5040  0496  3001               	movlw	1
  5041  0497  07FD               	addwf	___ftadd@f2+2,f
  5042  0498  01A4               	clrf	___ftadd@sign
  5043  0499  0AA4               	incf	___ftadd@sign,f
  5044  049A                     i1l1957:	
  5045  049A  087B               	movf	___ftadd@f2,w
  5046  049B  00F0               	movwf	___ftpack@arg
  5047  049C  087C               	movf	___ftadd@f2+1,w
  5048  049D  00F1               	movwf	___ftpack@arg+1
  5049  049E  087D               	movf	___ftadd@f2+2,w
  5050  049F  00F2               	movwf	___ftpack@arg+2
  5051  04A0  0826               	movf	___ftadd@exp1,w
  5052  04A1  00A0               	movwf	??___ftadd
  5053  04A2  0820               	movf	??___ftadd,w
  5054  04A3  00F3               	movwf	___ftpack@exp
  5055  04A4  0824               	movf	___ftadd@sign,w
  5056  04A5  00A1               	movwf	??___ftadd+1
  5057  04A6  0821               	movf	??___ftadd+1,w
  5058  04A7  00F4               	movwf	___ftpack@sign
  5059  04A8  120A  158A  270A   	fcall	___ftpack
  5060  04AB  0870               	movf	?___ftpack,w
  5061  04AC  00F8               	movwf	?___ftadd
  5062  04AD  0871               	movf	?___ftpack+1,w
  5063  04AE  00F9               	movwf	?___ftadd+1
  5064  04AF  0872               	movf	?___ftpack+2,w
  5065  04B0  00FA               	movwf	?___ftadd+2
  5066  04B1  0008               	return
  5067  04B2                     __end_of___ftadd:	
  5068                           
  5069                           	psect	text24
  5070  095B                     __ptext24:	
  5071 ;; *************** function ___ftneg *****************
  5072 ;; Defined at:
  5073 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  f1              3    0[COMMON] float 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  3    0[COMMON] float 
  5080 ;; Registers used:
  5081 ;;		wreg
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5087 ;;      Params:         3       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0
  5090 ;;      Totals:         3       0       0       0       0
  5091 ;;Total ram usage:        3 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_ftoa
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           
  5101                           ;psect for function ___ftneg
  5102  095B                     ___ftneg:	
  5103                           
  5104                           ;incstack = 0
  5105 ;; hardware stack exceeded
  5106                           ; Regs used in ___ftneg: [wreg]
  5107  095B  0872               	movf	___ftneg@f1+2,w
  5108  095C  0471               	iorwf	___ftneg@f1+1,w
  5109  095D  0470               	iorwf	___ftneg@f1,w
  5110  095E  1903               	skipnz
  5111  095F  0008               	return
  5112  0960  3080               	movlw	128
  5113  0961  06F2               	xorwf	___ftneg@f1+2,f
  5114  0962  0008               	return
  5115  0963                     __end_of___ftneg:	
  5116                           
  5117                           	psect	text25
  5118  04B2                     __ptext25:	
  5119 ;; *************** function ___ftmul *****************
  5120 ;; Defined at:
  5121 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  f1              3    0[BANK0 ] float 
  5124 ;;  f2              3    3[BANK0 ] float 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  5127 ;;  sign            1   15[BANK0 ] unsigned char 
  5128 ;;  cntr            1   14[BANK0 ] unsigned char 
  5129 ;;  exp             1   10[BANK0 ] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  3    0[BANK0 ] float 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5139 ;;      Params:         0       6       0       0       0
  5140 ;;      Locals:         0       6       0       0       0
  5141 ;;      Temps:          0       4       0       0       0
  5142 ;;      Totals:         0      16       0       0       0
  5143 ;;Total ram usage:       16 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    1
  5146 ;; This function calls:
  5147 ;;		___ftpack
  5148 ;; This function is called by:
  5149 ;;		_ISR
  5150 ;;		_ftoa
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function ___ftmul
  5156  04B2                     ___ftmul:	
  5157                           
  5158                           ;incstack = 0
  5159 ;; hardware stack exceeded
  5160                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5161  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  5162  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  5163  04B4  0820               	movf	___ftmul@f1,w
  5164  04B5  00A6               	movwf	??___ftmul
  5165  04B6  0821               	movf	___ftmul@f1+1,w
  5166  04B7  00A7               	movwf	??___ftmul+1
  5167  04B8  0822               	movf	___ftmul@f1+2,w
  5168  04B9  00A8               	movwf	??___ftmul+2
  5169  04BA  1003               	clrc
  5170  04BB  0D27               	rlf	??___ftmul+1,w
  5171  04BC  0D28               	rlf	??___ftmul+2,w
  5172  04BD  00A9               	movwf	??___ftmul+3
  5173  04BE  0829               	movf	??___ftmul+3,w
  5174  04BF  00AA               	movwf	___ftmul@exp
  5175  04C0  08AA               	movf	___ftmul@exp,f
  5176  04C1  1D03               	skipz
  5177  04C2  2CCA               	goto	i1l2169
  5178  04C3  3000               	movlw	0
  5179  04C4  00A0               	movwf	?___ftmul
  5180  04C5  3000               	movlw	0
  5181  04C6  00A1               	movwf	?___ftmul+1
  5182  04C7  3000               	movlw	0
  5183  04C8  00A2               	movwf	?___ftmul+2
  5184  04C9  0008               	return
  5185  04CA                     i1l2169:	
  5186  04CA  0823               	movf	___ftmul@f2,w
  5187  04CB  00A6               	movwf	??___ftmul
  5188  04CC  0824               	movf	___ftmul@f2+1,w
  5189  04CD  00A7               	movwf	??___ftmul+1
  5190  04CE  0825               	movf	___ftmul@f2+2,w
  5191  04CF  00A8               	movwf	??___ftmul+2
  5192  04D0  1003               	clrc
  5193  04D1  0D27               	rlf	??___ftmul+1,w
  5194  04D2  0D28               	rlf	??___ftmul+2,w
  5195  04D3  00A9               	movwf	??___ftmul+3
  5196  04D4  0829               	movf	??___ftmul+3,w
  5197  04D5  00AF               	movwf	___ftmul@sign
  5198  04D6  08AF               	movf	___ftmul@sign,f
  5199  04D7  1D03               	skipz
  5200  04D8  2CE0               	goto	i1l2175
  5201  04D9  3000               	movlw	0
  5202  04DA  00A0               	movwf	?___ftmul
  5203  04DB  3000               	movlw	0
  5204  04DC  00A1               	movwf	?___ftmul+1
  5205  04DD  3000               	movlw	0
  5206  04DE  00A2               	movwf	?___ftmul+2
  5207  04DF  0008               	return
  5208  04E0                     i1l2175:	
  5209  04E0  082F               	movf	___ftmul@sign,w
  5210  04E1  3E7B               	addlw	123
  5211  04E2  00A6               	movwf	??___ftmul
  5212  04E3  0826               	movf	??___ftmul,w
  5213  04E4  07AA               	addwf	___ftmul@exp,f
  5214  04E5  0820               	movf	___ftmul@f1,w
  5215  04E6  00A6               	movwf	??___ftmul
  5216  04E7  0821               	movf	___ftmul@f1+1,w
  5217  04E8  00A7               	movwf	??___ftmul+1
  5218  04E9  0822               	movf	___ftmul@f1+2,w
  5219  04EA  00A8               	movwf	??___ftmul+2
  5220  04EB  3010               	movlw	16
  5221  04EC                     u262_25:	
  5222  04EC  1003               	clrc
  5223  04ED  0CA8               	rrf	??___ftmul+2,f
  5224  04EE  0CA7               	rrf	??___ftmul+1,f
  5225  04EF  0CA6               	rrf	??___ftmul,f
  5226  04F0  3EFF               	addlw	-1
  5227  04F1  1D03               	skipz
  5228  04F2  2CEC               	goto	u262_25
  5229  04F3  0826               	movf	??___ftmul,w
  5230  04F4  00A9               	movwf	??___ftmul+3
  5231  04F5  0829               	movf	??___ftmul+3,w
  5232  04F6  00AF               	movwf	___ftmul@sign
  5233  04F7  0823               	movf	___ftmul@f2,w
  5234  04F8  00A6               	movwf	??___ftmul
  5235  04F9  0824               	movf	___ftmul@f2+1,w
  5236  04FA  00A7               	movwf	??___ftmul+1
  5237  04FB  0825               	movf	___ftmul@f2+2,w
  5238  04FC  00A8               	movwf	??___ftmul+2
  5239  04FD  3010               	movlw	16
  5240  04FE                     u263_25:	
  5241  04FE  1003               	clrc
  5242  04FF  0CA8               	rrf	??___ftmul+2,f
  5243  0500  0CA7               	rrf	??___ftmul+1,f
  5244  0501  0CA6               	rrf	??___ftmul,f
  5245  0502  3EFF               	addlw	-1
  5246  0503  1D03               	skipz
  5247  0504  2CFE               	goto	u263_25
  5248  0505  0826               	movf	??___ftmul,w
  5249  0506  00A9               	movwf	??___ftmul+3
  5250  0507  0829               	movf	??___ftmul+3,w
  5251  0508  06AF               	xorwf	___ftmul@sign,f
  5252  0509  3080               	movlw	128
  5253  050A  00A6               	movwf	??___ftmul
  5254  050B  0826               	movf	??___ftmul,w
  5255  050C  05AF               	andwf	___ftmul@sign,f
  5256  050D  17A1               	bsf	___ftmul@f1+1,7
  5257  050E  17A4               	bsf	___ftmul@f2+1,7
  5258  050F  30FF               	movlw	255
  5259  0510  05A3               	andwf	___ftmul@f2,f
  5260  0511  30FF               	movlw	255
  5261  0512  05A4               	andwf	___ftmul@f2+1,f
  5262  0513  3000               	movlw	0
  5263  0514  05A5               	andwf	___ftmul@f2+2,f
  5264  0515  3000               	movlw	0
  5265  0516  00AB               	movwf	___ftmul@f3_as_product
  5266  0517  3000               	movlw	0
  5267  0518  00AC               	movwf	___ftmul@f3_as_product+1
  5268  0519  3000               	movlw	0
  5269  051A  00AD               	movwf	___ftmul@f3_as_product+2
  5270  051B  3007               	movlw	7
  5271  051C  00A6               	movwf	??___ftmul
  5272  051D  0826               	movf	??___ftmul,w
  5273  051E  00AE               	movwf	___ftmul@cntr
  5274  051F                     i1l2187:	
  5275  051F  1C20               	btfss	___ftmul@f1,0
  5276  0520  2D2F               	goto	i1l2191
  5277  0521  0823               	movf	___ftmul@f2,w
  5278  0522  07AB               	addwf	___ftmul@f3_as_product,f
  5279  0523  0824               	movf	___ftmul@f2+1,w
  5280  0524  1103               	clrz
  5281  0525  1803               	skipnc
  5282  0526  0A24               	incf	___ftmul@f2+1,w
  5283  0527  1D03               	btfss	3,2
  5284  0528  07AC               	addwf	___ftmul@f3_as_product+1,f
  5285  0529  0825               	movf	___ftmul@f2+2,w
  5286  052A  1103               	clrz
  5287  052B  1803               	skipnc
  5288  052C  0A25               	incf	___ftmul@f2+2,w
  5289  052D  1D03               	btfss	3,2
  5290  052E  07AD               	addwf	___ftmul@f3_as_product+2,f
  5291  052F                     i1l2191:	
  5292  052F  3001               	movlw	1
  5293  0530                     u266_25:	
  5294  0530  1003               	clrc
  5295  0531  0CA2               	rrf	___ftmul@f1+2,f
  5296  0532  0CA1               	rrf	___ftmul@f1+1,f
  5297  0533  0CA0               	rrf	___ftmul@f1,f
  5298  0534  3EFF               	addlw	-1
  5299  0535  1D03               	skipz
  5300  0536  2D30               	goto	u266_25
  5301  0537  3001               	movlw	1
  5302  0538                     u267_25:	
  5303  0538  1003               	clrc
  5304  0539  0DA3               	rlf	___ftmul@f2,f
  5305  053A  0DA4               	rlf	___ftmul@f2+1,f
  5306  053B  0DA5               	rlf	___ftmul@f2+2,f
  5307  053C  3EFF               	addlw	-1
  5308  053D  1D03               	skipz
  5309  053E  2D38               	goto	u267_25
  5310  053F  3001               	movlw	1
  5311  0540  02AE               	subwf	___ftmul@cntr,f
  5312  0541  1D03               	btfss	3,2
  5313  0542  2D1F               	goto	i1l2187
  5314  0543  3009               	movlw	9
  5315  0544  00A6               	movwf	??___ftmul
  5316  0545  0826               	movf	??___ftmul,w
  5317  0546  00AE               	movwf	___ftmul@cntr
  5318  0547                     i1l2199:	
  5319  0547  1C20               	btfss	___ftmul@f1,0
  5320  0548  2D57               	goto	i1l2203
  5321  0549  0823               	movf	___ftmul@f2,w
  5322  054A  07AB               	addwf	___ftmul@f3_as_product,f
  5323  054B  0824               	movf	___ftmul@f2+1,w
  5324  054C  1103               	clrz
  5325  054D  1803               	skipnc
  5326  054E  0A24               	incf	___ftmul@f2+1,w
  5327  054F  1D03               	btfss	3,2
  5328  0550  07AC               	addwf	___ftmul@f3_as_product+1,f
  5329  0551  0825               	movf	___ftmul@f2+2,w
  5330  0552  1103               	clrz
  5331  0553  1803               	skipnc
  5332  0554  0A25               	incf	___ftmul@f2+2,w
  5333  0555  1D03               	btfss	3,2
  5334  0556  07AD               	addwf	___ftmul@f3_as_product+2,f
  5335  0557                     i1l2203:	
  5336  0557  3001               	movlw	1
  5337  0558                     u271_25:	
  5338  0558  1003               	clrc
  5339  0559  0CA2               	rrf	___ftmul@f1+2,f
  5340  055A  0CA1               	rrf	___ftmul@f1+1,f
  5341  055B  0CA0               	rrf	___ftmul@f1,f
  5342  055C  3EFF               	addlw	-1
  5343  055D  1D03               	skipz
  5344  055E  2D58               	goto	u271_25
  5345  055F  3001               	movlw	1
  5346  0560                     u272_25:	
  5347  0560  1003               	clrc
  5348  0561  0CAD               	rrf	___ftmul@f3_as_product+2,f
  5349  0562  0CAC               	rrf	___ftmul@f3_as_product+1,f
  5350  0563  0CAB               	rrf	___ftmul@f3_as_product,f
  5351  0564  3EFF               	addlw	-1
  5352  0565  1D03               	skipz
  5353  0566  2D60               	goto	u272_25
  5354  0567  3001               	movlw	1
  5355  0568  02AE               	subwf	___ftmul@cntr,f
  5356  0569  1D03               	btfss	3,2
  5357  056A  2D47               	goto	i1l2199
  5358  056B  082B               	movf	___ftmul@f3_as_product,w
  5359  056C  00F0               	movwf	___ftpack@arg
  5360  056D  082C               	movf	___ftmul@f3_as_product+1,w
  5361  056E  00F1               	movwf	___ftpack@arg+1
  5362  056F  082D               	movf	___ftmul@f3_as_product+2,w
  5363  0570  00F2               	movwf	___ftpack@arg+2
  5364  0571  082A               	movf	___ftmul@exp,w
  5365  0572  00A6               	movwf	??___ftmul
  5366  0573  0826               	movf	??___ftmul,w
  5367  0574  00F3               	movwf	___ftpack@exp
  5368  0575  082F               	movf	___ftmul@sign,w
  5369  0576  00A7               	movwf	??___ftmul+1
  5370  0577  0827               	movf	??___ftmul+1,w
  5371  0578  00F4               	movwf	___ftpack@sign
  5372  0579  120A  158A  270A   	fcall	___ftpack
  5373  057C  0870               	movf	?___ftpack,w
  5374  057D  1283               	bcf	3,5	;RP0=0, select bank0
  5375  057E  1303               	bcf	3,6	;RP1=0, select bank0
  5376  057F  00A0               	movwf	?___ftmul
  5377  0580  0871               	movf	?___ftpack+1,w
  5378  0581  00A1               	movwf	?___ftmul+1
  5379  0582  0872               	movf	?___ftpack+2,w
  5380  0583  00A2               	movwf	?___ftmul+2
  5381  0584  0008               	return
  5382  0585                     __end_of___ftmul:	
  5383                           
  5384                           	psect	text26
  5385  0DE9                     __ptext26:	
  5386 ;; *************** function ___ftge *****************
  5387 ;; Defined at:
  5388 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  ff1             3    0[COMMON] float 
  5391 ;;  ff2             3    3[COMMON] float 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;		None
  5394 ;; Return value:  Size  Location     Type
  5395 ;;		None               void
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5403 ;;      Params:         6       0       0       0       0
  5404 ;;      Locals:         0       0       0       0       0
  5405 ;;      Temps:          6       0       0       0       0
  5406 ;;      Totals:        12       0       0       0       0
  5407 ;;Total ram usage:       12 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_ftoa
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function ___ftge
  5418  0DE9                     ___ftge:	
  5419                           
  5420                           ;incstack = 0
  5421 ;; hardware stack exceeded
  5422                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5423  0DE9  1FF2               	btfss	___ftge@ff1+2,7
  5424  0DEA  2E10               	goto	i1l2147
  5425  0DEB  3000               	movlw	0
  5426  0DEC  00F6               	movwf	??___ftge
  5427  0DED  3000               	movlw	0
  5428  0DEE  00F7               	movwf	??___ftge+1
  5429  0DEF  3080               	movlw	128
  5430  0DF0  00F8               	movwf	??___ftge+2
  5431  0DF1  0970               	comf	___ftge@ff1,w
  5432  0DF2  00F9               	movwf	??___ftge+3
  5433  0DF3  0971               	comf	___ftge@ff1+1,w
  5434  0DF4  00FA               	movwf	??___ftge+4
  5435  0DF5  0972               	comf	___ftge@ff1+2,w
  5436  0DF6  00FB               	movwf	??___ftge+5
  5437  0DF7  0AF9               	incf	??___ftge+3,f
  5438  0DF8  1903               	skipnz
  5439  0DF9  0AFA               	incf	??___ftge+4,f
  5440  0DFA  1903               	skipnz
  5441  0DFB  0AFB               	incf	??___ftge+5,f
  5442  0DFC  0879               	movf	??___ftge+3,w
  5443  0DFD  07F6               	addwf	??___ftge,f
  5444  0DFE  087A               	movf	??___ftge+4,w
  5445  0DFF  1803               	skipnc
  5446  0E00  0F7A               	incfsz	??___ftge+4,w
  5447  0E01  2E03               	goto	u256_21
  5448  0E02  2E04               	goto	u256_22
  5449  0E03                     u256_21:	
  5450  0E03  07F7               	addwf	??___ftge+1,f
  5451  0E04                     u256_22:	
  5452  0E04  087B               	movf	??___ftge+5,w
  5453  0E05  1803               	skipnc
  5454  0E06  0F7B               	incfsz	??___ftge+5,w
  5455  0E07  2E09               	goto	u256_23
  5456  0E08  2E0A               	goto	u256_24
  5457  0E09                     u256_23:	
  5458  0E09  07F8               	addwf	??___ftge+2,f
  5459  0E0A                     u256_24:	
  5460  0E0A  0876               	movf	??___ftge,w
  5461  0E0B  00F0               	movwf	___ftge@ff1
  5462  0E0C  0877               	movf	??___ftge+1,w
  5463  0E0D  00F1               	movwf	___ftge@ff1+1
  5464  0E0E  0878               	movf	??___ftge+2,w
  5465  0E0F  00F2               	movwf	___ftge@ff1+2
  5466  0E10                     i1l2147:	
  5467  0E10  1FF5               	btfss	___ftge@ff2+2,7
  5468  0E11  2E37               	goto	i1l2151
  5469  0E12  3000               	movlw	0
  5470  0E13  00F6               	movwf	??___ftge
  5471  0E14  3000               	movlw	0
  5472  0E15  00F7               	movwf	??___ftge+1
  5473  0E16  3080               	movlw	128
  5474  0E17  00F8               	movwf	??___ftge+2
  5475  0E18  0973               	comf	___ftge@ff2,w
  5476  0E19  00F9               	movwf	??___ftge+3
  5477  0E1A  0974               	comf	___ftge@ff2+1,w
  5478  0E1B  00FA               	movwf	??___ftge+4
  5479  0E1C  0975               	comf	___ftge@ff2+2,w
  5480  0E1D  00FB               	movwf	??___ftge+5
  5481  0E1E  0AF9               	incf	??___ftge+3,f
  5482  0E1F  1903               	skipnz
  5483  0E20  0AFA               	incf	??___ftge+4,f
  5484  0E21  1903               	skipnz
  5485  0E22  0AFB               	incf	??___ftge+5,f
  5486  0E23  0879               	movf	??___ftge+3,w
  5487  0E24  07F6               	addwf	??___ftge,f
  5488  0E25  087A               	movf	??___ftge+4,w
  5489  0E26  1803               	skipnc
  5490  0E27  0F7A               	incfsz	??___ftge+4,w
  5491  0E28  2E2A               	goto	u258_21
  5492  0E29  2E2B               	goto	u258_22
  5493  0E2A                     u258_21:	
  5494  0E2A  07F7               	addwf	??___ftge+1,f
  5495  0E2B                     u258_22:	
  5496  0E2B  087B               	movf	??___ftge+5,w
  5497  0E2C  1803               	skipnc
  5498  0E2D  0F7B               	incfsz	??___ftge+5,w
  5499  0E2E  2E30               	goto	u258_23
  5500  0E2F  2E31               	goto	u258_24
  5501  0E30                     u258_23:	
  5502  0E30  07F8               	addwf	??___ftge+2,f
  5503  0E31                     u258_24:	
  5504  0E31  0876               	movf	??___ftge,w
  5505  0E32  00F3               	movwf	___ftge@ff2
  5506  0E33  0877               	movf	??___ftge+1,w
  5507  0E34  00F4               	movwf	___ftge@ff2+1
  5508  0E35  0878               	movf	??___ftge+2,w
  5509  0E36  00F5               	movwf	___ftge@ff2+2
  5510  0E37                     i1l2151:	
  5511  0E37  3080               	movlw	128
  5512  0E38  06F2               	xorwf	___ftge@ff1+2,f
  5513  0E39  3080               	movlw	128
  5514  0E3A  06F5               	xorwf	___ftge@ff2+2,f
  5515  0E3B  0875               	movf	___ftge@ff2+2,w
  5516  0E3C  0272               	subwf	___ftge@ff1+2,w
  5517  0E3D  1D03               	skipz
  5518  0E3E  0008               	return
  5519  0E3F  0874               	movf	___ftge@ff2+1,w
  5520  0E40  0271               	subwf	___ftge@ff1+1,w
  5521  0E41  1D03               	skipz
  5522  0E42  0008               	return
  5523  0E43  0873               	movf	___ftge@ff2,w
  5524  0E44  0270               	subwf	___ftge@ff1,w
  5525  0E45  0008               	return
  5526  0E46                     __end_of___ftge:	
  5527                           
  5528                           	psect	text27
  5529  0A54                     __ptext27:	
  5530 ;; *************** function ___awtoft *****************
  5531 ;; Defined at:
  5532 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  c               2    8[COMMON] int 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  sign            1   13[COMMON] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  3    8[COMMON] float 
  5539 ;; Registers used:
  5540 ;;		wreg, status,2, status,0, pclath, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5546 ;;      Params:         3       0       0       0       0
  5547 ;;      Locals:         1       0       0       0       0
  5548 ;;      Temps:          2       0       0       0       0
  5549 ;;      Totals:         6       0       0       0       0
  5550 ;;Total ram usage:        6 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    1
  5553 ;; This function calls:
  5554 ;;		___ftpack
  5555 ;; This function is called by:
  5556 ;;		_sendSerial
  5557 ;;		_ISR
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function ___awtoft
  5563  0A54                     ___awtoft:	
  5564                           
  5565                           ;incstack = 0
  5566 ;; hardware stack exceeded
  5567                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5568  0A54  01FD               	clrf	___awtoft@sign
  5569  0A55  1FF9               	btfss	___awtoft@c+1,7
  5570  0A56  2A5E               	goto	i1l2403
  5571  0A57  09F8               	comf	___awtoft@c,f
  5572  0A58  09F9               	comf	___awtoft@c+1,f
  5573  0A59  0AF8               	incf	___awtoft@c,f
  5574  0A5A  1903               	skipnz
  5575  0A5B  0AF9               	incf	___awtoft@c+1,f
  5576  0A5C  01FD               	clrf	___awtoft@sign
  5577  0A5D  0AFD               	incf	___awtoft@sign,f
  5578  0A5E                     i1l2403:	
  5579  0A5E  0878               	movf	___awtoft@c,w
  5580  0A5F  00F0               	movwf	___ftpack@arg
  5581  0A60  0879               	movf	___awtoft@c+1,w
  5582  0A61  00F1               	movwf	___ftpack@arg+1
  5583  0A62  01F2               	clrf	___ftpack@arg+2
  5584  0A63  308E               	movlw	142
  5585  0A64  00FB               	movwf	??___awtoft
  5586  0A65  087B               	movf	??___awtoft,w
  5587  0A66  00F3               	movwf	___ftpack@exp
  5588  0A67  087D               	movf	___awtoft@sign,w
  5589  0A68  00FC               	movwf	??___awtoft+1
  5590  0A69  087C               	movf	??___awtoft+1,w
  5591  0A6A  00F4               	movwf	___ftpack@sign
  5592  0A6B  120A  158A  270A   	fcall	___ftpack
  5593  0A6E  0870               	movf	?___ftpack,w
  5594  0A6F  00F8               	movwf	?___awtoft
  5595  0A70  0871               	movf	?___ftpack+1,w
  5596  0A71  00F9               	movwf	?___awtoft+1
  5597  0A72  0872               	movf	?___ftpack+2,w
  5598  0A73  00FA               	movwf	?___awtoft+2
  5599  0A74  0008               	return
  5600  0A75                     __end_of___awtoft:	
  5601                           
  5602                           	psect	text28
  5603  063F                     __ptext28:	
  5604 ;; *************** function ___ftdiv *****************
  5605 ;; Defined at:
  5606 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  f2              3   16[BANK0 ] float 
  5609 ;;  f1              3   19[BANK0 ] float 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  f3              3   27[BANK0 ] float 
  5612 ;;  sign            1   31[BANK0 ] unsigned char 
  5613 ;;  exp             1   30[BANK0 ] unsigned char 
  5614 ;;  cntr            1   26[BANK0 ] unsigned char 
  5615 ;; Return value:  Size  Location     Type
  5616 ;;                  3   16[BANK0 ] float 
  5617 ;; Registers used:
  5618 ;;		wreg, status,2, status,0, pclath, cstack
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5624 ;;      Params:         0       6       0       0       0
  5625 ;;      Locals:         0       6       0       0       0
  5626 ;;      Temps:          0       4       0       0       0
  5627 ;;      Totals:         0      16       0       0       0
  5628 ;;Total ram usage:       16 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    1
  5631 ;; This function calls:
  5632 ;;		___ftpack
  5633 ;; This function is called by:
  5634 ;;		_ISR
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           
  5639                           ;psect for function ___ftdiv
  5640  063F                     ___ftdiv:	
  5641                           
  5642                           ;incstack = 0
  5643 ;; hardware stack exceeded
  5644                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5645  063F  1283               	bcf	3,5	;RP0=0, select bank0
  5646  0640  1303               	bcf	3,6	;RP1=0, select bank0
  5647  0641  0833               	movf	___ftdiv@f1,w
  5648  0642  00B6               	movwf	??___ftdiv
  5649  0643  0834               	movf	___ftdiv@f1+1,w
  5650  0644  00B7               	movwf	??___ftdiv+1
  5651  0645  0835               	movf	___ftdiv@f1+2,w
  5652  0646  00B8               	movwf	??___ftdiv+2
  5653  0647  1003               	clrc
  5654  0648  0D37               	rlf	??___ftdiv+1,w
  5655  0649  0D38               	rlf	??___ftdiv+2,w
  5656  064A  00B9               	movwf	??___ftdiv+3
  5657  064B  0839               	movf	??___ftdiv+3,w
  5658  064C  00BE               	movwf	___ftdiv@exp
  5659  064D  08BE               	movf	___ftdiv@exp,f
  5660  064E  1D03               	skipz
  5661  064F  2E57               	goto	i1l2543
  5662  0650  3000               	movlw	0
  5663  0651  00B0               	movwf	?___ftdiv
  5664  0652  3000               	movlw	0
  5665  0653  00B1               	movwf	?___ftdiv+1
  5666  0654  3000               	movlw	0
  5667  0655  00B2               	movwf	?___ftdiv+2
  5668  0656  0008               	return
  5669  0657                     i1l2543:	
  5670  0657  0830               	movf	___ftdiv@f2,w
  5671  0658  00B6               	movwf	??___ftdiv
  5672  0659  0831               	movf	___ftdiv@f2+1,w
  5673  065A  00B7               	movwf	??___ftdiv+1
  5674  065B  0832               	movf	___ftdiv@f2+2,w
  5675  065C  00B8               	movwf	??___ftdiv+2
  5676  065D  1003               	clrc
  5677  065E  0D37               	rlf	??___ftdiv+1,w
  5678  065F  0D38               	rlf	??___ftdiv+2,w
  5679  0660  00B9               	movwf	??___ftdiv+3
  5680  0661  0839               	movf	??___ftdiv+3,w
  5681  0662  00BF               	movwf	___ftdiv@sign
  5682  0663  08BF               	movf	___ftdiv@sign,f
  5683  0664  1D03               	skipz
  5684  0665  2E6D               	goto	i1l2549
  5685  0666  3000               	movlw	0
  5686  0667  00B0               	movwf	?___ftdiv
  5687  0668  3000               	movlw	0
  5688  0669  00B1               	movwf	?___ftdiv+1
  5689  066A  3000               	movlw	0
  5690  066B  00B2               	movwf	?___ftdiv+2
  5691  066C  0008               	return
  5692  066D                     i1l2549:	
  5693  066D  3000               	movlw	0
  5694  066E  00BB               	movwf	___ftdiv@f3
  5695  066F  3000               	movlw	0
  5696  0670  00BC               	movwf	___ftdiv@f3+1
  5697  0671  3000               	movlw	0
  5698  0672  00BD               	movwf	___ftdiv@f3+2
  5699  0673  3089               	movlw	137
  5700  0674  073F               	addwf	___ftdiv@sign,w
  5701  0675  00B6               	movwf	??___ftdiv
  5702  0676  0836               	movf	??___ftdiv,w
  5703  0677  02BE               	subwf	___ftdiv@exp,f
  5704  0678  0833               	movf	___ftdiv@f1,w
  5705  0679  00B6               	movwf	??___ftdiv
  5706  067A  0834               	movf	___ftdiv@f1+1,w
  5707  067B  00B7               	movwf	??___ftdiv+1
  5708  067C  0835               	movf	___ftdiv@f1+2,w
  5709  067D  00B8               	movwf	??___ftdiv+2
  5710  067E  3010               	movlw	16
  5711  067F                     u312_25:	
  5712  067F  1003               	clrc
  5713  0680  0CB8               	rrf	??___ftdiv+2,f
  5714  0681  0CB7               	rrf	??___ftdiv+1,f
  5715  0682  0CB6               	rrf	??___ftdiv,f
  5716  0683  3EFF               	addlw	-1
  5717  0684  1D03               	skipz
  5718  0685  2E7F               	goto	u312_25
  5719  0686  0836               	movf	??___ftdiv,w
  5720  0687  00B9               	movwf	??___ftdiv+3
  5721  0688  0839               	movf	??___ftdiv+3,w
  5722  0689  00BF               	movwf	___ftdiv@sign
  5723  068A  0830               	movf	___ftdiv@f2,w
  5724  068B  00B6               	movwf	??___ftdiv
  5725  068C  0831               	movf	___ftdiv@f2+1,w
  5726  068D  00B7               	movwf	??___ftdiv+1
  5727  068E  0832               	movf	___ftdiv@f2+2,w
  5728  068F  00B8               	movwf	??___ftdiv+2
  5729  0690  3010               	movlw	16
  5730  0691                     u313_25:	
  5731  0691  1003               	clrc
  5732  0692  0CB8               	rrf	??___ftdiv+2,f
  5733  0693  0CB7               	rrf	??___ftdiv+1,f
  5734  0694  0CB6               	rrf	??___ftdiv,f
  5735  0695  3EFF               	addlw	-1
  5736  0696  1D03               	skipz
  5737  0697  2E91               	goto	u313_25
  5738  0698  0836               	movf	??___ftdiv,w
  5739  0699  00B9               	movwf	??___ftdiv+3
  5740  069A  0839               	movf	??___ftdiv+3,w
  5741  069B  06BF               	xorwf	___ftdiv@sign,f
  5742  069C  3080               	movlw	128
  5743  069D  00B6               	movwf	??___ftdiv
  5744  069E  0836               	movf	??___ftdiv,w
  5745  069F  05BF               	andwf	___ftdiv@sign,f
  5746  06A0  17B4               	bsf	___ftdiv@f1+1,7
  5747  06A1  30FF               	movlw	255
  5748  06A2  05B3               	andwf	___ftdiv@f1,f
  5749  06A3  30FF               	movlw	255
  5750  06A4  05B4               	andwf	___ftdiv@f1+1,f
  5751  06A5  3000               	movlw	0
  5752  06A6  05B5               	andwf	___ftdiv@f1+2,f
  5753  06A7  17B1               	bsf	___ftdiv@f2+1,7
  5754  06A8  30FF               	movlw	255
  5755  06A9  05B0               	andwf	___ftdiv@f2,f
  5756  06AA  30FF               	movlw	255
  5757  06AB  05B1               	andwf	___ftdiv@f2+1,f
  5758  06AC  3000               	movlw	0
  5759  06AD  05B2               	andwf	___ftdiv@f2+2,f
  5760  06AE  3018               	movlw	24
  5761  06AF  00B6               	movwf	??___ftdiv
  5762  06B0  0836               	movf	??___ftdiv,w
  5763  06B1  00BA               	movwf	___ftdiv@cntr
  5764  06B2                     i1l2563:	
  5765  06B2  3001               	movlw	1
  5766  06B3                     u314_25:	
  5767  06B3  1003               	clrc
  5768  06B4  0DBB               	rlf	___ftdiv@f3,f
  5769  06B5  0DBC               	rlf	___ftdiv@f3+1,f
  5770  06B6  0DBD               	rlf	___ftdiv@f3+2,f
  5771  06B7  3EFF               	addlw	-1
  5772  06B8  1D03               	skipz
  5773  06B9  2EB3               	goto	u314_25
  5774  06BA  0832               	movf	___ftdiv@f2+2,w
  5775  06BB  0235               	subwf	___ftdiv@f1+2,w
  5776  06BC  1D03               	skipz
  5777  06BD  2EC4               	goto	u315_25
  5778  06BE  0831               	movf	___ftdiv@f2+1,w
  5779  06BF  0234               	subwf	___ftdiv@f1+1,w
  5780  06C0  1D03               	skipz
  5781  06C1  2EC4               	goto	u315_25
  5782  06C2  0830               	movf	___ftdiv@f2,w
  5783  06C3  0233               	subwf	___ftdiv@f1,w
  5784  06C4                     u315_25:	
  5785  06C4  1C03               	skipc
  5786  06C5  2ED1               	goto	i1l2571
  5787  06C6  0830               	movf	___ftdiv@f2,w
  5788  06C7  02B3               	subwf	___ftdiv@f1,f
  5789  06C8  0831               	movf	___ftdiv@f2+1,w
  5790  06C9  1C03               	skipc
  5791  06CA  0F31               	incfsz	___ftdiv@f2+1,w
  5792  06CB  02B4               	subwf	___ftdiv@f1+1,f
  5793  06CC  0832               	movf	___ftdiv@f2+2,w
  5794  06CD  1C03               	skipc
  5795  06CE  0A32               	incf	___ftdiv@f2+2,w
  5796  06CF  02B5               	subwf	___ftdiv@f1+2,f
  5797  06D0  143B               	bsf	___ftdiv@f3,0
  5798  06D1                     i1l2571:	
  5799  06D1  3001               	movlw	1
  5800  06D2                     u316_25:	
  5801  06D2  1003               	clrc
  5802  06D3  0DB3               	rlf	___ftdiv@f1,f
  5803  06D4  0DB4               	rlf	___ftdiv@f1+1,f
  5804  06D5  0DB5               	rlf	___ftdiv@f1+2,f
  5805  06D6  3EFF               	addlw	-1
  5806  06D7  1D03               	skipz
  5807  06D8  2ED2               	goto	u316_25
  5808  06D9  3001               	movlw	1
  5809  06DA  02BA               	subwf	___ftdiv@cntr,f
  5810  06DB  1D03               	btfss	3,2
  5811  06DC  2EB2               	goto	i1l2563
  5812  06DD  083B               	movf	___ftdiv@f3,w
  5813  06DE  00F0               	movwf	___ftpack@arg
  5814  06DF  083C               	movf	___ftdiv@f3+1,w
  5815  06E0  00F1               	movwf	___ftpack@arg+1
  5816  06E1  083D               	movf	___ftdiv@f3+2,w
  5817  06E2  00F2               	movwf	___ftpack@arg+2
  5818  06E3  083E               	movf	___ftdiv@exp,w
  5819  06E4  00B6               	movwf	??___ftdiv
  5820  06E5  0836               	movf	??___ftdiv,w
  5821  06E6  00F3               	movwf	___ftpack@exp
  5822  06E7  083F               	movf	___ftdiv@sign,w
  5823  06E8  00B7               	movwf	??___ftdiv+1
  5824  06E9  0837               	movf	??___ftdiv+1,w
  5825  06EA  00F4               	movwf	___ftpack@sign
  5826  06EB  120A  158A  270A   	fcall	___ftpack
  5827  06EE  0870               	movf	?___ftpack,w
  5828  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  5829  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  5830  06F1  00B0               	movwf	?___ftdiv
  5831  06F2  0871               	movf	?___ftpack+1,w
  5832  06F3  00B1               	movwf	?___ftdiv+1
  5833  06F4  0872               	movf	?___ftpack+2,w
  5834  06F5  00B2               	movwf	?___ftdiv+2
  5835  06F6  0008               	return
  5836  06F7                     __end_of___ftdiv:	
  5837                           
  5838                           	psect	text29
  5839  0F0A                     __ptext29:	
  5840 ;; *************** function ___ftpack *****************
  5841 ;; Defined at:
  5842 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  arg             3    0[COMMON] unsigned um
  5845 ;;  exp             1    3[COMMON] unsigned char 
  5846 ;;  sign            1    4[COMMON] unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  3    0[COMMON] float 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5858 ;;      Params:         5       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0
  5860 ;;      Temps:          3       0       0       0       0
  5861 ;;      Totals:         8       0       0       0       0
  5862 ;;Total ram usage:        8 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; This function calls:
  5865 ;;		Nothing
  5866 ;; This function is called by:
  5867 ;;		___awtoft
  5868 ;;		___ftadd
  5869 ;;		___ftdiv
  5870 ;;		___ftmul
  5871 ;;		___lltoft
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           
  5876                           ;psect for function ___ftpack
  5877  0F0A                     ___ftpack:	
  5878                           
  5879                           ;incstack = 0
  5880 ;; hardware stack exceeded
  5881                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5882  0F0A  0873               	movf	___ftpack@exp,w
  5883  0F0B  1903               	btfsc	3,2
  5884  0F0C  2F12               	goto	i1l1817
  5885  0F0D  0872               	movf	___ftpack@arg+2,w
  5886  0F0E  0471               	iorwf	___ftpack@arg+1,w
  5887  0F0F  0470               	iorwf	___ftpack@arg,w
  5888  0F10  1D03               	skipz
  5889  0F11  2F25               	goto	i1l1823
  5890  0F12                     i1l1817:	
  5891  0F12  3000               	movlw	0
  5892  0F13  00F0               	movwf	?___ftpack
  5893  0F14  3000               	movlw	0
  5894  0F15  00F1               	movwf	?___ftpack+1
  5895  0F16  3000               	movlw	0
  5896  0F17  00F2               	movwf	?___ftpack+2
  5897  0F18  0008               	return
  5898  0F19                     i1l1821:	
  5899  0F19  3001               	movlw	1
  5900  0F1A  00F5               	movwf	??___ftpack
  5901  0F1B  0875               	movf	??___ftpack,w
  5902  0F1C  07F3               	addwf	___ftpack@exp,f
  5903  0F1D  3001               	movlw	1
  5904  0F1E                     u177_25:	
  5905  0F1E  1003               	clrc
  5906  0F1F  0CF2               	rrf	___ftpack@arg+2,f
  5907  0F20  0CF1               	rrf	___ftpack@arg+1,f
  5908  0F21  0CF0               	rrf	___ftpack@arg,f
  5909  0F22  3EFF               	addlw	-1
  5910  0F23  1D03               	skipz
  5911  0F24  2F1E               	goto	u177_25
  5912  0F25                     i1l1823:	
  5913  0F25  30FE               	movlw	254
  5914  0F26  0572               	andwf	___ftpack@arg+2,w
  5915  0F27  1903               	btfsc	3,2
  5916  0F28  2F40               	goto	i1l524
  5917  0F29  2F19               	goto	i1l1821
  5918  0F2A                     i1l1825:	
  5919  0F2A  3001               	movlw	1
  5920  0F2B  00F5               	movwf	??___ftpack
  5921  0F2C  0875               	movf	??___ftpack,w
  5922  0F2D  07F3               	addwf	___ftpack@exp,f
  5923  0F2E  3001               	movlw	1
  5924  0F2F  07F0               	addwf	___ftpack@arg,f
  5925  0F30  3000               	movlw	0
  5926  0F31  1803               	skipnc
  5927  0F32  3001               	movlw	1
  5928  0F33  07F1               	addwf	___ftpack@arg+1,f
  5929  0F34  3000               	movlw	0
  5930  0F35  1803               	skipnc
  5931  0F36  3001               	movlw	1
  5932  0F37  07F2               	addwf	___ftpack@arg+2,f
  5933  0F38  3001               	movlw	1
  5934  0F39                     u179_25:	
  5935  0F39  1003               	clrc
  5936  0F3A  0CF2               	rrf	___ftpack@arg+2,f
  5937  0F3B  0CF1               	rrf	___ftpack@arg+1,f
  5938  0F3C  0CF0               	rrf	___ftpack@arg,f
  5939  0F3D  3EFF               	addlw	-1
  5940  0F3E  1D03               	skipz
  5941  0F3F  2F39               	goto	u179_25
  5942  0F40                     i1l524:	
  5943  0F40  30FF               	movlw	255
  5944  0F41  0572               	andwf	___ftpack@arg+2,w
  5945  0F42  1903               	btfsc	3,2
  5946  0F43  2F4F               	goto	i1l1833
  5947  0F44  2F2A               	goto	i1l1825
  5948  0F45                     i1l1831:	
  5949  0F45  3001               	movlw	1
  5950  0F46  02F3               	subwf	___ftpack@exp,f
  5951  0F47  3001               	movlw	1
  5952  0F48                     u181_25:	
  5953  0F48  1003               	clrc
  5954  0F49  0DF0               	rlf	___ftpack@arg,f
  5955  0F4A  0DF1               	rlf	___ftpack@arg+1,f
  5956  0F4B  0DF2               	rlf	___ftpack@arg+2,f
  5957  0F4C  3EFF               	addlw	-1
  5958  0F4D  1D03               	skipz
  5959  0F4E  2F48               	goto	u181_25
  5960  0F4F                     i1l1833:	
  5961  0F4F  1FF1               	btfss	___ftpack@arg+1,7
  5962  0F50  2F45               	goto	i1l1831
  5963  0F51  1873               	btfsc	___ftpack@exp,0
  5964  0F52  2F59               	goto	i1l530
  5965  0F53  30FF               	movlw	255
  5966  0F54  05F0               	andwf	___ftpack@arg,f
  5967  0F55  307F               	movlw	127
  5968  0F56  05F1               	andwf	___ftpack@arg+1,f
  5969  0F57  30FF               	movlw	255
  5970  0F58  05F2               	andwf	___ftpack@arg+2,f
  5971  0F59                     i1l530:	
  5972  0F59  1003               	clrc
  5973  0F5A  0CF3               	rrf	___ftpack@exp,f
  5974  0F5B  0873               	movf	___ftpack@exp,w
  5975  0F5C  00F5               	movwf	??___ftpack
  5976  0F5D  01F6               	clrf	??___ftpack+1
  5977  0F5E  01F7               	clrf	??___ftpack+2
  5978  0F5F  3010               	movlw	16
  5979  0F60                     u184_25:	
  5980  0F60  1003               	clrc
  5981  0F61  0DF5               	rlf	??___ftpack,f
  5982  0F62  0DF6               	rlf	??___ftpack+1,f
  5983  0F63  0DF7               	rlf	??___ftpack+2,f
  5984  0F64  3EFF               	addlw	-1
  5985  0F65  1D03               	skipz
  5986  0F66  2F60               	goto	u184_25
  5987  0F67  0875               	movf	??___ftpack,w
  5988  0F68  04F0               	iorwf	___ftpack@arg,f
  5989  0F69  0876               	movf	??___ftpack+1,w
  5990  0F6A  04F1               	iorwf	___ftpack@arg+1,f
  5991  0F6B  0877               	movf	??___ftpack+2,w
  5992  0F6C  04F2               	iorwf	___ftpack@arg+2,f
  5993  0F6D  0874               	movf	___ftpack@sign,w
  5994  0F6E  1903               	btfsc	3,2
  5995  0F6F  0008               	return
  5996  0F70  17F2               	bsf	___ftpack@arg+2,7
  5997  0F71  0008               	return
  5998  0F72                     __end_of___ftpack:	
  5999                           
  6000                           	psect	text30
  6001  09AF                     __ptext30:	
  6002 ;; *************** function _USARTReceiveChar *****************
  6003 ;; Defined at:
  6004 ;;		line 91 in file "main.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;		None
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  USARTData       1    4[COMMON] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6018 ;;      Params:         0       0       0       0       0
  6019 ;;      Locals:         1       0       0       0       0
  6020 ;;      Temps:          1       0       0       0       0
  6021 ;;      Totals:         2       0       0       0       0
  6022 ;;Total ram usage:        2 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    2
  6025 ;; This function calls:
  6026 ;;		_USARTWriteString
  6027 ;; This function is called by:
  6028 ;;		_ISR
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function _USARTReceiveChar
  6034  09AF                     _USARTReceiveChar:	
  6035                           
  6036                           ;main.c: 92: unsigned char USARTData;
  6037                           ;main.c: 94: if (!OERR)
  6038                           
  6039                           ;incstack = 0
  6040 ;; hardware stack exceeded
  6041                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6042  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  6043  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  6044  09B1  1898               	btfsc	24,1	;volatile
  6045  09B2  29B8               	goto	i1l2421
  6046                           
  6047                           ;main.c: 95: {
  6048                           ;main.c: 96: USARTData = RCREG;
  6049  09B3  081A               	movf	26,w	;volatile
  6050  09B4  00F3               	movwf	??_USARTReceiveChar
  6051  09B5  0873               	movf	??_USARTReceiveChar,w
  6052  09B6  00F4               	movwf	USARTReceiveChar@USARTData
  6053  09B7  29C4               	goto	i1l2429
  6054  09B8                     i1l2421:	
  6055                           ;main.c: 98: } else {
  6056                           
  6057                           ;main.c: 97: PIR1bits.RCIF = 0;
  6058                           
  6059                           
  6060                           ;main.c: 99: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  6061  09B8  3031               	movlw	(STR_1-__stringbase)& (0+255)
  6062  09B9  120A  158A  21E1   	fcall	_USARTWriteString
  6063                           
  6064                           ;main.c: 101: RCSTAbits.CREN = 0;
  6065  09BC  1283               	bcf	3,5	;RP0=0, select bank0
  6066  09BD  1303               	bcf	3,6	;RP1=0, select bank0
  6067  09BE  1218               	bcf	24,4	;volatile
  6068                           
  6069                           ;main.c: 102: USARTData = RCREG;
  6070  09BF  081A               	movf	26,w	;volatile
  6071  09C0  00F3               	movwf	??_USARTReceiveChar
  6072  09C1  0873               	movf	??_USARTReceiveChar,w
  6073  09C2  00F4               	movwf	USARTReceiveChar@USARTData
  6074                           
  6075                           ;main.c: 103: RCSTAbits.CREN = 1;
  6076  09C3  1618               	bsf	24,4	;volatile
  6077  09C4                     i1l2429:	
  6078                           
  6079                           ;main.c: 104: PIR1bits.RCIF = 0;
  6080  09C4  128C               	bcf	12,5	;volatile
  6081                           
  6082                           ;main.c: 105: }
  6083                           ;main.c: 106: return (USARTData);
  6084  09C5  0874               	movf	USARTReceiveChar@USARTData,w
  6085  09C6  0008               	return
  6086  09C7                     __end_of_USARTReceiveChar:	
  6087                           
  6088                           	psect	text31
  6089  0CF6                     __ptext31:	
  6090 ;; *************** function _ProgressBar *****************
  6091 ;; Defined at:
  6092 ;;		line 182 in file "main.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  preint          2    0[BANK0 ] int 
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;  aux            16    6[BANK0 ] unsigned char [16]
  6097 ;;  i               2   22[BANK0 ] int 
  6098 ;;  result          1   24[BANK0 ] PTR unsigned char 
  6099 ;;		 -> ProgressBar@aux(16), 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;		None               void
  6102 ;; Registers used:
  6103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6109 ;;      Params:         0       2       0       0       0
  6110 ;;      Locals:         0      19       0       0       0
  6111 ;;      Temps:          0       4       0       0       0
  6112 ;;      Totals:         0      25       0       0       0
  6113 ;;Total ram usage:       25 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    5
  6116 ;; This function calls:
  6117 ;;		i1_lcd_escreve_string
  6118 ;; This function is called by:
  6119 ;;		_ISR
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function _ProgressBar
  6125  0CF6                     _ProgressBar:	
  6126                           
  6127                           ;main.c: 183: int i = 0;
  6128                           
  6129                           ;incstack = 0
  6130 ;; hardware stack exceeded
  6131                           ; Regs used in _ProgressBar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6132  0CF6  1283               	bcf	3,5	;RP0=0, select bank0
  6133  0CF7  1303               	bcf	3,6	;RP1=0, select bank0
  6134  0CF8  01B6               	clrf	ProgressBar@i
  6135  0CF9  01B7               	clrf	ProgressBar@i+1
  6136                           
  6137                           ;main.c: 184: unsigned char *result;
  6138                           ;main.c: 185: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  6139  0CFA  3026               	movlw	ProgressBar@aux& (0+255)
  6140  0CFB  0084               	movwf	4
  6141  0CFC  30CE               	movlw	low ProgressBar@F1338
  6142  0CFD  00A2               	movwf	??_ProgressBar
  6143  0CFE  0804               	movf	4,w
  6144  0CFF  00A3               	movwf	??_ProgressBar+1
  6145  0D00  3010               	movlw	16
  6146  0D01  00A4               	movwf	??_ProgressBar+2
  6147  0D02                     u303_20:	
  6148  0D02  0822               	movf	??_ProgressBar,w
  6149  0D03  0084               	movwf	4
  6150  0D04  1383               	bcf	3,7	;select IRP bank1
  6151  0D05  0800               	movf	0,w
  6152  0D06  00A5               	movwf	??_ProgressBar+3
  6153  0D07  0AA2               	incf	??_ProgressBar,f
  6154  0D08  0823               	movf	??_ProgressBar+1,w
  6155  0D09  0084               	movwf	4
  6156  0D0A  0825               	movf	??_ProgressBar+3,w
  6157  0D0B  0080               	movwf	0
  6158  0D0C  0AA3               	incf	??_ProgressBar+1,f
  6159  0D0D  0BA4               	decfsz	??_ProgressBar+2,f
  6160  0D0E  2D02               	goto	u303_20
  6161  0D0F                     i1l2459:	
  6162                           ;main.c: 188: while (preint >= 0) {
  6163                           
  6164  0D0F  1BA1               	btfsc	ProgressBar@preint+1,7
  6165  0D10  2D25               	goto	i1l2461
  6166                           
  6167                           ;main.c: 189: aux[i] = 0xFF;
  6168  0D11  30FF               	movlw	255
  6169  0D12  00A2               	movwf	??_ProgressBar
  6170  0D13  0836               	movf	ProgressBar@i,w
  6171  0D14  3E26               	addlw	ProgressBar@aux& (0+255)
  6172  0D15  0084               	movwf	4
  6173  0D16  0822               	movf	??_ProgressBar,w
  6174  0D17  0080               	movwf	0
  6175                           
  6176                           ;main.c: 190: preint--;
  6177  0D18  30FF               	movlw	255
  6178  0D19  07A0               	addwf	ProgressBar@preint,f
  6179  0D1A  1803               	skipnc
  6180  0D1B  0AA1               	incf	ProgressBar@preint+1,f
  6181  0D1C  30FF               	movlw	255
  6182  0D1D  07A1               	addwf	ProgressBar@preint+1,f
  6183                           
  6184                           ;main.c: 191: i++;
  6185  0D1E  3001               	movlw	1
  6186  0D1F  07B6               	addwf	ProgressBar@i,f
  6187  0D20  1803               	skipnc
  6188  0D21  0AB7               	incf	ProgressBar@i+1,f
  6189  0D22  3000               	movlw	0
  6190  0D23  07B7               	addwf	ProgressBar@i+1,f
  6191  0D24  2D0F               	goto	i1l2459
  6192  0D25                     i1l2461:	
  6193                           
  6194                           ;main.c: 192: }
  6195                           ;main.c: 193: result = &aux;
  6196  0D25  3026               	movlw	ProgressBar@aux& (0+255)
  6197  0D26  00A2               	movwf	??_ProgressBar
  6198  0D27  0822               	movf	??_ProgressBar,w
  6199  0D28  00B8               	movwf	ProgressBar@result
  6200                           
  6201                           ;main.c: 195: lcd_escreve_string(result);
  6202  0D29  0838               	movf	ProgressBar@result,w
  6203  0D2A  00FC               	movwf	i1lcd_escreve_string@y
  6204  0D2B  3000               	movlw	0
  6205  0D2C  00FD               	movwf	i1lcd_escreve_string@y+1
  6206  0D2D  120A  158A  2275  120A  158A  	fcall	i1_lcd_escreve_string
  6207                           
  6208                           ;main.c: 196: _delay((unsigned long)((200)*(20000000/4000.0)));
  6209  0D32  3006               	movlw	6
  6210  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  6211  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  6212  0D35  00A4               	movwf	??_ProgressBar+2
  6213  0D36  3013               	movlw	19
  6214  0D37  00A3               	movwf	??_ProgressBar+1
  6215  0D38  30B1               	movlw	177
  6216  0D39  00A2               	movwf	??_ProgressBar
  6217  0D3A                     u356_27:	
  6218  0D3A  0BA2               	decfsz	??_ProgressBar,f
  6219  0D3B  2D3A               	goto	u356_27
  6220  0D3C  0BA3               	decfsz	??_ProgressBar+1,f
  6221  0D3D  2D3A               	goto	u356_27
  6222  0D3E  0BA4               	decfsz	??_ProgressBar+2,f
  6223  0D3F  2D3A               	goto	u356_27
  6224  0D40  2D41               	nop2
  6225  0D41  0008               	return
  6226  0D42                     __end_of_ProgressBar:	
  6227                           
  6228                           	psect	text32
  6229  0A75                     __ptext32:	
  6230 ;; *************** function i1_lcd_escreve_string *****************
  6231 ;; Defined at:
  6232 ;;		line 168 in file "lcd_4bit.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  y               2   12[COMMON] PTR const unsigned char 
  6235 ;;		 -> ftoa@buf(17), STR_4(16), STR_3(2), STR_2(7), 
  6236 ;;		 -> ProgressBar@aux(16), 
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;		None               void
  6241 ;; Registers used:
  6242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6248 ;;      Params:         2       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       0
  6251 ;;      Totals:         2       0       0       0       0
  6252 ;;Total ram usage:        2 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    4
  6255 ;; This function calls:
  6256 ;;		i1_lcd_putc
  6257 ;; This function is called by:
  6258 ;;		_ProgressBar
  6259 ;;		_ISR
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           
  6264                           ;psect for function i1_lcd_escreve_string
  6265  0A75                     i1_lcd_escreve_string:	
  6266  0A75                     i1l2413:	
  6267                           ;lcd_4bit.c: 170: while(*y!='\0')
  6268                           
  6269                           ;incstack = 0
  6270 ;; hardware stack exceeded
  6271                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  6272                           
  6273  0A75  087D               	movf	i1lcd_escreve_string@y+1,w
  6274  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  6275  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  6276  0A78  00FF               	movwf	127
  6277  0A79  087C               	movf	i1lcd_escreve_string@y,w
  6278  0A7A  0084               	movwf	4
  6279  0A7B  120A  158A  2000  120A  158A  	fcall	stringtab
  6280  0A80  3800               	iorlw	0
  6281  0A81  1903               	btfsc	3,2
  6282  0A82  0008               	return
  6283                           
  6284                           ;lcd_4bit.c: 171: {
  6285                           ;lcd_4bit.c: 172: lcd_putc(*y);
  6286  0A83  087D               	movf	i1lcd_escreve_string@y+1,w
  6287  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  6288  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  6289  0A86  00FF               	movwf	127
  6290  0A87  087C               	movf	i1lcd_escreve_string@y,w
  6291  0A88  0084               	movwf	4
  6292  0A89  120A  158A  2000  120A  158A  	fcall	stringtab
  6293  0A8E  120A  158A  2434  120A  158A  	fcall	i1_lcd_putc
  6294                           
  6295                           ;lcd_4bit.c: 173: y++;
  6296  0A93  3001               	movlw	1
  6297  0A94  07FC               	addwf	i1lcd_escreve_string@y,f
  6298  0A95  1803               	skipnc
  6299  0A96  0AFD               	incf	i1lcd_escreve_string@y+1,f
  6300  0A97  2A75               	goto	i1l2413
  6301  0A98                     __end_ofi1_lcd_escreve_string:	
  6302                           
  6303                           	psect	text33
  6304  0C34                     __ptext33:	
  6305 ;; *************** function i1_lcd_putc *****************
  6306 ;; Defined at:
  6307 ;;		line 82 in file "lcd_4bit.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  c               1    wreg     unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  c               1   11[COMMON] unsigned char 
  6312 ;; Return value:  Size  Location     Type
  6313 ;;		None               void
  6314 ;; Registers used:
  6315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6321 ;;      Params:         0       0       0       0       0
  6322 ;;      Locals:         1       0       0       0       0
  6323 ;;      Temps:          2       0       0       0       0
  6324 ;;      Totals:         3       0       0       0       0
  6325 ;;Total ram usage:        3 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    3
  6328 ;; This function calls:
  6329 ;;		i1_lcd_envia_byte
  6330 ;;		i1_lcd_gotoxy
  6331 ;; This function is called by:
  6332 ;;		i1_lcd_escreve_string
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function i1_lcd_putc
  6338  0C34                     i1_lcd_putc:	
  6339                           
  6340                           ;incstack = 0
  6341 ;; hardware stack exceeded
  6342                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6343                           ;i1lcd_putc@c stored from wreg
  6344  0C34  00FB               	movwf	i1lcd_putc@c
  6345                           
  6346                           ;lcd_4bit.c: 84: switch(c)
  6347  0C35  2C63               	goto	i1l2295
  6348  0C36                     i1l2283:	
  6349                           ;lcd_4bit.c: 85: {
  6350                           ;lcd_4bit.c: 86: case '\f':
  6351                           
  6352                           
  6353                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  6354  0C36  01F2               	clrf	i1lcd_envia_byte@n
  6355  0C37  0AF2               	incf	i1lcd_envia_byte@n,f
  6356  0C38  3000               	movlw	0
  6357  0C39  120A  158A  22E0  120A  158A  	fcall	i1_lcd_envia_byte
  6358                           
  6359                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  6360  0C3E  300D               	movlw	13
  6361  0C3F  00FA               	movwf	??i1_lcd_putc+1
  6362  0C40  30FB               	movlw	251
  6363  0C41  00F9               	movwf	??i1_lcd_putc
  6364  0C42                     u357_27:	
  6365  0C42  0BF9               	decfsz	??i1_lcd_putc,f
  6366  0C43  2C42               	goto	u357_27
  6367  0C44  0BFA               	decfsz	??i1_lcd_putc+1,f
  6368  0C45  2C42               	goto	u357_27
  6369  0C46  2C47               	nop2
  6370                           
  6371                           ;lcd_4bit.c: 89: break;
  6372  0C47  0008               	return
  6373  0C48                     i1l2287:	
  6374                           ;lcd_4bit.c: 91: case '\n':
  6375                           
  6376                           
  6377                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  6378  0C48  3002               	movlw	2
  6379  0C49  00F9               	movwf	??i1_lcd_putc
  6380  0C4A  0879               	movf	??i1_lcd_putc,w
  6381  0C4B  00F5               	movwf	i1lcd_gotoxy@y
  6382  0C4C  3001               	movlw	1
  6383  0C4D  120A  158A  21C7   	fcall	i1_lcd_gotoxy
  6384                           
  6385                           ;lcd_4bit.c: 93: break;
  6386  0C50  0008               	return
  6387  0C51                     i1l2289:	
  6388                           ;lcd_4bit.c: 95: case '\b':
  6389                           
  6390                           
  6391                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  6392  0C51  3010               	movlw	16
  6393  0C52  00F9               	movwf	??i1_lcd_putc
  6394  0C53  0879               	movf	??i1_lcd_putc,w
  6395  0C54  00F2               	movwf	i1lcd_envia_byte@n
  6396  0C55  3000               	movlw	0
  6397  0C56  120A  158A  22E0   	fcall	i1_lcd_envia_byte
  6398                           
  6399                           ;lcd_4bit.c: 97: break;
  6400  0C59  0008               	return
  6401  0C5A                     i1l2291:	
  6402                           ;lcd_4bit.c: 99: default:
  6403                           
  6404                           
  6405                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  6406  0C5A  087B               	movf	i1lcd_putc@c,w
  6407  0C5B  00F9               	movwf	??i1_lcd_putc
  6408  0C5C  0879               	movf	??i1_lcd_putc,w
  6409  0C5D  00F2               	movwf	i1lcd_envia_byte@n
  6410  0C5E  3001               	movlw	1
  6411  0C5F  120A  158A  22E0   	fcall	i1_lcd_envia_byte
  6412                           
  6413                           ;lcd_4bit.c: 102: }
  6414                           
  6415                           ;lcd_4bit.c: 101: break;
  6416  0C62  0008               	return
  6417  0C63                     i1l2295:	
  6418  0C63  087B               	movf	i1lcd_putc@c,w
  6419                           
  6420                           ; Switch size 1, requested type "space"
  6421                           ; Number of cases is 3, Range of values is 8 to 12
  6422                           ; switch strategies available:
  6423                           ; Name         Instructions Cycles
  6424                           ; simple_byte           10     6 (average)
  6425                           ; direct_byte           26    11 (fixed)
  6426                           ; jumptable            263     9 (fixed)
  6427                           ;	Chosen strategy is simple_byte
  6428  0C64  3A08               	xorlw	8	; case 8
  6429  0C65  1903               	skipnz
  6430  0C66  2C51               	goto	i1l2289
  6431  0C67  3A02               	xorlw	2	; case 10
  6432  0C68  1903               	skipnz
  6433  0C69  2C48               	goto	i1l2287
  6434  0C6A  3A06               	xorlw	6	; case 12
  6435  0C6B  1903               	skipnz
  6436  0C6C  2C36               	goto	i1l2283
  6437  0C6D  2C5A               	goto	i1l2291
  6438  0C6E  0008               	return
  6439  0C6F                     __end_ofi1_lcd_putc:	
  6440                           
  6441                           	psect	text34
  6442  09C7                     __ptext34:	
  6443 ;; *************** function i1_lcd_gotoxy *****************
  6444 ;; Defined at:
  6445 ;;		line 70 in file "lcd_4bit.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  x               1    wreg     unsigned char 
  6448 ;;  y               1    5[COMMON] unsigned char 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  x               1    7[COMMON] unsigned char 
  6451 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  6452 ;; Return value:  Size  Location     Type
  6453 ;;		None               void
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0, pclath, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6461 ;;      Params:         1       0       0       0       0
  6462 ;;      Locals:         2       0       0       0       0
  6463 ;;      Temps:          1       0       0       0       0
  6464 ;;      Totals:         4       0       0       0       0
  6465 ;;Total ram usage:        4 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    2
  6468 ;; This function calls:
  6469 ;;		i1_lcd_envia_byte
  6470 ;; This function is called by:
  6471 ;;		_ISR
  6472 ;;		i1_lcd_putc
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           
  6477                           ;psect for function i1_lcd_gotoxy
  6478  09C7                     i1_lcd_gotoxy:	
  6479                           
  6480                           ;incstack = 0
  6481 ;; hardware stack exceeded
  6482                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  6483                           ;i1lcd_gotoxy@x stored from wreg
  6484  09C7  00F7               	movwf	i1lcd_gotoxy@x
  6485                           
  6486                           ;lcd_4bit.c: 72: unsigned char address;
  6487                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  6488  09C8  0875               	movf	i1lcd_gotoxy@y,w
  6489  09C9  3A01               	xorlw	1
  6490  09CA  1903               	skipnz
  6491  09CB  29D1               	goto	i1l2009
  6492  09CC  3040               	movlw	64
  6493  09CD  00F6               	movwf	??i1_lcd_gotoxy
  6494  09CE  0876               	movf	??i1_lcd_gotoxy,w
  6495  09CF  00F8               	movwf	i1lcd_gotoxy@address
  6496  09D0  29D2               	goto	i1l2011
  6497  09D1                     i1l2009:	
  6498                           
  6499                           ;lcd_4bit.c: 75: else address=0;
  6500  09D1  01F8               	clrf	i1lcd_gotoxy@address
  6501  09D2                     i1l2011:	
  6502                           
  6503                           ;lcd_4bit.c: 77: address += x-1;
  6504  09D2  0877               	movf	i1lcd_gotoxy@x,w
  6505  09D3  3EFF               	addlw	255
  6506  09D4  00F6               	movwf	??i1_lcd_gotoxy
  6507  09D5  0876               	movf	??i1_lcd_gotoxy,w
  6508  09D6  07F8               	addwf	i1lcd_gotoxy@address,f
  6509                           
  6510                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  6511  09D7  0878               	movf	i1lcd_gotoxy@address,w
  6512  09D8  3880               	iorlw	128
  6513  09D9  00F6               	movwf	??i1_lcd_gotoxy
  6514  09DA  0876               	movf	??i1_lcd_gotoxy,w
  6515  09DB  00F2               	movwf	i1lcd_envia_byte@n
  6516  09DC  3000               	movlw	0
  6517  09DD  120A  158A  22E0   	fcall	i1_lcd_envia_byte
  6518  09E0  0008               	return
  6519  09E1                     __end_ofi1_lcd_gotoxy:	
  6520                           
  6521                           	psect	text35
  6522  0AE0                     __ptext35:	
  6523 ;; *************** function i1_lcd_envia_byte *****************
  6524 ;; Defined at:
  6525 ;;		line 53 in file "lcd_4bit.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  address         1    wreg     unsigned char 
  6528 ;;  n               1    2[COMMON] unsigned char 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  address         1    4[COMMON] unsigned char 
  6531 ;; Return value:  Size  Location     Type
  6532 ;;		None               void
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, pclath, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6540 ;;      Params:         1       0       0       0       0
  6541 ;;      Locals:         1       0       0       0       0
  6542 ;;      Temps:          1       0       0       0       0
  6543 ;;      Totals:         3       0       0       0       0
  6544 ;;Total ram usage:        3 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    1
  6547 ;; This function calls:
  6548 ;;		i1_lcd_envia_nibble
  6549 ;; This function is called by:
  6550 ;;		i1_lcd_gotoxy
  6551 ;;		i1_lcd_putc
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           
  6556                           ;psect for function i1_lcd_envia_byte
  6557  0AE0                     i1_lcd_envia_byte:	
  6558                           
  6559                           ;incstack = 0
  6560 ;; hardware stack exceeded
  6561                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  6562                           ;i1lcd_envia_byte@address stored from wreg
  6563  0AE0  00F4               	movwf	i1lcd_envia_byte@address
  6564                           
  6565                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  6566  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  6567  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  6568  0AE3  1286               	bcf	6,5	;volatile
  6569                           
  6570                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  6571  0AE4  3063               	movlw	99
  6572  0AE5  00F3               	movwf	??i1_lcd_envia_byte
  6573  0AE6                     u358_27:	
  6574  0AE6  0BF3               	decfsz	??i1_lcd_envia_byte,f
  6575  0AE7  2AE6               	goto	u358_27
  6576  0AE8  2AE9               	nop2	;nop
  6577                           
  6578                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  6579  0AE9  0874               	movf	i1lcd_envia_byte@address,w
  6580  0AEA  1903               	btfsc	3,2
  6581  0AEB  2AF0               	goto	i1l177
  6582  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  6583  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  6584  0AEE  1686               	bsf	6,5	;volatile
  6585  0AEF  2AF3               	goto	i1l178
  6586  0AF0                     i1l177:	
  6587                           
  6588                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  6589  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  6590  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  6591  0AF2  1286               	bcf	6,5	;volatile
  6592  0AF3                     i1l178:	
  6593                           
  6594                           ;lcd_4bit.c: 61: _delay(1);
  6595  0AF3  0000               	nop
  6596                           
  6597                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  6598  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  6599  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  6600  0AF6  1206               	bcf	6,4	;volatile
  6601                           
  6602                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  6603  0AF7  0872               	movf	i1lcd_envia_byte@n,w
  6604  0AF8  00F3               	movwf	??i1_lcd_envia_byte
  6605  0AF9  3004               	movlw	4
  6606  0AFA                     u187_25:	
  6607  0AFA  1003               	clrc
  6608  0AFB  0CF3               	rrf	??i1_lcd_envia_byte,f
  6609  0AFC  3EFF               	addlw	-1
  6610  0AFD  1D03               	skipz
  6611  0AFE  2AFA               	goto	u187_25
  6612  0AFF  0873               	movf	??i1_lcd_envia_byte,w
  6613  0B00  120A  158A  23FB  120A  158A  	fcall	i1_lcd_envia_nibble
  6614                           
  6615                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  6616  0B05  0872               	movf	i1lcd_envia_byte@n,w
  6617  0B06  390F               	andlw	15
  6618  0B07  120A  158A  23FB   	fcall	i1_lcd_envia_nibble
  6619  0B0A  0008               	return
  6620  0B0B                     __end_ofi1_lcd_envia_byte:	
  6621                           
  6622                           	psect	text36
  6623  0BFB                     __ptext36:	
  6624 ;; *************** function i1_lcd_envia_nibble *****************
  6625 ;; Defined at:
  6626 ;;		line 39 in file "lcd_4bit.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  n               1    wreg     unsigned char 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  n               1    1[COMMON] unsigned char 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6640 ;;      Params:         0       0       0       0       0
  6641 ;;      Locals:         1       0       0       0       0
  6642 ;;      Temps:          1       0       0       0       0
  6643 ;;      Totals:         2       0       0       0       0
  6644 ;;Total ram usage:        2 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; This function calls:
  6647 ;;		Nothing
  6648 ;; This function is called by:
  6649 ;;		i1_lcd_envia_byte
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function i1_lcd_envia_nibble
  6655  0BFB                     i1_lcd_envia_nibble:	
  6656                           
  6657                           ;incstack = 0
  6658 ;; hardware stack exceeded
  6659                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  6660                           ;i1lcd_envia_nibble@n stored from wreg
  6661  0BFB  00F1               	movwf	i1lcd_envia_nibble@n
  6662                           
  6663                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  6664  0BFC  3000               	movlw	0
  6665  0BFD  1871               	btfsc	i1lcd_envia_nibble@n,0
  6666  0BFE  3001               	movlw	1
  6667  0BFF  00F0               	movwf	??i1_lcd_envia_nibble
  6668  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  6669  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  6670  0C02  0806               	movf	6,w	;volatile
  6671  0C03  0670               	xorwf	??i1_lcd_envia_nibble,w
  6672  0C04  39FE               	andlw	-2
  6673  0C05  0670               	xorwf	??i1_lcd_envia_nibble,w
  6674  0C06  0086               	movwf	6	;volatile
  6675                           
  6676                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  6677  0C07  3000               	movlw	0
  6678  0C08  18F1               	btfsc	i1lcd_envia_nibble@n,1
  6679  0C09  3001               	movlw	1
  6680  0C0A  00F0               	movwf	??i1_lcd_envia_nibble
  6681  0C0B  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6682  0C0C  0806               	movf	6,w	;volatile
  6683  0C0D  0670               	xorwf	??i1_lcd_envia_nibble,w
  6684  0C0E  39FD               	andlw	-3
  6685  0C0F  0670               	xorwf	??i1_lcd_envia_nibble,w
  6686  0C10  0086               	movwf	6	;volatile
  6687                           
  6688                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  6689  0C11  3000               	movlw	0
  6690  0C12  1971               	btfsc	i1lcd_envia_nibble@n,2
  6691  0C13  3001               	movlw	1
  6692  0C14  00F0               	movwf	??i1_lcd_envia_nibble
  6693  0C15  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6694  0C16  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6695  0C17  0806               	movf	6,w	;volatile
  6696  0C18  0670               	xorwf	??i1_lcd_envia_nibble,w
  6697  0C19  39FB               	andlw	-5
  6698  0C1A  0670               	xorwf	??i1_lcd_envia_nibble,w
  6699  0C1B  0086               	movwf	6	;volatile
  6700                           
  6701                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  6702  0C1C  3000               	movlw	0
  6703  0C1D  19F1               	btfsc	i1lcd_envia_nibble@n,3
  6704  0C1E  3001               	movlw	1
  6705  0C1F  00F0               	movwf	??i1_lcd_envia_nibble
  6706  0C20  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6707  0C21  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6708  0C22  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6709  0C23  0806               	movf	6,w	;volatile
  6710  0C24  0670               	xorwf	??i1_lcd_envia_nibble,w
  6711  0C25  39F7               	andlw	-9
  6712  0C26  0670               	xorwf	??i1_lcd_envia_nibble,w
  6713  0C27  0086               	movwf	6	;volatile
  6714                           
  6715                           ;lcd_4bit.c: 46: _delay(1);
  6716  0C28  0000               	nop
  6717                           
  6718                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  6719  0C29  1283               	bcf	3,5	;RP0=0, select bank0
  6720  0C2A  1303               	bcf	3,6	;RP1=0, select bank0
  6721  0C2B  1606               	bsf	6,4	;volatile
  6722                           
  6723                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  6724  0C2C  3003               	movlw	3
  6725  0C2D  00F0               	movwf	??i1_lcd_envia_nibble
  6726  0C2E                     u359_27:	
  6727  0C2E  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  6728  0C2F  2C2E               	goto	u359_27
  6729                           
  6730                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  6731  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0C32  1206               	bcf	6,4	;volatile
  6734  0C33  0008               	return
  6735  0C34                     __end_ofi1_lcd_envia_nibble:	
  6736                           
  6737                           	psect	text37
  6738  0ABB                     __ptext37:	
  6739 ;; *************** function _Bomba *****************
  6740 ;; Defined at:
  6741 ;;		line 167 in file "main.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;		None
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;		None
  6746 ;; Return value:  Size  Location     Type
  6747 ;;		None               void
  6748 ;; Registers used:
  6749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6755 ;;      Params:         0       0       0       0       0
  6756 ;;      Locals:         0       0       0       0       0
  6757 ;;      Temps:          0       0       0       0       0
  6758 ;;      Totals:         0       0       0       0       0
  6759 ;;Total ram usage:        0 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    3
  6762 ;; This function calls:
  6763 ;;		_Ativar
  6764 ;; This function is called by:
  6765 ;;		_ISR
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           
  6770                           ;psect for function _Bomba
  6771  0ABB                     _Bomba:	
  6772                           
  6773                           ;main.c: 169: if (ADCResult < 160) {
  6774                           
  6775                           ;incstack = 0
  6776 ;; hardware stack exceeded
  6777                           ; Regs used in _Bomba: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6778  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  6779  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  6780  0ABD  086F               	movf	_ADCResult+1,w
  6781  0ABE  3A80               	xorlw	128
  6782  0ABF  00FF               	movwf	127
  6783  0AC0  3080               	movlw	128
  6784  0AC1  027F               	subwf	127,w
  6785  0AC2  1D03               	skipz
  6786  0AC3  2AC6               	goto	u301_25
  6787  0AC4  30A0               	movlw	160
  6788  0AC5  026E               	subwf	_ADCResult,w
  6789  0AC6                     u301_25:	
  6790  0AC6  1803               	skipnc
  6791  0AC7  2ACE               	goto	i1l2445
  6792                           
  6793                           ;main.c: 170: Ativar('B');
  6794  0AC8  3042               	movlw	66
  6795  0AC9  120A  158A  2393  120A  158A  	fcall	_Ativar
  6796  0ACE                     i1l2445:	
  6797                           
  6798                           ;main.c: 171: }
  6799                           ;main.c: 173: if (ADCResult > 160) {
  6800  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  6801  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  6802  0AD0  086F               	movf	_ADCResult+1,w
  6803  0AD1  3A80               	xorlw	128
  6804  0AD2  00FF               	movwf	127
  6805  0AD3  3080               	movlw	128
  6806  0AD4  027F               	subwf	127,w
  6807  0AD5  1D03               	skipz
  6808  0AD6  2AD9               	goto	u302_25
  6809  0AD7  30A1               	movlw	161
  6810  0AD8  026E               	subwf	_ADCResult,w
  6811  0AD9                     u302_25:	
  6812  0AD9  1C03               	skipc
  6813  0ADA  0008               	return
  6814                           
  6815                           ;main.c: 174: Ativar('b');
  6816  0ADB  3062               	movlw	98
  6817  0ADC  120A  158A  2393   	fcall	_Ativar
  6818  0ADF  0008               	return
  6819  0AE0                     __end_of_Bomba:	
  6820                           
  6821                           	psect	text38
  6822  0B93                     __ptext38:	
  6823 ;; *************** function _Ativar *****************
  6824 ;; Defined at:
  6825 ;;		line 146 in file "main.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  comando         1    wreg     unsigned char 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  comando         1    3[COMMON] unsigned char 
  6830 ;; Return value:  Size  Location     Type
  6831 ;;		None               void
  6832 ;; Registers used:
  6833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6839 ;;      Params:         0       0       0       0       0
  6840 ;;      Locals:         1       0       0       0       0
  6841 ;;      Temps:          0       0       0       0       0
  6842 ;;      Totals:         1       0       0       0       0
  6843 ;;Total ram usage:        1 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:    2
  6846 ;; This function calls:
  6847 ;;		_USARTWriteString
  6848 ;; This function is called by:
  6849 ;;		_Bomba
  6850 ;;		_ISR
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _Ativar
  6856  0B93                     _Ativar:	
  6857                           
  6858                           ;incstack = 0
  6859 ;; hardware stack exceeded
  6860                           ; Regs used in _Ativar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6861                           ;Ativar@comando stored from wreg
  6862  0B93  00F3               	movwf	Ativar@comando
  6863                           
  6864                           ;main.c: 147: if (comando == 'B') {
  6865  0B94  0873               	movf	Ativar@comando,w
  6866  0B95  3A42               	xorlw	66
  6867  0B96  1D03               	skipz
  6868  0B97  2BA1               	goto	i1l2305
  6869                           
  6870                           ;main.c: 148: PORTDbits.RD2 = 0;
  6871  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  6872  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  6873  0B9A  1108               	bcf	8,2	;volatile
  6874                           
  6875                           ;main.c: 149: PORTDbits.RD3 = 1;
  6876  0B9B  1588               	bsf	8,3	;volatile
  6877                           
  6878                           ;main.c: 150: USARTWriteString('B');
  6879  0B9C  3042               	movlw	66
  6880  0B9D  120A  158A  21E1   	fcall	_USARTWriteString
  6881                           
  6882                           ;main.c: 151: } else if (comando == 'b') {
  6883  0BA0  0008               	return
  6884  0BA1                     i1l2305:	
  6885  0BA1  0873               	movf	Ativar@comando,w
  6886  0BA2  3A62               	xorlw	98
  6887  0BA3  1D03               	skipz
  6888  0BA4  2BAE               	goto	i1l2311
  6889                           
  6890                           ;main.c: 152: PORTDbits.RD2 = 1;
  6891  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  6892  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  6893  0BA7  1508               	bsf	8,2	;volatile
  6894                           
  6895                           ;main.c: 153: PORTDbits.RD3 = 0;
  6896  0BA8  1188               	bcf	8,3	;volatile
  6897                           
  6898                           ;main.c: 154: USARTWriteString('b');
  6899  0BA9  3062               	movlw	98
  6900  0BAA  120A  158A  21E1   	fcall	_USARTWriteString
  6901                           
  6902                           ;main.c: 155: } else if (comando == 'M') {
  6903  0BAD  0008               	return
  6904  0BAE                     i1l2311:	
  6905  0BAE  0873               	movf	Ativar@comando,w
  6906  0BAF  3A4D               	xorlw	77
  6907  0BB0  1D03               	skipz
  6908  0BB1  2BBA               	goto	i1l2317
  6909                           
  6910                           ;main.c: 156: PORTDbits.RD4 = 1;
  6911  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  6912  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  6913  0BB4  1608               	bsf	8,4	;volatile
  6914                           
  6915                           ;main.c: 157: USARTWriteString('M');
  6916  0BB5  304D               	movlw	77
  6917  0BB6  120A  158A  21E1   	fcall	_USARTWriteString
  6918                           
  6919                           ;main.c: 158: } else if (comando == 'm') {
  6920  0BB9  0008               	return
  6921  0BBA                     i1l2317:	
  6922  0BBA  0873               	movf	Ativar@comando,w
  6923  0BBB  3A6D               	xorlw	109
  6924  0BBC  1D03               	skipz
  6925  0BBD  0008               	return
  6926                           
  6927                           ;main.c: 159: PORTDbits.RD4 = 0;
  6928  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  6929  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  6930  0BC0  1208               	bcf	8,4	;volatile
  6931                           
  6932                           ;main.c: 160: USARTWriteString('m');
  6933  0BC1  306D               	movlw	109
  6934  0BC2  120A  158A  21E1   	fcall	_USARTWriteString
  6935  0BC5  0008               	return
  6936  0BC6                     __end_of_Ativar:	
  6937                           
  6938                           	psect	text39
  6939  09E1                     __ptext39:	
  6940 ;; *************** function _USARTWriteString *****************
  6941 ;; Defined at:
  6942 ;;		line 78 in file "main.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  str             1    wreg     PTR const unsigned char 
  6945 ;;		 -> ROM(8192), STR_1(40), 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  str             1    2[COMMON] PTR const unsigned char 
  6948 ;;		 -> ROM(8192), STR_1(40), 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;		None               void
  6951 ;; Registers used:
  6952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6958 ;;      Params:         0       0       0       0       0
  6959 ;;      Locals:         1       0       0       0       0
  6960 ;;      Temps:          1       0       0       0       0
  6961 ;;      Totals:         2       0       0       0       0
  6962 ;;Total ram usage:        2 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    1
  6965 ;; This function calls:
  6966 ;;		_USARTWriteChar
  6967 ;; This function is called by:
  6968 ;;		_USARTReceiveChar
  6969 ;;		_Ativar
  6970 ;;		_sendSerial
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _USARTWriteString
  6976  09E1                     _USARTWriteString:	
  6977                           
  6978                           ;incstack = 0
  6979 ;; hardware stack exceeded
  6980                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6981                           ;USARTWriteString@str stored from wreg
  6982  09E1  00F2               	movwf	USARTWriteString@str
  6983  09E2                     i1l2021:	
  6984                           ;main.c: 80: while (*str != '\0') {
  6985                           
  6986  09E2  0872               	movf	USARTWriteString@str,w
  6987  09E3  0084               	movwf	4
  6988  09E4  120A  158A  200A  120A  158A  	fcall	stringdir
  6989  09E9  3800               	iorlw	0
  6990  09EA  1903               	btfsc	3,2
  6991  09EB  0008               	return
  6992                           
  6993                           ;main.c: 82: USARTWriteChar(*str);
  6994  09EC  0872               	movf	USARTWriteString@str,w
  6995  09ED  0084               	movwf	4
  6996  09EE  120A  158A  200A  120A  158A  	fcall	stringdir
  6997  09F3  120A  158A  2153  120A  158A  	fcall	_USARTWriteChar
  6998                           
  6999                           ;main.c: 83: str++;
  7000  09F8  3001               	movlw	1
  7001  09F9  00F1               	movwf	??_USARTWriteString
  7002  09FA  0871               	movf	??_USARTWriteString,w
  7003  09FB  07F2               	addwf	USARTWriteString@str,f
  7004  09FC  29E2               	goto	i1l2021
  7005  09FD                     __end_of_USARTWriteString:	
  7006                           
  7007                           	psect	text40
  7008  0953                     __ptext40:	
  7009 ;; *************** function _USARTWriteChar *****************
  7010 ;; Defined at:
  7011 ;;		line 69 in file "main.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  USARTData       1    wreg     unsigned char 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  USARTData       1    0[COMMON] unsigned char 
  7016 ;; Return value:  Size  Location     Type
  7017 ;;		None               void
  7018 ;; Registers used:
  7019 ;;		wreg
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7025 ;;      Params:         0       0       0       0       0
  7026 ;;      Locals:         1       0       0       0       0
  7027 ;;      Temps:          0       0       0       0       0
  7028 ;;      Totals:         1       0       0       0       0
  7029 ;;Total ram usage:        1 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; This function calls:
  7032 ;;		Nothing
  7033 ;; This function is called by:
  7034 ;;		_USARTWriteString
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           
  7039                           ;psect for function _USARTWriteChar
  7040  0953                     _USARTWriteChar:	
  7041                           
  7042                           ;incstack = 0
  7043 ;; hardware stack exceeded
  7044                           ; Regs used in _USARTWriteChar: [wreg]
  7045                           ;USARTWriteChar@USARTData stored from wreg
  7046  0953  00F0               	movwf	USARTWriteChar@USARTData
  7047  0954                     i1l68:	
  7048                           ;main.c: 70: while (!PIR1bits.TXIF);
  7049                           
  7050  0954  1283               	bcf	3,5	;RP0=0, select bank0
  7051  0955  1303               	bcf	3,6	;RP1=0, select bank0
  7052  0956  1E0C               	btfss	12,4	;volatile
  7053  0957  2954               	goto	i1l68
  7054                           
  7055                           ;main.c: 71: TXREG = USARTData;
  7056  0958  0870               	movf	USARTWriteChar@USARTData,w
  7057  0959  0099               	movwf	25	;volatile
  7058  095A  0008               	return
  7059  095B                     __end_of_USARTWriteChar:	
  7060  007E                     btemp	set	126	;btemp
  7061  007E                     wtemp	set	126
  7062  007E                     wtemp0	set	126
  7063  0080                     wtemp1	set	128
  7064  0082                     wtemp2	set	130
  7065  0084                     wtemp3	set	132
  7066  0086                     wtemp4	set	134
  7067  0088                     wtemp5	set	136
  7068  007F                     wtemp6	set	127
  7069  007E                     ttemp	set	126
  7070  007E                     ttemp0	set	126
  7071  0081                     ttemp1	set	129
  7072  0084                     ttemp2	set	132
  7073  0087                     ttemp3	set	135
  7074  007F                     ttemp4	set	127
  7075  007E                     ltemp	set	126
  7076  007E                     ltemp0	set	126
  7077  0082                     ltemp1	set	130
  7078  0086                     ltemp2	set	134
  7079  0080                     ltemp3	set	128


Data Sizes:
    Strings     76
    Constant    48
    Data        18
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      80
    BANK1            80     46      64
    BANK3            96     20      37
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status(BANK0[2]), sendSerial@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_5(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S679$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK3[17]), STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> ProgressBar@aux(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@percentual	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    ISR@bufferConversor	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sendSerial@envio	PTR const unsigned char  size(1) Largest target is 40
		 -> sendSerial@origem(BANK1[40]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sendSerial@nivelRecipiente	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    ProgressBar@result	PTR unsigned char  size(1) Largest target is 16
		 -> ProgressBar@aux(BANK0[16]), 

    USARTWriteString@str	PTR const unsigned char  size(1) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    _sendSerial->___awtoft
    _ftoa->___awtoft
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _USARTReceiveChar->_USARTWriteString
    _ProgressBar->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _Bomba->_Ativar
    _Ativar->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sendSerial
    _sendSerial->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    _ISR->_sendSerial

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_lcd_escreve_string
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3542
                                             17 BANK3      3     3      0
                            _ADCRead
                         _inicialize
                              _reset
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    3456
                                             14 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    1922
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    1661
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1     951
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0     868
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     666
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     666
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0      88
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2      86
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 22    22      0   38417
                                             56 BANK0     22    22      0
                             _Ativar
                              _Bomba
                        _ProgressBar
                   _USARTReceiveChar
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                         _sendSerial
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) _sendSerial                                          52    48      4   14801
                                             50 BANK0      6     2      4
                                              0 BANK1     46    46      0
                   _USARTWriteString
                           ___awtoft
                               _ftoa
 ---------------------------------------------------------------------------------
 (9) _ftoa                                                14    10      4   11798
                                             36 BANK0     14    10      4
                           ___awtoft (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (10) _sprintf                                            26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (11) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (10) ___lltoft                                            6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftsub                                             6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftneg                                             3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftge                                             12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2306
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     271
                                              3 COMMON     2     2      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _ProgressBar                                         25    23      2    1093
                                              0 BANK0     25    23      2
               i1_lcd_escreve_string
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Bomba                                                0     0      0     335
                             _Ativar
 ---------------------------------------------------------------------------------
 (9) _Ativar                                               1     1      0     335
                                              3 COMMON     1     1      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (9) _USARTWriteString                                     2     2      0     247
                                              1 COMMON     2     2      0
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (10) _USARTWriteChar                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble
   _reset

 _ISR (ROOT)
   _Ativar
     _USARTWriteString
       _USARTWriteChar
   _Bomba
     _Ativar
       _USARTWriteString
         _USARTWriteChar
   _ProgressBar
     i1_lcd_escreve_string
       i1_lcd_putc
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
         i1_lcd_gotoxy
           i1_lcd_envia_byte
             i1_lcd_envia_nibble
   _USARTReceiveChar
     _USARTWriteString
       _USARTWriteChar
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___awtoft (ARG)
       ___ftpack
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     _sprintf (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _sendSerial
     _USARTWriteString
       _USARTWriteChar
     ___awtoft
       ___ftpack
     _ftoa
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       _sprintf (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     14      25       9       38.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      40       7       80.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4E      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C3      12        0.0%
ABS                  0      0      C3       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 03 20:12:50 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l88 0A51  
                           fsr 0004            ___wmul@multiplicand 0072                   ___ftadd@exp1 0026  
                 ___ftadd@exp2 0025                   ___ftadd@sign 0024                            l133 07FB  
                          l146 0B5F                            l177 0BDC                            l178 0BDF  
            i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000                            _ISR 026C  
                          fsr0 0004                __end_of_ADCInit 09AF                __end_of_ADCRead 0A54  
                          indf 0000                   __CFG_FOSC$HS 0000                     i1_lcd_putc 0C34  
                  lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195                   __CFG_LVP$OFF 0000  
                         ?_ISR 0070                   ___ftdiv@cntr 003A                   ___ftdiv@sign 003F  
                         l2031 0CD2                           l2033 0CDD                           l2025 0CB3  
                         l2029 0CC7                           l2037 0CE8                           l2329 0B62  
                         l2371 0EE5                           l2363 0ECA                           l2625 0B3F  
                         l1861 0A26                           l1859 0A25                           STR_1 0840  
                         STR_2 0883                           STR_3 088A                           STR_4 0868  
                         STR_5 0878                           u1745 0BE8                           u3507 0C7F  
                         u3427 0B52                           u3517 0C94                           u3437 07AA  
                         u3527 0CA9                           u3447 07BD                           u3537 0BD0  
                         u3457 07CD                           u3547 0DE3                           u3467 07EC  
                         u3557 0A4B                           u3477 0CC1                           u3487 0EBE  
                         u3497 0ED6                           i1l68 0954                           _OERR 00C1  
                 __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 095B                           _main 0B36  
                         _ftoa 0585                   ___ftpack@arg 0070                   ___ftpack@exp 0073  
                         btemp 007E                  __CFG_BOREN$ON 0000                           ltemp 007E  
                         start 0012                           ttemp 007E                           wtemp 007E  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                          ??_ISR 0058  
             __end_of_LCDClear 0CAF                   ___fttol@exp1 003D               __end_of_INFERIOR 083E  
                 ___fttol@lval 0039     __end_of_lcd_escreve_string 0B93                          ?_main 0070  
                        ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A                __end_of___ftadd 04B2  
                __CFG_WDTE$OFF 0000                __end_of___ftdiv 06F7                __end_of___ftneg 0963  
              __end_of___lldiv 0EA4                __end_of___ftmul 0585                __end_of___llmod 0D90  
              __end_of___ftsub 0A19                __end_of___fttol 1000                          i1l117 0722  
                        i1l129 039E                          i1l260 011B                          i1l177 0AF0  
                        i1l257 00FD                          i1l178 0AF3                          i1l530 0F59  
                        i1l363 0AA2                          i1l524 0F40                          i1l553 0453  
                        _RCREG 001A                          _SPBRG 0099            i1lcd_envia_nibble@n 0071  
                        _TRISA 0085                          _TXREG 0019                          _Bomba 0ABB  
                __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D           i1_lcd_escreve_string 0A75  
                ___awtoft@sign 007D                __end_of_dpowers 0838                __end_of_isdigit 0979  
                        _reset 07F7                  ___ftpack@sign 0074               __end_of_SUPERIOR 0840  
                        ftoa@f 0044                          ftoa@l 004D                          pclath 000A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                ?_USARTWriteChar 0070                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 026C               i1_lcd_envia_byte 0AE0                __initialization 0015  
                 i1_lcd_gotoxy 09C7                   __end_of_main 0B62                   __end_of_ftoa 063F  
                  i1lcd_putc@c 007B                      ??_ADCInit 0190                      ??_ADCRead 0192  
    __size_of_lcd_envia_nibble 0059                         ??_main 01A1                         ??_ftoa 0048  
                ___fttol@sign1 0038               ProgressBar@F1338 00CE                         ?_Bomba 0070  
                       ISR@pre 005F        USARTWriteChar@USARTData 0070          ?i1_lcd_escreve_string 007C  
                  ?i1_lcd_putc 0070                      ADCRead@ch 0190               ___llmod@dividend 0024  
                       _ADRESH 001E                         _ADRESL 009E                         ?_reset 0070  
             __end_of___awtoft 0A75               __end_of___ftpack 0F72               __end_of___lltoft 0B36  
                       i1l2001 0D87                         i1l2011 09D2                         i1l2021 09E2  
                       i1l2111 01A9                         i1l2009 09D1                         i1l2121 01E8  
                       i1l2203 0557                         i1l2115 01C3                         i1l2107 0191  
                       i1l2053 006C                         i1l2061 00AA                         i1l2311 0BAE  
                       i1l2151 0E37                         i1l2135 0258                         i1l2119 01E4  
                       i1l2071 00BC                         i1l2047 0057                         i1l2305 0BA1  
                       i1l2233 0F8C                         i1l2129 01FE                         i1l2073 00F8  
                       i1l2137 0037                         i1l2403 0A5E                         i1l2147 0E10  
                       i1l2251 0FBE                         i1l2075 00FF                         i1l2139 0267  
                       i1l2317 0BBA                         i1l2413 0A75                         i1l2421 09B8  
                       i1l2261 0FE6                         i1l2253 0FCE                         i1l2085 012D  
                       i1l2341 05BE                         i1l2191 052F                         i1l2175 04E0  
                       i1l2263 0FE9                         i1l2095 014F                         i1l2079 0104  
                       i1l2169 04CA                         i1l2291 0C5A                         i1l2283 0C36  
                       i1l2187 051F                         i1l2267 0FF7                         i1l2259 0FDB  
                       i1l2275 0B0F                         i1l2099 0155                         i1l2445 0ACE  
                       i1l2461 0D25                         i1l2429 09C4                         i1l1821 0F19  
                       i1l1901 03DB                         i1l2277 0B21                         i1l2287 0C48  
                       i1l2295 0C63                         i1l1831 0F45                         i1l1823 0F25  
                       i1l2543 0657                         i1l2199 0547                         i1l2289 0C51  
                       i1l1833 0F4F                         i1l1825 0F2A                         i1l1817 0F12  
                       i1l2481 0757                         i1l2617 038C                         i1l2459 0D0F  
                       i1l2571 06D1                         i1l2563 06B2                         i1l1931 042E  
                       i1l1907 03EA                         i1l2549 066D                         i1l1925 0419  
                       i1l2477 0747                         i1l1943 0465                         i1l1927 0425  
                       i1l1919 0404                         i1l2487 0775                         i1l1937 0443  
                       i1l1929 042A                         i1l1873 0977                         i1l1947 0477  
                       i1l1939 044F                         i1l1957 049A                         u211_25 042F  
                       i1l1981 0E9B                         i1l1967 0E56                         i1l1991 0D4C  
                       i1l1879 0A9A                         i1l1897 03D4                         i1l1977 0E8E  
                       i1l1969 0E66                         i1l1993 0D5C                         i1l1997 0D7A  
                       u301_25 0AC6                         u205_25 0405                         u221_25 0E5A  
                       u302_25 0AD9                         u214_25 0444                         u230_25 0D6A  
                       u303_20 0D02                         u223_25 0E68                         u231_25 0D7B  
                       u312_25 067F                         u208_25 041A                         u224_25 0E7D  
                       u313_25 0691                         u225_25 0E8F                         u314_25 06B3  
                       u306_25 0743                         u315_25 06C4                         u316_25 06D2  
                       u228_25 0D50                         u252_25 0209                         u244_25 0158  
                       u181_25 0F48                         u253_25 0264                         u245_25 0187  
                       u262_25 04EC                         u271_25 0558                         u263_25 04FE  
                       u247_25 01A0                         u256_21 0E03                         u256_22 0E04  
                       u256_23 0E09                         u256_24 0E0A                         u184_25 0F60  
                       u272_25 0560                         u248_25 01BA                         u177_25 0F1E  
                       u193_25 0AA3                         u249_25 01D4                         u258_21 0E2A  
                       u258_22 0E2B                         u258_23 0E30                         u258_24 0E31  
                       u266_25 0530                         u282_25 0FDD                         u194_25 0AAA  
                       u187_25 0AFA                         u179_25 0F39                         u267_25 0538  
                       u276_25 0F93                         u356_27 0D3A                         u285_25 0B14  
                       u357_27 0C42                         u358_27 0AE6                         u279_25 0FBF  
                       u359_27 0C2E         __size_of_init_lcd_4bit 0066                         _Ativar 0B93  
                ISR@percentual 0062               __end_of_lcd_putc 0CF6                         ___ftge 0DE9  
                       ___wmul 0A98                      ??___ftadd 0020                      ??___ftdiv 0036  
                    ??___ftneg 0073                      ??___lldiv 0078                      ??___ftmul 0026  
                    ??___llmod 0028                      ??___ftsub 007E                      ??___fttol 0034  
     __end_of_USARTWriteString 09FD               ??_lcd_envia_byte 0193                         ftoa@cp 0051  
        ___ftmul@f3_as_product 002B                      ??_isdigit 0070                         saved_w 007E  
        i1lcd_escreve_string@y 007C                      ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 0C34  
            ?_USARTReceiveChar 0070                      ?_LCDClear 0070        __end_of__initialization 002C  
                ??_ProgressBar 0022             ??_USARTReceiveChar 0073                     ___ftadd@f1 0078  
                   ___ftadd@f2 007B                     ___ftge@ff1 0070                     ___ftge@ff2 0073  
                   ___ftdiv@f1 0033                     ___ftdiv@f2 0030                     ___ftdiv@f3 003B  
                   ___ftneg@f1 0070                     ___awtoft@c 0078                     ___ftmul@f1 0020  
                   ___ftmul@f2 0023                  __end_of_Bomba 0AE0                     ___ftsub@f1 002A  
                   ___ftsub@f2 0027                     ___fttol@f1 0030                 __pcstackCOMMON 0070  
                 __pidataBANK1 098A            __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078  
                __end_of_reset 0800                  _init_lcd_4bit 0EA4                    ISR@recebido 0063  
       ??i1_lcd_escreve_string 007E                        ??_Bomba 0074              lcd_gotoxy@address 0198  
                      ??_reset 0190                   sprintf@width 003F                     __pbssBANK0 006E  
                   __pbssBANK3 01A4               sendSerial@origem 00A0               sendSerial@preint 0052  
                   ??_LCDClear 0195               sendSerial@status 00C8                      ISR@input2 0069  
                    ISR@preint 006C                        ?_Ativar 0070                      ISR@status 0064  
    USARTReceiveChar@USARTData 0074                     __pmaintext 0B36            __end_of_ProgressBar 0D42  
                      ?___ftge 0070                        ?___wmul 0070                     __pintentry 0004  
                      _ADCInit 099C                        _ADCRead 0A35                      ?___awtoft 0078  
                    ?___ftpack 0070               _lcd_envia_nibble 0D90                      ?___lltoft 0078  
                  sendSerial@x 00CC                 ?_init_lcd_4bit 0070                     _lcd_gotoxy 0A19  
     __end_ofi1_lcd_envia_byte 0B0B               ??_USARTWriteChar 0070             _lcd_escreve_string 0B62  
                    ?_lcd_putc 0070              ProgressBar@preint 0020              ProgressBar@result 0038  
                   __stringtab 0800            ?_lcd_escreve_string 019C                      _ADCResult 006E  
              __size_of_Ativar 0033                     _inicialize 0785                __size_of___ftge 005D  
                      ___ftadd 03AB                        ___ftdiv 063F                        ___ftneg 095B  
                      ___lldiv 0E46                __size_of___wmul 0023                        ___ftmul 04B2  
                      ___llmod 0D42                        ___ftsub 09FD                        ___fttol 0F72  
                   ??___awtoft 007B                     ??___ftpack 0075                        _flag_an 00DE  
                   ??___lltoft 007C                        __ptext1 07F7                        __ptext2 0785  
                      __ptext3 0B62                        __ptext4 0CAF                        __ptext5 0A19  
                      __ptext6 0EA4                        __ptext7 0C6F                        __ptext8 0BC6  
                      __ptext9 0D90           ??_lcd_escreve_string 019E                   __size_of_ISR 013F  
                      _dpowers 0810                        _isdigit 096B                lcd_envia_byte@n 0192  
                 ??i1_lcd_putc 0079                        _sprintf 0030                        clrloop0 0964  
                   ??_lcd_putc 0199           end_of_initialization 002C                        ftoa@buf 01A4  
                      ftoa@rem 0049        i1lcd_envia_byte@address 0074                     _sendSerial 06F7  
                  _ProgressBar 0CF6                ___lldiv@divisor 0070                ___lldiv@counter 007D  
                    _RCSTAbits 0018             __end_ofi1_lcd_putc 0C6F                ??_init_lcd_4bit 0195  
            ?_USARTWriteString 0070                      _PORTAbits 0005                      _PORTBbits 0006  
                    _PORTCbits 0007                      _PORTDbits 0008             ??_USARTWriteString 0071  
                    _TRISBbits 0086                      _TRISCbits 0087                      _TRISDbits 0088  
                  ?_lcd_gotoxy 0195                _LCD_INIT_STRING 0838                    ___ftdiv@exp 003E  
                    _TXSTAbits 0098              __size_of_LCDClear 0040                    ?_inicialize 0070  
                  ___ftmul@exp 002A                 __end_of_Ativar 0BC6             i1_lcd_envia_nibble 0BFB  
    __size_of_USARTReceiveChar 0018                 __end_of___ftge 0E46                 __end_of___wmul 0ABB  
          ?i1_lcd_envia_nibble 0070            start_initialization 0015                    __end_of_ISR 03AB  
                   ftoa@status 0047                  i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075  
                  ?_sendSerial 0052           ??i1_lcd_envia_nibble 0070       __end_of_lcd_envia_nibble 0DE9  
        lcd_envia_byte@address 0194                ___llmod@divisor 0020                ___llmod@counter 0029  
                     ??_Ativar 0073                       ??___ftge 0076            __size_of_lcd_gotoxy 001C  
                     ??___wmul 0074                     init_fetch0 0979                    __pdataBANK1 00CE  
                     ?_ADCInit 0070                       ?_ADCRead 0190        __end_of_LCD_INIT_STRING 083C  
            __size_of___awtoft 0021              __size_of___ftpack 0068              __size_of___lltoft 002B  
                    ___latbits 0002                  __pcstackBANK0 0020                  __pcstackBANK1 00A0  
                __pcstackBANK3 0190            __end_of__stringdata 088C            __size_of_inicialize 0072  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                sendSerial@envio 00CA  
                     ISR@input 0066                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___ftadd 0078                       ?___ftdiv 0030                       ?___ftneg 0070  
                     ?___lldiv 0070                       ?___ftmul 0020                       ?___llmod 0020  
                     ?___ftsub 0027                       ?___fttol 0030            __size_of_sendSerial 008E  
                    __pstrings 0800                       ?_isdigit 0070                 __size_of_Bomba 0025  
               init_lcd_4bit@i 0197                       ?_sprintf 002A                 __size_of_reset 0009  
                     _LCDClear 0C6F                       _INFERIOR 083C              interrupt_function 0004  
                 ?_ProgressBar 0020                 ___wmul@product 0074                      clear_ram0 0963  
                     _PIE1bits 008C              lcd_envia_nibble@n 0191                 ??i1_lcd_gotoxy 0076  
                     _PIR1bits 000C               _USARTReceiveChar 09AF                       _SUPERIOR 083E  
    sendSerial@nivelRecipiente 00CB               __size_of_ADCInit 0013               __size_of_ADCRead 001F  
                   _ADCON0bits 001F                    __stringbase 080F                     _ADCON1bits 009F  
                  __stringdata 0840              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 019B                   ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C  
    __size_of_USARTWriteString 001C        __size_of_USARTWriteChar 0008                 ProgressBar@aux 0026  
                 ??_inicialize 019E             __end_of_lcd_gotoxy 0A35               __size_of___ftadd 0107  
             __size_of___ftdiv 00B8               __size_of___ftneg 0008               __size_of___lldiv 005E  
             __size_of___ftmul 00D3               __size_of___llmod 004E               __size_of___ftsub 001C  
             __size_of___fttol 008E                       ___awtoft 0A54                       ___ftpack 0F0A  
           __end_of__stringtab 0810                       ___lltoft 0B0B                    _isdigit$887 0070  
        __end_of_init_lcd_4bit 0F0A               __size_of_isdigit 000E                       __ptext10 099C  
                     __ptext11 0A35                       __ptext20 0B0B                       __ptext12 026C  
                     __ptext21 0F72                       __ptext13 06F7                       __ptext30 09AF  
                     __ptext22 09FD                       __ptext14 0585                       __ptext31 0CF6  
                     __ptext23 03AB                       __ptext15 0030                       __ptext40 0953  
                     __ptext32 0A75                       __ptext24 095B                       __ptext16 096B  
                     __ptext33 0C34                       __ptext25 04B2                       __ptext17 0A98  
                     __ptext34 09C7                       __ptext26 0DE9                       __ptext18 0D42  
                     __ptext35 0AE0                       __ptext27 0A54                       __ptext19 0E46  
                     __ptext36 0BFB                       __ptext28 063F                       __ptext37 0ABB  
                     __ptext29 0F0A                       __ptext38 0B93                       __ptext39 09E1  
               _lcd_envia_byte 0BC6             __end_of_inicialize 07F7                       _lcd_putc 0CAF  
             __size_of_sprintf 023C                   ??_sendSerial 0056                  __size_of_main 002C  
                __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070             ISR@bufferConversor 005E  
           ??_lcd_envia_nibble 0190                  Ativar@comando 0073             __end_of_sendSerial 0785  
                   _INTCONbits 000B         __end_of_lcd_envia_byte 0BFB           __end_ofi1_lcd_gotoxy 09E1  
                     init_ram0 097D                       isdigit@c 0071                       intlevel1 0000  
                    sprintf@ap 0039                      sprintf@sp 003E    __size_ofi1_lcd_envia_nibble 0039  
             ___lldiv@dividend 0074                      stringcode 080A           __size_of_ProgressBar 004C  
 __end_ofi1_lcd_escreve_string 0A98      __size_ofi1_lcd_envia_byte 002B            USARTWriteString@str 0072  
                 ProgressBar@i 0036                       sprintf@c 0043                       sprintf@f 002A  
             ___lldiv@quotient 0079           sendSerial@recipiente 0054                ?_lcd_envia_byte 0192  
                     stringdir 080A                       stringtab 0800       __end_of_USARTReceiveChar 09C7  
             _USARTWriteString 09E1                 _USARTWriteChar 0953  
