

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 03 21:57:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK1
   184  084B                     __pidataBANK1:	
   185                           
   186                           ;initializer for ProgressBar@F1340
   187  084B  3420               	retlw	32
   188  084C  3420               	retlw	32
   189  084D  3420               	retlw	32
   190  084E  3420               	retlw	32
   191  084F  3420               	retlw	32
   192  0850  3420               	retlw	32
   193  0851  3420               	retlw	32
   194  0852  3420               	retlw	32
   195  0853  3420               	retlw	32
   196  0854  3420               	retlw	32
   197  0855  3420               	retlw	32
   198  0856  3420               	retlw	32
   199  0857  3420               	retlw	32
   200  0858  3420               	retlw	32
   201  0859  3420               	retlw	32
   202  085A  3420               	retlw	32
   203                           
   204                           ;initializer for _flag_an
   205  085B  34FF               	retlw	255
   206  085C  34FF               	retlw	255
   207                           
   208                           	psect	strings
   209  0745                     __pstrings:	
   210  0745                     stringtab:	
   211  0745                     __stringtab:	
   212                           
   213                           ;	String table - string pointers are 1 byte each
   214  0745  1BFF               	btfsc	btemp+1,7
   215  0746  2F4F               	ljmp	stringcode
   216  0747  1383               	bcf	3,7
   217  0748  187F               	btfsc	btemp+1,0
   218  0749  1783               	bsf	3,7
   219  074A  0800               	movf	0,w
   220  074B  0A84               	incf	4,f
   221  074C  1903               	skipnz
   222  074D  0AFF               	incf	btemp+1,f
   223  074E  0008               	return
   224  074F                     stringcode:	
   225  074F                     stringdir:	
   226  074F  3007               	movlw	high stringdir
   227  0750  008A               	movwf	10
   228  0751  0804               	movf	4,w
   229  0752  0A84               	incf	4,f
   230  0753  0782               	addwf	2,f
   231  0754                     __stringbase:	
   232  0754  3400               	retlw	0
   233  0755                     __end_of__stringtab:	
   234  0755                     _dpowers:	
   235  0755  3401               	retlw	1
   236  0756  3400               	retlw	0
   237  0757  3400               	retlw	0
   238  0758  3400               	retlw	0
   239  0759  340A               	retlw	10
   240  075A  3400               	retlw	0
   241  075B  3400               	retlw	0
   242  075C  3400               	retlw	0
   243  075D  3464               	retlw	100
   244  075E  3400               	retlw	0
   245  075F  3400               	retlw	0
   246  0760  3400               	retlw	0
   247  0761  34E8               	retlw	232
   248  0762  3403               	retlw	3
   249  0763  3400               	retlw	0
   250  0764  3400               	retlw	0
   251  0765  3410               	retlw	16
   252  0766  3427               	retlw	39
   253  0767  3400               	retlw	0
   254  0768  3400               	retlw	0
   255  0769  34A0               	retlw	160
   256  076A  3486               	retlw	134
   257  076B  3401               	retlw	1
   258  076C  3400               	retlw	0
   259  076D  3440               	retlw	64
   260  076E  3442               	retlw	66
   261  076F  340F               	retlw	15
   262  0770  3400               	retlw	0
   263  0771  3480               	retlw	128
   264  0772  3496               	retlw	150
   265  0773  3498               	retlw	152
   266  0774  3400               	retlw	0
   267  0775  3400               	retlw	0
   268  0776  34E1               	retlw	225
   269  0777  34F5               	retlw	245
   270  0778  3405               	retlw	5
   271  0779  3400               	retlw	0
   272  077A  34CA               	retlw	202
   273  077B  349A               	retlw	154
   274  077C  343B               	retlw	59
   275  077D                     __end_of_dpowers:	
   276  077D                     _LCD_INIT_STRING:	
   277  077D  341C               	retlw	28
   278  077E  340C               	retlw	12
   279  077F  3401               	retlw	1
   280  0780  3406               	retlw	6
   281  0781                     __end_of_LCD_INIT_STRING:	
   282  0781                     _INFERIOR:	
   283  0781  3401               	retlw	1
   284  0782  3400               	retlw	0
   285  0783                     __end_of_INFERIOR:	
   286  0783                     _SUPERIOR:	
   287  0783  3400               	retlw	0
   288  0784  3400               	retlw	0
   289  0785                     __end_of_SUPERIOR:	
   290  001F                     _ADCON0bits	set	31
   291  001E                     _ADRESH	set	30
   292  000B                     _INTCONbits	set	11
   293  000C                     _PIR1bits	set	12
   294  0005                     _PORTAbits	set	5
   295  0006                     _PORTBbits	set	6
   296  0007                     _PORTCbits	set	7
   297  0008                     _PORTDbits	set	8
   298  001A                     _RCREG	set	26
   299  0018                     _RCSTAbits	set	24
   300  0019                     _TXREG	set	25
   301  00C1                     _OERR	set	193
   302  009F                     _ADCON1bits	set	159
   303  009E                     _ADRESL	set	158
   304  008C                     _PIE1bits	set	140
   305  0099                     _SPBRG	set	153
   306  0085                     _TRISA	set	133
   307  0086                     _TRISBbits	set	134
   308  0087                     _TRISCbits	set	135
   309  0088                     _TRISDbits	set	136
   310  0098                     _TXSTAbits	set	152
   311  0785                     __stringdata:	
   312  0785                     STR_1:	
   313  0785  340A               	retlw	10
   314  0786  340D               	retlw	13
   315  0787  3420               	retlw	32	;' '
   316  0788  342D               	retlw	45	;'-'
   317  0789  342D               	retlw	45	;'-'
   318  078A  342D               	retlw	45	;'-'
   319  078B  342D               	retlw	45	;'-'
   320  078C  342D               	retlw	45	;'-'
   321  078D  342D               	retlw	45	;'-'
   322  078E  342D               	retlw	45	;'-'
   323  078F  3420               	retlw	32	;' '
   324  0790  3445               	retlw	69	;'E'
   325  0791  3453               	retlw	83	;'S'
   326  0792  3454               	retlw	84	;'T'
   327  0793  344F               	retlw	79	;'O'
   328  0794  3455               	retlw	85	;'U'
   329  0795  3452               	retlw	82	;'R'
   330  0796  344F               	retlw	79	;'O'
   331  0797  3420               	retlw	32	;' '
   332  0798  3444               	retlw	68	;'D'
   333  0799  3445               	retlw	69	;'E'
   334  079A  3420               	retlw	32	;' '
   335  079B  3450               	retlw	80	;'P'
   336  079C  3449               	retlw	73	;'I'
   337  079D  344C               	retlw	76	;'L'
   338  079E  3448               	retlw	72	;'H'
   339  079F  3441               	retlw	65	;'A'
   340  07A0  3420               	retlw	32	;' '
   341  07A1  342D               	retlw	45	;'-'
   342  07A2  342D               	retlw	45	;'-'
   343  07A3  342D               	retlw	45	;'-'
   344  07A4  342D               	retlw	45	;'-'
   345  07A5  342D               	retlw	45	;'-'
   346  07A6  342D               	retlw	45	;'-'
   347  07A7  342D               	retlw	45	;'-'
   348  07A8  3420               	retlw	32	;' '
   349  07A9  340A               	retlw	10
   350  07AA  340D               	retlw	13
   351  07AB  3420               	retlw	32	;' '
   352  07AC  3400               	retlw	0
   353  07AD                     STR_6:	
   354  07AD  340C               	retlw	12
   355  07AE  344C               	retlw	76	;'L'
   356  07AF  346F               	retlw	111	;'o'
   357  07B0  3461               	retlw	97	;'a'
   358  07B1  3464               	retlw	100	;'d'
   359  07B2  3469               	retlw	105	;'i'
   360  07B3  346E               	retlw	110	;'n'
   361  07B4  3467               	retlw	103	;'g'
   362  07B5  3420               	retlw	32	;' '
   363  07B6  3450               	retlw	80	;'P'
   364  07B7  3449               	retlw	73	;'I'
   365  07B8  3443               	retlw	67	;'C'
   366  07B9  342E               	retlw	46	;'.'
   367  07BA  342E               	retlw	46	;'.'
   368  07BB  342E               	retlw	46	;'.'
   369  07BC  3400               	retlw	0
   370  07BD                     STR_9:	
   371  07BD  3425               	retlw	37	;'%'
   372  07BE  346C               	retlw	108	;'l'
   373  07BF  3475               	retlw	117	;'u'
   374  07C0  342E               	retlw	46	;'.'
   375  07C1  3425               	retlw	37	;'%'
   376  07C2  3436               	retlw	54	;'6'
   377  07C3  342E               	retlw	46	;'.'
   378  07C4  3436               	retlw	54	;'6'
   379  07C5  346C               	retlw	108	;'l'
   380  07C6  3475               	retlw	117	;'u'
   381  07C7  3400               	retlw	0
   382  07C8                     STR_8:	
   383  07C8  344B               	retlw	75	;'K'
   384  07C9  3461               	retlw	97	;'a'
   385  07CA  346C               	retlw	108	;'l'
   386  07CB  3469               	retlw	105	;'i'
   387  07CC  3461               	retlw	97	;'a'
   388  07CD  346E               	retlw	110	;'n'
   389  07CE  3465               	retlw	101	;'e'
   390  07CF  3400               	retlw	0
   391  07D0                     STR_2:	
   392  07D0  344E               	retlw	78	;'N'
   393  07D1  3469               	retlw	105	;'i'
   394  07D2  3476               	retlw	118	;'v'
   395  07D3  3465               	retlw	101	;'e'
   396  07D4  346C               	retlw	108	;'l'
   397  07D5  343A               	retlw	58	;':'
   398  07D6  3400               	retlw	0
   399  07D7                     STR_4:	
   400  07D7  3425               	retlw	37	;'%'
   401  07D8  3400               	retlw	0
   402  07D9                     __end_of__stringdata:	
   403                           
   404                           ; #config settings
   405  0000                     
   406                           	psect	cinit
   407  0015                     start_initialization:	
   408  0015                     __initialization:	
   409                           
   410                           ; Clear objects allocated to BANK0
   411  0015  01ED               	clrf	__pbssBANK0& (0+127)
   412  0016  01EE               	clrf	(__pbssBANK0+1)& (0+127)
   413                           
   414                           ; Clear objects allocated to BANK1
   415  0017  1683               	bsf	3,5	;RP0=1, select bank1
   416  0018  1303               	bcf	3,6	;RP1=0, select bank1
   417  0019  01E0               	clrf	__pbssBANK1& (0+127)
   418  001A  01E1               	clrf	(__pbssBANK1+1)& (0+127)
   419  001B  01E2               	clrf	(__pbssBANK1+2)& (0+127)
   420  001C  01E3               	clrf	(__pbssBANK1+3)& (0+127)
   421                           
   422                           ; Clear objects allocated to BANK3
   423  001D  1783               	bsf	3,7	;select IRP bank2
   424  001E  30A4               	movlw	low __pbssBANK3
   425  001F  0084               	movwf	4
   426  0020  30B5               	movlw	low (__pbssBANK3+17)
   427  0021  120A  158A  200D  120A  118A  	fcall	clear_ram0
   428                           
   429                           ; Initialize objects allocated to BANK1
   430  0026  1383               	bcf	3,7	;select IRP bank0
   431  0027  30E0               	movlw	low (__pdataBANK1+18)
   432  0028  00FD               	movwf	btemp+-1
   433  0029  3008               	movlw	high __pidataBANK1
   434  002A  00FE               	movwf	btemp
   435  002B  304B               	movlw	low __pidataBANK1
   436  002C  00FF               	movwf	btemp+1
   437  002D  30CE               	movlw	low __pdataBANK1
   438  002E  0084               	movwf	4
   439  002F  120A  158A  203E   	fcall	init_ram0
   440  0032                     end_of_initialization:	
   441                           ;End of C runtime variable initialization code
   442                           
   443  0032                     __end_of__initialization:	
   444  0032  0183               	clrf	3
   445  0033  120A  158A  2A77   	ljmp	_main	;jump to C main() function
   446                           
   447                           	psect	bssBANK0
   448  006D                     __pbssBANK0:	
   449  006D                     _ADCResult:	
   450  006D                     	ds	2
   451                           
   452                           	psect	bssBANK1
   453  00E0                     __pbssBANK1:	
   454  00E0                     _Buffer_Leitura:	
   455  00E0                     	ds	2
   456  00E2                     _flag_Leitura:	
   457  00E2                     	ds	2
   458                           
   459                           	psect	dataBANK1
   460  00CE                     __pdataBANK1:	
   461  00CE                     ProgressBar@F1340:	
   462  00CE                     	ds	16
   463  00DE                     _flag_an:	
   464  00DE                     	ds	2
   465                           
   466                           	psect	bssBANK3
   467  01A4                     __pbssBANK3:	
   468  01A4                     ftoa@buf:	
   469  01A4                     	ds	17
   470                           
   471                           	psect	clrtext
   472  080D                     clear_ram0:	
   473                           ;	Called with FSR containing the base address, and
   474                           ;	W with the last address+1
   475                           
   476  080D  0064               	clrwdt	;clear the watchdog before getting into this loop
   477  080E                     clrloop0:	
   478  080E  0180               	clrf	0	;clear RAM location pointed to by FSR
   479  080F  0A84               	incf	4,f	;increment pointer
   480  0810  0604               	xorwf	4,w	;XOR with final address
   481  0811  1903               	btfsc	3,2	;have we reached the end yet?
   482  0812  3400               	retlw	0	;all done for this memory range, return
   483  0813  0604               	xorwf	4,w	;XOR again to restore value
   484  0814  280E               	goto	clrloop0	;do the next byte
   485                           
   486                           	psect	inittext
   487  083A                     init_fetch0:	
   488                           ;	Called with low address in FSR and high address in W
   489                           
   490  083A  087E               	movf	126,w
   491  083B  008A               	movwf	10
   492  083C  087F               	movf	127,w
   493  083D  0082               	movwf	2
   494  083E                     init_ram0:	
   495                           ;Called with:
   496                           ;	high address of idata address in btemp 
   497                           ;	low address of idata address in btemp+1 
   498                           ;	low address of data in FSR
   499                           ;	high address + 1 of data in btemp-1
   500                           
   501  083E  203A  120A  158A   	fcall	init_fetch0
   502  0841  0080               	movwf	0
   503  0842  0A84               	incf	4,f
   504  0843  0804               	movf	4,w
   505  0844  067D               	xorwf	125,w
   506  0845  1903               	btfsc	3,2
   507  0846  3400               	retlw	0
   508  0847  0AFF               	incf	127,f
   509  0848  1903               	btfsc	3,2
   510  0849  0AFE               	incf	126,f
   511  084A  283E               	goto	init_ram0
   512                           
   513                           	psect	cstackBANK3
   514  0190                     __pcstackBANK3:	
   515  0190                     ??_lcd_envia_nibble:	
   516  0190                     ??_USARTWriteChar:	
   517                           ; 0 bytes @ 0x0
   518                           
   519  0190                     ??_ADCInit:	
   520                           ; 0 bytes @ 0x0
   521                           
   522  0190                     ?_ADCRead:	
   523                           ; 0 bytes @ 0x0
   524                           
   525  0190                     ??_reset:	
   526                           ; 0 bytes @ 0x0
   527                           
   528  0190                     USARTWriteChar@USARTData:	
   529                           ; 0 bytes @ 0x0
   530                           
   531  0190                     ADCRead@ch:	
   532                           ; 1 bytes @ 0x0
   533                           
   534                           
   535                           ; 2 bytes @ 0x0
   536  0190                     	ds	1
   537  0191                     ?_USARTWriteString:	
   538  0191                     lcd_envia_nibble@n:	
   539                           ; 0 bytes @ 0x1
   540                           
   541  0191                     USARTWriteString@str:	
   542                           ; 1 bytes @ 0x1
   543                           
   544                           
   545                           ; 2 bytes @ 0x1
   546  0191                     	ds	1
   547  0192                     ?_lcd_envia_byte:	
   548  0192                     ??_ADCRead:	
   549                           ; 0 bytes @ 0x2
   550                           
   551  0192                     lcd_envia_byte@n:	
   552                           ; 0 bytes @ 0x2
   553                           
   554                           
   555                           ; 1 bytes @ 0x2
   556  0192                     	ds	1
   557  0193                     ??_lcd_envia_byte:	
   558  0193                     ??_USARTWriteString:	
   559                           ; 0 bytes @ 0x3
   560                           
   561                           
   562                           ; 0 bytes @ 0x3
   563  0193                     	ds	1
   564  0194                     lcd_envia_byte@address:	
   565                           
   566                           ; 1 bytes @ 0x4
   567  0194                     	ds	1
   568  0195                     ?_lcd_gotoxy:	
   569  0195                     ??_init_lcd_4bit:	
   570                           ; 0 bytes @ 0x5
   571                           
   572  0195                     ??_LCDClear:	
   573                           ; 0 bytes @ 0x5
   574                           
   575  0195                     lcd_gotoxy@y:	
   576                           ; 0 bytes @ 0x5
   577                           
   578                           
   579                           ; 1 bytes @ 0x5
   580  0195                     	ds	1
   581  0196                     ??_lcd_gotoxy:	
   582                           
   583                           ; 0 bytes @ 0x6
   584  0196                     	ds	1
   585  0197                     init_lcd_4bit@i:	
   586  0197                     lcd_gotoxy@x:	
   587                           ; 1 bytes @ 0x7
   588                           
   589                           
   590                           ; 1 bytes @ 0x7
   591  0197                     	ds	1
   592  0198                     lcd_gotoxy@address:	
   593                           
   594                           ; 1 bytes @ 0x8
   595  0198                     	ds	1
   596  0199                     ??_lcd_putc:	
   597                           
   598                           ; 0 bytes @ 0x9
   599  0199                     	ds	2
   600  019B                     lcd_putc@c:	
   601                           
   602                           ; 1 bytes @ 0xB
   603  019B                     	ds	1
   604  019C                     ?_lcd_escreve_string:	
   605  019C                     lcd_escreve_string@y:	
   606                           ; 0 bytes @ 0xC
   607                           
   608                           
   609                           ; 2 bytes @ 0xC
   610  019C                     	ds	2
   611  019E                     ??_lcd_escreve_string:	
   612  019E                     ??_inicialize:	
   613                           ; 0 bytes @ 0xE
   614                           
   615                           
   616                           ; 0 bytes @ 0xE
   617  019E                     	ds	3
   618  01A1                     ??_main:	
   619                           
   620                           ; 0 bytes @ 0x11
   621  01A1                     	ds	3
   622                           
   623                           	psect	cstackBANK1
   624  00A0                     __pcstackBANK1:	
   625  00A0                     sendSerial@origem:	
   626                           
   627                           ; 40 bytes @ 0x0
   628  00A0                     	ds	40
   629  00C8                     sendSerial@status:	
   630                           
   631                           ; 2 bytes @ 0x28
   632  00C8                     	ds	2
   633  00CA                     sendSerial@envio:	
   634                           
   635                           ; 1 bytes @ 0x2A
   636  00CA                     	ds	1
   637  00CB                     sendSerial@nivelRecipiente:	
   638                           
   639                           ; 1 bytes @ 0x2B
   640  00CB                     	ds	1
   641  00CC                     sendSerial@x:	
   642                           
   643                           ; 2 bytes @ 0x2C
   644  00CC                     	ds	2
   645                           
   646                           	psect	cstackCOMMON
   647  0070                     __pcstackCOMMON:	
   648  0070                     ?_init_lcd_4bit:	
   649  0070                     ?_LCDClear:	
   650                           ; 0 bytes @ 0x0
   651                           
   652  0070                     ?_lcd_envia_nibble:	
   653                           ; 0 bytes @ 0x0
   654                           
   655  0070                     ?_isdigit:	
   656                           ; 0 bytes @ 0x0
   657                           
   658  0070                     ??_isdigit:	
   659                           ; 1 bit 
   660                           
   661  0070                     ?_USARTWriteChar:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  0070                     ?_ADCInit:	
   665                           ; 0 bytes @ 0x0
   666                           
   667  0070                     ?_Ativar:	
   668                           ; 0 bytes @ 0x0
   669                           
   670  0070                     ?_Bomba:	
   671                           ; 0 bytes @ 0x0
   672                           
   673  0070                     ?_ISR:	
   674                           ; 0 bytes @ 0x0
   675                           
   676  0070                     ?_reset:	
   677                           ; 0 bytes @ 0x0
   678                           
   679  0070                     ?_inicialize:	
   680                           ; 0 bytes @ 0x0
   681                           
   682  0070                     ?_main:	
   683                           ; 0 bytes @ 0x0
   684                           
   685  0070                     ?_lcd_putc:	
   686                           ; 0 bytes @ 0x0
   687                           
   688  0070                     ?___ftge:	
   689                           ; 0 bytes @ 0x0
   690                           
   691  0070                     ?i1_USARTWriteChar:	
   692                           ; 1 bit 
   693                           
   694  0070                     ??i1_USARTWriteChar:	
   695                           ; 0 bytes @ 0x0
   696                           
   697  0070                     ?i1_lcd_envia_nibble:	
   698                           ; 0 bytes @ 0x0
   699                           
   700  0070                     ??i1_lcd_envia_nibble:	
   701                           ; 0 bytes @ 0x0
   702                           
   703  0070                     ?i1_lcd_putc:	
   704                           ; 0 bytes @ 0x0
   705                           
   706  0070                     ?_USARTReceiveChar:	
   707                           ; 0 bytes @ 0x0
   708                           
   709  0070                     ?___wmul:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?___ftpack:	
   713                           ; 2 bytes @ 0x0
   714                           
   715  0070                     ?___ftneg:	
   716                           ; 3 bytes @ 0x0
   717                           
   718  0070                     ?___lldiv:	
   719                           ; 3 bytes @ 0x0
   720                           
   721  0070                     _isdigit$892:	
   722                           ; 4 bytes @ 0x0
   723                           
   724  0070                     i1USARTWriteChar@USARTData:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ___wmul@multiplier:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ___ftpack@arg:	
   731                           ; 2 bytes @ 0x0
   732                           
   733  0070                     ___ftge@ff1:	
   734                           ; 3 bytes @ 0x0
   735                           
   736  0070                     ___ftneg@f1:	
   737                           ; 3 bytes @ 0x0
   738                           
   739  0070                     ___lldiv@divisor:	
   740                           ; 3 bytes @ 0x0
   741                           
   742                           
   743                           ; 4 bytes @ 0x0
   744  0070                     	ds	1
   745  0071                     ?i1_USARTWriteString:	
   746  0071                     isdigit@c:	
   747                           ; 0 bytes @ 0x1
   748                           
   749  0071                     i1lcd_envia_nibble@n:	
   750                           ; 1 bytes @ 0x1
   751                           
   752  0071                     i1USARTWriteString@str:	
   753                           ; 1 bytes @ 0x1
   754                           
   755                           
   756                           ; 2 bytes @ 0x1
   757  0071                     	ds	1
   758  0072                     ?i1_lcd_envia_byte:	
   759  0072                     i1lcd_envia_byte@n:	
   760                           ; 0 bytes @ 0x2
   761                           
   762  0072                     ___wmul@multiplicand:	
   763                           ; 1 bytes @ 0x2
   764                           
   765                           
   766                           ; 2 bytes @ 0x2
   767  0072                     	ds	1
   768  0073                     ??_USARTReceiveChar:	
   769  0073                     ??_Ativar:	
   770                           ; 0 bytes @ 0x3
   771                           
   772  0073                     ??___ftneg:	
   773                           ; 0 bytes @ 0x3
   774                           
   775  0073                     ??i1_USARTWriteString:	
   776                           ; 0 bytes @ 0x3
   777                           
   778  0073                     ??i1_lcd_envia_byte:	
   779                           ; 0 bytes @ 0x3
   780                           
   781  0073                     Ativar@comando:	
   782                           ; 0 bytes @ 0x3
   783                           
   784  0073                     ___ftpack@exp:	
   785                           ; 1 bytes @ 0x3
   786                           
   787  0073                     ___ftge@ff2:	
   788                           ; 1 bytes @ 0x3
   789                           
   790                           
   791                           ; 3 bytes @ 0x3
   792  0073                     	ds	1
   793  0074                     ??_Bomba:	
   794  0074                     ??___wmul:	
   795                           ; 0 bytes @ 0x4
   796                           
   797  0074                     USARTReceiveChar@USARTData:	
   798                           ; 0 bytes @ 0x4
   799                           
   800  0074                     ___ftpack@sign:	
   801                           ; 1 bytes @ 0x4
   802                           
   803  0074                     i1lcd_envia_byte@address:	
   804                           ; 1 bytes @ 0x4
   805                           
   806  0074                     ___wmul@product:	
   807                           ; 1 bytes @ 0x4
   808                           
   809  0074                     ___lldiv@dividend:	
   810                           ; 2 bytes @ 0x4
   811                           
   812                           
   813                           ; 4 bytes @ 0x4
   814  0074                     	ds	1
   815  0075                     ??___ftpack:	
   816  0075                     ?i1_lcd_gotoxy:	
   817                           ; 0 bytes @ 0x5
   818                           
   819  0075                     i1lcd_gotoxy@y:	
   820                           ; 0 bytes @ 0x5
   821                           
   822                           
   823                           ; 1 bytes @ 0x5
   824  0075                     	ds	1
   825  0076                     ??___ftge:	
   826  0076                     ??i1_lcd_gotoxy:	
   827                           ; 0 bytes @ 0x6
   828                           
   829                           
   830                           ; 0 bytes @ 0x6
   831  0076                     	ds	1
   832  0077                     i1lcd_gotoxy@x:	
   833                           
   834                           ; 1 bytes @ 0x7
   835  0077                     	ds	1
   836  0078                     ??___lldiv:	
   837  0078                     ?___awtoft:	
   838                           ; 0 bytes @ 0x8
   839                           
   840  0078                     ?___ftadd:	
   841                           ; 3 bytes @ 0x8
   842                           
   843  0078                     ?___lltoft:	
   844                           ; 3 bytes @ 0x8
   845                           
   846  0078                     i1lcd_gotoxy@address:	
   847                           ; 3 bytes @ 0x8
   848                           
   849  0078                     ___awtoft@c:	
   850                           ; 1 bytes @ 0x8
   851                           
   852  0078                     ___ftadd@f1:	
   853                           ; 2 bytes @ 0x8
   854                           
   855  0078                     ___lltoft@c:	
   856                           ; 3 bytes @ 0x8
   857                           
   858                           
   859                           ; 4 bytes @ 0x8
   860  0078                     	ds	1
   861  0079                     ??i1_lcd_putc:	
   862  0079                     ___lldiv@quotient:	
   863                           ; 0 bytes @ 0x9
   864                           
   865                           
   866                           ; 4 bytes @ 0x9
   867  0079                     	ds	2
   868  007B                     ??___awtoft:	
   869  007B                     i1lcd_putc@c:	
   870                           ; 0 bytes @ 0xB
   871                           
   872  007B                     ___ftadd@f2:	
   873                           ; 1 bytes @ 0xB
   874                           
   875                           
   876                           ; 3 bytes @ 0xB
   877  007B                     	ds	1
   878  007C                     ??___lltoft:	
   879  007C                     ?i1_lcd_escreve_string:	
   880                           ; 0 bytes @ 0xC
   881                           
   882  007C                     i1lcd_escreve_string@y:	
   883                           ; 0 bytes @ 0xC
   884                           
   885                           
   886                           ; 2 bytes @ 0xC
   887  007C                     	ds	1
   888  007D                     ___awtoft@sign:	
   889  007D                     ___lldiv@counter:	
   890                           ; 1 bytes @ 0xD
   891                           
   892  007D                     ___lltoft@exp:	
   893                           ; 1 bytes @ 0xD
   894                           
   895                           
   896                           ; 1 bytes @ 0xD
   897  007D                     	ds	1
   898  007E                     ??___ftsub:	
   899  007E                     ??i1_lcd_escreve_string:	
   900                           ; 0 bytes @ 0xE
   901                           
   902                           
   903                           	psect	cstackBANK0
   904  0020                     __pcstackBANK0:	
   905                           ; 0 bytes @ 0xE
   906                           
   907  0020                     ?_ProgressBar:	
   908  0020                     ??___ftadd:	
   909                           ; 0 bytes @ 0x0
   910                           
   911  0020                     ?___ftmul:	
   912                           ; 0 bytes @ 0x0
   913                           
   914  0020                     ?___llmod:	
   915                           ; 3 bytes @ 0x0
   916                           
   917  0020                     ProgressBar@preint:	
   918                           ; 4 bytes @ 0x0
   919                           
   920  0020                     ___ftmul@f1:	
   921                           ; 2 bytes @ 0x0
   922                           
   923  0020                     ___llmod@divisor:	
   924                           ; 3 bytes @ 0x0
   925                           
   926                           
   927                           ; 4 bytes @ 0x0
   928  0020                     	ds	2
   929  0022                     ??_ProgressBar:	
   930                           
   931                           ; 0 bytes @ 0x2
   932  0022                     	ds	1
   933  0023                     ___ftmul@f2:	
   934                           
   935                           ; 3 bytes @ 0x3
   936  0023                     	ds	1
   937  0024                     ___ftadd@sign:	
   938  0024                     ___llmod@dividend:	
   939                           ; 1 bytes @ 0x4
   940                           
   941                           
   942                           ; 4 bytes @ 0x4
   943  0024                     	ds	1
   944  0025                     ___ftadd@exp2:	
   945                           
   946                           ; 1 bytes @ 0x5
   947  0025                     	ds	1
   948  0026                     ??___ftmul:	
   949  0026                     ___ftadd@exp1:	
   950                           ; 0 bytes @ 0x6
   951                           
   952  0026                     ProgressBar@aux:	
   953                           ; 1 bytes @ 0x6
   954                           
   955                           
   956                           ; 16 bytes @ 0x6
   957  0026                     	ds	1
   958  0027                     ?___ftsub:	
   959  0027                     ___ftsub@f2:	
   960                           ; 3 bytes @ 0x7
   961                           
   962                           
   963                           ; 3 bytes @ 0x7
   964  0027                     	ds	1
   965  0028                     ??___llmod:	
   966                           
   967                           ; 0 bytes @ 0x8
   968  0028                     	ds	1
   969  0029                     ___llmod@counter:	
   970                           
   971                           ; 1 bytes @ 0x9
   972  0029                     	ds	1
   973  002A                     ?_sprintf:	
   974  002A                     sprintf@f:	
   975                           ; 2 bytes @ 0xA
   976                           
   977  002A                     ___ftmul@exp:	
   978                           ; 1 bytes @ 0xA
   979                           
   980  002A                     ___ftsub@f1:	
   981                           ; 1 bytes @ 0xA
   982                           
   983                           
   984                           ; 3 bytes @ 0xA
   985  002A                     	ds	1
   986  002B                     ___ftmul@f3_as_product:	
   987                           
   988                           ; 3 bytes @ 0xB
   989  002B                     	ds	3
   990  002E                     ___ftmul@cntr:	
   991                           
   992                           ; 1 bytes @ 0xE
   993  002E                     	ds	1
   994  002F                     ___ftmul@sign:	
   995                           
   996                           ; 1 bytes @ 0xF
   997  002F                     	ds	1
   998  0030                     ?___ftdiv:	
   999  0030                     ?___fttol:	
  1000                           ; 3 bytes @ 0x10
  1001                           
  1002  0030                     ___ftdiv@f2:	
  1003                           ; 4 bytes @ 0x10
  1004                           
  1005  0030                     ___fttol@f1:	
  1006                           ; 3 bytes @ 0x10
  1007                           
  1008                           
  1009                           ; 3 bytes @ 0x10
  1010  0030                     	ds	3
  1011  0033                     ??_sprintf:	
  1012  0033                     ___ftdiv@f1:	
  1013                           ; 0 bytes @ 0x13
  1014                           
  1015                           
  1016                           ; 3 bytes @ 0x13
  1017  0033                     	ds	1
  1018  0034                     ??___fttol:	
  1019                           
  1020                           ; 0 bytes @ 0x14
  1021  0034                     	ds	2
  1022  0036                     ??___ftdiv:	
  1023  0036                     ProgressBar@i:	
  1024                           ; 0 bytes @ 0x16
  1025                           
  1026                           
  1027                           ; 2 bytes @ 0x16
  1028  0036                     	ds	2
  1029  0038                     ProgressBar@result:	
  1030  0038                     sprintf@flag:	
  1031                           ; 1 bytes @ 0x18
  1032                           
  1033  0038                     ___fttol@sign1:	
  1034                           ; 1 bytes @ 0x18
  1035                           
  1036                           
  1037                           ; 1 bytes @ 0x18
  1038  0038                     	ds	1
  1039  0039                     sprintf@ap:	
  1040  0039                     ___fttol@lval:	
  1041                           ; 1 bytes @ 0x19
  1042                           
  1043                           
  1044                           ; 4 bytes @ 0x19
  1045  0039                     	ds	1
  1046  003A                     ___ftdiv@cntr:	
  1047  003A                     sprintf@_val:	
  1048                           ; 1 bytes @ 0x1A
  1049                           
  1050                           
  1051                           ; 4 bytes @ 0x1A
  1052  003A                     	ds	1
  1053  003B                     ___ftdiv@f3:	
  1054                           
  1055                           ; 3 bytes @ 0x1B
  1056  003B                     	ds	2
  1057  003D                     ___fttol@exp1:	
  1058                           
  1059                           ; 1 bytes @ 0x1D
  1060  003D                     	ds	1
  1061  003E                     sprintf@sp:	
  1062  003E                     ___ftdiv@exp:	
  1063                           ; 1 bytes @ 0x1E
  1064                           
  1065                           
  1066                           ; 1 bytes @ 0x1E
  1067  003E                     	ds	1
  1068  003F                     ___ftdiv@sign:	
  1069  003F                     sprintf@width:	
  1070                           ; 1 bytes @ 0x1F
  1071                           
  1072                           
  1073                           ; 2 bytes @ 0x1F
  1074  003F                     	ds	2
  1075  0041                     sprintf@prec:	
  1076                           
  1077                           ; 2 bytes @ 0x21
  1078  0041                     	ds	2
  1079  0043                     sprintf@c:	
  1080                           
  1081                           ; 1 bytes @ 0x23
  1082  0043                     	ds	1
  1083  0044                     ?_ftoa:	
  1084  0044                     ftoa@f:	
  1085                           ; 1 bytes @ 0x24
  1086                           
  1087                           
  1088                           ; 3 bytes @ 0x24
  1089  0044                     	ds	3
  1090  0047                     ftoa@status:	
  1091                           
  1092                           ; 1 bytes @ 0x27
  1093  0047                     	ds	1
  1094  0048                     ??_ftoa:	
  1095                           
  1096                           ; 0 bytes @ 0x28
  1097  0048                     	ds	1
  1098  0049                     ftoa@rem:	
  1099                           
  1100                           ; 4 bytes @ 0x29
  1101  0049                     	ds	4
  1102  004D                     ftoa@l:	
  1103                           
  1104                           ; 4 bytes @ 0x2D
  1105  004D                     	ds	4
  1106  0051                     ftoa@cp:	
  1107                           
  1108                           ; 1 bytes @ 0x31
  1109  0051                     	ds	1
  1110  0052                     ?_sendSerial:	
  1111  0052                     sendSerial@preint:	
  1112                           ; 0 bytes @ 0x32
  1113                           
  1114                           
  1115                           ; 2 bytes @ 0x32
  1116  0052                     	ds	2
  1117  0054                     sendSerial@recipiente:	
  1118                           
  1119                           ; 2 bytes @ 0x34
  1120  0054                     	ds	2
  1121  0056                     ??_sendSerial:	
  1122                           
  1123                           ; 0 bytes @ 0x36
  1124  0056                     	ds	2
  1125  0058                     ??_ISR:	
  1126                           
  1127                           ; 0 bytes @ 0x38
  1128  0058                     	ds	6
  1129  005E                     ISR@status:	
  1130                           
  1131                           ; 2 bytes @ 0x3E
  1132  005E                     	ds	2
  1133  0060                     ISR@input:	
  1134                           
  1135                           ; 3 bytes @ 0x40
  1136  0060                     	ds	3
  1137  0063                     ISR@pre:	
  1138                           
  1139                           ; 3 bytes @ 0x43
  1140  0063                     	ds	3
  1141  0066                     ISR@recebido:	
  1142                           
  1143                           ; 1 bytes @ 0x46
  1144  0066                     	ds	1
  1145  0067                     ISR@input2:	
  1146                           
  1147                           ; 3 bytes @ 0x47
  1148  0067                     	ds	3
  1149  006A                     ISR@preint:	
  1150                           
  1151                           ; 2 bytes @ 0x4A
  1152  006A                     	ds	2
  1153  006C                     ISR@percentual:	
  1154                           
  1155                           ; 1 bytes @ 0x4C
  1156  006C                     	ds	1
  1157                           
  1158                           	psect	maintext
  1159  0A77                     __pmaintext:	
  1160 ;;
  1161 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1162 ;;
  1163 ;; *************** function _main *****************
  1164 ;; Defined at:
  1165 ;;		line 332 in file "main.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;		None               void
  1172 ;; Registers used:
  1173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 17F/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       0       0       0       0
  1180 ;;      Locals:         0       0       0       0       0
  1181 ;;      Temps:          0       0       0       3       0
  1182 ;;      Totals:         0       0       0       3       0
  1183 ;;Total ram usage:        3 bytes
  1184 ;; Hardware stack levels required when called:   13
  1185 ;; This function calls:
  1186 ;;		_ADCRead
  1187 ;;		_USARTWriteString
  1188 ;;		_inicialize
  1189 ;;		_reset
  1190 ;; This function is called by:
  1191 ;;		Startup code after reset
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _main
  1197  0A77                     _main:	
  1198                           
  1199                           ;main.c: 333: inicialize();
  1200                           
  1201                           ;incstack = 0
  1202 ;; hardware stack exceeded
  1203                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1204  0A77  120A  158A  2664  120A  158A  	fcall	_inicialize
  1205                           
  1206                           ;main.c: 334: if (PORTCbits.RC2 == 1) {
  1207  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  1208  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  1209  0A7E  1D07               	btfss	7,2	;volatile
  1210  0A7F  2AAB               	goto	l152
  1211                           
  1212                           ;main.c: 335: USARTWriteString("Kaliane");
  1213  0A80  3074               	movlw	low (STR_8-__stringbase)
  1214  0A81  1683               	bsf	3,5	;RP0=1, select bank3
  1215  0A82  1703               	bsf	3,6	;RP1=1, select bank3
  1216  0A83  0091               	movwf	USARTWriteString@str^(0+384)
  1217  0A84  3080               	movlw	128
  1218  0A85  0092               	movwf	(USARTWriteString@str+1)^(0+384)
  1219  0A86  120A  158A  220F  120A  158A  	fcall	_USARTWriteString
  1220  0A8B                     l2689:	
  1221                           ;main.c: 336: while (1) {
  1222                           
  1223                           
  1224                           ;main.c: 337: ADCRead(1);
  1225  0A8B  3001               	movlw	1
  1226  0A8C  1683               	bsf	3,5	;RP0=1, select bank3
  1227  0A8D  1703               	bsf	3,6	;RP1=1, select bank3
  1228  0A8E  0090               	movwf	ADCRead@ch^(0+384)
  1229  0A8F  3000               	movlw	0
  1230  0A90  0091               	movwf	(ADCRead@ch^(0+384)+1)
  1231  0A91  120A  158A  20DD  120A  158A  	fcall	_ADCRead
  1232                           
  1233                           ;main.c: 338: _delay((unsigned long)((300)*(20000000/4000.0)));
  1234  0A96  3008               	movlw	8
  1235  0A97  1683               	bsf	3,5	;RP0=1, select bank3
  1236  0A98  1703               	bsf	3,6	;RP1=1, select bank3
  1237  0A99  00A3               	movwf	(??_main^(0+384)+2)
  1238  0A9A  309D               	movlw	157
  1239  0A9B  00A2               	movwf	(??_main^(0+384)+1)
  1240  0A9C  300B               	movlw	11
  1241  0A9D  00A1               	movwf	??_main^(0+384)
  1242  0A9E                     u3487:	
  1243  0A9E  0BA1               	decfsz	??_main^(0+384),f
  1244  0A9F  2A9E               	goto	u3487
  1245  0AA0  0BA2               	decfsz	(??_main^(0+384)+1),f
  1246  0AA1  2A9E               	goto	u3487
  1247  0AA2  0BA3               	decfsz	(??_main^(0+384)+2),f
  1248  0AA3  2A9E               	goto	u3487
  1249  0AA4  2AA5               	nop2
  1250                           
  1251                           ;main.c: 339: reset();
  1252  0AA5  120A  158A  2015  120A  158A  	fcall	_reset
  1253  0AAA  2A8B               	goto	l2689
  1254  0AAB                     l152:	
  1255  0AAB  120A  118A  2812   	ljmp	start
  1256  0AAE                     __end_of_main:	
  1257                           
  1258                           	psect	text1
  1259  0815                     __ptext1:	
  1260 ;; *************** function _reset *****************
  1261 ;; Defined at:
  1262 ;;		line 293 in file "main.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		None
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0
  1279 ;;      Totals:         0       0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    7
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           
  1291                           ;psect for function _reset
  1292  0815                     _reset:	
  1293                           
  1294                           ;main.c: 294: if (PORTCbits.RC3 == 1) {
  1295                           
  1296                           ;incstack = 0
  1297                           ; Regs used in _reset: []
  1298  0815  1283               	bcf	3,5	;RP0=0, select bank0
  1299  0816  1303               	bcf	3,6	;RP1=0, select bank0
  1300  0817  1D87               	btfss	7,3	;volatile
  1301  0818  0008               	return
  1302  0819                     l139:	
  1303  0819  1D87               	btfss	7,3	;volatile
  1304  081A  0008               	return
  1305                           
  1306                           ;main.c: 296: PORTDbits.RD2 = 1;
  1307                           
  1308                           ;main.c: 295: while (PORTCbits.RC3 == 1) {
  1309  081B  1508               	bsf	8,2	;volatile
  1310                           
  1311                           ;main.c: 297: PORTDbits.RD3 = 0;
  1312  081C  1188               	bcf	8,3	;volatile
  1313  081D  2819               	goto	l139
  1314  081E                     __end_of_reset:	
  1315                           
  1316                           	psect	text2
  1317  0E64                     __ptext2:	
  1318 ;; *************** function _inicialize *****************
  1319 ;; Defined at:
  1320 ;;		line 305 in file "main.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;		None
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;		None               void
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         0       0       0       0       0
  1335 ;;      Locals:         0       0       0       0       0
  1336 ;;      Temps:          0       0       0       3       0
  1337 ;;      Totals:         0       0       0       3       0
  1338 ;;Total ram usage:        3 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:   12
  1341 ;; This function calls:
  1342 ;;		_ADCInit
  1343 ;;		_LCDClear
  1344 ;;		_USARTWriteString
  1345 ;;		_init_lcd_4bit
  1346 ;;		_lcd_escreve_string
  1347 ;; This function is called by:
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _inicialize
  1354  0E64                     _inicialize:	
  1355                           
  1356                           ;main.c: 306: TRISA = 0b11111111;
  1357                           
  1358                           ;incstack = 0
  1359 ;; hardware stack exceeded
  1360                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1361  0E64  30FF               	movlw	255
  1362  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  1363  0E66  1303               	bcf	3,6	;RP1=0, select bank1
  1364  0E67  0085               	movwf	5	;volatile
  1365                           
  1366                           ;main.c: 307: PORTAbits.RA0 = 0;
  1367  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  1368  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  1369  0E6A  1005               	bcf	5,0	;volatile
  1370                           
  1371                           ;main.c: 308: TRISDbits.TRISD2 = 0;
  1372  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  1373  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  1374  0E6D  1108               	bcf	8,2	;volatile
  1375                           
  1376                           ;main.c: 309: PORTDbits.RD2 = 1;
  1377  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  1378  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  1379  0E70  1508               	bsf	8,2	;volatile
  1380                           
  1381                           ;main.c: 310: TRISDbits.TRISD3 = 0;
  1382  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  1383  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  1384  0E73  1188               	bcf	8,3	;volatile
  1385                           
  1386                           ;main.c: 311: PORTDbits.RD3 = 0;
  1387  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  1389  0E76  1188               	bcf	8,3	;volatile
  1390                           
  1391                           ;main.c: 313: TRISCbits.TRISC0 = 1;
  1392  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  1394  0E79  1407               	bsf	7,0	;volatile
  1395                           
  1396                           ;main.c: 314: TRISCbits.TRISC1 = 1;
  1397  0E7A  1487               	bsf	7,1	;volatile
  1398                           
  1399                           ;main.c: 315: TRISCbits.TRISC2 = 1;
  1400  0E7B  1507               	bsf	7,2	;volatile
  1401                           
  1402                           ;main.c: 316: TRISCbits.TRISC3 = 1;
  1403  0E7C  1587               	bsf	7,3	;volatile
  1404                           
  1405                           ;main.c: 317: PORTCbits.RC3 = 0;
  1406  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  1408  0E7F  1187               	bcf	7,3	;volatile
  1409                           
  1410                           ;main.c: 318: PORTCbits.RC2 = 0;
  1411  0E80  1107               	bcf	7,2	;volatile
  1412                           
  1413                           ;main.c: 319: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1414  0E81  3033               	movlw	51
  1415  0E82  1683               	bsf	3,5	;RP0=1, select bank3
  1416  0E83  1703               	bsf	3,6	;RP1=1, select bank3
  1417  0E84  00A0               	movwf	(??_inicialize^(0+384)+2)
  1418  0E85  30BC               	movlw	188
  1419  0E86  009F               	movwf	(??_inicialize^(0+384)+1)
  1420  0E87  3010               	movlw	16
  1421  0E88  009E               	movwf	??_inicialize^(0+384)
  1422  0E89                     u3497:	
  1423  0E89  0B9E               	decfsz	??_inicialize^(0+384),f
  1424  0E8A  2E89               	goto	u3497
  1425  0E8B  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1426  0E8C  2E89               	goto	u3497
  1427  0E8D  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1428  0E8E  2E89               	goto	u3497
  1429                           
  1430                           ;main.c: 320: init_lcd_4bit();
  1431  0E8F  120A  158A  2596  120A  158A  	fcall	_init_lcd_4bit
  1432                           
  1433                           ;main.c: 321: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1434  0E94  3033               	movlw	51
  1435  0E95  1683               	bsf	3,5	;RP0=1, select bank3
  1436  0E96  1703               	bsf	3,6	;RP1=1, select bank3
  1437  0E97  00A0               	movwf	(??_inicialize^(0+384)+2)
  1438  0E98  30BC               	movlw	188
  1439  0E99  009F               	movwf	(??_inicialize^(0+384)+1)
  1440  0E9A  3010               	movlw	16
  1441  0E9B  009E               	movwf	??_inicialize^(0+384)
  1442  0E9C                     u3507:	
  1443  0E9C  0B9E               	decfsz	??_inicialize^(0+384),f
  1444  0E9D  2E9C               	goto	u3507
  1445  0E9E  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1446  0E9F  2E9C               	goto	u3507
  1447  0EA0  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1448  0EA1  2E9C               	goto	u3507
  1449                           
  1450                           ;main.c: 322: INTCONbits.PEIE = 1;
  1451  0EA2  170B               	bsf	11,6	;volatile
  1452                           
  1453                           ;main.c: 323: INTCONbits.GIE = 1;
  1454  0EA3  178B               	bsf	11,7	;volatile
  1455                           
  1456                           ;main.c: 324: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1457  0EA4  301A               	movlw	26
  1458  0EA5  1683               	bsf	3,5	;RP0=1, select bank3
  1459  0EA6  1703               	bsf	3,6	;RP1=1, select bank3
  1460  0EA7  00A0               	movwf	(??_inicialize^(0+384)+2)
  1461  0EA8  305E               	movlw	94
  1462  0EA9  009F               	movwf	(??_inicialize^(0+384)+1)
  1463  0EAA  3086               	movlw	134
  1464  0EAB  009E               	movwf	??_inicialize^(0+384)
  1465  0EAC                     u3517:	
  1466  0EAC  0B9E               	decfsz	??_inicialize^(0+384),f
  1467  0EAD  2EAC               	goto	u3517
  1468  0EAE  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1469  0EAF  2EAC               	goto	u3517
  1470  0EB0  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1471  0EB1  2EAC               	goto	u3517
  1472  0EB2  0000               	nop
  1473                           
  1474                           ;main.c: 325: ADCInit();
  1475  0EB3  120A  158A  205D  120A  158A  	fcall	_ADCInit
  1476                           
  1477                           ;main.c: 326: lcd_escreve_string("\fLoading PIC...");
  1478  0EB8  3059               	movlw	low (STR_6-__stringbase)
  1479  0EB9  1683               	bsf	3,5	;RP0=1, select bank3
  1480  0EBA  1703               	bsf	3,6	;RP1=1, select bank3
  1481  0EBB  009C               	movwf	lcd_escreve_string@y^(0+384)
  1482  0EBC  3080               	movlw	128
  1483  0EBD  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1484  0EBE  120A  158A  21DE  120A  158A  	fcall	_lcd_escreve_string
  1485                           
  1486                           ;main.c: 327: USARTWriteString("\fLoading PIC...");
  1487  0EC3  3059               	movlw	low (STR_6-__stringbase)
  1488  0EC4  1683               	bsf	3,5	;RP0=1, select bank3
  1489  0EC5  1703               	bsf	3,6	;RP1=1, select bank3
  1490  0EC6  0091               	movwf	USARTWriteString@str^(0+384)
  1491  0EC7  3080               	movlw	128
  1492  0EC8  0092               	movwf	(USARTWriteString@str+1)^(0+384)
  1493  0EC9  120A  158A  220F  120A  158A  	fcall	_USARTWriteString
  1494                           
  1495                           ;main.c: 328: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1496  0ECE  307F               	movlw	127
  1497  0ECF  1683               	bsf	3,5	;RP0=1, select bank3
  1498  0ED0  1703               	bsf	3,6	;RP1=1, select bank3
  1499  0ED1  00A0               	movwf	(??_inicialize^(0+384)+2)
  1500  0ED2  30D4               	movlw	212
  1501  0ED3  009F               	movwf	(??_inicialize^(0+384)+1)
  1502  0ED4  30AE               	movlw	174
  1503  0ED5  009E               	movwf	??_inicialize^(0+384)
  1504  0ED6                     u3527:	
  1505  0ED6  0B9E               	decfsz	??_inicialize^(0+384),f
  1506  0ED7  2ED6               	goto	u3527
  1507  0ED8  0B9F               	decfsz	(??_inicialize^(0+384)+1),f
  1508  0ED9  2ED6               	goto	u3527
  1509  0EDA  0BA0               	decfsz	(??_inicialize^(0+384)+2),f
  1510  0EDB  2ED6               	goto	u3527
  1511  0EDC  2EDD               	nop2
  1512                           
  1513                           ;main.c: 329: LCDClear();
  1514  0EDD  120A  158A  2361   	fcall	_LCDClear
  1515  0EE0  0008               	return
  1516  0EE1                     __end_of_inicialize:	
  1517                           
  1518                           	psect	text3
  1519  09DE                     __ptext3:	
  1520 ;; *************** function _lcd_escreve_string *****************
  1521 ;; Defined at:
  1522 ;;		line 168 in file "lcd_4bit.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1525 ;;		 -> ftoa@buf(17), STR_6(16), STR_4(2), STR_2(7), 
  1526 ;;		 -> ProgressBar@aux(16), 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;		None               void
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1538 ;;      Params:         0       0       0       2       0
  1539 ;;      Locals:         0       0       0       0       0
  1540 ;;      Temps:          0       0       0       0       0
  1541 ;;      Totals:         0       0       0       2       0
  1542 ;;Total ram usage:        2 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:   11
  1545 ;; This function calls:
  1546 ;;		_lcd_putc
  1547 ;; This function is called by:
  1548 ;;		_inicialize
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _lcd_escreve_string
  1554  09DE                     _lcd_escreve_string:	
  1555  09DE                     l2377:	
  1556                           ;lcd_4bit.c: 170: while(*y!='\0')
  1557                           
  1558                           ;incstack = 0
  1559 ;; hardware stack exceeded
  1560                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1561                           
  1562  09DE  1683               	bsf	3,5	;RP0=1, select bank3
  1563  09DF  1703               	bsf	3,6	;RP1=1, select bank3
  1564  09E0  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1565  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  1566  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  1567  09E3  00FF               	movwf	127
  1568  09E4  1683               	bsf	3,5	;RP0=1, select bank3
  1569  09E5  1703               	bsf	3,6	;RP1=1, select bank3
  1570  09E6  081C               	movf	lcd_escreve_string@y^(0+384),w
  1571  09E7  0084               	movwf	4
  1572  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  1573  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  1574  09EA  120A  118A  2745  120A  158A  	fcall	stringtab
  1575  09EF  3800               	iorlw	0
  1576  09F0  1903               	btfsc	3,2
  1577  09F1  0008               	return
  1578                           
  1579                           ;lcd_4bit.c: 171: {
  1580                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1581  09F2  1683               	bsf	3,5	;RP0=1, select bank3
  1582  09F3  1703               	bsf	3,6	;RP1=1, select bank3
  1583  09F4  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1584  09F5  1283               	bcf	3,5	;RP0=0, select bank0
  1585  09F6  1303               	bcf	3,6	;RP1=0, select bank0
  1586  09F7  00FF               	movwf	127
  1587  09F8  1683               	bsf	3,5	;RP0=1, select bank3
  1588  09F9  1703               	bsf	3,6	;RP1=1, select bank3
  1589  09FA  081C               	movf	lcd_escreve_string@y^(0+384),w
  1590  09FB  0084               	movwf	4
  1591  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  1592  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  1593  09FE  120A  118A  2745  120A  158A  	fcall	stringtab
  1594  0A03  120A  158A  23A1  120A  158A  	fcall	_lcd_putc
  1595                           
  1596                           ;lcd_4bit.c: 173: y++;
  1597  0A08  3001               	movlw	1
  1598  0A09  1683               	bsf	3,5	;RP0=1, select bank3
  1599  0A0A  1703               	bsf	3,6	;RP1=1, select bank3
  1600  0A0B  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1601  0A0C  1803               	skipnc
  1602  0A0D  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1603  0A0E  29DE               	goto	l2377
  1604  0A0F                     __end_of_lcd_escreve_string:	
  1605                           
  1606                           	psect	text4
  1607  0BA1                     __ptext4:	
  1608 ;; *************** function _lcd_putc *****************
  1609 ;; Defined at:
  1610 ;;		line 82 in file "lcd_4bit.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  c               1    wreg     unsigned char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  c               1   11[BANK3 ] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;		None               void
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       1       0
  1626 ;;      Temps:          0       0       0       2       0
  1627 ;;      Totals:         0       0       0       3       0
  1628 ;;Total ram usage:        3 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:   10
  1631 ;; This function calls:
  1632 ;;		_lcd_envia_byte
  1633 ;;		_lcd_gotoxy
  1634 ;; This function is called by:
  1635 ;;		_lcd_escreve_string
  1636 ;;		_lcd_escreve_p
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _lcd_putc
  1642  0BA1                     _lcd_putc:	
  1643                           
  1644                           ;incstack = 0
  1645 ;; hardware stack exceeded
  1646                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1647                           ;lcd_putc@c stored from wreg
  1648  0BA1  1683               	bsf	3,5	;RP0=1, select bank3
  1649  0BA2  1703               	bsf	3,6	;RP1=1, select bank3
  1650  0BA3  009B               	movwf	lcd_putc@c^(0+384)
  1651                           
  1652                           ;lcd_4bit.c: 84: switch(c)
  1653  0BA4  2BDA               	goto	l2069
  1654  0BA5                     l2057:	
  1655                           ;lcd_4bit.c: 85: {
  1656                           ;lcd_4bit.c: 86: case '\f':
  1657                           
  1658                           
  1659                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1660  0BA5  0192               	clrf	lcd_envia_byte@n^(0+384)
  1661  0BA6  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1662  0BA7  3000               	movlw	0
  1663  0BA8  120A  158A  2242  120A  158A  	fcall	_lcd_envia_byte
  1664                           
  1665                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1666  0BAD  300D               	movlw	13
  1667  0BAE  1683               	bsf	3,5	;RP0=1, select bank3
  1668  0BAF  1703               	bsf	3,6	;RP1=1, select bank3
  1669  0BB0  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1670  0BB1  30FB               	movlw	251
  1671  0BB2  0099               	movwf	??_lcd_putc^(0+384)
  1672  0BB3                     u3537:	
  1673  0BB3  0B99               	decfsz	??_lcd_putc^(0+384),f
  1674  0BB4  2BB3               	goto	u3537
  1675  0BB5  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1676  0BB6  2BB3               	goto	u3537
  1677  0BB7  2BB8               	nop2
  1678                           
  1679                           ;lcd_4bit.c: 89: break;
  1680  0BB8  0008               	return
  1681  0BB9                     l2061:	
  1682                           ;lcd_4bit.c: 91: case '\n':
  1683                           
  1684                           
  1685                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1686  0BB9  3002               	movlw	2
  1687  0BBA  1683               	bsf	3,5	;RP0=1, select bank3
  1688  0BBB  1703               	bsf	3,6	;RP1=1, select bank3
  1689  0BBC  0099               	movwf	??_lcd_putc^(0+384)
  1690  0BBD  0819               	movf	??_lcd_putc^(0+384),w
  1691  0BBE  0095               	movwf	lcd_gotoxy@y^(0+384)
  1692  0BBF  3001               	movlw	1
  1693  0BC0  120A  158A  20C1   	fcall	_lcd_gotoxy
  1694                           
  1695                           ;lcd_4bit.c: 93: break;
  1696  0BC3  0008               	return
  1697  0BC4                     l2063:	
  1698                           ;lcd_4bit.c: 95: case '\b':
  1699                           
  1700                           
  1701                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1702  0BC4  3010               	movlw	16
  1703  0BC5  1683               	bsf	3,5	;RP0=1, select bank3
  1704  0BC6  1703               	bsf	3,6	;RP1=1, select bank3
  1705  0BC7  0099               	movwf	??_lcd_putc^(0+384)
  1706  0BC8  0819               	movf	??_lcd_putc^(0+384),w
  1707  0BC9  0092               	movwf	lcd_envia_byte@n^(0+384)
  1708  0BCA  3000               	movlw	0
  1709  0BCB  120A  158A  2242   	fcall	_lcd_envia_byte
  1710                           
  1711                           ;lcd_4bit.c: 97: break;
  1712  0BCE  0008               	return
  1713  0BCF                     l2065:	
  1714                           ;lcd_4bit.c: 99: default:
  1715                           
  1716                           
  1717                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1718  0BCF  1683               	bsf	3,5	;RP0=1, select bank3
  1719  0BD0  1703               	bsf	3,6	;RP1=1, select bank3
  1720  0BD1  081B               	movf	lcd_putc@c^(0+384),w
  1721  0BD2  0099               	movwf	??_lcd_putc^(0+384)
  1722  0BD3  0819               	movf	??_lcd_putc^(0+384),w
  1723  0BD4  0092               	movwf	lcd_envia_byte@n^(0+384)
  1724  0BD5  3001               	movlw	1
  1725  0BD6  120A  158A  2242   	fcall	_lcd_envia_byte
  1726                           
  1727                           ;lcd_4bit.c: 102: }
  1728                           
  1729                           ;lcd_4bit.c: 101: break;
  1730  0BD9  0008               	return
  1731  0BDA                     l2069:	
  1732  0BDA  1683               	bsf	3,5	;RP0=1, select bank3
  1733  0BDB  1703               	bsf	3,6	;RP1=1, select bank3
  1734  0BDC  081B               	movf	lcd_putc@c^(0+384),w
  1735                           
  1736                           ; Switch size 1, requested type "space"
  1737                           ; Number of cases is 3, Range of values is 8 to 12
  1738                           ; switch strategies available:
  1739                           ; Name         Instructions Cycles
  1740                           ; simple_byte           10     6 (average)
  1741                           ; direct_byte           26    11 (fixed)
  1742                           ; jumptable            263     9 (fixed)
  1743                           ;	Chosen strategy is simple_byte
  1744  0BDD  3A08               	xorlw	8	; case 8
  1745  0BDE  1903               	skipnz
  1746  0BDF  2BC4               	goto	l2063
  1747  0BE0  3A02               	xorlw	2	; case 10
  1748  0BE1  1903               	skipnz
  1749  0BE2  2BB9               	goto	l2061
  1750  0BE3  3A06               	xorlw	6	; case 12
  1751  0BE4  1903               	skipnz
  1752  0BE5  2BA5               	goto	l2057
  1753  0BE6  2BCF               	goto	l2065
  1754  0BE7  0008               	return
  1755  0BE8                     __end_of_lcd_putc:	
  1756                           
  1757                           	psect	text5
  1758  08C1                     __ptext5:	
  1759 ;; *************** function _lcd_gotoxy *****************
  1760 ;; Defined at:
  1761 ;;		line 70 in file "lcd_4bit.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  x               1    wreg     unsigned char 
  1764 ;;  y               1    5[BANK3 ] unsigned char 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  x               1    7[BANK3 ] unsigned char 
  1767 ;;  address         1    8[BANK3 ] unsigned char 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;		None               void
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1777 ;;      Params:         0       0       0       1       0
  1778 ;;      Locals:         0       0       0       2       0
  1779 ;;      Temps:          0       0       0       1       0
  1780 ;;      Totals:         0       0       0       4       0
  1781 ;;Total ram usage:        4 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    9
  1784 ;; This function calls:
  1785 ;;		_lcd_envia_byte
  1786 ;; This function is called by:
  1787 ;;		_lcd_putc
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           
  1792                           ;psect for function _lcd_gotoxy
  1793  08C1                     _lcd_gotoxy:	
  1794                           
  1795                           ;incstack = 0
  1796 ;; hardware stack exceeded
  1797                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1798                           ;lcd_gotoxy@x stored from wreg
  1799  08C1  1683               	bsf	3,5	;RP0=1, select bank3
  1800  08C2  1703               	bsf	3,6	;RP1=1, select bank3
  1801  08C3  0097               	movwf	lcd_gotoxy@x^(0+384)
  1802                           
  1803                           ;lcd_4bit.c: 72: unsigned char address;
  1804                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1805  08C4  0815               	movf	lcd_gotoxy@y^(0+384),w
  1806  08C5  3A01               	xorlw	1
  1807  08C6  1903               	skipnz
  1808  08C7  28CD               	goto	l1891
  1809  08C8  3040               	movlw	64
  1810  08C9  0096               	movwf	??_lcd_gotoxy^(0+384)
  1811  08CA  0816               	movf	??_lcd_gotoxy^(0+384),w
  1812  08CB  0098               	movwf	lcd_gotoxy@address^(0+384)
  1813  08CC  28CE               	goto	l1893
  1814  08CD                     l1891:	
  1815                           
  1816                           ;lcd_4bit.c: 75: else address=0;
  1817  08CD  0198               	clrf	lcd_gotoxy@address^(0+384)
  1818  08CE                     l1893:	
  1819                           
  1820                           ;lcd_4bit.c: 77: address += x-1;
  1821  08CE  0817               	movf	lcd_gotoxy@x^(0+384),w
  1822  08CF  3EFF               	addlw	255
  1823  08D0  0096               	movwf	??_lcd_gotoxy^(0+384)
  1824  08D1  0816               	movf	??_lcd_gotoxy^(0+384),w
  1825  08D2  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1826                           
  1827                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1828  08D3  0818               	movf	lcd_gotoxy@address^(0+384),w
  1829  08D4  3880               	iorlw	128
  1830  08D5  0096               	movwf	??_lcd_gotoxy^(0+384)
  1831  08D6  0816               	movf	??_lcd_gotoxy^(0+384),w
  1832  08D7  0092               	movwf	lcd_envia_byte@n^(0+384)
  1833  08D8  3000               	movlw	0
  1834  08D9  120A  158A  2242   	fcall	_lcd_envia_byte
  1835  08DC  0008               	return
  1836  08DD                     __end_of_lcd_gotoxy:	
  1837                           
  1838                           	psect	text6
  1839  0D96                     __ptext6:	
  1840 ;; *************** function _init_lcd_4bit *****************
  1841 ;; Defined at:
  1842 ;;		line 6 in file "lcd_4bit.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  i               1    7[BANK3 ] unsigned char 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;		None               void
  1849 ;; Registers used:
  1850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1856 ;;      Params:         0       0       0       0       0
  1857 ;;      Locals:         0       0       0       1       0
  1858 ;;      Temps:          0       0       0       2       0
  1859 ;;      Totals:         0       0       0       3       0
  1860 ;;Total ram usage:        3 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    9
  1863 ;; This function calls:
  1864 ;;		_lcd_envia_byte
  1865 ;;		_lcd_envia_nibble
  1866 ;; This function is called by:
  1867 ;;		_inicialize
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _init_lcd_4bit
  1873  0D96                     _init_lcd_4bit:	
  1874                           
  1875                           ;lcd_4bit.c: 8: unsigned char i;
  1876                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1877                           
  1878                           ;incstack = 0
  1879 ;; hardware stack exceeded
  1880                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1881  0D96  1683               	bsf	3,5	;RP0=1, select bank1
  1882  0D97  1303               	bcf	3,6	;RP1=0, select bank1
  1883  0D98  1206               	bcf	6,4	;volatile
  1884                           
  1885                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1886  0D99  1286               	bcf	6,5	;volatile
  1887                           
  1888                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1889  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  1890  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  1891  0D9C  1206               	bcf	6,4	;volatile
  1892                           
  1893                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1894  0D9D  1286               	bcf	6,5	;volatile
  1895                           
  1896                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1897  0D9E  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0D9F  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0DA0  1006               	bcf	6,0	;volatile
  1900                           
  1901                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1902  0DA1  1086               	bcf	6,1	;volatile
  1903                           
  1904                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1905  0DA2  1106               	bcf	6,2	;volatile
  1906                           
  1907                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1908  0DA3  1186               	bcf	6,3	;volatile
  1909                           
  1910                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1911  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0DA6  1006               	bcf	6,0	;volatile
  1914                           
  1915                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1916  0DA7  1086               	bcf	6,1	;volatile
  1917                           
  1918                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1919  0DA8  1106               	bcf	6,2	;volatile
  1920                           
  1921                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1922  0DA9  1186               	bcf	6,3	;volatile
  1923                           
  1924                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1925  0DAA  3062               	movlw	98
  1926  0DAB  1683               	bsf	3,5	;RP0=1, select bank3
  1927  0DAC  1703               	bsf	3,6	;RP1=1, select bank3
  1928  0DAD  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1929  0DAE  3065               	movlw	101
  1930  0DAF  0095               	movwf	??_init_lcd_4bit^(0+384)
  1931  0DB0                     u3547:	
  1932  0DB0  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1933  0DB1  2DB0               	goto	u3547
  1934  0DB2  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1935  0DB3  2DB0               	goto	u3547
  1936  0DB4  2DB5               	nop2
  1937                           
  1938                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1939  0DB5  1683               	bsf	3,5	;RP0=1, select bank3
  1940  0DB6  1703               	bsf	3,6	;RP1=1, select bank3
  1941  0DB7  0197               	clrf	init_lcd_4bit@i^(0+384)
  1942  0DB8  3003               	movlw	3
  1943  0DB9  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1944  0DBA  1803               	btfsc	3,0
  1945  0DBB  2DD7               	goto	l2419
  1946  0DBC                     l2411:	
  1947                           
  1948                           ;lcd_4bit.c: 26: {
  1949                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1950  0DBC  3003               	movlw	3
  1951  0DBD  120A  158A  2482  120A  158A  	fcall	_lcd_envia_nibble
  1952                           
  1953                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1954  0DC2  3021               	movlw	33
  1955  0DC3  1683               	bsf	3,5	;RP0=1, select bank3
  1956  0DC4  1703               	bsf	3,6	;RP1=1, select bank3
  1957  0DC5  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1958  0DC6  3076               	movlw	118
  1959  0DC7  0095               	movwf	??_init_lcd_4bit^(0+384)
  1960  0DC8                     u3557:	
  1961  0DC8  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1962  0DC9  2DC8               	goto	u3557
  1963  0DCA  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1964  0DCB  2DC8               	goto	u3557
  1965  0DCC  0000               	nop
  1966  0DCD  3001               	movlw	1
  1967  0DCE  1683               	bsf	3,5	;RP0=1, select bank3
  1968  0DCF  1703               	bsf	3,6	;RP1=1, select bank3
  1969  0DD0  0095               	movwf	??_init_lcd_4bit^(0+384)
  1970  0DD1  0815               	movf	??_init_lcd_4bit^(0+384),w
  1971  0DD2  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1972  0DD3  3003               	movlw	3
  1973  0DD4  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1974  0DD5  1C03               	skipc
  1975  0DD6  2DBC               	goto	l2411
  1976  0DD7                     l2419:	
  1977                           
  1978                           ;lcd_4bit.c: 29: }
  1979                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1980  0DD7  3002               	movlw	2
  1981  0DD8  120A  158A  2482  120A  158A  	fcall	_lcd_envia_nibble
  1982                           
  1983                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1984  0DDD  1683               	bsf	3,5	;RP0=1, select bank3
  1985  0DDE  1703               	bsf	3,6	;RP1=1, select bank3
  1986  0DDF  0197               	clrf	init_lcd_4bit@i^(0+384)
  1987  0DE0                     L1:	
  1988  0DE0  3004               	movlw	4
  1989  0DE1  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1990  0DE2  1803               	btfsc	3,0
  1991  0DE3  0008               	return
  1992                           
  1993                           ;lcd_4bit.c: 33: {
  1994                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1995  0DE4  0817               	movf	init_lcd_4bit@i^(0+384),w
  1996  0DE5  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1997  0DE6  0084               	movwf	4
  1998  0DE7  120A  118A  274F  120A  158A  	fcall	stringdir
  1999  0DEC  0095               	movwf	??_init_lcd_4bit^(0+384)
  2000  0DED  0815               	movf	??_init_lcd_4bit^(0+384),w
  2001  0DEE  0092               	movwf	lcd_envia_byte@n^(0+384)
  2002  0DEF  3000               	movlw	0
  2003  0DF0  120A  158A  2242  120A  158A  	fcall	_lcd_envia_byte
  2004  0DF5  3001               	movlw	1
  2005  0DF6  1683               	bsf	3,5	;RP0=1, select bank3
  2006  0DF7  1703               	bsf	3,6	;RP1=1, select bank3
  2007  0DF8  0095               	movwf	??_init_lcd_4bit^(0+384)
  2008  0DF9  0815               	movf	??_init_lcd_4bit^(0+384),w
  2009  0DFA  0797               	addwf	init_lcd_4bit@i^(0+384),f
  2010  0DFB  2DE0               	goto	L1
  2011  0DFC                     __end_of_init_lcd_4bit:	
  2012                           
  2013                           	psect	text7
  2014  0A0F                     __ptext7:	
  2015 ;; *************** function _USARTWriteString *****************
  2016 ;; Defined at:
  2017 ;;		line 81 in file "main.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  str             2    1[BANK3 ] PTR const unsigned char 
  2020 ;;		 -> ftoa@buf(17), STR_8(8), STR_7(16), STR_5(2), 
  2021 ;;		 -> STR_3(7), ROM(8192), STR_1(40), 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;		None               void
  2026 ;; Registers used:
  2027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2033 ;;      Params:         0       0       0       2       0
  2034 ;;      Locals:         0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0
  2036 ;;      Totals:         0       0       0       2       0
  2037 ;;Total ram usage:        2 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    8
  2040 ;; This function calls:
  2041 ;;		_USARTWriteChar
  2042 ;; This function is called by:
  2043 ;;		_inicialize
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           
  2049                           ;psect for function _USARTWriteString
  2050  0A0F                     _USARTWriteString:	
  2051  0A0F                     l2343:	
  2052                           ;main.c: 83: while (*str != '\0') {
  2053                           
  2054                           ;incstack = 0
  2055 ;; hardware stack exceeded
  2056                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2057                           
  2058  0A0F  1683               	bsf	3,5	;RP0=1, select bank3
  2059  0A10  1703               	bsf	3,6	;RP1=1, select bank3
  2060  0A11  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  2061  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0A14  00FF               	movwf	127
  2064  0A15  1683               	bsf	3,5	;RP0=1, select bank3
  2065  0A16  1703               	bsf	3,6	;RP1=1, select bank3
  2066  0A17  0811               	movf	USARTWriteString@str^(0+384),w
  2067  0A18  0084               	movwf	4
  2068  0A19  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0A1A  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0A1B  120A  118A  2745  120A  158A  	fcall	stringtab
  2071  0A20  3800               	iorlw	0
  2072  0A21  1903               	btfsc	3,2
  2073  0A22  0008               	return
  2074                           
  2075                           ;main.c: 85: USARTWriteChar(*str);
  2076  0A23  1683               	bsf	3,5	;RP0=1, select bank3
  2077  0A24  1703               	bsf	3,6	;RP1=1, select bank3
  2078  0A25  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  2079  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  2080  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  2081  0A28  00FF               	movwf	127
  2082  0A29  1683               	bsf	3,5	;RP0=1, select bank3
  2083  0A2A  1703               	bsf	3,6	;RP1=1, select bank3
  2084  0A2B  0811               	movf	USARTWriteString@str^(0+384),w
  2085  0A2C  0084               	movwf	4
  2086  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  2087  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  2088  0A2F  120A  118A  2745  120A  158A  	fcall	stringtab
  2089  0A34  120A  158A  202C  120A  158A  	fcall	_USARTWriteChar
  2090                           
  2091                           ;main.c: 86: str++;
  2092  0A39  3001               	movlw	1
  2093  0A3A  1683               	bsf	3,5	;RP0=1, select bank3
  2094  0A3B  1703               	bsf	3,6	;RP1=1, select bank3
  2095  0A3C  0791               	addwf	USARTWriteString@str^(0+384),f
  2096  0A3D  1803               	skipnc
  2097  0A3E  0A92               	incf	(USARTWriteString@str+1)^(0+384),f
  2098  0A3F  3000               	movlw	0
  2099  0A40  0792               	addwf	(USARTWriteString@str+1)^(0+384),f
  2100  0A41  2A0F               	goto	l2343
  2101  0A42                     __end_of_USARTWriteString:	
  2102                           
  2103                           	psect	text8
  2104  082C                     __ptext8:	
  2105 ;; *************** function _USARTWriteChar *****************
  2106 ;; Defined at:
  2107 ;;		line 72 in file "main.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  USARTData       1    wreg     unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  USARTData       1    0[BANK3 ] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;		None               void
  2114 ;; Registers used:
  2115 ;;		wreg
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2121 ;;      Params:         0       0       0       0       0
  2122 ;;      Locals:         0       0       0       1       0
  2123 ;;      Temps:          0       0       0       0       0
  2124 ;;      Totals:         0       0       0       1       0
  2125 ;;Total ram usage:        1 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    7
  2128 ;; This function calls:
  2129 ;;		Nothing
  2130 ;; This function is called by:
  2131 ;;		_USARTWriteString
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           
  2136                           ;psect for function _USARTWriteChar
  2137  082C                     _USARTWriteChar:	
  2138                           
  2139                           ;incstack = 0
  2140 ;; hardware stack exceeded
  2141                           ; Regs used in _USARTWriteChar: [wreg]
  2142                           ;USARTWriteChar@USARTData stored from wreg
  2143  082C  1683               	bsf	3,5	;RP0=1, select bank3
  2144  082D  1703               	bsf	3,6	;RP1=1, select bank3
  2145  082E  0090               	movwf	USARTWriteChar@USARTData^(0+384)
  2146  082F                     l72:	
  2147                           ;main.c: 73: while (!PIR1bits.TXIF);
  2148                           
  2149  082F  1283               	bcf	3,5	;RP0=0, select bank0
  2150  0830  1303               	bcf	3,6	;RP1=0, select bank0
  2151  0831  1E0C               	btfss	12,4	;volatile
  2152  0832  282F               	goto	l72
  2153                           
  2154                           ;main.c: 74: TXREG = USARTData;
  2155  0833  1683               	bsf	3,5	;RP0=1, select bank3
  2156  0834  1703               	bsf	3,6	;RP1=1, select bank3
  2157  0835  0810               	movf	USARTWriteChar@USARTData^(0+384),w
  2158  0836  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0837  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0838  0099               	movwf	25	;volatile
  2161  0839  0008               	return
  2162  083A                     __end_of_USARTWriteChar:	
  2163                           
  2164                           	psect	text9
  2165  0B61                     __ptext9:	
  2166 ;; *************** function _LCDClear *****************
  2167 ;; Defined at:
  2168 ;;		line 179 in file "lcd_4bit.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;		None               void
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2182 ;;      Params:         0       0       0       0       0
  2183 ;;      Locals:         0       0       0       0       0
  2184 ;;      Temps:          0       0       0       2       0
  2185 ;;      Totals:         0       0       0       2       0
  2186 ;;Total ram usage:        2 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    9
  2189 ;; This function calls:
  2190 ;;		_lcd_envia_byte
  2191 ;; This function is called by:
  2192 ;;		_inicialize
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _LCDClear
  2198  0B61                     _LCDClear:	
  2199                           
  2200                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2201                           
  2202                           ;incstack = 0
  2203 ;; hardware stack exceeded
  2204                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2205  0B61  1683               	bsf	3,5	;RP0=1, select bank3
  2206  0B62  1703               	bsf	3,6	;RP1=1, select bank3
  2207  0B63  0192               	clrf	lcd_envia_byte@n^(0+384)
  2208  0B64  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2209  0B65  3000               	movlw	0
  2210  0B66  120A  158A  2242  120A  158A  	fcall	_lcd_envia_byte
  2211                           
  2212                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2213  0B6B  3041               	movlw	65
  2214  0B6C  1683               	bsf	3,5	;RP0=1, select bank3
  2215  0B6D  1703               	bsf	3,6	;RP1=1, select bank3
  2216  0B6E  0096               	movwf	(??_LCDClear^(0+384)+1)
  2217  0B6F  30EE               	movlw	238
  2218  0B70  0095               	movwf	??_LCDClear^(0+384)
  2219  0B71                     u3567:	
  2220  0B71  0B95               	decfsz	??_LCDClear^(0+384),f
  2221  0B72  2B71               	goto	u3567
  2222  0B73  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2223  0B74  2B71               	goto	u3567
  2224  0B75  0000               	nop
  2225                           
  2226                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2227  0B76  300C               	movlw	12
  2228  0B77  1683               	bsf	3,5	;RP0=1, select bank3
  2229  0B78  1703               	bsf	3,6	;RP1=1, select bank3
  2230  0B79  0095               	movwf	??_LCDClear^(0+384)
  2231  0B7A  0815               	movf	??_LCDClear^(0+384),w
  2232  0B7B  0092               	movwf	lcd_envia_byte@n^(0+384)
  2233  0B7C  3000               	movlw	0
  2234  0B7D  120A  158A  2242  120A  158A  	fcall	_lcd_envia_byte
  2235                           
  2236                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2237  0B82  30F9               	movlw	249
  2238  0B83  1683               	bsf	3,5	;RP0=1, select bank3
  2239  0B84  1703               	bsf	3,6	;RP1=1, select bank3
  2240  0B85  0095               	movwf	??_LCDClear^(0+384)
  2241  0B86                     u3577:	
  2242  0B86  0000               	nop
  2243  0B87  0B95               	decfsz	??_LCDClear^(0+384),f
  2244  0B88  2B86               	goto	u3577
  2245  0B89  2B8A               	nop2	;nop
  2246  0B8A  0000               	nop
  2247                           
  2248                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2249  0B8B  3006               	movlw	6
  2250  0B8C  1683               	bsf	3,5	;RP0=1, select bank3
  2251  0B8D  1703               	bsf	3,6	;RP1=1, select bank3
  2252  0B8E  0095               	movwf	??_LCDClear^(0+384)
  2253  0B8F  0815               	movf	??_LCDClear^(0+384),w
  2254  0B90  0092               	movwf	lcd_envia_byte@n^(0+384)
  2255  0B91  3000               	movlw	0
  2256  0B92  120A  158A  2242  120A  158A  	fcall	_lcd_envia_byte
  2257                           
  2258                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2259  0B97  30F9               	movlw	249
  2260  0B98  1683               	bsf	3,5	;RP0=1, select bank3
  2261  0B99  1703               	bsf	3,6	;RP1=1, select bank3
  2262  0B9A  0095               	movwf	??_LCDClear^(0+384)
  2263  0B9B                     u3587:	
  2264  0B9B  0000               	nop
  2265  0B9C  0B95               	decfsz	??_LCDClear^(0+384),f
  2266  0B9D  2B9B               	goto	u3587
  2267  0B9E  2B9F               	nop2	;nop
  2268  0B9F  0000               	nop
  2269  0BA0  0008               	return
  2270  0BA1                     __end_of_LCDClear:	
  2271                           
  2272                           	psect	text10
  2273  0A42                     __ptext10:	
  2274 ;; *************** function _lcd_envia_byte *****************
  2275 ;; Defined at:
  2276 ;;		line 53 in file "lcd_4bit.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  address         1    wreg     unsigned char 
  2279 ;;  n               1    2[BANK3 ] unsigned char 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  address         1    4[BANK3 ] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;		None               void
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0, pclath, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2291 ;;      Params:         0       0       0       1       0
  2292 ;;      Locals:         0       0       0       1       0
  2293 ;;      Temps:          0       0       0       1       0
  2294 ;;      Totals:         0       0       0       3       0
  2295 ;;Total ram usage:        3 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    8
  2298 ;; This function calls:
  2299 ;;		_lcd_envia_nibble
  2300 ;; This function is called by:
  2301 ;;		_init_lcd_4bit
  2302 ;;		_lcd_gotoxy
  2303 ;;		_lcd_putc
  2304 ;;		_LCDClear
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           
  2309                           ;psect for function _lcd_envia_byte
  2310  0A42                     _lcd_envia_byte:	
  2311                           
  2312                           ;incstack = 0
  2313 ;; hardware stack exceeded
  2314                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2315                           ;lcd_envia_byte@address stored from wreg
  2316  0A42  1683               	bsf	3,5	;RP0=1, select bank3
  2317  0A43  1703               	bsf	3,6	;RP1=1, select bank3
  2318  0A44  0094               	movwf	lcd_envia_byte@address^(0+384)
  2319                           
  2320                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2321  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0A47  1286               	bcf	6,5	;volatile
  2324                           
  2325                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2326  0A48  3063               	movlw	99
  2327  0A49  1683               	bsf	3,5	;RP0=1, select bank3
  2328  0A4A  1703               	bsf	3,6	;RP1=1, select bank3
  2329  0A4B  0093               	movwf	??_lcd_envia_byte^(0+384)
  2330  0A4C                     u3597:	
  2331  0A4C  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2332  0A4D  2A4C               	goto	u3597
  2333  0A4E  2A4F               	nop2	;nop
  2334                           
  2335                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2336  0A4F  1683               	bsf	3,5	;RP0=1, select bank3
  2337  0A50  1703               	bsf	3,6	;RP1=1, select bank3
  2338  0A51  0814               	movf	lcd_envia_byte@address^(0+384),w
  2339  0A52  1903               	btfsc	3,2
  2340  0A53  2A58               	goto	l183
  2341  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0A56  1686               	bsf	6,5	;volatile
  2344  0A57  2A5B               	goto	l184
  2345  0A58                     l183:	
  2346                           
  2347                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2348  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0A5A  1286               	bcf	6,5	;volatile
  2351  0A5B                     l184:	
  2352                           
  2353                           ;lcd_4bit.c: 61: _delay(1);
  2354  0A5B  0000               	nop
  2355                           
  2356                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2357  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0A5E  1206               	bcf	6,4	;volatile
  2360                           
  2361                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2362  0A5F  1683               	bsf	3,5	;RP0=1, select bank3
  2363  0A60  1703               	bsf	3,6	;RP1=1, select bank3
  2364  0A61  0812               	movf	lcd_envia_byte@n^(0+384),w
  2365  0A62  0093               	movwf	??_lcd_envia_byte^(0+384)
  2366  0A63  3004               	movlw	4
  2367  0A64                     u1775:	
  2368  0A64  1003               	clrc
  2369  0A65  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2370  0A66  3EFF               	addlw	-1
  2371  0A67  1D03               	skipz
  2372  0A68  2A64               	goto	u1775
  2373  0A69  0813               	movf	??_lcd_envia_byte^(0+384),w
  2374  0A6A  120A  158A  2482  120A  158A  	fcall	_lcd_envia_nibble
  2375                           
  2376                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2377  0A6F  1683               	bsf	3,5	;RP0=1, select bank3
  2378  0A70  1703               	bsf	3,6	;RP1=1, select bank3
  2379  0A71  0812               	movf	lcd_envia_byte@n^(0+384),w
  2380  0A72  390F               	andlw	15
  2381  0A73  120A  158A  2482   	fcall	_lcd_envia_nibble
  2382  0A76  0008               	return
  2383  0A77                     __end_of_lcd_envia_byte:	
  2384                           
  2385                           	psect	text11
  2386  0C82                     __ptext11:	
  2387 ;; *************** function _lcd_envia_nibble *****************
  2388 ;; Defined at:
  2389 ;;		line 39 in file "lcd_4bit.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  n               1    wreg     unsigned char 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  n               1    1[BANK3 ] unsigned char 
  2394 ;; Return value:  Size  Location     Type
  2395 ;;		None               void
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2403 ;;      Params:         0       0       0       0       0
  2404 ;;      Locals:         0       0       0       1       0
  2405 ;;      Temps:          0       0       0       1       0
  2406 ;;      Totals:         0       0       0       2       0
  2407 ;;Total ram usage:        2 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    7
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_init_lcd_4bit
  2414 ;;		_lcd_envia_byte
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           
  2419                           ;psect for function _lcd_envia_nibble
  2420  0C82                     _lcd_envia_nibble:	
  2421                           
  2422                           ;incstack = 0
  2423 ;; hardware stack exceeded
  2424                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2425                           ;lcd_envia_nibble@n stored from wreg
  2426  0C82  1683               	bsf	3,5	;RP0=1, select bank3
  2427  0C83  1703               	bsf	3,6	;RP1=1, select bank3
  2428  0C84  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2429                           
  2430                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2431  0C85  3000               	movlw	0
  2432  0C86  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2433  0C87  3001               	movlw	1
  2434  0C88  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2435  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0C8B  0806               	movf	6,w	;volatile
  2438  0C8C  1683               	bsf	3,5	;RP0=1, select bank3
  2439  0C8D  1703               	bsf	3,6	;RP1=1, select bank3
  2440  0C8E  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2441  0C8F  39FE               	andlw	-2
  2442  0C90  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2443  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  2444  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  2445  0C93  0086               	movwf	6	;volatile
  2446                           
  2447                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2448  0C94  3000               	movlw	0
  2449  0C95  1683               	bsf	3,5	;RP0=1, select bank3
  2450  0C96  1703               	bsf	3,6	;RP1=1, select bank3
  2451  0C97  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2452  0C98  3001               	movlw	1
  2453  0C99  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2454  0C9A  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2455  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  2456  0C9C  1303               	bcf	3,6	;RP1=0, select bank0
  2457  0C9D  0806               	movf	6,w	;volatile
  2458  0C9E  1683               	bsf	3,5	;RP0=1, select bank3
  2459  0C9F  1703               	bsf	3,6	;RP1=1, select bank3
  2460  0CA0  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2461  0CA1  39FD               	andlw	-3
  2462  0CA2  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2463  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  2464  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  2465  0CA5  0086               	movwf	6	;volatile
  2466                           
  2467                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2468  0CA6  3000               	movlw	0
  2469  0CA7  1683               	bsf	3,5	;RP0=1, select bank3
  2470  0CA8  1703               	bsf	3,6	;RP1=1, select bank3
  2471  0CA9  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2472  0CAA  3001               	movlw	1
  2473  0CAB  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2474  0CAC  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2475  0CAD  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2476  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0CB0  0806               	movf	6,w	;volatile
  2479  0CB1  1683               	bsf	3,5	;RP0=1, select bank3
  2480  0CB2  1703               	bsf	3,6	;RP1=1, select bank3
  2481  0CB3  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2482  0CB4  39FB               	andlw	-5
  2483  0CB5  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2484  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0CB8  0086               	movwf	6	;volatile
  2487                           
  2488                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2489  0CB9  3000               	movlw	0
  2490  0CBA  1683               	bsf	3,5	;RP0=1, select bank3
  2491  0CBB  1703               	bsf	3,6	;RP1=1, select bank3
  2492  0CBC  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2493  0CBD  3001               	movlw	1
  2494  0CBE  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2495  0CBF  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2496  0CC0  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2497  0CC1  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2498  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  2499  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  2500  0CC4  0806               	movf	6,w	;volatile
  2501  0CC5  1683               	bsf	3,5	;RP0=1, select bank3
  2502  0CC6  1703               	bsf	3,6	;RP1=1, select bank3
  2503  0CC7  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2504  0CC8  39F7               	andlw	-9
  2505  0CC9  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2506  0CCA  1283               	bcf	3,5	;RP0=0, select bank0
  2507  0CCB  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0CCC  0086               	movwf	6	;volatile
  2509                           
  2510                           ;lcd_4bit.c: 46: _delay(1);
  2511  0CCD  0000               	nop
  2512                           
  2513                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2514  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  2515  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  2516  0CD0  1606               	bsf	6,4	;volatile
  2517                           
  2518                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2519  0CD1  3003               	movlw	3
  2520  0CD2  1683               	bsf	3,5	;RP0=1, select bank3
  2521  0CD3  1703               	bsf	3,6	;RP1=1, select bank3
  2522  0CD4  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2523  0CD5                     u3607:	
  2524  0CD5  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2525  0CD6  2CD5               	goto	u3607
  2526                           
  2527                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2528  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0CD9  1206               	bcf	6,4	;volatile
  2531  0CDA  0008               	return
  2532  0CDB                     __end_of_lcd_envia_nibble:	
  2533                           
  2534                           	psect	text12
  2535  085D                     __ptext12:	
  2536 ;; *************** function _ADCInit *****************
  2537 ;; Defined at:
  2538 ;;		line 115 in file "main.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;		None               void
  2545 ;; Registers used:
  2546 ;;		None
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2552 ;;      Params:         0       0       0       0       0
  2553 ;;      Locals:         0       0       0       0       0
  2554 ;;      Temps:          0       0       0       0       0
  2555 ;;      Totals:         0       0       0       0       0
  2556 ;;Total ram usage:        0 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    7
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_inicialize
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           
  2567                           ;psect for function _ADCInit
  2568  085D                     _ADCInit:	
  2569                           
  2570                           ;main.c: 117: ADCON1bits.ADFM = 1;
  2571                           
  2572                           ;incstack = 0
  2573 ;; hardware stack exceeded
  2574                           ; Regs used in _ADCInit: []
  2575  085D  1683               	bsf	3,5	;RP0=1, select bank1
  2576  085E  1303               	bcf	3,6	;RP1=0, select bank1
  2577  085F  179F               	bsf	31,7	;volatile
  2578                           
  2579                           ;main.c: 118: ADCON1bits.PCFG3 = 0;
  2580  0860  119F               	bcf	31,3	;volatile
  2581                           
  2582                           ;main.c: 119: ADCON1bits.PCFG2 = 0;
  2583  0861  111F               	bcf	31,2	;volatile
  2584                           
  2585                           ;main.c: 120: ADCON1bits.PCFG1 = 0;
  2586  0862  109F               	bcf	31,1	;volatile
  2587                           
  2588                           ;main.c: 121: ADCON1bits.PCFG0 = 0;
  2589  0863  101F               	bcf	31,0	;volatile
  2590                           
  2591                           ;main.c: 124: ADCON0bits.ADCS1 = 1;
  2592  0864  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0865  1303               	bcf	3,6	;RP1=0, select bank0
  2594  0866  179F               	bsf	31,7	;volatile
  2595                           
  2596                           ;main.c: 125: ADCON0bits.ADCS0 = 0;
  2597  0867  131F               	bcf	31,6	;volatile
  2598                           
  2599                           ;main.c: 126: ADCON0bits.ADON = 1;
  2600  0868  141F               	bsf	31,0	;volatile
  2601                           
  2602                           ;main.c: 129: PIE1bits.ADIE = 1;
  2603  0869  1683               	bsf	3,5	;RP0=1, select bank1
  2604  086A  1303               	bcf	3,6	;RP1=0, select bank1
  2605  086B  170C               	bsf	12,6	;volatile
  2606                           
  2607                           ;main.c: 130: PIR1bits.ADIF = 0;
  2608  086C  1283               	bcf	3,5	;RP0=0, select bank0
  2609  086D  1303               	bcf	3,6	;RP1=0, select bank0
  2610  086E  130C               	bcf	12,6	;volatile
  2611  086F  0008               	return
  2612  0870                     __end_of_ADCInit:	
  2613                           
  2614                           	psect	text13
  2615  08DD                     __ptext13:	
  2616 ;; *************** function _ADCRead *****************
  2617 ;; Defined at:
  2618 ;;		line 137 in file "main.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  ch              2    0[BANK3 ] int 
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;		None
  2623 ;; Return value:  Size  Location     Type
  2624 ;;		None               void
  2625 ;; Registers used:
  2626 ;;		wreg, status,2, status,0
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2632 ;;      Params:         0       0       0       2       0
  2633 ;;      Locals:         0       0       0       0       0
  2634 ;;      Temps:          0       0       0       1       0
  2635 ;;      Totals:         0       0       0       3       0
  2636 ;;Total ram usage:        3 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    7
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _ADCRead
  2648  08DD                     _ADCRead:	
  2649                           
  2650                           ;main.c: 138: ADCON0bits.CHS = ch;
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2654  08DD  1683               	bsf	3,5	;RP0=1, select bank3
  2655  08DE  1703               	bsf	3,6	;RP1=1, select bank3
  2656  08DF  0810               	movf	ADCRead@ch^(0+384),w
  2657  08E0  0092               	movwf	??_ADCRead^(0+384)
  2658  08E1  0D92               	rlf	??_ADCRead^(0+384),f
  2659  08E2  0D92               	rlf	??_ADCRead^(0+384),f
  2660  08E3  0D92               	rlf	??_ADCRead^(0+384),f
  2661  08E4  1283               	bcf	3,5	;RP0=0, select bank0
  2662  08E5  1303               	bcf	3,6	;RP1=0, select bank0
  2663  08E6  081F               	movf	31,w	;volatile
  2664  08E7  1683               	bsf	3,5	;RP0=1, select bank3
  2665  08E8  1703               	bsf	3,6	;RP1=1, select bank3
  2666  08E9  0612               	xorwf	??_ADCRead^(0+384),w
  2667  08EA  39C7               	andlw	-57
  2668  08EB  0612               	xorwf	??_ADCRead^(0+384),w
  2669  08EC  1283               	bcf	3,5	;RP0=0, select bank0
  2670  08ED  1303               	bcf	3,6	;RP1=0, select bank0
  2671  08EE  009F               	movwf	31	;volatile
  2672                           
  2673                           ;main.c: 139: _delay((unsigned long)((25)*(20000000/4000000.0)));
  2674  08EF  3029               	movlw	41
  2675  08F0  1683               	bsf	3,5	;RP0=1, select bank3
  2676  08F1  1703               	bsf	3,6	;RP1=1, select bank3
  2677  08F2  0092               	movwf	??_ADCRead^(0+384)
  2678  08F3                     u3617:	
  2679  08F3  0B92               	decfsz	??_ADCRead^(0+384),f
  2680  08F4  28F3               	goto	u3617
  2681  08F5  0000               	nop
  2682                           
  2683                           ;main.c: 140: ADCON0bits.GO = 1;
  2684  08F6  1283               	bcf	3,5	;RP0=0, select bank0
  2685  08F7  1303               	bcf	3,6	;RP1=0, select bank0
  2686  08F8  151F               	bsf	31,2	;volatile
  2687  08F9                     l92:	
  2688                           ;main.c: 141: while (ADCON0bits.GO_DONE);
  2689                           
  2690  08F9  1D1F               	btfss	31,2	;volatile
  2691  08FA  0008               	return
  2692  08FB  28F9               	goto	l92
  2693  08FC                     __end_of_ADCRead:	
  2694                           
  2695                           	psect	text14
  2696  0272                     __ptext14:	
  2697 ;; *************** function _ISR *****************
  2698 ;; Defined at:
  2699 ;;		line 235 in file "main.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;		None
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  recebido        1   70[BANK0 ] unsigned char 
  2704 ;;  input2          3   71[BANK0 ] float 
  2705 ;;  pre             3   67[BANK0 ] float 
  2706 ;;  input           3   64[BANK0 ] float 
  2707 ;;  preint          2   74[BANK0 ] int 
  2708 ;;  status          2   62[BANK0 ] int 
  2709 ;;  percentual      1   76[BANK0 ] PTR unsigned char 
  2710 ;;		 -> ftoa@buf(17), 
  2711 ;; Return value:  Size  Location     Type
  2712 ;;		None               void
  2713 ;; Registers used:
  2714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2720 ;;      Params:         0       0       0       0       0
  2721 ;;      Locals:         0      15       0       0       0
  2722 ;;      Temps:          0       6       0       0       0
  2723 ;;      Totals:         0      21       0       0       0
  2724 ;;Total ram usage:       21 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    6
  2727 ;; This function calls:
  2728 ;;		_Ativar
  2729 ;;		_Bomba
  2730 ;;		_ProgressBar
  2731 ;;		_USARTReceiveChar
  2732 ;;		___awtoft
  2733 ;;		___ftdiv
  2734 ;;		___ftmul
  2735 ;;		___fttol
  2736 ;;		_ftoa
  2737 ;;		_sendSerial
  2738 ;;		i1_USARTWriteString
  2739 ;;		i1_lcd_escreve_string
  2740 ;;		i1_lcd_gotoxy
  2741 ;; This function is called by:
  2742 ;;		Interrupt level 1
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           
  2747                           ;psect for function _ISR
  2748  0272                     _ISR:	
  2749                           
  2750                           ;main.c: 237: if (PIR1bits.ADIF) {
  2751  0272  1F0C               	btfss	12,6	;volatile
  2752  0273  2BDA               	goto	i1l2679
  2753                           
  2754                           ;main.c: 239: char * percentual;
  2755                           ;main.c: 240: float input;
  2756                           ;main.c: 241: float input2;
  2757                           ;main.c: 242: float pre;
  2758                           ;main.c: 243: int preint;
  2759                           ;main.c: 244: int status;
  2760                           ;main.c: 246: if (flag_Leitura < 5) {
  2761  0274  1683               	bsf	3,5	;RP0=1, select bank1
  2762  0275  1303               	bcf	3,6	;RP1=0, select bank1
  2763  0276  0863               	movf	(_flag_Leitura+1)^(0+128),w
  2764  0277  3A80               	xorlw	128
  2765  0278  00FF               	movwf	127
  2766  0279  3080               	movlw	128
  2767  027A  027F               	subwf	127,w
  2768  027B  1D03               	skipz
  2769  027C  2A7F               	goto	u324_25
  2770  027D  3005               	movlw	5
  2771  027E  0262               	subwf	_flag_Leitura^(0+128),w
  2772  027F                     u324_25:	
  2773  027F  1803               	skipnc
  2774  0280  2AA2               	goto	i1l2639
  2775                           
  2776                           ;main.c: 247: flag_Leitura++;
  2777  0281  3001               	movlw	1
  2778  0282  1683               	bsf	3,5	;RP0=1, select bank1
  2779  0283  1303               	bcf	3,6	;RP1=0, select bank1
  2780  0284  07E2               	addwf	_flag_Leitura^(0+128),f
  2781  0285  1803               	skipnc
  2782  0286  0AE3               	incf	(_flag_Leitura+1)^(0+128),f
  2783  0287  3000               	movlw	0
  2784  0288  07E3               	addwf	(_flag_Leitura+1)^(0+128),f
  2785                           
  2786                           ;main.c: 249: ADCResult = ((ADRESH << 8) + ADRESL);
  2787  0289  1283               	bcf	3,5	;RP0=0, select bank0
  2788  028A  1303               	bcf	3,6	;RP1=0, select bank0
  2789  028B  081E               	movf	30,w	;volatile
  2790  028C  01EE               	clrf	_ADCResult+1
  2791  028D  07EE               	addwf	_ADCResult+1,f
  2792  028E  1683               	bsf	3,5	;RP0=1, select bank1
  2793  028F  1303               	bcf	3,6	;RP1=0, select bank1
  2794  0290  081E               	movf	30,w	;volatile
  2795  0291  1283               	bcf	3,5	;RP0=0, select bank0
  2796  0292  1303               	bcf	3,6	;RP1=0, select bank0
  2797  0293  01ED               	clrf	_ADCResult
  2798  0294  07ED               	addwf	_ADCResult,f
  2799                           
  2800                           ;main.c: 250: Buffer_Leitura += ADCResult;
  2801  0295  086D               	movf	_ADCResult,w
  2802  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0297  1303               	bcf	3,6	;RP1=0, select bank1
  2804  0298  07E0               	addwf	_Buffer_Leitura^(0+128),f
  2805  0299  1803               	skipnc
  2806  029A  0AE1               	incf	(_Buffer_Leitura+1)^(0+128),f
  2807  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2808  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2809  029D  086E               	movf	_ADCResult+1,w
  2810  029E  1683               	bsf	3,5	;RP0=1, select bank1
  2811  029F  1303               	bcf	3,6	;RP1=0, select bank1
  2812  02A0  07E1               	addwf	(_Buffer_Leitura+1)^(0+128),f
  2813                           
  2814                           ;main.c: 251: } else {
  2815  02A1  2BD7               	goto	i1l2677
  2816  02A2                     i1l2639:	
  2817                           
  2818                           ;main.c: 253: flag_Leitura=0;
  2819  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  2820  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  2821  02A4  01E2               	clrf	_flag_Leitura^(0+128)
  2822  02A5  01E3               	clrf	(_flag_Leitura+1)^(0+128)
  2823                           
  2824                           ;main.c: 254: input = (Buffer_Leitura * 0.0048828125)/5;
  2825  02A6  3000               	movlw	0
  2826  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2827  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2828  02A9  00B0               	movwf	___ftdiv@f2
  2829  02AA  30A0               	movlw	160
  2830  02AB  00B1               	movwf	___ftdiv@f2+1
  2831  02AC  3040               	movlw	64
  2832  02AD  00B2               	movwf	___ftdiv@f2+2
  2833  02AE  3000               	movlw	0
  2834  02AF  00A0               	movwf	___ftmul@f1
  2835  02B0  30A0               	movlw	160
  2836  02B1  00A1               	movwf	___ftmul@f1+1
  2837  02B2  303B               	movlw	59
  2838  02B3  00A2               	movwf	___ftmul@f1+2
  2839  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2840  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  2841  02B6  0861               	movf	(_Buffer_Leitura+1)^(0+128),w
  2842  02B7  01F9               	clrf	___awtoft@c+1
  2843  02B8  07F9               	addwf	___awtoft@c+1,f
  2844  02B9  0860               	movf	_Buffer_Leitura^(0+128),w
  2845  02BA  01F8               	clrf	___awtoft@c
  2846  02BB  07F8               	addwf	___awtoft@c,f
  2847  02BC  120A  158A  20FC  120A  118A  	fcall	___awtoft
  2848  02C1  0878               	movf	?___awtoft,w
  2849  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2850  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2851  02C4  00A3               	movwf	___ftmul@f2
  2852  02C5  0879               	movf	?___awtoft+1,w
  2853  02C6  00A4               	movwf	___ftmul@f2+1
  2854  02C7  087A               	movf	?___awtoft+2,w
  2855  02C8  00A5               	movwf	___ftmul@f2+2
  2856  02C9  120A  118A  2500  120A  118A  	fcall	___ftmul
  2857  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  2858  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  2859  02D0  0820               	movf	?___ftmul,w
  2860  02D1  00B3               	movwf	___ftdiv@f1
  2861  02D2  0821               	movf	?___ftmul+1,w
  2862  02D3  00B4               	movwf	___ftdiv@f1+1
  2863  02D4  0822               	movf	?___ftmul+2,w
  2864  02D5  00B5               	movwf	___ftdiv@f1+2
  2865  02D6  120A  118A  268D  120A  118A  	fcall	___ftdiv
  2866  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2867  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2868  02DD  0830               	movf	?___ftdiv,w
  2869  02DE  00E0               	movwf	ISR@input
  2870  02DF  0831               	movf	?___ftdiv+1,w
  2871  02E0  00E1               	movwf	ISR@input+1
  2872  02E1  0832               	movf	?___ftdiv+2,w
  2873  02E2  00E2               	movwf	ISR@input+2
  2874                           
  2875                           ;main.c: 257: lcd_gotoxy(0, 1);
  2876  02E3  01F5               	clrf	i1lcd_gotoxy@y
  2877  02E4  0AF5               	incf	i1lcd_gotoxy@y,f
  2878  02E5  3000               	movlw	0
  2879  02E6  120A  158A  2070  120A  118A  	fcall	i1_lcd_gotoxy
  2880                           
  2881                           ;main.c: 258: lcd_escreve_string("Nivel:");
  2882  02EB  307C               	movlw	low (STR_2-__stringbase)
  2883  02EC  00FC               	movwf	i1lcd_escreve_string@y
  2884  02ED  3080               	movlw	128
  2885  02EE  00FD               	movwf	i1lcd_escreve_string@y+1
  2886  02EF  120A  158A  211D  120A  118A  	fcall	i1_lcd_escreve_string
  2887                           
  2888                           ;main.c: 259: USARTWriteString("Nivel:");
  2889  02F4  307C               	movlw	low (STR_2-__stringbase)
  2890  02F5  00F1               	movwf	i1USARTWriteString@str
  2891  02F6  3080               	movlw	128
  2892  02F7  00F2               	movwf	i1USARTWriteString@str+1
  2893  02F8  120A  158A  2163  120A  118A  	fcall	i1_USARTWriteString
  2894                           
  2895                           ;main.c: 260: lcd_gotoxy(7, 1);
  2896  02FD  01F5               	clrf	i1lcd_gotoxy@y
  2897  02FE  0AF5               	incf	i1lcd_gotoxy@y,f
  2898  02FF  3007               	movlw	7
  2899  0300  120A  158A  2070  120A  118A  	fcall	i1_lcd_gotoxy
  2900                           
  2901                           ;main.c: 261: input2 = ((input * 100) / 0.8);
  2902  0305  30CD               	movlw	205
  2903  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2904  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2905  0308  00B0               	movwf	___ftdiv@f2
  2906  0309  304C               	movlw	76
  2907  030A  00B1               	movwf	___ftdiv@f2+1
  2908  030B  303F               	movlw	63
  2909  030C  00B2               	movwf	___ftdiv@f2+2
  2910  030D  3000               	movlw	0
  2911  030E  00A0               	movwf	___ftmul@f1
  2912  030F  30C8               	movlw	200
  2913  0310  00A1               	movwf	___ftmul@f1+1
  2914  0311  3042               	movlw	66
  2915  0312  00A2               	movwf	___ftmul@f1+2
  2916  0313  0860               	movf	ISR@input,w
  2917  0314  00A3               	movwf	___ftmul@f2
  2918  0315  0861               	movf	ISR@input+1,w
  2919  0316  00A4               	movwf	___ftmul@f2+1
  2920  0317  0862               	movf	ISR@input+2,w
  2921  0318  00A5               	movwf	___ftmul@f2+2
  2922  0319  120A  118A  2500  120A  118A  	fcall	___ftmul
  2923  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2924  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2925  0320  0820               	movf	?___ftmul,w
  2926  0321  00B3               	movwf	___ftdiv@f1
  2927  0322  0821               	movf	?___ftmul+1,w
  2928  0323  00B4               	movwf	___ftdiv@f1+1
  2929  0324  0822               	movf	?___ftmul+2,w
  2930  0325  00B5               	movwf	___ftdiv@f1+2
  2931  0326  120A  118A  268D  120A  118A  	fcall	___ftdiv
  2932  032B  1283               	bcf	3,5	;RP0=0, select bank0
  2933  032C  1303               	bcf	3,6	;RP1=0, select bank0
  2934  032D  0830               	movf	?___ftdiv,w
  2935  032E  00E7               	movwf	ISR@input2
  2936  032F  0831               	movf	?___ftdiv+1,w
  2937  0330  00E8               	movwf	ISR@input2+1
  2938  0331  0832               	movf	?___ftdiv+2,w
  2939  0332  00E9               	movwf	ISR@input2+2
  2940                           
  2941                           ;main.c: 262: percentual = ftoa(input2, &status);
  2942  0333  0867               	movf	ISR@input2,w
  2943  0334  00C4               	movwf	ftoa@f
  2944  0335  0868               	movf	ISR@input2+1,w
  2945  0336  00C5               	movwf	ftoa@f+1
  2946  0337  0869               	movf	ISR@input2+2,w
  2947  0338  00C6               	movwf	ftoa@f+2
  2948  0339  305E               	movlw	ISR@status& (0+255)
  2949  033A  00D8               	movwf	??_ISR
  2950  033B  0858               	movf	??_ISR,w
  2951  033C  00C7               	movwf	ftoa@status
  2952  033D  120A  118A  25D3  120A  118A  	fcall	_ftoa
  2953  0342  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0343  1303               	bcf	3,6	;RP1=0, select bank0
  2955  0344  00D9               	movwf	??_ISR+1
  2956  0345  0859               	movf	??_ISR+1,w
  2957  0346  00EC               	movwf	ISR@percentual
  2958                           
  2959                           ;main.c: 263: lcd_escreve_string(percentual);
  2960  0347  086C               	movf	ISR@percentual,w
  2961  0348  00FC               	movwf	i1lcd_escreve_string@y
  2962  0349  3001               	movlw	1
  2963  034A  00FD               	movwf	i1lcd_escreve_string@y+1
  2964  034B  120A  158A  211D  120A  118A  	fcall	i1_lcd_escreve_string
  2965                           
  2966                           ;main.c: 264: USARTWriteString(percentual);
  2967  0350  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0351  1303               	bcf	3,6	;RP1=0, select bank0
  2969  0352  086C               	movf	ISR@percentual,w
  2970  0353  00F1               	movwf	i1USARTWriteString@str
  2971  0354  3001               	movlw	1
  2972  0355  00F2               	movwf	i1USARTWriteString@str+1
  2973  0356  120A  158A  2163  120A  118A  	fcall	i1_USARTWriteString
  2974                           
  2975                           ;main.c: 265: lcd_gotoxy(16, 1);
  2976  035B  01F5               	clrf	i1lcd_gotoxy@y
  2977  035C  0AF5               	incf	i1lcd_gotoxy@y,f
  2978  035D  3010               	movlw	16
  2979  035E  120A  158A  2070  120A  118A  	fcall	i1_lcd_gotoxy
  2980                           
  2981                           ;main.c: 266: lcd_escreve_string("%");
  2982  0363  3083               	movlw	low (STR_4-__stringbase)
  2983  0364  00FC               	movwf	i1lcd_escreve_string@y
  2984  0365  3080               	movlw	128
  2985  0366  00FD               	movwf	i1lcd_escreve_string@y+1
  2986  0367  120A  158A  211D  120A  118A  	fcall	i1_lcd_escreve_string
  2987                           
  2988                           ;main.c: 267: USARTWriteString("%");
  2989  036C  3083               	movlw	low (STR_4-__stringbase)
  2990  036D  00F1               	movwf	i1USARTWriteString@str
  2991  036E  3080               	movlw	128
  2992  036F  00F2               	movwf	i1USARTWriteString@str+1
  2993  0370  120A  158A  2163  120A  118A  	fcall	i1_USARTWriteString
  2994                           
  2995                           ;main.c: 268: lcd_gotoxy(0, 0);
  2996  0375  01F5               	clrf	i1lcd_gotoxy@y
  2997  0376  3000               	movlw	0
  2998  0377  120A  158A  2070  120A  118A  	fcall	i1_lcd_gotoxy
  2999                           
  3000                           ;main.c: 269: pre = input2 * 0.16;
  3001  037C  30D7               	movlw	215
  3002  037D  1283               	bcf	3,5	;RP0=0, select bank0
  3003  037E  1303               	bcf	3,6	;RP1=0, select bank0
  3004  037F  00A0               	movwf	___ftmul@f1
  3005  0380  3023               	movlw	35
  3006  0381  00A1               	movwf	___ftmul@f1+1
  3007  0382  303E               	movlw	62
  3008  0383  00A2               	movwf	___ftmul@f1+2
  3009  0384  0867               	movf	ISR@input2,w
  3010  0385  00A3               	movwf	___ftmul@f2
  3011  0386  0868               	movf	ISR@input2+1,w
  3012  0387  00A4               	movwf	___ftmul@f2+1
  3013  0388  0869               	movf	ISR@input2+2,w
  3014  0389  00A5               	movwf	___ftmul@f2+2
  3015  038A  120A  118A  2500  120A  118A  	fcall	___ftmul
  3016  038F  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0390  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0391  0820               	movf	?___ftmul,w
  3019  0392  00E3               	movwf	ISR@pre
  3020  0393  0821               	movf	?___ftmul+1,w
  3021  0394  00E4               	movwf	ISR@pre+1
  3022  0395  0822               	movf	?___ftmul+2,w
  3023  0396  00E5               	movwf	ISR@pre+2
  3024                           
  3025                           ;main.c: 270: preint = (int) pre;
  3026  0397  0863               	movf	ISR@pre,w
  3027  0398  00B0               	movwf	___fttol@f1
  3028  0399  0864               	movf	ISR@pre+1,w
  3029  039A  00B1               	movwf	___fttol@f1+1
  3030  039B  0865               	movf	ISR@pre+2,w
  3031  039C  00B2               	movwf	___fttol@f1+2
  3032  039D  120A  158A  26E1  120A  118A  	fcall	___fttol
  3033  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3034  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  3035  03A4  0831               	movf	?___fttol+1,w
  3036  03A5  01EB               	clrf	ISR@preint+1
  3037  03A6  07EB               	addwf	ISR@preint+1,f
  3038  03A7  0830               	movf	?___fttol,w
  3039  03A8  01EA               	clrf	ISR@preint
  3040  03A9  07EA               	addwf	ISR@preint,f
  3041                           
  3042                           ;main.c: 271: Bomba();
  3043  03AA  120A  118A  27D9  120A  118A  	fcall	_Bomba
  3044                           
  3045                           ;main.c: 272: ProgressBar(preint);
  3046  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  3047  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  3048  03B1  086B               	movf	ISR@preint+1,w
  3049  03B2  01A1               	clrf	ProgressBar@preint+1
  3050  03B3  07A1               	addwf	ProgressBar@preint+1,f
  3051  03B4  086A               	movf	ISR@preint,w
  3052  03B5  01A0               	clrf	ProgressBar@preint
  3053  03B6  07A0               	addwf	ProgressBar@preint,f
  3054  03B7  120A  158A  23E8  120A  118A  	fcall	_ProgressBar
  3055                           
  3056                           ;main.c: 273: sendSerial(preint, SUPERIOR);
  3057  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  3058  03BD  1303               	bcf	3,6	;RP1=0, select bank0
  3059  03BE  086B               	movf	ISR@preint+1,w
  3060  03BF  01D3               	clrf	sendSerial@preint+1
  3061  03C0  07D3               	addwf	sendSerial@preint+1,f
  3062  03C1  086A               	movf	ISR@preint,w
  3063  03C2  01D2               	clrf	sendSerial@preint
  3064  03C3  07D2               	addwf	sendSerial@preint,f
  3065  03C4  302F               	movlw	_SUPERIOR-__stringbase
  3066  03C5  0084               	movwf	4
  3067  03C6  120A  118A  274F  120A  118A  	fcall	stringdir
  3068  03CB  00D4               	movwf	sendSerial@recipiente
  3069  03CC  120A  118A  274F  120A  118A  	fcall	stringdir
  3070  03D1  00D5               	movwf	sendSerial@recipiente+1
  3071  03D2  120A  158A  276F  120A  118A  	fcall	_sendSerial
  3072  03D7                     i1l2677:	
  3073                           
  3074                           ;main.c: 274: }
  3075                           ;main.c: 275: PIR1bits.ADIF = 0;
  3076  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  3077  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  3078  03D9  130C               	bcf	12,6	;volatile
  3079  03DA                     i1l2679:	
  3080                           
  3081                           ;main.c: 276: }
  3082                           ;main.c: 279: if (PIR1bits.RCIF) {
  3083  03DA  1E8C               	btfss	12,5	;volatile
  3084  03DB  2BEC               	goto	i1l135
  3085                           
  3086                           ;main.c: 280: char recebido = USARTReceiveChar();
  3087  03DC  120A  158A  208A  120A  118A  	fcall	_USARTReceiveChar
  3088  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  3089  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  3090  03E3  00D8               	movwf	??_ISR
  3091  03E4  0858               	movf	??_ISR,w
  3092  03E5  00E6               	movwf	ISR@recebido
  3093                           
  3094                           ;main.c: 282: Ativar(recebido);
  3095  03E6  0866               	movf	ISR@recebido,w
  3096  03E7  120A  158A  2322  120A  118A  	fcall	_Ativar
  3097  03EC                     i1l135:	
  3098  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3099  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3100  03EE  085D               	movf	??_ISR+5,w
  3101  03EF  00FF               	movwf	127
  3102  03F0  085C               	movf	??_ISR+4,w
  3103  03F1  008A               	movwf	10
  3104  03F2  085B               	movf	??_ISR+3,w
  3105  03F3  0084               	movwf	4
  3106  03F4  0E5A               	swapf	(??_ISR+2)^0,w
  3107  03F5  0083               	movwf	3
  3108  03F6  0EFE               	swapf	126,f
  3109  03F7  0E7E               	swapf	126,w
  3110  03F8  0009               	retfie
  3111  03F9                     __end_of_ISR:	
  3112                           
  3113                           	psect	intentry
  3114  0004                     __pintentry:	
  3115                           ;incstack = 0
  3116 ;; hardware stack exceeded
  3117                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3118                           
  3119  0004                     interrupt_function:	
  3120  007E                     saved_w	set	btemp
  3121  0004  00FE               	movwf	btemp
  3122  0005  0E03               	swapf	3,w
  3123  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3125  0008  00DA               	movwf	??_ISR+2
  3126  0009  0804               	movf	4,w
  3127  000A  00DB               	movwf	??_ISR+3
  3128  000B  080A               	movf	10,w
  3129  000C  00DC               	movwf	??_ISR+4
  3130  000D  087F               	movf	btemp+1,w
  3131  000E  00DD               	movwf	??_ISR+5
  3132  000F  120A  118A  2A72   	ljmp	_ISR
  3133                           
  3134                           	psect	text15
  3135  0F6F                     __ptext15:	
  3136 ;; *************** function _sendSerial *****************
  3137 ;; Defined at:
  3138 ;;		line 207 in file "main.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  preint          2   50[BANK0 ] int 
  3141 ;;  recipiente      2   52[BANK0 ] int 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  origem         40    0[BANK1 ] unsigned char [40]
  3144 ;;  x               2   44[BANK1 ] int 
  3145 ;;  status          2   40[BANK1 ] int 
  3146 ;;  nivelRecipie    1   43[BANK1 ] PTR const unsigned char 
  3147 ;;		 -> ftoa@buf(17), 
  3148 ;;  envio           1   42[BANK1 ] PTR const unsigned char 
  3149 ;;		 -> sendSerial@origem(40), 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;		None               void
  3152 ;; Registers used:
  3153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3159 ;;      Params:         0       4       0       0       0
  3160 ;;      Locals:         0       0      46       0       0
  3161 ;;      Temps:          0       2       0       0       0
  3162 ;;      Totals:         0       6      46       0       0
  3163 ;;Total ram usage:       52 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    4
  3166 ;; This function calls:
  3167 ;;		___awtoft
  3168 ;;		_ftoa
  3169 ;;		i1_USARTWriteString
  3170 ;; This function is called by:
  3171 ;;		_ISR
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function _sendSerial
  3177  0F6F                     _sendSerial:	
  3178                           
  3179                           ;main.c: 208: int status = 0, x = 0;
  3180                           
  3181                           ;incstack = 0
  3182 ;; hardware stack exceeded
  3183                           ; Regs used in _sendSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3184  0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  3185  0F70  1303               	bcf	3,6	;RP1=0, select bank1
  3186  0F71  01C8               	clrf	sendSerial@status^(0+128)
  3187  0F72  01C9               	clrf	(sendSerial@status+1)^(0+128)
  3188  0F73  01CC               	clrf	sendSerial@x^(0+128)
  3189  0F74  01CD               	clrf	(sendSerial@x+1)^(0+128)
  3190                           
  3191                           ;main.c: 209: char origem [40];
  3192                           ;main.c: 210: const char * envio;
  3193                           ;main.c: 211: const char * nivelRecipiente;
  3194                           ;main.c: 212: nivelRecipiente = ftoa(preint, &status);
  3195  0F75  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0F76  1303               	bcf	3,6	;RP1=0, select bank0
  3197  0F77  0853               	movf	sendSerial@preint+1,w
  3198  0F78  01F9               	clrf	___awtoft@c+1
  3199  0F79  07F9               	addwf	___awtoft@c+1,f
  3200  0F7A  0852               	movf	sendSerial@preint,w
  3201  0F7B  01F8               	clrf	___awtoft@c
  3202  0F7C  07F8               	addwf	___awtoft@c,f
  3203  0F7D  120A  158A  20FC  120A  158A  	fcall	___awtoft
  3204  0F82  0878               	movf	?___awtoft,w
  3205  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  3206  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  3207  0F85  00C4               	movwf	ftoa@f
  3208  0F86  0879               	movf	?___awtoft+1,w
  3209  0F87  00C5               	movwf	ftoa@f+1
  3210  0F88  087A               	movf	?___awtoft+2,w
  3211  0F89  00C6               	movwf	ftoa@f+2
  3212  0F8A  30C8               	movlw	sendSerial@status& (0+255)
  3213  0F8B  00D6               	movwf	??_sendSerial
  3214  0F8C  0856               	movf	??_sendSerial,w
  3215  0F8D  00C7               	movwf	ftoa@status
  3216  0F8E  120A  118A  25D3  120A  158A  	fcall	_ftoa
  3217  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  3218  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  3219  0F95  00D7               	movwf	??_sendSerial+1
  3220  0F96  0857               	movf	??_sendSerial+1,w
  3221  0F97  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0F98  1303               	bcf	3,6	;RP1=0, select bank1
  3223  0F99  00CB               	movwf	sendSerial@nivelRecipiente^(0+128)
  3224  0F9A                     i1l121:	
  3225                           ;main.c: 214: while (*nivelRecipiente != '\n') {
  3226                           
  3227  0F9A  084B               	movf	sendSerial@nivelRecipiente^(0+128),w
  3228  0F9B  0084               	movwf	4
  3229  0F9C  1783               	bsf	3,7	;select IRP bank2
  3230  0F9D  0800               	movf	0,w
  3231  0F9E  3A0A               	xorlw	10
  3232  0F9F  1903               	btfsc	3,2
  3233  0FA0  2FED               	goto	i1l2535
  3234                           
  3235                           ;main.c: 215: if ((x == 0)) {
  3236  0FA1  084D               	movf	(sendSerial@x+1)^(0+128),w
  3237  0FA2  044C               	iorwf	sendSerial@x^(0+128),w
  3238  0FA3  1D03               	skipz
  3239  0FA4  2FCF               	goto	i1l2529
  3240                           
  3241                           ;main.c: 216: if (recipiente == SUPERIOR) {
  3242  0FA5  302F               	movlw	_SUPERIOR-__stringbase
  3243  0FA6  0084               	movwf	4
  3244  0FA7  120A  118A  274F  120A  158A  	fcall	stringdir
  3245  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0FAE  00D6               	movwf	??_sendSerial
  3248  0FAF  120A  118A  274F  120A  158A  	fcall	stringdir
  3249  0FB4  00D7               	movwf	??_sendSerial+1
  3250  0FB5  0857               	movf	??_sendSerial+1,w
  3251  0FB6  0655               	xorwf	sendSerial@recipiente+1,w
  3252  0FB7  1D03               	skipz
  3253  0FB8  2FBB               	goto	u311_25
  3254  0FB9  0856               	movf	??_sendSerial,w
  3255  0FBA  0654               	xorwf	sendSerial@recipiente,w
  3256  0FBB                     u311_25:	
  3257  0FBB  1D03               	skipz
  3258  0FBC  2FBF               	goto	i1l2525
  3259                           
  3260                           ;main.c: 217: origem[x] = 'S';
  3261  0FBD  3053               	movlw	83
  3262  0FBE  2FC0               	goto	L2
  3263  0FBF                     i1l2525:	
  3264                           ;main.c: 218: } else {
  3265                           
  3266                           
  3267                           ;main.c: 219: origem[x] = 'I';
  3268  0FBF  3049               	movlw	73
  3269  0FC0                     L2:	
  3270  0FC0  00D6               	movwf	??_sendSerial
  3271  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  3272  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  3273  0FC3  084C               	movf	sendSerial@x^(0+128),w
  3274  0FC4  3EA0               	addlw	sendSerial@origem& (0+255)
  3275  0FC5  0084               	movwf	4
  3276  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0FC8  0856               	movf	??_sendSerial,w
  3279  0FC9  1383               	bcf	3,7	;select IRP bank1
  3280  0FCA  0080               	movwf	0
  3281                           
  3282                           ;main.c: 220: }
  3283                           ;main.c: 221: x++;
  3284  0FCB  3001               	movlw	1
  3285  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  3286  0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  3287  0FCE  2FE7               	goto	L3
  3288  0FCF                     i1l2529:	
  3289                           ;main.c: 222: } else {
  3290                           
  3291                           
  3292                           ;main.c: 223: origem[x] = *nivelRecipiente;
  3293  0FCF  084B               	movf	sendSerial@nivelRecipiente^(0+128),w
  3294  0FD0  0084               	movwf	4
  3295  0FD1  1783               	bsf	3,7	;select IRP bank2
  3296  0FD2  0800               	movf	0,w
  3297  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  3298  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  3299  0FD5  00D6               	movwf	??_sendSerial
  3300  0FD6  1683               	bsf	3,5	;RP0=1, select bank1
  3301  0FD7  1303               	bcf	3,6	;RP1=0, select bank1
  3302  0FD8  084C               	movf	sendSerial@x^(0+128),w
  3303  0FD9  3EA0               	addlw	sendSerial@origem& (0+255)
  3304  0FDA  0084               	movwf	4
  3305  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3306  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3307  0FDD  0856               	movf	??_sendSerial,w
  3308  0FDE  1383               	bcf	3,7	;select IRP bank1
  3309  0FDF  0080               	movwf	0
  3310                           
  3311                           ;main.c: 224: *nivelRecipiente++;
  3312  0FE0  3001               	movlw	1
  3313  0FE1  00D6               	movwf	??_sendSerial
  3314  0FE2  0856               	movf	??_sendSerial,w
  3315  0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  3316  0FE4  1303               	bcf	3,6	;RP1=0, select bank1
  3317  0FE5  07CB               	addwf	sendSerial@nivelRecipiente^(0+128),f
  3318                           
  3319                           ;main.c: 225: x++;
  3320  0FE6  3001               	movlw	1
  3321  0FE7                     L3:	
  3322  0FE7  07CC               	addwf	sendSerial@x^(0+128),f
  3323  0FE8  1803               	skipnc
  3324  0FE9  0ACD               	incf	(sendSerial@x+1)^(0+128),f
  3325  0FEA  3000               	movlw	0
  3326  0FEB  07CD               	addwf	(sendSerial@x+1)^(0+128),f
  3327  0FEC  2F9A               	goto	i1l121
  3328  0FED                     i1l2535:	
  3329                           
  3330                           ;main.c: 226: }
  3331                           ;main.c: 227: }
  3332                           ;main.c: 228: envio = &origem;
  3333  0FED  30A0               	movlw	sendSerial@origem& (0+255)
  3334  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  3335  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  3336  0FF0  00D6               	movwf	??_sendSerial
  3337  0FF1  0856               	movf	??_sendSerial,w
  3338  0FF2  1683               	bsf	3,5	;RP0=1, select bank1
  3339  0FF3  1303               	bcf	3,6	;RP1=0, select bank1
  3340  0FF4  00CA               	movwf	sendSerial@envio^(0+128)
  3341                           
  3342                           ;main.c: 229: USARTWriteString(*envio);
  3343  0FF5  084A               	movf	sendSerial@envio^(0+128),w
  3344  0FF6  0084               	movwf	4
  3345  0FF7  1383               	bcf	3,7	;select IRP bank0
  3346  0FF8  0800               	movf	0,w
  3347  0FF9  00F1               	movwf	i1USARTWriteString@str
  3348  0FFA  3080               	movlw	128
  3349  0FFB  00F2               	movwf	i1USARTWriteString@str+1
  3350  0FFC  120A  158A  2163   	fcall	i1_USARTWriteString
  3351  0FFF  0008               	return
  3352  1000                     __end_of_sendSerial:	
  3353                           
  3354                           	psect	text16
  3355  05D3                     __ptext16:	
  3356 ;; *************** function _ftoa *****************
  3357 ;; Defined at:
  3358 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  f               3   36[BANK0 ] float 
  3361 ;;  status          1   39[BANK0 ] PTR int 
  3362 ;;		 -> ISR@status(2), sendSerial@status(2), 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  l               4   45[BANK0 ] unsigned long 
  3365 ;;  rem             4   41[BANK0 ] unsigned long 
  3366 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  3367 ;;		 -> ftoa@buf(17), 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      PTR unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3377 ;;      Params:         0       4       0       0       0
  3378 ;;      Locals:         0       9       0       0       0
  3379 ;;      Temps:          0       1       0       0       0
  3380 ;;      Totals:         0      14       0       0       0
  3381 ;;Total ram usage:       14 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    3
  3384 ;; This function calls:
  3385 ;;		___ftge
  3386 ;;		___ftmul
  3387 ;;		___ftneg
  3388 ;;		___ftsub
  3389 ;;		___fttol
  3390 ;;		___lltoft
  3391 ;;		_sprintf
  3392 ;; This function is called by:
  3393 ;;		_sendSerial
  3394 ;;		_ISR
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function _ftoa
  3400  05D3                     _ftoa:	
  3401                           
  3402                           ;incstack = 0
  3403 ;; hardware stack exceeded
  3404                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3405  05D3  30A4               	movlw	ftoa@buf& (0+255)
  3406  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  3407  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  3408  05D6  00C8               	movwf	??_ftoa
  3409  05D7  0848               	movf	??_ftoa,w
  3410  05D8  00D1               	movwf	ftoa@cp
  3411  05D9  0844               	movf	ftoa@f,w
  3412  05DA  00F0               	movwf	___ftge@ff1
  3413  05DB  0845               	movf	ftoa@f+1,w
  3414  05DC  00F1               	movwf	___ftge@ff1+1
  3415  05DD  0846               	movf	ftoa@f+2,w
  3416  05DE  00F2               	movwf	___ftge@ff1+2
  3417  05DF  3000               	movlw	0
  3418  05E0  00F3               	movwf	___ftge@ff2
  3419  05E1  3000               	movlw	0
  3420  05E2  00F4               	movwf	___ftge@ff2+1
  3421  05E3  3000               	movlw	0
  3422  05E4  00F5               	movwf	___ftge@ff2+2
  3423  05E5  120A  158A  24DB  120A  118A  	fcall	___ftge
  3424  05EA  1803               	btfsc	3,0
  3425  05EB  2E0C               	goto	i1l2389
  3426  05EC  302D               	movlw	45
  3427  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  3428  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  3429  05EF  00C8               	movwf	??_ftoa
  3430  05F0  0851               	movf	ftoa@cp,w
  3431  05F1  0084               	movwf	4
  3432  05F2  0848               	movf	??_ftoa,w
  3433  05F3  1783               	bsf	3,7	;select IRP bank2
  3434  05F4  0080               	movwf	0
  3435  05F5  3001               	movlw	1
  3436  05F6  00C8               	movwf	??_ftoa
  3437  05F7  0848               	movf	??_ftoa,w
  3438  05F8  07D1               	addwf	ftoa@cp,f
  3439  05F9  0844               	movf	ftoa@f,w
  3440  05FA  00F0               	movwf	___ftneg@f1
  3441  05FB  0845               	movf	ftoa@f+1,w
  3442  05FC  00F1               	movwf	___ftneg@f1+1
  3443  05FD  0846               	movf	ftoa@f+2,w
  3444  05FE  00F2               	movwf	___ftneg@f1+2
  3445  05FF  120A  158A  2005  120A  118A  	fcall	___ftneg
  3446  0604  0870               	movf	?___ftneg,w
  3447  0605  1283               	bcf	3,5	;RP0=0, select bank0
  3448  0606  1303               	bcf	3,6	;RP1=0, select bank0
  3449  0607  00C4               	movwf	ftoa@f
  3450  0608  0871               	movf	?___ftneg+1,w
  3451  0609  00C5               	movwf	ftoa@f+1
  3452  060A  0872               	movf	?___ftneg+2,w
  3453  060B  00C6               	movwf	ftoa@f+2
  3454  060C                     i1l2389:	
  3455  060C  1283               	bcf	3,5	;RP0=0, select bank0
  3456  060D  1303               	bcf	3,6	;RP1=0, select bank0
  3457  060E  0844               	movf	ftoa@f,w
  3458  060F  00B0               	movwf	___fttol@f1
  3459  0610  0845               	movf	ftoa@f+1,w
  3460  0611  00B1               	movwf	___fttol@f1+1
  3461  0612  0846               	movf	ftoa@f+2,w
  3462  0613  00B2               	movwf	___fttol@f1+2
  3463  0614  120A  158A  26E1  120A  118A  	fcall	___fttol
  3464  0619  1283               	bcf	3,5	;RP0=0, select bank0
  3465  061A  1303               	bcf	3,6	;RP1=0, select bank0
  3466  061B  0833               	movf	?___fttol+3,w
  3467  061C  00D0               	movwf	ftoa@l+3
  3468  061D  0832               	movf	?___fttol+2,w
  3469  061E  00CF               	movwf	ftoa@l+2
  3470  061F  0831               	movf	?___fttol+1,w
  3471  0620  00CE               	movwf	ftoa@l+1
  3472  0621  0830               	movf	?___fttol,w
  3473  0622  00CD               	movwf	ftoa@l
  3474  0623  0850               	movf	ftoa@l+3,w
  3475  0624  00FB               	movwf	___lltoft@c+3
  3476  0625  084F               	movf	ftoa@l+2,w
  3477  0626  00FA               	movwf	___lltoft@c+2
  3478  0627  084E               	movf	ftoa@l+1,w
  3479  0628  00F9               	movwf	___lltoft@c+1
  3480  0629  084D               	movf	ftoa@l,w
  3481  062A  00F8               	movwf	___lltoft@c
  3482  062B  120A  158A  21B3  120A  118A  	fcall	___lltoft
  3483  0630  0878               	movf	?___lltoft,w
  3484  0631  1283               	bcf	3,5	;RP0=0, select bank0
  3485  0632  1303               	bcf	3,6	;RP1=0, select bank0
  3486  0633  00A7               	movwf	___ftsub@f2
  3487  0634  0879               	movf	?___lltoft+1,w
  3488  0635  00A8               	movwf	___ftsub@f2+1
  3489  0636  087A               	movf	?___lltoft+2,w
  3490  0637  00A9               	movwf	___ftsub@f2+2
  3491  0638  0844               	movf	ftoa@f,w
  3492  0639  00AA               	movwf	___ftsub@f1
  3493  063A  0845               	movf	ftoa@f+1,w
  3494  063B  00AB               	movwf	___ftsub@f1+1
  3495  063C  0846               	movf	ftoa@f+2,w
  3496  063D  00AC               	movwf	___ftsub@f1+2
  3497  063E  120A  158A  20A5  120A  118A  	fcall	___ftsub
  3498  0643  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0644  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0645  0827               	movf	?___ftsub,w
  3501  0646  00C4               	movwf	ftoa@f
  3502  0647  0828               	movf	?___ftsub+1,w
  3503  0648  00C5               	movwf	ftoa@f+1
  3504  0649  0829               	movf	?___ftsub+2,w
  3505  064A  00C6               	movwf	ftoa@f+2
  3506  064B  0844               	movf	ftoa@f,w
  3507  064C  00A3               	movwf	___ftmul@f2
  3508  064D  0845               	movf	ftoa@f+1,w
  3509  064E  00A4               	movwf	___ftmul@f2+1
  3510  064F  0846               	movf	ftoa@f+2,w
  3511  0650  00A5               	movwf	___ftmul@f2+2
  3512  0651  3024               	movlw	36
  3513  0652  00A0               	movwf	___ftmul@f1
  3514  0653  3074               	movlw	116
  3515  0654  00A1               	movwf	___ftmul@f1+1
  3516  0655  3049               	movlw	73
  3517  0656  00A2               	movwf	___ftmul@f1+2
  3518  0657  120A  118A  2500  120A  118A  	fcall	___ftmul
  3519  065C  1283               	bcf	3,5	;RP0=0, select bank0
  3520  065D  1303               	bcf	3,6	;RP1=0, select bank0
  3521  065E  0820               	movf	?___ftmul,w
  3522  065F  00B0               	movwf	___fttol@f1
  3523  0660  0821               	movf	?___ftmul+1,w
  3524  0661  00B1               	movwf	___fttol@f1+1
  3525  0662  0822               	movf	?___ftmul+2,w
  3526  0663  00B2               	movwf	___fttol@f1+2
  3527  0664  120A  158A  26E1  120A  118A  	fcall	___fttol
  3528  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3529  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3530  066B  0833               	movf	?___fttol+3,w
  3531  066C  00CC               	movwf	ftoa@rem+3
  3532  066D  0832               	movf	?___fttol+2,w
  3533  066E  00CB               	movwf	ftoa@rem+2
  3534  066F  0831               	movf	?___fttol+1,w
  3535  0670  00CA               	movwf	ftoa@rem+1
  3536  0671  0830               	movf	?___fttol,w
  3537  0672  00C9               	movwf	ftoa@rem
  3538  0673  3069               	movlw	(STR_9-__stringbase)& (0+255)
  3539  0674  00C8               	movwf	??_ftoa
  3540  0675  0848               	movf	??_ftoa,w
  3541  0676  00AA               	movwf	sprintf@f
  3542  0677  0850               	movf	ftoa@l+3,w
  3543  0678  00AE               	movwf	?_sprintf+4
  3544  0679  084F               	movf	ftoa@l+2,w
  3545  067A  00AD               	movwf	?_sprintf+3
  3546  067B  084E               	movf	ftoa@l+1,w
  3547  067C  00AC               	movwf	?_sprintf+2
  3548  067D  084D               	movf	ftoa@l,w
  3549  067E  00AB               	movwf	?_sprintf+1
  3550  067F  084C               	movf	ftoa@rem+3,w
  3551  0680  00B2               	movwf	?_sprintf+8
  3552  0681  084B               	movf	ftoa@rem+2,w
  3553  0682  00B1               	movwf	?_sprintf+7
  3554  0683  084A               	movf	ftoa@rem+1,w
  3555  0684  00B0               	movwf	?_sprintf+6
  3556  0685  0849               	movf	ftoa@rem,w
  3557  0686  00AF               	movwf	?_sprintf+5
  3558  0687  0851               	movf	ftoa@cp,w
  3559  0688  120A  118A  2036   	fcall	_sprintf
  3560  068B  30A4               	movlw	ftoa@buf& (0+255)
  3561  068C  0008               	return
  3562  068D                     __end_of_ftoa:	
  3563                           
  3564                           	psect	text17
  3565  0036                     __ptext17:	
  3566 ;; *************** function _sprintf *****************
  3567 ;; Defined at:
  3568 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  sp              1    wreg     PTR unsigned char 
  3571 ;;		 -> ftoa@buf(17), 
  3572 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  3573 ;;		 -> STR_9(11), 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  3576 ;;		 -> ftoa@buf(17), 
  3577 ;;  _val            4   26[BANK0 ] struct .
  3578 ;;  prec            2   33[BANK0 ] int 
  3579 ;;  width           2   31[BANK0 ] int 
  3580 ;;  c               1   35[BANK0 ] char 
  3581 ;;  ap              1   25[BANK0 ] PTR void [1]
  3582 ;;		 -> ?_sprintf(2), 
  3583 ;;  flag            1   24[BANK0 ] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  2   10[BANK0 ] int 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3593 ;;      Params:         0       9       0       0       0
  3594 ;;      Locals:         0      12       0       0       0
  3595 ;;      Temps:          0       5       0       0       0
  3596 ;;      Totals:         0      26       0       0       0
  3597 ;;Total ram usage:       26 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    1
  3600 ;; This function calls:
  3601 ;;		___lldiv
  3602 ;;		___llmod
  3603 ;;		___wmul
  3604 ;;		_isdigit
  3605 ;; This function is called by:
  3606 ;;		_ftoa
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           
  3611                           ;psect for function _sprintf
  3612  0036                     _sprintf:	
  3613                           
  3614                           ;incstack = 0
  3615 ;; hardware stack exceeded
  3616                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3617                           ;sprintf@sp stored from wreg
  3618  0036  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0037  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0038  00BE               	movwf	sprintf@sp
  3621                           
  3622                           ;doprnt.c: 494: va_list ap;
  3623                           ;doprnt.c: 499: signed char c;
  3624                           ;doprnt.c: 501: int width;
  3625                           ;doprnt.c: 504: int prec;
  3626                           ;doprnt.c: 508: unsigned char flag;
  3627                           ;doprnt.c: 527: union {
  3628                           ;doprnt.c: 528: unsigned long _val;
  3629                           ;doprnt.c: 529: struct {
  3630                           ;doprnt.c: 530: const char * _cp;
  3631                           ;doprnt.c: 531: unsigned _len;
  3632                           ;doprnt.c: 532: } _str;
  3633                           ;doprnt.c: 533: } _val;
  3634                           ;doprnt.c: 542: *ap = __va_start();
  3635  0039  302B               	movlw	(?_sprintf+1)& (0+255)
  3636  003A  00B3               	movwf	??_sprintf
  3637  003B  0833               	movf	??_sprintf,w
  3638  003C  00B9               	movwf	sprintf@ap
  3639  003D                     i1l2169:	
  3640                           ;doprnt.c: 545: while(c = *f++) {
  3641                           
  3642  003D  3001               	movlw	1
  3643  003E  07AA               	addwf	sprintf@f,f
  3644  003F  30FF               	movlw	-1
  3645  0040  072A               	addwf	sprintf@f,w
  3646  0041  0084               	movwf	4
  3647  0042  120A  118A  274F  120A  118A  	fcall	stringdir
  3648  0047  00B3               	movwf	??_sprintf
  3649  0048  0833               	movf	??_sprintf,w
  3650  0049  00C3               	movwf	sprintf@c
  3651  004A  08C3               	movf	sprintf@c,f
  3652  004B  1903               	btfsc	3,2
  3653  004C  2A6D               	goto	i1l2171
  3654                           
  3655                           ;doprnt.c: 547: if(c != '%')
  3656  004D  0843               	movf	sprintf@c,w
  3657  004E  3A25               	xorlw	37
  3658  004F  1903               	skipnz
  3659  0050  285D               	goto	i1l2079
  3660                           
  3661                           ;doprnt.c: 549: {
  3662                           ;doprnt.c: 550: ((*sp++ = (c)));
  3663  0051  0843               	movf	sprintf@c,w
  3664  0052  00B3               	movwf	??_sprintf
  3665  0053  083E               	movf	sprintf@sp,w
  3666  0054  0084               	movwf	4
  3667  0055  0833               	movf	??_sprintf,w
  3668  0056  1783               	bsf	3,7	;select IRP bank2
  3669  0057  0080               	movwf	0
  3670  0058  3001               	movlw	1
  3671  0059  00B3               	movwf	??_sprintf
  3672  005A  0833               	movf	??_sprintf,w
  3673  005B  07BE               	addwf	sprintf@sp,f
  3674                           
  3675                           ;doprnt.c: 551: continue;
  3676  005C  283D               	goto	i1l2169
  3677  005D                     i1l2079:	
  3678                           
  3679                           ;doprnt.c: 552: }
  3680                           ;doprnt.c: 555: width = 0;
  3681  005D  01BF               	clrf	sprintf@width
  3682  005E  01C0               	clrf	sprintf@width+1
  3683                           
  3684                           ;doprnt.c: 557: flag = 0;
  3685  005F  01B8               	clrf	sprintf@flag
  3686                           
  3687                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  3688  0060  082A               	movf	sprintf@f,w
  3689  0061  0084               	movwf	4
  3690  0062  120A  118A  274F  120A  118A  	fcall	stringdir
  3691  0067  120A  158A  201E  120A  118A  	fcall	_isdigit
  3692  006C  1C03               	btfss	3,0
  3693  006D  28B0               	goto	i1l2093
  3694                           
  3695                           ;doprnt.c: 607: width = 0;
  3696  006E  1283               	bcf	3,5	;RP0=0, select bank0
  3697  006F  1303               	bcf	3,6	;RP1=0, select bank0
  3698  0070  01BF               	clrf	sprintf@width
  3699  0071  01C0               	clrf	sprintf@width+1
  3700  0072                     i1l2085:	
  3701                           ;doprnt.c: 608: do {
  3702                           
  3703                           
  3704                           ;doprnt.c: 609: width *= 10;
  3705  0072  300A               	movlw	10
  3706  0073  00F0               	movwf	___wmul@multiplier
  3707  0074  3000               	movlw	0
  3708  0075  00F1               	movwf	___wmul@multiplier+1
  3709  0076  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0077  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0078  0840               	movf	sprintf@width+1,w
  3712  0079  01F3               	clrf	___wmul@multiplicand+1
  3713  007A  07F3               	addwf	___wmul@multiplicand+1,f
  3714  007B  083F               	movf	sprintf@width,w
  3715  007C  01F2               	clrf	___wmul@multiplicand
  3716  007D  07F2               	addwf	___wmul@multiplicand,f
  3717  007E  120A  158A  2140  120A  118A  	fcall	___wmul
  3718  0083  0871               	movf	?___wmul+1,w
  3719  0084  1283               	bcf	3,5	;RP0=0, select bank0
  3720  0085  1303               	bcf	3,6	;RP1=0, select bank0
  3721  0086  01C0               	clrf	sprintf@width+1
  3722  0087  07C0               	addwf	sprintf@width+1,f
  3723  0088  0870               	movf	?___wmul,w
  3724  0089  01BF               	clrf	sprintf@width
  3725  008A  07BF               	addwf	sprintf@width,f
  3726                           
  3727                           ;doprnt.c: 610: width += *f++ - '0';
  3728  008B  082A               	movf	sprintf@f,w
  3729  008C  0084               	movwf	4
  3730  008D  120A  118A  274F  120A  118A  	fcall	stringdir
  3731  0092  3ED0               	addlw	208
  3732  0093  00B3               	movwf	??_sprintf
  3733  0094  30FF               	movlw	255
  3734  0095  1803               	skipnc
  3735  0096  3000               	movlw	0
  3736  0097  00B4               	movwf	??_sprintf+1
  3737  0098  0833               	movf	??_sprintf,w
  3738  0099  07BF               	addwf	sprintf@width,f
  3739  009A  1803               	skipnc
  3740  009B  0AC0               	incf	sprintf@width+1,f
  3741  009C  0834               	movf	??_sprintf+1,w
  3742  009D  07C0               	addwf	sprintf@width+1,f
  3743  009E  3001               	movlw	1
  3744  009F  00B3               	movwf	??_sprintf
  3745  00A0  0833               	movf	??_sprintf,w
  3746  00A1  07AA               	addwf	sprintf@f,f
  3747                           
  3748                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  3749  00A2  082A               	movf	sprintf@f,w
  3750  00A3  0084               	movwf	4
  3751  00A4  120A  118A  274F  120A  118A  	fcall	stringdir
  3752  00A9  120A  158A  201E  120A  118A  	fcall	_isdigit
  3753  00AE  1803               	btfsc	3,0
  3754  00AF  2872               	goto	i1l2085
  3755  00B0                     i1l2093:	
  3756                           
  3757                           ;doprnt.c: 617: }
  3758                           ;doprnt.c: 620: if(*f == '.') {
  3759  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  3760  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  3761  00B2  082A               	movf	sprintf@f,w
  3762  00B3  0084               	movwf	4
  3763  00B4  120A  118A  274F  120A  118A  	fcall	stringdir
  3764  00B9  3A2E               	xorlw	46
  3765  00BA  1D03               	skipz
  3766  00BB  28FE               	goto	i1l2105
  3767                           
  3768                           ;doprnt.c: 622: f++;
  3769  00BC  3001               	movlw	1
  3770  00BD  00B3               	movwf	??_sprintf
  3771  00BE  0833               	movf	??_sprintf,w
  3772  00BF  07AA               	addwf	sprintf@f,f
  3773                           
  3774                           ;doprnt.c: 629: {
  3775                           ;doprnt.c: 630: prec = 0;
  3776  00C0  01C1               	clrf	sprintf@prec
  3777  00C1  01C2               	clrf	sprintf@prec+1
  3778  00C2                     i1l2103:	
  3779                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  3780                           
  3781  00C2  082A               	movf	sprintf@f,w
  3782  00C3  0084               	movwf	4
  3783  00C4  120A  118A  274F  120A  118A  	fcall	stringdir
  3784  00C9  120A  158A  201E  120A  118A  	fcall	_isdigit
  3785  00CE  1C03               	btfss	3,0
  3786  00CF  290A               	goto	i1l2111
  3787                           
  3788                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  3789  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  3790  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  3791  00D2  0842               	movf	sprintf@prec+1,w
  3792  00D3  01F1               	clrf	___wmul@multiplier+1
  3793  00D4  07F1               	addwf	___wmul@multiplier+1,f
  3794  00D5  0841               	movf	sprintf@prec,w
  3795  00D6  01F0               	clrf	___wmul@multiplier
  3796  00D7  07F0               	addwf	___wmul@multiplier,f
  3797  00D8  300A               	movlw	10
  3798  00D9  00F2               	movwf	___wmul@multiplicand
  3799  00DA  3000               	movlw	0
  3800  00DB  00F3               	movwf	___wmul@multiplicand+1
  3801  00DC  120A  158A  2140  120A  118A  	fcall	___wmul
  3802  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  3803  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  3804  00E3  082A               	movf	sprintf@f,w
  3805  00E4  0084               	movwf	4
  3806  00E5  120A  118A  274F  120A  118A  	fcall	stringdir
  3807  00EA  0770               	addwf	?___wmul,w
  3808  00EB  00B3               	movwf	??_sprintf
  3809  00EC  3000               	movlw	0
  3810  00ED  1803               	skipnc
  3811  00EE  3001               	movlw	1
  3812  00EF  0771               	addwf	?___wmul+1,w
  3813  00F0  00B4               	movwf	??_sprintf+1
  3814  00F1  0833               	movf	??_sprintf,w
  3815  00F2  3ED0               	addlw	208
  3816  00F3  00C1               	movwf	sprintf@prec
  3817  00F4  0834               	movf	??_sprintf+1,w
  3818  00F5  1803               	skipnc
  3819  00F6  3E01               	addlw	1
  3820  00F7  3EFF               	addlw	255
  3821  00F8  00C2               	movwf	sprintf@prec+1
  3822  00F9  3001               	movlw	1
  3823  00FA  00B3               	movwf	??_sprintf
  3824  00FB  0833               	movf	??_sprintf,w
  3825  00FC  07AA               	addwf	sprintf@f,f
  3826  00FD  28C2               	goto	i1l2103
  3827  00FE                     i1l2105:	
  3828                           ;doprnt.c: 633: }
  3829                           ;doprnt.c: 634: } else {
  3830                           
  3831                           
  3832                           ;doprnt.c: 635: prec = 0;
  3833  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  3834  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  3835  0100  01C1               	clrf	sprintf@prec
  3836  0101  01C2               	clrf	sprintf@prec+1
  3837                           
  3838                           ;doprnt.c: 644: switch(c = *f++) {
  3839                           
  3840                           ;doprnt.c: 639: }
  3841                           ;doprnt.c: 642: loop:
  3842  0102  290A               	goto	i1l2111
  3843  0103                     i1l263:	
  3844                           ;doprnt.c: 650: case 'l':
  3845                           
  3846                           ;doprnt.c: 647: goto alldone;
  3847                           
  3848                           ;doprnt.c: 646: case 0:
  3849                           
  3850                           
  3851                           ;doprnt.c: 652: flag |= 0x10;
  3852  0103  1638               	bsf	sprintf@flag,4
  3853                           
  3854                           ;doprnt.c: 653: goto loop;
  3855  0104  290A               	goto	i1l2111
  3856  0105                     i1l2107:	
  3857                           ;doprnt.c: 826: case 'u':
  3858                           
  3859                           ;doprnt.c: 822: continue;
  3860                           
  3861                           ;doprnt.c: 811: default:
  3862                           
  3863                           
  3864                           ;doprnt.c: 827: flag |= 0xC0;
  3865  0105  30C0               	movlw	192
  3866  0106  00B3               	movwf	??_sprintf
  3867  0107  0833               	movf	??_sprintf,w
  3868  0108  04B8               	iorwf	sprintf@flag,f
  3869                           
  3870                           ;doprnt.c: 831: }
  3871                           
  3872                           ;doprnt.c: 828: break;
  3873  0109  2921               	goto	i1l266
  3874  010A                     i1l2111:	
  3875  010A  3001               	movlw	1
  3876  010B  1283               	bcf	3,5	;RP0=0, select bank0
  3877  010C  1303               	bcf	3,6	;RP1=0, select bank0
  3878  010D  07AA               	addwf	sprintf@f,f
  3879  010E  30FF               	movlw	-1
  3880  010F  072A               	addwf	sprintf@f,w
  3881  0110  0084               	movwf	4
  3882  0111  120A  118A  274F  120A  118A  	fcall	stringdir
  3883  0116  00C3               	movwf	sprintf@c
  3884                           
  3885                           ; Switch size 1, requested type "space"
  3886                           ; Number of cases is 3, Range of values is 0 to 117
  3887                           ; switch strategies available:
  3888                           ; Name         Instructions Cycles
  3889                           ; simple_byte           10     6 (average)
  3890                           ; jumptable            260     6 (fixed)
  3891                           ;	Chosen strategy is simple_byte
  3892  0117  3A00               	xorlw	0	; case 0
  3893  0118  1903               	skipnz
  3894  0119  2A6D               	goto	i1l2171
  3895  011A  3A6C               	xorlw	108	; case 108
  3896  011B  1903               	skipnz
  3897  011C  2903               	goto	i1l263
  3898  011D  3A19               	xorlw	25	; case 117
  3899  011E  1903               	skipnz
  3900  011F  2905               	goto	i1l2107
  3901  0120  283D               	goto	i1l2169
  3902  0121                     i1l266:	
  3903                           
  3904                           ;doprnt.c: 1282: {
  3905                           ;doprnt.c: 1290: if(flag & 0x10)
  3906  0121  1E38               	btfss	sprintf@flag,4
  3907  0122  2933               	goto	i1l2117
  3908                           
  3909                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  3910  0123  0839               	movf	sprintf@ap,w
  3911  0124  0084               	movwf	4
  3912  0125  1383               	bcf	3,7	;select IRP bank0
  3913  0126  0800               	movf	0,w
  3914  0127  00BA               	movwf	sprintf@_val
  3915  0128  0A84               	incf	4,f
  3916  0129  0800               	movf	0,w
  3917  012A  00BB               	movwf	sprintf@_val+1
  3918  012B  0A84               	incf	4,f
  3919  012C  0800               	movf	0,w
  3920  012D  00BC               	movwf	sprintf@_val+2
  3921  012E  0A84               	incf	4,f
  3922  012F  0800               	movf	0,w
  3923  0130  00BD               	movwf	sprintf@_val+3
  3924  0131  3004               	movlw	4
  3925  0132  2942               	goto	L4
  3926  0133                     i1l2117:	
  3927                           
  3928                           ;doprnt.c: 1292: else
  3929                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3930  0133  0839               	movf	sprintf@ap,w
  3931  0134  0084               	movwf	4
  3932  0135  1383               	bcf	3,7	;select IRP bank0
  3933  0136  0800               	movf	0,w
  3934  0137  00B3               	movwf	??_sprintf
  3935  0138  0A84               	incf	4,f
  3936  0139  0800               	movf	0,w
  3937  013A  00B4               	movwf	??_sprintf+1
  3938  013B  0833               	movf	??_sprintf,w
  3939  013C  00BA               	movwf	sprintf@_val
  3940  013D  0834               	movf	??_sprintf+1,w
  3941  013E  00BB               	movwf	sprintf@_val+1
  3942  013F  01BC               	clrf	sprintf@_val+2
  3943  0140  01BD               	clrf	sprintf@_val+3
  3944  0141  3002               	movlw	2
  3945  0142                     L4:	
  3946  0142  00B3               	movwf	??_sprintf
  3947  0143  0833               	movf	??_sprintf,w
  3948  0144  07B9               	addwf	sprintf@ap,f
  3949                           
  3950                           ;doprnt.c: 1296: }
  3951                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  3952  0145  0842               	movf	sprintf@prec+1,w
  3953  0146  0441               	iorwf	sprintf@prec,w
  3954  0147  1D03               	skipz
  3955  0148  2955               	goto	i1l2127
  3956  0149  083D               	movf	sprintf@_val+3,w
  3957  014A  043C               	iorwf	sprintf@_val+2,w
  3958  014B  043B               	iorwf	sprintf@_val+1,w
  3959  014C  043A               	iorwf	sprintf@_val,w
  3960  014D  1D03               	skipz
  3961  014E  2955               	goto	i1l2127
  3962                           
  3963                           ;doprnt.c: 1300: prec++;
  3964  014F  3001               	movlw	1
  3965  0150  07C1               	addwf	sprintf@prec,f
  3966  0151  1803               	skipnc
  3967  0152  0AC2               	incf	sprintf@prec+1,f
  3968  0153  3000               	movlw	0
  3969  0154  07C2               	addwf	sprintf@prec+1,f
  3970  0155                     i1l2127:	
  3971                           
  3972                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3973  0155  01C3               	clrf	sprintf@c
  3974  0156  0AC3               	incf	sprintf@c,f
  3975  0157  0843               	movf	sprintf@c,w
  3976  0158  3A0A               	xorlw	10
  3977  0159  1903               	btfsc	3,2
  3978  015A  2997               	goto	i1l2139
  3979  015B                     i1l2131:	
  3980                           
  3981                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  3982  015B  0843               	movf	sprintf@c,w
  3983  015C  00B3               	movwf	??_sprintf
  3984  015D  3001               	movlw	1
  3985  015E                     u247_25:	
  3986  015E  1003               	clrc
  3987  015F  0DB3               	rlf	??_sprintf,f
  3988  0160  3EFF               	addlw	-1
  3989  0161  1D03               	skipz
  3990  0162  295E               	goto	u247_25
  3991  0163  1003               	clrc
  3992  0164  0D33               	rlf	??_sprintf,w
  3993  0165  3E01               	addlw	low (_dpowers-__stringbase)
  3994  0166  0084               	movwf	4
  3995  0167  120A  118A  274F  120A  118A  	fcall	stringdir
  3996  016C  00B4               	movwf	??_sprintf+1
  3997  016D  120A  118A  274F  120A  118A  	fcall	stringdir
  3998  0172  00B5               	movwf	??_sprintf+2
  3999  0173  120A  118A  274F  120A  118A  	fcall	stringdir
  4000  0178  00B6               	movwf	??_sprintf+3
  4001  0179  120A  118A  274F  120A  118A  	fcall	stringdir
  4002  017E  00B7               	movwf	??_sprintf+4
  4003  017F  0837               	movf	??_sprintf+4,w
  4004  0180  023D               	subwf	sprintf@_val+3,w
  4005  0181  1D03               	skipz
  4006  0182  298D               	goto	u248_25
  4007  0183  0836               	movf	??_sprintf+3,w
  4008  0184  023C               	subwf	sprintf@_val+2,w
  4009  0185  1D03               	skipz
  4010  0186  298D               	goto	u248_25
  4011  0187  0835               	movf	??_sprintf+2,w
  4012  0188  023B               	subwf	sprintf@_val+1,w
  4013  0189  1D03               	skipz
  4014  018A  298D               	goto	u248_25
  4015  018B  0834               	movf	??_sprintf+1,w
  4016  018C  023A               	subwf	sprintf@_val,w
  4017  018D                     u248_25:	
  4018  018D  1C03               	btfss	3,0
  4019  018E  2997               	goto	i1l2139
  4020                           
  4021                           ;doprnt.c: 1316: break;
  4022  018F  3001               	movlw	1
  4023  0190  00B3               	movwf	??_sprintf
  4024  0191  0833               	movf	??_sprintf,w
  4025  0192  07C3               	addwf	sprintf@c,f
  4026  0193  0843               	movf	sprintf@c,w
  4027  0194  3A0A               	xorlw	10
  4028  0195  1D03               	skipz
  4029  0196  295B               	goto	i1l2131
  4030  0197                     i1l2139:	
  4031                           
  4032                           ;doprnt.c: 1348: if(c < prec)
  4033  0197  0843               	movf	sprintf@c,w
  4034  0198  00B3               	movwf	??_sprintf
  4035  0199  01B4               	clrf	??_sprintf+1
  4036  019A  1BB3               	btfsc	??_sprintf,7
  4037  019B  03B4               	decf	??_sprintf+1,f
  4038  019C  0834               	movf	??_sprintf+1,w
  4039  019D  3A80               	xorlw	128
  4040  019E  00B5               	movwf	??_sprintf+2
  4041  019F  0842               	movf	sprintf@prec+1,w
  4042  01A0  3A80               	xorlw	128
  4043  01A1  0235               	subwf	??_sprintf+2,w
  4044  01A2  1D03               	skipz
  4045  01A3  29A6               	goto	u250_25
  4046  01A4  0841               	movf	sprintf@prec,w
  4047  01A5  0233               	subwf	??_sprintf,w
  4048  01A6                     u250_25:	
  4049  01A6  1803               	skipnc
  4050  01A7  29AF               	goto	i1l2143
  4051                           
  4052                           ;doprnt.c: 1349: c = prec;
  4053  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  4054  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  4055  01AA  0841               	movf	sprintf@prec,w
  4056  01AB  00B3               	movwf	??_sprintf
  4057  01AC  0833               	movf	??_sprintf,w
  4058  01AD  00C3               	movwf	sprintf@c
  4059  01AE  29C9               	goto	i1l2147
  4060  01AF                     i1l2143:	
  4061                           
  4062                           ;doprnt.c: 1350: else if(prec < c)
  4063  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  4064  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  4065  01B1  0843               	movf	sprintf@c,w
  4066  01B2  00B3               	movwf	??_sprintf
  4067  01B3  01B4               	clrf	??_sprintf+1
  4068  01B4  1BB3               	btfsc	??_sprintf,7
  4069  01B5  03B4               	decf	??_sprintf+1,f
  4070  01B6  0842               	movf	sprintf@prec+1,w
  4071  01B7  3A80               	xorlw	128
  4072  01B8  00B5               	movwf	??_sprintf+2
  4073  01B9  0834               	movf	??_sprintf+1,w
  4074  01BA  3A80               	xorlw	128
  4075  01BB  0235               	subwf	??_sprintf+2,w
  4076  01BC  1D03               	skipz
  4077  01BD  29C0               	goto	u251_25
  4078  01BE  0833               	movf	??_sprintf,w
  4079  01BF  0241               	subwf	sprintf@prec,w
  4080  01C0                     u251_25:	
  4081  01C0  1803               	skipnc
  4082  01C1  29C9               	goto	i1l2147
  4083                           
  4084                           ;doprnt.c: 1351: prec = c;
  4085  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  4086  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  4087  01C4  0843               	movf	sprintf@c,w
  4088  01C5  00C1               	movwf	sprintf@prec
  4089  01C6  01C2               	clrf	sprintf@prec+1
  4090  01C7  1BC1               	btfsc	sprintf@prec,7
  4091  01C8  03C2               	decf	sprintf@prec+1,f
  4092  01C9                     i1l2147:	
  4093                           
  4094                           ;doprnt.c: 1390: if(width > c)
  4095  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  4096  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  4097  01CB  0843               	movf	sprintf@c,w
  4098  01CC  00B3               	movwf	??_sprintf
  4099  01CD  01B4               	clrf	??_sprintf+1
  4100  01CE  1BB3               	btfsc	??_sprintf,7
  4101  01CF  03B4               	decf	??_sprintf+1,f
  4102  01D0  0834               	movf	??_sprintf+1,w
  4103  01D1  3A80               	xorlw	128
  4104  01D2  00B5               	movwf	??_sprintf+2
  4105  01D3  0840               	movf	sprintf@width+1,w
  4106  01D4  3A80               	xorlw	128
  4107  01D5  0235               	subwf	??_sprintf+2,w
  4108  01D6  1D03               	skipz
  4109  01D7  29DA               	goto	u252_25
  4110  01D8  083F               	movf	sprintf@width,w
  4111  01D9  0233               	subwf	??_sprintf,w
  4112  01DA                     u252_25:	
  4113  01DA  1803               	skipnc
  4114  01DB  29EA               	goto	i1l2151
  4115                           
  4116                           ;doprnt.c: 1391: width -= c;
  4117  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  4118  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  4119  01DE  0843               	movf	sprintf@c,w
  4120  01DF  00B3               	movwf	??_sprintf
  4121  01E0  01B4               	clrf	??_sprintf+1
  4122  01E1  1BB3               	btfsc	??_sprintf,7
  4123  01E2  03B4               	decf	??_sprintf+1,f
  4124  01E3  0833               	movf	??_sprintf,w
  4125  01E4  02BF               	subwf	sprintf@width,f
  4126  01E5  0834               	movf	??_sprintf+1,w
  4127  01E6  1C03               	skipc
  4128  01E7  03C0               	decf	sprintf@width+1,f
  4129  01E8  02C0               	subwf	sprintf@width+1,f
  4130  01E9  29EE               	goto	i1l2153
  4131  01EA                     i1l2151:	
  4132                           
  4133                           ;doprnt.c: 1392: else
  4134                           ;doprnt.c: 1393: width = 0;
  4135  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  4136  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  4137  01EC  01BF               	clrf	sprintf@width
  4138  01ED  01C0               	clrf	sprintf@width+1
  4139  01EE                     i1l2153:	
  4140                           
  4141                           ;doprnt.c: 1431: {
  4142                           ;doprnt.c: 1433: if(width
  4143                           ;doprnt.c: 1437: )
  4144  01EE  0840               	movf	sprintf@width+1,w
  4145  01EF  043F               	iorwf	sprintf@width,w
  4146  01F0  1903               	skipnz
  4147  01F1  2A5E               	goto	i1l2167
  4148                           
  4149                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4150                           
  4151                           ;doprnt.c: 1438: do
  4152  01F2  3020               	movlw	32
  4153  01F3  00B3               	movwf	??_sprintf
  4154  01F4  083E               	movf	sprintf@sp,w
  4155  01F5  0084               	movwf	4
  4156  01F6  0833               	movf	??_sprintf,w
  4157  01F7  1783               	bsf	3,7	;select IRP bank2
  4158  01F8  0080               	movwf	0
  4159  01F9  3001               	movlw	1
  4160  01FA  00B3               	movwf	??_sprintf
  4161  01FB  0833               	movf	??_sprintf,w
  4162  01FC  07BE               	addwf	sprintf@sp,f
  4163                           
  4164                           ;doprnt.c: 1440: while(--width);
  4165  01FD  30FF               	movlw	255
  4166  01FE  07BF               	addwf	sprintf@width,f
  4167  01FF  1803               	skipnc
  4168  0200  0AC0               	incf	sprintf@width+1,f
  4169  0201  30FF               	movlw	255
  4170  0202  07C0               	addwf	sprintf@width+1,f
  4171  0203  29EE               	goto	i1l2153
  4172  0204                     i1l2161:	
  4173                           ;doprnt.c: 1478: }
  4174                           ;doprnt.c: 1483: while(prec--) {
  4175                           
  4176                           
  4177                           ;doprnt.c: 1487: {
  4178                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4179  0204  3000               	movlw	0
  4180  0205  00A3               	movwf	___llmod@divisor+3
  4181  0206  3000               	movlw	0
  4182  0207  00A2               	movwf	___llmod@divisor+2
  4183  0208  3000               	movlw	0
  4184  0209  00A1               	movwf	___llmod@divisor+1
  4185  020A  300A               	movlw	10
  4186  020B  00A0               	movwf	___llmod@divisor
  4187  020C  0841               	movf	sprintf@prec,w
  4188  020D  00B3               	movwf	??_sprintf
  4189  020E  3001               	movlw	1
  4190  020F                     u255_25:	
  4191  020F  1003               	clrc
  4192  0210  0DB3               	rlf	??_sprintf,f
  4193  0211  3EFF               	addlw	-1
  4194  0212  1D03               	skipz
  4195  0213  2A0F               	goto	u255_25
  4196  0214  1003               	clrc
  4197  0215  0D33               	rlf	??_sprintf,w
  4198  0216  3E01               	addlw	low (_dpowers-__stringbase)
  4199  0217  0084               	movwf	4
  4200  0218  120A  118A  274F  120A  118A  	fcall	stringdir
  4201  021D  00F0               	movwf	___lldiv@divisor
  4202  021E  120A  118A  274F  120A  118A  	fcall	stringdir
  4203  0223  00F1               	movwf	___lldiv@divisor+1
  4204  0224  120A  118A  274F  120A  118A  	fcall	stringdir
  4205  0229  00F2               	movwf	___lldiv@divisor+2
  4206  022A  120A  118A  274F  120A  118A  	fcall	stringdir
  4207  022F  00F3               	movwf	___lldiv@divisor+3
  4208  0230  083D               	movf	sprintf@_val+3,w
  4209  0231  00F7               	movwf	___lldiv@dividend+3
  4210  0232  083C               	movf	sprintf@_val+2,w
  4211  0233  00F6               	movwf	___lldiv@dividend+2
  4212  0234  083B               	movf	sprintf@_val+1,w
  4213  0235  00F5               	movwf	___lldiv@dividend+1
  4214  0236  083A               	movf	sprintf@_val,w
  4215  0237  00F4               	movwf	___lldiv@dividend
  4216  0238  120A  158A  2538  120A  118A  	fcall	___lldiv
  4217  023D  0873               	movf	?___lldiv+3,w
  4218  023E  1283               	bcf	3,5	;RP0=0, select bank0
  4219  023F  1303               	bcf	3,6	;RP1=0, select bank0
  4220  0240  00A7               	movwf	___llmod@dividend+3
  4221  0241  0872               	movf	?___lldiv+2,w
  4222  0242  00A6               	movwf	___llmod@dividend+2
  4223  0243  0871               	movf	?___lldiv+1,w
  4224  0244  00A5               	movwf	___llmod@dividend+1
  4225  0245  0870               	movf	?___lldiv,w
  4226  0246  00A4               	movwf	___llmod@dividend
  4227  0247  120A  158A  2434  120A  118A  	fcall	___llmod
  4228  024C  1283               	bcf	3,5	;RP0=0, select bank0
  4229  024D  1303               	bcf	3,6	;RP1=0, select bank0
  4230  024E  0820               	movf	?___llmod,w
  4231  024F  3E30               	addlw	48
  4232  0250  00B4               	movwf	??_sprintf+1
  4233  0251  0834               	movf	??_sprintf+1,w
  4234  0252  00C3               	movwf	sprintf@c
  4235                           
  4236                           ;doprnt.c: 1532: }
  4237                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4238  0253  0843               	movf	sprintf@c,w
  4239  0254  00B3               	movwf	??_sprintf
  4240  0255  083E               	movf	sprintf@sp,w
  4241  0256  0084               	movwf	4
  4242  0257  0833               	movf	??_sprintf,w
  4243  0258  1783               	bsf	3,7	;select IRP bank2
  4244  0259  0080               	movwf	0
  4245  025A  3001               	movlw	1
  4246  025B  00B3               	movwf	??_sprintf
  4247  025C  0833               	movf	??_sprintf,w
  4248  025D  07BE               	addwf	sprintf@sp,f
  4249  025E                     i1l2167:	
  4250  025E  30FF               	movlw	255
  4251  025F  07C1               	addwf	sprintf@prec,f
  4252  0260  1803               	skipnc
  4253  0261  0AC2               	incf	sprintf@prec+1,f
  4254  0262  30FF               	movlw	255
  4255  0263  07C2               	addwf	sprintf@prec+1,f
  4256  0264  30FF               	movlw	255
  4257  0265  0642               	xorwf	sprintf@prec+1,w
  4258  0266  1D03               	skipz
  4259  0267  2A6A               	goto	u256_25
  4260  0268  30FF               	movlw	255
  4261  0269  0641               	xorwf	sprintf@prec,w
  4262  026A                     u256_25:	
  4263  026A  1903               	btfsc	3,2
  4264  026B  283D               	goto	i1l2169
  4265  026C  2A04               	goto	i1l2161
  4266  026D                     i1l2171:	
  4267                           ;doprnt.c: 1534: }
  4268                           ;doprnt.c: 1542: }
  4269                           ;doprnt.c: 1544: alldone:
  4270                           
  4271                           
  4272                           ;doprnt.c: 1547: *sp = 0;
  4273  026D  083E               	movf	sprintf@sp,w
  4274  026E  0084               	movwf	4
  4275  026F  1783               	bsf	3,7	;select IRP bank2
  4276  0270  0180               	clrf	0
  4277  0271  0008               	return
  4278  0272                     __end_of_sprintf:	
  4279                           ;doprnt.c: 1549: return 0;
  4280                           ;	Return value of _sprintf is never used
  4281                           
  4282                           
  4283                           	psect	text18
  4284  081E                     __ptext18:	
  4285 ;; *************** function _isdigit *****************
  4286 ;; Defined at:
  4287 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  c               1    wreg     unsigned char 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  c               1    1[COMMON] unsigned char 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;		None               void
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4301 ;;      Params:         0       0       0       0       0
  4302 ;;      Locals:         2       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0
  4304 ;;      Totals:         2       0       0       0       0
  4305 ;;Total ram usage:        2 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_sprintf
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _isdigit
  4316  081E                     _isdigit:	
  4317                           
  4318                           ;incstack = 0
  4319 ;; hardware stack exceeded
  4320                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4321                           ;isdigit@c stored from wreg
  4322  081E  00F1               	movwf	isdigit@c
  4323  081F  01F0               	clrf	_isdigit$892
  4324  0820  303A               	movlw	58
  4325  0821  0271               	subwf	isdigit@c,w
  4326  0822  1803               	skipnc
  4327  0823  282A               	goto	i1l1905
  4328  0824  3030               	movlw	48
  4329  0825  0271               	subwf	isdigit@c,w
  4330  0826  1C03               	skipc
  4331  0827  282A               	goto	i1l1905
  4332  0828  01F0               	clrf	_isdigit$892
  4333  0829  0AF0               	incf	_isdigit$892,f
  4334  082A                     i1l1905:	
  4335  082A  0C70               	rrf	_isdigit$892,w
  4336  082B  0008               	return
  4337  082C                     __end_of_isdigit:	
  4338                           
  4339                           	psect	text19
  4340  0940                     __ptext19:	
  4341 ;; *************** function ___wmul *****************
  4342 ;; Defined at:
  4343 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  multiplier      2    0[COMMON] unsigned int 
  4346 ;;  multiplicand    2    2[COMMON] unsigned int 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  product         2    4[COMMON] unsigned int 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  2    0[COMMON] unsigned int 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4358 ;;      Params:         4       0       0       0       0
  4359 ;;      Locals:         2       0       0       0       0
  4360 ;;      Temps:          0       0       0       0       0
  4361 ;;      Totals:         6       0       0       0       0
  4362 ;;Total ram usage:        6 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_sprintf
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           
  4372                           ;psect for function ___wmul
  4373  0940                     ___wmul:	
  4374                           
  4375                           ;incstack = 0
  4376 ;; hardware stack exceeded
  4377                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4378  0940  01F4               	clrf	___wmul@product
  4379  0941  01F5               	clrf	___wmul@product+1
  4380  0942                     i1l1911:	
  4381  0942  1C70               	btfss	___wmul@multiplier,0
  4382  0943  294A               	goto	i1l369
  4383  0944  0872               	movf	___wmul@multiplicand,w
  4384  0945  07F4               	addwf	___wmul@product,f
  4385  0946  1803               	skipnc
  4386  0947  0AF5               	incf	___wmul@product+1,f
  4387  0948  0873               	movf	___wmul@multiplicand+1,w
  4388  0949  07F5               	addwf	___wmul@product+1,f
  4389  094A                     i1l369:	
  4390  094A  3001               	movlw	1
  4391  094B                     u195_25:	
  4392  094B  1003               	clrc
  4393  094C  0DF2               	rlf	___wmul@multiplicand,f
  4394  094D  0DF3               	rlf	___wmul@multiplicand+1,f
  4395  094E  3EFF               	addlw	-1
  4396  094F  1D03               	skipz
  4397  0950  294B               	goto	u195_25
  4398  0951  3001               	movlw	1
  4399  0952                     u196_25:	
  4400  0952  1003               	clrc
  4401  0953  0CF1               	rrf	___wmul@multiplier+1,f
  4402  0954  0CF0               	rrf	___wmul@multiplier,f
  4403  0955  3EFF               	addlw	-1
  4404  0956  1D03               	skipz
  4405  0957  2952               	goto	u196_25
  4406  0958  0871               	movf	___wmul@multiplier+1,w
  4407  0959  0470               	iorwf	___wmul@multiplier,w
  4408  095A  1D03               	skipz
  4409  095B  2942               	goto	i1l1911
  4410  095C  0875               	movf	___wmul@product+1,w
  4411  095D  01F1               	clrf	?___wmul+1
  4412  095E  07F1               	addwf	?___wmul+1,f
  4413  095F  0874               	movf	___wmul@product,w
  4414  0960  01F0               	clrf	?___wmul
  4415  0961  07F0               	addwf	?___wmul,f
  4416  0962  0008               	return
  4417  0963                     __end_of___wmul:	
  4418                           
  4419                           	psect	text20
  4420  0C34                     __ptext20:	
  4421 ;; *************** function ___llmod *****************
  4422 ;; Defined at:
  4423 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  divisor         4    0[BANK0 ] unsigned long 
  4426 ;;  dividend        4    4[BANK0 ] unsigned long 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  counter         1    9[BANK0 ] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  4    0[BANK0 ] unsigned long 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4438 ;;      Params:         0       8       0       0       0
  4439 ;;      Locals:         0       1       0       0       0
  4440 ;;      Temps:          0       1       0       0       0
  4441 ;;      Totals:         0      10       0       0       0
  4442 ;;Total ram usage:       10 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; This function calls:
  4445 ;;		Nothing
  4446 ;; This function is called by:
  4447 ;;		_sprintf
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function ___llmod
  4453  0C34                     ___llmod:	
  4454                           
  4455                           ;incstack = 0
  4456 ;; hardware stack exceeded
  4457                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4458  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  4460  0C36  0823               	movf	___llmod@divisor+3,w
  4461  0C37  0422               	iorwf	___llmod@divisor+2,w
  4462  0C38  0421               	iorwf	___llmod@divisor+1,w
  4463  0C39  0420               	iorwf	___llmod@divisor,w
  4464  0C3A  1903               	skipnz
  4465  0C3B  2C79               	goto	i1l2033
  4466  0C3C  01A9               	clrf	___llmod@counter
  4467  0C3D  0AA9               	incf	___llmod@counter,f
  4468  0C3E                     i1l2023:	
  4469  0C3E  1BA3               	btfsc	___llmod@divisor+3,7
  4470  0C3F  2C4E               	goto	i1l2025
  4471  0C40  3001               	movlw	1
  4472  0C41  00A8               	movwf	??___llmod
  4473  0C42                     u230_25:	
  4474  0C42  1003               	clrc
  4475  0C43  0DA0               	rlf	___llmod@divisor,f
  4476  0C44  0DA1               	rlf	___llmod@divisor+1,f
  4477  0C45  0DA2               	rlf	___llmod@divisor+2,f
  4478  0C46  0DA3               	rlf	___llmod@divisor+3,f
  4479  0C47  0BA8               	decfsz	??___llmod,f
  4480  0C48  2C42               	goto	u230_25
  4481  0C49  3001               	movlw	1
  4482  0C4A  00A8               	movwf	??___llmod
  4483  0C4B  0828               	movf	??___llmod,w
  4484  0C4C  07A9               	addwf	___llmod@counter,f
  4485  0C4D  2C3E               	goto	i1l2023
  4486  0C4E                     i1l2025:	
  4487  0C4E  0823               	movf	___llmod@divisor+3,w
  4488  0C4F  0227               	subwf	___llmod@dividend+3,w
  4489  0C50  1D03               	skipz
  4490  0C51  2C5C               	goto	u232_25
  4491  0C52  0822               	movf	___llmod@divisor+2,w
  4492  0C53  0226               	subwf	___llmod@dividend+2,w
  4493  0C54  1D03               	skipz
  4494  0C55  2C5C               	goto	u232_25
  4495  0C56  0821               	movf	___llmod@divisor+1,w
  4496  0C57  0225               	subwf	___llmod@dividend+1,w
  4497  0C58  1D03               	skipz
  4498  0C59  2C5C               	goto	u232_25
  4499  0C5A  0820               	movf	___llmod@divisor,w
  4500  0C5B  0224               	subwf	___llmod@dividend,w
  4501  0C5C                     u232_25:	
  4502  0C5C  1C03               	skipc
  4503  0C5D  2C6C               	goto	i1l2029
  4504  0C5E  0820               	movf	___llmod@divisor,w
  4505  0C5F  02A4               	subwf	___llmod@dividend,f
  4506  0C60  0821               	movf	___llmod@divisor+1,w
  4507  0C61  1C03               	skipc
  4508  0C62  0F21               	incfsz	___llmod@divisor+1,w
  4509  0C63  02A5               	subwf	___llmod@dividend+1,f
  4510  0C64  0822               	movf	___llmod@divisor+2,w
  4511  0C65  1C03               	skipc
  4512  0C66  0F22               	incfsz	___llmod@divisor+2,w
  4513  0C67  02A6               	subwf	___llmod@dividend+2,f
  4514  0C68  0823               	movf	___llmod@divisor+3,w
  4515  0C69  1C03               	skipc
  4516  0C6A  0F23               	incfsz	___llmod@divisor+3,w
  4517  0C6B  02A7               	subwf	___llmod@dividend+3,f
  4518  0C6C                     i1l2029:	
  4519  0C6C  3001               	movlw	1
  4520  0C6D                     u233_25:	
  4521  0C6D  1003               	clrc
  4522  0C6E  0CA3               	rrf	___llmod@divisor+3,f
  4523  0C6F  0CA2               	rrf	___llmod@divisor+2,f
  4524  0C70  0CA1               	rrf	___llmod@divisor+1,f
  4525  0C71  0CA0               	rrf	___llmod@divisor,f
  4526  0C72  3EFF               	addlw	-1
  4527  0C73  1D03               	skipz
  4528  0C74  2C6D               	goto	u233_25
  4529  0C75  3001               	movlw	1
  4530  0C76  02A9               	subwf	___llmod@counter,f
  4531  0C77  1D03               	btfss	3,2
  4532  0C78  2C4E               	goto	i1l2025
  4533  0C79                     i1l2033:	
  4534  0C79  0827               	movf	___llmod@dividend+3,w
  4535  0C7A  00A3               	movwf	?___llmod+3
  4536  0C7B  0826               	movf	___llmod@dividend+2,w
  4537  0C7C  00A2               	movwf	?___llmod+2
  4538  0C7D  0825               	movf	___llmod@dividend+1,w
  4539  0C7E  00A1               	movwf	?___llmod+1
  4540  0C7F  0824               	movf	___llmod@dividend,w
  4541  0C80  00A0               	movwf	?___llmod
  4542  0C81  0008               	return
  4543  0C82                     __end_of___llmod:	
  4544                           
  4545                           	psect	text21
  4546  0D38                     __ptext21:	
  4547 ;; *************** function ___lldiv *****************
  4548 ;; Defined at:
  4549 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  divisor         4    0[COMMON] unsigned long 
  4552 ;;  dividend        4    4[COMMON] unsigned long 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  quotient        4    9[COMMON] unsigned long 
  4555 ;;  counter         1   13[COMMON] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  4    0[COMMON] unsigned long 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4565 ;;      Params:         8       0       0       0       0
  4566 ;;      Locals:         5       0       0       0       0
  4567 ;;      Temps:          1       0       0       0       0
  4568 ;;      Totals:        14       0       0       0       0
  4569 ;;Total ram usage:       14 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_sprintf
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           
  4579                           ;psect for function ___lldiv
  4580  0D38                     ___lldiv:	
  4581                           
  4582                           ;incstack = 0
  4583 ;; hardware stack exceeded
  4584                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4585  0D38  3000               	movlw	0
  4586  0D39  00FC               	movwf	___lldiv@quotient+3
  4587  0D3A  3000               	movlw	0
  4588  0D3B  00FB               	movwf	___lldiv@quotient+2
  4589  0D3C  3000               	movlw	0
  4590  0D3D  00FA               	movwf	___lldiv@quotient+1
  4591  0D3E  3000               	movlw	0
  4592  0D3F  00F9               	movwf	___lldiv@quotient
  4593  0D40  0873               	movf	___lldiv@divisor+3,w
  4594  0D41  0472               	iorwf	___lldiv@divisor+2,w
  4595  0D42  0471               	iorwf	___lldiv@divisor+1,w
  4596  0D43  0470               	iorwf	___lldiv@divisor,w
  4597  0D44  1903               	skipnz
  4598  0D45  2D8D               	goto	i1l2013
  4599  0D46  01FD               	clrf	___lldiv@counter
  4600  0D47  0AFD               	incf	___lldiv@counter,f
  4601  0D48                     i1l1999:	
  4602  0D48  1BF3               	btfsc	___lldiv@divisor+3,7
  4603  0D49  2D58               	goto	i1l2001
  4604  0D4A  3001               	movlw	1
  4605  0D4B  00F8               	movwf	??___lldiv
  4606  0D4C                     u223_25:	
  4607  0D4C  1003               	clrc
  4608  0D4D  0DF0               	rlf	___lldiv@divisor,f
  4609  0D4E  0DF1               	rlf	___lldiv@divisor+1,f
  4610  0D4F  0DF2               	rlf	___lldiv@divisor+2,f
  4611  0D50  0DF3               	rlf	___lldiv@divisor+3,f
  4612  0D51  0BF8               	decfsz	??___lldiv,f
  4613  0D52  2D4C               	goto	u223_25
  4614  0D53  3001               	movlw	1
  4615  0D54  00F8               	movwf	??___lldiv
  4616  0D55  0878               	movf	??___lldiv,w
  4617  0D56  07FD               	addwf	___lldiv@counter,f
  4618  0D57  2D48               	goto	i1l1999
  4619  0D58                     i1l2001:	
  4620  0D58  3001               	movlw	1
  4621  0D59  00F8               	movwf	??___lldiv
  4622  0D5A                     u225_25:	
  4623  0D5A  1003               	clrc
  4624  0D5B  0DF9               	rlf	___lldiv@quotient,f
  4625  0D5C  0DFA               	rlf	___lldiv@quotient+1,f
  4626  0D5D  0DFB               	rlf	___lldiv@quotient+2,f
  4627  0D5E  0DFC               	rlf	___lldiv@quotient+3,f
  4628  0D5F  0BF8               	decfsz	??___lldiv,f
  4629  0D60  2D5A               	goto	u225_25
  4630  0D61  0873               	movf	___lldiv@divisor+3,w
  4631  0D62  0277               	subwf	___lldiv@dividend+3,w
  4632  0D63  1D03               	skipz
  4633  0D64  2D6F               	goto	u226_25
  4634  0D65  0872               	movf	___lldiv@divisor+2,w
  4635  0D66  0276               	subwf	___lldiv@dividend+2,w
  4636  0D67  1D03               	skipz
  4637  0D68  2D6F               	goto	u226_25
  4638  0D69  0871               	movf	___lldiv@divisor+1,w
  4639  0D6A  0275               	subwf	___lldiv@dividend+1,w
  4640  0D6B  1D03               	skipz
  4641  0D6C  2D6F               	goto	u226_25
  4642  0D6D  0870               	movf	___lldiv@divisor,w
  4643  0D6E  0274               	subwf	___lldiv@dividend,w
  4644  0D6F                     u226_25:	
  4645  0D6F  1C03               	skipc
  4646  0D70  2D80               	goto	i1l2009
  4647  0D71  0870               	movf	___lldiv@divisor,w
  4648  0D72  02F4               	subwf	___lldiv@dividend,f
  4649  0D73  0871               	movf	___lldiv@divisor+1,w
  4650  0D74  1C03               	skipc
  4651  0D75  0F71               	incfsz	___lldiv@divisor+1,w
  4652  0D76  02F5               	subwf	___lldiv@dividend+1,f
  4653  0D77  0872               	movf	___lldiv@divisor+2,w
  4654  0D78  1C03               	skipc
  4655  0D79  0F72               	incfsz	___lldiv@divisor+2,w
  4656  0D7A  02F6               	subwf	___lldiv@dividend+2,f
  4657  0D7B  0873               	movf	___lldiv@divisor+3,w
  4658  0D7C  1C03               	skipc
  4659  0D7D  0F73               	incfsz	___lldiv@divisor+3,w
  4660  0D7E  02F7               	subwf	___lldiv@dividend+3,f
  4661  0D7F  1479               	bsf	___lldiv@quotient,0
  4662  0D80                     i1l2009:	
  4663  0D80  3001               	movlw	1
  4664  0D81                     u227_25:	
  4665  0D81  1003               	clrc
  4666  0D82  0CF3               	rrf	___lldiv@divisor+3,f
  4667  0D83  0CF2               	rrf	___lldiv@divisor+2,f
  4668  0D84  0CF1               	rrf	___lldiv@divisor+1,f
  4669  0D85  0CF0               	rrf	___lldiv@divisor,f
  4670  0D86  3EFF               	addlw	-1
  4671  0D87  1D03               	skipz
  4672  0D88  2D81               	goto	u227_25
  4673  0D89  3001               	movlw	1
  4674  0D8A  02FD               	subwf	___lldiv@counter,f
  4675  0D8B  1D03               	btfss	3,2
  4676  0D8C  2D58               	goto	i1l2001
  4677  0D8D                     i1l2013:	
  4678  0D8D  087C               	movf	___lldiv@quotient+3,w
  4679  0D8E  00F3               	movwf	?___lldiv+3
  4680  0D8F  087B               	movf	___lldiv@quotient+2,w
  4681  0D90  00F2               	movwf	?___lldiv+2
  4682  0D91  087A               	movf	___lldiv@quotient+1,w
  4683  0D92  00F1               	movwf	?___lldiv+1
  4684  0D93  0879               	movf	___lldiv@quotient,w
  4685  0D94  00F0               	movwf	?___lldiv
  4686  0D95  0008               	return
  4687  0D96                     __end_of___lldiv:	
  4688                           
  4689                           	psect	text22
  4690  09B3                     __ptext22:	
  4691 ;; *************** function ___lltoft *****************
  4692 ;; Defined at:
  4693 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  c               4    8[COMMON] unsigned long 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  exp             1   13[COMMON] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  3    8[COMMON] float 
  4700 ;; Registers used:
  4701 ;;		wreg, status,2, status,0, pclath, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4707 ;;      Params:         4       0       0       0       0
  4708 ;;      Locals:         1       0       0       0       0
  4709 ;;      Temps:          1       0       0       0       0
  4710 ;;      Totals:         6       0       0       0       0
  4711 ;;Total ram usage:        6 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    1
  4714 ;; This function calls:
  4715 ;;		___ftpack
  4716 ;; This function is called by:
  4717 ;;		_ftoa
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function ___lltoft
  4723  09B3                     ___lltoft:	
  4724                           
  4725                           ;incstack = 0
  4726 ;; hardware stack exceeded
  4727                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  4728  09B3  308E               	movlw	142
  4729  09B4  00FC               	movwf	??___lltoft
  4730  09B5  087C               	movf	??___lltoft,w
  4731  09B6  00FD               	movwf	___lltoft@exp
  4732  09B7                     i1l2307:	
  4733  09B7  30FF               	movlw	255
  4734  09B8  057B               	andwf	___lltoft@c+3,w
  4735  09B9  1903               	btfsc	3,2
  4736  09BA  29C9               	goto	i1l2309
  4737  09BB  3001               	movlw	1
  4738  09BC                     u288_25:	
  4739  09BC  1003               	clrc
  4740  09BD  0CFB               	rrf	___lltoft@c+3,f
  4741  09BE  0CFA               	rrf	___lltoft@c+2,f
  4742  09BF  0CF9               	rrf	___lltoft@c+1,f
  4743  09C0  0CF8               	rrf	___lltoft@c,f
  4744  09C1  3EFF               	addlw	-1
  4745  09C2  1D03               	skipz
  4746  09C3  29BC               	goto	u288_25
  4747  09C4  3001               	movlw	1
  4748  09C5  00FC               	movwf	??___lltoft
  4749  09C6  087C               	movf	??___lltoft,w
  4750  09C7  07FD               	addwf	___lltoft@exp,f
  4751  09C8  29B7               	goto	i1l2307
  4752  09C9                     i1l2309:	
  4753  09C9  0878               	movf	___lltoft@c,w
  4754  09CA  00F0               	movwf	___ftpack@arg
  4755  09CB  0879               	movf	___lltoft@c+1,w
  4756  09CC  00F1               	movwf	___ftpack@arg+1
  4757  09CD  087A               	movf	___lltoft@c+2,w
  4758  09CE  00F2               	movwf	___ftpack@arg+2
  4759  09CF  087D               	movf	___lltoft@exp,w
  4760  09D0  00FC               	movwf	??___lltoft
  4761  09D1  087C               	movf	??___lltoft,w
  4762  09D2  00F3               	movwf	___ftpack@exp
  4763  09D3  01F4               	clrf	___ftpack@sign
  4764  09D4  120A  158A  25FC   	fcall	___ftpack
  4765  09D7  0870               	movf	?___ftpack,w
  4766  09D8  00F8               	movwf	?___lltoft
  4767  09D9  0871               	movf	?___ftpack+1,w
  4768  09DA  00F9               	movwf	?___lltoft+1
  4769  09DB  0872               	movf	?___ftpack+2,w
  4770  09DC  00FA               	movwf	?___lltoft+2
  4771  09DD  0008               	return
  4772  09DE                     __end_of___lltoft:	
  4773                           
  4774                           	psect	text23
  4775  0EE1                     __ptext23:	
  4776 ;; *************** function ___fttol *****************
  4777 ;; Defined at:
  4778 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  f1              3   16[BANK0 ] float 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  lval            4   25[BANK0 ] unsigned long 
  4783 ;;  exp1            1   29[BANK0 ] unsigned char 
  4784 ;;  sign1           1   24[BANK0 ] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  4   16[BANK0 ] long 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4794 ;;      Params:         0       4       0       0       0
  4795 ;;      Locals:         0       6       0       0       0
  4796 ;;      Temps:          0       4       0       0       0
  4797 ;;      Totals:         0      14       0       0       0
  4798 ;;Total ram usage:       14 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; This function calls:
  4801 ;;		Nothing
  4802 ;; This function is called by:
  4803 ;;		_ISR
  4804 ;;		_ftoa
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function ___fttol
  4810  0EE1                     ___fttol:	
  4811                           
  4812                           ;incstack = 0
  4813 ;; hardware stack exceeded
  4814                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4815  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  4816  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  4817  0EE3  0830               	movf	___fttol@f1,w
  4818  0EE4  00B4               	movwf	??___fttol
  4819  0EE5  0831               	movf	___fttol@f1+1,w
  4820  0EE6  00B5               	movwf	??___fttol+1
  4821  0EE7  0832               	movf	___fttol@f1+2,w
  4822  0EE8  00B6               	movwf	??___fttol+2
  4823  0EE9  1003               	clrc
  4824  0EEA  0D35               	rlf	??___fttol+1,w
  4825  0EEB  0D36               	rlf	??___fttol+2,w
  4826  0EEC  00B7               	movwf	??___fttol+3
  4827  0EED  0837               	movf	??___fttol+3,w
  4828  0EEE  00BD               	movwf	___fttol@exp1
  4829  0EEF  08BD               	movf	___fttol@exp1,f
  4830  0EF0  1D03               	skipz
  4831  0EF1  2EFB               	goto	i1l2265
  4832  0EF2  3000               	movlw	0
  4833  0EF3  00B3               	movwf	?___fttol+3
  4834  0EF4  3000               	movlw	0
  4835  0EF5  00B2               	movwf	?___fttol+2
  4836  0EF6  3000               	movlw	0
  4837  0EF7  00B1               	movwf	?___fttol+1
  4838  0EF8  3000               	movlw	0
  4839  0EF9  00B0               	movwf	?___fttol
  4840  0EFA  0008               	return
  4841  0EFB                     i1l2265:	
  4842  0EFB  0830               	movf	___fttol@f1,w
  4843  0EFC  00B4               	movwf	??___fttol
  4844  0EFD  0831               	movf	___fttol@f1+1,w
  4845  0EFE  00B5               	movwf	??___fttol+1
  4846  0EFF  0832               	movf	___fttol@f1+2,w
  4847  0F00  00B6               	movwf	??___fttol+2
  4848  0F01  3017               	movlw	23
  4849  0F02                     u279_25:	
  4850  0F02  1003               	clrc
  4851  0F03  0CB6               	rrf	??___fttol+2,f
  4852  0F04  0CB5               	rrf	??___fttol+1,f
  4853  0F05  0CB4               	rrf	??___fttol,f
  4854  0F06  3EFF               	addlw	-1
  4855  0F07  1D03               	skipz
  4856  0F08  2F02               	goto	u279_25
  4857  0F09  0834               	movf	??___fttol,w
  4858  0F0A  00B7               	movwf	??___fttol+3
  4859  0F0B  0837               	movf	??___fttol+3,w
  4860  0F0C  00B8               	movwf	___fttol@sign1
  4861  0F0D  17B1               	bsf	___fttol@f1+1,7
  4862  0F0E  30FF               	movlw	255
  4863  0F0F  05B0               	andwf	___fttol@f1,f
  4864  0F10  30FF               	movlw	255
  4865  0F11  05B1               	andwf	___fttol@f1+1,f
  4866  0F12  3000               	movlw	0
  4867  0F13  05B2               	andwf	___fttol@f1+2,f
  4868  0F14  0830               	movf	___fttol@f1,w
  4869  0F15  00B9               	movwf	___fttol@lval
  4870  0F16  0831               	movf	___fttol@f1+1,w
  4871  0F17  00BA               	movwf	___fttol@lval+1
  4872  0F18  0832               	movf	___fttol@f1+2,w
  4873  0F19  00BB               	movwf	___fttol@lval+2
  4874  0F1A  01BC               	clrf	___fttol@lval+3
  4875  0F1B  308E               	movlw	142
  4876  0F1C  02BD               	subwf	___fttol@exp1,f
  4877  0F1D  1FBD               	btfss	___fttol@exp1,7
  4878  0F1E  2F3D               	goto	i1l2285
  4879  0F1F  083D               	movf	___fttol@exp1,w
  4880  0F20  3A80               	xorlw	128
  4881  0F21  3E8F               	addlw	143
  4882  0F22  1803               	skipnc
  4883  0F23  2F2D               	goto	i1l2283
  4884  0F24  3000               	movlw	0
  4885  0F25  00B3               	movwf	?___fttol+3
  4886  0F26  3000               	movlw	0
  4887  0F27  00B2               	movwf	?___fttol+2
  4888  0F28  3000               	movlw	0
  4889  0F29  00B1               	movwf	?___fttol+1
  4890  0F2A  3000               	movlw	0
  4891  0F2B  00B0               	movwf	?___fttol
  4892  0F2C  0008               	return
  4893  0F2D                     i1l2283:	
  4894  0F2D  3001               	movlw	1
  4895  0F2E                     u282_25:	
  4896  0F2E  1003               	clrc
  4897  0F2F  0CBC               	rrf	___fttol@lval+3,f
  4898  0F30  0CBB               	rrf	___fttol@lval+2,f
  4899  0F31  0CBA               	rrf	___fttol@lval+1,f
  4900  0F32  0CB9               	rrf	___fttol@lval,f
  4901  0F33  3EFF               	addlw	-1
  4902  0F34  1D03               	skipz
  4903  0F35  2F2E               	goto	u282_25
  4904  0F36  3001               	movlw	1
  4905  0F37  00B4               	movwf	??___fttol
  4906  0F38  0834               	movf	??___fttol,w
  4907  0F39  07BD               	addwf	___fttol@exp1,f
  4908  0F3A  1903               	btfsc	3,2
  4909  0F3B  2F58               	goto	i1l2295
  4910  0F3C  2F2D               	goto	i1l2283
  4911  0F3D                     i1l2285:	
  4912  0F3D  3018               	movlw	24
  4913  0F3E  023D               	subwf	___fttol@exp1,w
  4914  0F3F  1C03               	skipc
  4915  0F40  2F55               	goto	i1l2293
  4916  0F41  3000               	movlw	0
  4917  0F42  00B3               	movwf	?___fttol+3
  4918  0F43  3000               	movlw	0
  4919  0F44  00B2               	movwf	?___fttol+2
  4920  0F45  3000               	movlw	0
  4921  0F46  00B1               	movwf	?___fttol+1
  4922  0F47  3000               	movlw	0
  4923  0F48  00B0               	movwf	?___fttol
  4924  0F49  0008               	return
  4925  0F4A                     i1l2291:	
  4926  0F4A  3001               	movlw	1
  4927  0F4B  00B4               	movwf	??___fttol
  4928  0F4C                     u285_25:	
  4929  0F4C  1003               	clrc
  4930  0F4D  0DB9               	rlf	___fttol@lval,f
  4931  0F4E  0DBA               	rlf	___fttol@lval+1,f
  4932  0F4F  0DBB               	rlf	___fttol@lval+2,f
  4933  0F50  0DBC               	rlf	___fttol@lval+3,f
  4934  0F51  0BB4               	decfsz	??___fttol,f
  4935  0F52  2F4C               	goto	u285_25
  4936  0F53  3001               	movlw	1
  4937  0F54  02BD               	subwf	___fttol@exp1,f
  4938  0F55                     i1l2293:	
  4939  0F55  08BD               	movf	___fttol@exp1,f
  4940  0F56  1D03               	skipz
  4941  0F57  2F4A               	goto	i1l2291
  4942  0F58                     i1l2295:	
  4943  0F58  0838               	movf	___fttol@sign1,w
  4944  0F59  1903               	btfsc	3,2
  4945  0F5A  2F66               	goto	i1l2299
  4946  0F5B  09B9               	comf	___fttol@lval,f
  4947  0F5C  09BA               	comf	___fttol@lval+1,f
  4948  0F5D  09BB               	comf	___fttol@lval+2,f
  4949  0F5E  09BC               	comf	___fttol@lval+3,f
  4950  0F5F  0AB9               	incf	___fttol@lval,f
  4951  0F60  1903               	skipnz
  4952  0F61  0ABA               	incf	___fttol@lval+1,f
  4953  0F62  1903               	skipnz
  4954  0F63  0ABB               	incf	___fttol@lval+2,f
  4955  0F64  1903               	skipnz
  4956  0F65  0ABC               	incf	___fttol@lval+3,f
  4957  0F66                     i1l2299:	
  4958  0F66  083C               	movf	___fttol@lval+3,w
  4959  0F67  00B3               	movwf	?___fttol+3
  4960  0F68  083B               	movf	___fttol@lval+2,w
  4961  0F69  00B2               	movwf	?___fttol+2
  4962  0F6A  083A               	movf	___fttol@lval+1,w
  4963  0F6B  00B1               	movwf	?___fttol+1
  4964  0F6C  0839               	movf	___fttol@lval,w
  4965  0F6D  00B0               	movwf	?___fttol
  4966  0F6E  0008               	return
  4967  0F6F                     __end_of___fttol:	
  4968                           
  4969                           	psect	text24
  4970  08A5                     __ptext24:	
  4971 ;; *************** function ___ftsub *****************
  4972 ;; Defined at:
  4973 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  f2              3    7[BANK0 ] float 
  4976 ;;  f1              3   10[BANK0 ] float 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  3    7[BANK0 ] float 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4988 ;;      Params:         0       6       0       0       0
  4989 ;;      Locals:         0       0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0
  4991 ;;      Totals:         0       6       0       0       0
  4992 ;;Total ram usage:        6 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    2
  4995 ;; This function calls:
  4996 ;;		___ftadd
  4997 ;; This function is called by:
  4998 ;;		_ftoa
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function ___ftsub
  5004  08A5                     ___ftsub:	
  5005                           
  5006                           ;incstack = 0
  5007 ;; hardware stack exceeded
  5008                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5009  08A5  3080               	movlw	128
  5010  08A6  1283               	bcf	3,5	;RP0=0, select bank0
  5011  08A7  1303               	bcf	3,6	;RP1=0, select bank0
  5012  08A8  06A9               	xorwf	___ftsub@f2+2,f
  5013  08A9  082A               	movf	___ftsub@f1,w
  5014  08AA  00F8               	movwf	___ftadd@f1
  5015  08AB  082B               	movf	___ftsub@f1+1,w
  5016  08AC  00F9               	movwf	___ftadd@f1+1
  5017  08AD  082C               	movf	___ftsub@f1+2,w
  5018  08AE  00FA               	movwf	___ftadd@f1+2
  5019  08AF  0827               	movf	___ftsub@f2,w
  5020  08B0  00FB               	movwf	___ftadd@f2
  5021  08B1  0828               	movf	___ftsub@f2+1,w
  5022  08B2  00FC               	movwf	___ftadd@f2+1
  5023  08B3  0829               	movf	___ftsub@f2+2,w
  5024  08B4  00FD               	movwf	___ftadd@f2+2
  5025  08B5  120A  118A  23F9   	fcall	___ftadd
  5026  08B8  0878               	movf	?___ftadd,w
  5027  08B9  1283               	bcf	3,5	;RP0=0, select bank0
  5028  08BA  1303               	bcf	3,6	;RP1=0, select bank0
  5029  08BB  00A7               	movwf	?___ftsub
  5030  08BC  0879               	movf	?___ftadd+1,w
  5031  08BD  00A8               	movwf	?___ftsub+1
  5032  08BE  087A               	movf	?___ftadd+2,w
  5033  08BF  00A9               	movwf	?___ftsub+2
  5034  08C0  0008               	return
  5035  08C1                     __end_of___ftsub:	
  5036                           
  5037                           	psect	text25
  5038  03F9                     __ptext25:	
  5039 ;; *************** function ___ftadd *****************
  5040 ;; Defined at:
  5041 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  f1              3    8[COMMON] float 
  5044 ;;  f2              3   11[COMMON] float 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  exp1            1    6[BANK0 ] unsigned char 
  5047 ;;  exp2            1    5[BANK0 ] unsigned char 
  5048 ;;  sign            1    4[BANK0 ] unsigned char 
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  3    8[COMMON] float 
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0, pclath, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5058 ;;      Params:         6       0       0       0       0
  5059 ;;      Locals:         0       3       0       0       0
  5060 ;;      Temps:          0       4       0       0       0
  5061 ;;      Totals:         6       7       0       0       0
  5062 ;;Total ram usage:       13 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    1
  5065 ;; This function calls:
  5066 ;;		___ftpack
  5067 ;; This function is called by:
  5068 ;;		___ftsub
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           
  5073                           ;psect for function ___ftadd
  5074  03F9                     ___ftadd:	
  5075                           
  5076                           ;incstack = 0
  5077 ;; hardware stack exceeded
  5078                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5079  03F9  0878               	movf	___ftadd@f1,w
  5080  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  5081  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  5082  03FC  00A0               	movwf	??___ftadd
  5083  03FD  0879               	movf	___ftadd@f1+1,w
  5084  03FE  00A1               	movwf	??___ftadd+1
  5085  03FF  087A               	movf	___ftadd@f1+2,w
  5086  0400  00A2               	movwf	??___ftadd+2
  5087  0401  1003               	clrc
  5088  0402  0D21               	rlf	??___ftadd+1,w
  5089  0403  0D22               	rlf	??___ftadd+2,w
  5090  0404  00A3               	movwf	??___ftadd+3
  5091  0405  0823               	movf	??___ftadd+3,w
  5092  0406  00A6               	movwf	___ftadd@exp1
  5093  0407  087B               	movf	___ftadd@f2,w
  5094  0408  00A0               	movwf	??___ftadd
  5095  0409  087C               	movf	___ftadd@f2+1,w
  5096  040A  00A1               	movwf	??___ftadd+1
  5097  040B  087D               	movf	___ftadd@f2+2,w
  5098  040C  00A2               	movwf	??___ftadd+2
  5099  040D  1003               	clrc
  5100  040E  0D21               	rlf	??___ftadd+1,w
  5101  040F  0D22               	rlf	??___ftadd+2,w
  5102  0410  00A3               	movwf	??___ftadd+3
  5103  0411  0823               	movf	??___ftadd+3,w
  5104  0412  00A5               	movwf	___ftadd@exp2
  5105  0413  0826               	movf	___ftadd@exp1,w
  5106  0414  1903               	btfsc	3,2
  5107  0415  2C22               	goto	i1l1929
  5108  0416  0825               	movf	___ftadd@exp2,w
  5109  0417  0226               	subwf	___ftadd@exp1,w
  5110  0418  1803               	skipnc
  5111  0419  2C29               	goto	i1l1933
  5112  041A  0326               	decf	___ftadd@exp1,w
  5113  041B  3AFF               	xorlw	255
  5114  041C  0725               	addwf	___ftadd@exp2,w
  5115  041D  00A0               	movwf	??___ftadd
  5116  041E  3019               	movlw	25
  5117  041F  0220               	subwf	??___ftadd,w
  5118  0420  1C03               	skipc
  5119  0421  2C29               	goto	i1l1933
  5120  0422                     i1l1929:	
  5121  0422  087B               	movf	___ftadd@f2,w
  5122  0423  00F8               	movwf	?___ftadd
  5123  0424  087C               	movf	___ftadd@f2+1,w
  5124  0425  00F9               	movwf	?___ftadd+1
  5125  0426  087D               	movf	___ftadd@f2+2,w
  5126  0427  00FA               	movwf	?___ftadd+2
  5127  0428  0008               	return
  5128  0429                     i1l1933:	
  5129  0429  0825               	movf	___ftadd@exp2,w
  5130  042A  1903               	btfsc	3,2
  5131  042B  0008               	return
  5132  042C  0826               	movf	___ftadd@exp1,w
  5133  042D  0225               	subwf	___ftadd@exp2,w
  5134  042E  1803               	skipnc
  5135  042F  2C38               	goto	i1l1939
  5136  0430  0325               	decf	___ftadd@exp2,w
  5137  0431  3AFF               	xorlw	255
  5138  0432  0726               	addwf	___ftadd@exp1,w
  5139  0433  00A0               	movwf	??___ftadd
  5140  0434  3019               	movlw	25
  5141  0435  0220               	subwf	??___ftadd,w
  5142  0436  1803               	btfsc	3,0
  5143  0437  0008               	return
  5144  0438                     i1l1939:	
  5145  0438  3006               	movlw	6
  5146  0439  00A0               	movwf	??___ftadd
  5147  043A  0820               	movf	??___ftadd,w
  5148  043B  00A4               	movwf	___ftadd@sign
  5149  043C  1BFA               	btfsc	___ftadd@f1+2,7
  5150  043D  17A4               	bsf	___ftadd@sign,7
  5151  043E  1BFD               	btfsc	___ftadd@f2+2,7
  5152  043F  1724               	bsf	___ftadd@sign,6
  5153  0440  17F9               	bsf	___ftadd@f1+1,7
  5154  0441  30FF               	movlw	255
  5155  0442  05F8               	andwf	___ftadd@f1,f
  5156  0443  30FF               	movlw	255
  5157  0444  05F9               	andwf	___ftadd@f1+1,f
  5158  0445  3000               	movlw	0
  5159  0446  05FA               	andwf	___ftadd@f1+2,f
  5160  0447  17FC               	bsf	___ftadd@f2+1,7
  5161  0448  30FF               	movlw	255
  5162  0449  05FB               	andwf	___ftadd@f2,f
  5163  044A  30FF               	movlw	255
  5164  044B  05FC               	andwf	___ftadd@f2+1,f
  5165  044C  3000               	movlw	0
  5166  044D  05FD               	andwf	___ftadd@f2+2,f
  5167  044E  0825               	movf	___ftadd@exp2,w
  5168  044F  0226               	subwf	___ftadd@exp1,w
  5169  0450  1803               	skipnc
  5170  0451  2C78               	goto	i1l1961
  5171  0452                     i1l1951:	
  5172  0452  3001               	movlw	1
  5173  0453                     u207_25:	
  5174  0453  1003               	clrc
  5175  0454  0DFB               	rlf	___ftadd@f2,f
  5176  0455  0DFC               	rlf	___ftadd@f2+1,f
  5177  0456  0DFD               	rlf	___ftadd@f2+2,f
  5178  0457  3EFF               	addlw	-1
  5179  0458  1D03               	skipz
  5180  0459  2C53               	goto	u207_25
  5181  045A  3001               	movlw	1
  5182  045B  02A5               	subwf	___ftadd@exp2,f
  5183  045C  0825               	movf	___ftadd@exp2,w
  5184  045D  0626               	xorwf	___ftadd@exp1,w
  5185  045E  1903               	skipnz
  5186  045F  2C73               	goto	i1l1959
  5187  0460  3001               	movlw	1
  5188  0461  02A4               	subwf	___ftadd@sign,f
  5189  0462  0824               	movf	___ftadd@sign,w
  5190  0463  3907               	andlw	7
  5191  0464  1903               	btfsc	3,2
  5192  0465  2C73               	goto	i1l1959
  5193  0466  2C52               	goto	i1l1951
  5194  0467                     i1l1957:	
  5195  0467  3001               	movlw	1
  5196  0468                     u210_25:	
  5197  0468  1003               	clrc
  5198  0469  0CFA               	rrf	___ftadd@f1+2,f
  5199  046A  0CF9               	rrf	___ftadd@f1+1,f
  5200  046B  0CF8               	rrf	___ftadd@f1,f
  5201  046C  3EFF               	addlw	-1
  5202  046D  1D03               	skipz
  5203  046E  2C68               	goto	u210_25
  5204  046F  3001               	movlw	1
  5205  0470  00A0               	movwf	??___ftadd
  5206  0471  0820               	movf	??___ftadd,w
  5207  0472  07A6               	addwf	___ftadd@exp1,f
  5208  0473                     i1l1959:	
  5209  0473  0826               	movf	___ftadd@exp1,w
  5210  0474  0625               	xorwf	___ftadd@exp2,w
  5211  0475  1903               	btfsc	3,2
  5212  0476  2CA1               	goto	i1l559
  5213  0477  2C67               	goto	i1l1957
  5214  0478                     i1l1961:	
  5215  0478  0826               	movf	___ftadd@exp1,w
  5216  0479  0225               	subwf	___ftadd@exp2,w
  5217  047A  1803               	skipnc
  5218  047B  2CA1               	goto	i1l559
  5219  047C                     i1l1963:	
  5220  047C  3001               	movlw	1
  5221  047D                     u213_25:	
  5222  047D  1003               	clrc
  5223  047E  0DF8               	rlf	___ftadd@f1,f
  5224  047F  0DF9               	rlf	___ftadd@f1+1,f
  5225  0480  0DFA               	rlf	___ftadd@f1+2,f
  5226  0481  3EFF               	addlw	-1
  5227  0482  1D03               	skipz
  5228  0483  2C7D               	goto	u213_25
  5229  0484  3001               	movlw	1
  5230  0485  02A6               	subwf	___ftadd@exp1,f
  5231  0486  0825               	movf	___ftadd@exp2,w
  5232  0487  0626               	xorwf	___ftadd@exp1,w
  5233  0488  1903               	skipnz
  5234  0489  2C9D               	goto	i1l1971
  5235  048A  3001               	movlw	1
  5236  048B  02A4               	subwf	___ftadd@sign,f
  5237  048C  0824               	movf	___ftadd@sign,w
  5238  048D  3907               	andlw	7
  5239  048E  1903               	btfsc	3,2
  5240  048F  2C9D               	goto	i1l1971
  5241  0490  2C7C               	goto	i1l1963
  5242  0491                     i1l1969:	
  5243  0491  3001               	movlw	1
  5244  0492                     u216_25:	
  5245  0492  1003               	clrc
  5246  0493  0CFD               	rrf	___ftadd@f2+2,f
  5247  0494  0CFC               	rrf	___ftadd@f2+1,f
  5248  0495  0CFB               	rrf	___ftadd@f2,f
  5249  0496  3EFF               	addlw	-1
  5250  0497  1D03               	skipz
  5251  0498  2C92               	goto	u216_25
  5252  0499  3001               	movlw	1
  5253  049A  00A0               	movwf	??___ftadd
  5254  049B  0820               	movf	??___ftadd,w
  5255  049C  07A5               	addwf	___ftadd@exp2,f
  5256  049D                     i1l1971:	
  5257  049D  0826               	movf	___ftadd@exp1,w
  5258  049E  0625               	xorwf	___ftadd@exp2,w
  5259  049F  1D03               	skipz
  5260  04A0  2C91               	goto	i1l1969
  5261  04A1                     i1l559:	
  5262  04A1  1FA4               	btfss	___ftadd@sign,7
  5263  04A2  2CB3               	goto	i1l1975
  5264  04A3  30FF               	movlw	255
  5265  04A4  06F8               	xorwf	___ftadd@f1,f
  5266  04A5  30FF               	movlw	255
  5267  04A6  06F9               	xorwf	___ftadd@f1+1,f
  5268  04A7  30FF               	movlw	255
  5269  04A8  06FA               	xorwf	___ftadd@f1+2,f
  5270  04A9  3001               	movlw	1
  5271  04AA  07F8               	addwf	___ftadd@f1,f
  5272  04AB  3000               	movlw	0
  5273  04AC  1803               	skipnc
  5274  04AD  3001               	movlw	1
  5275  04AE  07F9               	addwf	___ftadd@f1+1,f
  5276  04AF  3000               	movlw	0
  5277  04B0  1803               	skipnc
  5278  04B1  3001               	movlw	1
  5279  04B2  07FA               	addwf	___ftadd@f1+2,f
  5280  04B3                     i1l1975:	
  5281  04B3  1F24               	btfss	___ftadd@sign,6
  5282  04B4  2CC5               	goto	i1l1979
  5283  04B5  30FF               	movlw	255
  5284  04B6  06FB               	xorwf	___ftadd@f2,f
  5285  04B7  30FF               	movlw	255
  5286  04B8  06FC               	xorwf	___ftadd@f2+1,f
  5287  04B9  30FF               	movlw	255
  5288  04BA  06FD               	xorwf	___ftadd@f2+2,f
  5289  04BB  3001               	movlw	1
  5290  04BC  07FB               	addwf	___ftadd@f2,f
  5291  04BD  3000               	movlw	0
  5292  04BE  1803               	skipnc
  5293  04BF  3001               	movlw	1
  5294  04C0  07FC               	addwf	___ftadd@f2+1,f
  5295  04C1  3000               	movlw	0
  5296  04C2  1803               	skipnc
  5297  04C3  3001               	movlw	1
  5298  04C4  07FD               	addwf	___ftadd@f2+2,f
  5299  04C5                     i1l1979:	
  5300  04C5  01A4               	clrf	___ftadd@sign
  5301  04C6  0878               	movf	___ftadd@f1,w
  5302  04C7  07FB               	addwf	___ftadd@f2,f
  5303  04C8  0879               	movf	___ftadd@f1+1,w
  5304  04C9  1103               	clrz
  5305  04CA  1803               	skipnc
  5306  04CB  0A79               	incf	___ftadd@f1+1,w
  5307  04CC  1D03               	btfss	3,2
  5308  04CD  07FC               	addwf	___ftadd@f2+1,f
  5309  04CE  087A               	movf	___ftadd@f1+2,w
  5310  04CF  1103               	clrz
  5311  04D0  1803               	skipnc
  5312  04D1  0A7A               	incf	___ftadd@f1+2,w
  5313  04D2  1D03               	btfss	3,2
  5314  04D3  07FD               	addwf	___ftadd@f2+2,f
  5315  04D4  1FFD               	btfss	___ftadd@f2+2,7
  5316  04D5  2CE8               	goto	i1l1989
  5317  04D6  30FF               	movlw	255
  5318  04D7  06FB               	xorwf	___ftadd@f2,f
  5319  04D8  30FF               	movlw	255
  5320  04D9  06FC               	xorwf	___ftadd@f2+1,f
  5321  04DA  30FF               	movlw	255
  5322  04DB  06FD               	xorwf	___ftadd@f2+2,f
  5323  04DC  3001               	movlw	1
  5324  04DD  07FB               	addwf	___ftadd@f2,f
  5325  04DE  3000               	movlw	0
  5326  04DF  1803               	skipnc
  5327  04E0  3001               	movlw	1
  5328  04E1  07FC               	addwf	___ftadd@f2+1,f
  5329  04E2  3000               	movlw	0
  5330  04E3  1803               	skipnc
  5331  04E4  3001               	movlw	1
  5332  04E5  07FD               	addwf	___ftadd@f2+2,f
  5333  04E6  01A4               	clrf	___ftadd@sign
  5334  04E7  0AA4               	incf	___ftadd@sign,f
  5335  04E8                     i1l1989:	
  5336  04E8  087B               	movf	___ftadd@f2,w
  5337  04E9  00F0               	movwf	___ftpack@arg
  5338  04EA  087C               	movf	___ftadd@f2+1,w
  5339  04EB  00F1               	movwf	___ftpack@arg+1
  5340  04EC  087D               	movf	___ftadd@f2+2,w
  5341  04ED  00F2               	movwf	___ftpack@arg+2
  5342  04EE  0826               	movf	___ftadd@exp1,w
  5343  04EF  00A0               	movwf	??___ftadd
  5344  04F0  0820               	movf	??___ftadd,w
  5345  04F1  00F3               	movwf	___ftpack@exp
  5346  04F2  0824               	movf	___ftadd@sign,w
  5347  04F3  00A1               	movwf	??___ftadd+1
  5348  04F4  0821               	movf	??___ftadd+1,w
  5349  04F5  00F4               	movwf	___ftpack@sign
  5350  04F6  120A  158A  25FC   	fcall	___ftpack
  5351  04F9  0870               	movf	?___ftpack,w
  5352  04FA  00F8               	movwf	?___ftadd
  5353  04FB  0871               	movf	?___ftpack+1,w
  5354  04FC  00F9               	movwf	?___ftadd+1
  5355  04FD  0872               	movf	?___ftpack+2,w
  5356  04FE  00FA               	movwf	?___ftadd+2
  5357  04FF  0008               	return
  5358  0500                     __end_of___ftadd:	
  5359                           
  5360                           	psect	text26
  5361  0805                     __ptext26:	
  5362 ;; *************** function ___ftneg *****************
  5363 ;; Defined at:
  5364 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  f1              3    0[COMMON] float 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  3    0[COMMON] float 
  5371 ;; Registers used:
  5372 ;;		wreg
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5378 ;;      Params:         3       0       0       0       0
  5379 ;;      Locals:         0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0
  5381 ;;      Totals:         3       0       0       0       0
  5382 ;;Total ram usage:        3 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_ftoa
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           
  5392                           ;psect for function ___ftneg
  5393  0805                     ___ftneg:	
  5394                           
  5395                           ;incstack = 0
  5396 ;; hardware stack exceeded
  5397                           ; Regs used in ___ftneg: [wreg]
  5398  0805  0872               	movf	___ftneg@f1+2,w
  5399  0806  0471               	iorwf	___ftneg@f1+1,w
  5400  0807  0470               	iorwf	___ftneg@f1,w
  5401  0808  1903               	skipnz
  5402  0809  0008               	return
  5403  080A  3080               	movlw	128
  5404  080B  06F2               	xorwf	___ftneg@f1+2,f
  5405  080C  0008               	return
  5406  080D                     __end_of___ftneg:	
  5407                           
  5408                           	psect	text27
  5409  0500                     __ptext27:	
  5410 ;; *************** function ___ftmul *****************
  5411 ;; Defined at:
  5412 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  f1              3    0[BANK0 ] float 
  5415 ;;  f2              3    3[BANK0 ] float 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  5418 ;;  sign            1   15[BANK0 ] unsigned char 
  5419 ;;  cntr            1   14[BANK0 ] unsigned char 
  5420 ;;  exp             1   10[BANK0 ] unsigned char 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  3    0[BANK0 ] float 
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, status,0, pclath, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5430 ;;      Params:         0       6       0       0       0
  5431 ;;      Locals:         0       6       0       0       0
  5432 ;;      Temps:          0       4       0       0       0
  5433 ;;      Totals:         0      16       0       0       0
  5434 ;;Total ram usage:       16 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    1
  5437 ;; This function calls:
  5438 ;;		___ftpack
  5439 ;; This function is called by:
  5440 ;;		_ISR
  5441 ;;		_ftoa
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function ___ftmul
  5447  0500                     ___ftmul:	
  5448                           
  5449                           ;incstack = 0
  5450 ;; hardware stack exceeded
  5451                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5452  0500  1283               	bcf	3,5	;RP0=0, select bank0
  5453  0501  1303               	bcf	3,6	;RP1=0, select bank0
  5454  0502  0820               	movf	___ftmul@f1,w
  5455  0503  00A6               	movwf	??___ftmul
  5456  0504  0821               	movf	___ftmul@f1+1,w
  5457  0505  00A7               	movwf	??___ftmul+1
  5458  0506  0822               	movf	___ftmul@f1+2,w
  5459  0507  00A8               	movwf	??___ftmul+2
  5460  0508  1003               	clrc
  5461  0509  0D27               	rlf	??___ftmul+1,w
  5462  050A  0D28               	rlf	??___ftmul+2,w
  5463  050B  00A9               	movwf	??___ftmul+3
  5464  050C  0829               	movf	??___ftmul+3,w
  5465  050D  00AA               	movwf	___ftmul@exp
  5466  050E  08AA               	movf	___ftmul@exp,f
  5467  050F  1D03               	skipz
  5468  0510  2D18               	goto	i1l2201
  5469  0511  3000               	movlw	0
  5470  0512  00A0               	movwf	?___ftmul
  5471  0513  3000               	movlw	0
  5472  0514  00A1               	movwf	?___ftmul+1
  5473  0515  3000               	movlw	0
  5474  0516  00A2               	movwf	?___ftmul+2
  5475  0517  0008               	return
  5476  0518                     i1l2201:	
  5477  0518  0823               	movf	___ftmul@f2,w
  5478  0519  00A6               	movwf	??___ftmul
  5479  051A  0824               	movf	___ftmul@f2+1,w
  5480  051B  00A7               	movwf	??___ftmul+1
  5481  051C  0825               	movf	___ftmul@f2+2,w
  5482  051D  00A8               	movwf	??___ftmul+2
  5483  051E  1003               	clrc
  5484  051F  0D27               	rlf	??___ftmul+1,w
  5485  0520  0D28               	rlf	??___ftmul+2,w
  5486  0521  00A9               	movwf	??___ftmul+3
  5487  0522  0829               	movf	??___ftmul+3,w
  5488  0523  00AF               	movwf	___ftmul@sign
  5489  0524  08AF               	movf	___ftmul@sign,f
  5490  0525  1D03               	skipz
  5491  0526  2D2E               	goto	i1l2207
  5492  0527  3000               	movlw	0
  5493  0528  00A0               	movwf	?___ftmul
  5494  0529  3000               	movlw	0
  5495  052A  00A1               	movwf	?___ftmul+1
  5496  052B  3000               	movlw	0
  5497  052C  00A2               	movwf	?___ftmul+2
  5498  052D  0008               	return
  5499  052E                     i1l2207:	
  5500  052E  082F               	movf	___ftmul@sign,w
  5501  052F  3E7B               	addlw	123
  5502  0530  00A6               	movwf	??___ftmul
  5503  0531  0826               	movf	??___ftmul,w
  5504  0532  07AA               	addwf	___ftmul@exp,f
  5505  0533  0820               	movf	___ftmul@f1,w
  5506  0534  00A6               	movwf	??___ftmul
  5507  0535  0821               	movf	___ftmul@f1+1,w
  5508  0536  00A7               	movwf	??___ftmul+1
  5509  0537  0822               	movf	___ftmul@f1+2,w
  5510  0538  00A8               	movwf	??___ftmul+2
  5511  0539  3010               	movlw	16
  5512  053A                     u265_25:	
  5513  053A  1003               	clrc
  5514  053B  0CA8               	rrf	??___ftmul+2,f
  5515  053C  0CA7               	rrf	??___ftmul+1,f
  5516  053D  0CA6               	rrf	??___ftmul,f
  5517  053E  3EFF               	addlw	-1
  5518  053F  1D03               	skipz
  5519  0540  2D3A               	goto	u265_25
  5520  0541  0826               	movf	??___ftmul,w
  5521  0542  00A9               	movwf	??___ftmul+3
  5522  0543  0829               	movf	??___ftmul+3,w
  5523  0544  00AF               	movwf	___ftmul@sign
  5524  0545  0823               	movf	___ftmul@f2,w
  5525  0546  00A6               	movwf	??___ftmul
  5526  0547  0824               	movf	___ftmul@f2+1,w
  5527  0548  00A7               	movwf	??___ftmul+1
  5528  0549  0825               	movf	___ftmul@f2+2,w
  5529  054A  00A8               	movwf	??___ftmul+2
  5530  054B  3010               	movlw	16
  5531  054C                     u266_25:	
  5532  054C  1003               	clrc
  5533  054D  0CA8               	rrf	??___ftmul+2,f
  5534  054E  0CA7               	rrf	??___ftmul+1,f
  5535  054F  0CA6               	rrf	??___ftmul,f
  5536  0550  3EFF               	addlw	-1
  5537  0551  1D03               	skipz
  5538  0552  2D4C               	goto	u266_25
  5539  0553  0826               	movf	??___ftmul,w
  5540  0554  00A9               	movwf	??___ftmul+3
  5541  0555  0829               	movf	??___ftmul+3,w
  5542  0556  06AF               	xorwf	___ftmul@sign,f
  5543  0557  3080               	movlw	128
  5544  0558  00A6               	movwf	??___ftmul
  5545  0559  0826               	movf	??___ftmul,w
  5546  055A  05AF               	andwf	___ftmul@sign,f
  5547  055B  17A1               	bsf	___ftmul@f1+1,7
  5548  055C  17A4               	bsf	___ftmul@f2+1,7
  5549  055D  30FF               	movlw	255
  5550  055E  05A3               	andwf	___ftmul@f2,f
  5551  055F  30FF               	movlw	255
  5552  0560  05A4               	andwf	___ftmul@f2+1,f
  5553  0561  3000               	movlw	0
  5554  0562  05A5               	andwf	___ftmul@f2+2,f
  5555  0563  3000               	movlw	0
  5556  0564  00AB               	movwf	___ftmul@f3_as_product
  5557  0565  3000               	movlw	0
  5558  0566  00AC               	movwf	___ftmul@f3_as_product+1
  5559  0567  3000               	movlw	0
  5560  0568  00AD               	movwf	___ftmul@f3_as_product+2
  5561  0569  3007               	movlw	7
  5562  056A  00A6               	movwf	??___ftmul
  5563  056B  0826               	movf	??___ftmul,w
  5564  056C  00AE               	movwf	___ftmul@cntr
  5565  056D                     i1l2219:	
  5566  056D  1C20               	btfss	___ftmul@f1,0
  5567  056E  2D7D               	goto	i1l2223
  5568  056F  0823               	movf	___ftmul@f2,w
  5569  0570  07AB               	addwf	___ftmul@f3_as_product,f
  5570  0571  0824               	movf	___ftmul@f2+1,w
  5571  0572  1103               	clrz
  5572  0573  1803               	skipnc
  5573  0574  0A24               	incf	___ftmul@f2+1,w
  5574  0575  1D03               	btfss	3,2
  5575  0576  07AC               	addwf	___ftmul@f3_as_product+1,f
  5576  0577  0825               	movf	___ftmul@f2+2,w
  5577  0578  1103               	clrz
  5578  0579  1803               	skipnc
  5579  057A  0A25               	incf	___ftmul@f2+2,w
  5580  057B  1D03               	btfss	3,2
  5581  057C  07AD               	addwf	___ftmul@f3_as_product+2,f
  5582  057D                     i1l2223:	
  5583  057D  3001               	movlw	1
  5584  057E                     u269_25:	
  5585  057E  1003               	clrc
  5586  057F  0CA2               	rrf	___ftmul@f1+2,f
  5587  0580  0CA1               	rrf	___ftmul@f1+1,f
  5588  0581  0CA0               	rrf	___ftmul@f1,f
  5589  0582  3EFF               	addlw	-1
  5590  0583  1D03               	skipz
  5591  0584  2D7E               	goto	u269_25
  5592  0585  3001               	movlw	1
  5593  0586                     u270_25:	
  5594  0586  1003               	clrc
  5595  0587  0DA3               	rlf	___ftmul@f2,f
  5596  0588  0DA4               	rlf	___ftmul@f2+1,f
  5597  0589  0DA5               	rlf	___ftmul@f2+2,f
  5598  058A  3EFF               	addlw	-1
  5599  058B  1D03               	skipz
  5600  058C  2D86               	goto	u270_25
  5601  058D  3001               	movlw	1
  5602  058E  02AE               	subwf	___ftmul@cntr,f
  5603  058F  1D03               	btfss	3,2
  5604  0590  2D6D               	goto	i1l2219
  5605  0591  3009               	movlw	9
  5606  0592  00A6               	movwf	??___ftmul
  5607  0593  0826               	movf	??___ftmul,w
  5608  0594  00AE               	movwf	___ftmul@cntr
  5609  0595                     i1l2231:	
  5610  0595  1C20               	btfss	___ftmul@f1,0
  5611  0596  2DA5               	goto	i1l2235
  5612  0597  0823               	movf	___ftmul@f2,w
  5613  0598  07AB               	addwf	___ftmul@f3_as_product,f
  5614  0599  0824               	movf	___ftmul@f2+1,w
  5615  059A  1103               	clrz
  5616  059B  1803               	skipnc
  5617  059C  0A24               	incf	___ftmul@f2+1,w
  5618  059D  1D03               	btfss	3,2
  5619  059E  07AC               	addwf	___ftmul@f3_as_product+1,f
  5620  059F  0825               	movf	___ftmul@f2+2,w
  5621  05A0  1103               	clrz
  5622  05A1  1803               	skipnc
  5623  05A2  0A25               	incf	___ftmul@f2+2,w
  5624  05A3  1D03               	btfss	3,2
  5625  05A4  07AD               	addwf	___ftmul@f3_as_product+2,f
  5626  05A5                     i1l2235:	
  5627  05A5  3001               	movlw	1
  5628  05A6                     u274_25:	
  5629  05A6  1003               	clrc
  5630  05A7  0CA2               	rrf	___ftmul@f1+2,f
  5631  05A8  0CA1               	rrf	___ftmul@f1+1,f
  5632  05A9  0CA0               	rrf	___ftmul@f1,f
  5633  05AA  3EFF               	addlw	-1
  5634  05AB  1D03               	skipz
  5635  05AC  2DA6               	goto	u274_25
  5636  05AD  3001               	movlw	1
  5637  05AE                     u275_25:	
  5638  05AE  1003               	clrc
  5639  05AF  0CAD               	rrf	___ftmul@f3_as_product+2,f
  5640  05B0  0CAC               	rrf	___ftmul@f3_as_product+1,f
  5641  05B1  0CAB               	rrf	___ftmul@f3_as_product,f
  5642  05B2  3EFF               	addlw	-1
  5643  05B3  1D03               	skipz
  5644  05B4  2DAE               	goto	u275_25
  5645  05B5  3001               	movlw	1
  5646  05B6  02AE               	subwf	___ftmul@cntr,f
  5647  05B7  1D03               	btfss	3,2
  5648  05B8  2D95               	goto	i1l2231
  5649  05B9  082B               	movf	___ftmul@f3_as_product,w
  5650  05BA  00F0               	movwf	___ftpack@arg
  5651  05BB  082C               	movf	___ftmul@f3_as_product+1,w
  5652  05BC  00F1               	movwf	___ftpack@arg+1
  5653  05BD  082D               	movf	___ftmul@f3_as_product+2,w
  5654  05BE  00F2               	movwf	___ftpack@arg+2
  5655  05BF  082A               	movf	___ftmul@exp,w
  5656  05C0  00A6               	movwf	??___ftmul
  5657  05C1  0826               	movf	??___ftmul,w
  5658  05C2  00F3               	movwf	___ftpack@exp
  5659  05C3  082F               	movf	___ftmul@sign,w
  5660  05C4  00A7               	movwf	??___ftmul+1
  5661  05C5  0827               	movf	??___ftmul+1,w
  5662  05C6  00F4               	movwf	___ftpack@sign
  5663  05C7  120A  158A  25FC   	fcall	___ftpack
  5664  05CA  0870               	movf	?___ftpack,w
  5665  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  5666  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  5667  05CD  00A0               	movwf	?___ftmul
  5668  05CE  0871               	movf	?___ftpack+1,w
  5669  05CF  00A1               	movwf	?___ftmul+1
  5670  05D0  0872               	movf	?___ftpack+2,w
  5671  05D1  00A2               	movwf	?___ftmul+2
  5672  05D2  0008               	return
  5673  05D3                     __end_of___ftmul:	
  5674                           
  5675                           	psect	text28
  5676  0CDB                     __ptext28:	
  5677 ;; *************** function ___ftge *****************
  5678 ;; Defined at:
  5679 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  ff1             3    0[COMMON] float 
  5682 ;;  ff2             3    3[COMMON] float 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;		None               void
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5694 ;;      Params:         6       0       0       0       0
  5695 ;;      Locals:         0       0       0       0       0
  5696 ;;      Temps:          6       0       0       0       0
  5697 ;;      Totals:        12       0       0       0       0
  5698 ;;Total ram usage:       12 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_ftoa
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           
  5708                           ;psect for function ___ftge
  5709  0CDB                     ___ftge:	
  5710                           
  5711                           ;incstack = 0
  5712 ;; hardware stack exceeded
  5713                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5714  0CDB  1FF2               	btfss	___ftge@ff1+2,7
  5715  0CDC  2D02               	goto	i1l2179
  5716  0CDD  3000               	movlw	0
  5717  0CDE  00F6               	movwf	??___ftge
  5718  0CDF  3000               	movlw	0
  5719  0CE0  00F7               	movwf	??___ftge+1
  5720  0CE1  3080               	movlw	128
  5721  0CE2  00F8               	movwf	??___ftge+2
  5722  0CE3  0970               	comf	___ftge@ff1,w
  5723  0CE4  00F9               	movwf	??___ftge+3
  5724  0CE5  0971               	comf	___ftge@ff1+1,w
  5725  0CE6  00FA               	movwf	??___ftge+4
  5726  0CE7  0972               	comf	___ftge@ff1+2,w
  5727  0CE8  00FB               	movwf	??___ftge+5
  5728  0CE9  0AF9               	incf	??___ftge+3,f
  5729  0CEA  1903               	skipnz
  5730  0CEB  0AFA               	incf	??___ftge+4,f
  5731  0CEC  1903               	skipnz
  5732  0CED  0AFB               	incf	??___ftge+5,f
  5733  0CEE  0879               	movf	??___ftge+3,w
  5734  0CEF  07F6               	addwf	??___ftge,f
  5735  0CF0  087A               	movf	??___ftge+4,w
  5736  0CF1  1803               	skipnc
  5737  0CF2  0F7A               	incfsz	??___ftge+4,w
  5738  0CF3  2CF5               	goto	u259_21
  5739  0CF4  2CF6               	goto	u259_22
  5740  0CF5                     u259_21:	
  5741  0CF5  07F7               	addwf	??___ftge+1,f
  5742  0CF6                     u259_22:	
  5743  0CF6  087B               	movf	??___ftge+5,w
  5744  0CF7  1803               	skipnc
  5745  0CF8  0F7B               	incfsz	??___ftge+5,w
  5746  0CF9  2CFB               	goto	u259_23
  5747  0CFA  2CFC               	goto	u259_24
  5748  0CFB                     u259_23:	
  5749  0CFB  07F8               	addwf	??___ftge+2,f
  5750  0CFC                     u259_24:	
  5751  0CFC  0876               	movf	??___ftge,w
  5752  0CFD  00F0               	movwf	___ftge@ff1
  5753  0CFE  0877               	movf	??___ftge+1,w
  5754  0CFF  00F1               	movwf	___ftge@ff1+1
  5755  0D00  0878               	movf	??___ftge+2,w
  5756  0D01  00F2               	movwf	___ftge@ff1+2
  5757  0D02                     i1l2179:	
  5758  0D02  1FF5               	btfss	___ftge@ff2+2,7
  5759  0D03  2D29               	goto	i1l2183
  5760  0D04  3000               	movlw	0
  5761  0D05  00F6               	movwf	??___ftge
  5762  0D06  3000               	movlw	0
  5763  0D07  00F7               	movwf	??___ftge+1
  5764  0D08  3080               	movlw	128
  5765  0D09  00F8               	movwf	??___ftge+2
  5766  0D0A  0973               	comf	___ftge@ff2,w
  5767  0D0B  00F9               	movwf	??___ftge+3
  5768  0D0C  0974               	comf	___ftge@ff2+1,w
  5769  0D0D  00FA               	movwf	??___ftge+4
  5770  0D0E  0975               	comf	___ftge@ff2+2,w
  5771  0D0F  00FB               	movwf	??___ftge+5
  5772  0D10  0AF9               	incf	??___ftge+3,f
  5773  0D11  1903               	skipnz
  5774  0D12  0AFA               	incf	??___ftge+4,f
  5775  0D13  1903               	skipnz
  5776  0D14  0AFB               	incf	??___ftge+5,f
  5777  0D15  0879               	movf	??___ftge+3,w
  5778  0D16  07F6               	addwf	??___ftge,f
  5779  0D17  087A               	movf	??___ftge+4,w
  5780  0D18  1803               	skipnc
  5781  0D19  0F7A               	incfsz	??___ftge+4,w
  5782  0D1A  2D1C               	goto	u261_21
  5783  0D1B  2D1D               	goto	u261_22
  5784  0D1C                     u261_21:	
  5785  0D1C  07F7               	addwf	??___ftge+1,f
  5786  0D1D                     u261_22:	
  5787  0D1D  087B               	movf	??___ftge+5,w
  5788  0D1E  1803               	skipnc
  5789  0D1F  0F7B               	incfsz	??___ftge+5,w
  5790  0D20  2D22               	goto	u261_23
  5791  0D21  2D23               	goto	u261_24
  5792  0D22                     u261_23:	
  5793  0D22  07F8               	addwf	??___ftge+2,f
  5794  0D23                     u261_24:	
  5795  0D23  0876               	movf	??___ftge,w
  5796  0D24  00F3               	movwf	___ftge@ff2
  5797  0D25  0877               	movf	??___ftge+1,w
  5798  0D26  00F4               	movwf	___ftge@ff2+1
  5799  0D27  0878               	movf	??___ftge+2,w
  5800  0D28  00F5               	movwf	___ftge@ff2+2
  5801  0D29                     i1l2183:	
  5802  0D29  3080               	movlw	128
  5803  0D2A  06F2               	xorwf	___ftge@ff1+2,f
  5804  0D2B  3080               	movlw	128
  5805  0D2C  06F5               	xorwf	___ftge@ff2+2,f
  5806  0D2D  0875               	movf	___ftge@ff2+2,w
  5807  0D2E  0272               	subwf	___ftge@ff1+2,w
  5808  0D2F  1D03               	skipz
  5809  0D30  0008               	return
  5810  0D31  0874               	movf	___ftge@ff2+1,w
  5811  0D32  0271               	subwf	___ftge@ff1+1,w
  5812  0D33  1D03               	skipz
  5813  0D34  0008               	return
  5814  0D35  0873               	movf	___ftge@ff2,w
  5815  0D36  0270               	subwf	___ftge@ff1,w
  5816  0D37  0008               	return
  5817  0D38                     __end_of___ftge:	
  5818                           
  5819                           	psect	text29
  5820  08FC                     __ptext29:	
  5821 ;; *************** function ___awtoft *****************
  5822 ;; Defined at:
  5823 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  c               2    8[COMMON] int 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  sign            1   13[COMMON] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  3    8[COMMON] float 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, pclath, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5837 ;;      Params:         3       0       0       0       0
  5838 ;;      Locals:         1       0       0       0       0
  5839 ;;      Temps:          2       0       0       0       0
  5840 ;;      Totals:         6       0       0       0       0
  5841 ;;Total ram usage:        6 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    1
  5844 ;; This function calls:
  5845 ;;		___ftpack
  5846 ;; This function is called by:
  5847 ;;		_sendSerial
  5848 ;;		_ISR
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           
  5853                           ;psect for function ___awtoft
  5854  08FC                     ___awtoft:	
  5855                           
  5856                           ;incstack = 0
  5857 ;; hardware stack exceeded
  5858                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5859  08FC  01FD               	clrf	___awtoft@sign
  5860  08FD  1FF9               	btfss	___awtoft@c+1,7
  5861  08FE  2906               	goto	i1l2451
  5862  08FF  09F8               	comf	___awtoft@c,f
  5863  0900  09F9               	comf	___awtoft@c+1,f
  5864  0901  0AF8               	incf	___awtoft@c,f
  5865  0902  1903               	skipnz
  5866  0903  0AF9               	incf	___awtoft@c+1,f
  5867  0904  01FD               	clrf	___awtoft@sign
  5868  0905  0AFD               	incf	___awtoft@sign,f
  5869  0906                     i1l2451:	
  5870  0906  0878               	movf	___awtoft@c,w
  5871  0907  00F0               	movwf	___ftpack@arg
  5872  0908  0879               	movf	___awtoft@c+1,w
  5873  0909  00F1               	movwf	___ftpack@arg+1
  5874  090A  01F2               	clrf	___ftpack@arg+2
  5875  090B  308E               	movlw	142
  5876  090C  00FB               	movwf	??___awtoft
  5877  090D  087B               	movf	??___awtoft,w
  5878  090E  00F3               	movwf	___ftpack@exp
  5879  090F  087D               	movf	___awtoft@sign,w
  5880  0910  00FC               	movwf	??___awtoft+1
  5881  0911  087C               	movf	??___awtoft+1,w
  5882  0912  00F4               	movwf	___ftpack@sign
  5883  0913  120A  158A  25FC   	fcall	___ftpack
  5884  0916  0870               	movf	?___ftpack,w
  5885  0917  00F8               	movwf	?___awtoft
  5886  0918  0871               	movf	?___ftpack+1,w
  5887  0919  00F9               	movwf	?___awtoft+1
  5888  091A  0872               	movf	?___ftpack+2,w
  5889  091B  00FA               	movwf	?___awtoft+2
  5890  091C  0008               	return
  5891  091D                     __end_of___awtoft:	
  5892                           
  5893                           	psect	text30
  5894  068D                     __ptext30:	
  5895 ;; *************** function ___ftdiv *****************
  5896 ;; Defined at:
  5897 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  f2              3   16[BANK0 ] float 
  5900 ;;  f1              3   19[BANK0 ] float 
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;  f3              3   27[BANK0 ] float 
  5903 ;;  sign            1   31[BANK0 ] unsigned char 
  5904 ;;  exp             1   30[BANK0 ] unsigned char 
  5905 ;;  cntr            1   26[BANK0 ] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  3   16[BANK0 ] float 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, pclath, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5915 ;;      Params:         0       6       0       0       0
  5916 ;;      Locals:         0       6       0       0       0
  5917 ;;      Temps:          0       4       0       0       0
  5918 ;;      Totals:         0      16       0       0       0
  5919 ;;Total ram usage:       16 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    1
  5922 ;; This function calls:
  5923 ;;		___ftpack
  5924 ;; This function is called by:
  5925 ;;		_ISR
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function ___ftdiv
  5931  068D                     ___ftdiv:	
  5932                           
  5933                           ;incstack = 0
  5934 ;; hardware stack exceeded
  5935                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5936  068D  1283               	bcf	3,5	;RP0=0, select bank0
  5937  068E  1303               	bcf	3,6	;RP1=0, select bank0
  5938  068F  0833               	movf	___ftdiv@f1,w
  5939  0690  00B6               	movwf	??___ftdiv
  5940  0691  0834               	movf	___ftdiv@f1+1,w
  5941  0692  00B7               	movwf	??___ftdiv+1
  5942  0693  0835               	movf	___ftdiv@f1+2,w
  5943  0694  00B8               	movwf	??___ftdiv+2
  5944  0695  1003               	clrc
  5945  0696  0D37               	rlf	??___ftdiv+1,w
  5946  0697  0D38               	rlf	??___ftdiv+2,w
  5947  0698  00B9               	movwf	??___ftdiv+3
  5948  0699  0839               	movf	??___ftdiv+3,w
  5949  069A  00BE               	movwf	___ftdiv@exp
  5950  069B  08BE               	movf	___ftdiv@exp,f
  5951  069C  1D03               	skipz
  5952  069D  2EA5               	goto	i1l2593
  5953  069E  3000               	movlw	0
  5954  069F  00B0               	movwf	?___ftdiv
  5955  06A0  3000               	movlw	0
  5956  06A1  00B1               	movwf	?___ftdiv+1
  5957  06A2  3000               	movlw	0
  5958  06A3  00B2               	movwf	?___ftdiv+2
  5959  06A4  0008               	return
  5960  06A5                     i1l2593:	
  5961  06A5  0830               	movf	___ftdiv@f2,w
  5962  06A6  00B6               	movwf	??___ftdiv
  5963  06A7  0831               	movf	___ftdiv@f2+1,w
  5964  06A8  00B7               	movwf	??___ftdiv+1
  5965  06A9  0832               	movf	___ftdiv@f2+2,w
  5966  06AA  00B8               	movwf	??___ftdiv+2
  5967  06AB  1003               	clrc
  5968  06AC  0D37               	rlf	??___ftdiv+1,w
  5969  06AD  0D38               	rlf	??___ftdiv+2,w
  5970  06AE  00B9               	movwf	??___ftdiv+3
  5971  06AF  0839               	movf	??___ftdiv+3,w
  5972  06B0  00BF               	movwf	___ftdiv@sign
  5973  06B1  08BF               	movf	___ftdiv@sign,f
  5974  06B2  1D03               	skipz
  5975  06B3  2EBB               	goto	i1l2599
  5976  06B4  3000               	movlw	0
  5977  06B5  00B0               	movwf	?___ftdiv
  5978  06B6  3000               	movlw	0
  5979  06B7  00B1               	movwf	?___ftdiv+1
  5980  06B8  3000               	movlw	0
  5981  06B9  00B2               	movwf	?___ftdiv+2
  5982  06BA  0008               	return
  5983  06BB                     i1l2599:	
  5984  06BB  3000               	movlw	0
  5985  06BC  00BB               	movwf	___ftdiv@f3
  5986  06BD  3000               	movlw	0
  5987  06BE  00BC               	movwf	___ftdiv@f3+1
  5988  06BF  3000               	movlw	0
  5989  06C0  00BD               	movwf	___ftdiv@f3+2
  5990  06C1  3089               	movlw	137
  5991  06C2  073F               	addwf	___ftdiv@sign,w
  5992  06C3  00B6               	movwf	??___ftdiv
  5993  06C4  0836               	movf	??___ftdiv,w
  5994  06C5  02BE               	subwf	___ftdiv@exp,f
  5995  06C6  0833               	movf	___ftdiv@f1,w
  5996  06C7  00B6               	movwf	??___ftdiv
  5997  06C8  0834               	movf	___ftdiv@f1+1,w
  5998  06C9  00B7               	movwf	??___ftdiv+1
  5999  06CA  0835               	movf	___ftdiv@f1+2,w
  6000  06CB  00B8               	movwf	??___ftdiv+2
  6001  06CC  3010               	movlw	16
  6002  06CD                     u317_25:	
  6003  06CD  1003               	clrc
  6004  06CE  0CB8               	rrf	??___ftdiv+2,f
  6005  06CF  0CB7               	rrf	??___ftdiv+1,f
  6006  06D0  0CB6               	rrf	??___ftdiv,f
  6007  06D1  3EFF               	addlw	-1
  6008  06D2  1D03               	skipz
  6009  06D3  2ECD               	goto	u317_25
  6010  06D4  0836               	movf	??___ftdiv,w
  6011  06D5  00B9               	movwf	??___ftdiv+3
  6012  06D6  0839               	movf	??___ftdiv+3,w
  6013  06D7  00BF               	movwf	___ftdiv@sign
  6014  06D8  0830               	movf	___ftdiv@f2,w
  6015  06D9  00B6               	movwf	??___ftdiv
  6016  06DA  0831               	movf	___ftdiv@f2+1,w
  6017  06DB  00B7               	movwf	??___ftdiv+1
  6018  06DC  0832               	movf	___ftdiv@f2+2,w
  6019  06DD  00B8               	movwf	??___ftdiv+2
  6020  06DE  3010               	movlw	16
  6021  06DF                     u318_25:	
  6022  06DF  1003               	clrc
  6023  06E0  0CB8               	rrf	??___ftdiv+2,f
  6024  06E1  0CB7               	rrf	??___ftdiv+1,f
  6025  06E2  0CB6               	rrf	??___ftdiv,f
  6026  06E3  3EFF               	addlw	-1
  6027  06E4  1D03               	skipz
  6028  06E5  2EDF               	goto	u318_25
  6029  06E6  0836               	movf	??___ftdiv,w
  6030  06E7  00B9               	movwf	??___ftdiv+3
  6031  06E8  0839               	movf	??___ftdiv+3,w
  6032  06E9  06BF               	xorwf	___ftdiv@sign,f
  6033  06EA  3080               	movlw	128
  6034  06EB  00B6               	movwf	??___ftdiv
  6035  06EC  0836               	movf	??___ftdiv,w
  6036  06ED  05BF               	andwf	___ftdiv@sign,f
  6037  06EE  17B4               	bsf	___ftdiv@f1+1,7
  6038  06EF  30FF               	movlw	255
  6039  06F0  05B3               	andwf	___ftdiv@f1,f
  6040  06F1  30FF               	movlw	255
  6041  06F2  05B4               	andwf	___ftdiv@f1+1,f
  6042  06F3  3000               	movlw	0
  6043  06F4  05B5               	andwf	___ftdiv@f1+2,f
  6044  06F5  17B1               	bsf	___ftdiv@f2+1,7
  6045  06F6  30FF               	movlw	255
  6046  06F7  05B0               	andwf	___ftdiv@f2,f
  6047  06F8  30FF               	movlw	255
  6048  06F9  05B1               	andwf	___ftdiv@f2+1,f
  6049  06FA  3000               	movlw	0
  6050  06FB  05B2               	andwf	___ftdiv@f2+2,f
  6051  06FC  3018               	movlw	24
  6052  06FD  00B6               	movwf	??___ftdiv
  6053  06FE  0836               	movf	??___ftdiv,w
  6054  06FF  00BA               	movwf	___ftdiv@cntr
  6055  0700                     i1l2613:	
  6056  0700  3001               	movlw	1
  6057  0701                     u319_25:	
  6058  0701  1003               	clrc
  6059  0702  0DBB               	rlf	___ftdiv@f3,f
  6060  0703  0DBC               	rlf	___ftdiv@f3+1,f
  6061  0704  0DBD               	rlf	___ftdiv@f3+2,f
  6062  0705  3EFF               	addlw	-1
  6063  0706  1D03               	skipz
  6064  0707  2F01               	goto	u319_25
  6065  0708  0832               	movf	___ftdiv@f2+2,w
  6066  0709  0235               	subwf	___ftdiv@f1+2,w
  6067  070A  1D03               	skipz
  6068  070B  2F12               	goto	u320_25
  6069  070C  0831               	movf	___ftdiv@f2+1,w
  6070  070D  0234               	subwf	___ftdiv@f1+1,w
  6071  070E  1D03               	skipz
  6072  070F  2F12               	goto	u320_25
  6073  0710  0830               	movf	___ftdiv@f2,w
  6074  0711  0233               	subwf	___ftdiv@f1,w
  6075  0712                     u320_25:	
  6076  0712  1C03               	skipc
  6077  0713  2F1F               	goto	i1l2621
  6078  0714  0830               	movf	___ftdiv@f2,w
  6079  0715  02B3               	subwf	___ftdiv@f1,f
  6080  0716  0831               	movf	___ftdiv@f2+1,w
  6081  0717  1C03               	skipc
  6082  0718  0F31               	incfsz	___ftdiv@f2+1,w
  6083  0719  02B4               	subwf	___ftdiv@f1+1,f
  6084  071A  0832               	movf	___ftdiv@f2+2,w
  6085  071B  1C03               	skipc
  6086  071C  0A32               	incf	___ftdiv@f2+2,w
  6087  071D  02B5               	subwf	___ftdiv@f1+2,f
  6088  071E  143B               	bsf	___ftdiv@f3,0
  6089  071F                     i1l2621:	
  6090  071F  3001               	movlw	1
  6091  0720                     u321_25:	
  6092  0720  1003               	clrc
  6093  0721  0DB3               	rlf	___ftdiv@f1,f
  6094  0722  0DB4               	rlf	___ftdiv@f1+1,f
  6095  0723  0DB5               	rlf	___ftdiv@f1+2,f
  6096  0724  3EFF               	addlw	-1
  6097  0725  1D03               	skipz
  6098  0726  2F20               	goto	u321_25
  6099  0727  3001               	movlw	1
  6100  0728  02BA               	subwf	___ftdiv@cntr,f
  6101  0729  1D03               	btfss	3,2
  6102  072A  2F00               	goto	i1l2613
  6103  072B  083B               	movf	___ftdiv@f3,w
  6104  072C  00F0               	movwf	___ftpack@arg
  6105  072D  083C               	movf	___ftdiv@f3+1,w
  6106  072E  00F1               	movwf	___ftpack@arg+1
  6107  072F  083D               	movf	___ftdiv@f3+2,w
  6108  0730  00F2               	movwf	___ftpack@arg+2
  6109  0731  083E               	movf	___ftdiv@exp,w
  6110  0732  00B6               	movwf	??___ftdiv
  6111  0733  0836               	movf	??___ftdiv,w
  6112  0734  00F3               	movwf	___ftpack@exp
  6113  0735  083F               	movf	___ftdiv@sign,w
  6114  0736  00B7               	movwf	??___ftdiv+1
  6115  0737  0837               	movf	??___ftdiv+1,w
  6116  0738  00F4               	movwf	___ftpack@sign
  6117  0739  120A  158A  25FC   	fcall	___ftpack
  6118  073C  0870               	movf	?___ftpack,w
  6119  073D  1283               	bcf	3,5	;RP0=0, select bank0
  6120  073E  1303               	bcf	3,6	;RP1=0, select bank0
  6121  073F  00B0               	movwf	?___ftdiv
  6122  0740  0871               	movf	?___ftpack+1,w
  6123  0741  00B1               	movwf	?___ftdiv+1
  6124  0742  0872               	movf	?___ftpack+2,w
  6125  0743  00B2               	movwf	?___ftdiv+2
  6126  0744  0008               	return
  6127  0745                     __end_of___ftdiv:	
  6128                           
  6129                           	psect	text31
  6130  0DFC                     __ptext31:	
  6131 ;; *************** function ___ftpack *****************
  6132 ;; Defined at:
  6133 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  arg             3    0[COMMON] unsigned um
  6136 ;;  exp             1    3[COMMON] unsigned char 
  6137 ;;  sign            1    4[COMMON] unsigned char 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  3    0[COMMON] float 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6149 ;;      Params:         5       0       0       0       0
  6150 ;;      Locals:         0       0       0       0       0
  6151 ;;      Temps:          3       0       0       0       0
  6152 ;;      Totals:         8       0       0       0       0
  6153 ;;Total ram usage:        8 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		___awtoft
  6159 ;;		___ftadd
  6160 ;;		___ftdiv
  6161 ;;		___ftmul
  6162 ;;		___lltoft
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           
  6167                           ;psect for function ___ftpack
  6168  0DFC                     ___ftpack:	
  6169                           
  6170                           ;incstack = 0
  6171 ;; hardware stack exceeded
  6172                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6173  0DFC  0873               	movf	___ftpack@exp,w
  6174  0DFD  1903               	btfsc	3,2
  6175  0DFE  2E04               	goto	i1l1853
  6176  0DFF  0872               	movf	___ftpack@arg+2,w
  6177  0E00  0471               	iorwf	___ftpack@arg+1,w
  6178  0E01  0470               	iorwf	___ftpack@arg,w
  6179  0E02  1D03               	skipz
  6180  0E03  2E17               	goto	i1l1859
  6181  0E04                     i1l1853:	
  6182  0E04  3000               	movlw	0
  6183  0E05  00F0               	movwf	?___ftpack
  6184  0E06  3000               	movlw	0
  6185  0E07  00F1               	movwf	?___ftpack+1
  6186  0E08  3000               	movlw	0
  6187  0E09  00F2               	movwf	?___ftpack+2
  6188  0E0A  0008               	return
  6189  0E0B                     i1l1857:	
  6190  0E0B  3001               	movlw	1
  6191  0E0C  00F5               	movwf	??___ftpack
  6192  0E0D  0875               	movf	??___ftpack,w
  6193  0E0E  07F3               	addwf	___ftpack@exp,f
  6194  0E0F  3001               	movlw	1
  6195  0E10                     u180_25:	
  6196  0E10  1003               	clrc
  6197  0E11  0CF2               	rrf	___ftpack@arg+2,f
  6198  0E12  0CF1               	rrf	___ftpack@arg+1,f
  6199  0E13  0CF0               	rrf	___ftpack@arg,f
  6200  0E14  3EFF               	addlw	-1
  6201  0E15  1D03               	skipz
  6202  0E16  2E10               	goto	u180_25
  6203  0E17                     i1l1859:	
  6204  0E17  30FE               	movlw	254
  6205  0E18  0572               	andwf	___ftpack@arg+2,w
  6206  0E19  1903               	btfsc	3,2
  6207  0E1A  2E32               	goto	i1l530
  6208  0E1B  2E0B               	goto	i1l1857
  6209  0E1C                     i1l1861:	
  6210  0E1C  3001               	movlw	1
  6211  0E1D  00F5               	movwf	??___ftpack
  6212  0E1E  0875               	movf	??___ftpack,w
  6213  0E1F  07F3               	addwf	___ftpack@exp,f
  6214  0E20  3001               	movlw	1
  6215  0E21  07F0               	addwf	___ftpack@arg,f
  6216  0E22  3000               	movlw	0
  6217  0E23  1803               	skipnc
  6218  0E24  3001               	movlw	1
  6219  0E25  07F1               	addwf	___ftpack@arg+1,f
  6220  0E26  3000               	movlw	0
  6221  0E27  1803               	skipnc
  6222  0E28  3001               	movlw	1
  6223  0E29  07F2               	addwf	___ftpack@arg+2,f
  6224  0E2A  3001               	movlw	1
  6225  0E2B                     u182_25:	
  6226  0E2B  1003               	clrc
  6227  0E2C  0CF2               	rrf	___ftpack@arg+2,f
  6228  0E2D  0CF1               	rrf	___ftpack@arg+1,f
  6229  0E2E  0CF0               	rrf	___ftpack@arg,f
  6230  0E2F  3EFF               	addlw	-1
  6231  0E30  1D03               	skipz
  6232  0E31  2E2B               	goto	u182_25
  6233  0E32                     i1l530:	
  6234  0E32  30FF               	movlw	255
  6235  0E33  0572               	andwf	___ftpack@arg+2,w
  6236  0E34  1903               	btfsc	3,2
  6237  0E35  2E41               	goto	i1l1869
  6238  0E36  2E1C               	goto	i1l1861
  6239  0E37                     i1l1867:	
  6240  0E37  3001               	movlw	1
  6241  0E38  02F3               	subwf	___ftpack@exp,f
  6242  0E39  3001               	movlw	1
  6243  0E3A                     u184_25:	
  6244  0E3A  1003               	clrc
  6245  0E3B  0DF0               	rlf	___ftpack@arg,f
  6246  0E3C  0DF1               	rlf	___ftpack@arg+1,f
  6247  0E3D  0DF2               	rlf	___ftpack@arg+2,f
  6248  0E3E  3EFF               	addlw	-1
  6249  0E3F  1D03               	skipz
  6250  0E40  2E3A               	goto	u184_25
  6251  0E41                     i1l1869:	
  6252  0E41  1FF1               	btfss	___ftpack@arg+1,7
  6253  0E42  2E37               	goto	i1l1867
  6254  0E43  1873               	btfsc	___ftpack@exp,0
  6255  0E44  2E4B               	goto	i1l536
  6256  0E45  30FF               	movlw	255
  6257  0E46  05F0               	andwf	___ftpack@arg,f
  6258  0E47  307F               	movlw	127
  6259  0E48  05F1               	andwf	___ftpack@arg+1,f
  6260  0E49  30FF               	movlw	255
  6261  0E4A  05F2               	andwf	___ftpack@arg+2,f
  6262  0E4B                     i1l536:	
  6263  0E4B  1003               	clrc
  6264  0E4C  0CF3               	rrf	___ftpack@exp,f
  6265  0E4D  0873               	movf	___ftpack@exp,w
  6266  0E4E  00F5               	movwf	??___ftpack
  6267  0E4F  01F6               	clrf	??___ftpack+1
  6268  0E50  01F7               	clrf	??___ftpack+2
  6269  0E51  3010               	movlw	16
  6270  0E52                     u187_25:	
  6271  0E52  1003               	clrc
  6272  0E53  0DF5               	rlf	??___ftpack,f
  6273  0E54  0DF6               	rlf	??___ftpack+1,f
  6274  0E55  0DF7               	rlf	??___ftpack+2,f
  6275  0E56  3EFF               	addlw	-1
  6276  0E57  1D03               	skipz
  6277  0E58  2E52               	goto	u187_25
  6278  0E59  0875               	movf	??___ftpack,w
  6279  0E5A  04F0               	iorwf	___ftpack@arg,f
  6280  0E5B  0876               	movf	??___ftpack+1,w
  6281  0E5C  04F1               	iorwf	___ftpack@arg+1,f
  6282  0E5D  0877               	movf	??___ftpack+2,w
  6283  0E5E  04F2               	iorwf	___ftpack@arg+2,f
  6284  0E5F  0874               	movf	___ftpack@sign,w
  6285  0E60  1903               	btfsc	3,2
  6286  0E61  0008               	return
  6287  0E62  17F2               	bsf	___ftpack@arg+2,7
  6288  0E63  0008               	return
  6289  0E64                     __end_of___ftpack:	
  6290                           
  6291                           	psect	text32
  6292  088A                     __ptext32:	
  6293 ;; *************** function _USARTReceiveChar *****************
  6294 ;; Defined at:
  6295 ;;		line 94 in file "main.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  USARTData       1    4[COMMON] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      unsigned char 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6309 ;;      Params:         0       0       0       0       0
  6310 ;;      Locals:         1       0       0       0       0
  6311 ;;      Temps:          1       0       0       0       0
  6312 ;;      Totals:         2       0       0       0       0
  6313 ;;Total ram usage:        2 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    2
  6316 ;; This function calls:
  6317 ;;		i1_USARTWriteString
  6318 ;; This function is called by:
  6319 ;;		_ISR
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           
  6324                           ;psect for function _USARTReceiveChar
  6325  088A                     _USARTReceiveChar:	
  6326                           
  6327                           ;main.c: 95: unsigned char USARTData;
  6328                           ;main.c: 97: if (!OERR)
  6329                           
  6330                           ;incstack = 0
  6331 ;; hardware stack exceeded
  6332                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6333  088A  1283               	bcf	3,5	;RP0=0, select bank0
  6334  088B  1303               	bcf	3,6	;RP1=0, select bank0
  6335  088C  1898               	btfsc	24,1	;volatile
  6336  088D  2893               	goto	i1l2469
  6337                           
  6338                           ;main.c: 98: {
  6339                           ;main.c: 99: USARTData = RCREG;
  6340  088E  081A               	movf	26,w	;volatile
  6341  088F  00F3               	movwf	??_USARTReceiveChar
  6342  0890  0873               	movf	??_USARTReceiveChar,w
  6343  0891  00F4               	movwf	USARTReceiveChar@USARTData
  6344  0892  28A2               	goto	i1l2477
  6345  0893                     i1l2469:	
  6346                           ;main.c: 101: } else {
  6347                           
  6348                           ;main.c: 100: PIR1bits.RCIF = 0;
  6349                           
  6350                           
  6351                           ;main.c: 102: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  6352  0893  3031               	movlw	low (STR_1-__stringbase)
  6353  0894  00F1               	movwf	i1USARTWriteString@str
  6354  0895  3080               	movlw	128
  6355  0896  00F2               	movwf	i1USARTWriteString@str+1
  6356  0897  120A  158A  2163   	fcall	i1_USARTWriteString
  6357                           
  6358                           ;main.c: 104: RCSTAbits.CREN = 0;
  6359  089A  1283               	bcf	3,5	;RP0=0, select bank0
  6360  089B  1303               	bcf	3,6	;RP1=0, select bank0
  6361  089C  1218               	bcf	24,4	;volatile
  6362                           
  6363                           ;main.c: 105: USARTData = RCREG;
  6364  089D  081A               	movf	26,w	;volatile
  6365  089E  00F3               	movwf	??_USARTReceiveChar
  6366  089F  0873               	movf	??_USARTReceiveChar,w
  6367  08A0  00F4               	movwf	USARTReceiveChar@USARTData
  6368                           
  6369                           ;main.c: 106: RCSTAbits.CREN = 1;
  6370  08A1  1618               	bsf	24,4	;volatile
  6371  08A2                     i1l2477:	
  6372                           
  6373                           ;main.c: 107: PIR1bits.RCIF = 0;
  6374  08A2  128C               	bcf	12,5	;volatile
  6375                           
  6376                           ;main.c: 108: }
  6377                           ;main.c: 109: return (USARTData);
  6378  08A3  0874               	movf	USARTReceiveChar@USARTData,w
  6379  08A4  0008               	return
  6380  08A5                     __end_of_USARTReceiveChar:	
  6381                           
  6382                           	psect	text33
  6383  0BE8                     __ptext33:	
  6384 ;; *************** function _ProgressBar *****************
  6385 ;; Defined at:
  6386 ;;		line 185 in file "main.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  preint          2    0[BANK0 ] int 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  aux            16    6[BANK0 ] unsigned char [16]
  6391 ;;  i               2   22[BANK0 ] int 
  6392 ;;  result          1   24[BANK0 ] PTR unsigned char 
  6393 ;;		 -> ProgressBar@aux(16), 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;		None               void
  6396 ;; Registers used:
  6397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6403 ;;      Params:         0       2       0       0       0
  6404 ;;      Locals:         0      19       0       0       0
  6405 ;;      Temps:          0       4       0       0       0
  6406 ;;      Totals:         0      25       0       0       0
  6407 ;;Total ram usage:       25 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    5
  6410 ;; This function calls:
  6411 ;;		i1_lcd_escreve_string
  6412 ;; This function is called by:
  6413 ;;		_ISR
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function _ProgressBar
  6419  0BE8                     _ProgressBar:	
  6420                           
  6421                           ;main.c: 186: int i = 0;
  6422                           
  6423                           ;incstack = 0
  6424 ;; hardware stack exceeded
  6425                           ; Regs used in _ProgressBar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6426  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  6427  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  6428  0BEA  01B6               	clrf	ProgressBar@i
  6429  0BEB  01B7               	clrf	ProgressBar@i+1
  6430                           
  6431                           ;main.c: 187: unsigned char *result;
  6432                           ;main.c: 188: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  6433  0BEC  3026               	movlw	ProgressBar@aux& (0+255)
  6434  0BED  0084               	movwf	4
  6435  0BEE  30CE               	movlw	low ProgressBar@F1340
  6436  0BEF  00A2               	movwf	??_ProgressBar
  6437  0BF0  0804               	movf	4,w
  6438  0BF1  00A3               	movwf	??_ProgressBar+1
  6439  0BF2  3010               	movlw	16
  6440  0BF3  00A4               	movwf	??_ProgressBar+2
  6441  0BF4                     u308_20:	
  6442  0BF4  0822               	movf	??_ProgressBar,w
  6443  0BF5  0084               	movwf	4
  6444  0BF6  1383               	bcf	3,7	;select IRP bank1
  6445  0BF7  0800               	movf	0,w
  6446  0BF8  00A5               	movwf	??_ProgressBar+3
  6447  0BF9  0AA2               	incf	??_ProgressBar,f
  6448  0BFA  0823               	movf	??_ProgressBar+1,w
  6449  0BFB  0084               	movwf	4
  6450  0BFC  0825               	movf	??_ProgressBar+3,w
  6451  0BFD  0080               	movwf	0
  6452  0BFE  0AA3               	incf	??_ProgressBar+1,f
  6453  0BFF  0BA4               	decfsz	??_ProgressBar+2,f
  6454  0C00  2BF4               	goto	u308_20
  6455  0C01                     i1l2507:	
  6456                           ;main.c: 191: while (preint >= 0) {
  6457                           
  6458  0C01  1BA1               	btfsc	ProgressBar@preint+1,7
  6459  0C02  2C17               	goto	i1l2509
  6460                           
  6461                           ;main.c: 192: aux[i] = 0xFF;
  6462  0C03  30FF               	movlw	255
  6463  0C04  00A2               	movwf	??_ProgressBar
  6464  0C05  0836               	movf	ProgressBar@i,w
  6465  0C06  3E26               	addlw	ProgressBar@aux& (0+255)
  6466  0C07  0084               	movwf	4
  6467  0C08  0822               	movf	??_ProgressBar,w
  6468  0C09  0080               	movwf	0
  6469                           
  6470                           ;main.c: 193: preint--;
  6471  0C0A  30FF               	movlw	255
  6472  0C0B  07A0               	addwf	ProgressBar@preint,f
  6473  0C0C  1803               	skipnc
  6474  0C0D  0AA1               	incf	ProgressBar@preint+1,f
  6475  0C0E  30FF               	movlw	255
  6476  0C0F  07A1               	addwf	ProgressBar@preint+1,f
  6477                           
  6478                           ;main.c: 194: i++;
  6479  0C10  3001               	movlw	1
  6480  0C11  07B6               	addwf	ProgressBar@i,f
  6481  0C12  1803               	skipnc
  6482  0C13  0AB7               	incf	ProgressBar@i+1,f
  6483  0C14  3000               	movlw	0
  6484  0C15  07B7               	addwf	ProgressBar@i+1,f
  6485  0C16  2C01               	goto	i1l2507
  6486  0C17                     i1l2509:	
  6487                           
  6488                           ;main.c: 195: }
  6489                           ;main.c: 196: result = &aux;
  6490  0C17  3026               	movlw	ProgressBar@aux& (0+255)
  6491  0C18  00A2               	movwf	??_ProgressBar
  6492  0C19  0822               	movf	??_ProgressBar,w
  6493  0C1A  00B8               	movwf	ProgressBar@result
  6494                           
  6495                           ;main.c: 198: lcd_escreve_string(result);
  6496  0C1B  0838               	movf	ProgressBar@result,w
  6497  0C1C  00FC               	movwf	i1lcd_escreve_string@y
  6498  0C1D  3000               	movlw	0
  6499  0C1E  00FD               	movwf	i1lcd_escreve_string@y+1
  6500  0C1F  120A  158A  211D  120A  158A  	fcall	i1_lcd_escreve_string
  6501                           
  6502                           ;main.c: 199: _delay((unsigned long)((200)*(20000000/4000.0)));
  6503  0C24  3006               	movlw	6
  6504  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  6505  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  6506  0C27  00A4               	movwf	??_ProgressBar+2
  6507  0C28  3013               	movlw	19
  6508  0C29  00A3               	movwf	??_ProgressBar+1
  6509  0C2A  30B1               	movlw	177
  6510  0C2B  00A2               	movwf	??_ProgressBar
  6511  0C2C                     u362_27:	
  6512  0C2C  0BA2               	decfsz	??_ProgressBar,f
  6513  0C2D  2C2C               	goto	u362_27
  6514  0C2E  0BA3               	decfsz	??_ProgressBar+1,f
  6515  0C2F  2C2C               	goto	u362_27
  6516  0C30  0BA4               	decfsz	??_ProgressBar+2,f
  6517  0C31  2C2C               	goto	u362_27
  6518  0C32  2C33               	nop2
  6519  0C33  0008               	return
  6520  0C34                     __end_of_ProgressBar:	
  6521                           
  6522                           	psect	text34
  6523  091D                     __ptext34:	
  6524 ;; *************** function i1_lcd_escreve_string *****************
  6525 ;; Defined at:
  6526 ;;		line 168 in file "lcd_4bit.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  y               2   12[COMMON] PTR const unsigned char 
  6529 ;;		 -> ftoa@buf(17), STR_6(16), STR_4(2), STR_2(7), 
  6530 ;;		 -> ProgressBar@aux(16), 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;		None               void
  6535 ;; Registers used:
  6536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6542 ;;      Params:         2       0       0       0       0
  6543 ;;      Locals:         0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0
  6545 ;;      Totals:         2       0       0       0       0
  6546 ;;Total ram usage:        2 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    4
  6549 ;; This function calls:
  6550 ;;		i1_lcd_putc
  6551 ;; This function is called by:
  6552 ;;		_ProgressBar
  6553 ;;		_ISR
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           
  6558                           ;psect for function i1_lcd_escreve_string
  6559  091D                     i1_lcd_escreve_string:	
  6560  091D                     i1l2461:	
  6561                           ;lcd_4bit.c: 170: while(*y!='\0')
  6562                           
  6563                           ;incstack = 0
  6564 ;; hardware stack exceeded
  6565                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  6566                           
  6567  091D  087D               	movf	i1lcd_escreve_string@y+1,w
  6568  091E  1283               	bcf	3,5	;RP0=0, select bank0
  6569  091F  1303               	bcf	3,6	;RP1=0, select bank0
  6570  0920  00FF               	movwf	127
  6571  0921  087C               	movf	i1lcd_escreve_string@y,w
  6572  0922  0084               	movwf	4
  6573  0923  120A  118A  2745  120A  158A  	fcall	stringtab
  6574  0928  3800               	iorlw	0
  6575  0929  1903               	btfsc	3,2
  6576  092A  0008               	return
  6577                           
  6578                           ;lcd_4bit.c: 171: {
  6579                           ;lcd_4bit.c: 172: lcd_putc(*y);
  6580  092B  087D               	movf	i1lcd_escreve_string@y+1,w
  6581  092C  1283               	bcf	3,5	;RP0=0, select bank0
  6582  092D  1303               	bcf	3,6	;RP1=0, select bank0
  6583  092E  00FF               	movwf	127
  6584  092F  087C               	movf	i1lcd_escreve_string@y,w
  6585  0930  0084               	movwf	4
  6586  0931  120A  118A  2745  120A  158A  	fcall	stringtab
  6587  0936  120A  158A  22E7  120A  158A  	fcall	i1_lcd_putc
  6588                           
  6589                           ;lcd_4bit.c: 173: y++;
  6590  093B  3001               	movlw	1
  6591  093C  07FC               	addwf	i1lcd_escreve_string@y,f
  6592  093D  1803               	skipnc
  6593  093E  0AFD               	incf	i1lcd_escreve_string@y+1,f
  6594  093F  291D               	goto	i1l2461
  6595  0940                     __end_ofi1_lcd_escreve_string:	
  6596                           
  6597                           	psect	text35
  6598  0AE7                     __ptext35:	
  6599 ;; *************** function i1_lcd_putc *****************
  6600 ;; Defined at:
  6601 ;;		line 82 in file "lcd_4bit.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  c               1    wreg     unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  c               1   11[COMMON] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6615 ;;      Params:         0       0       0       0       0
  6616 ;;      Locals:         1       0       0       0       0
  6617 ;;      Temps:          2       0       0       0       0
  6618 ;;      Totals:         3       0       0       0       0
  6619 ;;Total ram usage:        3 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    3
  6622 ;; This function calls:
  6623 ;;		i1_lcd_envia_byte
  6624 ;;		i1_lcd_gotoxy
  6625 ;; This function is called by:
  6626 ;;		i1_lcd_escreve_string
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           
  6631                           ;psect for function i1_lcd_putc
  6632  0AE7                     i1_lcd_putc:	
  6633                           
  6634                           ;incstack = 0
  6635 ;; hardware stack exceeded
  6636                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6637                           ;i1lcd_putc@c stored from wreg
  6638  0AE7  00FB               	movwf	i1lcd_putc@c
  6639                           
  6640                           ;lcd_4bit.c: 84: switch(c)
  6641  0AE8  2B16               	goto	i1l2335
  6642  0AE9                     i1l2323:	
  6643                           ;lcd_4bit.c: 85: {
  6644                           ;lcd_4bit.c: 86: case '\f':
  6645                           
  6646                           
  6647                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  6648  0AE9  01F2               	clrf	i1lcd_envia_byte@n
  6649  0AEA  0AF2               	incf	i1lcd_envia_byte@n,f
  6650  0AEB  3000               	movlw	0
  6651  0AEC  120A  158A  2188  120A  158A  	fcall	i1_lcd_envia_byte
  6652                           
  6653                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  6654  0AF1  300D               	movlw	13
  6655  0AF2  00FA               	movwf	??i1_lcd_putc+1
  6656  0AF3  30FB               	movlw	251
  6657  0AF4  00F9               	movwf	??i1_lcd_putc
  6658  0AF5                     u363_27:	
  6659  0AF5  0BF9               	decfsz	??i1_lcd_putc,f
  6660  0AF6  2AF5               	goto	u363_27
  6661  0AF7  0BFA               	decfsz	??i1_lcd_putc+1,f
  6662  0AF8  2AF5               	goto	u363_27
  6663  0AF9  2AFA               	nop2
  6664                           
  6665                           ;lcd_4bit.c: 89: break;
  6666  0AFA  0008               	return
  6667  0AFB                     i1l2327:	
  6668                           ;lcd_4bit.c: 91: case '\n':
  6669                           
  6670                           
  6671                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  6672  0AFB  3002               	movlw	2
  6673  0AFC  00F9               	movwf	??i1_lcd_putc
  6674  0AFD  0879               	movf	??i1_lcd_putc,w
  6675  0AFE  00F5               	movwf	i1lcd_gotoxy@y
  6676  0AFF  3001               	movlw	1
  6677  0B00  120A  158A  2070   	fcall	i1_lcd_gotoxy
  6678                           
  6679                           ;lcd_4bit.c: 93: break;
  6680  0B03  0008               	return
  6681  0B04                     i1l2329:	
  6682                           ;lcd_4bit.c: 95: case '\b':
  6683                           
  6684                           
  6685                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  6686  0B04  3010               	movlw	16
  6687  0B05  00F9               	movwf	??i1_lcd_putc
  6688  0B06  0879               	movf	??i1_lcd_putc,w
  6689  0B07  00F2               	movwf	i1lcd_envia_byte@n
  6690  0B08  3000               	movlw	0
  6691  0B09  120A  158A  2188   	fcall	i1_lcd_envia_byte
  6692                           
  6693                           ;lcd_4bit.c: 97: break;
  6694  0B0C  0008               	return
  6695  0B0D                     i1l2331:	
  6696                           ;lcd_4bit.c: 99: default:
  6697                           
  6698                           
  6699                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  6700  0B0D  087B               	movf	i1lcd_putc@c,w
  6701  0B0E  00F9               	movwf	??i1_lcd_putc
  6702  0B0F  0879               	movf	??i1_lcd_putc,w
  6703  0B10  00F2               	movwf	i1lcd_envia_byte@n
  6704  0B11  3001               	movlw	1
  6705  0B12  120A  158A  2188   	fcall	i1_lcd_envia_byte
  6706                           
  6707                           ;lcd_4bit.c: 102: }
  6708                           
  6709                           ;lcd_4bit.c: 101: break;
  6710  0B15  0008               	return
  6711  0B16                     i1l2335:	
  6712  0B16  087B               	movf	i1lcd_putc@c,w
  6713                           
  6714                           ; Switch size 1, requested type "space"
  6715                           ; Number of cases is 3, Range of values is 8 to 12
  6716                           ; switch strategies available:
  6717                           ; Name         Instructions Cycles
  6718                           ; simple_byte           10     6 (average)
  6719                           ; direct_byte           26    11 (fixed)
  6720                           ; jumptable            263     9 (fixed)
  6721                           ;	Chosen strategy is simple_byte
  6722  0B17  3A08               	xorlw	8	; case 8
  6723  0B18  1903               	skipnz
  6724  0B19  2B04               	goto	i1l2329
  6725  0B1A  3A02               	xorlw	2	; case 10
  6726  0B1B  1903               	skipnz
  6727  0B1C  2AFB               	goto	i1l2327
  6728  0B1D  3A06               	xorlw	6	; case 12
  6729  0B1E  1903               	skipnz
  6730  0B1F  2AE9               	goto	i1l2323
  6731  0B20  2B0D               	goto	i1l2331
  6732  0B21  0008               	return
  6733  0B22                     __end_ofi1_lcd_putc:	
  6734                           
  6735                           	psect	text36
  6736  0870                     __ptext36:	
  6737 ;; *************** function i1_lcd_gotoxy *****************
  6738 ;; Defined at:
  6739 ;;		line 70 in file "lcd_4bit.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;  x               1    wreg     unsigned char 
  6742 ;;  y               1    5[COMMON] unsigned char 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  x               1    7[COMMON] unsigned char 
  6745 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;		None               void
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6755 ;;      Params:         1       0       0       0       0
  6756 ;;      Locals:         2       0       0       0       0
  6757 ;;      Temps:          1       0       0       0       0
  6758 ;;      Totals:         4       0       0       0       0
  6759 ;;Total ram usage:        4 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    2
  6762 ;; This function calls:
  6763 ;;		i1_lcd_envia_byte
  6764 ;; This function is called by:
  6765 ;;		_ISR
  6766 ;;		i1_lcd_putc
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           
  6771                           ;psect for function i1_lcd_gotoxy
  6772  0870                     i1_lcd_gotoxy:	
  6773                           
  6774                           ;incstack = 0
  6775 ;; hardware stack exceeded
  6776                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  6777                           ;i1lcd_gotoxy@x stored from wreg
  6778  0870  00F7               	movwf	i1lcd_gotoxy@x
  6779                           
  6780                           ;lcd_4bit.c: 72: unsigned char address;
  6781                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  6782  0871  0875               	movf	i1lcd_gotoxy@y,w
  6783  0872  3A01               	xorlw	1
  6784  0873  1903               	skipnz
  6785  0874  287A               	goto	i1l2045
  6786  0875  3040               	movlw	64
  6787  0876  00F6               	movwf	??i1_lcd_gotoxy
  6788  0877  0876               	movf	??i1_lcd_gotoxy,w
  6789  0878  00F8               	movwf	i1lcd_gotoxy@address
  6790  0879  287B               	goto	i1l2047
  6791  087A                     i1l2045:	
  6792                           
  6793                           ;lcd_4bit.c: 75: else address=0;
  6794  087A  01F8               	clrf	i1lcd_gotoxy@address
  6795  087B                     i1l2047:	
  6796                           
  6797                           ;lcd_4bit.c: 77: address += x-1;
  6798  087B  0877               	movf	i1lcd_gotoxy@x,w
  6799  087C  3EFF               	addlw	255
  6800  087D  00F6               	movwf	??i1_lcd_gotoxy
  6801  087E  0876               	movf	??i1_lcd_gotoxy,w
  6802  087F  07F8               	addwf	i1lcd_gotoxy@address,f
  6803                           
  6804                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  6805  0880  0878               	movf	i1lcd_gotoxy@address,w
  6806  0881  3880               	iorlw	128
  6807  0882  00F6               	movwf	??i1_lcd_gotoxy
  6808  0883  0876               	movf	??i1_lcd_gotoxy,w
  6809  0884  00F2               	movwf	i1lcd_envia_byte@n
  6810  0885  3000               	movlw	0
  6811  0886  120A  158A  2188   	fcall	i1_lcd_envia_byte
  6812  0889  0008               	return
  6813  088A                     __end_ofi1_lcd_gotoxy:	
  6814                           
  6815                           	psect	text37
  6816  0988                     __ptext37:	
  6817 ;; *************** function i1_lcd_envia_byte *****************
  6818 ;; Defined at:
  6819 ;;		line 53 in file "lcd_4bit.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  address         1    wreg     unsigned char 
  6822 ;;  n               1    2[COMMON] unsigned char 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  address         1    4[COMMON] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;		None               void
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0, pclath, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6834 ;;      Params:         1       0       0       0       0
  6835 ;;      Locals:         1       0       0       0       0
  6836 ;;      Temps:          1       0       0       0       0
  6837 ;;      Totals:         3       0       0       0       0
  6838 ;;Total ram usage:        3 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    1
  6841 ;; This function calls:
  6842 ;;		i1_lcd_envia_nibble
  6843 ;; This function is called by:
  6844 ;;		i1_lcd_gotoxy
  6845 ;;		i1_lcd_putc
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function i1_lcd_envia_byte
  6851  0988                     i1_lcd_envia_byte:	
  6852                           
  6853                           ;incstack = 0
  6854 ;; hardware stack exceeded
  6855                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  6856                           ;i1lcd_envia_byte@address stored from wreg
  6857  0988  00F4               	movwf	i1lcd_envia_byte@address
  6858                           
  6859                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  6860  0989  1283               	bcf	3,5	;RP0=0, select bank0
  6861  098A  1303               	bcf	3,6	;RP1=0, select bank0
  6862  098B  1286               	bcf	6,5	;volatile
  6863                           
  6864                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  6865  098C  3063               	movlw	99
  6866  098D  00F3               	movwf	??i1_lcd_envia_byte
  6867  098E                     u364_27:	
  6868  098E  0BF3               	decfsz	??i1_lcd_envia_byte,f
  6869  098F  298E               	goto	u364_27
  6870  0990  2991               	nop2	;nop
  6871                           
  6872                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  6873  0991  0874               	movf	i1lcd_envia_byte@address,w
  6874  0992  1903               	btfsc	3,2
  6875  0993  2998               	goto	i1l183
  6876  0994  1283               	bcf	3,5	;RP0=0, select bank0
  6877  0995  1303               	bcf	3,6	;RP1=0, select bank0
  6878  0996  1686               	bsf	6,5	;volatile
  6879  0997  299B               	goto	i1l184
  6880  0998                     i1l183:	
  6881                           
  6882                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  6883  0998  1283               	bcf	3,5	;RP0=0, select bank0
  6884  0999  1303               	bcf	3,6	;RP1=0, select bank0
  6885  099A  1286               	bcf	6,5	;volatile
  6886  099B                     i1l184:	
  6887                           
  6888                           ;lcd_4bit.c: 61: _delay(1);
  6889  099B  0000               	nop
  6890                           
  6891                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  6892  099C  1283               	bcf	3,5	;RP0=0, select bank0
  6893  099D  1303               	bcf	3,6	;RP1=0, select bank0
  6894  099E  1206               	bcf	6,4	;volatile
  6895                           
  6896                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  6897  099F  0872               	movf	i1lcd_envia_byte@n,w
  6898  09A0  00F3               	movwf	??i1_lcd_envia_byte
  6899  09A1  3004               	movlw	4
  6900  09A2                     u190_25:	
  6901  09A2  1003               	clrc
  6902  09A3  0CF3               	rrf	??i1_lcd_envia_byte,f
  6903  09A4  3EFF               	addlw	-1
  6904  09A5  1D03               	skipz
  6905  09A6  29A2               	goto	u190_25
  6906  09A7  0873               	movf	??i1_lcd_envia_byte,w
  6907  09A8  120A  158A  22AE  120A  158A  	fcall	i1_lcd_envia_nibble
  6908                           
  6909                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  6910  09AD  0872               	movf	i1lcd_envia_byte@n,w
  6911  09AE  390F               	andlw	15
  6912  09AF  120A  158A  22AE   	fcall	i1_lcd_envia_nibble
  6913  09B2  0008               	return
  6914  09B3                     __end_ofi1_lcd_envia_byte:	
  6915                           
  6916                           	psect	text38
  6917  0AAE                     __ptext38:	
  6918 ;; *************** function i1_lcd_envia_nibble *****************
  6919 ;; Defined at:
  6920 ;;		line 39 in file "lcd_4bit.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  n               1    wreg     unsigned char 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  n               1    1[COMMON] unsigned char 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;		None               void
  6927 ;; Registers used:
  6928 ;;		wreg, status,2, status,0
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6934 ;;      Params:         0       0       0       0       0
  6935 ;;      Locals:         1       0       0       0       0
  6936 ;;      Temps:          1       0       0       0       0
  6937 ;;      Totals:         2       0       0       0       0
  6938 ;;Total ram usage:        2 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		i1_lcd_envia_byte
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           
  6948                           ;psect for function i1_lcd_envia_nibble
  6949  0AAE                     i1_lcd_envia_nibble:	
  6950                           
  6951                           ;incstack = 0
  6952 ;; hardware stack exceeded
  6953                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  6954                           ;i1lcd_envia_nibble@n stored from wreg
  6955  0AAE  00F1               	movwf	i1lcd_envia_nibble@n
  6956                           
  6957                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  6958  0AAF  3000               	movlw	0
  6959  0AB0  1871               	btfsc	i1lcd_envia_nibble@n,0
  6960  0AB1  3001               	movlw	1
  6961  0AB2  00F0               	movwf	??i1_lcd_envia_nibble
  6962  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  6963  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  6964  0AB5  0806               	movf	6,w	;volatile
  6965  0AB6  0670               	xorwf	??i1_lcd_envia_nibble,w
  6966  0AB7  39FE               	andlw	-2
  6967  0AB8  0670               	xorwf	??i1_lcd_envia_nibble,w
  6968  0AB9  0086               	movwf	6	;volatile
  6969                           
  6970                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  6971  0ABA  3000               	movlw	0
  6972  0ABB  18F1               	btfsc	i1lcd_envia_nibble@n,1
  6973  0ABC  3001               	movlw	1
  6974  0ABD  00F0               	movwf	??i1_lcd_envia_nibble
  6975  0ABE  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6976  0ABF  0806               	movf	6,w	;volatile
  6977  0AC0  0670               	xorwf	??i1_lcd_envia_nibble,w
  6978  0AC1  39FD               	andlw	-3
  6979  0AC2  0670               	xorwf	??i1_lcd_envia_nibble,w
  6980  0AC3  0086               	movwf	6	;volatile
  6981                           
  6982                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  6983  0AC4  3000               	movlw	0
  6984  0AC5  1971               	btfsc	i1lcd_envia_nibble@n,2
  6985  0AC6  3001               	movlw	1
  6986  0AC7  00F0               	movwf	??i1_lcd_envia_nibble
  6987  0AC8  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6988  0AC9  0DF0               	rlf	??i1_lcd_envia_nibble,f
  6989  0ACA  0806               	movf	6,w	;volatile
  6990  0ACB  0670               	xorwf	??i1_lcd_envia_nibble,w
  6991  0ACC  39FB               	andlw	-5
  6992  0ACD  0670               	xorwf	??i1_lcd_envia_nibble,w
  6993  0ACE  0086               	movwf	6	;volatile
  6994                           
  6995                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  6996  0ACF  3000               	movlw	0
  6997  0AD0  19F1               	btfsc	i1lcd_envia_nibble@n,3
  6998  0AD1  3001               	movlw	1
  6999  0AD2  00F0               	movwf	??i1_lcd_envia_nibble
  7000  0AD3  0DF0               	rlf	??i1_lcd_envia_nibble,f
  7001  0AD4  0DF0               	rlf	??i1_lcd_envia_nibble,f
  7002  0AD5  0DF0               	rlf	??i1_lcd_envia_nibble,f
  7003  0AD6  0806               	movf	6,w	;volatile
  7004  0AD7  0670               	xorwf	??i1_lcd_envia_nibble,w
  7005  0AD8  39F7               	andlw	-9
  7006  0AD9  0670               	xorwf	??i1_lcd_envia_nibble,w
  7007  0ADA  0086               	movwf	6	;volatile
  7008                           
  7009                           ;lcd_4bit.c: 46: _delay(1);
  7010  0ADB  0000               	nop
  7011                           
  7012                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  7013  0ADC  1283               	bcf	3,5	;RP0=0, select bank0
  7014  0ADD  1303               	bcf	3,6	;RP1=0, select bank0
  7015  0ADE  1606               	bsf	6,4	;volatile
  7016                           
  7017                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  7018  0ADF  3003               	movlw	3
  7019  0AE0  00F0               	movwf	??i1_lcd_envia_nibble
  7020  0AE1                     u365_27:	
  7021  0AE1  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  7022  0AE2  2AE1               	goto	u365_27
  7023                           
  7024                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  7025  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
  7026  0AE4  1303               	bcf	3,6	;RP1=0, select bank0
  7027  0AE5  1206               	bcf	6,4	;volatile
  7028  0AE6  0008               	return
  7029  0AE7                     __end_ofi1_lcd_envia_nibble:	
  7030                           
  7031                           	psect	text39
  7032  07D9                     __ptext39:	
  7033 ;; *************** function _Bomba *****************
  7034 ;; Defined at:
  7035 ;;		line 170 in file "main.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;		None
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;		None
  7040 ;; Return value:  Size  Location     Type
  7041 ;;		None               void
  7042 ;; Registers used:
  7043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7049 ;;      Params:         0       0       0       0       0
  7050 ;;      Locals:         0       0       0       0       0
  7051 ;;      Temps:          0       0       0       0       0
  7052 ;;      Totals:         0       0       0       0       0
  7053 ;;Total ram usage:        0 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    3
  7056 ;; This function calls:
  7057 ;;		_Ativar
  7058 ;; This function is called by:
  7059 ;;		_ISR
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           
  7064                           ;psect for function _Bomba
  7065  07D9                     _Bomba:	
  7066                           
  7067                           ;main.c: 172: if (ADCResult < 40) {
  7068                           
  7069                           ;incstack = 0
  7070 ;; hardware stack exceeded
  7071                           ; Regs used in _Bomba: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7072  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  7073  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  7074  07DB  086E               	movf	_ADCResult+1,w
  7075  07DC  3A80               	xorlw	128
  7076  07DD  00FF               	movwf	127
  7077  07DE  3080               	movlw	128
  7078  07DF  027F               	subwf	127,w
  7079  07E0  1D03               	skipz
  7080  07E1  2FE4               	goto	u306_25
  7081  07E2  3028               	movlw	40
  7082  07E3  026D               	subwf	_ADCResult,w
  7083  07E4                     u306_25:	
  7084  07E4  1803               	skipnc
  7085  07E5  2FEC               	goto	i1l2493
  7086                           
  7087                           ;main.c: 173: Ativar('B');
  7088  07E6  3042               	movlw	66
  7089  07E7  120A  158A  2322  120A  118A  	fcall	_Ativar
  7090  07EC                     i1l2493:	
  7091                           
  7092                           ;main.c: 174: }
  7093                           ;main.c: 176: if (ADCResult > 160) {
  7094  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  7095  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  7096  07EE  086E               	movf	_ADCResult+1,w
  7097  07EF  3A80               	xorlw	128
  7098  07F0  00FF               	movwf	127
  7099  07F1  3080               	movlw	128
  7100  07F2  027F               	subwf	127,w
  7101  07F3  1D03               	skipz
  7102  07F4  2FF7               	goto	u307_25
  7103  07F5  30A1               	movlw	161
  7104  07F6  026D               	subwf	_ADCResult,w
  7105  07F7                     u307_25:	
  7106  07F7  1C03               	skipc
  7107  07F8  0008               	return
  7108                           
  7109                           ;main.c: 177: Ativar('b');
  7110  07F9  3062               	movlw	98
  7111  07FA  120A  158A  2322   	fcall	_Ativar
  7112  07FD  0008               	return
  7113  07FE                     __end_of_Bomba:	
  7114                           
  7115                           	psect	text40
  7116  0B22                     __ptext40:	
  7117 ;; *************** function _Ativar *****************
  7118 ;; Defined at:
  7119 ;;		line 149 in file "main.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  comando         1    wreg     unsigned char 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  comando         1    3[COMMON] unsigned char 
  7124 ;; Return value:  Size  Location     Type
  7125 ;;		None               void
  7126 ;; Registers used:
  7127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7133 ;;      Params:         0       0       0       0       0
  7134 ;;      Locals:         1       0       0       0       0
  7135 ;;      Temps:          0       0       0       0       0
  7136 ;;      Totals:         1       0       0       0       0
  7137 ;;Total ram usage:        1 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:    2
  7140 ;; This function calls:
  7141 ;;		i1_USARTWriteString
  7142 ;; This function is called by:
  7143 ;;		_Bomba
  7144 ;;		_ISR
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _Ativar
  7150  0B22                     _Ativar:	
  7151                           
  7152                           ;incstack = 0
  7153 ;; hardware stack exceeded
  7154                           ; Regs used in _Ativar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7155                           ;Ativar@comando stored from wreg
  7156  0B22  00F3               	movwf	Ativar@comando
  7157                           
  7158                           ;main.c: 150: if (comando == 'B') {
  7159  0B23  0873               	movf	Ativar@comando,w
  7160  0B24  3A42               	xorlw	66
  7161  0B25  1D03               	skipz
  7162  0B26  2B33               	goto	i1l2353
  7163                           
  7164                           ;main.c: 151: PORTDbits.RD2 = 0;
  7165  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  7166  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  7167  0B29  1108               	bcf	8,2	;volatile
  7168                           
  7169                           ;main.c: 152: PORTDbits.RD3 = 1;
  7170  0B2A  1588               	bsf	8,3	;volatile
  7171                           
  7172                           ;main.c: 153: USARTWriteString('B');
  7173  0B2B  3042               	movlw	66
  7174  0B2C  00F1               	movwf	i1USARTWriteString@str
  7175  0B2D  3080               	movlw	128
  7176  0B2E  00F2               	movwf	i1USARTWriteString@str+1
  7177  0B2F  120A  158A  2163   	fcall	i1_USARTWriteString
  7178                           
  7179                           ;main.c: 154: } else if (comando == 'b') {
  7180  0B32  0008               	return
  7181  0B33                     i1l2353:	
  7182  0B33  0873               	movf	Ativar@comando,w
  7183  0B34  3A62               	xorlw	98
  7184  0B35  1D03               	skipz
  7185  0B36  2B43               	goto	i1l2359
  7186                           
  7187                           ;main.c: 155: PORTDbits.RD2 = 1;
  7188  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  7189  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  7190  0B39  1508               	bsf	8,2	;volatile
  7191                           
  7192                           ;main.c: 156: PORTDbits.RD3 = 0;
  7193  0B3A  1188               	bcf	8,3	;volatile
  7194                           
  7195                           ;main.c: 157: USARTWriteString('b');
  7196  0B3B  3062               	movlw	98
  7197  0B3C  00F1               	movwf	i1USARTWriteString@str
  7198  0B3D  3080               	movlw	128
  7199  0B3E  00F2               	movwf	i1USARTWriteString@str+1
  7200  0B3F  120A  158A  2163   	fcall	i1_USARTWriteString
  7201                           
  7202                           ;main.c: 158: } else if (comando == 'M') {
  7203  0B42  0008               	return
  7204  0B43                     i1l2359:	
  7205  0B43  0873               	movf	Ativar@comando,w
  7206  0B44  3A4D               	xorlw	77
  7207  0B45  1D03               	skipz
  7208  0B46  2B52               	goto	i1l2365
  7209                           
  7210                           ;main.c: 159: PORTDbits.RD4 = 1;
  7211  0B47  1283               	bcf	3,5	;RP0=0, select bank0
  7212  0B48  1303               	bcf	3,6	;RP1=0, select bank0
  7213  0B49  1608               	bsf	8,4	;volatile
  7214                           
  7215                           ;main.c: 160: USARTWriteString('M');
  7216  0B4A  304D               	movlw	77
  7217  0B4B  00F1               	movwf	i1USARTWriteString@str
  7218  0B4C  3080               	movlw	128
  7219  0B4D  00F2               	movwf	i1USARTWriteString@str+1
  7220  0B4E  120A  158A  2163   	fcall	i1_USARTWriteString
  7221                           
  7222                           ;main.c: 161: } else if (comando == 'm') {
  7223  0B51  0008               	return
  7224  0B52                     i1l2365:	
  7225  0B52  0873               	movf	Ativar@comando,w
  7226  0B53  3A6D               	xorlw	109
  7227  0B54  1D03               	skipz
  7228  0B55  0008               	return
  7229                           
  7230                           ;main.c: 162: PORTDbits.RD4 = 0;
  7231  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  7232  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  7233  0B58  1208               	bcf	8,4	;volatile
  7234                           
  7235                           ;main.c: 163: USARTWriteString('m');
  7236  0B59  306D               	movlw	109
  7237  0B5A  00F1               	movwf	i1USARTWriteString@str
  7238  0B5B  3080               	movlw	128
  7239  0B5C  00F2               	movwf	i1USARTWriteString@str+1
  7240  0B5D  120A  158A  2163   	fcall	i1_USARTWriteString
  7241  0B60  0008               	return
  7242  0B61                     __end_of_Ativar:	
  7243                           
  7244                           	psect	text41
  7245  0963                     __ptext41:	
  7246 ;; *************** function i1_USARTWriteString *****************
  7247 ;; Defined at:
  7248 ;;		line 81 in file "main.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  str             2    1[COMMON] PTR const unsigned char 
  7251 ;;		 -> ftoa@buf(17), STR_8(8), STR_7(16), STR_5(2), 
  7252 ;;		 -> STR_3(7), ROM(8192), STR_1(40), 
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;		None
  7255 ;; Return value:  Size  Location     Type
  7256 ;;		None               void
  7257 ;; Registers used:
  7258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7264 ;;      Params:         2       0       0       0       0
  7265 ;;      Locals:         0       0       0       0       0
  7266 ;;      Temps:          0       0       0       0       0
  7267 ;;      Totals:         2       0       0       0       0
  7268 ;;Total ram usage:        2 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    1
  7271 ;; This function calls:
  7272 ;;		i1_USARTWriteChar
  7273 ;; This function is called by:
  7274 ;;		_USARTReceiveChar
  7275 ;;		_Ativar
  7276 ;;		_sendSerial
  7277 ;;		_ISR
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           
  7282                           ;psect for function i1_USARTWriteString
  7283  0963                     i1_USARTWriteString:	
  7284  0963                     i1l2319:	
  7285                           ;main.c: 83: while (*str != '\0') {
  7286                           
  7287                           ;incstack = 0
  7288 ;; hardware stack exceeded
  7289                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7290                           
  7291  0963  0872               	movf	i1USARTWriteString@str+1,w
  7292  0964  1283               	bcf	3,5	;RP0=0, select bank0
  7293  0965  1303               	bcf	3,6	;RP1=0, select bank0
  7294  0966  00FF               	movwf	127
  7295  0967  0871               	movf	i1USARTWriteString@str,w
  7296  0968  0084               	movwf	4
  7297  0969  120A  118A  2745  120A  158A  	fcall	stringtab
  7298  096E  3800               	iorlw	0
  7299  096F  1903               	btfsc	3,2
  7300  0970  0008               	return
  7301                           
  7302                           ;main.c: 85: USARTWriteChar(*str);
  7303  0971  0872               	movf	i1USARTWriteString@str+1,w
  7304  0972  1283               	bcf	3,5	;RP0=0, select bank0
  7305  0973  1303               	bcf	3,6	;RP1=0, select bank0
  7306  0974  00FF               	movwf	127
  7307  0975  0871               	movf	i1USARTWriteString@str,w
  7308  0976  0084               	movwf	4
  7309  0977  120A  118A  2745  120A  158A  	fcall	stringtab
  7310  097C  160A  118A  27F8  120A  158A  	fcall	i1_USARTWriteChar
  7311                           
  7312                           ;main.c: 86: str++;
  7313  0981  3001               	movlw	1
  7314  0982  07F1               	addwf	i1USARTWriteString@str,f
  7315  0983  1803               	skipnc
  7316  0984  0AF2               	incf	i1USARTWriteString@str+1,f
  7317  0985  3000               	movlw	0
  7318  0986  07F2               	addwf	i1USARTWriteString@str+1,f
  7319  0987  2963               	goto	i1l2319
  7320  0988                     __end_ofi1_USARTWriteString:	
  7321                           
  7322                           	psect	text42
  7323  17F8                     __ptext42:	
  7324 ;; *************** function i1_USARTWriteChar *****************
  7325 ;; Defined at:
  7326 ;;		line 72 in file "main.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  USARTData       1    wreg     unsigned char 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  USARTData       1    0[COMMON] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;		None               void
  7333 ;; Registers used:
  7334 ;;		wreg
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7340 ;;      Params:         0       0       0       0       0
  7341 ;;      Locals:         1       0       0       0       0
  7342 ;;      Temps:          0       0       0       0       0
  7343 ;;      Totals:         1       0       0       0       0
  7344 ;;Total ram usage:        1 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		i1_USARTWriteString
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           
  7354                           ;psect for function i1_USARTWriteChar
  7355  17F8                     i1_USARTWriteChar:	
  7356                           
  7357                           ;incstack = 0
  7358 ;; hardware stack exceeded
  7359                           ; Regs used in i1_USARTWriteChar: [wreg]
  7360                           ;i1USARTWriteChar@USARTData stored from wreg
  7361  17F8  00F0               	movwf	i1USARTWriteChar@USARTData
  7362  17F9                     i1l72:	
  7363                           ;main.c: 73: while (!PIR1bits.TXIF);
  7364                           
  7365  17F9  1283               	bcf	3,5	;RP0=0, select bank0
  7366  17FA  1303               	bcf	3,6	;RP1=0, select bank0
  7367  17FB  1E0C               	btfss	12,4	;volatile
  7368  17FC  2FF9               	goto	i1l72
  7369                           
  7370                           ;main.c: 74: TXREG = USARTData;
  7371  17FD  0870               	movf	i1USARTWriteChar@USARTData,w
  7372  17FE  0099               	movwf	25	;volatile
  7373  17FF  0008               	return
  7374  1800                     __end_ofi1_USARTWriteChar:	
  7375  007E                     btemp	set	126	;btemp
  7376  007E                     wtemp	set	126
  7377  007E                     wtemp0	set	126
  7378  0080                     wtemp1	set	128
  7379  0082                     wtemp2	set	130
  7380  0084                     wtemp3	set	132
  7381  0086                     wtemp4	set	134
  7382  0088                     wtemp5	set	136
  7383  007F                     wtemp6	set	127
  7384  007E                     ttemp	set	126
  7385  007E                     ttemp0	set	126
  7386  0081                     ttemp1	set	129
  7387  0084                     ttemp2	set	132
  7388  0087                     ttemp3	set	135
  7389  007F                     ttemp4	set	127
  7390  007E                     ltemp	set	126
  7391  007E                     ltemp0	set	126
  7392  0082                     ltemp1	set	130
  7393  0086                     ltemp2	set	134
  7394  0080                     ltemp3	set	128


Data Sizes:
    Strings     84
    Constant    48
    Data        18
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      79
    BANK1            80     46      68
    BANK3            96     20      37
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status(BANK0[2]), sendSerial@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_9(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S684$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK3[17]), STR_6(CODE[16]), STR_4(CODE[2]), STR_2(CODE[7]), 
		 -> ProgressBar@aux(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@percentual	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sendSerial@envio	PTR const unsigned char  size(1) Largest target is 40
		 -> sendSerial@origem(BANK1[40]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sendSerial@nivelRecipiente	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    ProgressBar@result	PTR unsigned char  size(1) Largest target is 16
		 -> ProgressBar@aux(BANK0[16]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> ftoa@buf(BANK3[17]), STR_8(CODE[8]), STR_7(CODE[16]), STR_5(CODE[2]), 
		 -> STR_3(CODE[7]), ROM(CODE[8192]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    _sendSerial->___awtoft
    _ftoa->___awtoft
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    ___ftdiv->___awtoft
    _USARTReceiveChar->i1_USARTWriteString
    _ProgressBar->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _Bomba->_Ativar
    _Ativar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sendSerial
    _sendSerial->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    _ISR->_sendSerial

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_lcd_escreve_string
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTWriteString->_USARTWriteChar
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4616
                                             17 BANK3      3     3      0
                            _ADCRead
                   _USARTWriteString
                         _inicialize
                              _reset
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    3993
                                             14 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                   _USARTWriteString
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    1922
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    1661
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1     951
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0     868
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTWriteString                                     2     0      2     537
                                              1 BANK3      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     666
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     666
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0      88
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2      86
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 21    21      0   38783
                                             56 BANK0     21    21      0
                             _Ativar
                              _Bomba
                        _ProgressBar
                   _USARTReceiveChar
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                         _sendSerial
                 i1_USARTWriteString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) _sendSerial                                          52    48      4   14727
                                             50 BANK0      6     2      4
                                              0 BANK1     46    46      0
                           ___awtoft
                               _ftoa
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (9) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                           ___awtoft (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (10) _sprintf                                            26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (11) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (10) ___lltoft                                            6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftsub                                             6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftneg                                             3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftge                                             12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2306
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2623
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     325
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _ProgressBar                                         25    23      2    1093
                                              0 BANK0     25    23      2
               i1_lcd_escreve_string
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Bomba                                                0     0      0     389
                             _Ativar
 ---------------------------------------------------------------------------------
 (9) _Ativar                                               1     1      0     389
                                              3 COMMON     1     1      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteString                                   2     0      2     301
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _USARTWriteString
     _USARTWriteChar
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTWriteString
       _USARTWriteChar
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble
   _reset

 _ISR (ROOT)
   _Ativar
     i1_USARTWriteString
       i1_USARTWriteChar
   _Bomba
     _Ativar
       i1_USARTWriteString
         i1_USARTWriteChar
   _ProgressBar
     i1_lcd_escreve_string
       i1_lcd_putc
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
         i1_lcd_gotoxy
           i1_lcd_envia_byte
             i1_lcd_envia_nibble
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___awtoft (ARG)
       ___ftpack
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     _sprintf (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _sendSerial
     ___awtoft
       ___ftpack
     _ftoa
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       _sprintf (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     i1_USARTWriteString
       i1_USARTWriteChar
   i1_USARTWriteString
     i1_USARTWriteChar
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     14      25       9       38.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      44       7       85.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4D      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C6      12        0.0%
ABS                  0      0      C6       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 03 21:57:13 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l72 082F  
                           l92 08F9                             fsr 0004            ___wmul@multiplicand 0072  
                 ___ftadd@exp1 0026                   ___ftadd@exp2 0025                   ___ftadd@sign 0024  
                          l152 0AAB                            l139 0819                            l183 0A58  
                          l184 0A5B              i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000  
                          _ISR 0272                            fsr0 0004                __end_of_ADCInit 0870  
              __end_of_ADCRead 08FC                            indf 0000                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 0AE7                    lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                 ___ftdiv@sign 003F                           l2061 0BB9                           l2063 0BC4  
                         l2065 0BCF                           l2057 0BA5                           l2411 0DBC  
                         l2069 0BDA                           l2343 0A0F                           l2419 0DD7  
                         l2377 09DE                           l1891 08CD                           l1893 08CE  
                         l2689 0A8B                           STR_1 0785                           STR_2 07D0  
                         STR_3 07D0                           STR_4 07D7                           STR_5 07D7  
                         STR_6 07AD                           STR_7 07AD                           STR_8 07C8  
                         STR_9 07BD                           u3507 0E9C                           u3517 0EAC  
                         u3607 0CD5                           u1775 0A64                           u3527 0ED6  
                         u3617 08F3                           u3537 0BB3                           u3547 0DB0  
                         u3557 0DC8                           u3567 0B71                           u3487 0A9E  
                         u3577 0B86                           u3497 0E89                           u3587 0B9B  
                         u3597 0A4C                           i1l72 17F9                           _OERR 00C1  
                 __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 083A                           _main 0A77  
                         _ftoa 05D3                   ___ftpack@arg 0070                   ___ftpack@exp 0073  
                         btemp 007E                  __CFG_BOREN$ON 0000                           ltemp 007E  
                         start 0012                           ttemp 007E                           wtemp 007E  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                          ??_ISR 0058  
             __end_of_LCDClear 0BA1                   ___fttol@exp1 003D               __end_of_INFERIOR 0783  
                 ___fttol@lval 0039     __end_of_lcd_escreve_string 0A0F                          ?_main 0070  
                        ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A                __end_of___ftadd 0500  
                __CFG_WDTE$OFF 0000      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 0745  
              __end_of___ftneg 080D                __end_of___lldiv 0D96                __end_of___ftmul 05D3  
              __end_of___llmod 0C82                __end_of___ftsub 08C1                __end_of___fttol 0F6F  
                        i1l121 0F9A                          i1l135 03EC                          i1l183 0998  
                        i1l263 0103                          i1l184 099B                          i1l530 0E32  
                        i1l266 0121                          i1l536 0E4B                          i1l369 094A  
                        i1l559 04A1                          _RCREG 001A                          _SPBRG 0099  
          i1lcd_envia_nibble@n 0071                          _TRISA 0085                          _TXREG 0019  
                        _Bomba 07D9                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
         i1_lcd_escreve_string 091D                  ___awtoft@sign 007D                __end_of_dpowers 077D  
              __end_of_isdigit 082C                          _reset 0815                  ___ftpack@sign 0074  
             __end_of_SUPERIOR 0785                          ftoa@f 0044                          ftoa@l 004D  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                ?_USARTWriteChar 0070  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __end_of_sprintf 0272               i1_lcd_envia_byte 0988  
              __initialization 0015                   i1_lcd_gotoxy 0870                   __end_of_main 0AAE  
                 __end_of_ftoa 068D                    i1lcd_putc@c 007B                      ??_ADCInit 0190  
                    ??_ADCRead 0192      __size_of_lcd_envia_nibble 0059                         ??_main 01A1  
                       ??_ftoa 0048                  ___fttol@sign1 0038             i1_USARTWriteString 0963  
             ProgressBar@F1340 00CE                         ?_Bomba 0070                         ISR@pre 0063  
      USARTWriteChar@USARTData 0190          ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070  
                    ADCRead@ch 0190               ___llmod@dividend 0024                         _ADRESH 001E  
                       _ADRESL 009E                         ?_reset 0070               __end_of___awtoft 091D  
             __end_of___ftpack 0E64            ?i1_USARTWriteString 0071               __end_of___lltoft 09DE  
                       i1l2001 0D58                         i1l2013 0D8D                         i1l2023 0C3E  
                       i1l2111 010A                         i1l2103 00C2                         i1l2201 0518  
                       i1l2009 0D80                         i1l2025 0C4E                         i1l2033 0C79  
                       i1l2105 00FE                         i1l2131 015B                         i1l2107 0105  
                       i1l2045 087A                         i1l2029 0C6C                         i1l2117 0133  
                       i1l2047 087B                         i1l2231 0595                         i1l2223 057D  
                       i1l2207 052E                         i1l2151 01EA                         i1l2143 01AF  
                       i1l2127 0155                         i1l2161 0204                         i1l2153 01EE  
                       i1l2331 0B0D                         i1l2323 0AE9                         i1l2235 05A5  
                       i1l2219 056D                         i1l2307 09B7                         i1l2147 01C9  
                       i1l2139 0197                         i1l2171 026D                         i1l2309 09C9  
                       i1l2085 0072                         i1l2093 00B0                         i1l2319 0963  
                       i1l2327 0AFB                         i1l2335 0B16                         i1l2183 0D29  
                       i1l2167 025E                         i1l2079 005D                         i1l2353 0B33  
                       i1l2329 0B04                         i1l2265 0EFB                         i1l2169 003D  
                       i1l2507 0C01                         i1l2451 0906                         i1l2179 0D02  
                       i1l2291 0F4A                         i1l2283 0F2D                         i1l2365 0B52  
                       i1l2461 091D                         i1l2509 0C17                         i1l2621 071F  
                       i1l2613 0700                         i1l2293 0F55                         i1l2285 0F3D  
                       i1l2525 0FBF                         i1l2359 0B43                         i1l2295 0F58  
                       i1l1911 0942                         i1l2535 0FED                         i1l1905 082A  
                       i1l2529 0FCF                         i1l2299 0F66                         i1l2493 07EC  
                       i1l2477 08A2                         i1l2469 0893                         i1l1861 0E1C  
                       i1l1853 0E04                         u210_25 0468                         i1l1933 0429  
                       i1l2389 060C                         i1l1951 0452                         i1l2639 02A2  
                       i1l1857 0E0B                         i1l2593 06A5                         i1l1961 0478  
                       i1l1929 0422                         i1l1867 0E37                         i1l1859 0E17  
                       i1l1971 049D                         i1l1963 047C                         i1l1939 0438  
                       i1l1869 0E41                         i1l1957 0467                         i1l2677 03D7  
                       i1l2599 06BB                         i1l1975 04B3                         i1l1959 0473  
                       i1l2679 03DA                         i1l1969 0491                         i1l1979 04C5  
                       i1l1989 04E8                         i1l1999 0D48                         u213_25 047D  
                       u230_25 0C42                         u207_25 0453                         u223_25 0D4C  
                       u311_25 0FBB                         u320_25 0712                         u216_25 0492  
                       u232_25 0C5C                         u321_25 0720                         u225_25 0D5A  
                       u233_25 0C6D                         u306_25 07E4                         u226_25 0D6F  
                       u250_25 01A6                         u307_25 07F7                         u227_25 0D81  
                       u251_25 01C0                         u308_20 0BF4                         u180_25 0E10  
                       u252_25 01DA                         u324_25 027F                         u261_21 0D1C  
                       u261_22 0D1D                         u261_23 0D22                         u261_24 0D23  
                       u317_25 06CD                         u190_25 09A2                         u182_25 0E2B  
                       u318_25 06DF                         u270_25 0586                         u319_25 0701  
                       u255_25 020F                         u247_25 015E                         u184_25 0E3A  
                       u256_25 026A                         u248_25 018D                         u265_25 053A  
                       u274_25 05A6                         u266_25 054C                         u282_25 0F2E  
                       u362_27 0C2C                         u259_21 0CF5                         u259_22 0CF6  
                       u259_23 0CFB                         u259_24 0CFC                         u187_25 0E52  
                       u275_25 05AE                         u195_25 094B                         u363_27 0AF5  
                       u196_25 0952                         u364_27 098E                         u269_25 057E  
                       u285_25 0F4C                         u365_27 0AE1                         u279_25 0F02  
                       u288_25 09BC      i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066  
                       _Ativar 0B22                  ISR@percentual 006C               __end_of_lcd_putc 0BE8  
                       ___ftge 0CDB                         ___wmul 0940                      ??___ftadd 0020  
                    ??___ftdiv 0036                      ??___ftneg 0073                      ??___lldiv 0078  
                    ??___ftmul 0026                      ??___llmod 0028                      ??___ftsub 007E  
                    ??___fttol 0034           ??i1_USARTWriteString 0073       __end_of_USARTWriteString 0A42  
             ??_lcd_envia_byte 0193                         ftoa@cp 0051          ___ftmul@f3_as_product 002B  
                    ??_isdigit 0070                         saved_w 007E          i1lcd_escreve_string@y 007C  
                    ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 0AE7              ?_USARTReceiveChar 0070  
                    ?_LCDClear 0070        __end_of__initialization 0032                  ??_ProgressBar 0022  
           ??_USARTReceiveChar 0073                     ___ftadd@f1 0078                     ___ftadd@f2 007B  
                   ___ftge@ff1 0070                     ___ftge@ff2 0073                     ___ftdiv@f1 0033  
                   ___ftdiv@f2 0030                     ___ftdiv@f3 003B                     ___ftneg@f1 0070  
                   ___awtoft@c 0078                     ___ftmul@f1 0020                     ___ftmul@f2 0023  
                __end_of_Bomba 07FE                     ___ftsub@f1 002A                     ___ftsub@f2 0027  
                   ___fttol@f1 0030                 __pcstackCOMMON 0070                   __pidataBANK1 084B  
          __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078                  __end_of_reset 081E  
             i1_USARTWriteChar 17F8                  _init_lcd_4bit 0D96                    ISR@recebido 0066  
       ??i1_lcd_escreve_string 007E                        ??_Bomba 0074              lcd_gotoxy@address 0198  
                      ??_reset 0190                   sprintf@width 003F                     __pbssBANK0 006D  
                   __pbssBANK1 00E0                     __pbssBANK3 01A4               sendSerial@origem 00A0  
             sendSerial@preint 0052                     ??_LCDClear 0195               sendSerial@status 00C8  
                    ISR@input2 0067                      ISR@preint 006A                        ?_Ativar 0070  
                    ISR@status 005E      USARTReceiveChar@USARTData 0074                     __pmaintext 0A77  
          __end_of_ProgressBar 0C34                        ?___ftge 0070                        ?___wmul 0070  
                   __pintentry 0004                        _ADCInit 085D                        _ADCRead 08DD  
                    ?___awtoft 0078                      ?___ftpack 0070               _lcd_envia_nibble 0C82  
                    ?___lltoft 0078                    sendSerial@x 00CC                 ?_init_lcd_4bit 0070  
                 _flag_Leitura 00E2                     _lcd_gotoxy 08C1       __end_ofi1_lcd_envia_byte 09B3  
             ??_USARTWriteChar 0190             _lcd_escreve_string 09DE                      ?_lcd_putc 0070  
            ProgressBar@preint 0020              ProgressBar@result 0038                     __stringtab 0745  
          ?_lcd_escreve_string 019C                      _ADCResult 006D                __size_of_Ativar 003F  
                   _inicialize 0E64                __size_of___ftge 005D          i1USARTWriteString@str 0071  
                      ___ftadd 03F9                        ___ftdiv 068D                        ___ftneg 0805  
                      ___lldiv 0D38                __size_of___wmul 0023                        ___ftmul 0500  
                      ___llmod 0C34                        ___ftsub 08A5                        ___fttol 0EE1  
                   ??___awtoft 007B                     ??___ftpack 0075                        _flag_an 00DE  
                   ??___lltoft 007C                        __ptext1 0815                        __ptext2 0E64  
                      __ptext3 09DE                        __ptext4 0BA1                        __ptext5 08C1  
                      __ptext6 0D96                        __ptext7 0A0F                        __ptext8 082C  
                      __ptext9 0B61           ??_lcd_escreve_string 019E                   __size_of_ISR 0187  
                      _dpowers 0755                        _isdigit 081E                lcd_envia_byte@n 0192  
                 ??i1_lcd_putc 0079                        _sprintf 0036                        clrloop0 080E  
                   ??_lcd_putc 0199           end_of_initialization 0032                        ftoa@buf 01A4  
                      ftoa@rem 0049        i1lcd_envia_byte@address 0074                     _sendSerial 0F6F  
                  _ProgressBar 0BE8                ___lldiv@divisor 0070                ___lldiv@counter 007D  
                    _RCSTAbits 0018             __end_ofi1_lcd_putc 0B22                ??_init_lcd_4bit 0195  
            ?_USARTWriteString 0191                      _PORTAbits 0005                      _PORTBbits 0006  
                    _PORTCbits 0007                      _PORTDbits 0008             ??_USARTWriteString 0193  
                    _TRISBbits 0086                      _TRISCbits 0087                      _TRISDbits 0088  
               _Buffer_Leitura 00E0                    ?_lcd_gotoxy 0195                _LCD_INIT_STRING 077D  
                  ___ftdiv@exp 003E       __end_ofi1_USARTWriteChar 1800                      _TXSTAbits 0098  
            __size_of_LCDClear 0040                    ?_inicialize 0070                    ___ftmul@exp 002A  
               __end_of_Ativar 0B61             i1_lcd_envia_nibble 0AAE      __size_of_USARTReceiveChar 001B  
               __end_of___ftge 0D38    __size_ofi1_USARTWriteString 0025                 __end_of___wmul 0963  
          ?i1_lcd_envia_nibble 0070            start_initialization 0015                    __end_of_ISR 03F9  
                   ftoa@status 0047                  i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075  
                  ?_sendSerial 0052           ??i1_lcd_envia_nibble 0070       __end_of_lcd_envia_nibble 0CDB  
        lcd_envia_byte@address 0194                ___llmod@divisor 0020                ___llmod@counter 0029  
                     ??_Ativar 0073                       ??___ftge 0076            __size_of_lcd_gotoxy 001C  
                     ??___wmul 0074                     init_fetch0 083A                    __pdataBANK1 00CE  
                     ?_ADCInit 0070                       ?_ADCRead 0190        __end_of_LCD_INIT_STRING 0781  
            __size_of___awtoft 0021              __size_of___ftpack 0068              __size_of___lltoft 002B  
                    ___latbits 0002                  __pcstackBANK0 0020                  __pcstackBANK1 00A0  
                __pcstackBANK3 0190            __end_of__stringdata 07D9            __size_of_inicialize 007D  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                sendSerial@envio 00CA  
                     ISR@input 0060                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___ftadd 0078                       ?___ftdiv 0030                       ?___ftneg 0070  
                     ?___lldiv 0070                       ?___ftmul 0020                       ?___llmod 0020  
                     ?___ftsub 0027                       ?___fttol 0030            __size_of_sendSerial 0091  
                    __pstrings 0745                       ?_isdigit 0070                 __size_of_Bomba 0025  
               init_lcd_4bit@i 0197                       ?_sprintf 002A                 __size_of_reset 0009  
                     _LCDClear 0B61                       _INFERIOR 0781              interrupt_function 0004  
                 ?_ProgressBar 0020                 ___wmul@product 0074                      clear_ram0 080D  
                     _PIE1bits 008C              lcd_envia_nibble@n 0191                 ??i1_lcd_gotoxy 0076  
                     _PIR1bits 000C               _USARTReceiveChar 088A                       _SUPERIOR 0783  
    sendSerial@nivelRecipiente 00CB               __size_of_ADCInit 0013               __size_of_ADCRead 001F  
                   _ADCON0bits 001F                    __stringbase 0754                     _ADCON1bits 009F  
                  __stringdata 0785              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 019B                   ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C  
    __size_of_USARTWriteString 0033              ?i1_USARTWriteChar 0070        __size_of_USARTWriteChar 000E  
               ProgressBar@aux 0026                   ??_inicialize 019E             ??i1_USARTWriteChar 0070  
           __end_of_lcd_gotoxy 08DD               __size_of___ftadd 0107               __size_of___ftdiv 00B8  
             __size_of___ftneg 0008               __size_of___lldiv 005E               __size_of___ftmul 00D3  
             __size_of___llmod 004E               __size_of___ftsub 001C               __size_of___fttol 008E  
                     ___awtoft 08FC                       ___ftpack 0DFC             __end_of__stringtab 0755  
                     ___lltoft 09B3                    _isdigit$892 0070          __end_of_init_lcd_4bit 0DFC  
             __size_of_isdigit 000E                       __ptext10 0A42                       __ptext11 0C82  
                     __ptext20 0C34                       __ptext12 085D                       __ptext21 0D38  
                     __ptext13 08DD                       __ptext30 068D                       __ptext22 09B3  
                     __ptext14 0272                       __ptext31 0DFC                       __ptext23 0EE1  
                     __ptext15 0F6F                       __ptext40 0B22                       __ptext32 088A  
                     __ptext24 08A5                       __ptext16 05D3                       __ptext41 0963  
                     __ptext33 0BE8                       __ptext25 03F9                       __ptext17 0036  
                     __ptext42 17F8                       __ptext34 091D                       __ptext26 0805  
                     __ptext18 081E                       __ptext35 0AE7                       __ptext27 0500  
                     __ptext19 0940                       __ptext36 0870                       __ptext28 0CDB  
                     __ptext37 0988                       __ptext29 08FC                       __ptext38 0AAE  
                     __ptext39 07D9                 _lcd_envia_byte 0A42             __end_of_inicialize 0EE1  
                     _lcd_putc 0BA1               __size_of_sprintf 023C                   ??_sendSerial 0056  
                __size_of_main 0037                  __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070  
           ??_lcd_envia_nibble 0190                  Ativar@comando 0073     __end_ofi1_USARTWriteString 0988  
           __end_of_sendSerial 1000                     _INTCONbits 000B         __end_of_lcd_envia_byte 0A77  
         __end_ofi1_lcd_gotoxy 088A                       init_ram0 083E                       isdigit@c 0071  
                     intlevel1 0000                      sprintf@ap 0039                      sprintf@sp 003E  
  __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074                      stringcode 074F  
         __size_of_ProgressBar 004C   __end_ofi1_lcd_escreve_string 0940      __size_ofi1_lcd_envia_byte 002B  
          USARTWriteString@str 0191                   ProgressBar@i 0036                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079           sendSerial@recipiente 0054  
              ?_lcd_envia_byte 0192                       stringdir 074F                       stringtab 0745  
     __end_of_USARTReceiveChar 08A5               _USARTWriteString 0A0F                 _USARTWriteChar 082C  
