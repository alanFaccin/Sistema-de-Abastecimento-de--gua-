

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 10 20:42:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184                           
   185                           	psect	idataBANK0
   186  08A1                     __pidataBANK0:	
   187                           
   188                           ;initializer for _flag_an
   189  08A1  34FF               	retlw	255
   190  08A2  34FF               	retlw	255
   191                           
   192                           	psect	idataBANK1
   193  1572                     __pidataBANK1:	
   194                           
   195                           ;initializer for _flag_ch
   196  1572  34FF               	retlw	255
   197  1573  34FF               	retlw	255
   198                           
   199                           	psect	idataBANK3
   200  15B3                     __pidataBANK3:	
   201                           
   202                           ;initializer for ISR@F1361
   203  15B3  3420               	retlw	32
   204  15B4  3420               	retlw	32
   205  15B5  3420               	retlw	32
   206  15B6  3420               	retlw	32
   207  15B7  3420               	retlw	32
   208  15B8  3420               	retlw	32
   209  15B9  3420               	retlw	32
   210  15BA  3420               	retlw	32
   211  15BB  3420               	retlw	32
   212  15BC  3420               	retlw	32
   213  15BD  3420               	retlw	32
   214  15BE  3420               	retlw	32
   215  15BF  3420               	retlw	32
   216  15C0  3420               	retlw	32
   217  15C1  3420               	retlw	32
   218  15C2  3420               	retlw	32
   219                           
   220                           	psect	strings
   221  0800                     __pstrings:	
   222  0800                     stringtab:	
   223  0800                     __stringtab:	
   224                           
   225                           ;	String table - string pointers are 1 byte each
   226  0800  1BFF               	btfsc	btemp+1,7
   227  0801  280A               	ljmp	stringcode
   228  0802  1383               	bcf	3,7
   229  0803  187F               	btfsc	btemp+1,0
   230  0804  1783               	bsf	3,7
   231  0805  0800               	movf	0,w
   232  0806  0A84               	incf	4,f
   233  0807  1903               	skipnz
   234  0808  0AFF               	incf	btemp+1,f
   235  0809  0008               	return
   236  080A                     stringcode:	
   237  080A                     stringdir:	
   238  080A  3008               	movlw	high stringdir
   239  080B  008A               	movwf	10
   240  080C  0804               	movf	4,w
   241  080D  0A84               	incf	4,f
   242  080E  0782               	addwf	2,f
   243  080F                     __stringbase:	
   244  080F  3400               	retlw	0
   245  0810                     __end_of__stringtab:	
   246  0810                     _dpowers:	
   247  0810  3401               	retlw	1
   248  0811  3400               	retlw	0
   249  0812  3400               	retlw	0
   250  0813  3400               	retlw	0
   251  0814  340A               	retlw	10
   252  0815  3400               	retlw	0
   253  0816  3400               	retlw	0
   254  0817  3400               	retlw	0
   255  0818  3464               	retlw	100
   256  0819  3400               	retlw	0
   257  081A  3400               	retlw	0
   258  081B  3400               	retlw	0
   259  081C  34E8               	retlw	232
   260  081D  3403               	retlw	3
   261  081E  3400               	retlw	0
   262  081F  3400               	retlw	0
   263  0820  3410               	retlw	16
   264  0821  3427               	retlw	39
   265  0822  3400               	retlw	0
   266  0823  3400               	retlw	0
   267  0824  34A0               	retlw	160
   268  0825  3486               	retlw	134
   269  0826  3401               	retlw	1
   270  0827  3400               	retlw	0
   271  0828  3440               	retlw	64
   272  0829  3442               	retlw	66
   273  082A  340F               	retlw	15
   274  082B  3400               	retlw	0
   275  082C  3480               	retlw	128
   276  082D  3496               	retlw	150
   277  082E  3498               	retlw	152
   278  082F  3400               	retlw	0
   279  0830  3400               	retlw	0
   280  0831  34E1               	retlw	225
   281  0832  34F5               	retlw	245
   282  0833  3405               	retlw	5
   283  0834  3400               	retlw	0
   284  0835  34CA               	retlw	202
   285  0836  349A               	retlw	154
   286  0837  343B               	retlw	59
   287  0838                     __end_of_dpowers:	
   288  0838                     _LCD_INIT_STRING:	
   289  0838  341C               	retlw	28
   290  0839  340C               	retlw	12
   291  083A  3401               	retlw	1
   292  083B  3406               	retlw	6
   293  083C                     __end_of_LCD_INIT_STRING:	
   294  083C                     _DESLIGAR:	
   295  083C  346C               	retlw	108
   296  083D                     __end_of_DESLIGAR:	
   297  083D                     _DESLIGAR_BOMBA:	
   298  083D  3462               	retlw	98
   299  083E                     __end_of_DESLIGAR_BOMBA:	
   300  083E                     _DESLIGAR_MOTOR:	
   301  083E  346D               	retlw	109
   302  083F                     __end_of_DESLIGAR_MOTOR:	
   303  083F                     _LIGAR:	
   304  083F  344C               	retlw	76
   305  0840                     __end_of_LIGAR:	
   306  0840                     _LIGAR_BOMBA:	
   307  0840  3442               	retlw	66
   308  0841                     __end_of_LIGAR_BOMBA:	
   309  0841                     _LIGAR_MOTOR:	
   310  0841  344D               	retlw	77
   311  0842                     __end_of_LIGAR_MOTOR:	
   312  001F                     _ADCON0bits	set	31
   313  001E                     _ADRESH	set	30
   314  000B                     _INTCONbits	set	11
   315  000C                     _PIR1bits	set	12
   316  0005                     _PORTAbits	set	5
   317  0006                     _PORTBbits	set	6
   318  0007                     _PORTCbits	set	7
   319  0008                     _PORTDbits	set	8
   320  001A                     _RCREG	set	26
   321  0018                     _RCSTAbits	set	24
   322  0019                     _TXREG	set	25
   323  00C1                     _OERR	set	193
   324  009F                     _ADCON1bits	set	159
   325  009E                     _ADRESL	set	158
   326  008C                     _PIE1bits	set	140
   327  0099                     _SPBRG	set	153
   328  0085                     _TRISA	set	133
   329  0086                     _TRISBbits	set	134
   330  0087                     _TRISCbits	set	135
   331  0088                     _TRISDbits	set	136
   332  0098                     _TXSTAbits	set	152
   333  0842                     __stringdata:	
   334  0842                     STR_1:	
   335  0842  340A               	retlw	10
   336  0843  340D               	retlw	13
   337  0844  3420               	retlw	32	;' '
   338  0845  342D               	retlw	45	;'-'
   339  0846  342D               	retlw	45	;'-'
   340  0847  342D               	retlw	45	;'-'
   341  0848  342D               	retlw	45	;'-'
   342  0849  342D               	retlw	45	;'-'
   343  084A  342D               	retlw	45	;'-'
   344  084B  342D               	retlw	45	;'-'
   345  084C  3420               	retlw	32	;' '
   346  084D  3445               	retlw	69	;'E'
   347  084E  3453               	retlw	83	;'S'
   348  084F  3454               	retlw	84	;'T'
   349  0850  344F               	retlw	79	;'O'
   350  0851  3455               	retlw	85	;'U'
   351  0852  3452               	retlw	82	;'R'
   352  0853  344F               	retlw	79	;'O'
   353  0854  3420               	retlw	32	;' '
   354  0855  3444               	retlw	68	;'D'
   355  0856  3445               	retlw	69	;'E'
   356  0857  3420               	retlw	32	;' '
   357  0858  3450               	retlw	80	;'P'
   358  0859  3449               	retlw	73	;'I'
   359  085A  344C               	retlw	76	;'L'
   360  085B  3448               	retlw	72	;'H'
   361  085C  3441               	retlw	65	;'A'
   362  085D  3420               	retlw	32	;' '
   363  085E  342D               	retlw	45	;'-'
   364  085F  342D               	retlw	45	;'-'
   365  0860  342D               	retlw	45	;'-'
   366  0861  342D               	retlw	45	;'-'
   367  0862  342D               	retlw	45	;'-'
   368  0863  342D               	retlw	45	;'-'
   369  0864  342D               	retlw	45	;'-'
   370  0865  3420               	retlw	32	;' '
   371  0866  340A               	retlw	10
   372  0867  340D               	retlw	13
   373  0868  3420               	retlw	32	;' '
   374  0869  3400               	retlw	0
   375  086A                     STR_12:	
   376  086A  340C               	retlw	12
   377  086B  344C               	retlw	76	;'L'
   378  086C  346F               	retlw	111	;'o'
   379  086D  3461               	retlw	97	;'a'
   380  086E  3464               	retlw	100	;'d'
   381  086F  3469               	retlw	105	;'i'
   382  0870  346E               	retlw	110	;'n'
   383  0871  3467               	retlw	103	;'g'
   384  0872  3420               	retlw	32	;' '
   385  0873  3450               	retlw	80	;'P'
   386  0874  3449               	retlw	73	;'I'
   387  0875  3443               	retlw	67	;'C'
   388  0876  342E               	retlw	46	;'.'
   389  0877  342E               	retlw	46	;'.'
   390  0878  342E               	retlw	46	;'.'
   391  0879  3400               	retlw	0
   392  087A                     STR_15:	
   393  087A  3425               	retlw	37	;'%'
   394  087B  346C               	retlw	108	;'l'
   395  087C  3475               	retlw	117	;'u'
   396  087D  342E               	retlw	46	;'.'
   397  087E  3425               	retlw	37	;'%'
   398  087F  3436               	retlw	54	;'6'
   399  0880  342E               	retlw	46	;'.'
   400  0881  3436               	retlw	54	;'6'
   401  0882  346C               	retlw	108	;'l'
   402  0883  3475               	retlw	117	;'u'
   403  0884  3400               	retlw	0
   404  0885                     STR_4:	
   405  0885  3420               	retlw	32	;' '
   406  0886  3420               	retlw	32	;' '
   407  0887  3420               	retlw	32	;' '
   408  0888  3400               	retlw	0
   409  0889                     STR_2:	
   410  0889  344E               	retlw	78	;'N'
   411  088A  3431               	retlw	49	;'1'
   412  088B  343A               	retlw	58	;':'
   413  088C  3400               	retlw	0
   414  088D                     STR_6:	
   415  088D  344E               	retlw	78	;'N'
   416  088E  3432               	retlw	50	;'2'
   417  088F  343A               	retlw	58	;':'
   418  0890  3400               	retlw	0
   419  0891                     STR_7:	
   420  0891  340A               	retlw	10
   421  0892  3449               	retlw	73	;'I'
   422  0893  3400               	retlw	0
   423  0894                     STR_3:	
   424  0894  340A               	retlw	10
   425  0895  3453               	retlw	83	;'S'
   426  0896  3400               	retlw	0
   427  0897                     STR_5:	
   428  0897  3425               	retlw	37	;'%'
   429  0898  3400               	retlw	0
   430  0899                     STR_10:	
   431  0899  3442               	retlw	66	;'B'
   432  089A  3400               	retlw	0
   433  089B                     STR_13:	
   434  089B  344C               	retlw	76	;'L'
   435  089C  3400               	retlw	0
   436  089D                     STR_11:	
   437  089D  3462               	retlw	98	;'b'
   438  089E  3400               	retlw	0
   439  089F                     STR_14:	
   440  089F  346C               	retlw	108	;'l'
   441  08A0  3400               	retlw	0
   442  08A1                     __end_of__stringdata:	
   443                           
   444                           ; #config settings
   445  0000                     
   446                           	psect	cinit
   447  0015                     start_initialization:	
   448  0015                     __initialization:	
   449                           
   450                           ; Clear objects allocated to BANK0
   451  0015  1383               	bcf	3,7	;select IRP bank0
   452  0016  305A               	movlw	low __pbssBANK0
   453  0017  0084               	movwf	4
   454  0018  306B               	movlw	low (__pbssBANK0+17)
   455  0019  160A  118A  2584  120A  118A  	fcall	clear_ram0
   456                           
   457                           ; Clear objects allocated to BANK1
   458  001E  30C5               	movlw	low __pbssBANK1
   459  001F  0084               	movwf	4
   460  0020  30DA               	movlw	low (__pbssBANK1+21)
   461  0021  160A  118A  2584  120A  118A  	fcall	clear_ram0
   462                           
   463                           ; Initialize objects allocated to BANK3
   464  0026  1783               	bsf	3,7	;select IRP bank2
   465  0027  30BE               	movlw	low (__pdataBANK3+16)
   466  0028  00FD               	movwf	btemp+-1
   467  0029  3015               	movlw	high __pidataBANK3
   468  002A  00FE               	movwf	btemp
   469  002B  30B3               	movlw	low __pidataBANK3
   470  002C  00FF               	movwf	btemp+1
   471  002D  30AE               	movlw	low __pdataBANK3
   472  002E  0084               	movwf	4
   473  002F  160A  118A  25C7  120A  118A  	fcall	init_ram0
   474                           
   475                           ; Initialize objects allocated to BANK1
   476  0034  1683               	bsf	3,5	;RP0=1, select bank1
   477  0035  1303               	bcf	3,6	;RP1=0, select bank1
   478  0036  160A  118A  2572  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   479  003B  00DA               	movwf	__pdataBANK1& (0+127)
   480  003C  160A  118A  2573  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   481  0041  00DB               	movwf	(__pdataBANK1+1)& (0+127)
   482                           
   483                           ; Initialize objects allocated to BANK0
   484  0042  1283               	bcf	3,5	;RP0=0, select bank0
   485  0043  1303               	bcf	3,6	;RP1=0, select bank0
   486  0044  120A  158A  20A1  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   487  0049  00EB               	movwf	__pdataBANK0& (0+127)
   488  004A  120A  158A  20A2   	fcall	__pidataBANK0+1	;fetch initializer
   489  004D  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   490  004E                     end_of_initialization:	
   491                           ;End of C runtime variable initialization code
   492                           
   493  004E                     __end_of__initialization:	
   494  004E  0183               	clrf	3
   495  004F  160A  118A  2D8C   	ljmp	_main	;jump to C main() function
   496                           
   497                           	psect	bssBANK0
   498  005A                     __pbssBANK0:	
   499  005A                     _Display:	
   500  005A                     	ds	7
   501  0061                     _countInferior:	
   502  0061                     	ds	2
   503  0063                     _countSuperior:	
   504  0063                     	ds	2
   505  0065                     _nivelInferior:	
   506  0065                     	ds	2
   507  0067                     _nivelSuperior:	
   508  0067                     	ds	2
   509  0069                     _recipiente:	
   510  0069                     	ds	2
   511                           
   512                           	psect	dataBANK0
   513  006B                     __pdataBANK0:	
   514  006B                     _flag_an:	
   515  006B                     	ds	2
   516                           
   517                           	psect	bssBANK1
   518  00C5                     __pbssBANK1:	
   519  00C5                     _ADCResult:	
   520  00C5                     	ds	2
   521  00C7                     _flag_Start:	
   522  00C7                     	ds	2
   523  00C9                     ftoa@buf:	
   524  00C9                     	ds	17
   525                           
   526                           	psect	dataBANK1
   527  00DA                     __pdataBANK1:	
   528  00DA                     _flag_ch:	
   529  00DA                     	ds	2
   530                           
   531                           	psect	dataBANK3
   532  01AE                     __pdataBANK3:	
   533  01AE                     ISR@F1361:	
   534  01AE                     	ds	16
   535                           
   536                           	psect	clrtext
   537  1584                     clear_ram0:	
   538                           ;	Called with FSR containing the base address, and
   539                           ;	W with the last address+1
   540                           
   541  1584  0064               	clrwdt	;clear the watchdog before getting into this loop
   542  1585                     clrloop0:	
   543  1585  0180               	clrf	0	;clear RAM location pointed to by FSR
   544  1586  0A84               	incf	4,f	;increment pointer
   545  1587  0604               	xorwf	4,w	;XOR with final address
   546  1588  1903               	btfsc	3,2	;have we reached the end yet?
   547  1589  3400               	retlw	0	;all done for this memory range, return
   548  158A  0604               	xorwf	4,w	;XOR again to restore value
   549  158B  2D85               	goto	clrloop0	;do the next byte
   550                           
   551                           	psect	inittext
   552  15C3                     init_fetch0:	
   553                           ;	Called with low address in FSR and high address in W
   554                           
   555  15C3  087E               	movf	126,w
   556  15C4  008A               	movwf	10
   557  15C5  087F               	movf	127,w
   558  15C6  0082               	movwf	2
   559  15C7                     init_ram0:	
   560                           ;Called with:
   561                           ;	high address of idata address in btemp 
   562                           ;	low address of idata address in btemp+1 
   563                           ;	low address of data in FSR
   564                           ;	high address + 1 of data in btemp-1
   565                           
   566  15C7  25C3  160A  118A   	fcall	init_fetch0
   567  15CA  0080               	movwf	0
   568  15CB  0A84               	incf	4,f
   569  15CC  0804               	movf	4,w
   570  15CD  067D               	xorwf	125,w
   571  15CE  1903               	btfsc	3,2
   572  15CF  3400               	retlw	0
   573  15D0  0AFF               	incf	127,f
   574  15D1  1903               	btfsc	3,2
   575  15D2  0AFE               	incf	126,f
   576  15D3  2DC7               	goto	init_ram0
   577                           
   578                           	psect	cstackBANK3
   579  0190                     __pcstackBANK3:	
   580  0190                     ??_lcd_envia_nibble:	
   581  0190                     ??_USARTWriteChar:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0190                     ??_ADCInit:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0190                     ?_ADCRead:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0190                     ?___aldiv:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0190                     USARTWriteChar@USARTData:	
   594                           ; 4 bytes @ 0x0
   595                           
   596  0190                     ADCRead@ch:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0190                     ___aldiv@divisor:	
   600                           ; 2 bytes @ 0x0
   601                           
   602                           
   603                           ; 4 bytes @ 0x0
   604  0190                     	ds	1
   605  0191                     ?_USARTWriteString:	
   606  0191                     lcd_envia_nibble@n:	
   607                           ; 0 bytes @ 0x1
   608                           
   609  0191                     USARTWriteString@str:	
   610                           ; 1 bytes @ 0x1
   611                           
   612                           
   613                           ; 2 bytes @ 0x1
   614  0191                     	ds	1
   615  0192                     ?_lcd_envia_byte:	
   616  0192                     ??_ADCRead:	
   617                           ; 0 bytes @ 0x2
   618                           
   619  0192                     lcd_envia_byte@n:	
   620                           ; 0 bytes @ 0x2
   621                           
   622                           
   623                           ; 1 bytes @ 0x2
   624  0192                     	ds	1
   625  0193                     ??_lcd_envia_byte:	
   626  0193                     ??_USARTWriteString:	
   627                           ; 0 bytes @ 0x3
   628                           
   629  0193                     ??_ativar:	
   630                           ; 0 bytes @ 0x3
   631                           
   632                           
   633                           ; 0 bytes @ 0x3
   634  0193                     	ds	1
   635  0194                     lcd_envia_byte@address:	
   636  0194                     ___aldiv@dividend:	
   637                           ; 1 bytes @ 0x4
   638                           
   639                           
   640                           ; 4 bytes @ 0x4
   641  0194                     	ds	1
   642  0195                     ?_lcd_gotoxy:	
   643  0195                     ??_init_lcd_4bit:	
   644                           ; 0 bytes @ 0x5
   645                           
   646  0195                     ??_LCDClear:	
   647                           ; 0 bytes @ 0x5
   648                           
   649  0195                     lcd_gotoxy@y:	
   650                           ; 0 bytes @ 0x5
   651                           
   652                           
   653                           ; 1 bytes @ 0x5
   654  0195                     	ds	1
   655  0196                     ??_lcd_gotoxy:	
   656                           
   657                           ; 0 bytes @ 0x6
   658  0196                     	ds	1
   659  0197                     init_lcd_4bit@i:	
   660  0197                     lcd_gotoxy@x:	
   661                           ; 1 bytes @ 0x7
   662                           
   663                           
   664                           ; 1 bytes @ 0x7
   665  0197                     	ds	1
   666  0198                     ??___aldiv:	
   667  0198                     lcd_gotoxy@address:	
   668                           ; 0 bytes @ 0x8
   669                           
   670                           
   671                           ; 1 bytes @ 0x8
   672  0198                     	ds	1
   673  0199                     ??_lcd_putc:	
   674  0199                     ___aldiv@counter:	
   675                           ; 0 bytes @ 0x9
   676                           
   677                           
   678                           ; 1 bytes @ 0x9
   679  0199                     	ds	1
   680  019A                     ___aldiv@sign:	
   681                           
   682                           ; 1 bytes @ 0xA
   683  019A                     	ds	1
   684  019B                     lcd_putc@c:	
   685  019B                     ___aldiv@quotient:	
   686                           ; 1 bytes @ 0xB
   687                           
   688                           
   689                           ; 4 bytes @ 0xB
   690  019B                     	ds	1
   691  019C                     ?_lcd_escreve_string:	
   692  019C                     lcd_escreve_string@y:	
   693                           ; 0 bytes @ 0xC
   694                           
   695                           
   696                           ; 2 bytes @ 0xC
   697  019C                     	ds	2
   698  019E                     ??_lcd_escreve_string:	
   699                           
   700                           ; 0 bytes @ 0xE
   701  019E                     	ds	1
   702  019F                     ?_USARTInit:	
   703  019F                     USARTInit@BaudRate:	
   704                           ; 0 bytes @ 0xF
   705                           
   706                           
   707                           ; 4 bytes @ 0xF
   708  019F                     	ds	4
   709  01A3                     USARTInit@Mode:	
   710                           
   711                           ; 2 bytes @ 0x13
   712  01A3                     	ds	2
   713  01A5                     ??_USARTInit:	
   714                           
   715                           ; 0 bytes @ 0x15
   716  01A5                     	ds	4
   717  01A9                     USARTInit@BR:	
   718                           
   719                           ; 2 bytes @ 0x19
   720  01A9                     	ds	2
   721  01AB                     ??_inicialize:	
   722                           
   723                           ; 0 bytes @ 0x1B
   724  01AB                     	ds	3
   725  01AE                     ??_main:	
   726                           
   727                           	psect	cstackBANK1
   728  00A0                     __pcstackBANK1:	
   729                           ; 0 bytes @ 0x1E
   730                           
   731  00A0                     ISR@aux:	
   732                           
   733                           ; 16 bytes @ 0x0
   734  00A0                     	ds	16
   735  00B0                     ISR@buf:	
   736                           
   737                           ; 1 bytes @ 0x10
   738  00B0                     	ds	1
   739  00B1                     ISR@status:	
   740                           
   741                           ; 2 bytes @ 0x11
   742  00B1                     	ds	2
   743  00B3                     ISR@pre:	
   744                           
   745                           ; 3 bytes @ 0x13
   746  00B3                     	ds	3
   747  00B6                     ISR@preint:	
   748                           
   749                           ; 2 bytes @ 0x16
   750  00B6                     	ds	2
   751  00B8                     ISR@i:	
   752                           
   753                           ; 2 bytes @ 0x18
   754  00B8                     	ds	2
   755  00BA                     ISR@result:	
   756                           
   757                           ; 1 bytes @ 0x1A
   758  00BA                     	ds	1
   759  00BB                     ISR@status2:	
   760                           
   761                           ; 2 bytes @ 0x1B
   762  00BB                     	ds	2
   763  00BD                     ISR@input:	
   764                           
   765                           ; 3 bytes @ 0x1D
   766  00BD                     	ds	3
   767  00C0                     ISR@input2:	
   768                           
   769                           ; 3 bytes @ 0x20
   770  00C0                     	ds	3
   771  00C3                     ISR@recebimento:	
   772                           
   773                           ; 1 bytes @ 0x23
   774  00C3                     	ds	1
   775  00C4                     ISR@per:	
   776                           
   777                           ; 1 bytes @ 0x24
   778  00C4                     	ds	1
   779                           
   780                           	psect	cstackCOMMON
   781  0070                     __pcstackCOMMON:	
   782  0070                     ?_init_lcd_4bit:	
   783  0070                     ?_LCDClear:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ?_lcd_envia_nibble:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_isdigit:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ??_isdigit:	
   793                           ; 1 bit 
   794                           
   795  0070                     ?_USARTWriteChar:	
   796                           ; 0 bytes @ 0x0
   797                           
   798  0070                     ??_FormatarValor:	
   799                           ; 0 bytes @ 0x0
   800                           
   801  0070                     ?_ADCInit:	
   802                           ; 0 bytes @ 0x0
   803                           
   804  0070                     ?_ISR:	
   805                           ; 0 bytes @ 0x0
   806                           
   807  0070                     ?_inicialize:	
   808                           ; 0 bytes @ 0x0
   809                           
   810  0070                     ?_ativar:	
   811                           ; 0 bytes @ 0x0
   812                           
   813  0070                     ?_main:	
   814                           ; 0 bytes @ 0x0
   815                           
   816  0070                     ?_lcd_putc:	
   817                           ; 0 bytes @ 0x0
   818                           
   819  0070                     ?___ftge:	
   820                           ; 0 bytes @ 0x0
   821                           
   822  0070                     ?i1_USARTWriteChar:	
   823                           ; 1 bit 
   824                           
   825  0070                     ??i1_USARTWriteChar:	
   826                           ; 0 bytes @ 0x0
   827                           
   828  0070                     ?i1_lcd_envia_nibble:	
   829                           ; 0 bytes @ 0x0
   830                           
   831  0070                     ??i1_lcd_envia_nibble:	
   832                           ; 0 bytes @ 0x0
   833                           
   834  0070                     ?i1_lcd_putc:	
   835                           ; 0 bytes @ 0x0
   836                           
   837  0070                     ?_FormatarValor:	
   838                           ; 0 bytes @ 0x0
   839                           
   840  0070                     ?_USARTReceiveChar:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0070                     ?___wmul:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0070                     ?___ftpack:	
   847                           ; 2 bytes @ 0x0
   848                           
   849  0070                     ?___ftneg:	
   850                           ; 3 bytes @ 0x0
   851                           
   852  0070                     ?___lldiv:	
   853                           ; 3 bytes @ 0x0
   854                           
   855  0070                     _isdigit$900:	
   856                           ; 4 bytes @ 0x0
   857                           
   858  0070                     i1USARTWriteChar@USARTData:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ___wmul@multiplier:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0070                     ___ftpack@arg:	
   865                           ; 2 bytes @ 0x0
   866                           
   867  0070                     ___ftge@ff1:	
   868                           ; 3 bytes @ 0x0
   869                           
   870  0070                     ___ftneg@f1:	
   871                           ; 3 bytes @ 0x0
   872                           
   873  0070                     ___lldiv@divisor:	
   874                           ; 3 bytes @ 0x0
   875                           
   876                           
   877                           ; 4 bytes @ 0x0
   878  0070                     	ds	1
   879  0071                     ?i1_USARTWriteString:	
   880  0071                     isdigit@c:	
   881                           ; 0 bytes @ 0x1
   882                           
   883  0071                     i1lcd_envia_nibble@n:	
   884                           ; 1 bytes @ 0x1
   885                           
   886  0071                     i1USARTWriteString@str:	
   887                           ; 1 bytes @ 0x1
   888                           
   889                           
   890                           ; 2 bytes @ 0x1
   891  0071                     	ds	1
   892  0072                     ?i1_lcd_envia_byte:	
   893  0072                     i1lcd_envia_byte@n:	
   894                           ; 0 bytes @ 0x2
   895                           
   896  0072                     ___wmul@multiplicand:	
   897                           ; 1 bytes @ 0x2
   898                           
   899                           
   900                           ; 2 bytes @ 0x2
   901  0072                     	ds	1
   902  0073                     ??_USARTReceiveChar:	
   903  0073                     ??___ftneg:	
   904                           ; 0 bytes @ 0x3
   905                           
   906  0073                     ??i1_USARTWriteString:	
   907                           ; 0 bytes @ 0x3
   908                           
   909  0073                     ??i1_lcd_envia_byte:	
   910                           ; 0 bytes @ 0x3
   911                           
   912  0073                     ___ftpack@exp:	
   913                           ; 0 bytes @ 0x3
   914                           
   915  0073                     ___ftge@ff2:	
   916                           ; 1 bytes @ 0x3
   917                           
   918                           
   919                           ; 3 bytes @ 0x3
   920  0073                     	ds	1
   921  0074                     ??___wmul:	
   922  0074                     USARTReceiveChar@USARTData:	
   923                           ; 0 bytes @ 0x4
   924                           
   925  0074                     ___ftpack@sign:	
   926                           ; 1 bytes @ 0x4
   927                           
   928  0074                     i1lcd_envia_byte@address:	
   929                           ; 1 bytes @ 0x4
   930                           
   931  0074                     ___wmul@product:	
   932                           ; 1 bytes @ 0x4
   933                           
   934  0074                     ___lldiv@dividend:	
   935                           ; 2 bytes @ 0x4
   936                           
   937                           
   938                           ; 4 bytes @ 0x4
   939  0074                     	ds	1
   940  0075                     ??___ftpack:	
   941  0075                     ?i1_lcd_gotoxy:	
   942                           ; 0 bytes @ 0x5
   943                           
   944  0075                     i1lcd_gotoxy@y:	
   945                           ; 0 bytes @ 0x5
   946                           
   947                           
   948                           ; 1 bytes @ 0x5
   949  0075                     	ds	1
   950  0076                     ??___ftge:	
   951  0076                     ??i1_lcd_gotoxy:	
   952                           ; 0 bytes @ 0x6
   953                           
   954                           
   955                           ; 0 bytes @ 0x6
   956  0076                     	ds	1
   957  0077                     i1lcd_gotoxy@x:	
   958                           
   959                           ; 1 bytes @ 0x7
   960  0077                     	ds	1
   961  0078                     ??___lldiv:	
   962  0078                     ?___awtoft:	
   963                           ; 0 bytes @ 0x8
   964                           
   965  0078                     ?___ftadd:	
   966                           ; 3 bytes @ 0x8
   967                           
   968  0078                     ?___lltoft:	
   969                           ; 3 bytes @ 0x8
   970                           
   971  0078                     i1lcd_gotoxy@address:	
   972                           ; 3 bytes @ 0x8
   973                           
   974  0078                     ___awtoft@c:	
   975                           ; 1 bytes @ 0x8
   976                           
   977  0078                     ___ftadd@f1:	
   978                           ; 2 bytes @ 0x8
   979                           
   980  0078                     ___lltoft@c:	
   981                           ; 3 bytes @ 0x8
   982                           
   983                           
   984                           ; 4 bytes @ 0x8
   985  0078                     	ds	1
   986  0079                     ??i1_lcd_putc:	
   987  0079                     ___lldiv@quotient:	
   988                           ; 0 bytes @ 0x9
   989                           
   990                           
   991                           ; 4 bytes @ 0x9
   992  0079                     	ds	2
   993  007B                     ??___awtoft:	
   994  007B                     i1lcd_putc@c:	
   995                           ; 0 bytes @ 0xB
   996                           
   997  007B                     ___ftadd@f2:	
   998                           ; 1 bytes @ 0xB
   999                           
  1000                           
  1001                           ; 3 bytes @ 0xB
  1002  007B                     	ds	1
  1003  007C                     ??___lltoft:	
  1004  007C                     ?i1_lcd_escreve_string:	
  1005                           ; 0 bytes @ 0xC
  1006                           
  1007  007C                     i1lcd_escreve_string@y:	
  1008                           ; 0 bytes @ 0xC
  1009                           
  1010                           
  1011                           ; 2 bytes @ 0xC
  1012  007C                     	ds	1
  1013  007D                     ___awtoft@sign:	
  1014  007D                     ___lldiv@counter:	
  1015                           ; 1 bytes @ 0xD
  1016                           
  1017  007D                     ___lltoft@exp:	
  1018                           ; 1 bytes @ 0xD
  1019                           
  1020                           
  1021                           ; 1 bytes @ 0xD
  1022  007D                     	ds	1
  1023  007E                     ??___ftsub:	
  1024  007E                     ??i1_lcd_escreve_string:	
  1025                           ; 0 bytes @ 0xE
  1026                           
  1027                           
  1028                           	psect	cstackBANK0
  1029  0020                     __pcstackBANK0:	
  1030                           ; 0 bytes @ 0xE
  1031                           
  1032  0020                     ??___ftadd:	
  1033  0020                     ?___ftmul:	
  1034                           ; 0 bytes @ 0x0
  1035                           
  1036  0020                     ?___llmod:	
  1037                           ; 3 bytes @ 0x0
  1038                           
  1039  0020                     ___ftmul@f1:	
  1040                           ; 4 bytes @ 0x0
  1041                           
  1042  0020                     ___llmod@divisor:	
  1043                           ; 3 bytes @ 0x0
  1044                           
  1045  0020                     FormatarValor@aux:	
  1046                           ; 4 bytes @ 0x0
  1047                           
  1048                           
  1049                           ; 40 bytes @ 0x0
  1050  0020                     	ds	3
  1051  0023                     ___ftmul@f2:	
  1052                           
  1053                           ; 3 bytes @ 0x3
  1054  0023                     	ds	1
  1055  0024                     ___ftadd@sign:	
  1056  0024                     ___llmod@dividend:	
  1057                           ; 1 bytes @ 0x4
  1058                           
  1059                           
  1060                           ; 4 bytes @ 0x4
  1061  0024                     	ds	1
  1062  0025                     ___ftadd@exp2:	
  1063                           
  1064                           ; 1 bytes @ 0x5
  1065  0025                     	ds	1
  1066  0026                     ??___ftmul:	
  1067  0026                     ___ftadd@exp1:	
  1068                           ; 0 bytes @ 0x6
  1069                           
  1070                           
  1071                           ; 1 bytes @ 0x6
  1072  0026                     	ds	1
  1073  0027                     ?___ftsub:	
  1074  0027                     ___ftsub@f2:	
  1075                           ; 3 bytes @ 0x7
  1076                           
  1077                           
  1078                           ; 3 bytes @ 0x7
  1079  0027                     	ds	1
  1080  0028                     ??___llmod:	
  1081                           
  1082                           ; 0 bytes @ 0x8
  1083  0028                     	ds	1
  1084  0029                     ___llmod@counter:	
  1085                           
  1086                           ; 1 bytes @ 0x9
  1087  0029                     	ds	1
  1088  002A                     ?_sprintf:	
  1089  002A                     sprintf@f:	
  1090                           ; 2 bytes @ 0xA
  1091                           
  1092  002A                     ___ftmul@exp:	
  1093                           ; 1 bytes @ 0xA
  1094                           
  1095  002A                     ___ftsub@f1:	
  1096                           ; 1 bytes @ 0xA
  1097                           
  1098                           
  1099                           ; 3 bytes @ 0xA
  1100  002A                     	ds	1
  1101  002B                     ___ftmul@f3_as_product:	
  1102                           
  1103                           ; 3 bytes @ 0xB
  1104  002B                     	ds	3
  1105  002E                     ___ftmul@cntr:	
  1106                           
  1107                           ; 1 bytes @ 0xE
  1108  002E                     	ds	1
  1109  002F                     ___ftmul@sign:	
  1110                           
  1111                           ; 1 bytes @ 0xF
  1112  002F                     	ds	1
  1113  0030                     ?___ftdiv:	
  1114  0030                     ?___fttol:	
  1115                           ; 3 bytes @ 0x10
  1116                           
  1117  0030                     ___ftdiv@f2:	
  1118                           ; 4 bytes @ 0x10
  1119                           
  1120  0030                     ___fttol@f1:	
  1121                           ; 3 bytes @ 0x10
  1122                           
  1123                           
  1124                           ; 3 bytes @ 0x10
  1125  0030                     	ds	3
  1126  0033                     ??_sprintf:	
  1127  0033                     ___ftdiv@f1:	
  1128                           ; 0 bytes @ 0x13
  1129                           
  1130                           
  1131                           ; 3 bytes @ 0x13
  1132  0033                     	ds	1
  1133  0034                     ??___fttol:	
  1134                           
  1135                           ; 0 bytes @ 0x14
  1136  0034                     	ds	2
  1137  0036                     ??___ftdiv:	
  1138                           
  1139                           ; 0 bytes @ 0x16
  1140  0036                     	ds	2
  1141  0038                     sprintf@flag:	
  1142  0038                     ___fttol@sign1:	
  1143                           ; 1 bytes @ 0x18
  1144                           
  1145                           
  1146                           ; 1 bytes @ 0x18
  1147  0038                     	ds	1
  1148  0039                     sprintf@ap:	
  1149  0039                     ___fttol@lval:	
  1150                           ; 1 bytes @ 0x19
  1151                           
  1152                           
  1153                           ; 4 bytes @ 0x19
  1154  0039                     	ds	1
  1155  003A                     ___ftdiv@cntr:	
  1156  003A                     sprintf@_val:	
  1157                           ; 1 bytes @ 0x1A
  1158                           
  1159                           
  1160                           ; 4 bytes @ 0x1A
  1161  003A                     	ds	1
  1162  003B                     ___ftdiv@f3:	
  1163                           
  1164                           ; 3 bytes @ 0x1B
  1165  003B                     	ds	2
  1166  003D                     ___fttol@exp1:	
  1167                           
  1168                           ; 1 bytes @ 0x1D
  1169  003D                     	ds	1
  1170  003E                     sprintf@sp:	
  1171  003E                     ___ftdiv@exp:	
  1172                           ; 1 bytes @ 0x1E
  1173                           
  1174                           
  1175                           ; 1 bytes @ 0x1E
  1176  003E                     	ds	1
  1177  003F                     ___ftdiv@sign:	
  1178  003F                     sprintf@width:	
  1179                           ; 1 bytes @ 0x1F
  1180                           
  1181                           
  1182                           ; 2 bytes @ 0x1F
  1183  003F                     	ds	2
  1184  0041                     sprintf@prec:	
  1185                           
  1186                           ; 2 bytes @ 0x21
  1187  0041                     	ds	2
  1188  0043                     sprintf@c:	
  1189                           
  1190                           ; 1 bytes @ 0x23
  1191  0043                     	ds	1
  1192  0044                     ?_ftoa:	
  1193  0044                     ftoa@f:	
  1194                           ; 1 bytes @ 0x24
  1195                           
  1196                           
  1197                           ; 3 bytes @ 0x24
  1198  0044                     	ds	3
  1199  0047                     ftoa@status:	
  1200                           
  1201                           ; 1 bytes @ 0x27
  1202  0047                     	ds	1
  1203  0048                     ??_ftoa:	
  1204  0048                     FormatarValor@retorno:	
  1205                           ; 0 bytes @ 0x28
  1206                           
  1207                           
  1208                           ; 1 bytes @ 0x28
  1209  0048                     	ds	1
  1210  0049                     FormatarValor@posicao:	
  1211  0049                     ftoa@rem:	
  1212                           ; 2 bytes @ 0x29
  1213                           
  1214                           
  1215                           ; 4 bytes @ 0x29
  1216  0049                     	ds	2
  1217  004B                     FormatarValor@i:	
  1218                           
  1219                           ; 2 bytes @ 0x2B
  1220  004B                     	ds	2
  1221  004D                     FormatarValor@str:	
  1222  004D                     ftoa@l:	
  1223                           ; 1 bytes @ 0x2D
  1224                           
  1225                           
  1226                           ; 4 bytes @ 0x2D
  1227  004D                     	ds	4
  1228  0051                     ftoa@cp:	
  1229                           
  1230                           ; 1 bytes @ 0x31
  1231  0051                     	ds	1
  1232  0052                     ??_ISR:	
  1233                           
  1234                           ; 0 bytes @ 0x32
  1235  0052                     	ds	8
  1236                           
  1237                           	psect	maintext
  1238  158C                     __pmaintext:	
  1239 ;;
  1240 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1241 ;;
  1242 ;; *************** function _main *****************
  1243 ;; Defined at:
  1244 ;;		line 352 in file "main.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;		None
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;		None               void
  1251 ;; Registers used:
  1252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 17F/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1258 ;;      Params:         0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0
  1261 ;;      Totals:         0       0       0       0       0
  1262 ;;Total ram usage:        0 bytes
  1263 ;; Hardware stack levels required when called:   12
  1264 ;; This function calls:
  1265 ;;		_ativar
  1266 ;;		_inicialize
  1267 ;; This function is called by:
  1268 ;;		Startup code after reset
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           
  1273                           ;psect for function _main
  1274  158C                     _main:	
  1275                           
  1276                           ;main.c: 354: inicialize();
  1277                           
  1278                           ;incstack = 0
  1279 ;; hardware stack exceeded
  1280                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1281  158C  120A  158A  24E6  160A  118A  	fcall	_inicialize
  1282  1591                     l155:	
  1283                           ;main.c: 355: while (1) {
  1284                           
  1285                           
  1286                           ;main.c: 356: ativar();
  1287  1591  120A  158A  240C  160A  118A  	fcall	_ativar
  1288  1596  2D91               	goto	l155
  1289  1597                     __end_of_main:	
  1290                           
  1291                           	psect	text1
  1292  0CE6                     __ptext1:	
  1293 ;; *************** function _inicialize *****************
  1294 ;; Defined at:
  1295 ;;		line 300 in file "main.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;		None               void
  1302 ;; Registers used:
  1303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       0       0       0       0
  1310 ;;      Locals:         0       0       0       0       0
  1311 ;;      Temps:          0       0       0       3       0
  1312 ;;      Totals:         0       0       0       3       0
  1313 ;;Total ram usage:        3 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:   11
  1316 ;; This function calls:
  1317 ;;		_ADCInit
  1318 ;;		_LCDClear
  1319 ;;		_USARTInit
  1320 ;;		_init_lcd_4bit
  1321 ;;		_lcd_escreve_string
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function _inicialize
  1329  0CE6                     _inicialize:	
  1330                           
  1331                           ;main.c: 302: USARTInit(57600, 1);
  1332                           
  1333                           ;incstack = 0
  1334 ;; hardware stack exceeded
  1335                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1336  0CE6  3000               	movlw	0
  1337  0CE7  1683               	bsf	3,5	;RP0=1, select bank3
  1338  0CE8  1703               	bsf	3,6	;RP1=1, select bank3
  1339  0CE9  00A2               	movwf	(USARTInit@BaudRate+3)^(0+384)
  1340  0CEA  3000               	movlw	0
  1341  0CEB  00A1               	movwf	(USARTInit@BaudRate+2)^(0+384)
  1342  0CEC  30E1               	movlw	225
  1343  0CED  00A0               	movwf	(USARTInit@BaudRate+1)^(0+384)
  1344  0CEE  3000               	movlw	0
  1345  0CEF  009F               	movwf	USARTInit@BaudRate^(0+384)
  1346  0CF0  3001               	movlw	1
  1347  0CF1  00A3               	movwf	USARTInit@Mode^(0+384)
  1348  0CF2  3000               	movlw	0
  1349  0CF3  00A4               	movwf	(USARTInit@Mode^(0+384)+1)
  1350  0CF4  120A  158A  2476  120A  158A  	fcall	_USARTInit
  1351                           
  1352                           ;main.c: 303: TRISA = 0b11111111;
  1353  0CF9  30FF               	movlw	255
  1354  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  1355  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
  1356  0CFC  0085               	movwf	5	;volatile
  1357                           
  1358                           ;main.c: 304: PORTAbits.RA0 = 0;
  1359  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0CFF  1005               	bcf	5,0	;volatile
  1362                           
  1363                           ;main.c: 305: PORTAbits.RA1 = 0;
  1364  0D00  1085               	bcf	5,1	;volatile
  1365                           
  1366                           ;main.c: 306: TRISDbits.TRISD2 = 0;
  1367  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  1368  0D02  1303               	bcf	3,6	;RP1=0, select bank1
  1369  0D03  1108               	bcf	8,2	;volatile
  1370                           
  1371                           ;main.c: 307: PORTDbits.RD2 = 1;
  1372  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  1373  0D05  1303               	bcf	3,6	;RP1=0, select bank0
  1374  0D06  1508               	bsf	8,2	;volatile
  1375                           
  1376                           ;main.c: 308: TRISDbits.TRISD3 = 0;
  1377  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  1378  0D08  1303               	bcf	3,6	;RP1=0, select bank1
  1379  0D09  1188               	bcf	8,3	;volatile
  1380                           
  1381                           ;main.c: 309: PORTDbits.RD3 = 0;
  1382  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0D0C  1188               	bcf	8,3	;volatile
  1385                           
  1386                           ;main.c: 310: TRISDbits.TRISD5 = 0;
  1387  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  1388  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  1389  0D0F  1288               	bcf	8,5	;volatile
  1390                           
  1391                           ;main.c: 311: PORTDbits.RD5 = 0;
  1392  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  1394  0D12  1288               	bcf	8,5	;volatile
  1395                           
  1396                           ;main.c: 313: TRISCbits.TRISC0 = 1;
  1397  0D13  1683               	bsf	3,5	;RP0=1, select bank1
  1398  0D14  1303               	bcf	3,6	;RP1=0, select bank1
  1399  0D15  1407               	bsf	7,0	;volatile
  1400                           
  1401                           ;main.c: 314: TRISCbits.TRISC1 = 1;
  1402  0D16  1487               	bsf	7,1	;volatile
  1403                           
  1404                           ;main.c: 315: TRISCbits.TRISC2 = 1;
  1405  0D17  1507               	bsf	7,2	;volatile
  1406                           
  1407                           ;main.c: 316: TRISCbits.TRISC3 = 1;
  1408  0D18  1587               	bsf	7,3	;volatile
  1409                           
  1410                           ;main.c: 317: PORTCbits.RC3 = 0;
  1411  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0D1B  1187               	bcf	7,3	;volatile
  1414                           
  1415                           ;main.c: 318: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1416  0D1C  3033               	movlw	51
  1417  0D1D  1683               	bsf	3,5	;RP0=1, select bank3
  1418  0D1E  1703               	bsf	3,6	;RP1=1, select bank3
  1419  0D1F  00AD               	movwf	(??_inicialize^(0+384)+2)
  1420  0D20  30BC               	movlw	188
  1421  0D21  00AC               	movwf	(??_inicialize^(0+384)+1)
  1422  0D22  3010               	movlw	16
  1423  0D23  00AB               	movwf	??_inicialize^(0+384)
  1424  0D24                     u4237:	
  1425  0D24  0BAB               	decfsz	??_inicialize^(0+384),f
  1426  0D25  2D24               	goto	u4237
  1427  0D26  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1428  0D27  2D24               	goto	u4237
  1429  0D28  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1430  0D29  2D24               	goto	u4237
  1431                           
  1432                           ;main.c: 319: init_lcd_4bit();
  1433  0D2A  120A  158A  233E  120A  158A  	fcall	_init_lcd_4bit
  1434                           
  1435                           ;main.c: 320: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1436  0D2F  3033               	movlw	51
  1437  0D30  1683               	bsf	3,5	;RP0=1, select bank3
  1438  0D31  1703               	bsf	3,6	;RP1=1, select bank3
  1439  0D32  00AD               	movwf	(??_inicialize^(0+384)+2)
  1440  0D33  30BC               	movlw	188
  1441  0D34  00AC               	movwf	(??_inicialize^(0+384)+1)
  1442  0D35  3010               	movlw	16
  1443  0D36  00AB               	movwf	??_inicialize^(0+384)
  1444  0D37                     u4247:	
  1445  0D37  0BAB               	decfsz	??_inicialize^(0+384),f
  1446  0D38  2D37               	goto	u4247
  1447  0D39  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1448  0D3A  2D37               	goto	u4247
  1449  0D3B  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1450  0D3C  2D37               	goto	u4247
  1451                           
  1452                           ;main.c: 321: INTCONbits.PEIE = 1;
  1453  0D3D  170B               	bsf	11,6	;volatile
  1454                           
  1455                           ;main.c: 322: INTCONbits.GIE = 1;
  1456  0D3E  178B               	bsf	11,7	;volatile
  1457                           
  1458                           ;main.c: 323: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1459  0D3F  301A               	movlw	26
  1460  0D40  1683               	bsf	3,5	;RP0=1, select bank3
  1461  0D41  1703               	bsf	3,6	;RP1=1, select bank3
  1462  0D42  00AD               	movwf	(??_inicialize^(0+384)+2)
  1463  0D43  305E               	movlw	94
  1464  0D44  00AC               	movwf	(??_inicialize^(0+384)+1)
  1465  0D45  3086               	movlw	134
  1466  0D46  00AB               	movwf	??_inicialize^(0+384)
  1467  0D47                     u4257:	
  1468  0D47  0BAB               	decfsz	??_inicialize^(0+384),f
  1469  0D48  2D47               	goto	u4257
  1470  0D49  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1471  0D4A  2D47               	goto	u4257
  1472  0D4B  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1473  0D4C  2D47               	goto	u4257
  1474  0D4D  0000               	nop
  1475                           
  1476                           ;main.c: 324: ADCInit();
  1477  0D4E  160A  118A  25D4  120A  158A  	fcall	_ADCInit
  1478                           
  1479                           ;main.c: 325: lcd_escreve_string("\fLoading PIC...");
  1480  0D53  305B               	movlw	low (STR_12-__stringbase)
  1481  0D54  1683               	bsf	3,5	;RP0=1, select bank3
  1482  0D55  1703               	bsf	3,6	;RP1=1, select bank3
  1483  0D56  009C               	movwf	lcd_escreve_string@y^(0+384)
  1484  0D57  3080               	movlw	128
  1485  0D58  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1486  0D59  120A  158A  20A3  120A  158A  	fcall	_lcd_escreve_string
  1487                           
  1488                           ;main.c: 326: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1489  0D5E  307F               	movlw	127
  1490  0D5F  1683               	bsf	3,5	;RP0=1, select bank3
  1491  0D60  1703               	bsf	3,6	;RP1=1, select bank3
  1492  0D61  00AD               	movwf	(??_inicialize^(0+384)+2)
  1493  0D62  30D4               	movlw	212
  1494  0D63  00AC               	movwf	(??_inicialize^(0+384)+1)
  1495  0D64  30AE               	movlw	174
  1496  0D65  00AB               	movwf	??_inicialize^(0+384)
  1497  0D66                     u4267:	
  1498  0D66  0BAB               	decfsz	??_inicialize^(0+384),f
  1499  0D67  2D66               	goto	u4267
  1500  0D68  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1501  0D69  2D66               	goto	u4267
  1502  0D6A  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1503  0D6B  2D66               	goto	u4267
  1504  0D6C  2D6D               	nop2
  1505                           
  1506                           ;main.c: 327: LCDClear();
  1507  0D6D  120A  158A  210F   	fcall	_LCDClear
  1508  0D70  0008               	return
  1509  0D71                     __end_of_inicialize:	
  1510                           
  1511                           	psect	text2
  1512  08A3                     __ptext2:	
  1513 ;; *************** function _lcd_escreve_string *****************
  1514 ;; Defined at:
  1515 ;;		line 168 in file "lcd_4bit.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1518 ;;		 -> STR_12(16), STR_9(2), STR_8(4), STR_6(4), 
  1519 ;;		 -> STR_5(2), STR_4(4), STR_2(4), ISR@aux(16), 
  1520 ;;		 -> FormatarValor@aux(40), 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;		None
  1523 ;; Return value:  Size  Location     Type
  1524 ;;		None               void
  1525 ;; Registers used:
  1526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1532 ;;      Params:         0       0       0       2       0
  1533 ;;      Locals:         0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0
  1535 ;;      Totals:         0       0       0       2       0
  1536 ;;Total ram usage:        2 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:   10
  1539 ;; This function calls:
  1540 ;;		_lcd_putc
  1541 ;; This function is called by:
  1542 ;;		_inicialize
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _lcd_escreve_string
  1548  08A3                     _lcd_escreve_string:	
  1549  08A3                     l3155:	
  1550                           ;lcd_4bit.c: 170: while(*y!='\0')
  1551                           
  1552                           ;incstack = 0
  1553 ;; hardware stack exceeded
  1554                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1555                           
  1556  08A3  1683               	bsf	3,5	;RP0=1, select bank3
  1557  08A4  1703               	bsf	3,6	;RP1=1, select bank3
  1558  08A5  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1559  08A6  1283               	bcf	3,5	;RP0=0, select bank0
  1560  08A7  1303               	bcf	3,6	;RP1=0, select bank0
  1561  08A8  00FF               	movwf	127
  1562  08A9  1683               	bsf	3,5	;RP0=1, select bank3
  1563  08AA  1703               	bsf	3,6	;RP1=1, select bank3
  1564  08AB  081C               	movf	lcd_escreve_string@y^(0+384),w
  1565  08AC  0084               	movwf	4
  1566  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  1567  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  1568  08AF  120A  158A  2000  120A  158A  	fcall	stringtab
  1569  08B4  3800               	iorlw	0
  1570  08B5  1903               	btfsc	3,2
  1571  08B6  0008               	return
  1572                           
  1573                           ;lcd_4bit.c: 171: {
  1574                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1575  08B7  1683               	bsf	3,5	;RP0=1, select bank3
  1576  08B8  1703               	bsf	3,6	;RP1=1, select bank3
  1577  08B9  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1578  08BA  1283               	bcf	3,5	;RP0=0, select bank0
  1579  08BB  1303               	bcf	3,6	;RP1=0, select bank0
  1580  08BC  00FF               	movwf	127
  1581  08BD  1683               	bsf	3,5	;RP0=1, select bank3
  1582  08BE  1703               	bsf	3,6	;RP1=1, select bank3
  1583  08BF  081C               	movf	lcd_escreve_string@y^(0+384),w
  1584  08C0  0084               	movwf	4
  1585  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  1586  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  1587  08C3  120A  158A  2000  120A  158A  	fcall	stringtab
  1588  08C8  120A  158A  2195  120A  158A  	fcall	_lcd_putc
  1589                           
  1590                           ;lcd_4bit.c: 173: y++;
  1591  08CD  3001               	movlw	1
  1592  08CE  1683               	bsf	3,5	;RP0=1, select bank3
  1593  08CF  1703               	bsf	3,6	;RP1=1, select bank3
  1594  08D0  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1595  08D1  1803               	skipnc
  1596  08D2  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1597  08D3  28A3               	goto	l3155
  1598  08D4                     __end_of_lcd_escreve_string:	
  1599                           
  1600                           	psect	text3
  1601  0995                     __ptext3:	
  1602 ;; *************** function _lcd_putc *****************
  1603 ;; Defined at:
  1604 ;;		line 82 in file "lcd_4bit.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  c               1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  c               1   11[BANK3 ] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;		None               void
  1611 ;; Registers used:
  1612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1618 ;;      Params:         0       0       0       0       0
  1619 ;;      Locals:         0       0       0       1       0
  1620 ;;      Temps:          0       0       0       2       0
  1621 ;;      Totals:         0       0       0       3       0
  1622 ;;Total ram usage:        3 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    9
  1625 ;; This function calls:
  1626 ;;		_lcd_envia_byte
  1627 ;;		_lcd_gotoxy
  1628 ;; This function is called by:
  1629 ;;		_lcd_escreve_string
  1630 ;;		_lcd_escreve_p
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           
  1635                           ;psect for function _lcd_putc
  1636  0995                     _lcd_putc:	
  1637                           
  1638                           ;incstack = 0
  1639 ;; hardware stack exceeded
  1640                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1641                           ;lcd_putc@c stored from wreg
  1642  0995  1683               	bsf	3,5	;RP0=1, select bank3
  1643  0996  1703               	bsf	3,6	;RP1=1, select bank3
  1644  0997  009B               	movwf	lcd_putc@c^(0+384)
  1645                           
  1646                           ;lcd_4bit.c: 84: switch(c)
  1647  0998  29CE               	goto	l3045
  1648  0999                     l3033:	
  1649                           ;lcd_4bit.c: 85: {
  1650                           ;lcd_4bit.c: 86: case '\f':
  1651                           
  1652                           
  1653                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1654  0999  0192               	clrf	lcd_envia_byte@n^(0+384)
  1655  099A  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1656  099B  3000               	movlw	0
  1657  099C  160A  118A  2792  120A  158A  	fcall	_lcd_envia_byte
  1658                           
  1659                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1660  09A1  300D               	movlw	13
  1661  09A2  1683               	bsf	3,5	;RP0=1, select bank3
  1662  09A3  1703               	bsf	3,6	;RP1=1, select bank3
  1663  09A4  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1664  09A5  30FB               	movlw	251
  1665  09A6  0099               	movwf	??_lcd_putc^(0+384)
  1666  09A7                     u4277:	
  1667  09A7  0B99               	decfsz	??_lcd_putc^(0+384),f
  1668  09A8  29A7               	goto	u4277
  1669  09A9  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1670  09AA  29A7               	goto	u4277
  1671  09AB  29AC               	nop2
  1672                           
  1673                           ;lcd_4bit.c: 89: break;
  1674  09AC  0008               	return
  1675  09AD                     l3037:	
  1676                           ;lcd_4bit.c: 91: case '\n':
  1677                           
  1678                           
  1679                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1680  09AD  3002               	movlw	2
  1681  09AE  1683               	bsf	3,5	;RP0=1, select bank3
  1682  09AF  1703               	bsf	3,6	;RP1=1, select bank3
  1683  09B0  0099               	movwf	??_lcd_putc^(0+384)
  1684  09B1  0819               	movf	??_lcd_putc^(0+384),w
  1685  09B2  0095               	movwf	lcd_gotoxy@y^(0+384)
  1686  09B3  3001               	movlw	1
  1687  09B4  160A  118A  2638   	fcall	_lcd_gotoxy
  1688                           
  1689                           ;lcd_4bit.c: 93: break;
  1690  09B7  0008               	return
  1691  09B8                     l3039:	
  1692                           ;lcd_4bit.c: 95: case '\b':
  1693                           
  1694                           
  1695                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1696  09B8  3010               	movlw	16
  1697  09B9  1683               	bsf	3,5	;RP0=1, select bank3
  1698  09BA  1703               	bsf	3,6	;RP1=1, select bank3
  1699  09BB  0099               	movwf	??_lcd_putc^(0+384)
  1700  09BC  0819               	movf	??_lcd_putc^(0+384),w
  1701  09BD  0092               	movwf	lcd_envia_byte@n^(0+384)
  1702  09BE  3000               	movlw	0
  1703  09BF  160A  118A  2792   	fcall	_lcd_envia_byte
  1704                           
  1705                           ;lcd_4bit.c: 97: break;
  1706  09C2  0008               	return
  1707  09C3                     l3041:	
  1708                           ;lcd_4bit.c: 99: default:
  1709                           
  1710                           
  1711                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1712  09C3  1683               	bsf	3,5	;RP0=1, select bank3
  1713  09C4  1703               	bsf	3,6	;RP1=1, select bank3
  1714  09C5  081B               	movf	lcd_putc@c^(0+384),w
  1715  09C6  0099               	movwf	??_lcd_putc^(0+384)
  1716  09C7  0819               	movf	??_lcd_putc^(0+384),w
  1717  09C8  0092               	movwf	lcd_envia_byte@n^(0+384)
  1718  09C9  3001               	movlw	1
  1719  09CA  160A  118A  2792   	fcall	_lcd_envia_byte
  1720                           
  1721                           ;lcd_4bit.c: 102: }
  1722                           
  1723                           ;lcd_4bit.c: 101: break;
  1724  09CD  0008               	return
  1725  09CE                     l3045:	
  1726  09CE  1683               	bsf	3,5	;RP0=1, select bank3
  1727  09CF  1703               	bsf	3,6	;RP1=1, select bank3
  1728  09D0  081B               	movf	lcd_putc@c^(0+384),w
  1729                           
  1730                           ; Switch size 1, requested type "space"
  1731                           ; Number of cases is 3, Range of values is 8 to 12
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte           10     6 (average)
  1735                           ; direct_byte           26    11 (fixed)
  1736                           ; jumptable            263     9 (fixed)
  1737                           ;	Chosen strategy is simple_byte
  1738  09D1  3A08               	xorlw	8	; case 8
  1739  09D2  1903               	skipnz
  1740  09D3  29B8               	goto	l3039
  1741  09D4  3A02               	xorlw	2	; case 10
  1742  09D5  1903               	skipnz
  1743  09D6  29AD               	goto	l3037
  1744  09D7  3A06               	xorlw	6	; case 12
  1745  09D8  1903               	skipnz
  1746  09D9  2999               	goto	l3033
  1747  09DA  29C3               	goto	l3041
  1748  09DB  0008               	return
  1749  09DC                     __end_of_lcd_putc:	
  1750                           
  1751                           	psect	text4
  1752  1638                     __ptext4:	
  1753 ;; *************** function _lcd_gotoxy *****************
  1754 ;; Defined at:
  1755 ;;		line 70 in file "lcd_4bit.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  x               1    wreg     unsigned char 
  1758 ;;  y               1    5[BANK3 ] unsigned char 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  x               1    7[BANK3 ] unsigned char 
  1761 ;;  address         1    8[BANK3 ] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;		None               void
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, pclath, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1771 ;;      Params:         0       0       0       1       0
  1772 ;;      Locals:         0       0       0       2       0
  1773 ;;      Temps:          0       0       0       1       0
  1774 ;;      Totals:         0       0       0       4       0
  1775 ;;Total ram usage:        4 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    8
  1778 ;; This function calls:
  1779 ;;		_lcd_envia_byte
  1780 ;; This function is called by:
  1781 ;;		_lcd_putc
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           
  1786                           ;psect for function _lcd_gotoxy
  1787  1638                     _lcd_gotoxy:	
  1788                           
  1789                           ;incstack = 0
  1790 ;; hardware stack exceeded
  1791                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1792                           ;lcd_gotoxy@x stored from wreg
  1793  1638  1683               	bsf	3,5	;RP0=1, select bank3
  1794  1639  1703               	bsf	3,6	;RP1=1, select bank3
  1795  163A  0097               	movwf	lcd_gotoxy@x^(0+384)
  1796                           
  1797                           ;lcd_4bit.c: 72: unsigned char address;
  1798                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1799  163B  0815               	movf	lcd_gotoxy@y^(0+384),w
  1800  163C  3A01               	xorlw	1
  1801  163D  1903               	skipnz
  1802  163E  2E44               	goto	l3021
  1803  163F  3040               	movlw	64
  1804  1640  0096               	movwf	??_lcd_gotoxy^(0+384)
  1805  1641  0816               	movf	??_lcd_gotoxy^(0+384),w
  1806  1642  0098               	movwf	lcd_gotoxy@address^(0+384)
  1807  1643  2E45               	goto	l3023
  1808  1644                     l3021:	
  1809                           
  1810                           ;lcd_4bit.c: 75: else address=0;
  1811  1644  0198               	clrf	lcd_gotoxy@address^(0+384)
  1812  1645                     l3023:	
  1813                           
  1814                           ;lcd_4bit.c: 77: address += x-1;
  1815  1645  0817               	movf	lcd_gotoxy@x^(0+384),w
  1816  1646  3EFF               	addlw	255
  1817  1647  0096               	movwf	??_lcd_gotoxy^(0+384)
  1818  1648  0816               	movf	??_lcd_gotoxy^(0+384),w
  1819  1649  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1820                           
  1821                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1822  164A  0818               	movf	lcd_gotoxy@address^(0+384),w
  1823  164B  3880               	iorlw	128
  1824  164C  0096               	movwf	??_lcd_gotoxy^(0+384)
  1825  164D  0816               	movf	??_lcd_gotoxy^(0+384),w
  1826  164E  0092               	movwf	lcd_envia_byte@n^(0+384)
  1827  164F  3000               	movlw	0
  1828  1650  160A  118A  2792   	fcall	_lcd_envia_byte
  1829  1653  0008               	return
  1830  1654                     __end_of_lcd_gotoxy:	
  1831                           
  1832                           	psect	text5
  1833  0B3E                     __ptext5:	
  1834 ;; *************** function _init_lcd_4bit *****************
  1835 ;; Defined at:
  1836 ;;		line 6 in file "lcd_4bit.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  i               1    7[BANK3 ] unsigned char 
  1841 ;; Return value:  Size  Location     Type
  1842 ;;		None               void
  1843 ;; Registers used:
  1844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1850 ;;      Params:         0       0       0       0       0
  1851 ;;      Locals:         0       0       0       1       0
  1852 ;;      Temps:          0       0       0       2       0
  1853 ;;      Totals:         0       0       0       3       0
  1854 ;;Total ram usage:        3 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    8
  1857 ;; This function calls:
  1858 ;;		_lcd_envia_byte
  1859 ;;		_lcd_envia_nibble
  1860 ;; This function is called by:
  1861 ;;		_inicialize
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           
  1866                           ;psect for function _init_lcd_4bit
  1867  0B3E                     _init_lcd_4bit:	
  1868                           
  1869                           ;lcd_4bit.c: 8: unsigned char i;
  1870                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1871                           
  1872                           ;incstack = 0
  1873 ;; hardware stack exceeded
  1874                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1875  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  1876  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  1877  0B40  1206               	bcf	6,4	;volatile
  1878                           
  1879                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1880  0B41  1286               	bcf	6,5	;volatile
  1881                           
  1882                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1883  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0B44  1206               	bcf	6,4	;volatile
  1886                           
  1887                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1888  0B45  1286               	bcf	6,5	;volatile
  1889                           
  1890                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1891  0B46  1683               	bsf	3,5	;RP0=1, select bank1
  1892  0B47  1303               	bcf	3,6	;RP1=0, select bank1
  1893  0B48  1006               	bcf	6,0	;volatile
  1894                           
  1895                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1896  0B49  1086               	bcf	6,1	;volatile
  1897                           
  1898                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1899  0B4A  1106               	bcf	6,2	;volatile
  1900                           
  1901                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1902  0B4B  1186               	bcf	6,3	;volatile
  1903                           
  1904                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1905  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0B4E  1006               	bcf	6,0	;volatile
  1908                           
  1909                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1910  0B4F  1086               	bcf	6,1	;volatile
  1911                           
  1912                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1913  0B50  1106               	bcf	6,2	;volatile
  1914                           
  1915                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1916  0B51  1186               	bcf	6,3	;volatile
  1917                           
  1918                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1919  0B52  3062               	movlw	98
  1920  0B53  1683               	bsf	3,5	;RP0=1, select bank3
  1921  0B54  1703               	bsf	3,6	;RP1=1, select bank3
  1922  0B55  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1923  0B56  3065               	movlw	101
  1924  0B57  0095               	movwf	??_init_lcd_4bit^(0+384)
  1925  0B58                     u4287:	
  1926  0B58  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1927  0B59  2B58               	goto	u4287
  1928  0B5A  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1929  0B5B  2B58               	goto	u4287
  1930  0B5C  2B5D               	nop2
  1931                           
  1932                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1933  0B5D  1683               	bsf	3,5	;RP0=1, select bank3
  1934  0B5E  1703               	bsf	3,6	;RP1=1, select bank3
  1935  0B5F  0197               	clrf	init_lcd_4bit@i^(0+384)
  1936  0B60  3003               	movlw	3
  1937  0B61  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1938  0B62  1803               	btfsc	3,0
  1939  0B63  2B7F               	goto	l3175
  1940  0B64                     l3167:	
  1941                           
  1942                           ;lcd_4bit.c: 26: {
  1943                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1944  0B64  3003               	movlw	3
  1945  0B65  120A  158A  222A  120A  158A  	fcall	_lcd_envia_nibble
  1946                           
  1947                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1948  0B6A  3021               	movlw	33
  1949  0B6B  1683               	bsf	3,5	;RP0=1, select bank3
  1950  0B6C  1703               	bsf	3,6	;RP1=1, select bank3
  1951  0B6D  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1952  0B6E  3076               	movlw	118
  1953  0B6F  0095               	movwf	??_init_lcd_4bit^(0+384)
  1954  0B70                     u4297:	
  1955  0B70  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1956  0B71  2B70               	goto	u4297
  1957  0B72  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1958  0B73  2B70               	goto	u4297
  1959  0B74  0000               	nop
  1960  0B75  3001               	movlw	1
  1961  0B76  1683               	bsf	3,5	;RP0=1, select bank3
  1962  0B77  1703               	bsf	3,6	;RP1=1, select bank3
  1963  0B78  0095               	movwf	??_init_lcd_4bit^(0+384)
  1964  0B79  0815               	movf	??_init_lcd_4bit^(0+384),w
  1965  0B7A  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1966  0B7B  3003               	movlw	3
  1967  0B7C  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1968  0B7D  1C03               	skipc
  1969  0B7E  2B64               	goto	l3167
  1970  0B7F                     l3175:	
  1971                           
  1972                           ;lcd_4bit.c: 29: }
  1973                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1974  0B7F  3002               	movlw	2
  1975  0B80  120A  158A  222A  120A  158A  	fcall	_lcd_envia_nibble
  1976                           
  1977                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1978  0B85  1683               	bsf	3,5	;RP0=1, select bank3
  1979  0B86  1703               	bsf	3,6	;RP1=1, select bank3
  1980  0B87  0197               	clrf	init_lcd_4bit@i^(0+384)
  1981  0B88                     L1:	
  1982  0B88  3004               	movlw	4
  1983  0B89  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1984  0B8A  1803               	btfsc	3,0
  1985  0B8B  0008               	return
  1986                           
  1987                           ;lcd_4bit.c: 33: {
  1988                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1989  0B8C  0817               	movf	init_lcd_4bit@i^(0+384),w
  1990  0B8D  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1991  0B8E  0084               	movwf	4
  1992  0B8F  120A  158A  200A  120A  158A  	fcall	stringdir
  1993  0B94  0095               	movwf	??_init_lcd_4bit^(0+384)
  1994  0B95  0815               	movf	??_init_lcd_4bit^(0+384),w
  1995  0B96  0092               	movwf	lcd_envia_byte@n^(0+384)
  1996  0B97  3000               	movlw	0
  1997  0B98  160A  118A  2792  120A  158A  	fcall	_lcd_envia_byte
  1998  0B9D  3001               	movlw	1
  1999  0B9E  1683               	bsf	3,5	;RP0=1, select bank3
  2000  0B9F  1703               	bsf	3,6	;RP1=1, select bank3
  2001  0BA0  0095               	movwf	??_init_lcd_4bit^(0+384)
  2002  0BA1  0815               	movf	??_init_lcd_4bit^(0+384),w
  2003  0BA2  0797               	addwf	init_lcd_4bit@i^(0+384),f
  2004  0BA3  2B88               	goto	L1
  2005  0BA4                     __end_of_init_lcd_4bit:	
  2006                           
  2007                           	psect	text6
  2008  0C76                     __ptext6:	
  2009 ;; *************** function _USARTInit *****************
  2010 ;; Defined at:
  2011 ;;		line 39 in file "main.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  BaudRate        4   15[BANK3 ] long 
  2014 ;;  Mode            2   19[BANK3 ] int 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  BR              2   25[BANK3 ] int 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         0       0       0       6       0
  2027 ;;      Locals:         0       0       0       2       0
  2028 ;;      Temps:          0       0       0       4       0
  2029 ;;      Totals:         0       0       0      12       0
  2030 ;;Total ram usage:       12 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    7
  2033 ;; This function calls:
  2034 ;;		___aldiv
  2035 ;; This function is called by:
  2036 ;;		_inicialize
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _USARTInit
  2042  0C76                     _USARTInit:	
  2043                           
  2044                           ;main.c: 40: int BR = 0;
  2045                           
  2046                           ;incstack = 0
  2047 ;; hardware stack exceeded
  2048                           ; Regs used in _USARTInit: [wreg+status,2+status,0+pclath+cstack]
  2049  0C76  1683               	bsf	3,5	;RP0=1, select bank3
  2050  0C77  1703               	bsf	3,6	;RP1=1, select bank3
  2051  0C78  01A9               	clrf	USARTInit@BR^(0+384)
  2052  0C79  01AA               	clrf	(USARTInit@BR+1)^(0+384)
  2053                           
  2054                           ;main.c: 43: if (Mode == 0)
  2055  0C7A  0824               	movf	(USARTInit@Mode+1)^(0+384),w
  2056  0C7B  0423               	iorwf	USARTInit@Mode^(0+384),w
  2057  0C7C  1D03               	skipz
  2058  0C7D  2C90               	goto	l3095
  2059                           
  2060                           ;main.c: 44: {
  2061                           ;main.c: 45: BR = (20000000 / (64 * BaudRate)) - 1;
  2062  0C7E  081F               	movf	USARTInit@BaudRate^(0+384),w
  2063  0C7F  00A5               	movwf	??_USARTInit^(0+384)
  2064  0C80  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2065  0C81  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2066  0C82  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2067  0C83  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2068  0C84  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2069  0C85  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2070  0C86  3006               	movlw	6
  2071  0C87                     u3905:	
  2072  0C87  1003               	clrc
  2073  0C88  0DA5               	rlf	??_USARTInit^(0+384),f
  2074  0C89  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2075  0C8A  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2076  0C8B  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2077  0C8C  3EFF               	addlw	-1
  2078  0C8D  1D03               	skipz
  2079  0C8E  2C87               	goto	u3905
  2080  0C8F  2CA3               	goto	L2
  2081  0C90                     l3095:	
  2082                           ;main.c: 47: } else
  2083                           
  2084                           ;main.c: 46: SPBRG = BR;
  2085                           
  2086                           
  2087                           ;main.c: 48: {
  2088                           ;main.c: 49: BR = (20000000 / (16 * BaudRate)) - 1;
  2089  0C90  1683               	bsf	3,5	;RP0=1, select bank3
  2090  0C91  1703               	bsf	3,6	;RP1=1, select bank3
  2091  0C92  081F               	movf	USARTInit@BaudRate^(0+384),w
  2092  0C93  00A5               	movwf	??_USARTInit^(0+384)
  2093  0C94  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2094  0C95  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2095  0C96  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2096  0C97  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2097  0C98  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2098  0C99  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2099  0C9A  3004               	movlw	4
  2100  0C9B                     u3915:	
  2101  0C9B  1003               	clrc
  2102  0C9C  0DA5               	rlf	??_USARTInit^(0+384),f
  2103  0C9D  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2104  0C9E  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2105  0C9F  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2106  0CA0  3EFF               	addlw	-1
  2107  0CA1  1D03               	skipz
  2108  0CA2  2C9B               	goto	u3915
  2109  0CA3                     L2:	
  2110  0CA3  0828               	movf	(??_USARTInit+3)^(0+384),w
  2111  0CA4  0093               	movwf	(___aldiv@divisor+3)^(0+384)
  2112  0CA5  0827               	movf	(??_USARTInit+2)^(0+384),w
  2113  0CA6  0092               	movwf	(___aldiv@divisor+2)^(0+384)
  2114  0CA7  0826               	movf	(??_USARTInit+1)^(0+384),w
  2115  0CA8  0091               	movwf	(___aldiv@divisor+1)^(0+384)
  2116  0CA9  0825               	movf	??_USARTInit^(0+384),w
  2117  0CAA  0090               	movwf	___aldiv@divisor^(0+384)
  2118  0CAB  3001               	movlw	1
  2119  0CAC  0097               	movwf	(___aldiv@dividend+3)^(0+384)
  2120  0CAD  3031               	movlw	49
  2121  0CAE  0096               	movwf	(___aldiv@dividend+2)^(0+384)
  2122  0CAF  302D               	movlw	45
  2123  0CB0  0095               	movwf	(___aldiv@dividend+1)^(0+384)
  2124  0CB1  3000               	movlw	0
  2125  0CB2  0094               	movwf	___aldiv@dividend^(0+384)
  2126  0CB3  120A  158A  25FF  120A  158A  	fcall	___aldiv
  2127  0CB8  1683               	bsf	3,5	;RP0=1, select bank3
  2128  0CB9  1703               	bsf	3,6	;RP1=1, select bank3
  2129  0CBA  0810               	movf	?___aldiv^(0+384),w
  2130  0CBB  3EFF               	addlw	255
  2131  0CBC  00A9               	movwf	USARTInit@BR^(0+384)
  2132  0CBD  0811               	movf	(?___aldiv^(0+384)+1),w
  2133  0CBE  1803               	skipnc
  2134  0CBF  3E01               	addlw	1
  2135  0CC0  3EFF               	addlw	255
  2136  0CC1  00AA               	movwf	(USARTInit@BR+1)^(0+384)
  2137                           
  2138                           ;main.c: 50: SPBRG = BR;
  2139  0CC2  0829               	movf	USARTInit@BR^(0+384),w
  2140  0CC3  1683               	bsf	3,5	;RP0=1, select bank1
  2141  0CC4  1303               	bcf	3,6	;RP1=0, select bank1
  2142  0CC5  0099               	movwf	25	;volatile
  2143                           
  2144                           ;main.c: 51: }
  2145                           ;main.c: 54: TXSTAbits.CSRC = 1;
  2146  0CC6  1798               	bsf	24,7	;volatile
  2147                           
  2148                           ;main.c: 55: TXSTAbits.TX9 = 0;
  2149  0CC7  1318               	bcf	24,6	;volatile
  2150                           
  2151                           ;main.c: 56: TXSTAbits.TXEN = 1;
  2152  0CC8  1698               	bsf	24,5	;volatile
  2153                           
  2154                           ;main.c: 57: TXSTAbits.SYNC = 0;
  2155  0CC9  1218               	bcf	24,4	;volatile
  2156                           
  2157                           ;main.c: 58: TXSTAbits.BRGH = Mode;
  2158  0CCA  1683               	bsf	3,5	;RP0=1, select bank3
  2159  0CCB  1703               	bsf	3,6	;RP1=1, select bank3
  2160  0CCC  0823               	movf	USARTInit@Mode^(0+384),w
  2161  0CCD  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0CCE  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0CCF  1D03               	skipz
  2164  0CD0  1518               	bsf	24,2	;volatile
  2165  0CD1  1903               	skipnz
  2166  0CD2  1118               	bcf	24,2	;volatile
  2167                           
  2168                           ;main.c: 59: TXSTAbits.TRMT = 1;
  2169  0CD3  1498               	bsf	24,1	;volatile
  2170                           
  2171                           ;main.c: 60: TXSTAbits.TX9D = 0;
  2172  0CD4  1018               	bcf	24,0	;volatile
  2173                           
  2174                           ;main.c: 63: RCSTAbits.SPEN = 1;
  2175  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0CD7  1798               	bsf	24,7	;volatile
  2178                           
  2179                           ;main.c: 64: RCSTAbits.RX9 = 0;
  2180  0CD8  1318               	bcf	24,6	;volatile
  2181                           
  2182                           ;main.c: 65: RCSTAbits.SREN = 0;
  2183  0CD9  1298               	bcf	24,5	;volatile
  2184                           
  2185                           ;main.c: 66: RCSTAbits.CREN = 1;
  2186  0CDA  1618               	bsf	24,4	;volatile
  2187                           
  2188                           ;main.c: 67: RCSTAbits.ADDEN = 0;
  2189  0CDB  1198               	bcf	24,3	;volatile
  2190                           
  2191                           ;main.c: 68: RCSTAbits.FERR = 0;
  2192  0CDC  1118               	bcf	24,2	;volatile
  2193                           
  2194                           ;main.c: 69: RCSTAbits.OERR = 0;
  2195  0CDD  1098               	bcf	24,1	;volatile
  2196                           
  2197                           ;main.c: 70: RCSTAbits.RX9D = 0;
  2198  0CDE  1018               	bcf	24,0	;volatile
  2199                           
  2200                           ;main.c: 73: PIE1bits.RCIE = 1;
  2201  0CDF  1683               	bsf	3,5	;RP0=1, select bank1
  2202  0CE0  1303               	bcf	3,6	;RP1=0, select bank1
  2203  0CE1  168C               	bsf	12,5	;volatile
  2204                           
  2205                           ;main.c: 74: PIR1bits.RCIF = 0;
  2206  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0CE4  128C               	bcf	12,5	;volatile
  2209  0CE5  0008               	return
  2210  0CE6                     __end_of_USARTInit:	
  2211                           
  2212                           	psect	text7
  2213  0DFF                     __ptext7:	
  2214 ;; *************** function ___aldiv *****************
  2215 ;; Defined at:
  2216 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\aldiv.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  divisor         4    0[BANK3 ] long 
  2219 ;;  dividend        4    4[BANK3 ] long 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  quotient        4   11[BANK3 ] long 
  2222 ;;  sign            1   10[BANK3 ] unsigned char 
  2223 ;;  counter         1    9[BANK3 ] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  4    0[BANK3 ] long 
  2226 ;; Registers used:
  2227 ;;		wreg, status,2, status,0
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2233 ;;      Params:         0       0       0       8       0
  2234 ;;      Locals:         0       0       0       6       0
  2235 ;;      Temps:          0       0       0       1       0
  2236 ;;      Totals:         0       0       0      15       0
  2237 ;;Total ram usage:       15 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    6
  2240 ;; This function calls:
  2241 ;;		Nothing
  2242 ;; This function is called by:
  2243 ;;		_USARTInit
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           
  2248                           ;psect for function ___aldiv
  2249  0DFF                     ___aldiv:	
  2250                           
  2251                           ;incstack = 0
  2252 ;; hardware stack exceeded
  2253                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2254  0DFF  1683               	bsf	3,5	;RP0=1, select bank3
  2255  0E00  1703               	bsf	3,6	;RP1=1, select bank3
  2256  0E01  019A               	clrf	___aldiv@sign^(0+384)
  2257  0E02  1F93               	btfss	(___aldiv@divisor+3)^(0+384),7
  2258  0E03  2E11               	goto	l430
  2259  0E04  0990               	comf	___aldiv@divisor^(0+384),f
  2260  0E05  0991               	comf	(___aldiv@divisor+1)^(0+384),f
  2261  0E06  0992               	comf	(___aldiv@divisor+2)^(0+384),f
  2262  0E07  0993               	comf	(___aldiv@divisor+3)^(0+384),f
  2263  0E08  0A90               	incf	___aldiv@divisor^(0+384),f
  2264  0E09  1903               	skipnz
  2265  0E0A  0A91               	incf	(___aldiv@divisor+1)^(0+384),f
  2266  0E0B  1903               	skipnz
  2267  0E0C  0A92               	incf	(___aldiv@divisor+2)^(0+384),f
  2268  0E0D  1903               	skipnz
  2269  0E0E  0A93               	incf	(___aldiv@divisor+3)^(0+384),f
  2270  0E0F  019A               	clrf	___aldiv@sign^(0+384)
  2271  0E10  0A9A               	incf	___aldiv@sign^(0+384),f
  2272  0E11                     l430:	
  2273  0E11  1F97               	btfss	(___aldiv@dividend+3)^(0+384),7
  2274  0E12  2E22               	goto	l3057
  2275  0E13  0994               	comf	___aldiv@dividend^(0+384),f
  2276  0E14  0995               	comf	(___aldiv@dividend+1)^(0+384),f
  2277  0E15  0996               	comf	(___aldiv@dividend+2)^(0+384),f
  2278  0E16  0997               	comf	(___aldiv@dividend+3)^(0+384),f
  2279  0E17  0A94               	incf	___aldiv@dividend^(0+384),f
  2280  0E18  1903               	skipnz
  2281  0E19  0A95               	incf	(___aldiv@dividend+1)^(0+384),f
  2282  0E1A  1903               	skipnz
  2283  0E1B  0A96               	incf	(___aldiv@dividend+2)^(0+384),f
  2284  0E1C  1903               	skipnz
  2285  0E1D  0A97               	incf	(___aldiv@dividend+3)^(0+384),f
  2286  0E1E  3001               	movlw	1
  2287  0E1F  0098               	movwf	??___aldiv^(0+384)
  2288  0E20  0818               	movf	??___aldiv^(0+384),w
  2289  0E21  069A               	xorwf	___aldiv@sign^(0+384),f
  2290  0E22                     l3057:	
  2291  0E22  3000               	movlw	0
  2292  0E23  009E               	movwf	(___aldiv@quotient+3)^(0+384)
  2293  0E24  3000               	movlw	0
  2294  0E25  009D               	movwf	(___aldiv@quotient+2)^(0+384)
  2295  0E26  3000               	movlw	0
  2296  0E27  009C               	movwf	(___aldiv@quotient+1)^(0+384)
  2297  0E28  3000               	movlw	0
  2298  0E29  009B               	movwf	___aldiv@quotient^(0+384)
  2299  0E2A  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2300  0E2B  0412               	iorwf	(___aldiv@divisor+2)^(0+384),w
  2301  0E2C  0411               	iorwf	(___aldiv@divisor+1)^(0+384),w
  2302  0E2D  0410               	iorwf	___aldiv@divisor^(0+384),w
  2303  0E2E  1903               	skipnz
  2304  0E2F  2E77               	goto	l3079
  2305  0E30  0199               	clrf	___aldiv@counter^(0+384)
  2306  0E31  0A99               	incf	___aldiv@counter^(0+384),f
  2307  0E32                     l3065:	
  2308  0E32  1B93               	btfsc	(___aldiv@divisor+3)^(0+384),7
  2309  0E33  2E42               	goto	l3067
  2310  0E34  3001               	movlw	1
  2311  0E35  0098               	movwf	??___aldiv^(0+384)
  2312  0E36                     u3825:	
  2313  0E36  1003               	clrc
  2314  0E37  0D90               	rlf	___aldiv@divisor^(0+384),f
  2315  0E38  0D91               	rlf	(___aldiv@divisor+1)^(0+384),f
  2316  0E39  0D92               	rlf	(___aldiv@divisor+2)^(0+384),f
  2317  0E3A  0D93               	rlf	(___aldiv@divisor+3)^(0+384),f
  2318  0E3B  0B98               	decfsz	??___aldiv^(0+384),f
  2319  0E3C  2E36               	goto	u3825
  2320  0E3D  3001               	movlw	1
  2321  0E3E  0098               	movwf	??___aldiv^(0+384)
  2322  0E3F  0818               	movf	??___aldiv^(0+384),w
  2323  0E40  0799               	addwf	___aldiv@counter^(0+384),f
  2324  0E41  2E32               	goto	l3065
  2325  0E42                     l3067:	
  2326  0E42  3001               	movlw	1
  2327  0E43  0098               	movwf	??___aldiv^(0+384)
  2328  0E44                     u3845:	
  2329  0E44  1003               	clrc
  2330  0E45  0D9B               	rlf	___aldiv@quotient^(0+384),f
  2331  0E46  0D9C               	rlf	(___aldiv@quotient+1)^(0+384),f
  2332  0E47  0D9D               	rlf	(___aldiv@quotient+2)^(0+384),f
  2333  0E48  0D9E               	rlf	(___aldiv@quotient+3)^(0+384),f
  2334  0E49  0B98               	decfsz	??___aldiv^(0+384),f
  2335  0E4A  2E44               	goto	u3845
  2336  0E4B  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2337  0E4C  0217               	subwf	(___aldiv@dividend+3)^(0+384),w
  2338  0E4D  1D03               	skipz
  2339  0E4E  2E59               	goto	u3855
  2340  0E4F  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2341  0E50  0216               	subwf	(___aldiv@dividend+2)^(0+384),w
  2342  0E51  1D03               	skipz
  2343  0E52  2E59               	goto	u3855
  2344  0E53  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2345  0E54  0215               	subwf	(___aldiv@dividend+1)^(0+384),w
  2346  0E55  1D03               	skipz
  2347  0E56  2E59               	goto	u3855
  2348  0E57  0810               	movf	___aldiv@divisor^(0+384),w
  2349  0E58  0214               	subwf	___aldiv@dividend^(0+384),w
  2350  0E59                     u3855:	
  2351  0E59  1C03               	skipc
  2352  0E5A  2E6A               	goto	l3075
  2353  0E5B  0810               	movf	___aldiv@divisor^(0+384),w
  2354  0E5C  0294               	subwf	___aldiv@dividend^(0+384),f
  2355  0E5D  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2356  0E5E  1C03               	skipc
  2357  0E5F  0F11               	incfsz	(___aldiv@divisor+1)^(0+384),w
  2358  0E60  0295               	subwf	(___aldiv@dividend+1)^(0+384),f
  2359  0E61  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2360  0E62  1C03               	skipc
  2361  0E63  0F12               	incfsz	(___aldiv@divisor+2)^(0+384),w
  2362  0E64  0296               	subwf	(___aldiv@dividend+2)^(0+384),f
  2363  0E65  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2364  0E66  1C03               	skipc
  2365  0E67  0F13               	incfsz	(___aldiv@divisor+3)^(0+384),w
  2366  0E68  0297               	subwf	(___aldiv@dividend+3)^(0+384),f
  2367  0E69  141B               	bsf	___aldiv@quotient^(0+384),0
  2368  0E6A                     l3075:	
  2369  0E6A  3001               	movlw	1
  2370  0E6B                     u3865:	
  2371  0E6B  1003               	clrc
  2372  0E6C  0C93               	rrf	(___aldiv@divisor+3)^(0+384),f
  2373  0E6D  0C92               	rrf	(___aldiv@divisor+2)^(0+384),f
  2374  0E6E  0C91               	rrf	(___aldiv@divisor+1)^(0+384),f
  2375  0E6F  0C90               	rrf	___aldiv@divisor^(0+384),f
  2376  0E70  3EFF               	addlw	-1
  2377  0E71  1D03               	skipz
  2378  0E72  2E6B               	goto	u3865
  2379  0E73  3001               	movlw	1
  2380  0E74  0299               	subwf	___aldiv@counter^(0+384),f
  2381  0E75  1D03               	btfss	3,2
  2382  0E76  2E42               	goto	l3067
  2383  0E77                     l3079:	
  2384  0E77  081A               	movf	___aldiv@sign^(0+384),w
  2385  0E78  1903               	btfsc	3,2
  2386  0E79  2E85               	goto	l3083
  2387  0E7A  099B               	comf	___aldiv@quotient^(0+384),f
  2388  0E7B  099C               	comf	(___aldiv@quotient+1)^(0+384),f
  2389  0E7C  099D               	comf	(___aldiv@quotient+2)^(0+384),f
  2390  0E7D  099E               	comf	(___aldiv@quotient+3)^(0+384),f
  2391  0E7E  0A9B               	incf	___aldiv@quotient^(0+384),f
  2392  0E7F  1903               	skipnz
  2393  0E80  0A9C               	incf	(___aldiv@quotient+1)^(0+384),f
  2394  0E81  1903               	skipnz
  2395  0E82  0A9D               	incf	(___aldiv@quotient+2)^(0+384),f
  2396  0E83  1903               	skipnz
  2397  0E84  0A9E               	incf	(___aldiv@quotient+3)^(0+384),f
  2398  0E85                     l3083:	
  2399  0E85  081E               	movf	(___aldiv@quotient+3)^(0+384),w
  2400  0E86  0093               	movwf	(?___aldiv+3)^(0+384)
  2401  0E87  081D               	movf	(___aldiv@quotient+2)^(0+384),w
  2402  0E88  0092               	movwf	(?___aldiv+2)^(0+384)
  2403  0E89  081C               	movf	(___aldiv@quotient+1)^(0+384),w
  2404  0E8A  0091               	movwf	(?___aldiv+1)^(0+384)
  2405  0E8B  081B               	movf	___aldiv@quotient^(0+384),w
  2406  0E8C  0090               	movwf	?___aldiv^(0+384)
  2407  0E8D  0008               	return
  2408  0E8E                     __end_of___aldiv:	
  2409                           
  2410                           	psect	text8
  2411  090F                     __ptext8:	
  2412 ;; *************** function _LCDClear *****************
  2413 ;; Defined at:
  2414 ;;		line 179 in file "lcd_4bit.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		wreg, status,2, status,0, pclath, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2428 ;;      Params:         0       0       0       0       0
  2429 ;;      Locals:         0       0       0       0       0
  2430 ;;      Temps:          0       0       0       2       0
  2431 ;;      Totals:         0       0       0       2       0
  2432 ;;Total ram usage:        2 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    8
  2435 ;; This function calls:
  2436 ;;		_lcd_envia_byte
  2437 ;; This function is called by:
  2438 ;;		_inicialize
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _LCDClear
  2444  090F                     _LCDClear:	
  2445                           
  2446                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2447                           
  2448                           ;incstack = 0
  2449 ;; hardware stack exceeded
  2450                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2451  090F  1683               	bsf	3,5	;RP0=1, select bank3
  2452  0910  1703               	bsf	3,6	;RP1=1, select bank3
  2453  0911  0192               	clrf	lcd_envia_byte@n^(0+384)
  2454  0912  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2455  0913  3000               	movlw	0
  2456  0914  160A  118A  2792  120A  158A  	fcall	_lcd_envia_byte
  2457                           
  2458                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2459  0919  3041               	movlw	65
  2460  091A  1683               	bsf	3,5	;RP0=1, select bank3
  2461  091B  1703               	bsf	3,6	;RP1=1, select bank3
  2462  091C  0096               	movwf	(??_LCDClear^(0+384)+1)
  2463  091D  30EE               	movlw	238
  2464  091E  0095               	movwf	??_LCDClear^(0+384)
  2465  091F                     u4307:	
  2466  091F  0B95               	decfsz	??_LCDClear^(0+384),f
  2467  0920  291F               	goto	u4307
  2468  0921  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2469  0922  291F               	goto	u4307
  2470  0923  0000               	nop
  2471                           
  2472                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2473  0924  300C               	movlw	12
  2474  0925  1683               	bsf	3,5	;RP0=1, select bank3
  2475  0926  1703               	bsf	3,6	;RP1=1, select bank3
  2476  0927  0095               	movwf	??_LCDClear^(0+384)
  2477  0928  0815               	movf	??_LCDClear^(0+384),w
  2478  0929  0092               	movwf	lcd_envia_byte@n^(0+384)
  2479  092A  3000               	movlw	0
  2480  092B  160A  118A  2792  120A  158A  	fcall	_lcd_envia_byte
  2481                           
  2482                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2483  0930  30F9               	movlw	249
  2484  0931  1683               	bsf	3,5	;RP0=1, select bank3
  2485  0932  1703               	bsf	3,6	;RP1=1, select bank3
  2486  0933  0095               	movwf	??_LCDClear^(0+384)
  2487  0934                     u4317:	
  2488  0934  0000               	nop
  2489  0935  0B95               	decfsz	??_LCDClear^(0+384),f
  2490  0936  2934               	goto	u4317
  2491  0937  2938               	nop2	;nop
  2492  0938  0000               	nop
  2493                           
  2494                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2495  0939  3006               	movlw	6
  2496  093A  1683               	bsf	3,5	;RP0=1, select bank3
  2497  093B  1703               	bsf	3,6	;RP1=1, select bank3
  2498  093C  0095               	movwf	??_LCDClear^(0+384)
  2499  093D  0815               	movf	??_LCDClear^(0+384),w
  2500  093E  0092               	movwf	lcd_envia_byte@n^(0+384)
  2501  093F  3000               	movlw	0
  2502  0940  160A  118A  2792  120A  158A  	fcall	_lcd_envia_byte
  2503                           
  2504                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2505  0945  30F9               	movlw	249
  2506  0946  1683               	bsf	3,5	;RP0=1, select bank3
  2507  0947  1703               	bsf	3,6	;RP1=1, select bank3
  2508  0948  0095               	movwf	??_LCDClear^(0+384)
  2509  0949                     u4327:	
  2510  0949  0000               	nop
  2511  094A  0B95               	decfsz	??_LCDClear^(0+384),f
  2512  094B  2949               	goto	u4327
  2513  094C  294D               	nop2	;nop
  2514  094D  0000               	nop
  2515  094E  0008               	return
  2516  094F                     __end_of_LCDClear:	
  2517                           
  2518                           	psect	text9
  2519  1792                     __ptext9:	
  2520 ;; *************** function _lcd_envia_byte *****************
  2521 ;; Defined at:
  2522 ;;		line 53 in file "lcd_4bit.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  address         1    wreg     unsigned char 
  2525 ;;  n               1    2[BANK3 ] unsigned char 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  address         1    4[BANK3 ] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;		None               void
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, pclath, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2537 ;;      Params:         0       0       0       1       0
  2538 ;;      Locals:         0       0       0       1       0
  2539 ;;      Temps:          0       0       0       1       0
  2540 ;;      Totals:         0       0       0       3       0
  2541 ;;Total ram usage:        3 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    7
  2544 ;; This function calls:
  2545 ;;		_lcd_envia_nibble
  2546 ;; This function is called by:
  2547 ;;		_init_lcd_4bit
  2548 ;;		_lcd_gotoxy
  2549 ;;		_lcd_putc
  2550 ;;		_LCDClear
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function _lcd_envia_byte
  2556  1792                     _lcd_envia_byte:	
  2557                           
  2558                           ;incstack = 0
  2559 ;; hardware stack exceeded
  2560                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2561                           ;lcd_envia_byte@address stored from wreg
  2562  1792  1683               	bsf	3,5	;RP0=1, select bank3
  2563  1793  1703               	bsf	3,6	;RP1=1, select bank3
  2564  1794  0094               	movwf	lcd_envia_byte@address^(0+384)
  2565                           
  2566                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2567  1795  1283               	bcf	3,5	;RP0=0, select bank0
  2568  1796  1303               	bcf	3,6	;RP1=0, select bank0
  2569  1797  1286               	bcf	6,5	;volatile
  2570                           
  2571                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2572  1798  3063               	movlw	99
  2573  1799  1683               	bsf	3,5	;RP0=1, select bank3
  2574  179A  1703               	bsf	3,6	;RP1=1, select bank3
  2575  179B  0093               	movwf	??_lcd_envia_byte^(0+384)
  2576  179C                     u4337:	
  2577  179C  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2578  179D  2F9C               	goto	u4337
  2579  179E  2F9F               	nop2	;nop
  2580                           
  2581                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2582  179F  1683               	bsf	3,5	;RP0=1, select bank3
  2583  17A0  1703               	bsf	3,6	;RP1=1, select bank3
  2584  17A1  0814               	movf	lcd_envia_byte@address^(0+384),w
  2585  17A2  1903               	btfsc	3,2
  2586  17A3  2FA8               	goto	l189
  2587  17A4  1283               	bcf	3,5	;RP0=0, select bank0
  2588  17A5  1303               	bcf	3,6	;RP1=0, select bank0
  2589  17A6  1686               	bsf	6,5	;volatile
  2590  17A7  2FAB               	goto	l190
  2591  17A8                     l189:	
  2592                           
  2593                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2594  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  2595  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  2596  17AA  1286               	bcf	6,5	;volatile
  2597  17AB                     l190:	
  2598                           
  2599                           ;lcd_4bit.c: 61: _delay(1);
  2600  17AB  0000               	nop
  2601                           
  2602                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2603  17AC  1283               	bcf	3,5	;RP0=0, select bank0
  2604  17AD  1303               	bcf	3,6	;RP1=0, select bank0
  2605  17AE  1206               	bcf	6,4	;volatile
  2606                           
  2607                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2608  17AF  1683               	bsf	3,5	;RP0=1, select bank3
  2609  17B0  1703               	bsf	3,6	;RP1=1, select bank3
  2610  17B1  0812               	movf	lcd_envia_byte@n^(0+384),w
  2611  17B2  0093               	movwf	??_lcd_envia_byte^(0+384)
  2612  17B3  3004               	movlw	4
  2613  17B4                     u3765:	
  2614  17B4  1003               	clrc
  2615  17B5  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2616  17B6  3EFF               	addlw	-1
  2617  17B7  1D03               	skipz
  2618  17B8  2FB4               	goto	u3765
  2619  17B9  0813               	movf	??_lcd_envia_byte^(0+384),w
  2620  17BA  120A  158A  222A  160A  118A  	fcall	_lcd_envia_nibble
  2621                           
  2622                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2623  17BF  1683               	bsf	3,5	;RP0=1, select bank3
  2624  17C0  1703               	bsf	3,6	;RP1=1, select bank3
  2625  17C1  0812               	movf	lcd_envia_byte@n^(0+384),w
  2626  17C2  390F               	andlw	15
  2627  17C3  120A  158A  222A   	fcall	_lcd_envia_nibble
  2628  17C6  0008               	return
  2629  17C7                     __end_of_lcd_envia_byte:	
  2630                           
  2631                           	psect	text10
  2632  0A2A                     __ptext10:	
  2633 ;; *************** function _lcd_envia_nibble *****************
  2634 ;; Defined at:
  2635 ;;		line 39 in file "lcd_4bit.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  n               1    wreg     unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  n               1    1[BANK3 ] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;		None               void
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2649 ;;      Params:         0       0       0       0       0
  2650 ;;      Locals:         0       0       0       1       0
  2651 ;;      Temps:          0       0       0       1       0
  2652 ;;      Totals:         0       0       0       2       0
  2653 ;;Total ram usage:        2 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    6
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_init_lcd_4bit
  2660 ;;		_lcd_envia_byte
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _lcd_envia_nibble
  2666  0A2A                     _lcd_envia_nibble:	
  2667                           
  2668                           ;incstack = 0
  2669 ;; hardware stack exceeded
  2670                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2671                           ;lcd_envia_nibble@n stored from wreg
  2672  0A2A  1683               	bsf	3,5	;RP0=1, select bank3
  2673  0A2B  1703               	bsf	3,6	;RP1=1, select bank3
  2674  0A2C  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2675                           
  2676                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2677  0A2D  3000               	movlw	0
  2678  0A2E  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2679  0A2F  3001               	movlw	1
  2680  0A30  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2681  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0A33  0806               	movf	6,w	;volatile
  2684  0A34  1683               	bsf	3,5	;RP0=1, select bank3
  2685  0A35  1703               	bsf	3,6	;RP1=1, select bank3
  2686  0A36  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2687  0A37  39FE               	andlw	-2
  2688  0A38  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2689  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0A3B  0086               	movwf	6	;volatile
  2692                           
  2693                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2694  0A3C  3000               	movlw	0
  2695  0A3D  1683               	bsf	3,5	;RP0=1, select bank3
  2696  0A3E  1703               	bsf	3,6	;RP1=1, select bank3
  2697  0A3F  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2698  0A40  3001               	movlw	1
  2699  0A41  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2700  0A42  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2701  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0A44  1303               	bcf	3,6	;RP1=0, select bank0
  2703  0A45  0806               	movf	6,w	;volatile
  2704  0A46  1683               	bsf	3,5	;RP0=1, select bank3
  2705  0A47  1703               	bsf	3,6	;RP1=1, select bank3
  2706  0A48  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2707  0A49  39FD               	andlw	-3
  2708  0A4A  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2709  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  2710  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  2711  0A4D  0086               	movwf	6	;volatile
  2712                           
  2713                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2714  0A4E  3000               	movlw	0
  2715  0A4F  1683               	bsf	3,5	;RP0=1, select bank3
  2716  0A50  1703               	bsf	3,6	;RP1=1, select bank3
  2717  0A51  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2718  0A52  3001               	movlw	1
  2719  0A53  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2720  0A54  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2721  0A55  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2722  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  2723  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  2724  0A58  0806               	movf	6,w	;volatile
  2725  0A59  1683               	bsf	3,5	;RP0=1, select bank3
  2726  0A5A  1703               	bsf	3,6	;RP1=1, select bank3
  2727  0A5B  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2728  0A5C  39FB               	andlw	-5
  2729  0A5D  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2730  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
  2732  0A60  0086               	movwf	6	;volatile
  2733                           
  2734                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2735  0A61  3000               	movlw	0
  2736  0A62  1683               	bsf	3,5	;RP0=1, select bank3
  2737  0A63  1703               	bsf	3,6	;RP1=1, select bank3
  2738  0A64  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2739  0A65  3001               	movlw	1
  2740  0A66  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2741  0A67  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2742  0A68  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2743  0A69  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2744  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  2745  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  2746  0A6C  0806               	movf	6,w	;volatile
  2747  0A6D  1683               	bsf	3,5	;RP0=1, select bank3
  2748  0A6E  1703               	bsf	3,6	;RP1=1, select bank3
  2749  0A6F  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2750  0A70  39F7               	andlw	-9
  2751  0A71  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2752  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  2753  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  2754  0A74  0086               	movwf	6	;volatile
  2755                           
  2756                           ;lcd_4bit.c: 46: _delay(1);
  2757  0A75  0000               	nop
  2758                           
  2759                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2760  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  2762  0A78  1606               	bsf	6,4	;volatile
  2763                           
  2764                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2765  0A79  3003               	movlw	3
  2766  0A7A  1683               	bsf	3,5	;RP0=1, select bank3
  2767  0A7B  1703               	bsf	3,6	;RP1=1, select bank3
  2768  0A7C  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2769  0A7D                     u4347:	
  2770  0A7D  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2771  0A7E  2A7D               	goto	u4347
  2772                           
  2773                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2774  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  2775  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  2776  0A81  1206               	bcf	6,4	;volatile
  2777  0A82  0008               	return
  2778  0A83                     __end_of_lcd_envia_nibble:	
  2779                           
  2780                           	psect	text11
  2781  15D4                     __ptext11:	
  2782 ;; *************** function _ADCInit *****************
  2783 ;; Defined at:
  2784 ;;		line 143 in file "main.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;		None
  2789 ;; Return value:  Size  Location     Type
  2790 ;;		None               void
  2791 ;; Registers used:
  2792 ;;		None
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2798 ;;      Params:         0       0       0       0       0
  2799 ;;      Locals:         0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0
  2801 ;;      Totals:         0       0       0       0       0
  2802 ;;Total ram usage:        0 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    6
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_inicialize
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           
  2813                           ;psect for function _ADCInit
  2814  15D4                     _ADCInit:	
  2815                           
  2816                           ;main.c: 145: ADCON1bits.ADFM = 1;
  2817                           
  2818                           ;incstack = 0
  2819                           ; Regs used in _ADCInit: []
  2820  15D4  1683               	bsf	3,5	;RP0=1, select bank1
  2821  15D5  1303               	bcf	3,6	;RP1=0, select bank1
  2822  15D6  179F               	bsf	31,7	;volatile
  2823                           
  2824                           ;main.c: 146: ADCON1bits.PCFG3 = 0;
  2825  15D7  119F               	bcf	31,3	;volatile
  2826                           
  2827                           ;main.c: 147: ADCON1bits.PCFG2 = 0;
  2828  15D8  111F               	bcf	31,2	;volatile
  2829                           
  2830                           ;main.c: 148: ADCON1bits.PCFG1 = 0;
  2831  15D9  109F               	bcf	31,1	;volatile
  2832                           
  2833                           ;main.c: 149: ADCON1bits.PCFG0 = 0;
  2834  15DA  101F               	bcf	31,0	;volatile
  2835                           
  2836                           ;main.c: 152: ADCON0bits.ADCS1 = 1;
  2837  15DB  1283               	bcf	3,5	;RP0=0, select bank0
  2838  15DC  1303               	bcf	3,6	;RP1=0, select bank0
  2839  15DD  179F               	bsf	31,7	;volatile
  2840                           
  2841                           ;main.c: 153: ADCON0bits.ADCS0 = 0;
  2842  15DE  131F               	bcf	31,6	;volatile
  2843                           
  2844                           ;main.c: 157: ADCON0bits.ADON = 1;
  2845  15DF  141F               	bsf	31,0	;volatile
  2846                           
  2847                           ;main.c: 160: PIE1bits.ADIE = 1;
  2848  15E0  1683               	bsf	3,5	;RP0=1, select bank1
  2849  15E1  1303               	bcf	3,6	;RP1=0, select bank1
  2850  15E2  170C               	bsf	12,6	;volatile
  2851                           
  2852                           ;main.c: 161: PIR1bits.ADIF = 0;
  2853  15E3  1283               	bcf	3,5	;RP0=0, select bank0
  2854  15E4  1303               	bcf	3,6	;RP1=0, select bank0
  2855  15E5  130C               	bcf	12,6	;volatile
  2856  15E6  0008               	return
  2857  15E7                     __end_of_ADCInit:	
  2858                           
  2859                           	psect	text12
  2860  0C0C                     __ptext12:	
  2861 ;; *************** function _ativar *****************
  2862 ;; Defined at:
  2863 ;;		line 330 in file "main.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;		None               void
  2870 ;; Registers used:
  2871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2877 ;;      Params:         0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0
  2879 ;;      Temps:          0       0       0       3       0
  2880 ;;      Totals:         0       0       0       3       0
  2881 ;;Total ram usage:        3 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    8
  2884 ;; This function calls:
  2885 ;;		_ADCRead
  2886 ;;		_USARTWriteString
  2887 ;; This function is called by:
  2888 ;;		_main
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _ativar
  2894  0C0C                     _ativar:	
  2895                           
  2896                           ;main.c: 331: if (PORTCbits.RC3 == 1) {
  2897                           
  2898                           ;incstack = 0
  2899 ;; hardware stack exceeded
  2900                           ; Regs used in _ativar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2901  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0C0E  1D87               	btfss	7,3	;volatile
  2904  0C0F  2C3A               	goto	l3263
  2905                           
  2906                           ;main.c: 332: _delay((unsigned long)((300)*(20000000/4000.0)));
  2907  0C10  3008               	movlw	8
  2908  0C11  1683               	bsf	3,5	;RP0=1, select bank3
  2909  0C12  1703               	bsf	3,6	;RP1=1, select bank3
  2910  0C13  0095               	movwf	(??_ativar^(0+384)+2)
  2911  0C14  309D               	movlw	157
  2912  0C15  0094               	movwf	(??_ativar^(0+384)+1)
  2913  0C16  300B               	movlw	11
  2914  0C17  0093               	movwf	??_ativar^(0+384)
  2915  0C18                     u4357:	
  2916  0C18  0B93               	decfsz	??_ativar^(0+384),f
  2917  0C19  2C18               	goto	u4357
  2918  0C1A  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2919  0C1B  2C18               	goto	u4357
  2920  0C1C  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2921  0C1D  2C18               	goto	u4357
  2922  0C1E  2C1F               	nop2
  2923                           
  2924                           ;main.c: 333: if (flag_Start == 0) {
  2925  0C1F  1683               	bsf	3,5	;RP0=1, select bank1
  2926  0C20  1303               	bcf	3,6	;RP1=0, select bank1
  2927  0C21  0848               	movf	(_flag_Start+1)^(0+128),w
  2928  0C22  0447               	iorwf	_flag_Start^(0+128),w
  2929  0C23  1D03               	skipz
  2930  0C24  2C2B               	goto	l3259
  2931                           
  2932                           ;main.c: 335: flag_Start = 1;
  2933  0C25  3001               	movlw	1
  2934  0C26  00C7               	movwf	_flag_Start^(0+128)
  2935  0C27  3000               	movlw	0
  2936  0C28  00C8               	movwf	(_flag_Start^(0+128)+1)
  2937                           
  2938                           ;main.c: 336: USARTWriteString("L");
  2939  0C29  308C               	movlw	low (STR_13-__stringbase)
  2940  0C2A  2C30               	goto	L3
  2941  0C2B                     l3259:	
  2942                           ;main.c: 337: } else {
  2943                           
  2944                           
  2945                           ;main.c: 338: flag_Start = 0;
  2946  0C2B  1683               	bsf	3,5	;RP0=1, select bank1
  2947  0C2C  1303               	bcf	3,6	;RP1=0, select bank1
  2948  0C2D  01C7               	clrf	_flag_Start^(0+128)
  2949  0C2E  01C8               	clrf	(_flag_Start+1)^(0+128)
  2950                           
  2951                           ;main.c: 339: USARTWriteString("l");
  2952  0C2F  3090               	movlw	low (STR_14-__stringbase)
  2953  0C30                     L3:	
  2954  0C30  1683               	bsf	3,5	;RP0=1, select bank3
  2955  0C31  1703               	bsf	3,6	;RP1=1, select bank3
  2956  0C32  0091               	movwf	USARTWriteString@str^(0+384)
  2957  0C33  3080               	movlw	128
  2958  0C34  0092               	movwf	(USARTWriteString@str+1)^(0+384)
  2959  0C35  160A  118A  2761  120A  158A  	fcall	_USARTWriteString
  2960  0C3A                     l3263:	
  2961                           
  2962                           ;main.c: 341: }
  2963                           ;main.c: 342: }
  2964                           ;main.c: 344: if (flag_Start == 1) {
  2965  0C3A  3001               	movlw	1
  2966  0C3B  1683               	bsf	3,5	;RP0=1, select bank1
  2967  0C3C  1303               	bcf	3,6	;RP1=0, select bank1
  2968  0C3D  0647               	xorwf	_flag_Start^(0+128),w
  2969  0C3E  0448               	iorwf	(_flag_Start+1)^(0+128),w
  2970  0C3F  1D03               	skipz
  2971  0C40  0008               	return
  2972                           
  2973                           ;main.c: 345: ADCRead(0);
  2974  0C41  3000               	movlw	0
  2975  0C42  1683               	bsf	3,5	;RP0=1, select bank3
  2976  0C43  1703               	bsf	3,6	;RP1=1, select bank3
  2977  0C44  0090               	movwf	ADCRead@ch^(0+384)
  2978  0C45  3000               	movlw	0
  2979  0C46  0091               	movwf	(ADCRead@ch^(0+384)+1)
  2980  0C47  160A  118A  2734  120A  158A  	fcall	_ADCRead
  2981                           
  2982                           ;main.c: 346: _delay((unsigned long)((300)*(20000000/4000.0)));
  2983  0C4C  3008               	movlw	8
  2984  0C4D  1683               	bsf	3,5	;RP0=1, select bank3
  2985  0C4E  1703               	bsf	3,6	;RP1=1, select bank3
  2986  0C4F  0095               	movwf	(??_ativar^(0+384)+2)
  2987  0C50  309D               	movlw	157
  2988  0C51  0094               	movwf	(??_ativar^(0+384)+1)
  2989  0C52  300B               	movlw	11
  2990  0C53  0093               	movwf	??_ativar^(0+384)
  2991  0C54                     u4367:	
  2992  0C54  0B93               	decfsz	??_ativar^(0+384),f
  2993  0C55  2C54               	goto	u4367
  2994  0C56  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2995  0C57  2C54               	goto	u4367
  2996  0C58  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2997  0C59  2C54               	goto	u4367
  2998  0C5A  2C5B               	nop2
  2999                           
  3000                           ;main.c: 347: ADCRead(1);
  3001  0C5B  3001               	movlw	1
  3002  0C5C  1683               	bsf	3,5	;RP0=1, select bank3
  3003  0C5D  1703               	bsf	3,6	;RP1=1, select bank3
  3004  0C5E  0090               	movwf	ADCRead@ch^(0+384)
  3005  0C5F  3000               	movlw	0
  3006  0C60  0091               	movwf	(ADCRead@ch^(0+384)+1)
  3007  0C61  160A  118A  2734  120A  158A  	fcall	_ADCRead
  3008                           
  3009                           ;main.c: 348: _delay((unsigned long)((300)*(20000000/4000.0)));
  3010  0C66  3008               	movlw	8
  3011  0C67  1683               	bsf	3,5	;RP0=1, select bank3
  3012  0C68  1703               	bsf	3,6	;RP1=1, select bank3
  3013  0C69  0095               	movwf	(??_ativar^(0+384)+2)
  3014  0C6A  309D               	movlw	157
  3015  0C6B  0094               	movwf	(??_ativar^(0+384)+1)
  3016  0C6C  300B               	movlw	11
  3017  0C6D  0093               	movwf	??_ativar^(0+384)
  3018  0C6E                     u4377:	
  3019  0C6E  0B93               	decfsz	??_ativar^(0+384),f
  3020  0C6F  2C6E               	goto	u4377
  3021  0C70  0B94               	decfsz	(??_ativar^(0+384)+1),f
  3022  0C71  2C6E               	goto	u4377
  3023  0C72  0B95               	decfsz	(??_ativar^(0+384)+2),f
  3024  0C73  2C6E               	goto	u4377
  3025  0C74  2C75               	nop2
  3026  0C75  0008               	return
  3027  0C76                     __end_of_ativar:	
  3028                           
  3029                           	psect	text13
  3030  1761                     __ptext13:	
  3031 ;; *************** function _USARTWriteString *****************
  3032 ;; Defined at:
  3033 ;;		line 86 in file "main.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;  str             2    1[BANK3 ] PTR const unsigned char 
  3036 ;;		 -> ftoa@buf(17), STR_14(2), STR_13(2), STR_11(2), 
  3037 ;;		 -> STR_10(2), STR_7(3), STR_3(3), STR_1(40), 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;		None               void
  3042 ;; Registers used:
  3043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3049 ;;      Params:         0       0       0       2       0
  3050 ;;      Locals:         0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0
  3052 ;;      Totals:         0       0       0       2       0
  3053 ;;Total ram usage:        2 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    7
  3056 ;; This function calls:
  3057 ;;		_USARTWriteChar
  3058 ;; This function is called by:
  3059 ;;		_ativar
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           
  3064                           ;psect for function _USARTWriteString
  3065  1761                     _USARTWriteString:	
  3066  1761                     l3139:	
  3067                           ;main.c: 88: while (*str != '\0') {
  3068                           
  3069                           ;incstack = 0
  3070 ;; hardware stack exceeded
  3071                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3072                           
  3073  1761  1683               	bsf	3,5	;RP0=1, select bank3
  3074  1762  1703               	bsf	3,6	;RP1=1, select bank3
  3075  1763  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  3076  1764  1283               	bcf	3,5	;RP0=0, select bank0
  3077  1765  1303               	bcf	3,6	;RP1=0, select bank0
  3078  1766  00FF               	movwf	127
  3079  1767  1683               	bsf	3,5	;RP0=1, select bank3
  3080  1768  1703               	bsf	3,6	;RP1=1, select bank3
  3081  1769  0811               	movf	USARTWriteString@str^(0+384),w
  3082  176A  0084               	movwf	4
  3083  176B  1283               	bcf	3,5	;RP0=0, select bank0
  3084  176C  1303               	bcf	3,6	;RP1=0, select bank0
  3085  176D  120A  158A  2000  160A  118A  	fcall	stringtab
  3086  1772  3800               	iorlw	0
  3087  1773  1903               	btfsc	3,2
  3088  1774  0008               	return
  3089                           
  3090                           ;main.c: 90: USARTWriteChar(*str);
  3091  1775  1683               	bsf	3,5	;RP0=1, select bank3
  3092  1776  1703               	bsf	3,6	;RP1=1, select bank3
  3093  1777  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  3094  1778  1283               	bcf	3,5	;RP0=0, select bank0
  3095  1779  1303               	bcf	3,6	;RP1=0, select bank0
  3096  177A  00FF               	movwf	127
  3097  177B  1683               	bsf	3,5	;RP0=1, select bank3
  3098  177C  1703               	bsf	3,6	;RP1=1, select bank3
  3099  177D  0811               	movf	USARTWriteString@str^(0+384),w
  3100  177E  0084               	movwf	4
  3101  177F  1283               	bcf	3,5	;RP0=0, select bank0
  3102  1780  1303               	bcf	3,6	;RP1=0, select bank0
  3103  1781  120A  158A  2000  160A  118A  	fcall	stringtab
  3104  1786  160A  118A  25A5  160A  118A  	fcall	_USARTWriteChar
  3105                           
  3106                           ;main.c: 91: str++;
  3107  178B  3001               	movlw	1
  3108  178C  1683               	bsf	3,5	;RP0=1, select bank3
  3109  178D  1703               	bsf	3,6	;RP1=1, select bank3
  3110  178E  0791               	addwf	USARTWriteString@str^(0+384),f
  3111  178F  1803               	skipnc
  3112  1790  0A92               	incf	(USARTWriteString@str+1)^(0+384),f
  3113  1791  2F61               	goto	l3139
  3114  1792                     __end_of_USARTWriteString:	
  3115                           
  3116                           	psect	text14
  3117  15A5                     __ptext14:	
  3118 ;; *************** function _USARTWriteChar *****************
  3119 ;; Defined at:
  3120 ;;		line 79 in file "main.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  USARTData       1    wreg     unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  USARTData       1    0[BANK3 ] unsigned char 
  3125 ;; Return value:  Size  Location     Type
  3126 ;;		None               void
  3127 ;; Registers used:
  3128 ;;		wreg
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3134 ;;      Params:         0       0       0       0       0
  3135 ;;      Locals:         0       0       0       1       0
  3136 ;;      Temps:          0       0       0       0       0
  3137 ;;      Totals:         0       0       0       1       0
  3138 ;;Total ram usage:        1 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    6
  3141 ;; This function calls:
  3142 ;;		Nothing
  3143 ;; This function is called by:
  3144 ;;		_USARTWriteString
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _USARTWriteChar
  3150  15A5                     _USARTWriteChar:	
  3151                           
  3152                           ;incstack = 0
  3153 ;; hardware stack exceeded
  3154                           ; Regs used in _USARTWriteChar: [wreg]
  3155                           ;USARTWriteChar@USARTData stored from wreg
  3156  15A5  1683               	bsf	3,5	;RP0=1, select bank3
  3157  15A6  1703               	bsf	3,6	;RP1=1, select bank3
  3158  15A7  0090               	movwf	USARTWriteChar@USARTData^(0+384)
  3159  15A8                     l92:	
  3160                           ;main.c: 80: while (!PIR1bits.TXIF);
  3161                           
  3162  15A8  1283               	bcf	3,5	;RP0=0, select bank0
  3163  15A9  1303               	bcf	3,6	;RP1=0, select bank0
  3164  15AA  1E0C               	btfss	12,4	;volatile
  3165  15AB  2DA8               	goto	l92
  3166                           
  3167                           ;main.c: 81: TXREG = USARTData;
  3168  15AC  1683               	bsf	3,5	;RP0=1, select bank3
  3169  15AD  1703               	bsf	3,6	;RP1=1, select bank3
  3170  15AE  0810               	movf	USARTWriteChar@USARTData^(0+384),w
  3171  15AF  1283               	bcf	3,5	;RP0=0, select bank0
  3172  15B0  1303               	bcf	3,6	;RP1=0, select bank0
  3173  15B1  0099               	movwf	25	;volatile
  3174  15B2  0008               	return
  3175  15B3                     __end_of_USARTWriteChar:	
  3176                           
  3177                           	psect	text15
  3178  1734                     __ptext15:	
  3179 ;; *************** function _ADCRead *****************
  3180 ;; Defined at:
  3181 ;;		line 165 in file "main.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  ch              2    0[BANK3 ] int 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;		None               void
  3188 ;; Registers used:
  3189 ;;		wreg, status,2, status,0
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3195 ;;      Params:         0       0       0       2       0
  3196 ;;      Locals:         0       0       0       0       0
  3197 ;;      Temps:          0       0       0       1       0
  3198 ;;      Totals:         0       0       0       3       0
  3199 ;;Total ram usage:        3 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    6
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_ativar
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           
  3210                           ;psect for function _ADCRead
  3211  1734                     _ADCRead:	
  3212                           
  3213                           ;main.c: 168: flag_ch = ch;
  3214                           
  3215                           ;incstack = 0
  3216                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  3217  1734  1683               	bsf	3,5	;RP0=1, select bank3
  3218  1735  1703               	bsf	3,6	;RP1=1, select bank3
  3219  1736  0811               	movf	(ADCRead@ch+1)^(0+384),w
  3220  1737  1683               	bsf	3,5	;RP0=1, select bank1
  3221  1738  1303               	bcf	3,6	;RP1=0, select bank1
  3222  1739  01DB               	clrf	(_flag_ch+1)^(0+128)
  3223  173A  07DB               	addwf	(_flag_ch+1)^(0+128),f
  3224  173B  1683               	bsf	3,5	;RP0=1, select bank3
  3225  173C  1703               	bsf	3,6	;RP1=1, select bank3
  3226  173D  0810               	movf	ADCRead@ch^(0+384),w
  3227  173E  1683               	bsf	3,5	;RP0=1, select bank1
  3228  173F  1303               	bcf	3,6	;RP1=0, select bank1
  3229  1740  01DA               	clrf	_flag_ch^(0+128)
  3230  1741  07DA               	addwf	_flag_ch^(0+128),f
  3231                           
  3232                           ;main.c: 169: ADCON0bits.CHS = ch;
  3233  1742  1683               	bsf	3,5	;RP0=1, select bank3
  3234  1743  1703               	bsf	3,6	;RP1=1, select bank3
  3235  1744  0810               	movf	ADCRead@ch^(0+384),w
  3236  1745  0092               	movwf	??_ADCRead^(0+384)
  3237  1746  0D92               	rlf	??_ADCRead^(0+384),f
  3238  1747  0D92               	rlf	??_ADCRead^(0+384),f
  3239  1748  0D92               	rlf	??_ADCRead^(0+384),f
  3240  1749  1283               	bcf	3,5	;RP0=0, select bank0
  3241  174A  1303               	bcf	3,6	;RP1=0, select bank0
  3242  174B  081F               	movf	31,w	;volatile
  3243  174C  1683               	bsf	3,5	;RP0=1, select bank3
  3244  174D  1703               	bsf	3,6	;RP1=1, select bank3
  3245  174E  0612               	xorwf	??_ADCRead^(0+384),w
  3246  174F  39C7               	andlw	-57
  3247  1750  0612               	xorwf	??_ADCRead^(0+384),w
  3248  1751  1283               	bcf	3,5	;RP0=0, select bank0
  3249  1752  1303               	bcf	3,6	;RP1=0, select bank0
  3250  1753  009F               	movwf	31	;volatile
  3251                           
  3252                           ;main.c: 172: _delay((unsigned long)((25)*(20000000/4000000.0)));
  3253  1754  3029               	movlw	41
  3254  1755  1683               	bsf	3,5	;RP0=1, select bank3
  3255  1756  1703               	bsf	3,6	;RP1=1, select bank3
  3256  1757  0092               	movwf	??_ADCRead^(0+384)
  3257  1758                     u4387:	
  3258  1758  0B92               	decfsz	??_ADCRead^(0+384),f
  3259  1759  2F58               	goto	u4387
  3260  175A  0000               	nop
  3261                           
  3262                           ;main.c: 173: ADCON0bits.GO = 1;
  3263  175B  1283               	bcf	3,5	;RP0=0, select bank0
  3264  175C  1303               	bcf	3,6	;RP1=0, select bank0
  3265  175D  151F               	bsf	31,2	;volatile
  3266  175E                     l121:	
  3267                           ;main.c: 174: while (ADCON0bits.GO_DONE);
  3268                           
  3269  175E  1D1F               	btfss	31,2	;volatile
  3270  175F  0008               	return
  3271  1760  2F5E               	goto	l121
  3272  1761                     __end_of_ADCRead:	
  3273                           
  3274                           	psect	text16
  3275  0052                     __ptext16:	
  3276 ;; *************** function _ISR *****************
  3277 ;; Defined at:
  3278 ;;		line 182 in file "main.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  recebimento     1   35[BANK1 ] unsigned char 
  3283 ;;  aux            16    0[BANK1 ] unsigned char [16]
  3284 ;;  input2          3   32[BANK1 ] float 
  3285 ;;  input           3   29[BANK1 ] float 
  3286 ;;  pre             3   19[BANK1 ] float 
  3287 ;;  status2         2   27[BANK1 ] int 
  3288 ;;  i               2   24[BANK1 ] int 
  3289 ;;  preint          2   22[BANK1 ] int 
  3290 ;;  status          2   17[BANK1 ] int 
  3291 ;;  per             1   36[BANK1 ] PTR unsigned char 
  3292 ;;		 -> ftoa@buf(17), 
  3293 ;;  result          1   26[BANK1 ] PTR unsigned char 
  3294 ;;		 -> ISR@aux(16), 
  3295 ;;  buf             1   16[BANK1 ] PTR unsigned char 
  3296 ;;		 -> ftoa@buf(17), 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;		None               void
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3306 ;;      Params:         0       0       0       0       0
  3307 ;;      Locals:         0       0      37       0       0
  3308 ;;      Temps:          0       8       0       0       0
  3309 ;;      Totals:         0       8      37       0       0
  3310 ;;Total ram usage:       45 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    5
  3313 ;; This function calls:
  3314 ;;		_FormatarValor
  3315 ;;		_USARTReceiveChar
  3316 ;;		___awtoft
  3317 ;;		___ftdiv
  3318 ;;		___ftmul
  3319 ;;		___fttol
  3320 ;;		_ftoa
  3321 ;;		i1_USARTWriteChar
  3322 ;;		i1_USARTWriteString
  3323 ;;		i1_lcd_escreve_string
  3324 ;;		i1_lcd_gotoxy
  3325 ;; This function is called by:
  3326 ;;		Interrupt level 1
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _ISR
  3332  0052                     _ISR:	
  3333                           
  3334                           ;main.c: 186: if (PIR1bits.ADIF) {
  3335  0052  1F0C               	btfss	12,6	;volatile
  3336  0053  2B74               	goto	i1l2865
  3337                           
  3338                           ;main.c: 189: ADCResult = ((ADRESH << 8) + ADRESL);
  3339  0054  081E               	movf	30,w	;volatile
  3340  0055  1683               	bsf	3,5	;RP0=1, select bank1
  3341  0056  1303               	bcf	3,6	;RP1=0, select bank1
  3342  0057  01C6               	clrf	(_ADCResult+1)^(0+128)
  3343  0058  07C6               	addwf	(_ADCResult+1)^(0+128),f
  3344  0059  081E               	movf	30,w	;volatile
  3345  005A  01C5               	clrf	_ADCResult^(0+128)
  3346  005B  07C5               	addwf	_ADCResult^(0+128),f
  3347                           
  3348                           ;main.c: 192: char * buf;
  3349                           ;main.c: 193: char * per;
  3350                           ;main.c: 196: float input;
  3351                           ;main.c: 197: float input2;
  3352                           ;main.c: 198: float pre;
  3353                           ;main.c: 199: int preint;
  3354                           ;main.c: 200: int status;
  3355                           ;main.c: 201: int status2;
  3356                           ;main.c: 203: int i = 0;
  3357  005C  01B8               	clrf	ISR@i^(0+128)
  3358  005D  01B9               	clrf	(ISR@i+1)^(0+128)
  3359                           
  3360                           ;main.c: 204: unsigned char *result;
  3361                           ;main.c: 205: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  3362  005E  30A0               	movlw	ISR@aux& (0+255)
  3363  005F  0084               	movwf	4
  3364  0060  30AE               	movlw	low ISR@F1361
  3365  0061  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0062  1303               	bcf	3,6	;RP1=0, select bank0
  3367  0063  00D2               	movwf	??_ISR
  3368  0064  0804               	movf	4,w
  3369  0065  00D3               	movwf	??_ISR+1
  3370  0066  3010               	movlw	16
  3371  0067  00D4               	movwf	??_ISR+2
  3372  0068                     u341_20:	
  3373  0068  0852               	movf	??_ISR,w
  3374  0069  0084               	movwf	4
  3375  006A  1783               	bsf	3,7	;select IRP bank3
  3376  006B  0800               	movf	0,w
  3377  006C  00D5               	movwf	??_ISR+3
  3378  006D  0AD2               	incf	??_ISR,f
  3379  006E  0853               	movf	??_ISR+1,w
  3380  006F  0084               	movwf	4
  3381  0070  1383               	bcf	3,7	;select IRP bank1
  3382  0071  0855               	movf	??_ISR+3,w
  3383  0072  0080               	movwf	0
  3384  0073  0AD3               	incf	??_ISR+1,f
  3385  0074  0BD4               	decfsz	??_ISR+2,f
  3386  0075  2868               	goto	u341_20
  3387                           
  3388                           ;main.c: 208: if (flag_ch == 0) {
  3389  0076  1683               	bsf	3,5	;RP0=1, select bank1
  3390  0077  1303               	bcf	3,6	;RP1=0, select bank1
  3391  0078  085B               	movf	(_flag_ch+1)^(0+128),w
  3392  0079  045A               	iorwf	_flag_ch^(0+128),w
  3393  007A  1D03               	skipz
  3394  007B  2A1E               	goto	i1l2817
  3395                           
  3396                           ;main.c: 209: input = ADCResult * 0.0048828125;
  3397  007C  3000               	movlw	0
  3398  007D  1283               	bcf	3,5	;RP0=0, select bank0
  3399  007E  1303               	bcf	3,6	;RP1=0, select bank0
  3400  007F  00A0               	movwf	___ftmul@f1
  3401  0080  30A0               	movlw	160
  3402  0081  00A1               	movwf	___ftmul@f1+1
  3403  0082  303B               	movlw	59
  3404  0083  00A2               	movwf	___ftmul@f1+2
  3405  0084  1683               	bsf	3,5	;RP0=1, select bank1
  3406  0085  1303               	bcf	3,6	;RP1=0, select bank1
  3407  0086  0846               	movf	(_ADCResult+1)^(0+128),w
  3408  0087  01F9               	clrf	___awtoft@c+1
  3409  0088  07F9               	addwf	___awtoft@c+1,f
  3410  0089  0845               	movf	_ADCResult^(0+128),w
  3411  008A  01F8               	clrf	___awtoft@c
  3412  008B  07F8               	addwf	___awtoft@c,f
  3413  008C  160A  118A  2654  120A  118A  	fcall	___awtoft
  3414  0091  0878               	movf	?___awtoft,w
  3415  0092  1283               	bcf	3,5	;RP0=0, select bank0
  3416  0093  1303               	bcf	3,6	;RP1=0, select bank0
  3417  0094  00A3               	movwf	___ftmul@f2
  3418  0095  0879               	movf	?___awtoft+1,w
  3419  0096  00A4               	movwf	___ftmul@f2+1
  3420  0097  087A               	movf	?___awtoft+2,w
  3421  0098  00A5               	movwf	___ftmul@f2+2
  3422  0099  120A  118A  272D  120A  118A  	fcall	___ftmul
  3423  009E  1283               	bcf	3,5	;RP0=0, select bank0
  3424  009F  1303               	bcf	3,6	;RP1=0, select bank0
  3425  00A0  0820               	movf	?___ftmul,w
  3426  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  3427  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  3428  00A3  00BD               	movwf	ISR@input^(0+128)
  3429  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  3430  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  3431  00A6  0821               	movf	?___ftmul+1,w
  3432  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  3433  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  3434  00A9  00BE               	movwf	(ISR@input+1)^(0+128)
  3435  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  3436  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  3437  00AC  0822               	movf	?___ftmul+2,w
  3438  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  3439  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  3440  00AF  00BF               	movwf	(ISR@input+2)^(0+128)
  3441                           
  3442                           ;main.c: 210: buf = ftoa(input, &status);
  3443  00B0  083D               	movf	ISR@input^(0+128),w
  3444  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  3445  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  3446  00B3  00C4               	movwf	ftoa@f
  3447  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  3448  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  3449  00B6  083E               	movf	(ISR@input+1)^(0+128),w
  3450  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  3451  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  3452  00B9  00C5               	movwf	ftoa@f+1
  3453  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  3454  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  3455  00BC  083F               	movf	(ISR@input+2)^(0+128),w
  3456  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  3457  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  3458  00BF  00C6               	movwf	ftoa@f+2
  3459  00C0  30B1               	movlw	ISR@status& (0+255)
  3460  00C1  00D2               	movwf	??_ISR
  3461  00C2  0852               	movf	??_ISR,w
  3462  00C3  00C7               	movwf	ftoa@status
  3463  00C4  120A  158A  2746  120A  118A  	fcall	_ftoa
  3464  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  3465  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  3466  00CB  00D3               	movwf	??_ISR+1
  3467  00CC  0853               	movf	??_ISR+1,w
  3468  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  3469  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  3470  00CF  00B0               	movwf	ISR@buf^(0+128)
  3471                           
  3472                           ;main.c: 211: input2 = ((input * 100) / 1);
  3473  00D0  3000               	movlw	0
  3474  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3475  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3476  00D3  00B0               	movwf	___ftdiv@f2
  3477  00D4  3080               	movlw	128
  3478  00D5  00B1               	movwf	___ftdiv@f2+1
  3479  00D6  303F               	movlw	63
  3480  00D7  00B2               	movwf	___ftdiv@f2+2
  3481  00D8  3000               	movlw	0
  3482  00D9  00A0               	movwf	___ftmul@f1
  3483  00DA  30C8               	movlw	200
  3484  00DB  00A1               	movwf	___ftmul@f1+1
  3485  00DC  3042               	movlw	66
  3486  00DD  00A2               	movwf	___ftmul@f1+2
  3487  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  3488  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  3489  00E0  083D               	movf	ISR@input^(0+128),w
  3490  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  3491  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  3492  00E3  00A3               	movwf	___ftmul@f2
  3493  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  3494  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  3495  00E6  083E               	movf	(ISR@input+1)^(0+128),w
  3496  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  3497  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  3498  00E9  00A4               	movwf	___ftmul@f2+1
  3499  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  3500  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  3501  00EC  083F               	movf	(ISR@input+2)^(0+128),w
  3502  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  3503  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  3504  00EF  00A5               	movwf	___ftmul@f2+2
  3505  00F0  120A  118A  272D  120A  118A  	fcall	___ftmul
  3506  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3507  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3508  00F7  0820               	movf	?___ftmul,w
  3509  00F8  00B3               	movwf	___ftdiv@f1
  3510  00F9  0821               	movf	?___ftmul+1,w
  3511  00FA  00B4               	movwf	___ftdiv@f1+1
  3512  00FB  0822               	movf	?___ftmul+2,w
  3513  00FC  00B5               	movwf	___ftdiv@f1+2
  3514  00FD  120A  158A  268E  120A  118A  	fcall	___ftdiv
  3515  0102  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0103  1303               	bcf	3,6	;RP1=0, select bank0
  3517  0104  0830               	movf	?___ftdiv,w
  3518  0105  1683               	bsf	3,5	;RP0=1, select bank1
  3519  0106  1303               	bcf	3,6	;RP1=0, select bank1
  3520  0107  00C0               	movwf	ISR@input2^(0+128)
  3521  0108  1283               	bcf	3,5	;RP0=0, select bank0
  3522  0109  1303               	bcf	3,6	;RP1=0, select bank0
  3523  010A  0831               	movf	?___ftdiv+1,w
  3524  010B  1683               	bsf	3,5	;RP0=1, select bank1
  3525  010C  1303               	bcf	3,6	;RP1=0, select bank1
  3526  010D  00C1               	movwf	(ISR@input2+1)^(0+128)
  3527  010E  1283               	bcf	3,5	;RP0=0, select bank0
  3528  010F  1303               	bcf	3,6	;RP1=0, select bank0
  3529  0110  0832               	movf	?___ftdiv+2,w
  3530  0111  1683               	bsf	3,5	;RP0=1, select bank1
  3531  0112  1303               	bcf	3,6	;RP1=0, select bank1
  3532  0113  00C2               	movwf	(ISR@input2+2)^(0+128)
  3533                           
  3534                           ;main.c: 212: per = ftoa(input2, &status2);
  3535  0114  0840               	movf	ISR@input2^(0+128),w
  3536  0115  1283               	bcf	3,5	;RP0=0, select bank0
  3537  0116  1303               	bcf	3,6	;RP1=0, select bank0
  3538  0117  00C4               	movwf	ftoa@f
  3539  0118  1683               	bsf	3,5	;RP0=1, select bank1
  3540  0119  1303               	bcf	3,6	;RP1=0, select bank1
  3541  011A  0841               	movf	(ISR@input2+1)^(0+128),w
  3542  011B  1283               	bcf	3,5	;RP0=0, select bank0
  3543  011C  1303               	bcf	3,6	;RP1=0, select bank0
  3544  011D  00C5               	movwf	ftoa@f+1
  3545  011E  1683               	bsf	3,5	;RP0=1, select bank1
  3546  011F  1303               	bcf	3,6	;RP1=0, select bank1
  3547  0120  0842               	movf	(ISR@input2+2)^(0+128),w
  3548  0121  1283               	bcf	3,5	;RP0=0, select bank0
  3549  0122  1303               	bcf	3,6	;RP1=0, select bank0
  3550  0123  00C6               	movwf	ftoa@f+2
  3551  0124  30BB               	movlw	ISR@status2& (0+255)
  3552  0125  00D2               	movwf	??_ISR
  3553  0126  0852               	movf	??_ISR,w
  3554  0127  00C7               	movwf	ftoa@status
  3555  0128  120A  158A  2746  120A  118A  	fcall	_ftoa
  3556  012D  1283               	bcf	3,5	;RP0=0, select bank0
  3557  012E  1303               	bcf	3,6	;RP1=0, select bank0
  3558  012F  00D3               	movwf	??_ISR+1
  3559  0130  0853               	movf	??_ISR+1,w
  3560  0131  1683               	bsf	3,5	;RP0=1, select bank1
  3561  0132  1303               	bcf	3,6	;RP1=0, select bank1
  3562  0133  00C4               	movwf	ISR@per^(0+128)
  3563                           
  3564                           ;main.c: 213: lcd_gotoxy(0, 1);
  3565  0134  01F5               	clrf	i1lcd_gotoxy@y
  3566  0135  0AF5               	incf	i1lcd_gotoxy@y,f
  3567  0136  3000               	movlw	0
  3568  0137  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3569                           
  3570                           ;main.c: 214: lcd_escreve_string("N1:");
  3571  013C  307A               	movlw	low (STR_2-__stringbase)
  3572  013D  00FC               	movwf	i1lcd_escreve_string@y
  3573  013E  3080               	movlw	128
  3574  013F  00FD               	movwf	i1lcd_escreve_string@y+1
  3575  0140  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3576                           
  3577                           ;main.c: 215: USARTWriteString("\nS");
  3578  0145  3085               	movlw	low (STR_3-__stringbase)
  3579  0146  00F1               	movwf	i1USARTWriteString@str
  3580  0147  3080               	movlw	128
  3581  0148  00F2               	movwf	i1USARTWriteString@str+1
  3582  0149  160A  118A  2675  120A  118A  	fcall	i1_USARTWriteString
  3583                           
  3584                           ;main.c: 216: USARTWriteString(per);
  3585  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3586  014F  1303               	bcf	3,6	;RP1=0, select bank1
  3587  0150  0844               	movf	ISR@per^(0+128),w
  3588  0151  00F1               	movwf	i1USARTWriteString@str
  3589  0152  3000               	movlw	0
  3590  0153  00F2               	movwf	i1USARTWriteString@str+1
  3591  0154  160A  118A  2675  120A  118A  	fcall	i1_USARTWriteString
  3592                           
  3593                           ;main.c: 217: lcd_gotoxy(4, 1);
  3594  0159  01F5               	clrf	i1lcd_gotoxy@y
  3595  015A  0AF5               	incf	i1lcd_gotoxy@y,f
  3596  015B  3004               	movlw	4
  3597  015C  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3598                           
  3599                           ;main.c: 218: lcd_escreve_string("   ");
  3600  0161  3076               	movlw	low (STR_4-__stringbase)
  3601  0162  00FC               	movwf	i1lcd_escreve_string@y
  3602  0163  3080               	movlw	128
  3603  0164  00FD               	movwf	i1lcd_escreve_string@y+1
  3604  0165  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3605                           
  3606                           ;main.c: 219: lcd_gotoxy(4, 1);
  3607  016A  01F5               	clrf	i1lcd_gotoxy@y
  3608  016B  0AF5               	incf	i1lcd_gotoxy@y,f
  3609  016C  3004               	movlw	4
  3610  016D  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3611                           
  3612                           ;main.c: 220: lcd_escreve_string(FormatarValor(per));
  3613  0172  1683               	bsf	3,5	;RP0=1, select bank1
  3614  0173  1303               	bcf	3,6	;RP1=0, select bank1
  3615  0174  0844               	movf	ISR@per^(0+128),w
  3616  0175  120A  158A  214F  120A  118A  	fcall	_FormatarValor
  3617  017A  00FC               	movwf	i1lcd_escreve_string@y
  3618  017B  3000               	movlw	0
  3619  017C  00FD               	movwf	i1lcd_escreve_string@y+1
  3620  017D  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3621                           
  3622                           ;main.c: 221: lcd_gotoxy(7, 1);
  3623  0182  01F5               	clrf	i1lcd_gotoxy@y
  3624  0183  0AF5               	incf	i1lcd_gotoxy@y,f
  3625  0184  3007               	movlw	7
  3626  0185  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3627                           
  3628                           ;main.c: 222: lcd_escreve_string("%");
  3629  018A  3088               	movlw	low (STR_5-__stringbase)
  3630  018B  00FC               	movwf	i1lcd_escreve_string@y
  3631  018C  3080               	movlw	128
  3632  018D  00FD               	movwf	i1lcd_escreve_string@y+1
  3633  018E  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3634                           
  3635                           ;main.c: 224: lcd_gotoxy(0, 0);
  3636  0193  01F5               	clrf	i1lcd_gotoxy@y
  3637  0194  3000               	movlw	0
  3638  0195  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3639                           
  3640                           ;main.c: 225: pre = input2 * 0.16;
  3641  019A  30D7               	movlw	215
  3642  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3643  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3644  019D  00A0               	movwf	___ftmul@f1
  3645  019E  3023               	movlw	35
  3646  019F  00A1               	movwf	___ftmul@f1+1
  3647  01A0  303E               	movlw	62
  3648  01A1  00A2               	movwf	___ftmul@f1+2
  3649  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  3650  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  3651  01A4  0840               	movf	ISR@input2^(0+128),w
  3652  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  3653  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  3654  01A7  00A3               	movwf	___ftmul@f2
  3655  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  3656  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  3657  01AA  0841               	movf	(ISR@input2+1)^(0+128),w
  3658  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3659  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3660  01AD  00A4               	movwf	___ftmul@f2+1
  3661  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  3662  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  3663  01B0  0842               	movf	(ISR@input2+2)^(0+128),w
  3664  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  3665  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  3666  01B3  00A5               	movwf	___ftmul@f2+2
  3667  01B4  120A  118A  272D  120A  118A  	fcall	___ftmul
  3668  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  3669  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  3670  01BB  0820               	movf	?___ftmul,w
  3671  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  3672  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  3673  01BE  00B3               	movwf	ISR@pre^(0+128)
  3674  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3675  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  3676  01C1  0821               	movf	?___ftmul+1,w
  3677  01C2  1683               	bsf	3,5	;RP0=1, select bank1
  3678  01C3  1303               	bcf	3,6	;RP1=0, select bank1
  3679  01C4  00B4               	movwf	(ISR@pre+1)^(0+128)
  3680  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  3681  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  3682  01C7  0822               	movf	?___ftmul+2,w
  3683  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  3684  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  3685  01CA  00B5               	movwf	(ISR@pre+2)^(0+128)
  3686                           
  3687                           ;main.c: 226: preint = (int) pre;
  3688  01CB  0833               	movf	ISR@pre^(0+128),w
  3689  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  3690  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  3691  01CE  00B0               	movwf	___fttol@f1
  3692  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  3693  01D0  1303               	bcf	3,6	;RP1=0, select bank1
  3694  01D1  0834               	movf	(ISR@pre+1)^(0+128),w
  3695  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  3696  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  3697  01D4  00B1               	movwf	___fttol@f1+1
  3698  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  3699  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  3700  01D7  0835               	movf	(ISR@pre+2)^(0+128),w
  3701  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  3702  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  3703  01DA  00B2               	movwf	___fttol@f1+2
  3704  01DB  120A  158A  2571  120A  118A  	fcall	___fttol
  3705  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  3706  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  3707  01E2  0831               	movf	?___fttol+1,w
  3708  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  3709  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  3710  01E5  01B7               	clrf	(ISR@preint+1)^(0+128)
  3711  01E6  07B7               	addwf	(ISR@preint+1)^(0+128),f
  3712  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  3713  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  3714  01E9  0830               	movf	?___fttol,w
  3715  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  3716  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  3717  01EC  01B6               	clrf	ISR@preint^(0+128)
  3718  01ED  07B6               	addwf	ISR@preint^(0+128),f
  3719  01EE                     i1l2811:	
  3720                           ;main.c: 228: while (preint >= 0) {
  3721                           
  3722  01EE  1BB7               	btfsc	(ISR@preint+1)^(0+128),7
  3723  01EF  2A0D               	goto	i1l2813
  3724                           
  3725                           ;main.c: 229: aux[i] = 0xFF;
  3726  01F0  30FF               	movlw	255
  3727  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3728  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3729  01F3  00D2               	movwf	??_ISR
  3730  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  3731  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  3732  01F6  0838               	movf	ISR@i^(0+128),w
  3733  01F7  3EA0               	addlw	ISR@aux& (0+255)
  3734  01F8  0084               	movwf	4
  3735  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  3736  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  3737  01FB  0852               	movf	??_ISR,w
  3738  01FC  1383               	bcf	3,7	;select IRP bank1
  3739  01FD  0080               	movwf	0
  3740                           
  3741                           ;main.c: 230: preint--;
  3742  01FE  30FF               	movlw	255
  3743  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  3744  0200  1303               	bcf	3,6	;RP1=0, select bank1
  3745  0201  07B6               	addwf	ISR@preint^(0+128),f
  3746  0202  1803               	skipnc
  3747  0203  0AB7               	incf	(ISR@preint+1)^(0+128),f
  3748  0204  30FF               	movlw	255
  3749  0205  07B7               	addwf	(ISR@preint+1)^(0+128),f
  3750                           
  3751                           ;main.c: 231: i++;
  3752  0206  3001               	movlw	1
  3753  0207  07B8               	addwf	ISR@i^(0+128),f
  3754  0208  1803               	skipnc
  3755  0209  0AB9               	incf	(ISR@i+1)^(0+128),f
  3756  020A  3000               	movlw	0
  3757  020B  07B9               	addwf	(ISR@i+1)^(0+128),f
  3758  020C  29EE               	goto	i1l2811
  3759  020D                     i1l2813:	
  3760                           
  3761                           ;main.c: 232: }
  3762                           ;main.c: 233: result = &aux;
  3763  020D  30A0               	movlw	ISR@aux& (0+255)
  3764  020E  1283               	bcf	3,5	;RP0=0, select bank0
  3765  020F  1303               	bcf	3,6	;RP1=0, select bank0
  3766  0210  00D2               	movwf	??_ISR
  3767  0211  0852               	movf	??_ISR,w
  3768  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3769  0213  1303               	bcf	3,6	;RP1=0, select bank1
  3770  0214  00BA               	movwf	ISR@result^(0+128)
  3771                           
  3772                           ;main.c: 234: lcd_escreve_string(result);
  3773  0215  083A               	movf	ISR@result^(0+128),w
  3774  0216  00FC               	movwf	i1lcd_escreve_string@y
  3775  0217  3000               	movlw	0
  3776  0218  00FD               	movwf	i1lcd_escreve_string@y+1
  3777  0219  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3778  021E                     i1l2817:	
  3779                           
  3780                           ;main.c: 236: }
  3781                           ;main.c: 238: if (flag_ch == 1) {
  3782  021E  3001               	movlw	1
  3783  021F  1683               	bsf	3,5	;RP0=1, select bank1
  3784  0220  1303               	bcf	3,6	;RP1=0, select bank1
  3785  0221  065A               	xorwf	_flag_ch^(0+128),w
  3786  0222  045B               	iorwf	(_flag_ch+1)^(0+128),w
  3787  0223  1D03               	skipz
  3788  0224  2B1C               	goto	i1l2843
  3789                           
  3790                           ;main.c: 239: input = ADCResult * 0.0048828125;
  3791  0225  3000               	movlw	0
  3792  0226  1283               	bcf	3,5	;RP0=0, select bank0
  3793  0227  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0228  00A0               	movwf	___ftmul@f1
  3795  0229  30A0               	movlw	160
  3796  022A  00A1               	movwf	___ftmul@f1+1
  3797  022B  303B               	movlw	59
  3798  022C  00A2               	movwf	___ftmul@f1+2
  3799  022D  1683               	bsf	3,5	;RP0=1, select bank1
  3800  022E  1303               	bcf	3,6	;RP1=0, select bank1
  3801  022F  0846               	movf	(_ADCResult+1)^(0+128),w
  3802  0230  01F9               	clrf	___awtoft@c+1
  3803  0231  07F9               	addwf	___awtoft@c+1,f
  3804  0232  0845               	movf	_ADCResult^(0+128),w
  3805  0233  01F8               	clrf	___awtoft@c
  3806  0234  07F8               	addwf	___awtoft@c,f
  3807  0235  160A  118A  2654  120A  118A  	fcall	___awtoft
  3808  023A  0878               	movf	?___awtoft,w
  3809  023B  1283               	bcf	3,5	;RP0=0, select bank0
  3810  023C  1303               	bcf	3,6	;RP1=0, select bank0
  3811  023D  00A3               	movwf	___ftmul@f2
  3812  023E  0879               	movf	?___awtoft+1,w
  3813  023F  00A4               	movwf	___ftmul@f2+1
  3814  0240  087A               	movf	?___awtoft+2,w
  3815  0241  00A5               	movwf	___ftmul@f2+2
  3816  0242  120A  118A  272D  120A  118A  	fcall	___ftmul
  3817  0247  1283               	bcf	3,5	;RP0=0, select bank0
  3818  0248  1303               	bcf	3,6	;RP1=0, select bank0
  3819  0249  0820               	movf	?___ftmul,w
  3820  024A  1683               	bsf	3,5	;RP0=1, select bank1
  3821  024B  1303               	bcf	3,6	;RP1=0, select bank1
  3822  024C  00BD               	movwf	ISR@input^(0+128)
  3823  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3824  024E  1303               	bcf	3,6	;RP1=0, select bank0
  3825  024F  0821               	movf	?___ftmul+1,w
  3826  0250  1683               	bsf	3,5	;RP0=1, select bank1
  3827  0251  1303               	bcf	3,6	;RP1=0, select bank1
  3828  0252  00BE               	movwf	(ISR@input+1)^(0+128)
  3829  0253  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0254  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0255  0822               	movf	?___ftmul+2,w
  3832  0256  1683               	bsf	3,5	;RP0=1, select bank1
  3833  0257  1303               	bcf	3,6	;RP1=0, select bank1
  3834  0258  00BF               	movwf	(ISR@input+2)^(0+128)
  3835                           
  3836                           ;main.c: 241: input2 = ((input * 100) / 1);
  3837  0259  3000               	movlw	0
  3838  025A  1283               	bcf	3,5	;RP0=0, select bank0
  3839  025B  1303               	bcf	3,6	;RP1=0, select bank0
  3840  025C  00B0               	movwf	___ftdiv@f2
  3841  025D  3080               	movlw	128
  3842  025E  00B1               	movwf	___ftdiv@f2+1
  3843  025F  303F               	movlw	63
  3844  0260  00B2               	movwf	___ftdiv@f2+2
  3845  0261  3000               	movlw	0
  3846  0262  00A0               	movwf	___ftmul@f1
  3847  0263  30C8               	movlw	200
  3848  0264  00A1               	movwf	___ftmul@f1+1
  3849  0265  3042               	movlw	66
  3850  0266  00A2               	movwf	___ftmul@f1+2
  3851  0267  1683               	bsf	3,5	;RP0=1, select bank1
  3852  0268  1303               	bcf	3,6	;RP1=0, select bank1
  3853  0269  083D               	movf	ISR@input^(0+128),w
  3854  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3855  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3856  026C  00A3               	movwf	___ftmul@f2
  3857  026D  1683               	bsf	3,5	;RP0=1, select bank1
  3858  026E  1303               	bcf	3,6	;RP1=0, select bank1
  3859  026F  083E               	movf	(ISR@input+1)^(0+128),w
  3860  0270  1283               	bcf	3,5	;RP0=0, select bank0
  3861  0271  1303               	bcf	3,6	;RP1=0, select bank0
  3862  0272  00A4               	movwf	___ftmul@f2+1
  3863  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3864  0274  1303               	bcf	3,6	;RP1=0, select bank1
  3865  0275  083F               	movf	(ISR@input+2)^(0+128),w
  3866  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3867  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3868  0278  00A5               	movwf	___ftmul@f2+2
  3869  0279  120A  118A  272D  120A  118A  	fcall	___ftmul
  3870  027E  1283               	bcf	3,5	;RP0=0, select bank0
  3871  027F  1303               	bcf	3,6	;RP1=0, select bank0
  3872  0280  0820               	movf	?___ftmul,w
  3873  0281  00B3               	movwf	___ftdiv@f1
  3874  0282  0821               	movf	?___ftmul+1,w
  3875  0283  00B4               	movwf	___ftdiv@f1+1
  3876  0284  0822               	movf	?___ftmul+2,w
  3877  0285  00B5               	movwf	___ftdiv@f1+2
  3878  0286  120A  158A  268E  120A  118A  	fcall	___ftdiv
  3879  028B  1283               	bcf	3,5	;RP0=0, select bank0
  3880  028C  1303               	bcf	3,6	;RP1=0, select bank0
  3881  028D  0830               	movf	?___ftdiv,w
  3882  028E  1683               	bsf	3,5	;RP0=1, select bank1
  3883  028F  1303               	bcf	3,6	;RP1=0, select bank1
  3884  0290  00C0               	movwf	ISR@input2^(0+128)
  3885  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3886  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3887  0293  0831               	movf	?___ftdiv+1,w
  3888  0294  1683               	bsf	3,5	;RP0=1, select bank1
  3889  0295  1303               	bcf	3,6	;RP1=0, select bank1
  3890  0296  00C1               	movwf	(ISR@input2+1)^(0+128)
  3891  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3892  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3893  0299  0832               	movf	?___ftdiv+2,w
  3894  029A  1683               	bsf	3,5	;RP0=1, select bank1
  3895  029B  1303               	bcf	3,6	;RP1=0, select bank1
  3896  029C  00C2               	movwf	(ISR@input2+2)^(0+128)
  3897                           
  3898                           ;main.c: 243: per = ftoa(input2, &status2);
  3899  029D  0840               	movf	ISR@input2^(0+128),w
  3900  029E  1283               	bcf	3,5	;RP0=0, select bank0
  3901  029F  1303               	bcf	3,6	;RP1=0, select bank0
  3902  02A0  00C4               	movwf	ftoa@f
  3903  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  3904  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  3905  02A3  0841               	movf	(ISR@input2+1)^(0+128),w
  3906  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3907  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3908  02A6  00C5               	movwf	ftoa@f+1
  3909  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  3910  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  3911  02A9  0842               	movf	(ISR@input2+2)^(0+128),w
  3912  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  3913  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3914  02AC  00C6               	movwf	ftoa@f+2
  3915  02AD  30BB               	movlw	ISR@status2& (0+255)
  3916  02AE  00D2               	movwf	??_ISR
  3917  02AF  0852               	movf	??_ISR,w
  3918  02B0  00C7               	movwf	ftoa@status
  3919  02B1  120A  158A  2746  120A  118A  	fcall	_ftoa
  3920  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  3921  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  3922  02B8  00D3               	movwf	??_ISR+1
  3923  02B9  0853               	movf	??_ISR+1,w
  3924  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  3925  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  3926  02BC  00C4               	movwf	ISR@per^(0+128)
  3927                           
  3928                           ;main.c: 244: lcd_gotoxy(9, 1);
  3929  02BD  01F5               	clrf	i1lcd_gotoxy@y
  3930  02BE  0AF5               	incf	i1lcd_gotoxy@y,f
  3931  02BF  3009               	movlw	9
  3932  02C0  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3933                           
  3934                           ;main.c: 246: lcd_escreve_string("N2:");
  3935  02C5  307E               	movlw	low (STR_6-__stringbase)
  3936  02C6  00FC               	movwf	i1lcd_escreve_string@y
  3937  02C7  3080               	movlw	128
  3938  02C8  00FD               	movwf	i1lcd_escreve_string@y+1
  3939  02C9  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3940                           
  3941                           ;main.c: 247: USARTWriteString("\nI");
  3942  02CE  3082               	movlw	low (STR_7-__stringbase)
  3943  02CF  00F1               	movwf	i1USARTWriteString@str
  3944  02D0  3080               	movlw	128
  3945  02D1  00F2               	movwf	i1USARTWriteString@str+1
  3946  02D2  160A  118A  2675  120A  118A  	fcall	i1_USARTWriteString
  3947                           
  3948                           ;main.c: 248: USARTWriteString(per);
  3949  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  3950  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  3951  02D9  0844               	movf	ISR@per^(0+128),w
  3952  02DA  00F1               	movwf	i1USARTWriteString@str
  3953  02DB  3000               	movlw	0
  3954  02DC  00F2               	movwf	i1USARTWriteString@str+1
  3955  02DD  160A  118A  2675  120A  118A  	fcall	i1_USARTWriteString
  3956                           
  3957                           ;main.c: 249: lcd_gotoxy(13, 1);
  3958  02E2  01F5               	clrf	i1lcd_gotoxy@y
  3959  02E3  0AF5               	incf	i1lcd_gotoxy@y,f
  3960  02E4  300D               	movlw	13
  3961  02E5  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3962                           
  3963                           ;main.c: 250: lcd_escreve_string("   ");
  3964  02EA  3076               	movlw	low (STR_4-__stringbase)
  3965  02EB  00FC               	movwf	i1lcd_escreve_string@y
  3966  02EC  3080               	movlw	128
  3967  02ED  00FD               	movwf	i1lcd_escreve_string@y+1
  3968  02EE  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3969                           
  3970                           ;main.c: 251: lcd_gotoxy(13, 1);
  3971  02F3  01F5               	clrf	i1lcd_gotoxy@y
  3972  02F4  0AF5               	incf	i1lcd_gotoxy@y,f
  3973  02F5  300D               	movlw	13
  3974  02F6  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3975                           
  3976                           ;main.c: 252: lcd_escreve_string(FormatarValor(per));
  3977  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  3978  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  3979  02FD  0844               	movf	ISR@per^(0+128),w
  3980  02FE  120A  158A  214F  120A  118A  	fcall	_FormatarValor
  3981  0303  00FC               	movwf	i1lcd_escreve_string@y
  3982  0304  3000               	movlw	0
  3983  0305  00FD               	movwf	i1lcd_escreve_string@y+1
  3984  0306  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3985                           
  3986                           ;main.c: 253: lcd_gotoxy(16, 1);
  3987  030B  01F5               	clrf	i1lcd_gotoxy@y
  3988  030C  0AF5               	incf	i1lcd_gotoxy@y,f
  3989  030D  3010               	movlw	16
  3990  030E  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3991                           
  3992                           ;main.c: 254: lcd_escreve_string("%");
  3993  0313  3088               	movlw	low (STR_5-__stringbase)
  3994  0314  00FC               	movwf	i1lcd_escreve_string@y
  3995  0315  3080               	movlw	128
  3996  0316  00FD               	movwf	i1lcd_escreve_string@y+1
  3997  0317  160A  118A  26BB  120A  118A  	fcall	i1_lcd_escreve_string
  3998  031C                     i1l2843:	
  3999                           
  4000                           ;main.c: 255: }
  4001                           ;main.c: 262: if (ADCResult < 50 && flag_ch == 0) {
  4002  031C  1683               	bsf	3,5	;RP0=1, select bank1
  4003  031D  1303               	bcf	3,6	;RP1=0, select bank1
  4004  031E  0846               	movf	(_ADCResult+1)^(0+128),w
  4005  031F  3A80               	xorlw	128
  4006  0320  00FF               	movwf	127
  4007  0321  3080               	movlw	128
  4008  0322  027F               	subwf	127,w
  4009  0323  1D03               	skipz
  4010  0324  2B27               	goto	u345_25
  4011  0325  3032               	movlw	50
  4012  0326  0245               	subwf	_ADCResult^(0+128),w
  4013  0327                     u345_25:	
  4014  0327  1803               	skipnc
  4015  0328  2B3C               	goto	i1l2851
  4016  0329  1683               	bsf	3,5	;RP0=1, select bank1
  4017  032A  1303               	bcf	3,6	;RP1=0, select bank1
  4018  032B  085B               	movf	(_flag_ch+1)^(0+128),w
  4019  032C  045A               	iorwf	_flag_ch^(0+128),w
  4020  032D  1D03               	skipz
  4021  032E  2B3C               	goto	i1l2851
  4022                           
  4023                           ;main.c: 263: PORTDbits.RD2 = 0;
  4024  032F  1283               	bcf	3,5	;RP0=0, select bank0
  4025  0330  1303               	bcf	3,6	;RP1=0, select bank0
  4026  0331  1108               	bcf	8,2	;volatile
  4027                           
  4028                           ;main.c: 264: PORTDbits.RD3 = 1;
  4029  0332  1588               	bsf	8,3	;volatile
  4030                           
  4031                           ;main.c: 265: USARTWriteString("B");
  4032  0333  308A               	movlw	low (STR_10-__stringbase)
  4033  0334  00F1               	movwf	i1USARTWriteString@str
  4034  0335  3080               	movlw	128
  4035  0336  00F2               	movwf	i1USARTWriteString@str+1
  4036  0337  160A  118A  2675  120A  118A  	fcall	i1_USARTWriteString
  4037  033C                     i1l2851:	
  4038                           
  4039                           ;main.c: 266: }
  4040                           ;main.c: 267: if (ADCResult > 200 && flag_ch == 0) {
  4041  033C  1683               	bsf	3,5	;RP0=1, select bank1
  4042  033D  1303               	bcf	3,6	;RP1=0, select bank1
  4043  033E  0846               	movf	(_ADCResult+1)^(0+128),w
  4044  033F  3A80               	xorlw	128
  4045  0340  00FF               	movwf	127
  4046  0341  3080               	movlw	128
  4047  0342  027F               	subwf	127,w
  4048  0343  1D03               	skipz
  4049  0344  2B47               	goto	u347_25
  4050  0345  30C9               	movlw	201
  4051  0346  0245               	subwf	_ADCResult^(0+128),w
  4052  0347                     u347_25:	
  4053  0347  1C03               	skipc
  4054  0348  2B5C               	goto	i1l2859
  4055  0349  1683               	bsf	3,5	;RP0=1, select bank1
  4056  034A  1303               	bcf	3,6	;RP1=0, select bank1
  4057  034B  085B               	movf	(_flag_ch+1)^(0+128),w
  4058  034C  045A               	iorwf	_flag_ch^(0+128),w
  4059  034D  1D03               	skipz
  4060  034E  2B5C               	goto	i1l2859
  4061                           
  4062                           ;main.c: 268: PORTDbits.RD2 = 1;
  4063  034F  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0350  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0351  1508               	bsf	8,2	;volatile
  4066                           
  4067                           ;main.c: 269: PORTDbits.RD3 = 0;
  4068  0352  1188               	bcf	8,3	;volatile
  4069                           
  4070                           ;main.c: 270: USARTWriteString("b");
  4071  0353  308E               	movlw	low (STR_11-__stringbase)
  4072  0354  00F1               	movwf	i1USARTWriteString@str
  4073  0355  3080               	movlw	128
  4074  0356  00F2               	movwf	i1USARTWriteString@str+1
  4075  0357  160A  118A  2675  120A  118A  	fcall	i1_USARTWriteString
  4076  035C                     i1l2859:	
  4077                           
  4078                           ;main.c: 271: }
  4079                           ;main.c: 272: _delay((unsigned long)((200)*(20000000/4000.0)));
  4080  035C  3006               	movlw	6
  4081  035D  1283               	bcf	3,5	;RP0=0, select bank0
  4082  035E  1303               	bcf	3,6	;RP1=0, select bank0
  4083  035F  00D4               	movwf	??_ISR+2
  4084  0360  3013               	movlw	19
  4085  0361  00D3               	movwf	??_ISR+1
  4086  0362  30B1               	movlw	177
  4087  0363  00D2               	movwf	??_ISR
  4088  0364                     u439_27:	
  4089  0364  0BD2               	decfsz	??_ISR,f
  4090  0365  2B64               	goto	u439_27
  4091  0366  0BD3               	decfsz	??_ISR+1,f
  4092  0367  2B64               	goto	u439_27
  4093  0368  0BD4               	decfsz	??_ISR+2,f
  4094  0369  2B64               	goto	u439_27
  4095  036A  2B6B               	nop2
  4096                           
  4097                           ;main.c: 273: PIR1bits.ADIF = 0;
  4098  036B  1283               	bcf	3,5	;RP0=0, select bank0
  4099  036C  1303               	bcf	3,6	;RP1=0, select bank0
  4100  036D  130C               	bcf	12,6	;volatile
  4101                           
  4102                           ;main.c: 274: flag_ch = -1;
  4103  036E  30FF               	movlw	255
  4104  036F  1683               	bsf	3,5	;RP0=1, select bank1
  4105  0370  1303               	bcf	3,6	;RP1=0, select bank1
  4106  0371  00DA               	movwf	_flag_ch^(0+128)
  4107  0372  30FF               	movlw	255
  4108  0373  00DB               	movwf	(_flag_ch^(0+128)+1)
  4109  0374                     i1l2865:	
  4110                           
  4111                           ;main.c: 275: }
  4112                           ;main.c: 277: if (PIR1bits.RCIF) {
  4113  0374  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0375  1E8C               	btfss	12,5	;volatile
  4115  0376  2BDE               	goto	i1l142
  4116                           
  4117                           ;main.c: 280: char recebimento = USARTReceiveChar();
  4118  0377  160A  118A  2601  120A  118A  	fcall	_USARTReceiveChar
  4119  037C  1283               	bcf	3,5	;RP0=0, select bank0
  4120  037D  1303               	bcf	3,6	;RP1=0, select bank0
  4121  037E  00D2               	movwf	??_ISR
  4122  037F  0852               	movf	??_ISR,w
  4123  0380  1683               	bsf	3,5	;RP0=1, select bank1
  4124  0381  1303               	bcf	3,6	;RP1=0, select bank1
  4125  0382  00C3               	movwf	ISR@recebimento^(0+128)
  4126                           
  4127                           ;main.c: 281: USARTWriteChar(USARTReceiveChar());
  4128  0383  160A  118A  2601  120A  118A  	fcall	_USARTReceiveChar
  4129  0388  160A  118A  2574  120A  118A  	fcall	i1_USARTWriteChar
  4130                           
  4131                           ;main.c: 282: if (recebimento == LIGAR_BOMBA) {
  4132  038D  3031               	movlw	_LIGAR_BOMBA-__stringbase
  4133  038E  0084               	movwf	4
  4134  038F  120A  158A  200A  120A  118A  	fcall	stringdir
  4135  0394  1283               	bcf	3,5	;RP0=0, select bank0
  4136  0395  1303               	bcf	3,6	;RP1=0, select bank0
  4137  0396  00D2               	movwf	??_ISR
  4138  0397  1683               	bsf	3,5	;RP0=1, select bank1
  4139  0398  1303               	bcf	3,6	;RP1=0, select bank1
  4140  0399  0843               	movf	ISR@recebimento^(0+128),w
  4141  039A  1283               	bcf	3,5	;RP0=0, select bank0
  4142  039B  1303               	bcf	3,6	;RP1=0, select bank0
  4143  039C  0652               	xorwf	??_ISR,w
  4144  039D  1D03               	skipz
  4145  039E  2BA1               	goto	i1l2873
  4146                           
  4147                           ;main.c: 283: PORTDbits.RD2 = 0;
  4148  039F  1108               	bcf	8,2	;volatile
  4149                           
  4150                           ;main.c: 284: PORTDbits.RD3 = 1;
  4151  03A0  1588               	bsf	8,3	;volatile
  4152  03A1                     i1l2873:	
  4153                           
  4154                           ;main.c: 285: }
  4155                           ;main.c: 286: if (recebimento == DESLIGAR_BOMBA) {
  4156  03A1  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  4157  03A2  0084               	movwf	4
  4158  03A3  120A  158A  200A  120A  118A  	fcall	stringdir
  4159  03A8  00D2               	movwf	??_ISR
  4160  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  4161  03AA  1303               	bcf	3,6	;RP1=0, select bank1
  4162  03AB  0843               	movf	ISR@recebimento^(0+128),w
  4163  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  4164  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  4165  03AE  0652               	xorwf	??_ISR,w
  4166  03AF  1D03               	skipz
  4167  03B0  2BB3               	goto	i1l2877
  4168                           
  4169                           ;main.c: 287: PORTDbits.RD2 = 1;
  4170  03B1  1508               	bsf	8,2	;volatile
  4171                           
  4172                           ;main.c: 288: PORTDbits.RD3 = 0;
  4173  03B2  1188               	bcf	8,3	;volatile
  4174  03B3                     i1l2877:	
  4175                           
  4176                           ;main.c: 289: }
  4177                           ;main.c: 290: if (recebimento == LIGAR) {
  4178  03B3  3030               	movlw	_LIGAR-__stringbase
  4179  03B4  0084               	movwf	4
  4180  03B5  120A  158A  200A  120A  118A  	fcall	stringdir
  4181  03BA  00D2               	movwf	??_ISR
  4182  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  4183  03BC  1303               	bcf	3,6	;RP1=0, select bank1
  4184  03BD  0843               	movf	ISR@recebimento^(0+128),w
  4185  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  4186  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  4187  03C0  0652               	xorwf	??_ISR,w
  4188  03C1  1D03               	skipz
  4189  03C2  2BC9               	goto	i1l2881
  4190                           
  4191                           ;main.c: 291: flag_Start=1;
  4192  03C3  3001               	movlw	1
  4193  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  4194  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  4195  03C6  00C7               	movwf	_flag_Start^(0+128)
  4196  03C7  3000               	movlw	0
  4197  03C8  00C8               	movwf	(_flag_Start^(0+128)+1)
  4198  03C9                     i1l2881:	
  4199                           
  4200                           ;main.c: 292: }
  4201                           ;main.c: 293: if(recebimento == DESLIGAR){
  4202  03C9  302D               	movlw	_DESLIGAR-__stringbase
  4203  03CA  0084               	movwf	4
  4204  03CB  120A  158A  200A  120A  118A  	fcall	stringdir
  4205  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  4206  03D1  00D2               	movwf	??_ISR
  4207  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  4208  03D3  1303               	bcf	3,6	;RP1=0, select bank1
  4209  03D4  0843               	movf	ISR@recebimento^(0+128),w
  4210  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  4211  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  4212  03D7  0652               	xorwf	??_ISR,w
  4213  03D8  1D03               	skipz
  4214  03D9  2BDE               	goto	i1l142
  4215                           
  4216                           ;main.c: 294: flag_Start=0;
  4217  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  4218  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  4219  03DC  01C7               	clrf	_flag_Start^(0+128)
  4220  03DD  01C8               	clrf	(_flag_Start+1)^(0+128)
  4221  03DE                     i1l142:	
  4222  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  4223  03DF  0859               	movf	??_ISR+7,w
  4224  03E0  00FF               	movwf	127
  4225  03E1  0858               	movf	??_ISR+6,w
  4226  03E2  008A               	movwf	10
  4227  03E3  0857               	movf	??_ISR+5,w
  4228  03E4  0084               	movwf	4
  4229  03E5  0E56               	swapf	(??_ISR+4)^0,w
  4230  03E6  0083               	movwf	3
  4231  03E7  0EFE               	swapf	126,f
  4232  03E8  0E7E               	swapf	126,w
  4233  03E9  0009               	retfie
  4234  03EA                     __end_of_ISR:	
  4235                           
  4236                           	psect	intentry
  4237  0004                     __pintentry:	
  4238                           ;incstack = 0
  4239 ;; hardware stack exceeded
  4240                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4241                           
  4242  0004                     interrupt_function:	
  4243  007E                     saved_w	set	btemp
  4244  0004  00FE               	movwf	btemp
  4245  0005  0E03               	swapf	3,w
  4246  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4247  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4248  0008  00D6               	movwf	??_ISR+4
  4249  0009  0804               	movf	4,w
  4250  000A  00D7               	movwf	??_ISR+5
  4251  000B  080A               	movf	10,w
  4252  000C  00D8               	movwf	??_ISR+6
  4253  000D  087F               	movf	btemp+1,w
  4254  000E  00D9               	movwf	??_ISR+7
  4255  000F  120A  118A  2852   	ljmp	_ISR
  4256                           
  4257                           	psect	text17
  4258  16BB                     __ptext17:	
  4259 ;; *************** function i1_lcd_escreve_string *****************
  4260 ;; Defined at:
  4261 ;;		line 168 in file "lcd_4bit.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  y               2   12[COMMON] PTR const unsigned char 
  4264 ;;		 -> STR_12(16), STR_9(2), STR_8(4), STR_6(4), 
  4265 ;;		 -> STR_5(2), STR_4(4), STR_2(4), ISR@aux(16), 
  4266 ;;		 -> FormatarValor@aux(40), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;		None               void
  4271 ;; Registers used:
  4272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4278 ;;      Params:         2       0       0       0       0
  4279 ;;      Locals:         0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0
  4281 ;;      Totals:         2       0       0       0       0
  4282 ;;Total ram usage:        2 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    4
  4285 ;; This function calls:
  4286 ;;		i1_lcd_putc
  4287 ;; This function is called by:
  4288 ;;		_ISR
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           
  4293                           ;psect for function i1_lcd_escreve_string
  4294  16BB                     i1_lcd_escreve_string:	
  4295  16BB                     i1l2761:	
  4296                           ;lcd_4bit.c: 170: while(*y!='\0')
  4297                           
  4298                           ;incstack = 0
  4299 ;; hardware stack exceeded
  4300                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4301                           
  4302  16BB  087D               	movf	i1lcd_escreve_string@y+1,w
  4303  16BC  1283               	bcf	3,5	;RP0=0, select bank0
  4304  16BD  1303               	bcf	3,6	;RP1=0, select bank0
  4305  16BE  00FF               	movwf	127
  4306  16BF  087C               	movf	i1lcd_escreve_string@y,w
  4307  16C0  0084               	movwf	4
  4308  16C1  120A  158A  2000  160A  118A  	fcall	stringtab
  4309  16C6  3800               	iorlw	0
  4310  16C7  1903               	btfsc	3,2
  4311  16C8  0008               	return
  4312                           
  4313                           ;lcd_4bit.c: 171: {
  4314                           ;lcd_4bit.c: 172: lcd_putc(*y);
  4315  16C9  087D               	movf	i1lcd_escreve_string@y+1,w
  4316  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  4317  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  4318  16CC  00FF               	movwf	127
  4319  16CD  087C               	movf	i1lcd_escreve_string@y,w
  4320  16CE  0084               	movwf	4
  4321  16CF  120A  158A  2000  160A  118A  	fcall	stringtab
  4322  16D4  120A  158A  20D4  160A  118A  	fcall	i1_lcd_putc
  4323                           
  4324                           ;lcd_4bit.c: 173: y++;
  4325  16D9  3001               	movlw	1
  4326  16DA  07FC               	addwf	i1lcd_escreve_string@y,f
  4327  16DB  1803               	skipnc
  4328  16DC  0AFD               	incf	i1lcd_escreve_string@y+1,f
  4329  16DD  2EBB               	goto	i1l2761
  4330  16DE                     __end_ofi1_lcd_escreve_string:	
  4331                           
  4332                           	psect	text18
  4333  08D4                     __ptext18:	
  4334 ;; *************** function i1_lcd_putc *****************
  4335 ;; Defined at:
  4336 ;;		line 82 in file "lcd_4bit.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  c               1    wreg     unsigned char 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  c               1   11[COMMON] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4350 ;;      Params:         0       0       0       0       0
  4351 ;;      Locals:         1       0       0       0       0
  4352 ;;      Temps:          2       0       0       0       0
  4353 ;;      Totals:         3       0       0       0       0
  4354 ;;Total ram usage:        3 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    3
  4357 ;; This function calls:
  4358 ;;		i1_lcd_envia_byte
  4359 ;;		i1_lcd_gotoxy
  4360 ;; This function is called by:
  4361 ;;		i1_lcd_escreve_string
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function i1_lcd_putc
  4367  08D4                     i1_lcd_putc:	
  4368                           
  4369                           ;incstack = 0
  4370 ;; hardware stack exceeded
  4371                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4372                           ;i1lcd_putc@c stored from wreg
  4373  08D4  00FB               	movwf	i1lcd_putc@c
  4374                           
  4375                           ;lcd_4bit.c: 84: switch(c)
  4376  08D5  2903               	goto	i1l2563
  4377  08D6                     i1l2551:	
  4378                           ;lcd_4bit.c: 85: {
  4379                           ;lcd_4bit.c: 86: case '\f':
  4380                           
  4381                           
  4382                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  4383  08D6  01F2               	clrf	i1lcd_envia_byte@n
  4384  08D7  0AF2               	incf	i1lcd_envia_byte@n,f
  4385  08D8  3000               	movlw	0
  4386  08D9  160A  118A  2709  120A  158A  	fcall	i1_lcd_envia_byte
  4387                           
  4388                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  4389  08DE  300D               	movlw	13
  4390  08DF  00FA               	movwf	??i1_lcd_putc+1
  4391  08E0  30FB               	movlw	251
  4392  08E1  00F9               	movwf	??i1_lcd_putc
  4393  08E2                     u440_27:	
  4394  08E2  0BF9               	decfsz	??i1_lcd_putc,f
  4395  08E3  28E2               	goto	u440_27
  4396  08E4  0BFA               	decfsz	??i1_lcd_putc+1,f
  4397  08E5  28E2               	goto	u440_27
  4398  08E6  28E7               	nop2
  4399                           
  4400                           ;lcd_4bit.c: 89: break;
  4401  08E7  0008               	return
  4402  08E8                     i1l2555:	
  4403                           ;lcd_4bit.c: 91: case '\n':
  4404                           
  4405                           
  4406                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  4407  08E8  3002               	movlw	2
  4408  08E9  00F9               	movwf	??i1_lcd_putc
  4409  08EA  0879               	movf	??i1_lcd_putc,w
  4410  08EB  00F5               	movwf	i1lcd_gotoxy@y
  4411  08EC  3001               	movlw	1
  4412  08ED  160A  118A  25E7   	fcall	i1_lcd_gotoxy
  4413                           
  4414                           ;lcd_4bit.c: 93: break;
  4415  08F0  0008               	return
  4416  08F1                     i1l2557:	
  4417                           ;lcd_4bit.c: 95: case '\b':
  4418                           
  4419                           
  4420                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  4421  08F1  3010               	movlw	16
  4422  08F2  00F9               	movwf	??i1_lcd_putc
  4423  08F3  0879               	movf	??i1_lcd_putc,w
  4424  08F4  00F2               	movwf	i1lcd_envia_byte@n
  4425  08F5  3000               	movlw	0
  4426  08F6  160A  118A  2709   	fcall	i1_lcd_envia_byte
  4427                           
  4428                           ;lcd_4bit.c: 97: break;
  4429  08F9  0008               	return
  4430  08FA                     i1l2559:	
  4431                           ;lcd_4bit.c: 99: default:
  4432                           
  4433                           
  4434                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  4435  08FA  087B               	movf	i1lcd_putc@c,w
  4436  08FB  00F9               	movwf	??i1_lcd_putc
  4437  08FC  0879               	movf	??i1_lcd_putc,w
  4438  08FD  00F2               	movwf	i1lcd_envia_byte@n
  4439  08FE  3001               	movlw	1
  4440  08FF  160A  118A  2709   	fcall	i1_lcd_envia_byte
  4441                           
  4442                           ;lcd_4bit.c: 102: }
  4443                           
  4444                           ;lcd_4bit.c: 101: break;
  4445  0902  0008               	return
  4446  0903                     i1l2563:	
  4447  0903  087B               	movf	i1lcd_putc@c,w
  4448                           
  4449                           ; Switch size 1, requested type "space"
  4450                           ; Number of cases is 3, Range of values is 8 to 12
  4451                           ; switch strategies available:
  4452                           ; Name         Instructions Cycles
  4453                           ; simple_byte           10     6 (average)
  4454                           ; direct_byte           26    11 (fixed)
  4455                           ; jumptable            263     9 (fixed)
  4456                           ;	Chosen strategy is simple_byte
  4457  0904  3A08               	xorlw	8	; case 8
  4458  0905  1903               	skipnz
  4459  0906  28F1               	goto	i1l2557
  4460  0907  3A02               	xorlw	2	; case 10
  4461  0908  1903               	skipnz
  4462  0909  28E8               	goto	i1l2555
  4463  090A  3A06               	xorlw	6	; case 12
  4464  090B  1903               	skipnz
  4465  090C  28D6               	goto	i1l2551
  4466  090D  28FA               	goto	i1l2559
  4467  090E  0008               	return
  4468  090F                     __end_ofi1_lcd_putc:	
  4469                           
  4470                           	psect	text19
  4471  15E7                     __ptext19:	
  4472 ;; *************** function i1_lcd_gotoxy *****************
  4473 ;; Defined at:
  4474 ;;		line 70 in file "lcd_4bit.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  x               1    wreg     unsigned char 
  4477 ;;  y               1    5[COMMON] unsigned char 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  x               1    7[COMMON] unsigned char 
  4480 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;		None               void
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, pclath, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4490 ;;      Params:         1       0       0       0       0
  4491 ;;      Locals:         2       0       0       0       0
  4492 ;;      Temps:          1       0       0       0       0
  4493 ;;      Totals:         4       0       0       0       0
  4494 ;;Total ram usage:        4 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    2
  4497 ;; This function calls:
  4498 ;;		i1_lcd_envia_byte
  4499 ;; This function is called by:
  4500 ;;		_ISR
  4501 ;;		i1_lcd_putc
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function i1_lcd_gotoxy
  4507  15E7                     i1_lcd_gotoxy:	
  4508                           
  4509                           ;incstack = 0
  4510 ;; hardware stack exceeded
  4511                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4512                           ;i1lcd_gotoxy@x stored from wreg
  4513  15E7  00F7               	movwf	i1lcd_gotoxy@x
  4514                           
  4515                           ;lcd_4bit.c: 72: unsigned char address;
  4516                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  4517  15E8  0875               	movf	i1lcd_gotoxy@y,w
  4518  15E9  3A01               	xorlw	1
  4519  15EA  1903               	skipnz
  4520  15EB  2DF1               	goto	i1l2181
  4521  15EC  3040               	movlw	64
  4522  15ED  00F6               	movwf	??i1_lcd_gotoxy
  4523  15EE  0876               	movf	??i1_lcd_gotoxy,w
  4524  15EF  00F8               	movwf	i1lcd_gotoxy@address
  4525  15F0  2DF2               	goto	i1l2183
  4526  15F1                     i1l2181:	
  4527                           
  4528                           ;lcd_4bit.c: 75: else address=0;
  4529  15F1  01F8               	clrf	i1lcd_gotoxy@address
  4530  15F2                     i1l2183:	
  4531                           
  4532                           ;lcd_4bit.c: 77: address += x-1;
  4533  15F2  0877               	movf	i1lcd_gotoxy@x,w
  4534  15F3  3EFF               	addlw	255
  4535  15F4  00F6               	movwf	??i1_lcd_gotoxy
  4536  15F5  0876               	movf	??i1_lcd_gotoxy,w
  4537  15F6  07F8               	addwf	i1lcd_gotoxy@address,f
  4538                           
  4539                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  4540  15F7  0878               	movf	i1lcd_gotoxy@address,w
  4541  15F8  3880               	iorlw	128
  4542  15F9  00F6               	movwf	??i1_lcd_gotoxy
  4543  15FA  0876               	movf	??i1_lcd_gotoxy,w
  4544  15FB  00F2               	movwf	i1lcd_envia_byte@n
  4545  15FC  3000               	movlw	0
  4546  15FD  160A  118A  2709   	fcall	i1_lcd_envia_byte
  4547  1600  0008               	return
  4548  1601                     __end_ofi1_lcd_gotoxy:	
  4549                           
  4550                           	psect	text20
  4551  1709                     __ptext20:	
  4552 ;; *************** function i1_lcd_envia_byte *****************
  4553 ;; Defined at:
  4554 ;;		line 53 in file "lcd_4bit.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  address         1    wreg     unsigned char 
  4557 ;;  n               1    2[COMMON] unsigned char 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  address         1    4[COMMON] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;		None               void
  4562 ;; Registers used:
  4563 ;;		wreg, status,2, status,0, pclath, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4569 ;;      Params:         1       0       0       0       0
  4570 ;;      Locals:         1       0       0       0       0
  4571 ;;      Temps:          1       0       0       0       0
  4572 ;;      Totals:         3       0       0       0       0
  4573 ;;Total ram usage:        3 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    1
  4576 ;; This function calls:
  4577 ;;		i1_lcd_envia_nibble
  4578 ;; This function is called by:
  4579 ;;		i1_lcd_gotoxy
  4580 ;;		i1_lcd_putc
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function i1_lcd_envia_byte
  4586  1709                     i1_lcd_envia_byte:	
  4587                           
  4588                           ;incstack = 0
  4589 ;; hardware stack exceeded
  4590                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  4591                           ;i1lcd_envia_byte@address stored from wreg
  4592  1709  00F4               	movwf	i1lcd_envia_byte@address
  4593                           
  4594                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  4595  170A  1283               	bcf	3,5	;RP0=0, select bank0
  4596  170B  1303               	bcf	3,6	;RP1=0, select bank0
  4597  170C  1286               	bcf	6,5	;volatile
  4598                           
  4599                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  4600  170D  3063               	movlw	99
  4601  170E  00F3               	movwf	??i1_lcd_envia_byte
  4602  170F                     u441_27:	
  4603  170F  0BF3               	decfsz	??i1_lcd_envia_byte,f
  4604  1710  2F0F               	goto	u441_27
  4605  1711  2F12               	nop2	;nop
  4606                           
  4607                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  4608  1712  0874               	movf	i1lcd_envia_byte@address,w
  4609  1713  1903               	btfsc	3,2
  4610  1714  2F19               	goto	i1l189
  4611  1715  1283               	bcf	3,5	;RP0=0, select bank0
  4612  1716  1303               	bcf	3,6	;RP1=0, select bank0
  4613  1717  1686               	bsf	6,5	;volatile
  4614  1718  2F1C               	goto	i1l190
  4615  1719                     i1l189:	
  4616                           
  4617                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  4618  1719  1283               	bcf	3,5	;RP0=0, select bank0
  4619  171A  1303               	bcf	3,6	;RP1=0, select bank0
  4620  171B  1286               	bcf	6,5	;volatile
  4621  171C                     i1l190:	
  4622                           
  4623                           ;lcd_4bit.c: 61: _delay(1);
  4624  171C  0000               	nop
  4625                           
  4626                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  4627  171D  1283               	bcf	3,5	;RP0=0, select bank0
  4628  171E  1303               	bcf	3,6	;RP1=0, select bank0
  4629  171F  1206               	bcf	6,4	;volatile
  4630                           
  4631                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  4632  1720  0872               	movf	i1lcd_envia_byte@n,w
  4633  1721  00F3               	movwf	??i1_lcd_envia_byte
  4634  1722  3004               	movlw	4
  4635  1723                     u203_25:	
  4636  1723  1003               	clrc
  4637  1724  0CF3               	rrf	??i1_lcd_envia_byte,f
  4638  1725  3EFF               	addlw	-1
  4639  1726  1D03               	skipz
  4640  1727  2F23               	goto	u203_25
  4641  1728  0873               	movf	??i1_lcd_envia_byte,w
  4642  1729  160A  118A  27C7  160A  118A  	fcall	i1_lcd_envia_nibble
  4643                           
  4644                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  4645  172E  0872               	movf	i1lcd_envia_byte@n,w
  4646  172F  390F               	andlw	15
  4647  1730  160A  118A  27C7   	fcall	i1_lcd_envia_nibble
  4648  1733  0008               	return
  4649  1734                     __end_ofi1_lcd_envia_byte:	
  4650                           
  4651                           	psect	text21
  4652  17C7                     __ptext21:	
  4653 ;; *************** function i1_lcd_envia_nibble *****************
  4654 ;; Defined at:
  4655 ;;		line 39 in file "lcd_4bit.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  n               1    wreg     unsigned char 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  n               1    1[COMMON] unsigned char 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;		None               void
  4662 ;; Registers used:
  4663 ;;		wreg, status,2, status,0
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4669 ;;      Params:         0       0       0       0       0
  4670 ;;      Locals:         1       0       0       0       0
  4671 ;;      Temps:          1       0       0       0       0
  4672 ;;      Totals:         2       0       0       0       0
  4673 ;;Total ram usage:        2 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; This function calls:
  4676 ;;		Nothing
  4677 ;; This function is called by:
  4678 ;;		i1_lcd_envia_byte
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function i1_lcd_envia_nibble
  4684  17C7                     i1_lcd_envia_nibble:	
  4685                           
  4686                           ;incstack = 0
  4687 ;; hardware stack exceeded
  4688                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  4689                           ;i1lcd_envia_nibble@n stored from wreg
  4690  17C7  00F1               	movwf	i1lcd_envia_nibble@n
  4691                           
  4692                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  4693  17C8  3000               	movlw	0
  4694  17C9  1871               	btfsc	i1lcd_envia_nibble@n,0
  4695  17CA  3001               	movlw	1
  4696  17CB  00F0               	movwf	??i1_lcd_envia_nibble
  4697  17CC  1283               	bcf	3,5	;RP0=0, select bank0
  4698  17CD  1303               	bcf	3,6	;RP1=0, select bank0
  4699  17CE  0806               	movf	6,w	;volatile
  4700  17CF  0670               	xorwf	??i1_lcd_envia_nibble,w
  4701  17D0  39FE               	andlw	-2
  4702  17D1  0670               	xorwf	??i1_lcd_envia_nibble,w
  4703  17D2  0086               	movwf	6	;volatile
  4704                           
  4705                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  4706  17D3  3000               	movlw	0
  4707  17D4  18F1               	btfsc	i1lcd_envia_nibble@n,1
  4708  17D5  3001               	movlw	1
  4709  17D6  00F0               	movwf	??i1_lcd_envia_nibble
  4710  17D7  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4711  17D8  0806               	movf	6,w	;volatile
  4712  17D9  0670               	xorwf	??i1_lcd_envia_nibble,w
  4713  17DA  39FD               	andlw	-3
  4714  17DB  0670               	xorwf	??i1_lcd_envia_nibble,w
  4715  17DC  0086               	movwf	6	;volatile
  4716                           
  4717                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  4718  17DD  3000               	movlw	0
  4719  17DE  1971               	btfsc	i1lcd_envia_nibble@n,2
  4720  17DF  3001               	movlw	1
  4721  17E0  00F0               	movwf	??i1_lcd_envia_nibble
  4722  17E1  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4723  17E2  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4724  17E3  0806               	movf	6,w	;volatile
  4725  17E4  0670               	xorwf	??i1_lcd_envia_nibble,w
  4726  17E5  39FB               	andlw	-5
  4727  17E6  0670               	xorwf	??i1_lcd_envia_nibble,w
  4728  17E7  0086               	movwf	6	;volatile
  4729                           
  4730                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  4731  17E8  3000               	movlw	0
  4732  17E9  19F1               	btfsc	i1lcd_envia_nibble@n,3
  4733  17EA  3001               	movlw	1
  4734  17EB  00F0               	movwf	??i1_lcd_envia_nibble
  4735  17EC  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4736  17ED  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4737  17EE  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4738  17EF  0806               	movf	6,w	;volatile
  4739  17F0  0670               	xorwf	??i1_lcd_envia_nibble,w
  4740  17F1  39F7               	andlw	-9
  4741  17F2  0670               	xorwf	??i1_lcd_envia_nibble,w
  4742  17F3  0086               	movwf	6	;volatile
  4743                           
  4744                           ;lcd_4bit.c: 46: _delay(1);
  4745  17F4  0000               	nop
  4746                           
  4747                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  4748  17F5  1283               	bcf	3,5	;RP0=0, select bank0
  4749  17F6  1303               	bcf	3,6	;RP1=0, select bank0
  4750  17F7  1606               	bsf	6,4	;volatile
  4751                           
  4752                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  4753  17F8  3003               	movlw	3
  4754  17F9  00F0               	movwf	??i1_lcd_envia_nibble
  4755  17FA                     u442_27:	
  4756  17FA  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  4757  17FB  2FFA               	goto	u442_27
  4758                           
  4759                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  4760  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  4761  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  4762  17FE  1206               	bcf	6,4	;volatile
  4763  17FF  0008               	return
  4764  1800                     __end_ofi1_lcd_envia_nibble:	
  4765                           
  4766                           	psect	text22
  4767  0F46                     __ptext22:	
  4768 ;; *************** function _ftoa *****************
  4769 ;; Defined at:
  4770 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  f               3   36[BANK0 ] float 
  4773 ;;  status          1   39[BANK0 ] PTR int 
  4774 ;;		 -> ISR@status2(2), ISR@status(2), 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  l               4   45[BANK0 ] unsigned long 
  4777 ;;  rem             4   41[BANK0 ] unsigned long 
  4778 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4779 ;;		 -> ftoa@buf(17), 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      PTR unsigned char 
  4782 ;; Registers used:
  4783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4789 ;;      Params:         0       4       0       0       0
  4790 ;;      Locals:         0       9       0       0       0
  4791 ;;      Temps:          0       1       0       0       0
  4792 ;;      Totals:         0      14       0       0       0
  4793 ;;Total ram usage:       14 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    3
  4796 ;; This function calls:
  4797 ;;		___ftge
  4798 ;;		___ftmul
  4799 ;;		___ftneg
  4800 ;;		___ftsub
  4801 ;;		___fttol
  4802 ;;		___lltoft
  4803 ;;		_sprintf
  4804 ;; This function is called by:
  4805 ;;		_ISR
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _ftoa
  4811  0F46                     _ftoa:	
  4812                           
  4813                           ;incstack = 0
  4814 ;; hardware stack exceeded
  4815                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4816  0F46  30C9               	movlw	ftoa@buf& (0+255)
  4817  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  4818  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  4819  0F49  00C8               	movwf	??_ftoa
  4820  0F4A  0848               	movf	??_ftoa,w
  4821  0F4B  00D1               	movwf	ftoa@cp
  4822  0F4C  0844               	movf	ftoa@f,w
  4823  0F4D  00F0               	movwf	___ftge@ff1
  4824  0F4E  0845               	movf	ftoa@f+1,w
  4825  0F4F  00F1               	movwf	___ftge@ff1+1
  4826  0F50  0846               	movf	ftoa@f+2,w
  4827  0F51  00F2               	movwf	___ftge@ff1+2
  4828  0F52  3000               	movlw	0
  4829  0F53  00F3               	movwf	___ftge@ff2
  4830  0F54  3000               	movlw	0
  4831  0F55  00F4               	movwf	___ftge@ff2+1
  4832  0F56  3000               	movlw	0
  4833  0F57  00F5               	movwf	___ftge@ff2+2
  4834  0F58  120A  158A  2283  120A  158A  	fcall	___ftge
  4835  0F5D  1803               	btfsc	3,0
  4836  0F5E  2F7F               	goto	i1l2617
  4837  0F5F  302D               	movlw	45
  4838  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  4839  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  4840  0F62  00C8               	movwf	??_ftoa
  4841  0F63  0851               	movf	ftoa@cp,w
  4842  0F64  0084               	movwf	4
  4843  0F65  0848               	movf	??_ftoa,w
  4844  0F66  1383               	bcf	3,7	;select IRP bank0
  4845  0F67  0080               	movwf	0
  4846  0F68  3001               	movlw	1
  4847  0F69  00C8               	movwf	??_ftoa
  4848  0F6A  0848               	movf	??_ftoa,w
  4849  0F6B  07D1               	addwf	ftoa@cp,f
  4850  0F6C  0844               	movf	ftoa@f,w
  4851  0F6D  00F0               	movwf	___ftneg@f1
  4852  0F6E  0845               	movf	ftoa@f+1,w
  4853  0F6F  00F1               	movwf	___ftneg@f1+1
  4854  0F70  0846               	movf	ftoa@f+2,w
  4855  0F71  00F2               	movwf	___ftneg@f1+2
  4856  0F72  160A  118A  257C  120A  158A  	fcall	___ftneg
  4857  0F77  0870               	movf	?___ftneg,w
  4858  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4859  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4860  0F7A  00C4               	movwf	ftoa@f
  4861  0F7B  0871               	movf	?___ftneg+1,w
  4862  0F7C  00C5               	movwf	ftoa@f+1
  4863  0F7D  0872               	movf	?___ftneg+2,w
  4864  0F7E  00C6               	movwf	ftoa@f+2
  4865  0F7F                     i1l2617:	
  4866  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4867  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4868  0F81  0844               	movf	ftoa@f,w
  4869  0F82  00B0               	movwf	___fttol@f1
  4870  0F83  0845               	movf	ftoa@f+1,w
  4871  0F84  00B1               	movwf	___fttol@f1+1
  4872  0F85  0846               	movf	ftoa@f+2,w
  4873  0F86  00B2               	movwf	___fttol@f1+2
  4874  0F87  120A  158A  2571  120A  158A  	fcall	___fttol
  4875  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0F8E  0833               	movf	?___fttol+3,w
  4878  0F8F  00D0               	movwf	ftoa@l+3
  4879  0F90  0832               	movf	?___fttol+2,w
  4880  0F91  00CF               	movwf	ftoa@l+2
  4881  0F92  0831               	movf	?___fttol+1,w
  4882  0F93  00CE               	movwf	ftoa@l+1
  4883  0F94  0830               	movf	?___fttol,w
  4884  0F95  00CD               	movwf	ftoa@l
  4885  0F96  0850               	movf	ftoa@l+3,w
  4886  0F97  00FB               	movwf	___lltoft@c+3
  4887  0F98  084F               	movf	ftoa@l+2,w
  4888  0F99  00FA               	movwf	___lltoft@c+2
  4889  0F9A  084E               	movf	ftoa@l+1,w
  4890  0F9B  00F9               	movwf	___lltoft@c+1
  4891  0F9C  084D               	movf	ftoa@l,w
  4892  0F9D  00F8               	movwf	___lltoft@c
  4893  0F9E  160A  118A  26DE  120A  158A  	fcall	___lltoft
  4894  0FA3  0878               	movf	?___lltoft,w
  4895  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  4896  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  4897  0FA6  00A7               	movwf	___ftsub@f2
  4898  0FA7  0879               	movf	?___lltoft+1,w
  4899  0FA8  00A8               	movwf	___ftsub@f2+1
  4900  0FA9  087A               	movf	?___lltoft+2,w
  4901  0FAA  00A9               	movwf	___ftsub@f2+2
  4902  0FAB  0844               	movf	ftoa@f,w
  4903  0FAC  00AA               	movwf	___ftsub@f1
  4904  0FAD  0845               	movf	ftoa@f+1,w
  4905  0FAE  00AB               	movwf	___ftsub@f1+1
  4906  0FAF  0846               	movf	ftoa@f+2,w
  4907  0FB0  00AC               	movwf	___ftsub@f1+2
  4908  0FB1  160A  118A  261C  120A  158A  	fcall	___ftsub
  4909  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0FB8  0827               	movf	?___ftsub,w
  4912  0FB9  00C4               	movwf	ftoa@f
  4913  0FBA  0828               	movf	?___ftsub+1,w
  4914  0FBB  00C5               	movwf	ftoa@f+1
  4915  0FBC  0829               	movf	?___ftsub+2,w
  4916  0FBD  00C6               	movwf	ftoa@f+2
  4917  0FBE  0844               	movf	ftoa@f,w
  4918  0FBF  00A3               	movwf	___ftmul@f2
  4919  0FC0  0845               	movf	ftoa@f+1,w
  4920  0FC1  00A4               	movwf	___ftmul@f2+1
  4921  0FC2  0846               	movf	ftoa@f+2,w
  4922  0FC3  00A5               	movwf	___ftmul@f2+2
  4923  0FC4  3024               	movlw	36
  4924  0FC5  00A0               	movwf	___ftmul@f1
  4925  0FC6  3074               	movlw	116
  4926  0FC7  00A1               	movwf	___ftmul@f1+1
  4927  0FC8  3049               	movlw	73
  4928  0FC9  00A2               	movwf	___ftmul@f1+2
  4929  0FCA  120A  118A  272D  120A  158A  	fcall	___ftmul
  4930  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4931  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  4932  0FD1  0820               	movf	?___ftmul,w
  4933  0FD2  00B0               	movwf	___fttol@f1
  4934  0FD3  0821               	movf	?___ftmul+1,w
  4935  0FD4  00B1               	movwf	___fttol@f1+1
  4936  0FD5  0822               	movf	?___ftmul+2,w
  4937  0FD6  00B2               	movwf	___fttol@f1+2
  4938  0FD7  120A  158A  2571  120A  158A  	fcall	___fttol
  4939  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4940  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4941  0FDE  0833               	movf	?___fttol+3,w
  4942  0FDF  00CC               	movwf	ftoa@rem+3
  4943  0FE0  0832               	movf	?___fttol+2,w
  4944  0FE1  00CB               	movwf	ftoa@rem+2
  4945  0FE2  0831               	movf	?___fttol+1,w
  4946  0FE3  00CA               	movwf	ftoa@rem+1
  4947  0FE4  0830               	movf	?___fttol,w
  4948  0FE5  00C9               	movwf	ftoa@rem
  4949  0FE6  306B               	movlw	(STR_15-__stringbase)& (0+255)
  4950  0FE7  00C8               	movwf	??_ftoa
  4951  0FE8  0848               	movf	??_ftoa,w
  4952  0FE9  00AA               	movwf	sprintf@f
  4953  0FEA  0850               	movf	ftoa@l+3,w
  4954  0FEB  00AE               	movwf	?_sprintf+4
  4955  0FEC  084F               	movf	ftoa@l+2,w
  4956  0FED  00AD               	movwf	?_sprintf+3
  4957  0FEE  084E               	movf	ftoa@l+1,w
  4958  0FEF  00AC               	movwf	?_sprintf+2
  4959  0FF0  084D               	movf	ftoa@l,w
  4960  0FF1  00AB               	movwf	?_sprintf+1
  4961  0FF2  084C               	movf	ftoa@rem+3,w
  4962  0FF3  00B2               	movwf	?_sprintf+8
  4963  0FF4  084B               	movf	ftoa@rem+2,w
  4964  0FF5  00B1               	movwf	?_sprintf+7
  4965  0FF6  084A               	movf	ftoa@rem+1,w
  4966  0FF7  00B0               	movwf	?_sprintf+6
  4967  0FF8  0849               	movf	ftoa@rem,w
  4968  0FF9  00AF               	movwf	?_sprintf+5
  4969  0FFA  0851               	movf	ftoa@cp,w
  4970  0FFB  120A  118A  23EA   	fcall	_sprintf
  4971  0FFE  30C9               	movlw	ftoa@buf& (0+255)
  4972  0FFF  0008               	return
  4973  1000                     __end_of_ftoa:	
  4974                           
  4975                           	psect	text23
  4976  03EA                     __ptext23:	
  4977 ;; *************** function _sprintf *****************
  4978 ;; Defined at:
  4979 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;  sp              1    wreg     PTR unsigned char 
  4982 ;;		 -> ftoa@buf(17), 
  4983 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4984 ;;		 -> STR_15(11), 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4987 ;;		 -> ftoa@buf(17), 
  4988 ;;  _val            4   26[BANK0 ] struct .
  4989 ;;  prec            2   33[BANK0 ] int 
  4990 ;;  width           2   31[BANK0 ] int 
  4991 ;;  c               1   35[BANK0 ] char 
  4992 ;;  ap              1   25[BANK0 ] PTR void [1]
  4993 ;;		 -> ?_sprintf(2), 
  4994 ;;  flag            1   24[BANK0 ] unsigned char 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  2   10[BANK0 ] int 
  4997 ;; Registers used:
  4998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5004 ;;      Params:         0       9       0       0       0
  5005 ;;      Locals:         0      12       0       0       0
  5006 ;;      Temps:          0       5       0       0       0
  5007 ;;      Totals:         0      26       0       0       0
  5008 ;;Total ram usage:       26 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    1
  5011 ;; This function calls:
  5012 ;;		___lldiv
  5013 ;;		___llmod
  5014 ;;		___wmul
  5015 ;;		_isdigit
  5016 ;; This function is called by:
  5017 ;;		_ftoa
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           
  5022                           ;psect for function _sprintf
  5023  03EA                     _sprintf:	
  5024                           
  5025                           ;incstack = 0
  5026 ;; hardware stack exceeded
  5027                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5028                           ;sprintf@sp stored from wreg
  5029  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  5030  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  5031  03EC  00BE               	movwf	sprintf@sp
  5032                           
  5033                           ;doprnt.c: 494: va_list ap;
  5034                           ;doprnt.c: 499: signed char c;
  5035                           ;doprnt.c: 501: int width;
  5036                           ;doprnt.c: 504: int prec;
  5037                           ;doprnt.c: 508: unsigned char flag;
  5038                           ;doprnt.c: 527: union {
  5039                           ;doprnt.c: 528: unsigned long _val;
  5040                           ;doprnt.c: 529: struct {
  5041                           ;doprnt.c: 530: const char * _cp;
  5042                           ;doprnt.c: 531: unsigned _len;
  5043                           ;doprnt.c: 532: } _str;
  5044                           ;doprnt.c: 533: } _val;
  5045                           ;doprnt.c: 542: *ap = __va_start();
  5046  03ED  302B               	movlw	(?_sprintf+1)& (0+255)
  5047  03EE  00B3               	movwf	??_sprintf
  5048  03EF  0833               	movf	??_sprintf,w
  5049  03F0  00B9               	movwf	sprintf@ap
  5050  03F1                     i1l2397:	
  5051                           ;doprnt.c: 545: while(c = *f++) {
  5052                           
  5053  03F1  3001               	movlw	1
  5054  03F2  07AA               	addwf	sprintf@f,f
  5055  03F3  30FF               	movlw	-1
  5056  03F4  072A               	addwf	sprintf@f,w
  5057  03F5  0084               	movwf	4
  5058  03F6  120A  158A  200A  120A  118A  	fcall	stringdir
  5059  03FB  00B3               	movwf	??_sprintf
  5060  03FC  0833               	movf	??_sprintf,w
  5061  03FD  00C3               	movwf	sprintf@c
  5062  03FE  08C3               	movf	sprintf@c,f
  5063  03FF  1903               	btfsc	3,2
  5064  0400  2E21               	goto	i1l2399
  5065                           
  5066                           ;doprnt.c: 547: if(c != '%')
  5067  0401  0843               	movf	sprintf@c,w
  5068  0402  3A25               	xorlw	37
  5069  0403  1903               	skipnz
  5070  0404  2C11               	goto	i1l2307
  5071                           
  5072                           ;doprnt.c: 549: {
  5073                           ;doprnt.c: 550: ((*sp++ = (c)));
  5074  0405  0843               	movf	sprintf@c,w
  5075  0406  00B3               	movwf	??_sprintf
  5076  0407  083E               	movf	sprintf@sp,w
  5077  0408  0084               	movwf	4
  5078  0409  0833               	movf	??_sprintf,w
  5079  040A  1383               	bcf	3,7	;select IRP bank0
  5080  040B  0080               	movwf	0
  5081  040C  3001               	movlw	1
  5082  040D  00B3               	movwf	??_sprintf
  5083  040E  0833               	movf	??_sprintf,w
  5084  040F  07BE               	addwf	sprintf@sp,f
  5085                           
  5086                           ;doprnt.c: 551: continue;
  5087  0410  2BF1               	goto	i1l2397
  5088  0411                     i1l2307:	
  5089                           
  5090                           ;doprnt.c: 552: }
  5091                           ;doprnt.c: 555: width = 0;
  5092  0411  01BF               	clrf	sprintf@width
  5093  0412  01C0               	clrf	sprintf@width+1
  5094                           
  5095                           ;doprnt.c: 557: flag = 0;
  5096  0413  01B8               	clrf	sprintf@flag
  5097                           
  5098                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5099  0414  082A               	movf	sprintf@f,w
  5100  0415  0084               	movwf	4
  5101  0416  120A  158A  200A  120A  118A  	fcall	stringdir
  5102  041B  160A  118A  2597  120A  118A  	fcall	_isdigit
  5103  0420  1C03               	btfss	3,0
  5104  0421  2C64               	goto	i1l2321
  5105                           
  5106                           ;doprnt.c: 607: width = 0;
  5107  0422  1283               	bcf	3,5	;RP0=0, select bank0
  5108  0423  1303               	bcf	3,6	;RP1=0, select bank0
  5109  0424  01BF               	clrf	sprintf@width
  5110  0425  01C0               	clrf	sprintf@width+1
  5111  0426                     i1l2313:	
  5112                           ;doprnt.c: 608: do {
  5113                           
  5114                           
  5115                           ;doprnt.c: 609: width *= 10;
  5116  0426  300A               	movlw	10
  5117  0427  00F0               	movwf	___wmul@multiplier
  5118  0428  3000               	movlw	0
  5119  0429  00F1               	movwf	___wmul@multiplier+1
  5120  042A  1283               	bcf	3,5	;RP0=0, select bank0
  5121  042B  1303               	bcf	3,6	;RP1=0, select bank0
  5122  042C  0840               	movf	sprintf@width+1,w
  5123  042D  01F3               	clrf	___wmul@multiplicand+1
  5124  042E  07F3               	addwf	___wmul@multiplicand+1,f
  5125  042F  083F               	movf	sprintf@width,w
  5126  0430  01F2               	clrf	___wmul@multiplicand
  5127  0431  07F2               	addwf	___wmul@multiplicand,f
  5128  0432  160A  118A  2698  120A  118A  	fcall	___wmul
  5129  0437  0871               	movf	?___wmul+1,w
  5130  0438  1283               	bcf	3,5	;RP0=0, select bank0
  5131  0439  1303               	bcf	3,6	;RP1=0, select bank0
  5132  043A  01C0               	clrf	sprintf@width+1
  5133  043B  07C0               	addwf	sprintf@width+1,f
  5134  043C  0870               	movf	?___wmul,w
  5135  043D  01BF               	clrf	sprintf@width
  5136  043E  07BF               	addwf	sprintf@width,f
  5137                           
  5138                           ;doprnt.c: 610: width += *f++ - '0';
  5139  043F  082A               	movf	sprintf@f,w
  5140  0440  0084               	movwf	4
  5141  0441  120A  158A  200A  120A  118A  	fcall	stringdir
  5142  0446  3ED0               	addlw	208
  5143  0447  00B3               	movwf	??_sprintf
  5144  0448  30FF               	movlw	255
  5145  0449  1803               	skipnc
  5146  044A  3000               	movlw	0
  5147  044B  00B4               	movwf	??_sprintf+1
  5148  044C  0833               	movf	??_sprintf,w
  5149  044D  07BF               	addwf	sprintf@width,f
  5150  044E  1803               	skipnc
  5151  044F  0AC0               	incf	sprintf@width+1,f
  5152  0450  0834               	movf	??_sprintf+1,w
  5153  0451  07C0               	addwf	sprintf@width+1,f
  5154  0452  3001               	movlw	1
  5155  0453  00B3               	movwf	??_sprintf
  5156  0454  0833               	movf	??_sprintf,w
  5157  0455  07AA               	addwf	sprintf@f,f
  5158                           
  5159                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5160  0456  082A               	movf	sprintf@f,w
  5161  0457  0084               	movwf	4
  5162  0458  120A  158A  200A  120A  118A  	fcall	stringdir
  5163  045D  160A  118A  2597  120A  118A  	fcall	_isdigit
  5164  0462  1803               	btfsc	3,0
  5165  0463  2C26               	goto	i1l2313
  5166  0464                     i1l2321:	
  5167                           
  5168                           ;doprnt.c: 617: }
  5169                           ;doprnt.c: 620: if(*f == '.') {
  5170  0464  1283               	bcf	3,5	;RP0=0, select bank0
  5171  0465  1303               	bcf	3,6	;RP1=0, select bank0
  5172  0466  082A               	movf	sprintf@f,w
  5173  0467  0084               	movwf	4
  5174  0468  120A  158A  200A  120A  118A  	fcall	stringdir
  5175  046D  3A2E               	xorlw	46
  5176  046E  1D03               	skipz
  5177  046F  2CB2               	goto	i1l2333
  5178                           
  5179                           ;doprnt.c: 622: f++;
  5180  0470  3001               	movlw	1
  5181  0471  00B3               	movwf	??_sprintf
  5182  0472  0833               	movf	??_sprintf,w
  5183  0473  07AA               	addwf	sprintf@f,f
  5184                           
  5185                           ;doprnt.c: 629: {
  5186                           ;doprnt.c: 630: prec = 0;
  5187  0474  01C1               	clrf	sprintf@prec
  5188  0475  01C2               	clrf	sprintf@prec+1
  5189  0476                     i1l2331:	
  5190                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5191                           
  5192  0476  082A               	movf	sprintf@f,w
  5193  0477  0084               	movwf	4
  5194  0478  120A  158A  200A  120A  118A  	fcall	stringdir
  5195  047D  160A  118A  2597  120A  118A  	fcall	_isdigit
  5196  0482  1C03               	btfss	3,0
  5197  0483  2CBE               	goto	i1l2339
  5198                           
  5199                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5200  0484  1283               	bcf	3,5	;RP0=0, select bank0
  5201  0485  1303               	bcf	3,6	;RP1=0, select bank0
  5202  0486  0842               	movf	sprintf@prec+1,w
  5203  0487  01F1               	clrf	___wmul@multiplier+1
  5204  0488  07F1               	addwf	___wmul@multiplier+1,f
  5205  0489  0841               	movf	sprintf@prec,w
  5206  048A  01F0               	clrf	___wmul@multiplier
  5207  048B  07F0               	addwf	___wmul@multiplier,f
  5208  048C  300A               	movlw	10
  5209  048D  00F2               	movwf	___wmul@multiplicand
  5210  048E  3000               	movlw	0
  5211  048F  00F3               	movwf	___wmul@multiplicand+1
  5212  0490  160A  118A  2698  120A  118A  	fcall	___wmul
  5213  0495  1283               	bcf	3,5	;RP0=0, select bank0
  5214  0496  1303               	bcf	3,6	;RP1=0, select bank0
  5215  0497  082A               	movf	sprintf@f,w
  5216  0498  0084               	movwf	4
  5217  0499  120A  158A  200A  120A  118A  	fcall	stringdir
  5218  049E  0770               	addwf	?___wmul,w
  5219  049F  00B3               	movwf	??_sprintf
  5220  04A0  3000               	movlw	0
  5221  04A1  1803               	skipnc
  5222  04A2  3001               	movlw	1
  5223  04A3  0771               	addwf	?___wmul+1,w
  5224  04A4  00B4               	movwf	??_sprintf+1
  5225  04A5  0833               	movf	??_sprintf,w
  5226  04A6  3ED0               	addlw	208
  5227  04A7  00C1               	movwf	sprintf@prec
  5228  04A8  0834               	movf	??_sprintf+1,w
  5229  04A9  1803               	skipnc
  5230  04AA  3E01               	addlw	1
  5231  04AB  3EFF               	addlw	255
  5232  04AC  00C2               	movwf	sprintf@prec+1
  5233  04AD  3001               	movlw	1
  5234  04AE  00B3               	movwf	??_sprintf
  5235  04AF  0833               	movf	??_sprintf,w
  5236  04B0  07AA               	addwf	sprintf@f,f
  5237  04B1  2C76               	goto	i1l2331
  5238  04B2                     i1l2333:	
  5239                           ;doprnt.c: 633: }
  5240                           ;doprnt.c: 634: } else {
  5241                           
  5242                           
  5243                           ;doprnt.c: 635: prec = 0;
  5244  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  5245  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  5246  04B4  01C1               	clrf	sprintf@prec
  5247  04B5  01C2               	clrf	sprintf@prec+1
  5248                           
  5249                           ;doprnt.c: 644: switch(c = *f++) {
  5250                           
  5251                           ;doprnt.c: 639: }
  5252                           ;doprnt.c: 642: loop:
  5253  04B6  2CBE               	goto	i1l2339
  5254  04B7                     i1l269:	
  5255                           ;doprnt.c: 650: case 'l':
  5256                           
  5257                           ;doprnt.c: 647: goto alldone;
  5258                           
  5259                           ;doprnt.c: 646: case 0:
  5260                           
  5261                           
  5262                           ;doprnt.c: 652: flag |= 0x10;
  5263  04B7  1638               	bsf	sprintf@flag,4
  5264                           
  5265                           ;doprnt.c: 653: goto loop;
  5266  04B8  2CBE               	goto	i1l2339
  5267  04B9                     i1l2335:	
  5268                           ;doprnt.c: 826: case 'u':
  5269                           
  5270                           ;doprnt.c: 822: continue;
  5271                           
  5272                           ;doprnt.c: 811: default:
  5273                           
  5274                           
  5275                           ;doprnt.c: 827: flag |= 0xC0;
  5276  04B9  30C0               	movlw	192
  5277  04BA  00B3               	movwf	??_sprintf
  5278  04BB  0833               	movf	??_sprintf,w
  5279  04BC  04B8               	iorwf	sprintf@flag,f
  5280                           
  5281                           ;doprnt.c: 831: }
  5282                           
  5283                           ;doprnt.c: 828: break;
  5284  04BD  2CD5               	goto	i1l272
  5285  04BE                     i1l2339:	
  5286  04BE  3001               	movlw	1
  5287  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  5288  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  5289  04C1  07AA               	addwf	sprintf@f,f
  5290  04C2  30FF               	movlw	-1
  5291  04C3  072A               	addwf	sprintf@f,w
  5292  04C4  0084               	movwf	4
  5293  04C5  120A  158A  200A  120A  118A  	fcall	stringdir
  5294  04CA  00C3               	movwf	sprintf@c
  5295                           
  5296                           ; Switch size 1, requested type "space"
  5297                           ; Number of cases is 3, Range of values is 0 to 117
  5298                           ; switch strategies available:
  5299                           ; Name         Instructions Cycles
  5300                           ; simple_byte           10     6 (average)
  5301                           ; jumptable            260     6 (fixed)
  5302                           ;	Chosen strategy is simple_byte
  5303  04CB  3A00               	xorlw	0	; case 0
  5304  04CC  1903               	skipnz
  5305  04CD  2E21               	goto	i1l2399
  5306  04CE  3A6C               	xorlw	108	; case 108
  5307  04CF  1903               	skipnz
  5308  04D0  2CB7               	goto	i1l269
  5309  04D1  3A19               	xorlw	25	; case 117
  5310  04D2  1903               	skipnz
  5311  04D3  2CB9               	goto	i1l2335
  5312  04D4  2BF1               	goto	i1l2397
  5313  04D5                     i1l272:	
  5314                           
  5315                           ;doprnt.c: 1282: {
  5316                           ;doprnt.c: 1290: if(flag & 0x10)
  5317  04D5  1E38               	btfss	sprintf@flag,4
  5318  04D6  2CE7               	goto	i1l2345
  5319                           
  5320                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  5321  04D7  0839               	movf	sprintf@ap,w
  5322  04D8  0084               	movwf	4
  5323  04D9  1383               	bcf	3,7	;select IRP bank0
  5324  04DA  0800               	movf	0,w
  5325  04DB  00BA               	movwf	sprintf@_val
  5326  04DC  0A84               	incf	4,f
  5327  04DD  0800               	movf	0,w
  5328  04DE  00BB               	movwf	sprintf@_val+1
  5329  04DF  0A84               	incf	4,f
  5330  04E0  0800               	movf	0,w
  5331  04E1  00BC               	movwf	sprintf@_val+2
  5332  04E2  0A84               	incf	4,f
  5333  04E3  0800               	movf	0,w
  5334  04E4  00BD               	movwf	sprintf@_val+3
  5335  04E5  3004               	movlw	4
  5336  04E6  2CF6               	goto	L4
  5337  04E7                     i1l2345:	
  5338                           
  5339                           ;doprnt.c: 1292: else
  5340                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5341  04E7  0839               	movf	sprintf@ap,w
  5342  04E8  0084               	movwf	4
  5343  04E9  1383               	bcf	3,7	;select IRP bank0
  5344  04EA  0800               	movf	0,w
  5345  04EB  00B3               	movwf	??_sprintf
  5346  04EC  0A84               	incf	4,f
  5347  04ED  0800               	movf	0,w
  5348  04EE  00B4               	movwf	??_sprintf+1
  5349  04EF  0833               	movf	??_sprintf,w
  5350  04F0  00BA               	movwf	sprintf@_val
  5351  04F1  0834               	movf	??_sprintf+1,w
  5352  04F2  00BB               	movwf	sprintf@_val+1
  5353  04F3  01BC               	clrf	sprintf@_val+2
  5354  04F4  01BD               	clrf	sprintf@_val+3
  5355  04F5  3002               	movlw	2
  5356  04F6                     L4:	
  5357  04F6  00B3               	movwf	??_sprintf
  5358  04F7  0833               	movf	??_sprintf,w
  5359  04F8  07B9               	addwf	sprintf@ap,f
  5360                           
  5361                           ;doprnt.c: 1296: }
  5362                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  5363  04F9  0842               	movf	sprintf@prec+1,w
  5364  04FA  0441               	iorwf	sprintf@prec,w
  5365  04FB  1D03               	skipz
  5366  04FC  2D09               	goto	i1l2355
  5367  04FD  083D               	movf	sprintf@_val+3,w
  5368  04FE  043C               	iorwf	sprintf@_val+2,w
  5369  04FF  043B               	iorwf	sprintf@_val+1,w
  5370  0500  043A               	iorwf	sprintf@_val,w
  5371  0501  1D03               	skipz
  5372  0502  2D09               	goto	i1l2355
  5373                           
  5374                           ;doprnt.c: 1300: prec++;
  5375  0503  3001               	movlw	1
  5376  0504  07C1               	addwf	sprintf@prec,f
  5377  0505  1803               	skipnc
  5378  0506  0AC2               	incf	sprintf@prec+1,f
  5379  0507  3000               	movlw	0
  5380  0508  07C2               	addwf	sprintf@prec+1,f
  5381  0509                     i1l2355:	
  5382                           
  5383                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5384  0509  01C3               	clrf	sprintf@c
  5385  050A  0AC3               	incf	sprintf@c,f
  5386  050B  0843               	movf	sprintf@c,w
  5387  050C  3A0A               	xorlw	10
  5388  050D  1903               	btfsc	3,2
  5389  050E  2D4B               	goto	i1l2367
  5390  050F                     i1l2359:	
  5391                           
  5392                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5393  050F  0843               	movf	sprintf@c,w
  5394  0510  00B3               	movwf	??_sprintf
  5395  0511  3001               	movlw	1
  5396  0512                     u279_25:	
  5397  0512  1003               	clrc
  5398  0513  0DB3               	rlf	??_sprintf,f
  5399  0514  3EFF               	addlw	-1
  5400  0515  1D03               	skipz
  5401  0516  2D12               	goto	u279_25
  5402  0517  1003               	clrc
  5403  0518  0D33               	rlf	??_sprintf,w
  5404  0519  3E01               	addlw	low (_dpowers-__stringbase)
  5405  051A  0084               	movwf	4
  5406  051B  120A  158A  200A  120A  118A  	fcall	stringdir
  5407  0520  00B4               	movwf	??_sprintf+1
  5408  0521  120A  158A  200A  120A  118A  	fcall	stringdir
  5409  0526  00B5               	movwf	??_sprintf+2
  5410  0527  120A  158A  200A  120A  118A  	fcall	stringdir
  5411  052C  00B6               	movwf	??_sprintf+3
  5412  052D  120A  158A  200A  120A  118A  	fcall	stringdir
  5413  0532  00B7               	movwf	??_sprintf+4
  5414  0533  0837               	movf	??_sprintf+4,w
  5415  0534  023D               	subwf	sprintf@_val+3,w
  5416  0535  1D03               	skipz
  5417  0536  2D41               	goto	u280_25
  5418  0537  0836               	movf	??_sprintf+3,w
  5419  0538  023C               	subwf	sprintf@_val+2,w
  5420  0539  1D03               	skipz
  5421  053A  2D41               	goto	u280_25
  5422  053B  0835               	movf	??_sprintf+2,w
  5423  053C  023B               	subwf	sprintf@_val+1,w
  5424  053D  1D03               	skipz
  5425  053E  2D41               	goto	u280_25
  5426  053F  0834               	movf	??_sprintf+1,w
  5427  0540  023A               	subwf	sprintf@_val,w
  5428  0541                     u280_25:	
  5429  0541  1C03               	btfss	3,0
  5430  0542  2D4B               	goto	i1l2367
  5431                           
  5432                           ;doprnt.c: 1316: break;
  5433  0543  3001               	movlw	1
  5434  0544  00B3               	movwf	??_sprintf
  5435  0545  0833               	movf	??_sprintf,w
  5436  0546  07C3               	addwf	sprintf@c,f
  5437  0547  0843               	movf	sprintf@c,w
  5438  0548  3A0A               	xorlw	10
  5439  0549  1D03               	skipz
  5440  054A  2D0F               	goto	i1l2359
  5441  054B                     i1l2367:	
  5442                           
  5443                           ;doprnt.c: 1348: if(c < prec)
  5444  054B  0843               	movf	sprintf@c,w
  5445  054C  00B3               	movwf	??_sprintf
  5446  054D  01B4               	clrf	??_sprintf+1
  5447  054E  1BB3               	btfsc	??_sprintf,7
  5448  054F  03B4               	decf	??_sprintf+1,f
  5449  0550  0834               	movf	??_sprintf+1,w
  5450  0551  3A80               	xorlw	128
  5451  0552  00B5               	movwf	??_sprintf+2
  5452  0553  0842               	movf	sprintf@prec+1,w
  5453  0554  3A80               	xorlw	128
  5454  0555  0235               	subwf	??_sprintf+2,w
  5455  0556  1D03               	skipz
  5456  0557  2D5A               	goto	u282_25
  5457  0558  0841               	movf	sprintf@prec,w
  5458  0559  0233               	subwf	??_sprintf,w
  5459  055A                     u282_25:	
  5460  055A  1803               	skipnc
  5461  055B  2D63               	goto	i1l2371
  5462                           
  5463                           ;doprnt.c: 1349: c = prec;
  5464  055C  1283               	bcf	3,5	;RP0=0, select bank0
  5465  055D  1303               	bcf	3,6	;RP1=0, select bank0
  5466  055E  0841               	movf	sprintf@prec,w
  5467  055F  00B3               	movwf	??_sprintf
  5468  0560  0833               	movf	??_sprintf,w
  5469  0561  00C3               	movwf	sprintf@c
  5470  0562  2D7D               	goto	i1l2375
  5471  0563                     i1l2371:	
  5472                           
  5473                           ;doprnt.c: 1350: else if(prec < c)
  5474  0563  1283               	bcf	3,5	;RP0=0, select bank0
  5475  0564  1303               	bcf	3,6	;RP1=0, select bank0
  5476  0565  0843               	movf	sprintf@c,w
  5477  0566  00B3               	movwf	??_sprintf
  5478  0567  01B4               	clrf	??_sprintf+1
  5479  0568  1BB3               	btfsc	??_sprintf,7
  5480  0569  03B4               	decf	??_sprintf+1,f
  5481  056A  0842               	movf	sprintf@prec+1,w
  5482  056B  3A80               	xorlw	128
  5483  056C  00B5               	movwf	??_sprintf+2
  5484  056D  0834               	movf	??_sprintf+1,w
  5485  056E  3A80               	xorlw	128
  5486  056F  0235               	subwf	??_sprintf+2,w
  5487  0570  1D03               	skipz
  5488  0571  2D74               	goto	u283_25
  5489  0572  0833               	movf	??_sprintf,w
  5490  0573  0241               	subwf	sprintf@prec,w
  5491  0574                     u283_25:	
  5492  0574  1803               	skipnc
  5493  0575  2D7D               	goto	i1l2375
  5494                           
  5495                           ;doprnt.c: 1351: prec = c;
  5496  0576  1283               	bcf	3,5	;RP0=0, select bank0
  5497  0577  1303               	bcf	3,6	;RP1=0, select bank0
  5498  0578  0843               	movf	sprintf@c,w
  5499  0579  00C1               	movwf	sprintf@prec
  5500  057A  01C2               	clrf	sprintf@prec+1
  5501  057B  1BC1               	btfsc	sprintf@prec,7
  5502  057C  03C2               	decf	sprintf@prec+1,f
  5503  057D                     i1l2375:	
  5504                           
  5505                           ;doprnt.c: 1390: if(width > c)
  5506  057D  1283               	bcf	3,5	;RP0=0, select bank0
  5507  057E  1303               	bcf	3,6	;RP1=0, select bank0
  5508  057F  0843               	movf	sprintf@c,w
  5509  0580  00B3               	movwf	??_sprintf
  5510  0581  01B4               	clrf	??_sprintf+1
  5511  0582  1BB3               	btfsc	??_sprintf,7
  5512  0583  03B4               	decf	??_sprintf+1,f
  5513  0584  0834               	movf	??_sprintf+1,w
  5514  0585  3A80               	xorlw	128
  5515  0586  00B5               	movwf	??_sprintf+2
  5516  0587  0840               	movf	sprintf@width+1,w
  5517  0588  3A80               	xorlw	128
  5518  0589  0235               	subwf	??_sprintf+2,w
  5519  058A  1D03               	skipz
  5520  058B  2D8E               	goto	u284_25
  5521  058C  083F               	movf	sprintf@width,w
  5522  058D  0233               	subwf	??_sprintf,w
  5523  058E                     u284_25:	
  5524  058E  1803               	skipnc
  5525  058F  2D9E               	goto	i1l2379
  5526                           
  5527                           ;doprnt.c: 1391: width -= c;
  5528  0590  1283               	bcf	3,5	;RP0=0, select bank0
  5529  0591  1303               	bcf	3,6	;RP1=0, select bank0
  5530  0592  0843               	movf	sprintf@c,w
  5531  0593  00B3               	movwf	??_sprintf
  5532  0594  01B4               	clrf	??_sprintf+1
  5533  0595  1BB3               	btfsc	??_sprintf,7
  5534  0596  03B4               	decf	??_sprintf+1,f
  5535  0597  0833               	movf	??_sprintf,w
  5536  0598  02BF               	subwf	sprintf@width,f
  5537  0599  0834               	movf	??_sprintf+1,w
  5538  059A  1C03               	skipc
  5539  059B  03C0               	decf	sprintf@width+1,f
  5540  059C  02C0               	subwf	sprintf@width+1,f
  5541  059D  2DA2               	goto	i1l2381
  5542  059E                     i1l2379:	
  5543                           
  5544                           ;doprnt.c: 1392: else
  5545                           ;doprnt.c: 1393: width = 0;
  5546  059E  1283               	bcf	3,5	;RP0=0, select bank0
  5547  059F  1303               	bcf	3,6	;RP1=0, select bank0
  5548  05A0  01BF               	clrf	sprintf@width
  5549  05A1  01C0               	clrf	sprintf@width+1
  5550  05A2                     i1l2381:	
  5551                           
  5552                           ;doprnt.c: 1431: {
  5553                           ;doprnt.c: 1433: if(width
  5554                           ;doprnt.c: 1437: )
  5555  05A2  0840               	movf	sprintf@width+1,w
  5556  05A3  043F               	iorwf	sprintf@width,w
  5557  05A4  1903               	skipnz
  5558  05A5  2E12               	goto	i1l2395
  5559                           
  5560                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  5561                           
  5562                           ;doprnt.c: 1438: do
  5563  05A6  3020               	movlw	32
  5564  05A7  00B3               	movwf	??_sprintf
  5565  05A8  083E               	movf	sprintf@sp,w
  5566  05A9  0084               	movwf	4
  5567  05AA  0833               	movf	??_sprintf,w
  5568  05AB  1383               	bcf	3,7	;select IRP bank0
  5569  05AC  0080               	movwf	0
  5570  05AD  3001               	movlw	1
  5571  05AE  00B3               	movwf	??_sprintf
  5572  05AF  0833               	movf	??_sprintf,w
  5573  05B0  07BE               	addwf	sprintf@sp,f
  5574                           
  5575                           ;doprnt.c: 1440: while(--width);
  5576  05B1  30FF               	movlw	255
  5577  05B2  07BF               	addwf	sprintf@width,f
  5578  05B3  1803               	skipnc
  5579  05B4  0AC0               	incf	sprintf@width+1,f
  5580  05B5  30FF               	movlw	255
  5581  05B6  07C0               	addwf	sprintf@width+1,f
  5582  05B7  2DA2               	goto	i1l2381
  5583  05B8                     i1l2389:	
  5584                           ;doprnt.c: 1478: }
  5585                           ;doprnt.c: 1483: while(prec--) {
  5586                           
  5587                           
  5588                           ;doprnt.c: 1487: {
  5589                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5590  05B8  3000               	movlw	0
  5591  05B9  00A3               	movwf	___llmod@divisor+3
  5592  05BA  3000               	movlw	0
  5593  05BB  00A2               	movwf	___llmod@divisor+2
  5594  05BC  3000               	movlw	0
  5595  05BD  00A1               	movwf	___llmod@divisor+1
  5596  05BE  300A               	movlw	10
  5597  05BF  00A0               	movwf	___llmod@divisor
  5598  05C0  0841               	movf	sprintf@prec,w
  5599  05C1  00B3               	movwf	??_sprintf
  5600  05C2  3001               	movlw	1
  5601  05C3                     u287_25:	
  5602  05C3  1003               	clrc
  5603  05C4  0DB3               	rlf	??_sprintf,f
  5604  05C5  3EFF               	addlw	-1
  5605  05C6  1D03               	skipz
  5606  05C7  2DC3               	goto	u287_25
  5607  05C8  1003               	clrc
  5608  05C9  0D33               	rlf	??_sprintf,w
  5609  05CA  3E01               	addlw	low (_dpowers-__stringbase)
  5610  05CB  0084               	movwf	4
  5611  05CC  120A  158A  200A  120A  118A  	fcall	stringdir
  5612  05D1  00F0               	movwf	___lldiv@divisor
  5613  05D2  120A  158A  200A  120A  118A  	fcall	stringdir
  5614  05D7  00F1               	movwf	___lldiv@divisor+1
  5615  05D8  120A  158A  200A  120A  118A  	fcall	stringdir
  5616  05DD  00F2               	movwf	___lldiv@divisor+2
  5617  05DE  120A  158A  200A  120A  118A  	fcall	stringdir
  5618  05E3  00F3               	movwf	___lldiv@divisor+3
  5619  05E4  083D               	movf	sprintf@_val+3,w
  5620  05E5  00F7               	movwf	___lldiv@dividend+3
  5621  05E6  083C               	movf	sprintf@_val+2,w
  5622  05E7  00F6               	movwf	___lldiv@dividend+2
  5623  05E8  083B               	movf	sprintf@_val+1,w
  5624  05E9  00F5               	movwf	___lldiv@dividend+1
  5625  05EA  083A               	movf	sprintf@_val,w
  5626  05EB  00F4               	movwf	___lldiv@dividend
  5627  05EC  120A  158A  22E0  120A  118A  	fcall	___lldiv
  5628  05F1  0873               	movf	?___lldiv+3,w
  5629  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  5630  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  5631  05F4  00A7               	movwf	___llmod@dividend+3
  5632  05F5  0872               	movf	?___lldiv+2,w
  5633  05F6  00A6               	movwf	___llmod@dividend+2
  5634  05F7  0871               	movf	?___lldiv+1,w
  5635  05F8  00A5               	movwf	___llmod@dividend+1
  5636  05F9  0870               	movf	?___lldiv,w
  5637  05FA  00A4               	movwf	___llmod@dividend
  5638  05FB  120A  158A  21DC  120A  118A  	fcall	___llmod
  5639  0600  1283               	bcf	3,5	;RP0=0, select bank0
  5640  0601  1303               	bcf	3,6	;RP1=0, select bank0
  5641  0602  0820               	movf	?___llmod,w
  5642  0603  3E30               	addlw	48
  5643  0604  00B4               	movwf	??_sprintf+1
  5644  0605  0834               	movf	??_sprintf+1,w
  5645  0606  00C3               	movwf	sprintf@c
  5646                           
  5647                           ;doprnt.c: 1532: }
  5648                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5649  0607  0843               	movf	sprintf@c,w
  5650  0608  00B3               	movwf	??_sprintf
  5651  0609  083E               	movf	sprintf@sp,w
  5652  060A  0084               	movwf	4
  5653  060B  0833               	movf	??_sprintf,w
  5654  060C  1383               	bcf	3,7	;select IRP bank0
  5655  060D  0080               	movwf	0
  5656  060E  3001               	movlw	1
  5657  060F  00B3               	movwf	??_sprintf
  5658  0610  0833               	movf	??_sprintf,w
  5659  0611  07BE               	addwf	sprintf@sp,f
  5660  0612                     i1l2395:	
  5661  0612  30FF               	movlw	255
  5662  0613  07C1               	addwf	sprintf@prec,f
  5663  0614  1803               	skipnc
  5664  0615  0AC2               	incf	sprintf@prec+1,f
  5665  0616  30FF               	movlw	255
  5666  0617  07C2               	addwf	sprintf@prec+1,f
  5667  0618  30FF               	movlw	255
  5668  0619  0642               	xorwf	sprintf@prec+1,w
  5669  061A  1D03               	skipz
  5670  061B  2E1E               	goto	u288_25
  5671  061C  30FF               	movlw	255
  5672  061D  0641               	xorwf	sprintf@prec,w
  5673  061E                     u288_25:	
  5674  061E  1903               	btfsc	3,2
  5675  061F  2BF1               	goto	i1l2397
  5676  0620  2DB8               	goto	i1l2389
  5677  0621                     i1l2399:	
  5678                           ;doprnt.c: 1534: }
  5679                           ;doprnt.c: 1542: }
  5680                           ;doprnt.c: 1544: alldone:
  5681                           
  5682                           
  5683                           ;doprnt.c: 1547: *sp = 0;
  5684  0621  083E               	movf	sprintf@sp,w
  5685  0622  0084               	movwf	4
  5686  0623  1383               	bcf	3,7	;select IRP bank0
  5687  0624  0180               	clrf	0
  5688  0625  0008               	return
  5689  0626                     __end_of_sprintf:	
  5690                           ;doprnt.c: 1549: return 0;
  5691                           ;	Return value of _sprintf is never used
  5692                           
  5693                           
  5694                           	psect	text24
  5695  1597                     __ptext24:	
  5696 ;; *************** function _isdigit *****************
  5697 ;; Defined at:
  5698 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  c               1    wreg     unsigned char 
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;  c               1    1[COMMON] unsigned char 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;		None               void
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5712 ;;      Params:         0       0       0       0       0
  5713 ;;      Locals:         2       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0
  5715 ;;      Totals:         2       0       0       0       0
  5716 ;;Total ram usage:        2 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_sprintf
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           
  5726                           ;psect for function _isdigit
  5727  1597                     _isdigit:	
  5728                           
  5729                           ;incstack = 0
  5730 ;; hardware stack exceeded
  5731                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5732                           ;isdigit@c stored from wreg
  5733  1597  00F1               	movwf	isdigit@c
  5734  1598  01F0               	clrf	_isdigit$900
  5735  1599  303A               	movlw	58
  5736  159A  0271               	subwf	isdigit@c,w
  5737  159B  1803               	skipnc
  5738  159C  2DA3               	goto	i1l2001
  5739  159D  3030               	movlw	48
  5740  159E  0271               	subwf	isdigit@c,w
  5741  159F  1C03               	skipc
  5742  15A0  2DA3               	goto	i1l2001
  5743  15A1  01F0               	clrf	_isdigit$900
  5744  15A2  0AF0               	incf	_isdigit$900,f
  5745  15A3                     i1l2001:	
  5746  15A3  0C70               	rrf	_isdigit$900,w
  5747  15A4  0008               	return
  5748  15A5                     __end_of_isdigit:	
  5749                           
  5750                           	psect	text25
  5751  1698                     __ptext25:	
  5752 ;; *************** function ___wmul *****************
  5753 ;; Defined at:
  5754 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  multiplier      2    0[COMMON] unsigned int 
  5757 ;;  multiplicand    2    2[COMMON] unsigned int 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  product         2    4[COMMON] unsigned int 
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  2    0[COMMON] unsigned int 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2, status,0
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5769 ;;      Params:         4       0       0       0       0
  5770 ;;      Locals:         2       0       0       0       0
  5771 ;;      Temps:          0       0       0       0       0
  5772 ;;      Totals:         6       0       0       0       0
  5773 ;;Total ram usage:        6 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_sprintf
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function ___wmul
  5784  1698                     ___wmul:	
  5785                           
  5786                           ;incstack = 0
  5787 ;; hardware stack exceeded
  5788                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5789  1698  01F4               	clrf	___wmul@product
  5790  1699  01F5               	clrf	___wmul@product+1
  5791  169A                     i1l2007:	
  5792  169A  1C70               	btfss	___wmul@multiplier,0
  5793  169B  2EA2               	goto	i1l375
  5794  169C  0872               	movf	___wmul@multiplicand,w
  5795  169D  07F4               	addwf	___wmul@product,f
  5796  169E  1803               	skipnc
  5797  169F  0AF5               	incf	___wmul@product+1,f
  5798  16A0  0873               	movf	___wmul@multiplicand+1,w
  5799  16A1  07F5               	addwf	___wmul@product+1,f
  5800  16A2                     i1l375:	
  5801  16A2  3001               	movlw	1
  5802  16A3                     u208_25:	
  5803  16A3  1003               	clrc
  5804  16A4  0DF2               	rlf	___wmul@multiplicand,f
  5805  16A5  0DF3               	rlf	___wmul@multiplicand+1,f
  5806  16A6  3EFF               	addlw	-1
  5807  16A7  1D03               	skipz
  5808  16A8  2EA3               	goto	u208_25
  5809  16A9  3001               	movlw	1
  5810  16AA                     u209_25:	
  5811  16AA  1003               	clrc
  5812  16AB  0CF1               	rrf	___wmul@multiplier+1,f
  5813  16AC  0CF0               	rrf	___wmul@multiplier,f
  5814  16AD  3EFF               	addlw	-1
  5815  16AE  1D03               	skipz
  5816  16AF  2EAA               	goto	u209_25
  5817  16B0  0871               	movf	___wmul@multiplier+1,w
  5818  16B1  0470               	iorwf	___wmul@multiplier,w
  5819  16B2  1D03               	skipz
  5820  16B3  2E9A               	goto	i1l2007
  5821  16B4  0875               	movf	___wmul@product+1,w
  5822  16B5  01F1               	clrf	?___wmul+1
  5823  16B6  07F1               	addwf	?___wmul+1,f
  5824  16B7  0874               	movf	___wmul@product,w
  5825  16B8  01F0               	clrf	?___wmul
  5826  16B9  07F0               	addwf	?___wmul,f
  5827  16BA  0008               	return
  5828  16BB                     __end_of___wmul:	
  5829                           
  5830                           	psect	text26
  5831  09DC                     __ptext26:	
  5832 ;; *************** function ___llmod *****************
  5833 ;; Defined at:
  5834 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\llmod.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  divisor         4    0[BANK0 ] unsigned long 
  5837 ;;  dividend        4    4[BANK0 ] unsigned long 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  counter         1    9[BANK0 ] unsigned char 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  4    0[BANK0 ] unsigned long 
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5849 ;;      Params:         0       8       0       0       0
  5850 ;;      Locals:         0       1       0       0       0
  5851 ;;      Temps:          0       1       0       0       0
  5852 ;;      Totals:         0      10       0       0       0
  5853 ;;Total ram usage:       10 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_sprintf
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function ___llmod
  5864  09DC                     ___llmod:	
  5865                           
  5866                           ;incstack = 0
  5867 ;; hardware stack exceeded
  5868                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5869  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  5870  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  5871  09DE  0823               	movf	___llmod@divisor+3,w
  5872  09DF  0422               	iorwf	___llmod@divisor+2,w
  5873  09E0  0421               	iorwf	___llmod@divisor+1,w
  5874  09E1  0420               	iorwf	___llmod@divisor,w
  5875  09E2  1903               	skipnz
  5876  09E3  2A21               	goto	i1l2169
  5877  09E4  01A9               	clrf	___llmod@counter
  5878  09E5  0AA9               	incf	___llmod@counter,f
  5879  09E6                     i1l2159:	
  5880  09E6  1BA3               	btfsc	___llmod@divisor+3,7
  5881  09E7  29F6               	goto	i1l2161
  5882  09E8  3001               	movlw	1
  5883  09E9  00A8               	movwf	??___llmod
  5884  09EA                     u253_25:	
  5885  09EA  1003               	clrc
  5886  09EB  0DA0               	rlf	___llmod@divisor,f
  5887  09EC  0DA1               	rlf	___llmod@divisor+1,f
  5888  09ED  0DA2               	rlf	___llmod@divisor+2,f
  5889  09EE  0DA3               	rlf	___llmod@divisor+3,f
  5890  09EF  0BA8               	decfsz	??___llmod,f
  5891  09F0  29EA               	goto	u253_25
  5892  09F1  3001               	movlw	1
  5893  09F2  00A8               	movwf	??___llmod
  5894  09F3  0828               	movf	??___llmod,w
  5895  09F4  07A9               	addwf	___llmod@counter,f
  5896  09F5  29E6               	goto	i1l2159
  5897  09F6                     i1l2161:	
  5898  09F6  0823               	movf	___llmod@divisor+3,w
  5899  09F7  0227               	subwf	___llmod@dividend+3,w
  5900  09F8  1D03               	skipz
  5901  09F9  2A04               	goto	u255_25
  5902  09FA  0822               	movf	___llmod@divisor+2,w
  5903  09FB  0226               	subwf	___llmod@dividend+2,w
  5904  09FC  1D03               	skipz
  5905  09FD  2A04               	goto	u255_25
  5906  09FE  0821               	movf	___llmod@divisor+1,w
  5907  09FF  0225               	subwf	___llmod@dividend+1,w
  5908  0A00  1D03               	skipz
  5909  0A01  2A04               	goto	u255_25
  5910  0A02  0820               	movf	___llmod@divisor,w
  5911  0A03  0224               	subwf	___llmod@dividend,w
  5912  0A04                     u255_25:	
  5913  0A04  1C03               	skipc
  5914  0A05  2A14               	goto	i1l2165
  5915  0A06  0820               	movf	___llmod@divisor,w
  5916  0A07  02A4               	subwf	___llmod@dividend,f
  5917  0A08  0821               	movf	___llmod@divisor+1,w
  5918  0A09  1C03               	skipc
  5919  0A0A  0F21               	incfsz	___llmod@divisor+1,w
  5920  0A0B  02A5               	subwf	___llmod@dividend+1,f
  5921  0A0C  0822               	movf	___llmod@divisor+2,w
  5922  0A0D  1C03               	skipc
  5923  0A0E  0F22               	incfsz	___llmod@divisor+2,w
  5924  0A0F  02A6               	subwf	___llmod@dividend+2,f
  5925  0A10  0823               	movf	___llmod@divisor+3,w
  5926  0A11  1C03               	skipc
  5927  0A12  0F23               	incfsz	___llmod@divisor+3,w
  5928  0A13  02A7               	subwf	___llmod@dividend+3,f
  5929  0A14                     i1l2165:	
  5930  0A14  3001               	movlw	1
  5931  0A15                     u256_25:	
  5932  0A15  1003               	clrc
  5933  0A16  0CA3               	rrf	___llmod@divisor+3,f
  5934  0A17  0CA2               	rrf	___llmod@divisor+2,f
  5935  0A18  0CA1               	rrf	___llmod@divisor+1,f
  5936  0A19  0CA0               	rrf	___llmod@divisor,f
  5937  0A1A  3EFF               	addlw	-1
  5938  0A1B  1D03               	skipz
  5939  0A1C  2A15               	goto	u256_25
  5940  0A1D  3001               	movlw	1
  5941  0A1E  02A9               	subwf	___llmod@counter,f
  5942  0A1F  1D03               	btfss	3,2
  5943  0A20  29F6               	goto	i1l2161
  5944  0A21                     i1l2169:	
  5945  0A21  0827               	movf	___llmod@dividend+3,w
  5946  0A22  00A3               	movwf	?___llmod+3
  5947  0A23  0826               	movf	___llmod@dividend+2,w
  5948  0A24  00A2               	movwf	?___llmod+2
  5949  0A25  0825               	movf	___llmod@dividend+1,w
  5950  0A26  00A1               	movwf	?___llmod+1
  5951  0A27  0824               	movf	___llmod@dividend,w
  5952  0A28  00A0               	movwf	?___llmod
  5953  0A29  0008               	return
  5954  0A2A                     __end_of___llmod:	
  5955                           
  5956                           	psect	text27
  5957  0AE0                     __ptext27:	
  5958 ;; *************** function ___lldiv *****************
  5959 ;; Defined at:
  5960 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  divisor         4    0[COMMON] unsigned long 
  5963 ;;  dividend        4    4[COMMON] unsigned long 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  quotient        4    9[COMMON] unsigned long 
  5966 ;;  counter         1   13[COMMON] unsigned char 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  4    0[COMMON] unsigned long 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5976 ;;      Params:         8       0       0       0       0
  5977 ;;      Locals:         5       0       0       0       0
  5978 ;;      Temps:          1       0       0       0       0
  5979 ;;      Totals:        14       0       0       0       0
  5980 ;;Total ram usage:       14 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_sprintf
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function ___lldiv
  5991  0AE0                     ___lldiv:	
  5992                           
  5993                           ;incstack = 0
  5994 ;; hardware stack exceeded
  5995                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5996  0AE0  3000               	movlw	0
  5997  0AE1  00FC               	movwf	___lldiv@quotient+3
  5998  0AE2  3000               	movlw	0
  5999  0AE3  00FB               	movwf	___lldiv@quotient+2
  6000  0AE4  3000               	movlw	0
  6001  0AE5  00FA               	movwf	___lldiv@quotient+1
  6002  0AE6  3000               	movlw	0
  6003  0AE7  00F9               	movwf	___lldiv@quotient
  6004  0AE8  0873               	movf	___lldiv@divisor+3,w
  6005  0AE9  0472               	iorwf	___lldiv@divisor+2,w
  6006  0AEA  0471               	iorwf	___lldiv@divisor+1,w
  6007  0AEB  0470               	iorwf	___lldiv@divisor,w
  6008  0AEC  1903               	skipnz
  6009  0AED  2B35               	goto	i1l2149
  6010  0AEE  01FD               	clrf	___lldiv@counter
  6011  0AEF  0AFD               	incf	___lldiv@counter,f
  6012  0AF0                     i1l2135:	
  6013  0AF0  1BF3               	btfsc	___lldiv@divisor+3,7
  6014  0AF1  2B00               	goto	i1l2137
  6015  0AF2  3001               	movlw	1
  6016  0AF3  00F8               	movwf	??___lldiv
  6017  0AF4                     u246_25:	
  6018  0AF4  1003               	clrc
  6019  0AF5  0DF0               	rlf	___lldiv@divisor,f
  6020  0AF6  0DF1               	rlf	___lldiv@divisor+1,f
  6021  0AF7  0DF2               	rlf	___lldiv@divisor+2,f
  6022  0AF8  0DF3               	rlf	___lldiv@divisor+3,f
  6023  0AF9  0BF8               	decfsz	??___lldiv,f
  6024  0AFA  2AF4               	goto	u246_25
  6025  0AFB  3001               	movlw	1
  6026  0AFC  00F8               	movwf	??___lldiv
  6027  0AFD  0878               	movf	??___lldiv,w
  6028  0AFE  07FD               	addwf	___lldiv@counter,f
  6029  0AFF  2AF0               	goto	i1l2135
  6030  0B00                     i1l2137:	
  6031  0B00  3001               	movlw	1
  6032  0B01  00F8               	movwf	??___lldiv
  6033  0B02                     u248_25:	
  6034  0B02  1003               	clrc
  6035  0B03  0DF9               	rlf	___lldiv@quotient,f
  6036  0B04  0DFA               	rlf	___lldiv@quotient+1,f
  6037  0B05  0DFB               	rlf	___lldiv@quotient+2,f
  6038  0B06  0DFC               	rlf	___lldiv@quotient+3,f
  6039  0B07  0BF8               	decfsz	??___lldiv,f
  6040  0B08  2B02               	goto	u248_25
  6041  0B09  0873               	movf	___lldiv@divisor+3,w
  6042  0B0A  0277               	subwf	___lldiv@dividend+3,w
  6043  0B0B  1D03               	skipz
  6044  0B0C  2B17               	goto	u249_25
  6045  0B0D  0872               	movf	___lldiv@divisor+2,w
  6046  0B0E  0276               	subwf	___lldiv@dividend+2,w
  6047  0B0F  1D03               	skipz
  6048  0B10  2B17               	goto	u249_25
  6049  0B11  0871               	movf	___lldiv@divisor+1,w
  6050  0B12  0275               	subwf	___lldiv@dividend+1,w
  6051  0B13  1D03               	skipz
  6052  0B14  2B17               	goto	u249_25
  6053  0B15  0870               	movf	___lldiv@divisor,w
  6054  0B16  0274               	subwf	___lldiv@dividend,w
  6055  0B17                     u249_25:	
  6056  0B17  1C03               	skipc
  6057  0B18  2B28               	goto	i1l2145
  6058  0B19  0870               	movf	___lldiv@divisor,w
  6059  0B1A  02F4               	subwf	___lldiv@dividend,f
  6060  0B1B  0871               	movf	___lldiv@divisor+1,w
  6061  0B1C  1C03               	skipc
  6062  0B1D  0F71               	incfsz	___lldiv@divisor+1,w
  6063  0B1E  02F5               	subwf	___lldiv@dividend+1,f
  6064  0B1F  0872               	movf	___lldiv@divisor+2,w
  6065  0B20  1C03               	skipc
  6066  0B21  0F72               	incfsz	___lldiv@divisor+2,w
  6067  0B22  02F6               	subwf	___lldiv@dividend+2,f
  6068  0B23  0873               	movf	___lldiv@divisor+3,w
  6069  0B24  1C03               	skipc
  6070  0B25  0F73               	incfsz	___lldiv@divisor+3,w
  6071  0B26  02F7               	subwf	___lldiv@dividend+3,f
  6072  0B27  1479               	bsf	___lldiv@quotient,0
  6073  0B28                     i1l2145:	
  6074  0B28  3001               	movlw	1
  6075  0B29                     u250_25:	
  6076  0B29  1003               	clrc
  6077  0B2A  0CF3               	rrf	___lldiv@divisor+3,f
  6078  0B2B  0CF2               	rrf	___lldiv@divisor+2,f
  6079  0B2C  0CF1               	rrf	___lldiv@divisor+1,f
  6080  0B2D  0CF0               	rrf	___lldiv@divisor,f
  6081  0B2E  3EFF               	addlw	-1
  6082  0B2F  1D03               	skipz
  6083  0B30  2B29               	goto	u250_25
  6084  0B31  3001               	movlw	1
  6085  0B32  02FD               	subwf	___lldiv@counter,f
  6086  0B33  1D03               	btfss	3,2
  6087  0B34  2B00               	goto	i1l2137
  6088  0B35                     i1l2149:	
  6089  0B35  087C               	movf	___lldiv@quotient+3,w
  6090  0B36  00F3               	movwf	?___lldiv+3
  6091  0B37  087B               	movf	___lldiv@quotient+2,w
  6092  0B38  00F2               	movwf	?___lldiv+2
  6093  0B39  087A               	movf	___lldiv@quotient+1,w
  6094  0B3A  00F1               	movwf	?___lldiv+1
  6095  0B3B  0879               	movf	___lldiv@quotient,w
  6096  0B3C  00F0               	movwf	?___lldiv
  6097  0B3D  0008               	return
  6098  0B3E                     __end_of___lldiv:	
  6099                           
  6100                           	psect	text28
  6101  16DE                     __ptext28:	
  6102 ;; *************** function ___lltoft *****************
  6103 ;; Defined at:
  6104 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lltoft.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  c               4    8[COMMON] unsigned long 
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;  exp             1   13[COMMON] unsigned char 
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  3    8[COMMON] float 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2, status,0, pclath, cstack
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6118 ;;      Params:         4       0       0       0       0
  6119 ;;      Locals:         1       0       0       0       0
  6120 ;;      Temps:          1       0       0       0       0
  6121 ;;      Totals:         6       0       0       0       0
  6122 ;;Total ram usage:        6 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    1
  6125 ;; This function calls:
  6126 ;;		___ftpack
  6127 ;; This function is called by:
  6128 ;;		_ftoa
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           
  6133                           ;psect for function ___lltoft
  6134  16DE                     ___lltoft:	
  6135                           
  6136                           ;incstack = 0
  6137 ;; hardware stack exceeded
  6138                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6139  16DE  308E               	movlw	142
  6140  16DF  00FC               	movwf	??___lltoft
  6141  16E0  087C               	movf	??___lltoft,w
  6142  16E1  00FD               	movwf	___lltoft@exp
  6143  16E2                     i1l2535:	
  6144  16E2  30FF               	movlw	255
  6145  16E3  057B               	andwf	___lltoft@c+3,w
  6146  16E4  1903               	btfsc	3,2
  6147  16E5  2EF4               	goto	i1l2537
  6148  16E6  3001               	movlw	1
  6149  16E7                     u320_25:	
  6150  16E7  1003               	clrc
  6151  16E8  0CFB               	rrf	___lltoft@c+3,f
  6152  16E9  0CFA               	rrf	___lltoft@c+2,f
  6153  16EA  0CF9               	rrf	___lltoft@c+1,f
  6154  16EB  0CF8               	rrf	___lltoft@c,f
  6155  16EC  3EFF               	addlw	-1
  6156  16ED  1D03               	skipz
  6157  16EE  2EE7               	goto	u320_25
  6158  16EF  3001               	movlw	1
  6159  16F0  00FC               	movwf	??___lltoft
  6160  16F1  087C               	movf	??___lltoft,w
  6161  16F2  07FD               	addwf	___lltoft@exp,f
  6162  16F3  2EE2               	goto	i1l2535
  6163  16F4                     i1l2537:	
  6164  16F4  0878               	movf	___lltoft@c,w
  6165  16F5  00F0               	movwf	___ftpack@arg
  6166  16F6  0879               	movf	___lltoft@c+1,w
  6167  16F7  00F1               	movwf	___ftpack@arg+1
  6168  16F8  087A               	movf	___lltoft@c+2,w
  6169  16F9  00F2               	movwf	___ftpack@arg+2
  6170  16FA  087D               	movf	___lltoft@exp,w
  6171  16FB  00FC               	movwf	??___lltoft
  6172  16FC  087C               	movf	??___lltoft,w
  6173  16FD  00F3               	movwf	___ftpack@exp
  6174  16FE  01F4               	clrf	___ftpack@sign
  6175  16FF  120A  158A  23A4   	fcall	___ftpack
  6176  1702  0870               	movf	?___ftpack,w
  6177  1703  00F8               	movwf	?___lltoft
  6178  1704  0871               	movf	?___ftpack+1,w
  6179  1705  00F9               	movwf	?___lltoft+1
  6180  1706  0872               	movf	?___ftpack+2,w
  6181  1707  00FA               	movwf	?___lltoft+2
  6182  1708  0008               	return
  6183  1709                     __end_of___lltoft:	
  6184                           
  6185                           	psect	text29
  6186  0D71                     __ptext29:	
  6187 ;; *************** function ___fttol *****************
  6188 ;; Defined at:
  6189 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  f1              3   16[BANK0 ] float 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  lval            4   25[BANK0 ] unsigned long 
  6194 ;;  exp1            1   29[BANK0 ] unsigned char 
  6195 ;;  sign1           1   24[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  4   16[BANK0 ] long 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6205 ;;      Params:         0       4       0       0       0
  6206 ;;      Locals:         0       6       0       0       0
  6207 ;;      Temps:          0       4       0       0       0
  6208 ;;      Totals:         0      14       0       0       0
  6209 ;;Total ram usage:       14 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_ISR
  6215 ;;		_ftoa
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function ___fttol
  6221  0D71                     ___fttol:	
  6222                           
  6223                           ;incstack = 0
  6224 ;; hardware stack exceeded
  6225                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6226  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  6227  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  6228  0D73  0830               	movf	___fttol@f1,w
  6229  0D74  00B4               	movwf	??___fttol
  6230  0D75  0831               	movf	___fttol@f1+1,w
  6231  0D76  00B5               	movwf	??___fttol+1
  6232  0D77  0832               	movf	___fttol@f1+2,w
  6233  0D78  00B6               	movwf	??___fttol+2
  6234  0D79  1003               	clrc
  6235  0D7A  0D35               	rlf	??___fttol+1,w
  6236  0D7B  0D36               	rlf	??___fttol+2,w
  6237  0D7C  00B7               	movwf	??___fttol+3
  6238  0D7D  0837               	movf	??___fttol+3,w
  6239  0D7E  00BD               	movwf	___fttol@exp1
  6240  0D7F  08BD               	movf	___fttol@exp1,f
  6241  0D80  1D03               	skipz
  6242  0D81  2D8B               	goto	i1l2493
  6243  0D82  3000               	movlw	0
  6244  0D83  00B3               	movwf	?___fttol+3
  6245  0D84  3000               	movlw	0
  6246  0D85  00B2               	movwf	?___fttol+2
  6247  0D86  3000               	movlw	0
  6248  0D87  00B1               	movwf	?___fttol+1
  6249  0D88  3000               	movlw	0
  6250  0D89  00B0               	movwf	?___fttol
  6251  0D8A  0008               	return
  6252  0D8B                     i1l2493:	
  6253  0D8B  0830               	movf	___fttol@f1,w
  6254  0D8C  00B4               	movwf	??___fttol
  6255  0D8D  0831               	movf	___fttol@f1+1,w
  6256  0D8E  00B5               	movwf	??___fttol+1
  6257  0D8F  0832               	movf	___fttol@f1+2,w
  6258  0D90  00B6               	movwf	??___fttol+2
  6259  0D91  3017               	movlw	23
  6260  0D92                     u311_25:	
  6261  0D92  1003               	clrc
  6262  0D93  0CB6               	rrf	??___fttol+2,f
  6263  0D94  0CB5               	rrf	??___fttol+1,f
  6264  0D95  0CB4               	rrf	??___fttol,f
  6265  0D96  3EFF               	addlw	-1
  6266  0D97  1D03               	skipz
  6267  0D98  2D92               	goto	u311_25
  6268  0D99  0834               	movf	??___fttol,w
  6269  0D9A  00B7               	movwf	??___fttol+3
  6270  0D9B  0837               	movf	??___fttol+3,w
  6271  0D9C  00B8               	movwf	___fttol@sign1
  6272  0D9D  17B1               	bsf	___fttol@f1+1,7
  6273  0D9E  30FF               	movlw	255
  6274  0D9F  05B0               	andwf	___fttol@f1,f
  6275  0DA0  30FF               	movlw	255
  6276  0DA1  05B1               	andwf	___fttol@f1+1,f
  6277  0DA2  3000               	movlw	0
  6278  0DA3  05B2               	andwf	___fttol@f1+2,f
  6279  0DA4  0830               	movf	___fttol@f1,w
  6280  0DA5  00B9               	movwf	___fttol@lval
  6281  0DA6  0831               	movf	___fttol@f1+1,w
  6282  0DA7  00BA               	movwf	___fttol@lval+1
  6283  0DA8  0832               	movf	___fttol@f1+2,w
  6284  0DA9  00BB               	movwf	___fttol@lval+2
  6285  0DAA  01BC               	clrf	___fttol@lval+3
  6286  0DAB  308E               	movlw	142
  6287  0DAC  02BD               	subwf	___fttol@exp1,f
  6288  0DAD  1FBD               	btfss	___fttol@exp1,7
  6289  0DAE  2DCD               	goto	i1l2513
  6290  0DAF  083D               	movf	___fttol@exp1,w
  6291  0DB0  3A80               	xorlw	128
  6292  0DB1  3E8F               	addlw	143
  6293  0DB2  1803               	skipnc
  6294  0DB3  2DBD               	goto	i1l2511
  6295  0DB4  3000               	movlw	0
  6296  0DB5  00B3               	movwf	?___fttol+3
  6297  0DB6  3000               	movlw	0
  6298  0DB7  00B2               	movwf	?___fttol+2
  6299  0DB8  3000               	movlw	0
  6300  0DB9  00B1               	movwf	?___fttol+1
  6301  0DBA  3000               	movlw	0
  6302  0DBB  00B0               	movwf	?___fttol
  6303  0DBC  0008               	return
  6304  0DBD                     i1l2511:	
  6305  0DBD  3001               	movlw	1
  6306  0DBE                     u314_25:	
  6307  0DBE  1003               	clrc
  6308  0DBF  0CBC               	rrf	___fttol@lval+3,f
  6309  0DC0  0CBB               	rrf	___fttol@lval+2,f
  6310  0DC1  0CBA               	rrf	___fttol@lval+1,f
  6311  0DC2  0CB9               	rrf	___fttol@lval,f
  6312  0DC3  3EFF               	addlw	-1
  6313  0DC4  1D03               	skipz
  6314  0DC5  2DBE               	goto	u314_25
  6315  0DC6  3001               	movlw	1
  6316  0DC7  00B4               	movwf	??___fttol
  6317  0DC8  0834               	movf	??___fttol,w
  6318  0DC9  07BD               	addwf	___fttol@exp1,f
  6319  0DCA  1903               	btfsc	3,2
  6320  0DCB  2DE8               	goto	i1l2523
  6321  0DCC  2DBD               	goto	i1l2511
  6322  0DCD                     i1l2513:	
  6323  0DCD  3018               	movlw	24
  6324  0DCE  023D               	subwf	___fttol@exp1,w
  6325  0DCF  1C03               	skipc
  6326  0DD0  2DE5               	goto	i1l2521
  6327  0DD1  3000               	movlw	0
  6328  0DD2  00B3               	movwf	?___fttol+3
  6329  0DD3  3000               	movlw	0
  6330  0DD4  00B2               	movwf	?___fttol+2
  6331  0DD5  3000               	movlw	0
  6332  0DD6  00B1               	movwf	?___fttol+1
  6333  0DD7  3000               	movlw	0
  6334  0DD8  00B0               	movwf	?___fttol
  6335  0DD9  0008               	return
  6336  0DDA                     i1l2519:	
  6337  0DDA  3001               	movlw	1
  6338  0DDB  00B4               	movwf	??___fttol
  6339  0DDC                     u317_25:	
  6340  0DDC  1003               	clrc
  6341  0DDD  0DB9               	rlf	___fttol@lval,f
  6342  0DDE  0DBA               	rlf	___fttol@lval+1,f
  6343  0DDF  0DBB               	rlf	___fttol@lval+2,f
  6344  0DE0  0DBC               	rlf	___fttol@lval+3,f
  6345  0DE1  0BB4               	decfsz	??___fttol,f
  6346  0DE2  2DDC               	goto	u317_25
  6347  0DE3  3001               	movlw	1
  6348  0DE4  02BD               	subwf	___fttol@exp1,f
  6349  0DE5                     i1l2521:	
  6350  0DE5  08BD               	movf	___fttol@exp1,f
  6351  0DE6  1D03               	skipz
  6352  0DE7  2DDA               	goto	i1l2519
  6353  0DE8                     i1l2523:	
  6354  0DE8  0838               	movf	___fttol@sign1,w
  6355  0DE9  1903               	btfsc	3,2
  6356  0DEA  2DF6               	goto	i1l2527
  6357  0DEB  09B9               	comf	___fttol@lval,f
  6358  0DEC  09BA               	comf	___fttol@lval+1,f
  6359  0DED  09BB               	comf	___fttol@lval+2,f
  6360  0DEE  09BC               	comf	___fttol@lval+3,f
  6361  0DEF  0AB9               	incf	___fttol@lval,f
  6362  0DF0  1903               	skipnz
  6363  0DF1  0ABA               	incf	___fttol@lval+1,f
  6364  0DF2  1903               	skipnz
  6365  0DF3  0ABB               	incf	___fttol@lval+2,f
  6366  0DF4  1903               	skipnz
  6367  0DF5  0ABC               	incf	___fttol@lval+3,f
  6368  0DF6                     i1l2527:	
  6369  0DF6  083C               	movf	___fttol@lval+3,w
  6370  0DF7  00B3               	movwf	?___fttol+3
  6371  0DF8  083B               	movf	___fttol@lval+2,w
  6372  0DF9  00B2               	movwf	?___fttol+2
  6373  0DFA  083A               	movf	___fttol@lval+1,w
  6374  0DFB  00B1               	movwf	?___fttol+1
  6375  0DFC  0839               	movf	___fttol@lval,w
  6376  0DFD  00B0               	movwf	?___fttol
  6377  0DFE  0008               	return
  6378  0DFF                     __end_of___fttol:	
  6379                           
  6380                           	psect	text30
  6381  161C                     __ptext30:	
  6382 ;; *************** function ___ftsub *****************
  6383 ;; Defined at:
  6384 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftsub.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  f2              3    7[BANK0 ] float 
  6387 ;;  f1              3   10[BANK0 ] float 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  3    7[BANK0 ] float 
  6392 ;; Registers used:
  6393 ;;		wreg, status,2, status,0, pclath, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6399 ;;      Params:         0       6       0       0       0
  6400 ;;      Locals:         0       0       0       0       0
  6401 ;;      Temps:          0       0       0       0       0
  6402 ;;      Totals:         0       6       0       0       0
  6403 ;;Total ram usage:        6 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    2
  6406 ;; This function calls:
  6407 ;;		___ftadd
  6408 ;; This function is called by:
  6409 ;;		_ftoa
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function ___ftsub
  6415  161C                     ___ftsub:	
  6416                           
  6417                           ;incstack = 0
  6418 ;; hardware stack exceeded
  6419                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6420  161C  3080               	movlw	128
  6421  161D  1283               	bcf	3,5	;RP0=0, select bank0
  6422  161E  1303               	bcf	3,6	;RP1=0, select bank0
  6423  161F  06A9               	xorwf	___ftsub@f2+2,f
  6424  1620  082A               	movf	___ftsub@f1,w
  6425  1621  00F8               	movwf	___ftadd@f1
  6426  1622  082B               	movf	___ftsub@f1+1,w
  6427  1623  00F9               	movwf	___ftadd@f1+1
  6428  1624  082C               	movf	___ftsub@f1+2,w
  6429  1625  00FA               	movwf	___ftadd@f1+2
  6430  1626  0827               	movf	___ftsub@f2,w
  6431  1627  00FB               	movwf	___ftadd@f2
  6432  1628  0828               	movf	___ftsub@f2+1,w
  6433  1629  00FC               	movwf	___ftadd@f2+1
  6434  162A  0829               	movf	___ftsub@f2+2,w
  6435  162B  00FD               	movwf	___ftadd@f2+2
  6436  162C  120A  118A  2626   	fcall	___ftadd
  6437  162F  0878               	movf	?___ftadd,w
  6438  1630  1283               	bcf	3,5	;RP0=0, select bank0
  6439  1631  1303               	bcf	3,6	;RP1=0, select bank0
  6440  1632  00A7               	movwf	?___ftsub
  6441  1633  0879               	movf	?___ftadd+1,w
  6442  1634  00A8               	movwf	?___ftsub+1
  6443  1635  087A               	movf	?___ftadd+2,w
  6444  1636  00A9               	movwf	?___ftsub+2
  6445  1637  0008               	return
  6446  1638                     __end_of___ftsub:	
  6447                           
  6448                           	psect	text31
  6449  0626                     __ptext31:	
  6450 ;; *************** function ___ftadd *****************
  6451 ;; Defined at:
  6452 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  f1              3    8[COMMON] float 
  6455 ;;  f2              3   11[COMMON] float 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  exp1            1    6[BANK0 ] unsigned char 
  6458 ;;  exp2            1    5[BANK0 ] unsigned char 
  6459 ;;  sign            1    4[BANK0 ] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  3    8[COMMON] float 
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0, pclath, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6469 ;;      Params:         6       0       0       0       0
  6470 ;;      Locals:         0       3       0       0       0
  6471 ;;      Temps:          0       4       0       0       0
  6472 ;;      Totals:         6       7       0       0       0
  6473 ;;Total ram usage:       13 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    1
  6476 ;; This function calls:
  6477 ;;		___ftpack
  6478 ;; This function is called by:
  6479 ;;		___ftsub
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           
  6484                           ;psect for function ___ftadd
  6485  0626                     ___ftadd:	
  6486                           
  6487                           ;incstack = 0
  6488 ;; hardware stack exceeded
  6489                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6490  0626  0878               	movf	___ftadd@f1,w
  6491  0627  1283               	bcf	3,5	;RP0=0, select bank0
  6492  0628  1303               	bcf	3,6	;RP1=0, select bank0
  6493  0629  00A0               	movwf	??___ftadd
  6494  062A  0879               	movf	___ftadd@f1+1,w
  6495  062B  00A1               	movwf	??___ftadd+1
  6496  062C  087A               	movf	___ftadd@f1+2,w
  6497  062D  00A2               	movwf	??___ftadd+2
  6498  062E  1003               	clrc
  6499  062F  0D21               	rlf	??___ftadd+1,w
  6500  0630  0D22               	rlf	??___ftadd+2,w
  6501  0631  00A3               	movwf	??___ftadd+3
  6502  0632  0823               	movf	??___ftadd+3,w
  6503  0633  00A6               	movwf	___ftadd@exp1
  6504  0634  087B               	movf	___ftadd@f2,w
  6505  0635  00A0               	movwf	??___ftadd
  6506  0636  087C               	movf	___ftadd@f2+1,w
  6507  0637  00A1               	movwf	??___ftadd+1
  6508  0638  087D               	movf	___ftadd@f2+2,w
  6509  0639  00A2               	movwf	??___ftadd+2
  6510  063A  1003               	clrc
  6511  063B  0D21               	rlf	??___ftadd+1,w
  6512  063C  0D22               	rlf	??___ftadd+2,w
  6513  063D  00A3               	movwf	??___ftadd+3
  6514  063E  0823               	movf	??___ftadd+3,w
  6515  063F  00A5               	movwf	___ftadd@exp2
  6516  0640  0826               	movf	___ftadd@exp1,w
  6517  0641  1903               	btfsc	3,2
  6518  0642  2E4F               	goto	i1l2065
  6519  0643  0825               	movf	___ftadd@exp2,w
  6520  0644  0226               	subwf	___ftadd@exp1,w
  6521  0645  1803               	skipnc
  6522  0646  2E56               	goto	i1l2069
  6523  0647  0326               	decf	___ftadd@exp1,w
  6524  0648  3AFF               	xorlw	255
  6525  0649  0725               	addwf	___ftadd@exp2,w
  6526  064A  00A0               	movwf	??___ftadd
  6527  064B  3019               	movlw	25
  6528  064C  0220               	subwf	??___ftadd,w
  6529  064D  1C03               	skipc
  6530  064E  2E56               	goto	i1l2069
  6531  064F                     i1l2065:	
  6532  064F  087B               	movf	___ftadd@f2,w
  6533  0650  00F8               	movwf	?___ftadd
  6534  0651  087C               	movf	___ftadd@f2+1,w
  6535  0652  00F9               	movwf	?___ftadd+1
  6536  0653  087D               	movf	___ftadd@f2+2,w
  6537  0654  00FA               	movwf	?___ftadd+2
  6538  0655  0008               	return
  6539  0656                     i1l2069:	
  6540  0656  0825               	movf	___ftadd@exp2,w
  6541  0657  1903               	btfsc	3,2
  6542  0658  0008               	return
  6543  0659  0826               	movf	___ftadd@exp1,w
  6544  065A  0225               	subwf	___ftadd@exp2,w
  6545  065B  1803               	skipnc
  6546  065C  2E65               	goto	i1l2075
  6547  065D  0325               	decf	___ftadd@exp2,w
  6548  065E  3AFF               	xorlw	255
  6549  065F  0726               	addwf	___ftadd@exp1,w
  6550  0660  00A0               	movwf	??___ftadd
  6551  0661  3019               	movlw	25
  6552  0662  0220               	subwf	??___ftadd,w
  6553  0663  1803               	btfsc	3,0
  6554  0664  0008               	return
  6555  0665                     i1l2075:	
  6556  0665  3006               	movlw	6
  6557  0666  00A0               	movwf	??___ftadd
  6558  0667  0820               	movf	??___ftadd,w
  6559  0668  00A4               	movwf	___ftadd@sign
  6560  0669  1BFA               	btfsc	___ftadd@f1+2,7
  6561  066A  17A4               	bsf	___ftadd@sign,7
  6562  066B  1BFD               	btfsc	___ftadd@f2+2,7
  6563  066C  1724               	bsf	___ftadd@sign,6
  6564  066D  17F9               	bsf	___ftadd@f1+1,7
  6565  066E  30FF               	movlw	255
  6566  066F  05F8               	andwf	___ftadd@f1,f
  6567  0670  30FF               	movlw	255
  6568  0671  05F9               	andwf	___ftadd@f1+1,f
  6569  0672  3000               	movlw	0
  6570  0673  05FA               	andwf	___ftadd@f1+2,f
  6571  0674  17FC               	bsf	___ftadd@f2+1,7
  6572  0675  30FF               	movlw	255
  6573  0676  05FB               	andwf	___ftadd@f2,f
  6574  0677  30FF               	movlw	255
  6575  0678  05FC               	andwf	___ftadd@f2+1,f
  6576  0679  3000               	movlw	0
  6577  067A  05FD               	andwf	___ftadd@f2+2,f
  6578  067B  0825               	movf	___ftadd@exp2,w
  6579  067C  0226               	subwf	___ftadd@exp1,w
  6580  067D  1803               	skipnc
  6581  067E  2EA5               	goto	i1l2097
  6582  067F                     i1l2087:	
  6583  067F  3001               	movlw	1
  6584  0680                     u230_25:	
  6585  0680  1003               	clrc
  6586  0681  0DFB               	rlf	___ftadd@f2,f
  6587  0682  0DFC               	rlf	___ftadd@f2+1,f
  6588  0683  0DFD               	rlf	___ftadd@f2+2,f
  6589  0684  3EFF               	addlw	-1
  6590  0685  1D03               	skipz
  6591  0686  2E80               	goto	u230_25
  6592  0687  3001               	movlw	1
  6593  0688  02A5               	subwf	___ftadd@exp2,f
  6594  0689  0825               	movf	___ftadd@exp2,w
  6595  068A  0626               	xorwf	___ftadd@exp1,w
  6596  068B  1903               	skipnz
  6597  068C  2EA0               	goto	i1l2095
  6598  068D  3001               	movlw	1
  6599  068E  02A4               	subwf	___ftadd@sign,f
  6600  068F  0824               	movf	___ftadd@sign,w
  6601  0690  3907               	andlw	7
  6602  0691  1903               	btfsc	3,2
  6603  0692  2EA0               	goto	i1l2095
  6604  0693  2E7F               	goto	i1l2087
  6605  0694                     i1l2093:	
  6606  0694  3001               	movlw	1
  6607  0695                     u233_25:	
  6608  0695  1003               	clrc
  6609  0696  0CFA               	rrf	___ftadd@f1+2,f
  6610  0697  0CF9               	rrf	___ftadd@f1+1,f
  6611  0698  0CF8               	rrf	___ftadd@f1,f
  6612  0699  3EFF               	addlw	-1
  6613  069A  1D03               	skipz
  6614  069B  2E95               	goto	u233_25
  6615  069C  3001               	movlw	1
  6616  069D  00A0               	movwf	??___ftadd
  6617  069E  0820               	movf	??___ftadd,w
  6618  069F  07A6               	addwf	___ftadd@exp1,f
  6619  06A0                     i1l2095:	
  6620  06A0  0826               	movf	___ftadd@exp1,w
  6621  06A1  0625               	xorwf	___ftadd@exp2,w
  6622  06A2  1903               	btfsc	3,2
  6623  06A3  2ECE               	goto	i1l565
  6624  06A4  2E94               	goto	i1l2093
  6625  06A5                     i1l2097:	
  6626  06A5  0826               	movf	___ftadd@exp1,w
  6627  06A6  0225               	subwf	___ftadd@exp2,w
  6628  06A7  1803               	skipnc
  6629  06A8  2ECE               	goto	i1l565
  6630  06A9                     i1l2099:	
  6631  06A9  3001               	movlw	1
  6632  06AA                     u236_25:	
  6633  06AA  1003               	clrc
  6634  06AB  0DF8               	rlf	___ftadd@f1,f
  6635  06AC  0DF9               	rlf	___ftadd@f1+1,f
  6636  06AD  0DFA               	rlf	___ftadd@f1+2,f
  6637  06AE  3EFF               	addlw	-1
  6638  06AF  1D03               	skipz
  6639  06B0  2EAA               	goto	u236_25
  6640  06B1  3001               	movlw	1
  6641  06B2  02A6               	subwf	___ftadd@exp1,f
  6642  06B3  0825               	movf	___ftadd@exp2,w
  6643  06B4  0626               	xorwf	___ftadd@exp1,w
  6644  06B5  1903               	skipnz
  6645  06B6  2ECA               	goto	i1l2107
  6646  06B7  3001               	movlw	1
  6647  06B8  02A4               	subwf	___ftadd@sign,f
  6648  06B9  0824               	movf	___ftadd@sign,w
  6649  06BA  3907               	andlw	7
  6650  06BB  1903               	btfsc	3,2
  6651  06BC  2ECA               	goto	i1l2107
  6652  06BD  2EA9               	goto	i1l2099
  6653  06BE                     i1l2105:	
  6654  06BE  3001               	movlw	1
  6655  06BF                     u239_25:	
  6656  06BF  1003               	clrc
  6657  06C0  0CFD               	rrf	___ftadd@f2+2,f
  6658  06C1  0CFC               	rrf	___ftadd@f2+1,f
  6659  06C2  0CFB               	rrf	___ftadd@f2,f
  6660  06C3  3EFF               	addlw	-1
  6661  06C4  1D03               	skipz
  6662  06C5  2EBF               	goto	u239_25
  6663  06C6  3001               	movlw	1
  6664  06C7  00A0               	movwf	??___ftadd
  6665  06C8  0820               	movf	??___ftadd,w
  6666  06C9  07A5               	addwf	___ftadd@exp2,f
  6667  06CA                     i1l2107:	
  6668  06CA  0826               	movf	___ftadd@exp1,w
  6669  06CB  0625               	xorwf	___ftadd@exp2,w
  6670  06CC  1D03               	skipz
  6671  06CD  2EBE               	goto	i1l2105
  6672  06CE                     i1l565:	
  6673  06CE  1FA4               	btfss	___ftadd@sign,7
  6674  06CF  2EE0               	goto	i1l2111
  6675  06D0  30FF               	movlw	255
  6676  06D1  06F8               	xorwf	___ftadd@f1,f
  6677  06D2  30FF               	movlw	255
  6678  06D3  06F9               	xorwf	___ftadd@f1+1,f
  6679  06D4  30FF               	movlw	255
  6680  06D5  06FA               	xorwf	___ftadd@f1+2,f
  6681  06D6  3001               	movlw	1
  6682  06D7  07F8               	addwf	___ftadd@f1,f
  6683  06D8  3000               	movlw	0
  6684  06D9  1803               	skipnc
  6685  06DA  3001               	movlw	1
  6686  06DB  07F9               	addwf	___ftadd@f1+1,f
  6687  06DC  3000               	movlw	0
  6688  06DD  1803               	skipnc
  6689  06DE  3001               	movlw	1
  6690  06DF  07FA               	addwf	___ftadd@f1+2,f
  6691  06E0                     i1l2111:	
  6692  06E0  1F24               	btfss	___ftadd@sign,6
  6693  06E1  2EF2               	goto	i1l2115
  6694  06E2  30FF               	movlw	255
  6695  06E3  06FB               	xorwf	___ftadd@f2,f
  6696  06E4  30FF               	movlw	255
  6697  06E5  06FC               	xorwf	___ftadd@f2+1,f
  6698  06E6  30FF               	movlw	255
  6699  06E7  06FD               	xorwf	___ftadd@f2+2,f
  6700  06E8  3001               	movlw	1
  6701  06E9  07FB               	addwf	___ftadd@f2,f
  6702  06EA  3000               	movlw	0
  6703  06EB  1803               	skipnc
  6704  06EC  3001               	movlw	1
  6705  06ED  07FC               	addwf	___ftadd@f2+1,f
  6706  06EE  3000               	movlw	0
  6707  06EF  1803               	skipnc
  6708  06F0  3001               	movlw	1
  6709  06F1  07FD               	addwf	___ftadd@f2+2,f
  6710  06F2                     i1l2115:	
  6711  06F2  01A4               	clrf	___ftadd@sign
  6712  06F3  0878               	movf	___ftadd@f1,w
  6713  06F4  07FB               	addwf	___ftadd@f2,f
  6714  06F5  0879               	movf	___ftadd@f1+1,w
  6715  06F6  1103               	clrz
  6716  06F7  1803               	skipnc
  6717  06F8  0A79               	incf	___ftadd@f1+1,w
  6718  06F9  1D03               	btfss	3,2
  6719  06FA  07FC               	addwf	___ftadd@f2+1,f
  6720  06FB  087A               	movf	___ftadd@f1+2,w
  6721  06FC  1103               	clrz
  6722  06FD  1803               	skipnc
  6723  06FE  0A7A               	incf	___ftadd@f1+2,w
  6724  06FF  1D03               	btfss	3,2
  6725  0700  07FD               	addwf	___ftadd@f2+2,f
  6726  0701  1FFD               	btfss	___ftadd@f2+2,7
  6727  0702  2F15               	goto	i1l2125
  6728  0703  30FF               	movlw	255
  6729  0704  06FB               	xorwf	___ftadd@f2,f
  6730  0705  30FF               	movlw	255
  6731  0706  06FC               	xorwf	___ftadd@f2+1,f
  6732  0707  30FF               	movlw	255
  6733  0708  06FD               	xorwf	___ftadd@f2+2,f
  6734  0709  3001               	movlw	1
  6735  070A  07FB               	addwf	___ftadd@f2,f
  6736  070B  3000               	movlw	0
  6737  070C  1803               	skipnc
  6738  070D  3001               	movlw	1
  6739  070E  07FC               	addwf	___ftadd@f2+1,f
  6740  070F  3000               	movlw	0
  6741  0710  1803               	skipnc
  6742  0711  3001               	movlw	1
  6743  0712  07FD               	addwf	___ftadd@f2+2,f
  6744  0713  01A4               	clrf	___ftadd@sign
  6745  0714  0AA4               	incf	___ftadd@sign,f
  6746  0715                     i1l2125:	
  6747  0715  087B               	movf	___ftadd@f2,w
  6748  0716  00F0               	movwf	___ftpack@arg
  6749  0717  087C               	movf	___ftadd@f2+1,w
  6750  0718  00F1               	movwf	___ftpack@arg+1
  6751  0719  087D               	movf	___ftadd@f2+2,w
  6752  071A  00F2               	movwf	___ftpack@arg+2
  6753  071B  0826               	movf	___ftadd@exp1,w
  6754  071C  00A0               	movwf	??___ftadd
  6755  071D  0820               	movf	??___ftadd,w
  6756  071E  00F3               	movwf	___ftpack@exp
  6757  071F  0824               	movf	___ftadd@sign,w
  6758  0720  00A1               	movwf	??___ftadd+1
  6759  0721  0821               	movf	??___ftadd+1,w
  6760  0722  00F4               	movwf	___ftpack@sign
  6761  0723  120A  158A  23A4   	fcall	___ftpack
  6762  0726  0870               	movf	?___ftpack,w
  6763  0727  00F8               	movwf	?___ftadd
  6764  0728  0871               	movf	?___ftpack+1,w
  6765  0729  00F9               	movwf	?___ftadd+1
  6766  072A  0872               	movf	?___ftpack+2,w
  6767  072B  00FA               	movwf	?___ftadd+2
  6768  072C  0008               	return
  6769  072D                     __end_of___ftadd:	
  6770                           
  6771                           	psect	text32
  6772  157C                     __ptext32:	
  6773 ;; *************** function ___ftneg *****************
  6774 ;; Defined at:
  6775 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  f1              3    0[COMMON] float 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  3    0[COMMON] float 
  6782 ;; Registers used:
  6783 ;;		wreg
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6789 ;;      Params:         3       0       0       0       0
  6790 ;;      Locals:         0       0       0       0       0
  6791 ;;      Temps:          0       0       0       0       0
  6792 ;;      Totals:         3       0       0       0       0
  6793 ;;Total ram usage:        3 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_ftoa
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           
  6803                           ;psect for function ___ftneg
  6804  157C                     ___ftneg:	
  6805                           
  6806                           ;incstack = 0
  6807 ;; hardware stack exceeded
  6808                           ; Regs used in ___ftneg: [wreg]
  6809  157C  0872               	movf	___ftneg@f1+2,w
  6810  157D  0471               	iorwf	___ftneg@f1+1,w
  6811  157E  0470               	iorwf	___ftneg@f1,w
  6812  157F  1903               	skipnz
  6813  1580  0008               	return
  6814  1581  3080               	movlw	128
  6815  1582  06F2               	xorwf	___ftneg@f1+2,f
  6816  1583  0008               	return
  6817  1584                     __end_of___ftneg:	
  6818                           
  6819                           	psect	text33
  6820  072D                     __ptext33:	
  6821 ;; *************** function ___ftmul *****************
  6822 ;; Defined at:
  6823 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  f1              3    0[BANK0 ] float 
  6826 ;;  f2              3    3[BANK0 ] float 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6829 ;;  sign            1   15[BANK0 ] unsigned char 
  6830 ;;  cntr            1   14[BANK0 ] unsigned char 
  6831 ;;  exp             1   10[BANK0 ] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  3    0[BANK0 ] float 
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, pclath, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6841 ;;      Params:         0       6       0       0       0
  6842 ;;      Locals:         0       6       0       0       0
  6843 ;;      Temps:          0       4       0       0       0
  6844 ;;      Totals:         0      16       0       0       0
  6845 ;;Total ram usage:       16 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    1
  6848 ;; This function calls:
  6849 ;;		___ftpack
  6850 ;; This function is called by:
  6851 ;;		_ISR
  6852 ;;		_ftoa
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           
  6857                           ;psect for function ___ftmul
  6858  072D                     ___ftmul:	
  6859                           
  6860                           ;incstack = 0
  6861 ;; hardware stack exceeded
  6862                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6863  072D  1283               	bcf	3,5	;RP0=0, select bank0
  6864  072E  1303               	bcf	3,6	;RP1=0, select bank0
  6865  072F  0820               	movf	___ftmul@f1,w
  6866  0730  00A6               	movwf	??___ftmul
  6867  0731  0821               	movf	___ftmul@f1+1,w
  6868  0732  00A7               	movwf	??___ftmul+1
  6869  0733  0822               	movf	___ftmul@f1+2,w
  6870  0734  00A8               	movwf	??___ftmul+2
  6871  0735  1003               	clrc
  6872  0736  0D27               	rlf	??___ftmul+1,w
  6873  0737  0D28               	rlf	??___ftmul+2,w
  6874  0738  00A9               	movwf	??___ftmul+3
  6875  0739  0829               	movf	??___ftmul+3,w
  6876  073A  00AA               	movwf	___ftmul@exp
  6877  073B  08AA               	movf	___ftmul@exp,f
  6878  073C  1D03               	skipz
  6879  073D  2F45               	goto	i1l2429
  6880  073E  3000               	movlw	0
  6881  073F  00A0               	movwf	?___ftmul
  6882  0740  3000               	movlw	0
  6883  0741  00A1               	movwf	?___ftmul+1
  6884  0742  3000               	movlw	0
  6885  0743  00A2               	movwf	?___ftmul+2
  6886  0744  0008               	return
  6887  0745                     i1l2429:	
  6888  0745  0823               	movf	___ftmul@f2,w
  6889  0746  00A6               	movwf	??___ftmul
  6890  0747  0824               	movf	___ftmul@f2+1,w
  6891  0748  00A7               	movwf	??___ftmul+1
  6892  0749  0825               	movf	___ftmul@f2+2,w
  6893  074A  00A8               	movwf	??___ftmul+2
  6894  074B  1003               	clrc
  6895  074C  0D27               	rlf	??___ftmul+1,w
  6896  074D  0D28               	rlf	??___ftmul+2,w
  6897  074E  00A9               	movwf	??___ftmul+3
  6898  074F  0829               	movf	??___ftmul+3,w
  6899  0750  00AF               	movwf	___ftmul@sign
  6900  0751  08AF               	movf	___ftmul@sign,f
  6901  0752  1D03               	skipz
  6902  0753  2F5B               	goto	i1l2435
  6903  0754  3000               	movlw	0
  6904  0755  00A0               	movwf	?___ftmul
  6905  0756  3000               	movlw	0
  6906  0757  00A1               	movwf	?___ftmul+1
  6907  0758  3000               	movlw	0
  6908  0759  00A2               	movwf	?___ftmul+2
  6909  075A  0008               	return
  6910  075B                     i1l2435:	
  6911  075B  082F               	movf	___ftmul@sign,w
  6912  075C  3E7B               	addlw	123
  6913  075D  00A6               	movwf	??___ftmul
  6914  075E  0826               	movf	??___ftmul,w
  6915  075F  07AA               	addwf	___ftmul@exp,f
  6916  0760  0820               	movf	___ftmul@f1,w
  6917  0761  00A6               	movwf	??___ftmul
  6918  0762  0821               	movf	___ftmul@f1+1,w
  6919  0763  00A7               	movwf	??___ftmul+1
  6920  0764  0822               	movf	___ftmul@f1+2,w
  6921  0765  00A8               	movwf	??___ftmul+2
  6922  0766  3010               	movlw	16
  6923  0767                     u297_25:	
  6924  0767  1003               	clrc
  6925  0768  0CA8               	rrf	??___ftmul+2,f
  6926  0769  0CA7               	rrf	??___ftmul+1,f
  6927  076A  0CA6               	rrf	??___ftmul,f
  6928  076B  3EFF               	addlw	-1
  6929  076C  1D03               	skipz
  6930  076D  2F67               	goto	u297_25
  6931  076E  0826               	movf	??___ftmul,w
  6932  076F  00A9               	movwf	??___ftmul+3
  6933  0770  0829               	movf	??___ftmul+3,w
  6934  0771  00AF               	movwf	___ftmul@sign
  6935  0772  0823               	movf	___ftmul@f2,w
  6936  0773  00A6               	movwf	??___ftmul
  6937  0774  0824               	movf	___ftmul@f2+1,w
  6938  0775  00A7               	movwf	??___ftmul+1
  6939  0776  0825               	movf	___ftmul@f2+2,w
  6940  0777  00A8               	movwf	??___ftmul+2
  6941  0778  3010               	movlw	16
  6942  0779                     u298_25:	
  6943  0779  1003               	clrc
  6944  077A  0CA8               	rrf	??___ftmul+2,f
  6945  077B  0CA7               	rrf	??___ftmul+1,f
  6946  077C  0CA6               	rrf	??___ftmul,f
  6947  077D  3EFF               	addlw	-1
  6948  077E  1D03               	skipz
  6949  077F  2F79               	goto	u298_25
  6950  0780  0826               	movf	??___ftmul,w
  6951  0781  00A9               	movwf	??___ftmul+3
  6952  0782  0829               	movf	??___ftmul+3,w
  6953  0783  06AF               	xorwf	___ftmul@sign,f
  6954  0784  3080               	movlw	128
  6955  0785  00A6               	movwf	??___ftmul
  6956  0786  0826               	movf	??___ftmul,w
  6957  0787  05AF               	andwf	___ftmul@sign,f
  6958  0788  17A1               	bsf	___ftmul@f1+1,7
  6959  0789  17A4               	bsf	___ftmul@f2+1,7
  6960  078A  30FF               	movlw	255
  6961  078B  05A3               	andwf	___ftmul@f2,f
  6962  078C  30FF               	movlw	255
  6963  078D  05A4               	andwf	___ftmul@f2+1,f
  6964  078E  3000               	movlw	0
  6965  078F  05A5               	andwf	___ftmul@f2+2,f
  6966  0790  3000               	movlw	0
  6967  0791  00AB               	movwf	___ftmul@f3_as_product
  6968  0792  3000               	movlw	0
  6969  0793  00AC               	movwf	___ftmul@f3_as_product+1
  6970  0794  3000               	movlw	0
  6971  0795  00AD               	movwf	___ftmul@f3_as_product+2
  6972  0796  3007               	movlw	7
  6973  0797  00A6               	movwf	??___ftmul
  6974  0798  0826               	movf	??___ftmul,w
  6975  0799  00AE               	movwf	___ftmul@cntr
  6976  079A                     i1l2447:	
  6977  079A  1C20               	btfss	___ftmul@f1,0
  6978  079B  2FAA               	goto	i1l2451
  6979  079C  0823               	movf	___ftmul@f2,w
  6980  079D  07AB               	addwf	___ftmul@f3_as_product,f
  6981  079E  0824               	movf	___ftmul@f2+1,w
  6982  079F  1103               	clrz
  6983  07A0  1803               	skipnc
  6984  07A1  0A24               	incf	___ftmul@f2+1,w
  6985  07A2  1D03               	btfss	3,2
  6986  07A3  07AC               	addwf	___ftmul@f3_as_product+1,f
  6987  07A4  0825               	movf	___ftmul@f2+2,w
  6988  07A5  1103               	clrz
  6989  07A6  1803               	skipnc
  6990  07A7  0A25               	incf	___ftmul@f2+2,w
  6991  07A8  1D03               	btfss	3,2
  6992  07A9  07AD               	addwf	___ftmul@f3_as_product+2,f
  6993  07AA                     i1l2451:	
  6994  07AA  3001               	movlw	1
  6995  07AB                     u301_25:	
  6996  07AB  1003               	clrc
  6997  07AC  0CA2               	rrf	___ftmul@f1+2,f
  6998  07AD  0CA1               	rrf	___ftmul@f1+1,f
  6999  07AE  0CA0               	rrf	___ftmul@f1,f
  7000  07AF  3EFF               	addlw	-1
  7001  07B0  1D03               	skipz
  7002  07B1  2FAB               	goto	u301_25
  7003  07B2  3001               	movlw	1
  7004  07B3                     u302_25:	
  7005  07B3  1003               	clrc
  7006  07B4  0DA3               	rlf	___ftmul@f2,f
  7007  07B5  0DA4               	rlf	___ftmul@f2+1,f
  7008  07B6  0DA5               	rlf	___ftmul@f2+2,f
  7009  07B7  3EFF               	addlw	-1
  7010  07B8  1D03               	skipz
  7011  07B9  2FB3               	goto	u302_25
  7012  07BA  3001               	movlw	1
  7013  07BB  02AE               	subwf	___ftmul@cntr,f
  7014  07BC  1D03               	btfss	3,2
  7015  07BD  2F9A               	goto	i1l2447
  7016  07BE  3009               	movlw	9
  7017  07BF  00A6               	movwf	??___ftmul
  7018  07C0  0826               	movf	??___ftmul,w
  7019  07C1  00AE               	movwf	___ftmul@cntr
  7020  07C2                     i1l2459:	
  7021  07C2  1C20               	btfss	___ftmul@f1,0
  7022  07C3  2FD2               	goto	i1l2463
  7023  07C4  0823               	movf	___ftmul@f2,w
  7024  07C5  07AB               	addwf	___ftmul@f3_as_product,f
  7025  07C6  0824               	movf	___ftmul@f2+1,w
  7026  07C7  1103               	clrz
  7027  07C8  1803               	skipnc
  7028  07C9  0A24               	incf	___ftmul@f2+1,w
  7029  07CA  1D03               	btfss	3,2
  7030  07CB  07AC               	addwf	___ftmul@f3_as_product+1,f
  7031  07CC  0825               	movf	___ftmul@f2+2,w
  7032  07CD  1103               	clrz
  7033  07CE  1803               	skipnc
  7034  07CF  0A25               	incf	___ftmul@f2+2,w
  7035  07D0  1D03               	btfss	3,2
  7036  07D1  07AD               	addwf	___ftmul@f3_as_product+2,f
  7037  07D2                     i1l2463:	
  7038  07D2  3001               	movlw	1
  7039  07D3                     u306_25:	
  7040  07D3  1003               	clrc
  7041  07D4  0CA2               	rrf	___ftmul@f1+2,f
  7042  07D5  0CA1               	rrf	___ftmul@f1+1,f
  7043  07D6  0CA0               	rrf	___ftmul@f1,f
  7044  07D7  3EFF               	addlw	-1
  7045  07D8  1D03               	skipz
  7046  07D9  2FD3               	goto	u306_25
  7047  07DA  3001               	movlw	1
  7048  07DB                     u307_25:	
  7049  07DB  1003               	clrc
  7050  07DC  0CAD               	rrf	___ftmul@f3_as_product+2,f
  7051  07DD  0CAC               	rrf	___ftmul@f3_as_product+1,f
  7052  07DE  0CAB               	rrf	___ftmul@f3_as_product,f
  7053  07DF  3EFF               	addlw	-1
  7054  07E0  1D03               	skipz
  7055  07E1  2FDB               	goto	u307_25
  7056  07E2  3001               	movlw	1
  7057  07E3  02AE               	subwf	___ftmul@cntr,f
  7058  07E4  1D03               	btfss	3,2
  7059  07E5  2FC2               	goto	i1l2459
  7060  07E6  082B               	movf	___ftmul@f3_as_product,w
  7061  07E7  00F0               	movwf	___ftpack@arg
  7062  07E8  082C               	movf	___ftmul@f3_as_product+1,w
  7063  07E9  00F1               	movwf	___ftpack@arg+1
  7064  07EA  082D               	movf	___ftmul@f3_as_product+2,w
  7065  07EB  00F2               	movwf	___ftpack@arg+2
  7066  07EC  082A               	movf	___ftmul@exp,w
  7067  07ED  00A6               	movwf	??___ftmul
  7068  07EE  0826               	movf	??___ftmul,w
  7069  07EF  00F3               	movwf	___ftpack@exp
  7070  07F0  082F               	movf	___ftmul@sign,w
  7071  07F1  00A7               	movwf	??___ftmul+1
  7072  07F2  0827               	movf	??___ftmul+1,w
  7073  07F3  00F4               	movwf	___ftpack@sign
  7074  07F4  120A  158A  23A4   	fcall	___ftpack
  7075  07F7  0870               	movf	?___ftpack,w
  7076  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  7077  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  7078  07FA  00A0               	movwf	?___ftmul
  7079  07FB  0871               	movf	?___ftpack+1,w
  7080  07FC  00A1               	movwf	?___ftmul+1
  7081  07FD  0872               	movf	?___ftpack+2,w
  7082  07FE  00A2               	movwf	?___ftmul+2
  7083  07FF  0008               	return
  7084  0800                     __end_of___ftmul:	
  7085                           
  7086                           	psect	text34
  7087  0A83                     __ptext34:	
  7088 ;; *************** function ___ftge *****************
  7089 ;; Defined at:
  7090 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftge.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  ff1             3    0[COMMON] float 
  7093 ;;  ff2             3    3[COMMON] float 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;		None               void
  7098 ;; Registers used:
  7099 ;;		wreg, status,2, status,0
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7105 ;;      Params:         6       0       0       0       0
  7106 ;;      Locals:         0       0       0       0       0
  7107 ;;      Temps:          6       0       0       0       0
  7108 ;;      Totals:        12       0       0       0       0
  7109 ;;Total ram usage:       12 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; This function calls:
  7112 ;;		Nothing
  7113 ;; This function is called by:
  7114 ;;		_ftoa
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           
  7119                           ;psect for function ___ftge
  7120  0A83                     ___ftge:	
  7121                           
  7122                           ;incstack = 0
  7123 ;; hardware stack exceeded
  7124                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7125  0A83  1FF2               	btfss	___ftge@ff1+2,7
  7126  0A84  2AAA               	goto	i1l2407
  7127  0A85  3000               	movlw	0
  7128  0A86  00F6               	movwf	??___ftge
  7129  0A87  3000               	movlw	0
  7130  0A88  00F7               	movwf	??___ftge+1
  7131  0A89  3080               	movlw	128
  7132  0A8A  00F8               	movwf	??___ftge+2
  7133  0A8B  0970               	comf	___ftge@ff1,w
  7134  0A8C  00F9               	movwf	??___ftge+3
  7135  0A8D  0971               	comf	___ftge@ff1+1,w
  7136  0A8E  00FA               	movwf	??___ftge+4
  7137  0A8F  0972               	comf	___ftge@ff1+2,w
  7138  0A90  00FB               	movwf	??___ftge+5
  7139  0A91  0AF9               	incf	??___ftge+3,f
  7140  0A92  1903               	skipnz
  7141  0A93  0AFA               	incf	??___ftge+4,f
  7142  0A94  1903               	skipnz
  7143  0A95  0AFB               	incf	??___ftge+5,f
  7144  0A96  0879               	movf	??___ftge+3,w
  7145  0A97  07F6               	addwf	??___ftge,f
  7146  0A98  087A               	movf	??___ftge+4,w
  7147  0A99  1803               	skipnc
  7148  0A9A  0F7A               	incfsz	??___ftge+4,w
  7149  0A9B  2A9D               	goto	u291_21
  7150  0A9C  2A9E               	goto	u291_22
  7151  0A9D                     u291_21:	
  7152  0A9D  07F7               	addwf	??___ftge+1,f
  7153  0A9E                     u291_22:	
  7154  0A9E  087B               	movf	??___ftge+5,w
  7155  0A9F  1803               	skipnc
  7156  0AA0  0F7B               	incfsz	??___ftge+5,w
  7157  0AA1  2AA3               	goto	u291_23
  7158  0AA2  2AA4               	goto	u291_24
  7159  0AA3                     u291_23:	
  7160  0AA3  07F8               	addwf	??___ftge+2,f
  7161  0AA4                     u291_24:	
  7162  0AA4  0876               	movf	??___ftge,w
  7163  0AA5  00F0               	movwf	___ftge@ff1
  7164  0AA6  0877               	movf	??___ftge+1,w
  7165  0AA7  00F1               	movwf	___ftge@ff1+1
  7166  0AA8  0878               	movf	??___ftge+2,w
  7167  0AA9  00F2               	movwf	___ftge@ff1+2
  7168  0AAA                     i1l2407:	
  7169  0AAA  1FF5               	btfss	___ftge@ff2+2,7
  7170  0AAB  2AD1               	goto	i1l2411
  7171  0AAC  3000               	movlw	0
  7172  0AAD  00F6               	movwf	??___ftge
  7173  0AAE  3000               	movlw	0
  7174  0AAF  00F7               	movwf	??___ftge+1
  7175  0AB0  3080               	movlw	128
  7176  0AB1  00F8               	movwf	??___ftge+2
  7177  0AB2  0973               	comf	___ftge@ff2,w
  7178  0AB3  00F9               	movwf	??___ftge+3
  7179  0AB4  0974               	comf	___ftge@ff2+1,w
  7180  0AB5  00FA               	movwf	??___ftge+4
  7181  0AB6  0975               	comf	___ftge@ff2+2,w
  7182  0AB7  00FB               	movwf	??___ftge+5
  7183  0AB8  0AF9               	incf	??___ftge+3,f
  7184  0AB9  1903               	skipnz
  7185  0ABA  0AFA               	incf	??___ftge+4,f
  7186  0ABB  1903               	skipnz
  7187  0ABC  0AFB               	incf	??___ftge+5,f
  7188  0ABD  0879               	movf	??___ftge+3,w
  7189  0ABE  07F6               	addwf	??___ftge,f
  7190  0ABF  087A               	movf	??___ftge+4,w
  7191  0AC0  1803               	skipnc
  7192  0AC1  0F7A               	incfsz	??___ftge+4,w
  7193  0AC2  2AC4               	goto	u293_21
  7194  0AC3  2AC5               	goto	u293_22
  7195  0AC4                     u293_21:	
  7196  0AC4  07F7               	addwf	??___ftge+1,f
  7197  0AC5                     u293_22:	
  7198  0AC5  087B               	movf	??___ftge+5,w
  7199  0AC6  1803               	skipnc
  7200  0AC7  0F7B               	incfsz	??___ftge+5,w
  7201  0AC8  2ACA               	goto	u293_23
  7202  0AC9  2ACB               	goto	u293_24
  7203  0ACA                     u293_23:	
  7204  0ACA  07F8               	addwf	??___ftge+2,f
  7205  0ACB                     u293_24:	
  7206  0ACB  0876               	movf	??___ftge,w
  7207  0ACC  00F3               	movwf	___ftge@ff2
  7208  0ACD  0877               	movf	??___ftge+1,w
  7209  0ACE  00F4               	movwf	___ftge@ff2+1
  7210  0ACF  0878               	movf	??___ftge+2,w
  7211  0AD0  00F5               	movwf	___ftge@ff2+2
  7212  0AD1                     i1l2411:	
  7213  0AD1  3080               	movlw	128
  7214  0AD2  06F2               	xorwf	___ftge@ff1+2,f
  7215  0AD3  3080               	movlw	128
  7216  0AD4  06F5               	xorwf	___ftge@ff2+2,f
  7217  0AD5  0875               	movf	___ftge@ff2+2,w
  7218  0AD6  0272               	subwf	___ftge@ff1+2,w
  7219  0AD7  1D03               	skipz
  7220  0AD8  0008               	return
  7221  0AD9  0874               	movf	___ftge@ff2+1,w
  7222  0ADA  0271               	subwf	___ftge@ff1+1,w
  7223  0ADB  1D03               	skipz
  7224  0ADC  0008               	return
  7225  0ADD  0873               	movf	___ftge@ff2,w
  7226  0ADE  0270               	subwf	___ftge@ff1,w
  7227  0ADF  0008               	return
  7228  0AE0                     __end_of___ftge:	
  7229                           
  7230                           	psect	text35
  7231  0E8E                     __ptext35:	
  7232 ;; *************** function ___ftdiv *****************
  7233 ;; Defined at:
  7234 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  f2              3   16[BANK0 ] float 
  7237 ;;  f1              3   19[BANK0 ] float 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;  f3              3   27[BANK0 ] float 
  7240 ;;  sign            1   31[BANK0 ] unsigned char 
  7241 ;;  exp             1   30[BANK0 ] unsigned char 
  7242 ;;  cntr            1   26[BANK0 ] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  3   16[BANK0 ] float 
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0, pclath, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7252 ;;      Params:         0       6       0       0       0
  7253 ;;      Locals:         0       6       0       0       0
  7254 ;;      Temps:          0       4       0       0       0
  7255 ;;      Totals:         0      16       0       0       0
  7256 ;;Total ram usage:       16 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    1
  7259 ;; This function calls:
  7260 ;;		___ftpack
  7261 ;; This function is called by:
  7262 ;;		_ISR
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           
  7267                           ;psect for function ___ftdiv
  7268  0E8E                     ___ftdiv:	
  7269                           
  7270                           ;incstack = 0
  7271 ;; hardware stack exceeded
  7272                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7273  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  7274  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  7275  0E90  0833               	movf	___ftdiv@f1,w
  7276  0E91  00B6               	movwf	??___ftdiv
  7277  0E92  0834               	movf	___ftdiv@f1+1,w
  7278  0E93  00B7               	movwf	??___ftdiv+1
  7279  0E94  0835               	movf	___ftdiv@f1+2,w
  7280  0E95  00B8               	movwf	??___ftdiv+2
  7281  0E96  1003               	clrc
  7282  0E97  0D37               	rlf	??___ftdiv+1,w
  7283  0E98  0D38               	rlf	??___ftdiv+2,w
  7284  0E99  00B9               	movwf	??___ftdiv+3
  7285  0E9A  0839               	movf	??___ftdiv+3,w
  7286  0E9B  00BE               	movwf	___ftdiv@exp
  7287  0E9C  08BE               	movf	___ftdiv@exp,f
  7288  0E9D  1D03               	skipz
  7289  0E9E  2EA6               	goto	i1l2719
  7290  0E9F  3000               	movlw	0
  7291  0EA0  00B0               	movwf	?___ftdiv
  7292  0EA1  3000               	movlw	0
  7293  0EA2  00B1               	movwf	?___ftdiv+1
  7294  0EA3  3000               	movlw	0
  7295  0EA4  00B2               	movwf	?___ftdiv+2
  7296  0EA5  0008               	return
  7297  0EA6                     i1l2719:	
  7298  0EA6  0830               	movf	___ftdiv@f2,w
  7299  0EA7  00B6               	movwf	??___ftdiv
  7300  0EA8  0831               	movf	___ftdiv@f2+1,w
  7301  0EA9  00B7               	movwf	??___ftdiv+1
  7302  0EAA  0832               	movf	___ftdiv@f2+2,w
  7303  0EAB  00B8               	movwf	??___ftdiv+2
  7304  0EAC  1003               	clrc
  7305  0EAD  0D37               	rlf	??___ftdiv+1,w
  7306  0EAE  0D38               	rlf	??___ftdiv+2,w
  7307  0EAF  00B9               	movwf	??___ftdiv+3
  7308  0EB0  0839               	movf	??___ftdiv+3,w
  7309  0EB1  00BF               	movwf	___ftdiv@sign
  7310  0EB2  08BF               	movf	___ftdiv@sign,f
  7311  0EB3  1D03               	skipz
  7312  0EB4  2EBC               	goto	i1l2725
  7313  0EB5  3000               	movlw	0
  7314  0EB6  00B0               	movwf	?___ftdiv
  7315  0EB7  3000               	movlw	0
  7316  0EB8  00B1               	movwf	?___ftdiv+1
  7317  0EB9  3000               	movlw	0
  7318  0EBA  00B2               	movwf	?___ftdiv+2
  7319  0EBB  0008               	return
  7320  0EBC                     i1l2725:	
  7321  0EBC  3000               	movlw	0
  7322  0EBD  00BB               	movwf	___ftdiv@f3
  7323  0EBE  3000               	movlw	0
  7324  0EBF  00BC               	movwf	___ftdiv@f3+1
  7325  0EC0  3000               	movlw	0
  7326  0EC1  00BD               	movwf	___ftdiv@f3+2
  7327  0EC2  3089               	movlw	137
  7328  0EC3  073F               	addwf	___ftdiv@sign,w
  7329  0EC4  00B6               	movwf	??___ftdiv
  7330  0EC5  0836               	movf	??___ftdiv,w
  7331  0EC6  02BE               	subwf	___ftdiv@exp,f
  7332  0EC7  0833               	movf	___ftdiv@f1,w
  7333  0EC8  00B6               	movwf	??___ftdiv
  7334  0EC9  0834               	movf	___ftdiv@f1+1,w
  7335  0ECA  00B7               	movwf	??___ftdiv+1
  7336  0ECB  0835               	movf	___ftdiv@f1+2,w
  7337  0ECC  00B8               	movwf	??___ftdiv+2
  7338  0ECD  3010               	movlw	16
  7339  0ECE                     u333_25:	
  7340  0ECE  1003               	clrc
  7341  0ECF  0CB8               	rrf	??___ftdiv+2,f
  7342  0ED0  0CB7               	rrf	??___ftdiv+1,f
  7343  0ED1  0CB6               	rrf	??___ftdiv,f
  7344  0ED2  3EFF               	addlw	-1
  7345  0ED3  1D03               	skipz
  7346  0ED4  2ECE               	goto	u333_25
  7347  0ED5  0836               	movf	??___ftdiv,w
  7348  0ED6  00B9               	movwf	??___ftdiv+3
  7349  0ED7  0839               	movf	??___ftdiv+3,w
  7350  0ED8  00BF               	movwf	___ftdiv@sign
  7351  0ED9  0830               	movf	___ftdiv@f2,w
  7352  0EDA  00B6               	movwf	??___ftdiv
  7353  0EDB  0831               	movf	___ftdiv@f2+1,w
  7354  0EDC  00B7               	movwf	??___ftdiv+1
  7355  0EDD  0832               	movf	___ftdiv@f2+2,w
  7356  0EDE  00B8               	movwf	??___ftdiv+2
  7357  0EDF  3010               	movlw	16
  7358  0EE0                     u334_25:	
  7359  0EE0  1003               	clrc
  7360  0EE1  0CB8               	rrf	??___ftdiv+2,f
  7361  0EE2  0CB7               	rrf	??___ftdiv+1,f
  7362  0EE3  0CB6               	rrf	??___ftdiv,f
  7363  0EE4  3EFF               	addlw	-1
  7364  0EE5  1D03               	skipz
  7365  0EE6  2EE0               	goto	u334_25
  7366  0EE7  0836               	movf	??___ftdiv,w
  7367  0EE8  00B9               	movwf	??___ftdiv+3
  7368  0EE9  0839               	movf	??___ftdiv+3,w
  7369  0EEA  06BF               	xorwf	___ftdiv@sign,f
  7370  0EEB  3080               	movlw	128
  7371  0EEC  00B6               	movwf	??___ftdiv
  7372  0EED  0836               	movf	??___ftdiv,w
  7373  0EEE  05BF               	andwf	___ftdiv@sign,f
  7374  0EEF  17B4               	bsf	___ftdiv@f1+1,7
  7375  0EF0  30FF               	movlw	255
  7376  0EF1  05B3               	andwf	___ftdiv@f1,f
  7377  0EF2  30FF               	movlw	255
  7378  0EF3  05B4               	andwf	___ftdiv@f1+1,f
  7379  0EF4  3000               	movlw	0
  7380  0EF5  05B5               	andwf	___ftdiv@f1+2,f
  7381  0EF6  17B1               	bsf	___ftdiv@f2+1,7
  7382  0EF7  30FF               	movlw	255
  7383  0EF8  05B0               	andwf	___ftdiv@f2,f
  7384  0EF9  30FF               	movlw	255
  7385  0EFA  05B1               	andwf	___ftdiv@f2+1,f
  7386  0EFB  3000               	movlw	0
  7387  0EFC  05B2               	andwf	___ftdiv@f2+2,f
  7388  0EFD  3018               	movlw	24
  7389  0EFE  00B6               	movwf	??___ftdiv
  7390  0EFF  0836               	movf	??___ftdiv,w
  7391  0F00  00BA               	movwf	___ftdiv@cntr
  7392  0F01                     i1l2739:	
  7393  0F01  3001               	movlw	1
  7394  0F02                     u335_25:	
  7395  0F02  1003               	clrc
  7396  0F03  0DBB               	rlf	___ftdiv@f3,f
  7397  0F04  0DBC               	rlf	___ftdiv@f3+1,f
  7398  0F05  0DBD               	rlf	___ftdiv@f3+2,f
  7399  0F06  3EFF               	addlw	-1
  7400  0F07  1D03               	skipz
  7401  0F08  2F02               	goto	u335_25
  7402  0F09  0832               	movf	___ftdiv@f2+2,w
  7403  0F0A  0235               	subwf	___ftdiv@f1+2,w
  7404  0F0B  1D03               	skipz
  7405  0F0C  2F13               	goto	u336_25
  7406  0F0D  0831               	movf	___ftdiv@f2+1,w
  7407  0F0E  0234               	subwf	___ftdiv@f1+1,w
  7408  0F0F  1D03               	skipz
  7409  0F10  2F13               	goto	u336_25
  7410  0F11  0830               	movf	___ftdiv@f2,w
  7411  0F12  0233               	subwf	___ftdiv@f1,w
  7412  0F13                     u336_25:	
  7413  0F13  1C03               	skipc
  7414  0F14  2F20               	goto	i1l2747
  7415  0F15  0830               	movf	___ftdiv@f2,w
  7416  0F16  02B3               	subwf	___ftdiv@f1,f
  7417  0F17  0831               	movf	___ftdiv@f2+1,w
  7418  0F18  1C03               	skipc
  7419  0F19  0F31               	incfsz	___ftdiv@f2+1,w
  7420  0F1A  02B4               	subwf	___ftdiv@f1+1,f
  7421  0F1B  0832               	movf	___ftdiv@f2+2,w
  7422  0F1C  1C03               	skipc
  7423  0F1D  0A32               	incf	___ftdiv@f2+2,w
  7424  0F1E  02B5               	subwf	___ftdiv@f1+2,f
  7425  0F1F  143B               	bsf	___ftdiv@f3,0
  7426  0F20                     i1l2747:	
  7427  0F20  3001               	movlw	1
  7428  0F21                     u337_25:	
  7429  0F21  1003               	clrc
  7430  0F22  0DB3               	rlf	___ftdiv@f1,f
  7431  0F23  0DB4               	rlf	___ftdiv@f1+1,f
  7432  0F24  0DB5               	rlf	___ftdiv@f1+2,f
  7433  0F25  3EFF               	addlw	-1
  7434  0F26  1D03               	skipz
  7435  0F27  2F21               	goto	u337_25
  7436  0F28  3001               	movlw	1
  7437  0F29  02BA               	subwf	___ftdiv@cntr,f
  7438  0F2A  1D03               	btfss	3,2
  7439  0F2B  2F01               	goto	i1l2739
  7440  0F2C  083B               	movf	___ftdiv@f3,w
  7441  0F2D  00F0               	movwf	___ftpack@arg
  7442  0F2E  083C               	movf	___ftdiv@f3+1,w
  7443  0F2F  00F1               	movwf	___ftpack@arg+1
  7444  0F30  083D               	movf	___ftdiv@f3+2,w
  7445  0F31  00F2               	movwf	___ftpack@arg+2
  7446  0F32  083E               	movf	___ftdiv@exp,w
  7447  0F33  00B6               	movwf	??___ftdiv
  7448  0F34  0836               	movf	??___ftdiv,w
  7449  0F35  00F3               	movwf	___ftpack@exp
  7450  0F36  083F               	movf	___ftdiv@sign,w
  7451  0F37  00B7               	movwf	??___ftdiv+1
  7452  0F38  0837               	movf	??___ftdiv+1,w
  7453  0F39  00F4               	movwf	___ftpack@sign
  7454  0F3A  120A  158A  23A4   	fcall	___ftpack
  7455  0F3D  0870               	movf	?___ftpack,w
  7456  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  7457  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  7458  0F40  00B0               	movwf	?___ftdiv
  7459  0F41  0871               	movf	?___ftpack+1,w
  7460  0F42  00B1               	movwf	?___ftdiv+1
  7461  0F43  0872               	movf	?___ftpack+2,w
  7462  0F44  00B2               	movwf	?___ftdiv+2
  7463  0F45  0008               	return
  7464  0F46                     __end_of___ftdiv:	
  7465                           
  7466                           	psect	text36
  7467  1654                     __ptext36:	
  7468 ;; *************** function ___awtoft *****************
  7469 ;; Defined at:
  7470 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  c               2    8[COMMON] int 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  sign            1   13[COMMON] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  3    8[COMMON] float 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2, status,0, pclath, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7484 ;;      Params:         3       0       0       0       0
  7485 ;;      Locals:         1       0       0       0       0
  7486 ;;      Temps:          2       0       0       0       0
  7487 ;;      Totals:         6       0       0       0       0
  7488 ;;Total ram usage:        6 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    1
  7491 ;; This function calls:
  7492 ;;		___ftpack
  7493 ;; This function is called by:
  7494 ;;		_ISR
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function ___awtoft
  7500  1654                     ___awtoft:	
  7501                           
  7502                           ;incstack = 0
  7503 ;; hardware stack exceeded
  7504                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7505  1654  01FD               	clrf	___awtoft@sign
  7506  1655  1FF9               	btfss	___awtoft@c+1,7
  7507  1656  2E5E               	goto	i1l2709
  7508  1657  09F8               	comf	___awtoft@c,f
  7509  1658  09F9               	comf	___awtoft@c+1,f
  7510  1659  0AF8               	incf	___awtoft@c,f
  7511  165A  1903               	skipnz
  7512  165B  0AF9               	incf	___awtoft@c+1,f
  7513  165C  01FD               	clrf	___awtoft@sign
  7514  165D  0AFD               	incf	___awtoft@sign,f
  7515  165E                     i1l2709:	
  7516  165E  0878               	movf	___awtoft@c,w
  7517  165F  00F0               	movwf	___ftpack@arg
  7518  1660  0879               	movf	___awtoft@c+1,w
  7519  1661  00F1               	movwf	___ftpack@arg+1
  7520  1662  01F2               	clrf	___ftpack@arg+2
  7521  1663  308E               	movlw	142
  7522  1664  00FB               	movwf	??___awtoft
  7523  1665  087B               	movf	??___awtoft,w
  7524  1666  00F3               	movwf	___ftpack@exp
  7525  1667  087D               	movf	___awtoft@sign,w
  7526  1668  00FC               	movwf	??___awtoft+1
  7527  1669  087C               	movf	??___awtoft+1,w
  7528  166A  00F4               	movwf	___ftpack@sign
  7529  166B  120A  158A  23A4   	fcall	___ftpack
  7530  166E  0870               	movf	?___ftpack,w
  7531  166F  00F8               	movwf	?___awtoft
  7532  1670  0871               	movf	?___ftpack+1,w
  7533  1671  00F9               	movwf	?___awtoft+1
  7534  1672  0872               	movf	?___ftpack+2,w
  7535  1673  00FA               	movwf	?___awtoft+2
  7536  1674  0008               	return
  7537  1675                     __end_of___awtoft:	
  7538                           
  7539                           	psect	text37
  7540  0BA4                     __ptext37:	
  7541 ;; *************** function ___ftpack *****************
  7542 ;; Defined at:
  7543 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;  arg             3    0[COMMON] unsigned um
  7546 ;;  exp             1    3[COMMON] unsigned char 
  7547 ;;  sign            1    4[COMMON] unsigned char 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;		None
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  3    0[COMMON] float 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7559 ;;      Params:         5       0       0       0       0
  7560 ;;      Locals:         0       0       0       0       0
  7561 ;;      Temps:          3       0       0       0       0
  7562 ;;      Totals:         8       0       0       0       0
  7563 ;;Total ram usage:        8 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; This function calls:
  7566 ;;		Nothing
  7567 ;; This function is called by:
  7568 ;;		___awtoft
  7569 ;;		___ftadd
  7570 ;;		___ftdiv
  7571 ;;		___ftmul
  7572 ;;		___lltoft
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function ___ftpack
  7578  0BA4                     ___ftpack:	
  7579                           
  7580                           ;incstack = 0
  7581 ;; hardware stack exceeded
  7582                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7583  0BA4  0873               	movf	___ftpack@exp,w
  7584  0BA5  1903               	btfsc	3,2
  7585  0BA6  2BAC               	goto	i1l1939
  7586  0BA7  0872               	movf	___ftpack@arg+2,w
  7587  0BA8  0471               	iorwf	___ftpack@arg+1,w
  7588  0BA9  0470               	iorwf	___ftpack@arg,w
  7589  0BAA  1D03               	skipz
  7590  0BAB  2BBF               	goto	i1l1945
  7591  0BAC                     i1l1939:	
  7592  0BAC  3000               	movlw	0
  7593  0BAD  00F0               	movwf	?___ftpack
  7594  0BAE  3000               	movlw	0
  7595  0BAF  00F1               	movwf	?___ftpack+1
  7596  0BB0  3000               	movlw	0
  7597  0BB1  00F2               	movwf	?___ftpack+2
  7598  0BB2  0008               	return
  7599  0BB3                     i1l1943:	
  7600  0BB3  3001               	movlw	1
  7601  0BB4  00F5               	movwf	??___ftpack
  7602  0BB5  0875               	movf	??___ftpack,w
  7603  0BB6  07F3               	addwf	___ftpack@exp,f
  7604  0BB7  3001               	movlw	1
  7605  0BB8                     u193_25:	
  7606  0BB8  1003               	clrc
  7607  0BB9  0CF2               	rrf	___ftpack@arg+2,f
  7608  0BBA  0CF1               	rrf	___ftpack@arg+1,f
  7609  0BBB  0CF0               	rrf	___ftpack@arg,f
  7610  0BBC  3EFF               	addlw	-1
  7611  0BBD  1D03               	skipz
  7612  0BBE  2BB8               	goto	u193_25
  7613  0BBF                     i1l1945:	
  7614  0BBF  30FE               	movlw	254
  7615  0BC0  0572               	andwf	___ftpack@arg+2,w
  7616  0BC1  1903               	btfsc	3,2
  7617  0BC2  2BDA               	goto	i1l536
  7618  0BC3  2BB3               	goto	i1l1943
  7619  0BC4                     i1l1947:	
  7620  0BC4  3001               	movlw	1
  7621  0BC5  00F5               	movwf	??___ftpack
  7622  0BC6  0875               	movf	??___ftpack,w
  7623  0BC7  07F3               	addwf	___ftpack@exp,f
  7624  0BC8  3001               	movlw	1
  7625  0BC9  07F0               	addwf	___ftpack@arg,f
  7626  0BCA  3000               	movlw	0
  7627  0BCB  1803               	skipnc
  7628  0BCC  3001               	movlw	1
  7629  0BCD  07F1               	addwf	___ftpack@arg+1,f
  7630  0BCE  3000               	movlw	0
  7631  0BCF  1803               	skipnc
  7632  0BD0  3001               	movlw	1
  7633  0BD1  07F2               	addwf	___ftpack@arg+2,f
  7634  0BD2  3001               	movlw	1
  7635  0BD3                     u195_25:	
  7636  0BD3  1003               	clrc
  7637  0BD4  0CF2               	rrf	___ftpack@arg+2,f
  7638  0BD5  0CF1               	rrf	___ftpack@arg+1,f
  7639  0BD6  0CF0               	rrf	___ftpack@arg,f
  7640  0BD7  3EFF               	addlw	-1
  7641  0BD8  1D03               	skipz
  7642  0BD9  2BD3               	goto	u195_25
  7643  0BDA                     i1l536:	
  7644  0BDA  30FF               	movlw	255
  7645  0BDB  0572               	andwf	___ftpack@arg+2,w
  7646  0BDC  1903               	btfsc	3,2
  7647  0BDD  2BE9               	goto	i1l1955
  7648  0BDE  2BC4               	goto	i1l1947
  7649  0BDF                     i1l1953:	
  7650  0BDF  3001               	movlw	1
  7651  0BE0  02F3               	subwf	___ftpack@exp,f
  7652  0BE1  3001               	movlw	1
  7653  0BE2                     u197_25:	
  7654  0BE2  1003               	clrc
  7655  0BE3  0DF0               	rlf	___ftpack@arg,f
  7656  0BE4  0DF1               	rlf	___ftpack@arg+1,f
  7657  0BE5  0DF2               	rlf	___ftpack@arg+2,f
  7658  0BE6  3EFF               	addlw	-1
  7659  0BE7  1D03               	skipz
  7660  0BE8  2BE2               	goto	u197_25
  7661  0BE9                     i1l1955:	
  7662  0BE9  1FF1               	btfss	___ftpack@arg+1,7
  7663  0BEA  2BDF               	goto	i1l1953
  7664  0BEB  1873               	btfsc	___ftpack@exp,0
  7665  0BEC  2BF3               	goto	i1l542
  7666  0BED  30FF               	movlw	255
  7667  0BEE  05F0               	andwf	___ftpack@arg,f
  7668  0BEF  307F               	movlw	127
  7669  0BF0  05F1               	andwf	___ftpack@arg+1,f
  7670  0BF1  30FF               	movlw	255
  7671  0BF2  05F2               	andwf	___ftpack@arg+2,f
  7672  0BF3                     i1l542:	
  7673  0BF3  1003               	clrc
  7674  0BF4  0CF3               	rrf	___ftpack@exp,f
  7675  0BF5  0873               	movf	___ftpack@exp,w
  7676  0BF6  00F5               	movwf	??___ftpack
  7677  0BF7  01F6               	clrf	??___ftpack+1
  7678  0BF8  01F7               	clrf	??___ftpack+2
  7679  0BF9  3010               	movlw	16
  7680  0BFA                     u200_25:	
  7681  0BFA  1003               	clrc
  7682  0BFB  0DF5               	rlf	??___ftpack,f
  7683  0BFC  0DF6               	rlf	??___ftpack+1,f
  7684  0BFD  0DF7               	rlf	??___ftpack+2,f
  7685  0BFE  3EFF               	addlw	-1
  7686  0BFF  1D03               	skipz
  7687  0C00  2BFA               	goto	u200_25
  7688  0C01  0875               	movf	??___ftpack,w
  7689  0C02  04F0               	iorwf	___ftpack@arg,f
  7690  0C03  0876               	movf	??___ftpack+1,w
  7691  0C04  04F1               	iorwf	___ftpack@arg+1,f
  7692  0C05  0877               	movf	??___ftpack+2,w
  7693  0C06  04F2               	iorwf	___ftpack@arg+2,f
  7694  0C07  0874               	movf	___ftpack@sign,w
  7695  0C08  1903               	btfsc	3,2
  7696  0C09  0008               	return
  7697  0C0A  17F2               	bsf	___ftpack@arg+2,7
  7698  0C0B  0008               	return
  7699  0C0C                     __end_of___ftpack:	
  7700                           
  7701                           	psect	text38
  7702  1601                     __ptext38:	
  7703 ;; *************** function _USARTReceiveChar *****************
  7704 ;; Defined at:
  7705 ;;		line 119 in file "main.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;		None
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  USARTData       1    4[COMMON] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      unsigned char 
  7712 ;; Registers used:
  7713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7719 ;;      Params:         0       0       0       0       0
  7720 ;;      Locals:         1       0       0       0       0
  7721 ;;      Temps:          1       0       0       0       0
  7722 ;;      Totals:         2       0       0       0       0
  7723 ;;Total ram usage:        2 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    2
  7726 ;; This function calls:
  7727 ;;		i1_USARTWriteString
  7728 ;; This function is called by:
  7729 ;;		_ISR
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           
  7734                           ;psect for function _USARTReceiveChar
  7735  1601                     _USARTReceiveChar:	
  7736                           
  7737                           ;main.c: 120: unsigned char USARTData;
  7738                           ;main.c: 122: if (!OERR)
  7739                           
  7740                           ;incstack = 0
  7741 ;; hardware stack exceeded
  7742                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7743  1601  1283               	bcf	3,5	;RP0=0, select bank0
  7744  1602  1303               	bcf	3,6	;RP1=0, select bank0
  7745  1603  1898               	btfsc	24,1	;volatile
  7746  1604  2E0A               	goto	i1l2593
  7747                           
  7748                           ;main.c: 123: {
  7749                           ;main.c: 124: USARTData = RCREG;
  7750  1605  081A               	movf	26,w	;volatile
  7751  1606  00F3               	movwf	??_USARTReceiveChar
  7752  1607  0873               	movf	??_USARTReceiveChar,w
  7753  1608  00F4               	movwf	USARTReceiveChar@USARTData
  7754  1609  2E19               	goto	i1l2601
  7755  160A                     i1l2593:	
  7756                           ;main.c: 126: } else {
  7757                           
  7758                           ;main.c: 125: PIR1bits.RCIF = 0;
  7759                           
  7760                           
  7761                           ;main.c: 127: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7762  160A  3033               	movlw	low (STR_1-__stringbase)
  7763  160B  00F1               	movwf	i1USARTWriteString@str
  7764  160C  3080               	movlw	128
  7765  160D  00F2               	movwf	i1USARTWriteString@str+1
  7766  160E  160A  118A  2675   	fcall	i1_USARTWriteString
  7767                           
  7768                           ;main.c: 129: RCSTAbits.CREN = 0;
  7769  1611  1283               	bcf	3,5	;RP0=0, select bank0
  7770  1612  1303               	bcf	3,6	;RP1=0, select bank0
  7771  1613  1218               	bcf	24,4	;volatile
  7772                           
  7773                           ;main.c: 130: USARTData = RCREG;
  7774  1614  081A               	movf	26,w	;volatile
  7775  1615  00F3               	movwf	??_USARTReceiveChar
  7776  1616  0873               	movf	??_USARTReceiveChar,w
  7777  1617  00F4               	movwf	USARTReceiveChar@USARTData
  7778                           
  7779                           ;main.c: 131: RCSTAbits.CREN = 1;
  7780  1618  1618               	bsf	24,4	;volatile
  7781  1619                     i1l2601:	
  7782                           
  7783                           ;main.c: 132: PIR1bits.RCIF = 0;
  7784  1619  128C               	bcf	12,5	;volatile
  7785                           
  7786                           ;main.c: 133: }
  7787                           ;main.c: 135: return (USARTData);
  7788  161A  0874               	movf	USARTReceiveChar@USARTData,w
  7789  161B  0008               	return
  7790  161C                     __end_of_USARTReceiveChar:	
  7791                           
  7792                           	psect	text39
  7793  1675                     __ptext39:	
  7794 ;; *************** function i1_USARTWriteString *****************
  7795 ;; Defined at:
  7796 ;;		line 86 in file "main.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  str             2    1[COMMON] PTR const unsigned char 
  7799 ;;		 -> ftoa@buf(17), STR_14(2), STR_13(2), STR_11(2), 
  7800 ;;		 -> STR_10(2), STR_7(3), STR_3(3), STR_1(40), 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;		None
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7812 ;;      Params:         2       0       0       0       0
  7813 ;;      Locals:         0       0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0
  7815 ;;      Totals:         2       0       0       0       0
  7816 ;;Total ram usage:        2 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    1
  7819 ;; This function calls:
  7820 ;;		i1_USARTWriteChar
  7821 ;; This function is called by:
  7822 ;;		_USARTReceiveChar
  7823 ;;		_ISR
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function i1_USARTWriteString
  7829  1675                     i1_USARTWriteString:	
  7830  1675                     i1l2547:	
  7831                           ;main.c: 88: while (*str != '\0') {
  7832                           
  7833                           ;incstack = 0
  7834 ;; hardware stack exceeded
  7835                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7836                           
  7837  1675  0872               	movf	i1USARTWriteString@str+1,w
  7838  1676  1283               	bcf	3,5	;RP0=0, select bank0
  7839  1677  1303               	bcf	3,6	;RP1=0, select bank0
  7840  1678  00FF               	movwf	127
  7841  1679  0871               	movf	i1USARTWriteString@str,w
  7842  167A  0084               	movwf	4
  7843  167B  120A  158A  2000  160A  118A  	fcall	stringtab
  7844  1680  3800               	iorlw	0
  7845  1681  1903               	btfsc	3,2
  7846  1682  0008               	return
  7847                           
  7848                           ;main.c: 90: USARTWriteChar(*str);
  7849  1683  0872               	movf	i1USARTWriteString@str+1,w
  7850  1684  1283               	bcf	3,5	;RP0=0, select bank0
  7851  1685  1303               	bcf	3,6	;RP1=0, select bank0
  7852  1686  00FF               	movwf	127
  7853  1687  0871               	movf	i1USARTWriteString@str,w
  7854  1688  0084               	movwf	4
  7855  1689  120A  158A  2000  160A  118A  	fcall	stringtab
  7856  168E  160A  118A  2574  160A  118A  	fcall	i1_USARTWriteChar
  7857                           
  7858                           ;main.c: 91: str++;
  7859  1693  3001               	movlw	1
  7860  1694  07F1               	addwf	i1USARTWriteString@str,f
  7861  1695  1803               	skipnc
  7862  1696  0AF2               	incf	i1USARTWriteString@str+1,f
  7863  1697  2E75               	goto	i1l2547
  7864  1698                     __end_ofi1_USARTWriteString:	
  7865                           
  7866                           	psect	text40
  7867  1574                     __ptext40:	
  7868 ;; *************** function i1_USARTWriteChar *****************
  7869 ;; Defined at:
  7870 ;;		line 79 in file "main.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;  USARTData       1    wreg     unsigned char 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  USARTData       1    0[COMMON] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;		None               void
  7877 ;; Registers used:
  7878 ;;		wreg
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7884 ;;      Params:         0       0       0       0       0
  7885 ;;      Locals:         1       0       0       0       0
  7886 ;;      Temps:          0       0       0       0       0
  7887 ;;      Totals:         1       0       0       0       0
  7888 ;;Total ram usage:        1 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; This function calls:
  7891 ;;		Nothing
  7892 ;; This function is called by:
  7893 ;;		_ISR
  7894 ;;		i1_USARTWriteString
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           
  7899                           ;psect for function i1_USARTWriteChar
  7900  1574                     i1_USARTWriteChar:	
  7901                           
  7902                           ;incstack = 0
  7903 ;; hardware stack exceeded
  7904                           ; Regs used in i1_USARTWriteChar: [wreg]
  7905                           ;i1USARTWriteChar@USARTData stored from wreg
  7906  1574  00F0               	movwf	i1USARTWriteChar@USARTData
  7907  1575                     i1l92:	
  7908                           ;main.c: 80: while (!PIR1bits.TXIF);
  7909                           
  7910  1575  1283               	bcf	3,5	;RP0=0, select bank0
  7911  1576  1303               	bcf	3,6	;RP1=0, select bank0
  7912  1577  1E0C               	btfss	12,4	;volatile
  7913  1578  2D75               	goto	i1l92
  7914                           
  7915                           ;main.c: 81: TXREG = USARTData;
  7916  1579  0870               	movf	i1USARTWriteChar@USARTData,w
  7917  157A  0099               	movwf	25	;volatile
  7918  157B  0008               	return
  7919  157C                     __end_ofi1_USARTWriteChar:	
  7920                           
  7921                           	psect	text41
  7922  094F                     __ptext41:	
  7923 ;; *************** function _FormatarValor *****************
  7924 ;; Defined at:
  7925 ;;		line 95 in file "main.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  str             1    wreg     PTR const unsigned char 
  7928 ;;		 -> ftoa@buf(17), 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  str             1   45[BANK0 ] PTR const unsigned char 
  7931 ;;		 -> ftoa@buf(17), 
  7932 ;;  aux            40    0[BANK0 ] unsigned char [40]
  7933 ;;  i               2   43[BANK0 ] int 
  7934 ;;  posicao         2   41[BANK0 ] int 
  7935 ;;  retorno         1   40[BANK0 ] PTR unsigned char 
  7936 ;;		 -> FormatarValor@aux(40), 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      PTR unsigned char 
  7939 ;; Registers used:
  7940 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7946 ;;      Params:         0       0       0       0       0
  7947 ;;      Locals:         0      46       0       0       0
  7948 ;;      Temps:          1       0       0       0       0
  7949 ;;      Totals:         1      46       0       0       0
  7950 ;;Total ram usage:       47 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_ISR
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _FormatarValor
  7961  094F                     _FormatarValor:	
  7962                           
  7963                           ;incstack = 0
  7964                           ; Regs used in _FormatarValor: [wreg-fsr0h+status,2+status,0]
  7965                           ;FormatarValor@str stored from wreg
  7966  094F  1283               	bcf	3,5	;RP0=0, select bank0
  7967  0950  1303               	bcf	3,6	;RP1=0, select bank0
  7968  0951  00CD               	movwf	FormatarValor@str
  7969                           
  7970                           ;main.c: 97: char *retorno;
  7971                           ;main.c: 98: int posicao = 0;
  7972  0952  01C9               	clrf	FormatarValor@posicao
  7973  0953  01CA               	clrf	FormatarValor@posicao+1
  7974                           
  7975                           ;main.c: 99: char aux [40];
  7976                           ;main.c: 100: int i = 0;
  7977  0954  01CB               	clrf	FormatarValor@i
  7978  0955  01CC               	clrf	FormatarValor@i+1
  7979  0956                     i1l2571:	
  7980                           ;main.c: 101: while (*str != '.') {
  7981                           
  7982  0956  084D               	movf	FormatarValor@str,w
  7983  0957  0084               	movwf	4
  7984  0958  1383               	bcf	3,7	;select IRP bank0
  7985  0959  0800               	movf	0,w
  7986  095A  3A2E               	xorlw	46
  7987  095B  1903               	btfsc	3,2
  7988  095C  2968               	goto	i1l2573
  7989                           
  7990                           ;main.c: 103: posicao++;
  7991  095D  3001               	movlw	1
  7992  095E  07C9               	addwf	FormatarValor@posicao,f
  7993  095F  1803               	skipnc
  7994  0960  0ACA               	incf	FormatarValor@posicao+1,f
  7995  0961  3000               	movlw	0
  7996  0962  07CA               	addwf	FormatarValor@posicao+1,f
  7997                           
  7998                           ;main.c: 104: str++;
  7999  0963  3001               	movlw	1
  8000  0964  00F0               	movwf	??_FormatarValor
  8001  0965  0870               	movf	??_FormatarValor,w
  8002  0966  07CD               	addwf	FormatarValor@str,f
  8003  0967  2956               	goto	i1l2571
  8004  0968                     i1l2573:	
  8005                           
  8006                           ;main.c: 105: }
  8007                           ;main.c: 107: str -= posicao;
  8008  0968  0849               	movf	FormatarValor@posicao,w
  8009  0969  02CD               	subwf	FormatarValor@str,f
  8010  096A                     i1l2581:	
  8011                           ;main.c: 109: for (; i < posicao; i++) {
  8012                           
  8013  096A  084C               	movf	FormatarValor@i+1,w
  8014  096B  3A80               	xorlw	128
  8015  096C  00F0               	movwf	??_FormatarValor
  8016  096D  084A               	movf	FormatarValor@posicao+1,w
  8017  096E  3A80               	xorlw	128
  8018  096F  0270               	subwf	??_FormatarValor,w
  8019  0970  1D03               	skipz
  8020  0971  2974               	goto	u324_25
  8021  0972  0849               	movf	FormatarValor@posicao,w
  8022  0973  024B               	subwf	FormatarValor@i,w
  8023  0974                     u324_25:	
  8024  0974  1803               	btfsc	3,0
  8025  0975  298D               	goto	i1l2583
  8026                           
  8027                           ;main.c: 110: aux[i] = *str;
  8028  0976  1283               	bcf	3,5	;RP0=0, select bank0
  8029  0977  1303               	bcf	3,6	;RP1=0, select bank0
  8030  0978  084D               	movf	FormatarValor@str,w
  8031  0979  0084               	movwf	4
  8032  097A  1383               	bcf	3,7	;select IRP bank0
  8033  097B  0800               	movf	0,w
  8034  097C  00F0               	movwf	??_FormatarValor
  8035  097D  084B               	movf	FormatarValor@i,w
  8036  097E  3E20               	addlw	FormatarValor@aux& (0+255)
  8037  097F  0084               	movwf	4
  8038  0980  0870               	movf	??_FormatarValor,w
  8039  0981  0080               	movwf	0
  8040                           
  8041                           ;main.c: 111: str++;
  8042  0982  3001               	movlw	1
  8043  0983  00F0               	movwf	??_FormatarValor
  8044  0984  0870               	movf	??_FormatarValor,w
  8045  0985  07CD               	addwf	FormatarValor@str,f
  8046  0986  3001               	movlw	1
  8047  0987  07CB               	addwf	FormatarValor@i,f
  8048  0988  1803               	skipnc
  8049  0989  0ACC               	incf	FormatarValor@i+1,f
  8050  098A  3000               	movlw	0
  8051  098B  07CC               	addwf	FormatarValor@i+1,f
  8052  098C  296A               	goto	i1l2581
  8053  098D                     i1l2583:	
  8054                           
  8055                           ;main.c: 112: }
  8056                           ;main.c: 113: retorno = &aux;
  8057  098D  3020               	movlw	FormatarValor@aux& (0+255)
  8058  098E  00F0               	movwf	??_FormatarValor
  8059  098F  0870               	movf	??_FormatarValor,w
  8060  0990  1283               	bcf	3,5	;RP0=0, select bank0
  8061  0991  1303               	bcf	3,6	;RP1=0, select bank0
  8062  0992  00C8               	movwf	FormatarValor@retorno
  8063                           
  8064                           ;main.c: 114: return retorno;
  8065  0993  0848               	movf	FormatarValor@retorno,w
  8066  0994  0008               	return
  8067  0995                     __end_of_FormatarValor:	
  8068  007E                     btemp	set	126	;btemp
  8069  007E                     wtemp	set	126
  8070  007E                     wtemp0	set	126
  8071  0080                     wtemp1	set	128
  8072  0082                     wtemp2	set	130
  8073  0084                     wtemp3	set	132
  8074  0086                     wtemp4	set	134
  8075  0088                     wtemp5	set	136
  8076  007F                     wtemp6	set	127
  8077  007E                     ttemp	set	126
  8078  007E                     ttemp0	set	126
  8079  0081                     ttemp1	set	129
  8080  0084                     ttemp2	set	132
  8081  0087                     ttemp3	set	135
  8082  007F                     ttemp4	set	127
  8083  007E                     ltemp	set	126
  8084  007E                     ltemp0	set	126
  8085  0082                     ltemp1	set	130
  8086  0086                     ltemp2	set	134
  8087  0080                     ltemp3	set	128


Data Sizes:
    Strings     95
    Constant    50
    Data        20
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      77
    BANK1            80     37      60
    BANK3            96     30      46
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK1[2]), ISR@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_15(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S692$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_12(CODE[16]), STR_9(CODE[2]), STR_8(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[4]), STR_2(CODE[4]), ISR@aux(BANK1[16]), 
		 -> FormatarValor@aux(BANK0[40]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@result	PTR unsigned char  size(1) Largest target is 16
		 -> ISR@aux(BANK1[16]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__FormatarValor	PTR unsigned char  size(1) Largest target is 40
		 -> FormatarValor@aux(BANK0[40]), 

    FormatarValor@retorno	PTR unsigned char  size(1) Largest target is 40
		 -> FormatarValor@aux(BANK0[40]), 

    FormatarValor@str	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> ftoa@buf(BANK1[17]), STR_14(CODE[2]), STR_13(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_7(CODE[3]), STR_3(CODE[3]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _USARTReceiveChar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    i1_lcd_escreve_string->_FormatarValor
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_USARTInit
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTInit->___aldiv
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble
    _ativar->_ADCRead
    _ativar->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6624
                             _ativar
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    5864
                                             27 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                          _USARTInit
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    2805
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    2285
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1    1390
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0    1124
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                           12     6      6    1102
                                             15 BANK3     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                              0 BANK3     15     7      8
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     833
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     833
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0     124
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ativar                                               3     3      0     760
                                              3 BANK3      3     3      0
                            _ADCRead
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _USARTWriteString                                     2     0      2     544
                                              1 BANK3      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      31
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2     216
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 45    45      0   23706
                                             50 BANK0      8     8      0
                                              0 BANK1     37    37      0
                      _FormatarValor
                   _USARTReceiveChar
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                   i1_USARTWriteChar
                 i1_USARTWriteString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2    1168
                                             12 COMMON     2     0      2
                      _FormatarValor (ARG)
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     889
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     587
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   12054
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3181
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2623
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2306
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     273
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteString                                   2     0      2     249
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _FormatarValor                                       47    47      0     272
                                              0 COMMON     1     1      0
                                              0 BANK0     46    46      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ativar
     _ADCRead
     _USARTWriteString
       _USARTWriteChar
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTInit
       ___aldiv
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _FormatarValor
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   i1_USARTWriteChar
   i1_USARTWriteString
     i1_USARTWriteChar
   i1_lcd_escreve_string
     _FormatarValor (ARG)
     i1_lcd_putc (ARG)
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1E      2E       9       47.9%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     25      3C       7       75.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C5      12        0.0%
ABS                  0      0      C5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 10 20:42:21 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l92 15A8  
                           fsr 0004            ___wmul@multiplicand 0072                   ___ftadd@exp1 0026  
                 ___ftadd@exp2 0025                   ___ftadd@sign 0024                            l121 175E  
                          l155 1591                            l190 17AB                            l430 0E11  
                          l189 17A8              i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000  
                          _ISR 0052                            fsr0 0004                __end_of_ADCInit 15E7  
              __end_of_ADCRead 1761                            indf 0000                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 08D4                    lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                         ISR@i 00B8                   ___ftdiv@sign 003F                           l3021 1644  
                         l3023 1645                           l3041 09C3                           l3033 0999  
                         l3037 09AD                           l3045 09CE                           l3039 09B8  
                         l3065 0E32                           l3057 0E22                           l3139 1761  
                         l3083 0E85                           l3075 0E6A                           l3067 0E42  
                         l3155 08A3                           l3263 0C3A                           l3079 0E77  
                         l3095 0C90                           l3175 0B7F                           l3167 0B64  
                         l3259 0C2B                           STR_1 0842                           STR_2 0889  
                         STR_3 0894                           STR_4 0885                           STR_5 0897  
                         STR_6 088D                           STR_7 0891                           STR_8 0885  
                         STR_9 0897                           u4307 091F                           u4317 0934  
                         u4237 0D24                           u4327 0949                           u4247 0D37  
                         u4337 179C                           u4257 0D47                           u4347 0A7D  
                         u4267 0D66                           u4357 0C18                           u4277 09A7  
                         u4367 0C54                           u4287 0B58                           u4377 0C6E  
                         u3825 0E36                           u3905 0C87                           u4297 0B70  
                         u4387 1758                           u3915 0C9B                           u3765 17B4  
                         u3845 0E44                           u3855 0E59                           u3865 0E6B  
                         i1l92 1575                           _OERR 00C1                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 15B3                           _main 158C                           _ftoa 0F46  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E               __end_of_DESLIGAR 083D  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                          ??_ISR 0052  
             __end_of_LCDClear 094F                   ___fttol@exp1 003D                   ___fttol@lval 0039  
   __end_of_lcd_escreve_string 08D4                  _FormatarValor 094F                __end_of___aldiv 0E8E  
                        ?_main 0070                          ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A  
              __end_of___ftadd 072D                          STR_10 0899                          STR_11 089D  
                        STR_12 086A                          STR_13 089B                          STR_14 089F  
                        STR_15 087A                  __CFG_WDTE$OFF 0000      __size_ofi1_USARTWriteChar 0008  
              __end_of___ftdiv 0F46                __end_of___ftneg 1584                __end_of___lldiv 0B3E  
              __end_of___ftmul 0800                __end_of___llmod 0A2A                __end_of___ftsub 1638  
              __end_of___fttol 0DFF                          _LIGAR 083F                          i1l142 03DE  
                        i1l190 171C                          i1l272 04D5                          i1l269 04B7  
                        i1l189 1719                          i1l542 0BF3                          i1l375 16A2  
                        i1l536 0BDA                          i1l565 06CE                          _RCREG 001A  
                        _SPBRG 0099            i1lcd_envia_nibble@n 0071                          _TRISA 0085  
                        _TXREG 0019                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
         i1_lcd_escreve_string 16BB                  ___awtoft@sign 007D                __end_of_dpowers 0838  
              __end_of_isdigit 15A5                  ___ftpack@sign 0074                  _countInferior 0061  
                        ftoa@f 0044                          ftoa@l 004D                          pclath 000A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080             __size_of_USARTInit 0070                ?_USARTWriteChar 0070  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __end_of_sprintf 0626               i1_lcd_envia_byte 1709  
              __initialization 0015                   i1_lcd_gotoxy 15E7                   __end_of_main 1597  
                 __end_of_ftoa 1000                  _countSuperior 0063                 ?_FormatarValor 0070  
                  i1lcd_putc@c 007B                      ??_ADCInit 0190                      ??_ADCRead 0192  
    __size_of_lcd_envia_nibble 0059                         ??_main 01AE                         ??_ftoa 0048  
                ___fttol@sign1 0038             i1_USARTWriteString 1675                         ISR@buf 00B0  
                       ISR@aux 00A0                         ISR@per 00C4                         ISR@pre 00B3  
      USARTWriteChar@USARTData 0190          ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070  
                    ADCRead@ch 0190               ___llmod@dividend 0024                         _ADRESH 001E  
                       _ADRESL 009E               __end_of___awtoft 1675               __end_of___ftpack 0C0C  
          ?i1_USARTWriteString 0071               __end_of___lltoft 1709                         i1l2001 15A3  
                       i1l2111 06E0                         i1l2007 169A                         i1l2105 06BE  
                       i1l2115 06F2                         i1l2107 06CA                         i1l2125 0715  
                       i1l2135 0AF0                         i1l2065 064F                         i1l2145 0B28  
                       i1l2137 0B00                         i1l2161 09F6                         i1l2313 0426  
                       i1l2321 0464                         i1l2411 0AD1                         i1l2075 0665  
                       i1l2331 0476                         i1l2307 0411                         u200_25 0BFA  
                       i1l2093 0694                         i1l2069 0656                         i1l2149 0B35  
                       i1l2165 0A14                         i1l2333 04B2                         i1l2181 15F1  
                       i1l2407 0AAA                         i1l2095 06A0                         i1l2087 067F  
                       i1l2511 0DBD                         i1l2159 09E6                         i1l2335 04B9  
                       i1l2183 15F2                         i1l2601 1619                         i1l2097 06A5  
                       i1l2521 0DE5                         i1l2513 0DCD                         i1l2169 0A21  
                       i1l2345 04E7                         i1l2451 07AA                         i1l2435 075B  
                       i1l2099 06A9                         i1l2523 0DE8                         i1l2371 0563  
                       i1l2355 0509                         i1l2339 04BE                         i1l2429 0745  
                       i1l2381 05A2                         i1l2463 07D2                         i1l2447 079A  
                       i1l2527 0DF6                         i1l2519 0DDA                         i1l2535 16E2  
                       i1l2375 057D                         i1l2367 054B                         i1l2359 050F  
                       i1l2551 08D6                         i1l2537 16F4                         i1l2617 0F7F  
                       i1l2571 0956                         i1l2547 1675                         i1l2459 07C2  
                       i1l2395 0612                         i1l2379 059E                         i1l2555 08E8  
                       i1l2563 0903                         i1l2811 01EE                         i1l2581 096A  
                       i1l2573 0968                         i1l2709 165E                         i1l2725 0EBC  
                       i1l2493 0D8B                         i1l2389 05B8                         i1l2397 03F1  
                       i1l2557 08F1                         i1l2813 020D                         i1l2583 098D  
                       i1l1943 0BB3                         i1l2719 0EA6                         i1l2399 0621  
                       i1l2559 08FA                         i1l2593 160A                         i1l1953 0BDF  
                       i1l1945 0BBF                         i1l2761 16BB                         i1l2817 021E  
                       i1l1955 0BE9                         i1l1947 0BC4                         i1l1939 0BAC  
                       i1l2747 0F20                         i1l2739 0F01                         i1l2851 033C  
                       i1l2843 031C                         u203_25 1723                         i1l2881 03C9  
                       i1l2873 03A1                         i1l2865 0374                         i1l2859 035C  
                       i1l2877 03B3                         u301_25 07AB                         u302_25 07B3  
                       u230_25 0680                         u311_25 0D92                         u320_25 16E7  
                       u208_25 16A3                         u233_25 0695                         u209_25 16AA  
                       u306_25 07D3                         u314_25 0DBE                         u250_25 0B29  
                       u307_25 07DB                         u324_25 0974                         u236_25 06AA  
                       u341_20 0068                         u333_25 0ECE                         u317_25 0DDC  
                       u253_25 09EA                         u334_25 0EE0                         u246_25 0AF4  
                       u335_25 0F02                         u239_25 06BF                         u255_25 0A04  
                       u336_25 0F13                         u248_25 0B02                         u256_25 0A15  
                       u280_25 0541                         u440_27 08E2                         u193_25 0BB8  
                       u337_25 0F21                         u249_25 0B17                         u345_25 0327  
                       u441_27 170F                         u282_25 055A                         u442_27 17FA  
                       u291_21 0A9D                         u291_22 0A9E                         u291_23 0AA3  
                       u291_24 0AA4                         u195_25 0BD3                         u283_25 0574  
                       u347_25 0347                         u284_25 058E                         u293_21 0AC4  
                       u293_22 0AC5                         u293_23 0ACA                         u293_24 0ACB  
                       u197_25 0BE2                         u287_25 05C3                         u279_25 0512  
                       u439_27 0364                         u288_25 061E                         u297_25 0767  
                       u298_25 0779                  USARTInit@Mode 01A3      i1USARTWriteChar@USARTData 0070  
       __size_of_init_lcd_4bit 0066               __end_of_lcd_putc 09DC                         ___ftge 0A83  
                    ??___aldiv 0198                         ___wmul 1698                      ??___ftadd 0020  
                    ??___ftdiv 0036                      ??___ftneg 0073                      ??___lldiv 0078  
                    ??___ftmul 0026                      ??___llmod 0028                      ??___ftsub 007E  
                    ??___fttol 0034           ??i1_USARTWriteString 0073                         _ativar 0C0C  
     __end_of_USARTWriteString 1792               ??_lcd_envia_byte 0193              __end_of_USARTInit 0CE6  
                       ftoa@cp 0051          ___ftmul@f3_as_product 002B                      ??_isdigit 0070  
                       saved_w 007E          i1lcd_escreve_string@y 007C                      ??_sprintf 0033  
   __end_ofi1_lcd_envia_nibble 1800              ?_USARTReceiveChar 0070                      ?_LCDClear 0070  
      __end_of__initialization 004E             ??_USARTReceiveChar 0073                     ___ftadd@f1 0078  
                   ___ftadd@f2 007B                     ___ftge@ff1 0070                     ___ftge@ff2 0073  
                   ___ftdiv@f1 0033                     ___ftdiv@f2 0030                     ___ftdiv@f3 003B  
                __end_of_LIGAR 0840                     ___ftneg@f1 0070                     ___awtoft@c 0078  
                   ___ftmul@f1 0020                     ___ftmul@f2 0023                     ___ftsub@f1 002A  
                   ___ftsub@f2 0027                     ___fttol@f1 0030                 __pcstackCOMMON 0070  
                 __pidataBANK0 08A1                   __pidataBANK1 1572                   __pidataBANK3 15B3  
              ??_FormatarValor 0070            __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078  
             i1_USARTWriteChar 1574                  _init_lcd_4bit 0B3E         ??i1_lcd_escreve_string 007E  
            lcd_gotoxy@address 0198                   sprintf@width 003F                     __pbssBANK0 005A  
                   __pbssBANK1 00C5                     ??_LCDClear 0195                      ISR@input2 00C0  
                    ISR@preint 00B6                      ISR@result 00BA                      ISR@status 00B1  
    USARTReceiveChar@USARTData 0074                     __pmaintext 158C                        ?___ftge 0070  
                      ?___wmul 0070                     __pintentry 0004                     _flag_Start 00C7  
                      ?_ativar 0070                        _ADCInit 15D4                        _ADCRead 1734  
                    ?___awtoft 0078                      ?___ftpack 0070               _lcd_envia_nibble 0A2A  
                    ?___lltoft 0078                 ?_init_lcd_4bit 0070                 ISR@recebimento 00C3  
                   _lcd_gotoxy 1638       __end_ofi1_lcd_envia_byte 1734               ??_USARTWriteChar 0190  
           _lcd_escreve_string 08A3                      ?_lcd_putc 0070                     __stringtab 0800  
          ?_lcd_escreve_string 019C                        _Display 005A                      _ADCResult 00C5  
                   _inicialize 0CE6                        ___aldiv 0DFF                __size_of___ftge 005D  
        i1USARTWriteString@str 0071                        ___ftadd 0626                        ___ftdiv 0E8E  
                      ___ftneg 157C                        ___lldiv 0AE0                __size_of___wmul 0023  
                      ___ftmul 072D                        ___llmod 09DC                        ___ftsub 161C  
                      ___fttol 0D71                __size_of_ativar 006A                     ??___awtoft 007B  
                   ??___ftpack 0075                        _flag_ch 00DA                        _flag_an 006B  
                   ??___lltoft 007C                        __ptext1 0CE6                        __ptext2 08A3  
                      __ptext3 0995                        __ptext4 1638                        __ptext5 0B3E  
                      __ptext6 0C76                        __ptext7 0DFF                        __ptext8 090F  
                      __ptext9 1792           ??_lcd_escreve_string 019E                   __size_of_ISR 0398  
                      _dpowers 0810                        _isdigit 1597               ___aldiv@dividend 0194  
              lcd_envia_byte@n 0192                   ??i1_lcd_putc 0079                     _recipiente 0069  
                      _sprintf 03EA                        clrloop0 1585                     ??_lcd_putc 0199  
         end_of_initialization 004E                        ftoa@buf 00C9                        ftoa@rem 0049  
      i1lcd_envia_byte@address 0074                ___lldiv@divisor 0070                ___lldiv@counter 007D  
                    _RCSTAbits 0018               ___aldiv@quotient 019B             __end_ofi1_lcd_putc 090F  
              ??_init_lcd_4bit 0195              ?_USARTWriteString 0191                      _PORTAbits 0005  
                    _PORTBbits 0006                      _PORTCbits 0007                      _PORTDbits 0008  
           ??_USARTWriteString 0193               FormatarValor@aux 0020               FormatarValor@str 004D  
                    _USARTInit 0C76                      _TRISBbits 0086                      _TRISCbits 0087  
                    _TRISDbits 0088                    ?_lcd_gotoxy 0195                _LCD_INIT_STRING 0838  
                  ___ftdiv@exp 003E       __end_ofi1_USARTWriteChar 157C                      _TXSTAbits 0098  
            __size_of_LCDClear 0040                    ?_inicialize 0070                    ___ftmul@exp 002A  
           i1_lcd_envia_nibble 17C7      __size_of_USARTReceiveChar 001B                 __end_of___ftge 0AE0  
  __size_ofi1_USARTWriteString 0023                    USARTInit@BR 01A9                 __end_of___wmul 16BB  
          ?i1_lcd_envia_nibble 0070                 __end_of_ativar 0C76                  _nivelInferior 0065  
          start_initialization 0015                     ?_USARTInit 019F                    __end_of_ISR 03EA  
                   ftoa@status 0047                  i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075  
         ??i1_lcd_envia_nibble 0070       __end_of_lcd_envia_nibble 0A83          lcd_envia_byte@address 0194  
              ___llmod@divisor 0020                ___llmod@counter 0029                  _nivelSuperior 0067  
                     ??___ftge 0076            __size_of_lcd_gotoxy 001C                       ??___wmul 0074  
                   init_fetch0 15C3                       ??_ativar 0193                    __pdataBANK0 006B  
                  __pdataBANK1 00DA                    __pdataBANK3 01AE          __end_of_FormatarValor 0995  
                     ?_ADCInit 0070                       ?_ADCRead 0190            __end_of_LIGAR_BOMBA 0841  
          __end_of_LIGAR_MOTOR 0842        __end_of_LCD_INIT_STRING 083C              __size_of___awtoft 0021  
            __size_of___ftpack 0068              __size_of___lltoft 002B                      ___latbits 0002  
                __pcstackBANK0 0020                  __pcstackBANK1 00A0                  __pcstackBANK3 0190  
          __end_of__stringdata 08A1            __size_of_inicialize 008B  __size_ofi1_lcd_escreve_string 0023  
            ?i1_lcd_envia_byte 0072                       ISR@F1361 01AE        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                     ISR@status2 00BB  
                     ISR@input 00BD                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___aldiv 0190                       ?___ftadd 0078                       ?___ftdiv 0030  
                     ?___ftneg 0070                       ?___lldiv 0070                       ?___ftmul 0020  
                     ?___llmod 0020                       ?___ftsub 0027                       ?___fttol 0030  
                    __pstrings 0800                       ?_isdigit 0070                    ??_USARTInit 01A5  
                     _DESLIGAR 083C                 init_lcd_4bit@i 0197                       ?_sprintf 002A  
                     _LCDClear 090F                ___aldiv@divisor 0190              interrupt_function 0004  
              ___aldiv@counter 0199                 ___wmul@product 0074                      clear_ram0 1584  
                     _PIE1bits 008C              lcd_envia_nibble@n 0191                 ??i1_lcd_gotoxy 0076  
                     _PIR1bits 000C                    _LIGAR_BOMBA 0840                    _LIGAR_MOTOR 0841  
             _USARTReceiveChar 1601               __size_of_ADCInit 0013               __size_of_ADCRead 002D  
                   _ADCON0bits 001F                    __stringbase 080F                     _ADCON1bits 009F  
                  __stringdata 0842              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 019B                   ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C  
    __size_of_USARTWriteString 0031              ?i1_USARTWriteChar 0070        __size_of_USARTWriteChar 000E  
                 ??_inicialize 01AB             ??i1_USARTWriteChar 0070             __end_of_lcd_gotoxy 1654  
             __size_of___aldiv 008F               __size_of___ftadd 0107               __size_of___ftdiv 00B8  
             __size_of___ftneg 0008               __size_of___lldiv 005E               __size_of___ftmul 00D3  
             __size_of___llmod 004E               __size_of___ftsub 001C               __size_of___fttol 008E  
                     ___awtoft 1654                       ___ftpack 0BA4             __end_of__stringtab 0810  
                     ___lltoft 16DE                    _isdigit$900 0070          __end_of_init_lcd_4bit 0BA4  
             __size_of_isdigit 000E                       __ptext10 0A2A                       __ptext11 15D4  
                     __ptext20 1709                       __ptext12 0C0C                       __ptext21 17C7  
                     __ptext13 1761                       __ptext30 161C                       __ptext22 0F46  
                     __ptext14 15A5                       __ptext31 0626                       __ptext23 03EA  
                     __ptext15 1734                       __ptext40 1574                       __ptext32 157C  
                     __ptext24 1597                       __ptext16 0052                       __ptext41 094F  
                     __ptext33 072D                       __ptext25 1698                       __ptext17 16BB  
                     __ptext34 0A83                       __ptext26 09DC                       __ptext18 08D4  
                     __ptext35 0E8E                       __ptext27 0AE0                       __ptext19 15E7  
                     __ptext36 1654                       __ptext28 16DE                       __ptext37 0BA4  
                     __ptext29 0D71                       __ptext38 1601                       __ptext39 1675  
               _lcd_envia_byte 1792             __end_of_inicialize 0D71                       _lcd_putc 0995  
             __size_of_sprintf 023C                  __size_of_main 000B                  __size_of_ftoa 00BA  
            ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 0190     __end_ofi1_USARTWriteString 1698  
               FormatarValor@i 004B                     _INTCONbits 000B         __end_of_lcd_envia_byte 17C7  
         __end_ofi1_lcd_gotoxy 1601                       init_ram0 15C7                       isdigit@c 0071  
                     intlevel1 0000                      sprintf@ap 0039                      sprintf@sp 003E  
  __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074                      stringcode 080A  
 __end_ofi1_lcd_escreve_string 16DE      __size_ofi1_lcd_envia_byte 002B              USARTInit@BaudRate 019F  
               _DESLIGAR_BOMBA 083D                 _DESLIGAR_MOTOR 083E            USARTWriteString@str 0191  
         FormatarValor@retorno 0048           FormatarValor@posicao 0049                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                ?_lcd_envia_byte 0192  
                     stringdir 080A                       stringtab 0800                   ___aldiv@sign 019A  
     __end_of_USARTReceiveChar 161C               _USARTWriteString 1761         __size_of_FormatarValor 0046  
               _USARTWriteChar 15A5         __end_of_DESLIGAR_BOMBA 083E         __end_of_DESLIGAR_MOTOR 083F  
