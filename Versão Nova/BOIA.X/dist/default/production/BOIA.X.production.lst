

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Nov 08 14:32:31 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184                           
   185                           	psect	idataBANK0
   186  1583                     __pidataBANK0:	
   187                           
   188                           ;initializer for _flag_an
   189  1583  34FF               	retlw	255
   190  1584  34FF               	retlw	255
   191                           
   192                           	psect	idataBANK1
   193  1581                     __pidataBANK1:	
   194                           
   195                           ;initializer for _flag_ch
   196  1581  34FF               	retlw	255
   197  1582  34FF               	retlw	255
   198                           
   199                           	psect	idataBANK3
   200  15C4                     __pidataBANK3:	
   201                           
   202                           ;initializer for ISR@F1361
   203  15C4  3420               	retlw	32
   204  15C5  3420               	retlw	32
   205  15C6  3420               	retlw	32
   206  15C7  3420               	retlw	32
   207  15C8  3420               	retlw	32
   208  15C9  3420               	retlw	32
   209  15CA  3420               	retlw	32
   210  15CB  3420               	retlw	32
   211  15CC  3420               	retlw	32
   212  15CD  3420               	retlw	32
   213  15CE  3420               	retlw	32
   214  15CF  3420               	retlw	32
   215  15D0  3420               	retlw	32
   216  15D1  3420               	retlw	32
   217  15D2  3420               	retlw	32
   218  15D3  3420               	retlw	32
   219                           
   220                           	psect	strings
   221  0800                     __pstrings:	
   222  0800                     stringtab:	
   223  0800                     __stringtab:	
   224                           
   225                           ;	String table - string pointers are 1 byte each
   226  0800  1BFF               	btfsc	btemp+1,7
   227  0801  280A               	ljmp	stringcode
   228  0802  1383               	bcf	3,7
   229  0803  187F               	btfsc	btemp+1,0
   230  0804  1783               	bsf	3,7
   231  0805  0800               	movf	0,w
   232  0806  0A84               	incf	4,f
   233  0807  1903               	skipnz
   234  0808  0AFF               	incf	btemp+1,f
   235  0809  0008               	return
   236  080A                     stringcode:	
   237  080A                     stringdir:	
   238  080A  3008               	movlw	high stringdir
   239  080B  008A               	movwf	10
   240  080C  0804               	movf	4,w
   241  080D  0A84               	incf	4,f
   242  080E  0782               	addwf	2,f
   243  080F                     __stringbase:	
   244  080F  3400               	retlw	0
   245  0810                     __end_of__stringtab:	
   246  0810                     _dpowers:	
   247  0810  3401               	retlw	1
   248  0811  3400               	retlw	0
   249  0812  3400               	retlw	0
   250  0813  3400               	retlw	0
   251  0814  340A               	retlw	10
   252  0815  3400               	retlw	0
   253  0816  3400               	retlw	0
   254  0817  3400               	retlw	0
   255  0818  3464               	retlw	100
   256  0819  3400               	retlw	0
   257  081A  3400               	retlw	0
   258  081B  3400               	retlw	0
   259  081C  34E8               	retlw	232
   260  081D  3403               	retlw	3
   261  081E  3400               	retlw	0
   262  081F  3400               	retlw	0
   263  0820  3410               	retlw	16
   264  0821  3427               	retlw	39
   265  0822  3400               	retlw	0
   266  0823  3400               	retlw	0
   267  0824  34A0               	retlw	160
   268  0825  3486               	retlw	134
   269  0826  3401               	retlw	1
   270  0827  3400               	retlw	0
   271  0828  3440               	retlw	64
   272  0829  3442               	retlw	66
   273  082A  340F               	retlw	15
   274  082B  3400               	retlw	0
   275  082C  3480               	retlw	128
   276  082D  3496               	retlw	150
   277  082E  3498               	retlw	152
   278  082F  3400               	retlw	0
   279  0830  3400               	retlw	0
   280  0831  34E1               	retlw	225
   281  0832  34F5               	retlw	245
   282  0833  3405               	retlw	5
   283  0834  3400               	retlw	0
   284  0835  34CA               	retlw	202
   285  0836  349A               	retlw	154
   286  0837  343B               	retlw	59
   287  0838                     __end_of_dpowers:	
   288  0838                     _LCD_INIT_STRING:	
   289  0838  341C               	retlw	28
   290  0839  340C               	retlw	12
   291  083A  3401               	retlw	1
   292  083B  3406               	retlw	6
   293  083C                     __end_of_LCD_INIT_STRING:	
   294  083C                     _DESLIGAR:	
   295  083C  346C               	retlw	108
   296  083D                     __end_of_DESLIGAR:	
   297  083D                     _DESLIGAR_BOMBA:	
   298  083D  3462               	retlw	98
   299  083E                     __end_of_DESLIGAR_BOMBA:	
   300  083E                     _DESLIGAR_MOTOR:	
   301  083E  346D               	retlw	109
   302  083F                     __end_of_DESLIGAR_MOTOR:	
   303  083F                     _LIGAR:	
   304  083F  344C               	retlw	76
   305  0840                     __end_of_LIGAR:	
   306  0840                     _LIGAR_BOMBA:	
   307  0840  3442               	retlw	66
   308  0841                     __end_of_LIGAR_BOMBA:	
   309  0841                     _LIGAR_MOTOR:	
   310  0841  344D               	retlw	77
   311  0842                     __end_of_LIGAR_MOTOR:	
   312  001F                     _ADCON0bits	set	31
   313  001E                     _ADRESH	set	30
   314  000B                     _INTCONbits	set	11
   315  000C                     _PIR1bits	set	12
   316  0005                     _PORTAbits	set	5
   317  0006                     _PORTBbits	set	6
   318  0007                     _PORTCbits	set	7
   319  0008                     _PORTDbits	set	8
   320  001A                     _RCREG	set	26
   321  0018                     _RCSTAbits	set	24
   322  0019                     _TXREG	set	25
   323  00C1                     _OERR	set	193
   324  009F                     _ADCON1bits	set	159
   325  009E                     _ADRESL	set	158
   326  008C                     _PIE1bits	set	140
   327  0099                     _SPBRG	set	153
   328  0085                     _TRISA	set	133
   329  0086                     _TRISBbits	set	134
   330  0087                     _TRISCbits	set	135
   331  0088                     _TRISDbits	set	136
   332  0098                     _TXSTAbits	set	152
   333  0842                     __stringdata:	
   334  0842                     STR_1:	
   335  0842  340A               	retlw	10
   336  0843  340D               	retlw	13
   337  0844  3420               	retlw	32	;' '
   338  0845  342D               	retlw	45	;'-'
   339  0846  342D               	retlw	45	;'-'
   340  0847  342D               	retlw	45	;'-'
   341  0848  342D               	retlw	45	;'-'
   342  0849  342D               	retlw	45	;'-'
   343  084A  342D               	retlw	45	;'-'
   344  084B  342D               	retlw	45	;'-'
   345  084C  3420               	retlw	32	;' '
   346  084D  3445               	retlw	69	;'E'
   347  084E  3453               	retlw	83	;'S'
   348  084F  3454               	retlw	84	;'T'
   349  0850  344F               	retlw	79	;'O'
   350  0851  3455               	retlw	85	;'U'
   351  0852  3452               	retlw	82	;'R'
   352  0853  344F               	retlw	79	;'O'
   353  0854  3420               	retlw	32	;' '
   354  0855  3444               	retlw	68	;'D'
   355  0856  3445               	retlw	69	;'E'
   356  0857  3420               	retlw	32	;' '
   357  0858  3450               	retlw	80	;'P'
   358  0859  3449               	retlw	73	;'I'
   359  085A  344C               	retlw	76	;'L'
   360  085B  3448               	retlw	72	;'H'
   361  085C  3441               	retlw	65	;'A'
   362  085D  3420               	retlw	32	;' '
   363  085E  342D               	retlw	45	;'-'
   364  085F  342D               	retlw	45	;'-'
   365  0860  342D               	retlw	45	;'-'
   366  0861  342D               	retlw	45	;'-'
   367  0862  342D               	retlw	45	;'-'
   368  0863  342D               	retlw	45	;'-'
   369  0864  342D               	retlw	45	;'-'
   370  0865  3420               	retlw	32	;' '
   371  0866  340A               	retlw	10
   372  0867  340D               	retlw	13
   373  0868  3420               	retlw	32	;' '
   374  0869  3400               	retlw	0
   375  086A                     STR_10:	
   376  086A  340C               	retlw	12
   377  086B  344C               	retlw	76	;'L'
   378  086C  346F               	retlw	111	;'o'
   379  086D  3461               	retlw	97	;'a'
   380  086E  3464               	retlw	100	;'d'
   381  086F  3469               	retlw	105	;'i'
   382  0870  346E               	retlw	110	;'n'
   383  0871  3467               	retlw	103	;'g'
   384  0872  3420               	retlw	32	;' '
   385  0873  3450               	retlw	80	;'P'
   386  0874  3449               	retlw	73	;'I'
   387  0875  3443               	retlw	67	;'C'
   388  0876  342E               	retlw	46	;'.'
   389  0877  342E               	retlw	46	;'.'
   390  0878  342E               	retlw	46	;'.'
   391  0879  3400               	retlw	0
   392  087A                     STR_11:	
   393  087A  3425               	retlw	37	;'%'
   394  087B  346C               	retlw	108	;'l'
   395  087C  3475               	retlw	117	;'u'
   396  087D  342E               	retlw	46	;'.'
   397  087E  3425               	retlw	37	;'%'
   398  087F  3436               	retlw	54	;'6'
   399  0880  342E               	retlw	46	;'.'
   400  0881  3436               	retlw	54	;'6'
   401  0882  346C               	retlw	108	;'l'
   402  0883  3475               	retlw	117	;'u'
   403  0884  3400               	retlw	0
   404  0885                     STR_4:	
   405  0885  3420               	retlw	32	;' '
   406  0886  3420               	retlw	32	;' '
   407  0887  3420               	retlw	32	;' '
   408  0888  3400               	retlw	0
   409  0889                     STR_2:	
   410  0889  344E               	retlw	78	;'N'
   411  088A  3431               	retlw	49	;'1'
   412  088B  343A               	retlw	58	;':'
   413  088C  3400               	retlw	0
   414  088D                     STR_6:	
   415  088D  344E               	retlw	78	;'N'
   416  088E  3432               	retlw	50	;'2'
   417  088F  343A               	retlw	58	;':'
   418  0890  3400               	retlw	0
   419  0891                     STR_7:	
   420  0891  340A               	retlw	10
   421  0892  3449               	retlw	73	;'I'
   422  0893  3400               	retlw	0
   423  0894                     STR_3:	
   424  0894  340A               	retlw	10
   425  0895  3453               	retlw	83	;'S'
   426  0896  3400               	retlw	0
   427  0897                     STR_5:	
   428  0897  3425               	retlw	37	;'%'
   429  0898  3400               	retlw	0
   430  0899                     __end_of__stringdata:	
   431                           
   432                           ; #config settings
   433  0000                     
   434                           	psect	cinit
   435  0015                     start_initialization:	
   436  0015                     __initialization:	
   437                           
   438                           ; Clear objects allocated to BANK0
   439  0015  1383               	bcf	3,7	;select IRP bank0
   440  0016  305A               	movlw	low __pbssBANK0
   441  0017  0084               	movwf	4
   442  0018  306B               	movlw	low (__pbssBANK0+17)
   443  0019  160A  118A  2595  120A  118A  	fcall	clear_ram0
   444                           
   445                           ; Clear objects allocated to BANK1
   446  001E  30C5               	movlw	low __pbssBANK1
   447  001F  0084               	movwf	4
   448  0020  30DA               	movlw	low (__pbssBANK1+21)
   449  0021  160A  118A  2595  120A  118A  	fcall	clear_ram0
   450                           
   451                           ; Initialize objects allocated to BANK3
   452  0026  1783               	bsf	3,7	;select IRP bank2
   453  0027  30BE               	movlw	low (__pdataBANK3+16)
   454  0028  00FD               	movwf	btemp+-1
   455  0029  3015               	movlw	high __pidataBANK3
   456  002A  00FE               	movwf	btemp
   457  002B  30C4               	movlw	low __pidataBANK3
   458  002C  00FF               	movwf	btemp+1
   459  002D  30AE               	movlw	low __pdataBANK3
   460  002E  0084               	movwf	4
   461  002F  120A  118A  27F2  120A  118A  	fcall	init_ram0
   462                           
   463                           ; Initialize objects allocated to BANK1
   464  0034  1683               	bsf	3,5	;RP0=1, select bank1
   465  0035  1303               	bcf	3,6	;RP1=0, select bank1
   466  0036  160A  118A  2581  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   467  003B  00DA               	movwf	__pdataBANK1& (0+127)
   468  003C  160A  118A  2582  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   469  0041  00DB               	movwf	(__pdataBANK1+1)& (0+127)
   470                           
   471                           ; Initialize objects allocated to BANK0
   472  0042  1283               	bcf	3,5	;RP0=0, select bank0
   473  0043  1303               	bcf	3,6	;RP1=0, select bank0
   474  0044  160A  118A  2583  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   475  0049  00EB               	movwf	__pdataBANK0& (0+127)
   476  004A  160A  118A  2584   	fcall	__pidataBANK0+1	;fetch initializer
   477  004D  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   478  004E                     end_of_initialization:	
   479                           ;End of C runtime variable initialization code
   480                           
   481  004E                     __end_of__initialization:	
   482  004E  0183               	clrf	3
   483  004F  160A  118A  2D9D   	ljmp	_main	;jump to C main() function
   484                           
   485                           	psect	bssBANK0
   486  005A                     __pbssBANK0:	
   487  005A                     _Display:	
   488  005A                     	ds	7
   489  0061                     _countInferior:	
   490  0061                     	ds	2
   491  0063                     _countSuperior:	
   492  0063                     	ds	2
   493  0065                     _nivelInferior:	
   494  0065                     	ds	2
   495  0067                     _nivelSuperior:	
   496  0067                     	ds	2
   497  0069                     _recipiente:	
   498  0069                     	ds	2
   499                           
   500                           	psect	dataBANK0
   501  006B                     __pdataBANK0:	
   502  006B                     _flag_an:	
   503  006B                     	ds	2
   504                           
   505                           	psect	bssBANK1
   506  00C5                     __pbssBANK1:	
   507  00C5                     _ADCResult:	
   508  00C5                     	ds	2
   509  00C7                     _flag_Start:	
   510  00C7                     	ds	2
   511  00C9                     ftoa@buf:	
   512  00C9                     	ds	17
   513                           
   514                           	psect	dataBANK1
   515  00DA                     __pdataBANK1:	
   516  00DA                     _flag_ch:	
   517  00DA                     	ds	2
   518                           
   519                           	psect	dataBANK3
   520  01AE                     __pdataBANK3:	
   521  01AE                     ISR@F1361:	
   522  01AE                     	ds	16
   523                           
   524                           	psect	clrtext
   525  1595                     clear_ram0:	
   526                           ;	Called with FSR containing the base address, and
   527                           ;	W with the last address+1
   528                           
   529  1595  0064               	clrwdt	;clear the watchdog before getting into this loop
   530  1596                     clrloop0:	
   531  1596  0180               	clrf	0	;clear RAM location pointed to by FSR
   532  1597  0A84               	incf	4,f	;increment pointer
   533  1598  0604               	xorwf	4,w	;XOR with final address
   534  1599  1903               	btfsc	3,2	;have we reached the end yet?
   535  159A  3400               	retlw	0	;all done for this memory range, return
   536  159B  0604               	xorwf	4,w	;XOR again to restore value
   537  159C  2D96               	goto	clrloop0	;do the next byte
   538                           
   539                           	psect	inittext
   540  07EE                     init_fetch0:	
   541                           ;	Called with low address in FSR and high address in W
   542                           
   543  07EE  087E               	movf	126,w
   544  07EF  008A               	movwf	10
   545  07F0  087F               	movf	127,w
   546  07F1  0082               	movwf	2
   547  07F2                     init_ram0:	
   548                           ;Called with:
   549                           ;	high address of idata address in btemp 
   550                           ;	low address of idata address in btemp+1 
   551                           ;	low address of data in FSR
   552                           ;	high address + 1 of data in btemp-1
   553                           
   554  07F2  27EE  120A  118A   	fcall	init_fetch0
   555  07F5  0080               	movwf	0
   556  07F6  0A84               	incf	4,f
   557  07F7  0804               	movf	4,w
   558  07F8  067D               	xorwf	125,w
   559  07F9  1903               	btfsc	3,2
   560  07FA  3400               	retlw	0
   561  07FB  0AFF               	incf	127,f
   562  07FC  1903               	btfsc	3,2
   563  07FD  0AFE               	incf	126,f
   564  07FE  2FF2               	goto	init_ram0
   565                           
   566                           	psect	cstackBANK3
   567  0190                     __pcstackBANK3:	
   568  0190                     ??_lcd_envia_nibble:	
   569  0190                     ??_USARTWriteChar:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0190                     ??_ADCInit:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0190                     ?_ADCRead:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0190                     ?___aldiv:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0190                     USARTWriteChar@USARTData:	
   582                           ; 4 bytes @ 0x0
   583                           
   584  0190                     ADCRead@ch:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0190                     ___aldiv@divisor:	
   588                           ; 2 bytes @ 0x0
   589                           
   590                           
   591                           ; 4 bytes @ 0x0
   592  0190                     	ds	1
   593  0191                     ?_USARTWriteString:	
   594  0191                     lcd_envia_nibble@n:	
   595                           ; 0 bytes @ 0x1
   596                           
   597  0191                     USARTWriteString@str:	
   598                           ; 1 bytes @ 0x1
   599                           
   600                           
   601                           ; 2 bytes @ 0x1
   602  0191                     	ds	1
   603  0192                     ?_lcd_envia_byte:	
   604  0192                     ??_ADCRead:	
   605                           ; 0 bytes @ 0x2
   606                           
   607  0192                     lcd_envia_byte@n:	
   608                           ; 0 bytes @ 0x2
   609                           
   610                           
   611                           ; 1 bytes @ 0x2
   612  0192                     	ds	1
   613  0193                     ??_lcd_envia_byte:	
   614  0193                     ??_USARTWriteString:	
   615                           ; 0 bytes @ 0x3
   616                           
   617  0193                     ??_ativar:	
   618                           ; 0 bytes @ 0x3
   619                           
   620                           
   621                           ; 0 bytes @ 0x3
   622  0193                     	ds	1
   623  0194                     lcd_envia_byte@address:	
   624  0194                     ___aldiv@dividend:	
   625                           ; 1 bytes @ 0x4
   626                           
   627                           
   628                           ; 4 bytes @ 0x4
   629  0194                     	ds	1
   630  0195                     ?_lcd_gotoxy:	
   631  0195                     ??_init_lcd_4bit:	
   632                           ; 0 bytes @ 0x5
   633                           
   634  0195                     ??_LCDClear:	
   635                           ; 0 bytes @ 0x5
   636                           
   637  0195                     lcd_gotoxy@y:	
   638                           ; 0 bytes @ 0x5
   639                           
   640                           
   641                           ; 1 bytes @ 0x5
   642  0195                     	ds	1
   643  0196                     ??_lcd_gotoxy:	
   644                           
   645                           ; 0 bytes @ 0x6
   646  0196                     	ds	1
   647  0197                     init_lcd_4bit@i:	
   648  0197                     lcd_gotoxy@x:	
   649                           ; 1 bytes @ 0x7
   650                           
   651                           
   652                           ; 1 bytes @ 0x7
   653  0197                     	ds	1
   654  0198                     ??___aldiv:	
   655  0198                     lcd_gotoxy@address:	
   656                           ; 0 bytes @ 0x8
   657                           
   658                           
   659                           ; 1 bytes @ 0x8
   660  0198                     	ds	1
   661  0199                     ??_lcd_putc:	
   662  0199                     ___aldiv@counter:	
   663                           ; 0 bytes @ 0x9
   664                           
   665                           
   666                           ; 1 bytes @ 0x9
   667  0199                     	ds	1
   668  019A                     ___aldiv@sign:	
   669                           
   670                           ; 1 bytes @ 0xA
   671  019A                     	ds	1
   672  019B                     lcd_putc@c:	
   673  019B                     ___aldiv@quotient:	
   674                           ; 1 bytes @ 0xB
   675                           
   676                           
   677                           ; 4 bytes @ 0xB
   678  019B                     	ds	1
   679  019C                     ?_lcd_escreve_string:	
   680  019C                     lcd_escreve_string@y:	
   681                           ; 0 bytes @ 0xC
   682                           
   683                           
   684                           ; 2 bytes @ 0xC
   685  019C                     	ds	2
   686  019E                     ??_lcd_escreve_string:	
   687                           
   688                           ; 0 bytes @ 0xE
   689  019E                     	ds	1
   690  019F                     ?_USARTInit:	
   691  019F                     USARTInit@BaudRate:	
   692                           ; 0 bytes @ 0xF
   693                           
   694                           
   695                           ; 4 bytes @ 0xF
   696  019F                     	ds	4
   697  01A3                     USARTInit@Mode:	
   698                           
   699                           ; 2 bytes @ 0x13
   700  01A3                     	ds	2
   701  01A5                     ??_USARTInit:	
   702                           
   703                           ; 0 bytes @ 0x15
   704  01A5                     	ds	4
   705  01A9                     USARTInit@BR:	
   706                           
   707                           ; 2 bytes @ 0x19
   708  01A9                     	ds	2
   709  01AB                     ??_inicialize:	
   710                           
   711                           ; 0 bytes @ 0x1B
   712  01AB                     	ds	3
   713  01AE                     ??_main:	
   714                           
   715                           	psect	cstackBANK1
   716  00A0                     __pcstackBANK1:	
   717                           ; 0 bytes @ 0x1E
   718                           
   719  00A0                     ISR@aux:	
   720                           
   721                           ; 16 bytes @ 0x0
   722  00A0                     	ds	16
   723  00B0                     ISR@buf:	
   724                           
   725                           ; 1 bytes @ 0x10
   726  00B0                     	ds	1
   727  00B1                     ISR@status:	
   728                           
   729                           ; 2 bytes @ 0x11
   730  00B1                     	ds	2
   731  00B3                     ISR@pre:	
   732                           
   733                           ; 3 bytes @ 0x13
   734  00B3                     	ds	3
   735  00B6                     ISR@preint:	
   736                           
   737                           ; 2 bytes @ 0x16
   738  00B6                     	ds	2
   739  00B8                     ISR@i:	
   740                           
   741                           ; 2 bytes @ 0x18
   742  00B8                     	ds	2
   743  00BA                     ISR@result:	
   744                           
   745                           ; 1 bytes @ 0x1A
   746  00BA                     	ds	1
   747  00BB                     ISR@status2:	
   748                           
   749                           ; 2 bytes @ 0x1B
   750  00BB                     	ds	2
   751  00BD                     ISR@input:	
   752                           
   753                           ; 3 bytes @ 0x1D
   754  00BD                     	ds	3
   755  00C0                     ISR@input2:	
   756                           
   757                           ; 3 bytes @ 0x20
   758  00C0                     	ds	3
   759  00C3                     ISR@recebimento:	
   760                           
   761                           ; 1 bytes @ 0x23
   762  00C3                     	ds	1
   763  00C4                     ISR@per:	
   764                           
   765                           ; 1 bytes @ 0x24
   766  00C4                     	ds	1
   767                           
   768                           	psect	cstackCOMMON
   769  0070                     __pcstackCOMMON:	
   770  0070                     ?_init_lcd_4bit:	
   771  0070                     ?_LCDClear:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_lcd_envia_nibble:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_isdigit:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ??_isdigit:	
   781                           ; 1 bit 
   782                           
   783  0070                     ?_USARTWriteChar:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ??_FormatarValor:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_ADCInit:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ?_ISR:	
   793                           ; 0 bytes @ 0x0
   794                           
   795  0070                     ?_inicialize:	
   796                           ; 0 bytes @ 0x0
   797                           
   798  0070                     ?_ativar:	
   799                           ; 0 bytes @ 0x0
   800                           
   801  0070                     ?_main:	
   802                           ; 0 bytes @ 0x0
   803                           
   804  0070                     ?_lcd_putc:	
   805                           ; 0 bytes @ 0x0
   806                           
   807  0070                     ?___ftge:	
   808                           ; 0 bytes @ 0x0
   809                           
   810  0070                     ?i1_USARTWriteChar:	
   811                           ; 1 bit 
   812                           
   813  0070                     ??i1_USARTWriteChar:	
   814                           ; 0 bytes @ 0x0
   815                           
   816  0070                     ?i1_lcd_envia_nibble:	
   817                           ; 0 bytes @ 0x0
   818                           
   819  0070                     ??i1_lcd_envia_nibble:	
   820                           ; 0 bytes @ 0x0
   821                           
   822  0070                     ?i1_lcd_putc:	
   823                           ; 0 bytes @ 0x0
   824                           
   825  0070                     ?_FormatarValor:	
   826                           ; 0 bytes @ 0x0
   827                           
   828  0070                     ?_USARTReceiveChar:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0070                     ?___wmul:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0070                     ?___ftpack:	
   835                           ; 2 bytes @ 0x0
   836                           
   837  0070                     ?___ftneg:	
   838                           ; 3 bytes @ 0x0
   839                           
   840  0070                     ?___lldiv:	
   841                           ; 3 bytes @ 0x0
   842                           
   843  0070                     _isdigit$897:	
   844                           ; 4 bytes @ 0x0
   845                           
   846  0070                     i1USARTWriteChar@USARTData:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0070                     ___wmul@multiplier:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0070                     ___ftpack@arg:	
   853                           ; 2 bytes @ 0x0
   854                           
   855  0070                     ___ftge@ff1:	
   856                           ; 3 bytes @ 0x0
   857                           
   858  0070                     ___ftneg@f1:	
   859                           ; 3 bytes @ 0x0
   860                           
   861  0070                     ___lldiv@divisor:	
   862                           ; 3 bytes @ 0x0
   863                           
   864                           
   865                           ; 4 bytes @ 0x0
   866  0070                     	ds	1
   867  0071                     ?i1_USARTWriteString:	
   868  0071                     isdigit@c:	
   869                           ; 0 bytes @ 0x1
   870                           
   871  0071                     i1lcd_envia_nibble@n:	
   872                           ; 1 bytes @ 0x1
   873                           
   874  0071                     i1USARTWriteString@str:	
   875                           ; 1 bytes @ 0x1
   876                           
   877                           
   878                           ; 2 bytes @ 0x1
   879  0071                     	ds	1
   880  0072                     ?i1_lcd_envia_byte:	
   881  0072                     i1lcd_envia_byte@n:	
   882                           ; 0 bytes @ 0x2
   883                           
   884  0072                     ___wmul@multiplicand:	
   885                           ; 1 bytes @ 0x2
   886                           
   887                           
   888                           ; 2 bytes @ 0x2
   889  0072                     	ds	1
   890  0073                     ??_USARTReceiveChar:	
   891  0073                     ??___ftneg:	
   892                           ; 0 bytes @ 0x3
   893                           
   894  0073                     ??i1_USARTWriteString:	
   895                           ; 0 bytes @ 0x3
   896                           
   897  0073                     ??i1_lcd_envia_byte:	
   898                           ; 0 bytes @ 0x3
   899                           
   900  0073                     ___ftpack@exp:	
   901                           ; 0 bytes @ 0x3
   902                           
   903  0073                     ___ftge@ff2:	
   904                           ; 1 bytes @ 0x3
   905                           
   906                           
   907                           ; 3 bytes @ 0x3
   908  0073                     	ds	1
   909  0074                     ??___wmul:	
   910  0074                     USARTReceiveChar@USARTData:	
   911                           ; 0 bytes @ 0x4
   912                           
   913  0074                     ___ftpack@sign:	
   914                           ; 1 bytes @ 0x4
   915                           
   916  0074                     i1lcd_envia_byte@address:	
   917                           ; 1 bytes @ 0x4
   918                           
   919  0074                     ___wmul@product:	
   920                           ; 1 bytes @ 0x4
   921                           
   922  0074                     ___lldiv@dividend:	
   923                           ; 2 bytes @ 0x4
   924                           
   925                           
   926                           ; 4 bytes @ 0x4
   927  0074                     	ds	1
   928  0075                     ??___ftpack:	
   929  0075                     ?i1_lcd_gotoxy:	
   930                           ; 0 bytes @ 0x5
   931                           
   932  0075                     i1lcd_gotoxy@y:	
   933                           ; 0 bytes @ 0x5
   934                           
   935                           
   936                           ; 1 bytes @ 0x5
   937  0075                     	ds	1
   938  0076                     ??___ftge:	
   939  0076                     ??i1_lcd_gotoxy:	
   940                           ; 0 bytes @ 0x6
   941                           
   942                           
   943                           ; 0 bytes @ 0x6
   944  0076                     	ds	1
   945  0077                     i1lcd_gotoxy@x:	
   946                           
   947                           ; 1 bytes @ 0x7
   948  0077                     	ds	1
   949  0078                     ??___lldiv:	
   950  0078                     ?___awtoft:	
   951                           ; 0 bytes @ 0x8
   952                           
   953  0078                     ?___ftadd:	
   954                           ; 3 bytes @ 0x8
   955                           
   956  0078                     ?___lltoft:	
   957                           ; 3 bytes @ 0x8
   958                           
   959  0078                     i1lcd_gotoxy@address:	
   960                           ; 3 bytes @ 0x8
   961                           
   962  0078                     ___awtoft@c:	
   963                           ; 1 bytes @ 0x8
   964                           
   965  0078                     ___ftadd@f1:	
   966                           ; 2 bytes @ 0x8
   967                           
   968  0078                     ___lltoft@c:	
   969                           ; 3 bytes @ 0x8
   970                           
   971                           
   972                           ; 4 bytes @ 0x8
   973  0078                     	ds	1
   974  0079                     ??i1_lcd_putc:	
   975  0079                     ___lldiv@quotient:	
   976                           ; 0 bytes @ 0x9
   977                           
   978                           
   979                           ; 4 bytes @ 0x9
   980  0079                     	ds	2
   981  007B                     ??___awtoft:	
   982  007B                     i1lcd_putc@c:	
   983                           ; 0 bytes @ 0xB
   984                           
   985  007B                     ___ftadd@f2:	
   986                           ; 1 bytes @ 0xB
   987                           
   988                           
   989                           ; 3 bytes @ 0xB
   990  007B                     	ds	1
   991  007C                     ??___lltoft:	
   992  007C                     ?i1_lcd_escreve_string:	
   993                           ; 0 bytes @ 0xC
   994                           
   995  007C                     i1lcd_escreve_string@y:	
   996                           ; 0 bytes @ 0xC
   997                           
   998                           
   999                           ; 2 bytes @ 0xC
  1000  007C                     	ds	1
  1001  007D                     ___awtoft@sign:	
  1002  007D                     ___lldiv@counter:	
  1003                           ; 1 bytes @ 0xD
  1004                           
  1005  007D                     ___lltoft@exp:	
  1006                           ; 1 bytes @ 0xD
  1007                           
  1008                           
  1009                           ; 1 bytes @ 0xD
  1010  007D                     	ds	1
  1011  007E                     ??___ftsub:	
  1012  007E                     ??i1_lcd_escreve_string:	
  1013                           ; 0 bytes @ 0xE
  1014                           
  1015                           
  1016                           	psect	cstackBANK0
  1017  0020                     __pcstackBANK0:	
  1018                           ; 0 bytes @ 0xE
  1019                           
  1020  0020                     ??___ftadd:	
  1021  0020                     ?___ftmul:	
  1022                           ; 0 bytes @ 0x0
  1023                           
  1024  0020                     ?___llmod:	
  1025                           ; 3 bytes @ 0x0
  1026                           
  1027  0020                     ___ftmul@f1:	
  1028                           ; 4 bytes @ 0x0
  1029                           
  1030  0020                     ___llmod@divisor:	
  1031                           ; 3 bytes @ 0x0
  1032                           
  1033  0020                     FormatarValor@aux:	
  1034                           ; 4 bytes @ 0x0
  1035                           
  1036                           
  1037                           ; 40 bytes @ 0x0
  1038  0020                     	ds	3
  1039  0023                     ___ftmul@f2:	
  1040                           
  1041                           ; 3 bytes @ 0x3
  1042  0023                     	ds	1
  1043  0024                     ___ftadd@sign:	
  1044  0024                     ___llmod@dividend:	
  1045                           ; 1 bytes @ 0x4
  1046                           
  1047                           
  1048                           ; 4 bytes @ 0x4
  1049  0024                     	ds	1
  1050  0025                     ___ftadd@exp2:	
  1051                           
  1052                           ; 1 bytes @ 0x5
  1053  0025                     	ds	1
  1054  0026                     ??___ftmul:	
  1055  0026                     ___ftadd@exp1:	
  1056                           ; 0 bytes @ 0x6
  1057                           
  1058                           
  1059                           ; 1 bytes @ 0x6
  1060  0026                     	ds	1
  1061  0027                     ?___ftsub:	
  1062  0027                     ___ftsub@f2:	
  1063                           ; 3 bytes @ 0x7
  1064                           
  1065                           
  1066                           ; 3 bytes @ 0x7
  1067  0027                     	ds	1
  1068  0028                     ??___llmod:	
  1069                           
  1070                           ; 0 bytes @ 0x8
  1071  0028                     	ds	1
  1072  0029                     ___llmod@counter:	
  1073                           
  1074                           ; 1 bytes @ 0x9
  1075  0029                     	ds	1
  1076  002A                     ?_sprintf:	
  1077  002A                     sprintf@f:	
  1078                           ; 2 bytes @ 0xA
  1079                           
  1080  002A                     ___ftmul@exp:	
  1081                           ; 1 bytes @ 0xA
  1082                           
  1083  002A                     ___ftsub@f1:	
  1084                           ; 1 bytes @ 0xA
  1085                           
  1086                           
  1087                           ; 3 bytes @ 0xA
  1088  002A                     	ds	1
  1089  002B                     ___ftmul@f3_as_product:	
  1090                           
  1091                           ; 3 bytes @ 0xB
  1092  002B                     	ds	3
  1093  002E                     ___ftmul@cntr:	
  1094                           
  1095                           ; 1 bytes @ 0xE
  1096  002E                     	ds	1
  1097  002F                     ___ftmul@sign:	
  1098                           
  1099                           ; 1 bytes @ 0xF
  1100  002F                     	ds	1
  1101  0030                     ?___ftdiv:	
  1102  0030                     ?___fttol:	
  1103                           ; 3 bytes @ 0x10
  1104                           
  1105  0030                     ___ftdiv@f2:	
  1106                           ; 4 bytes @ 0x10
  1107                           
  1108  0030                     ___fttol@f1:	
  1109                           ; 3 bytes @ 0x10
  1110                           
  1111                           
  1112                           ; 3 bytes @ 0x10
  1113  0030                     	ds	3
  1114  0033                     ??_sprintf:	
  1115  0033                     ___ftdiv@f1:	
  1116                           ; 0 bytes @ 0x13
  1117                           
  1118                           
  1119                           ; 3 bytes @ 0x13
  1120  0033                     	ds	1
  1121  0034                     ??___fttol:	
  1122                           
  1123                           ; 0 bytes @ 0x14
  1124  0034                     	ds	2
  1125  0036                     ??___ftdiv:	
  1126                           
  1127                           ; 0 bytes @ 0x16
  1128  0036                     	ds	2
  1129  0038                     sprintf@flag:	
  1130  0038                     ___fttol@sign1:	
  1131                           ; 1 bytes @ 0x18
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x18
  1135  0038                     	ds	1
  1136  0039                     sprintf@ap:	
  1137  0039                     ___fttol@lval:	
  1138                           ; 1 bytes @ 0x19
  1139                           
  1140                           
  1141                           ; 4 bytes @ 0x19
  1142  0039                     	ds	1
  1143  003A                     ___ftdiv@cntr:	
  1144  003A                     sprintf@_val:	
  1145                           ; 1 bytes @ 0x1A
  1146                           
  1147                           
  1148                           ; 4 bytes @ 0x1A
  1149  003A                     	ds	1
  1150  003B                     ___ftdiv@f3:	
  1151                           
  1152                           ; 3 bytes @ 0x1B
  1153  003B                     	ds	2
  1154  003D                     ___fttol@exp1:	
  1155                           
  1156                           ; 1 bytes @ 0x1D
  1157  003D                     	ds	1
  1158  003E                     sprintf@sp:	
  1159  003E                     ___ftdiv@exp:	
  1160                           ; 1 bytes @ 0x1E
  1161                           
  1162                           
  1163                           ; 1 bytes @ 0x1E
  1164  003E                     	ds	1
  1165  003F                     ___ftdiv@sign:	
  1166  003F                     sprintf@width:	
  1167                           ; 1 bytes @ 0x1F
  1168                           
  1169                           
  1170                           ; 2 bytes @ 0x1F
  1171  003F                     	ds	2
  1172  0041                     sprintf@prec:	
  1173                           
  1174                           ; 2 bytes @ 0x21
  1175  0041                     	ds	2
  1176  0043                     sprintf@c:	
  1177                           
  1178                           ; 1 bytes @ 0x23
  1179  0043                     	ds	1
  1180  0044                     ?_ftoa:	
  1181  0044                     ftoa@f:	
  1182                           ; 1 bytes @ 0x24
  1183                           
  1184                           
  1185                           ; 3 bytes @ 0x24
  1186  0044                     	ds	3
  1187  0047                     ftoa@status:	
  1188                           
  1189                           ; 1 bytes @ 0x27
  1190  0047                     	ds	1
  1191  0048                     ??_ftoa:	
  1192  0048                     FormatarValor@retorno:	
  1193                           ; 0 bytes @ 0x28
  1194                           
  1195                           
  1196                           ; 1 bytes @ 0x28
  1197  0048                     	ds	1
  1198  0049                     FormatarValor@posicao:	
  1199  0049                     ftoa@rem:	
  1200                           ; 2 bytes @ 0x29
  1201                           
  1202                           
  1203                           ; 4 bytes @ 0x29
  1204  0049                     	ds	2
  1205  004B                     FormatarValor@i:	
  1206                           
  1207                           ; 2 bytes @ 0x2B
  1208  004B                     	ds	2
  1209  004D                     FormatarValor@str:	
  1210  004D                     ftoa@l:	
  1211                           ; 1 bytes @ 0x2D
  1212                           
  1213                           
  1214                           ; 4 bytes @ 0x2D
  1215  004D                     	ds	4
  1216  0051                     ftoa@cp:	
  1217                           
  1218                           ; 1 bytes @ 0x31
  1219  0051                     	ds	1
  1220  0052                     ??_ISR:	
  1221                           
  1222                           ; 0 bytes @ 0x32
  1223  0052                     	ds	8
  1224                           
  1225                           	psect	maintext
  1226  159D                     __pmaintext:	
  1227 ;;
  1228 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1229 ;;
  1230 ;; *************** function _main *****************
  1231 ;; Defined at:
  1232 ;;		line 350 in file "main.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;		None               void
  1239 ;; Registers used:
  1240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 17F/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1246 ;;      Params:         0       0       0       0       0
  1247 ;;      Locals:         0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0
  1249 ;;      Totals:         0       0       0       0       0
  1250 ;;Total ram usage:        0 bytes
  1251 ;; Hardware stack levels required when called:   12
  1252 ;; This function calls:
  1253 ;;		_ativar
  1254 ;;		_inicialize
  1255 ;; This function is called by:
  1256 ;;		Startup code after reset
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           
  1261                           ;psect for function _main
  1262  159D                     _main:	
  1263                           
  1264                           ;main.c: 352: inicialize();
  1265                           
  1266                           ;incstack = 0
  1267 ;; hardware stack exceeded
  1268                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1269  159D  120A  158A  24E6  160A  118A  	fcall	_inicialize
  1270  15A2                     l155:	
  1271                           ;main.c: 353: while (1) {
  1272                           
  1273                           
  1274                           ;main.c: 354: ativar();
  1275  15A2  120A  158A  2406  160A  118A  	fcall	_ativar
  1276  15A7  2DA2               	goto	l155
  1277  15A8                     __end_of_main:	
  1278                           
  1279                           	psect	text1
  1280  0CE6                     __ptext1:	
  1281 ;; *************** function _inicialize *****************
  1282 ;; Defined at:
  1283 ;;		line 298 in file "main.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;		None               void
  1290 ;; Registers used:
  1291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0
  1299 ;;      Temps:          0       0       0       3       0
  1300 ;;      Totals:         0       0       0       3       0
  1301 ;;Total ram usage:        3 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:   11
  1304 ;; This function calls:
  1305 ;;		_ADCInit
  1306 ;;		_LCDClear
  1307 ;;		_USARTInit
  1308 ;;		_init_lcd_4bit
  1309 ;;		_lcd_escreve_string
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function _inicialize
  1317  0CE6                     _inicialize:	
  1318                           
  1319                           ;main.c: 300: USARTInit(57600, 1);
  1320                           
  1321                           ;incstack = 0
  1322 ;; hardware stack exceeded
  1323                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1324  0CE6  3000               	movlw	0
  1325  0CE7  1683               	bsf	3,5	;RP0=1, select bank3
  1326  0CE8  1703               	bsf	3,6	;RP1=1, select bank3
  1327  0CE9  00A2               	movwf	(USARTInit@BaudRate+3)^(0+384)
  1328  0CEA  3000               	movlw	0
  1329  0CEB  00A1               	movwf	(USARTInit@BaudRate+2)^(0+384)
  1330  0CEC  30E1               	movlw	225
  1331  0CED  00A0               	movwf	(USARTInit@BaudRate+1)^(0+384)
  1332  0CEE  3000               	movlw	0
  1333  0CEF  009F               	movwf	USARTInit@BaudRate^(0+384)
  1334  0CF0  3001               	movlw	1
  1335  0CF1  00A3               	movwf	USARTInit@Mode^(0+384)
  1336  0CF2  3000               	movlw	0
  1337  0CF3  00A4               	movwf	(USARTInit@Mode^(0+384)+1)
  1338  0CF4  120A  158A  2476  120A  158A  	fcall	_USARTInit
  1339                           
  1340                           ;main.c: 301: TRISA = 0b11111111;
  1341  0CF9  30FF               	movlw	255
  1342  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  1343  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
  1344  0CFC  0085               	movwf	5	;volatile
  1345                           
  1346                           ;main.c: 302: PORTAbits.RA0 = 0;
  1347  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0CFF  1005               	bcf	5,0	;volatile
  1350                           
  1351                           ;main.c: 303: PORTAbits.RA1 = 0;
  1352  0D00  1085               	bcf	5,1	;volatile
  1353                           
  1354                           ;main.c: 304: TRISDbits.TRISD2 = 0;
  1355  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  1356  0D02  1303               	bcf	3,6	;RP1=0, select bank1
  1357  0D03  1108               	bcf	8,2	;volatile
  1358                           
  1359                           ;main.c: 305: PORTDbits.RD2 = 1;
  1360  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0D05  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0D06  1508               	bsf	8,2	;volatile
  1363                           
  1364                           ;main.c: 306: TRISDbits.TRISD3 = 0;
  1365  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  1366  0D08  1303               	bcf	3,6	;RP1=0, select bank1
  1367  0D09  1188               	bcf	8,3	;volatile
  1368                           
  1369                           ;main.c: 307: PORTDbits.RD3 = 0;
  1370  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  1372  0D0C  1188               	bcf	8,3	;volatile
  1373                           
  1374                           ;main.c: 308: TRISDbits.TRISD5 = 0;
  1375  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  1376  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  1377  0D0F  1288               	bcf	8,5	;volatile
  1378                           
  1379                           ;main.c: 309: PORTDbits.RD5 = 0;
  1380  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  1381  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  1382  0D12  1288               	bcf	8,5	;volatile
  1383                           
  1384                           ;main.c: 311: TRISCbits.TRISC0 = 1;
  1385  0D13  1683               	bsf	3,5	;RP0=1, select bank1
  1386  0D14  1303               	bcf	3,6	;RP1=0, select bank1
  1387  0D15  1407               	bsf	7,0	;volatile
  1388                           
  1389                           ;main.c: 312: TRISCbits.TRISC1 = 1;
  1390  0D16  1487               	bsf	7,1	;volatile
  1391                           
  1392                           ;main.c: 313: TRISCbits.TRISC2 = 1;
  1393  0D17  1507               	bsf	7,2	;volatile
  1394                           
  1395                           ;main.c: 314: TRISCbits.TRISC3 = 1;
  1396  0D18  1587               	bsf	7,3	;volatile
  1397                           
  1398                           ;main.c: 315: PORTCbits.RC3 = 0;
  1399  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0D1B  1187               	bcf	7,3	;volatile
  1402                           
  1403                           ;main.c: 316: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1404  0D1C  3033               	movlw	51
  1405  0D1D  1683               	bsf	3,5	;RP0=1, select bank3
  1406  0D1E  1703               	bsf	3,6	;RP1=1, select bank3
  1407  0D1F  00AD               	movwf	(??_inicialize^(0+384)+2)
  1408  0D20  30BC               	movlw	188
  1409  0D21  00AC               	movwf	(??_inicialize^(0+384)+1)
  1410  0D22  3010               	movlw	16
  1411  0D23  00AB               	movwf	??_inicialize^(0+384)
  1412  0D24                     u4237:	
  1413  0D24  0BAB               	decfsz	??_inicialize^(0+384),f
  1414  0D25  2D24               	goto	u4237
  1415  0D26  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1416  0D27  2D24               	goto	u4237
  1417  0D28  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1418  0D29  2D24               	goto	u4237
  1419                           
  1420                           ;main.c: 317: init_lcd_4bit();
  1421  0D2A  120A  158A  2338  120A  158A  	fcall	_init_lcd_4bit
  1422                           
  1423                           ;main.c: 318: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1424  0D2F  3033               	movlw	51
  1425  0D30  1683               	bsf	3,5	;RP0=1, select bank3
  1426  0D31  1703               	bsf	3,6	;RP1=1, select bank3
  1427  0D32  00AD               	movwf	(??_inicialize^(0+384)+2)
  1428  0D33  30BC               	movlw	188
  1429  0D34  00AC               	movwf	(??_inicialize^(0+384)+1)
  1430  0D35  3010               	movlw	16
  1431  0D36  00AB               	movwf	??_inicialize^(0+384)
  1432  0D37                     u4247:	
  1433  0D37  0BAB               	decfsz	??_inicialize^(0+384),f
  1434  0D38  2D37               	goto	u4247
  1435  0D39  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1436  0D3A  2D37               	goto	u4247
  1437  0D3B  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1438  0D3C  2D37               	goto	u4247
  1439                           
  1440                           ;main.c: 319: INTCONbits.PEIE = 1;
  1441  0D3D  170B               	bsf	11,6	;volatile
  1442                           
  1443                           ;main.c: 320: INTCONbits.GIE = 1;
  1444  0D3E  178B               	bsf	11,7	;volatile
  1445                           
  1446                           ;main.c: 321: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1447  0D3F  301A               	movlw	26
  1448  0D40  1683               	bsf	3,5	;RP0=1, select bank3
  1449  0D41  1703               	bsf	3,6	;RP1=1, select bank3
  1450  0D42  00AD               	movwf	(??_inicialize^(0+384)+2)
  1451  0D43  305E               	movlw	94
  1452  0D44  00AC               	movwf	(??_inicialize^(0+384)+1)
  1453  0D45  3086               	movlw	134
  1454  0D46  00AB               	movwf	??_inicialize^(0+384)
  1455  0D47                     u4257:	
  1456  0D47  0BAB               	decfsz	??_inicialize^(0+384),f
  1457  0D48  2D47               	goto	u4257
  1458  0D49  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1459  0D4A  2D47               	goto	u4257
  1460  0D4B  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1461  0D4C  2D47               	goto	u4257
  1462  0D4D  0000               	nop
  1463                           
  1464                           ;main.c: 322: ADCInit();
  1465  0D4E  160A  118A  25D4  120A  158A  	fcall	_ADCInit
  1466                           
  1467                           ;main.c: 323: lcd_escreve_string("\fLoading PIC...");
  1468  0D53  305B               	movlw	low (STR_10-__stringbase)
  1469  0D54  1683               	bsf	3,5	;RP0=1, select bank3
  1470  0D55  1703               	bsf	3,6	;RP1=1, select bank3
  1471  0D56  009C               	movwf	lcd_escreve_string@y^(0+384)
  1472  0D57  3080               	movlw	128
  1473  0D58  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1474  0D59  160A  118A  2763  120A  158A  	fcall	_lcd_escreve_string
  1475                           
  1476                           ;main.c: 324: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1477  0D5E  307F               	movlw	127
  1478  0D5F  1683               	bsf	3,5	;RP0=1, select bank3
  1479  0D60  1703               	bsf	3,6	;RP1=1, select bank3
  1480  0D61  00AD               	movwf	(??_inicialize^(0+384)+2)
  1481  0D62  30D4               	movlw	212
  1482  0D63  00AC               	movwf	(??_inicialize^(0+384)+1)
  1483  0D64  30AE               	movlw	174
  1484  0D65  00AB               	movwf	??_inicialize^(0+384)
  1485  0D66                     u4267:	
  1486  0D66  0BAB               	decfsz	??_inicialize^(0+384),f
  1487  0D67  2D66               	goto	u4267
  1488  0D68  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1489  0D69  2D66               	goto	u4267
  1490  0D6A  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1491  0D6B  2D66               	goto	u4267
  1492  0D6C  2D6D               	nop2
  1493                           
  1494                           ;main.c: 325: LCDClear();
  1495  0D6D  120A  158A  2109   	fcall	_LCDClear
  1496  0D70  0008               	return
  1497  0D71                     __end_of_inicialize:	
  1498                           
  1499                           	psect	text2
  1500  1763                     __ptext2:	
  1501 ;; *************** function _lcd_escreve_string *****************
  1502 ;; Defined at:
  1503 ;;		line 168 in file "lcd_4bit.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1506 ;;		 -> STR_10(16), STR_9(2), STR_8(4), STR_6(4), 
  1507 ;;		 -> STR_5(2), STR_4(4), STR_2(4), ISR@aux(16), 
  1508 ;;		 -> FormatarValor@aux(40), 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;		None               void
  1513 ;; Registers used:
  1514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         0       0       0       2       0
  1521 ;;      Locals:         0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0
  1523 ;;      Totals:         0       0       0       2       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:   10
  1527 ;; This function calls:
  1528 ;;		_lcd_putc
  1529 ;; This function is called by:
  1530 ;;		_inicialize
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function _lcd_escreve_string
  1536  1763                     _lcd_escreve_string:	
  1537  1763                     l3143:	
  1538                           ;lcd_4bit.c: 170: while(*y!='\0')
  1539                           
  1540                           ;incstack = 0
  1541 ;; hardware stack exceeded
  1542                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1543                           
  1544  1763  1683               	bsf	3,5	;RP0=1, select bank3
  1545  1764  1703               	bsf	3,6	;RP1=1, select bank3
  1546  1765  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1547  1766  1283               	bcf	3,5	;RP0=0, select bank0
  1548  1767  1303               	bcf	3,6	;RP1=0, select bank0
  1549  1768  00FF               	movwf	127
  1550  1769  1683               	bsf	3,5	;RP0=1, select bank3
  1551  176A  1703               	bsf	3,6	;RP1=1, select bank3
  1552  176B  081C               	movf	lcd_escreve_string@y^(0+384),w
  1553  176C  0084               	movwf	4
  1554  176D  1283               	bcf	3,5	;RP0=0, select bank0
  1555  176E  1303               	bcf	3,6	;RP1=0, select bank0
  1556  176F  120A  158A  2000  160A  118A  	fcall	stringtab
  1557  1774  3800               	iorlw	0
  1558  1775  1903               	btfsc	3,2
  1559  1776  0008               	return
  1560                           
  1561                           ;lcd_4bit.c: 171: {
  1562                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1563  1777  1683               	bsf	3,5	;RP0=1, select bank3
  1564  1778  1703               	bsf	3,6	;RP1=1, select bank3
  1565  1779  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1566  177A  1283               	bcf	3,5	;RP0=0, select bank0
  1567  177B  1303               	bcf	3,6	;RP1=0, select bank0
  1568  177C  00FF               	movwf	127
  1569  177D  1683               	bsf	3,5	;RP0=1, select bank3
  1570  177E  1703               	bsf	3,6	;RP1=1, select bank3
  1571  177F  081C               	movf	lcd_escreve_string@y^(0+384),w
  1572  1780  0084               	movwf	4
  1573  1781  1283               	bcf	3,5	;RP0=0, select bank0
  1574  1782  1303               	bcf	3,6	;RP1=0, select bank0
  1575  1783  120A  158A  2000  160A  118A  	fcall	stringtab
  1576  1788  120A  158A  218F  160A  118A  	fcall	_lcd_putc
  1577                           
  1578                           ;lcd_4bit.c: 173: y++;
  1579  178D  3001               	movlw	1
  1580  178E  1683               	bsf	3,5	;RP0=1, select bank3
  1581  178F  1703               	bsf	3,6	;RP1=1, select bank3
  1582  1790  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1583  1791  1803               	skipnc
  1584  1792  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1585  1793  2F63               	goto	l3143
  1586  1794                     __end_of_lcd_escreve_string:	
  1587                           
  1588                           	psect	text3
  1589  098F                     __ptext3:	
  1590 ;; *************** function _lcd_putc *****************
  1591 ;; Defined at:
  1592 ;;		line 82 in file "lcd_4bit.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  c               1    wreg     unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  c               1   11[BANK3 ] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;		None               void
  1599 ;; Registers used:
  1600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1606 ;;      Params:         0       0       0       0       0
  1607 ;;      Locals:         0       0       0       1       0
  1608 ;;      Temps:          0       0       0       2       0
  1609 ;;      Totals:         0       0       0       3       0
  1610 ;;Total ram usage:        3 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    9
  1613 ;; This function calls:
  1614 ;;		_lcd_envia_byte
  1615 ;;		_lcd_gotoxy
  1616 ;; This function is called by:
  1617 ;;		_lcd_escreve_string
  1618 ;;		_lcd_escreve_p
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _lcd_putc
  1624  098F                     _lcd_putc:	
  1625                           
  1626                           ;incstack = 0
  1627 ;; hardware stack exceeded
  1628                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1629                           ;lcd_putc@c stored from wreg
  1630  098F  1683               	bsf	3,5	;RP0=1, select bank3
  1631  0990  1703               	bsf	3,6	;RP1=1, select bank3
  1632  0991  009B               	movwf	lcd_putc@c^(0+384)
  1633                           
  1634                           ;lcd_4bit.c: 84: switch(c)
  1635  0992  29C8               	goto	l3033
  1636  0993                     l3021:	
  1637                           ;lcd_4bit.c: 85: {
  1638                           ;lcd_4bit.c: 86: case '\f':
  1639                           
  1640                           
  1641                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1642  0993  0192               	clrf	lcd_envia_byte@n^(0+384)
  1643  0994  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1644  0995  3000               	movlw	0
  1645  0996  120A  158A  2099  120A  158A  	fcall	_lcd_envia_byte
  1646                           
  1647                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1648  099B  300D               	movlw	13
  1649  099C  1683               	bsf	3,5	;RP0=1, select bank3
  1650  099D  1703               	bsf	3,6	;RP1=1, select bank3
  1651  099E  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1652  099F  30FB               	movlw	251
  1653  09A0  0099               	movwf	??_lcd_putc^(0+384)
  1654  09A1                     u4277:	
  1655  09A1  0B99               	decfsz	??_lcd_putc^(0+384),f
  1656  09A2  29A1               	goto	u4277
  1657  09A3  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1658  09A4  29A1               	goto	u4277
  1659  09A5  29A6               	nop2
  1660                           
  1661                           ;lcd_4bit.c: 89: break;
  1662  09A6  0008               	return
  1663  09A7                     l3025:	
  1664                           ;lcd_4bit.c: 91: case '\n':
  1665                           
  1666                           
  1667                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1668  09A7  3002               	movlw	2
  1669  09A8  1683               	bsf	3,5	;RP0=1, select bank3
  1670  09A9  1703               	bsf	3,6	;RP1=1, select bank3
  1671  09AA  0099               	movwf	??_lcd_putc^(0+384)
  1672  09AB  0819               	movf	??_lcd_putc^(0+384),w
  1673  09AC  0095               	movwf	lcd_gotoxy@y^(0+384)
  1674  09AD  3001               	movlw	1
  1675  09AE  160A  118A  2638   	fcall	_lcd_gotoxy
  1676                           
  1677                           ;lcd_4bit.c: 93: break;
  1678  09B1  0008               	return
  1679  09B2                     l3027:	
  1680                           ;lcd_4bit.c: 95: case '\b':
  1681                           
  1682                           
  1683                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1684  09B2  3010               	movlw	16
  1685  09B3  1683               	bsf	3,5	;RP0=1, select bank3
  1686  09B4  1703               	bsf	3,6	;RP1=1, select bank3
  1687  09B5  0099               	movwf	??_lcd_putc^(0+384)
  1688  09B6  0819               	movf	??_lcd_putc^(0+384),w
  1689  09B7  0092               	movwf	lcd_envia_byte@n^(0+384)
  1690  09B8  3000               	movlw	0
  1691  09B9  120A  158A  2099   	fcall	_lcd_envia_byte
  1692                           
  1693                           ;lcd_4bit.c: 97: break;
  1694  09BC  0008               	return
  1695  09BD                     l3029:	
  1696                           ;lcd_4bit.c: 99: default:
  1697                           
  1698                           
  1699                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1700  09BD  1683               	bsf	3,5	;RP0=1, select bank3
  1701  09BE  1703               	bsf	3,6	;RP1=1, select bank3
  1702  09BF  081B               	movf	lcd_putc@c^(0+384),w
  1703  09C0  0099               	movwf	??_lcd_putc^(0+384)
  1704  09C1  0819               	movf	??_lcd_putc^(0+384),w
  1705  09C2  0092               	movwf	lcd_envia_byte@n^(0+384)
  1706  09C3  3001               	movlw	1
  1707  09C4  120A  158A  2099   	fcall	_lcd_envia_byte
  1708                           
  1709                           ;lcd_4bit.c: 102: }
  1710                           
  1711                           ;lcd_4bit.c: 101: break;
  1712  09C7  0008               	return
  1713  09C8                     l3033:	
  1714  09C8  1683               	bsf	3,5	;RP0=1, select bank3
  1715  09C9  1703               	bsf	3,6	;RP1=1, select bank3
  1716  09CA  081B               	movf	lcd_putc@c^(0+384),w
  1717                           
  1718                           ; Switch size 1, requested type "space"
  1719                           ; Number of cases is 3, Range of values is 8 to 12
  1720                           ; switch strategies available:
  1721                           ; Name         Instructions Cycles
  1722                           ; simple_byte           10     6 (average)
  1723                           ; direct_byte           26    11 (fixed)
  1724                           ; jumptable            263     9 (fixed)
  1725                           ;	Chosen strategy is simple_byte
  1726  09CB  3A08               	xorlw	8	; case 8
  1727  09CC  1903               	skipnz
  1728  09CD  29B2               	goto	l3027
  1729  09CE  3A02               	xorlw	2	; case 10
  1730  09CF  1903               	skipnz
  1731  09D0  29A7               	goto	l3025
  1732  09D1  3A06               	xorlw	6	; case 12
  1733  09D2  1903               	skipnz
  1734  09D3  2993               	goto	l3021
  1735  09D4  29BD               	goto	l3029
  1736  09D5  0008               	return
  1737  09D6                     __end_of_lcd_putc:	
  1738                           
  1739                           	psect	text4
  1740  1638                     __ptext4:	
  1741 ;; *************** function _lcd_gotoxy *****************
  1742 ;; Defined at:
  1743 ;;		line 70 in file "lcd_4bit.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  x               1    wreg     unsigned char 
  1746 ;;  y               1    5[BANK3 ] unsigned char 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  x               1    7[BANK3 ] unsigned char 
  1749 ;;  address         1    8[BANK3 ] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;		None               void
  1752 ;; Registers used:
  1753 ;;		wreg, status,2, status,0, pclath, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1759 ;;      Params:         0       0       0       1       0
  1760 ;;      Locals:         0       0       0       2       0
  1761 ;;      Temps:          0       0       0       1       0
  1762 ;;      Totals:         0       0       0       4       0
  1763 ;;Total ram usage:        4 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    8
  1766 ;; This function calls:
  1767 ;;		_lcd_envia_byte
  1768 ;; This function is called by:
  1769 ;;		_lcd_putc
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           
  1774                           ;psect for function _lcd_gotoxy
  1775  1638                     _lcd_gotoxy:	
  1776                           
  1777                           ;incstack = 0
  1778 ;; hardware stack exceeded
  1779                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1780                           ;lcd_gotoxy@x stored from wreg
  1781  1638  1683               	bsf	3,5	;RP0=1, select bank3
  1782  1639  1703               	bsf	3,6	;RP1=1, select bank3
  1783  163A  0097               	movwf	lcd_gotoxy@x^(0+384)
  1784                           
  1785                           ;lcd_4bit.c: 72: unsigned char address;
  1786                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1787  163B  0815               	movf	lcd_gotoxy@y^(0+384),w
  1788  163C  3A01               	xorlw	1
  1789  163D  1903               	skipnz
  1790  163E  2E44               	goto	l3009
  1791  163F  3040               	movlw	64
  1792  1640  0096               	movwf	??_lcd_gotoxy^(0+384)
  1793  1641  0816               	movf	??_lcd_gotoxy^(0+384),w
  1794  1642  0098               	movwf	lcd_gotoxy@address^(0+384)
  1795  1643  2E45               	goto	l3011
  1796  1644                     l3009:	
  1797                           
  1798                           ;lcd_4bit.c: 75: else address=0;
  1799  1644  0198               	clrf	lcd_gotoxy@address^(0+384)
  1800  1645                     l3011:	
  1801                           
  1802                           ;lcd_4bit.c: 77: address += x-1;
  1803  1645  0817               	movf	lcd_gotoxy@x^(0+384),w
  1804  1646  3EFF               	addlw	255
  1805  1647  0096               	movwf	??_lcd_gotoxy^(0+384)
  1806  1648  0816               	movf	??_lcd_gotoxy^(0+384),w
  1807  1649  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1808                           
  1809                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1810  164A  0818               	movf	lcd_gotoxy@address^(0+384),w
  1811  164B  3880               	iorlw	128
  1812  164C  0096               	movwf	??_lcd_gotoxy^(0+384)
  1813  164D  0816               	movf	??_lcd_gotoxy^(0+384),w
  1814  164E  0092               	movwf	lcd_envia_byte@n^(0+384)
  1815  164F  3000               	movlw	0
  1816  1650  120A  158A  2099   	fcall	_lcd_envia_byte
  1817  1653  0008               	return
  1818  1654                     __end_of_lcd_gotoxy:	
  1819                           
  1820                           	psect	text5
  1821  0B38                     __ptext5:	
  1822 ;; *************** function _init_lcd_4bit *****************
  1823 ;; Defined at:
  1824 ;;		line 6 in file "lcd_4bit.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;		None
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  i               1    7[BANK3 ] unsigned char 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;		None               void
  1831 ;; Registers used:
  1832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1838 ;;      Params:         0       0       0       0       0
  1839 ;;      Locals:         0       0       0       1       0
  1840 ;;      Temps:          0       0       0       2       0
  1841 ;;      Totals:         0       0       0       3       0
  1842 ;;Total ram usage:        3 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    8
  1845 ;; This function calls:
  1846 ;;		_lcd_envia_byte
  1847 ;;		_lcd_envia_nibble
  1848 ;; This function is called by:
  1849 ;;		_inicialize
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           
  1854                           ;psect for function _init_lcd_4bit
  1855  0B38                     _init_lcd_4bit:	
  1856                           
  1857                           ;lcd_4bit.c: 8: unsigned char i;
  1858                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1859                           
  1860                           ;incstack = 0
  1861 ;; hardware stack exceeded
  1862                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1863  0B38  1683               	bsf	3,5	;RP0=1, select bank1
  1864  0B39  1303               	bcf	3,6	;RP1=0, select bank1
  1865  0B3A  1206               	bcf	6,4	;volatile
  1866                           
  1867                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1868  0B3B  1286               	bcf	6,5	;volatile
  1869                           
  1870                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1871  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0B3E  1206               	bcf	6,4	;volatile
  1874                           
  1875                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1876  0B3F  1286               	bcf	6,5	;volatile
  1877                           
  1878                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1879  0B40  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0B41  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0B42  1006               	bcf	6,0	;volatile
  1882                           
  1883                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1884  0B43  1086               	bcf	6,1	;volatile
  1885                           
  1886                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1887  0B44  1106               	bcf	6,2	;volatile
  1888                           
  1889                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1890  0B45  1186               	bcf	6,3	;volatile
  1891                           
  1892                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1893  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0B48  1006               	bcf	6,0	;volatile
  1896                           
  1897                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1898  0B49  1086               	bcf	6,1	;volatile
  1899                           
  1900                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1901  0B4A  1106               	bcf	6,2	;volatile
  1902                           
  1903                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1904  0B4B  1186               	bcf	6,3	;volatile
  1905                           
  1906                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1907  0B4C  3062               	movlw	98
  1908  0B4D  1683               	bsf	3,5	;RP0=1, select bank3
  1909  0B4E  1703               	bsf	3,6	;RP1=1, select bank3
  1910  0B4F  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1911  0B50  3065               	movlw	101
  1912  0B51  0095               	movwf	??_init_lcd_4bit^(0+384)
  1913  0B52                     u4287:	
  1914  0B52  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1915  0B53  2B52               	goto	u4287
  1916  0B54  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1917  0B55  2B52               	goto	u4287
  1918  0B56  2B57               	nop2
  1919                           
  1920                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1921  0B57  1683               	bsf	3,5	;RP0=1, select bank3
  1922  0B58  1703               	bsf	3,6	;RP1=1, select bank3
  1923  0B59  0197               	clrf	init_lcd_4bit@i^(0+384)
  1924  0B5A  3003               	movlw	3
  1925  0B5B  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1926  0B5C  1803               	btfsc	3,0
  1927  0B5D  2B79               	goto	l3163
  1928  0B5E                     l3155:	
  1929                           
  1930                           ;lcd_4bit.c: 26: {
  1931                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1932  0B5E  3003               	movlw	3
  1933  0B5F  120A  158A  2224  120A  158A  	fcall	_lcd_envia_nibble
  1934                           
  1935                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1936  0B64  3021               	movlw	33
  1937  0B65  1683               	bsf	3,5	;RP0=1, select bank3
  1938  0B66  1703               	bsf	3,6	;RP1=1, select bank3
  1939  0B67  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1940  0B68  3076               	movlw	118
  1941  0B69  0095               	movwf	??_init_lcd_4bit^(0+384)
  1942  0B6A                     u4297:	
  1943  0B6A  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1944  0B6B  2B6A               	goto	u4297
  1945  0B6C  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1946  0B6D  2B6A               	goto	u4297
  1947  0B6E  0000               	nop
  1948  0B6F  3001               	movlw	1
  1949  0B70  1683               	bsf	3,5	;RP0=1, select bank3
  1950  0B71  1703               	bsf	3,6	;RP1=1, select bank3
  1951  0B72  0095               	movwf	??_init_lcd_4bit^(0+384)
  1952  0B73  0815               	movf	??_init_lcd_4bit^(0+384),w
  1953  0B74  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1954  0B75  3003               	movlw	3
  1955  0B76  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1956  0B77  1C03               	skipc
  1957  0B78  2B5E               	goto	l3155
  1958  0B79                     l3163:	
  1959                           
  1960                           ;lcd_4bit.c: 29: }
  1961                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1962  0B79  3002               	movlw	2
  1963  0B7A  120A  158A  2224  120A  158A  	fcall	_lcd_envia_nibble
  1964                           
  1965                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1966  0B7F  1683               	bsf	3,5	;RP0=1, select bank3
  1967  0B80  1703               	bsf	3,6	;RP1=1, select bank3
  1968  0B81  0197               	clrf	init_lcd_4bit@i^(0+384)
  1969  0B82                     L1:	
  1970  0B82  3004               	movlw	4
  1971  0B83  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1972  0B84  1803               	btfsc	3,0
  1973  0B85  0008               	return
  1974                           
  1975                           ;lcd_4bit.c: 33: {
  1976                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1977  0B86  0817               	movf	init_lcd_4bit@i^(0+384),w
  1978  0B87  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1979  0B88  0084               	movwf	4
  1980  0B89  120A  158A  200A  120A  158A  	fcall	stringdir
  1981  0B8E  0095               	movwf	??_init_lcd_4bit^(0+384)
  1982  0B8F  0815               	movf	??_init_lcd_4bit^(0+384),w
  1983  0B90  0092               	movwf	lcd_envia_byte@n^(0+384)
  1984  0B91  3000               	movlw	0
  1985  0B92  120A  158A  2099  120A  158A  	fcall	_lcd_envia_byte
  1986  0B97  3001               	movlw	1
  1987  0B98  1683               	bsf	3,5	;RP0=1, select bank3
  1988  0B99  1703               	bsf	3,6	;RP1=1, select bank3
  1989  0B9A  0095               	movwf	??_init_lcd_4bit^(0+384)
  1990  0B9B  0815               	movf	??_init_lcd_4bit^(0+384),w
  1991  0B9C  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1992  0B9D  2B82               	goto	L1
  1993  0B9E                     __end_of_init_lcd_4bit:	
  1994                           
  1995                           	psect	text6
  1996  0C76                     __ptext6:	
  1997 ;; *************** function _USARTInit *****************
  1998 ;; Defined at:
  1999 ;;		line 39 in file "main.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  BaudRate        4   15[BANK3 ] long 
  2002 ;;  Mode            2   19[BANK3 ] int 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  BR              2   25[BANK3 ] int 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;		None               void
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2014 ;;      Params:         0       0       0       6       0
  2015 ;;      Locals:         0       0       0       2       0
  2016 ;;      Temps:          0       0       0       4       0
  2017 ;;      Totals:         0       0       0      12       0
  2018 ;;Total ram usage:       12 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    7
  2021 ;; This function calls:
  2022 ;;		___aldiv
  2023 ;; This function is called by:
  2024 ;;		_inicialize
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           
  2029                           ;psect for function _USARTInit
  2030  0C76                     _USARTInit:	
  2031                           
  2032                           ;main.c: 40: int BR = 0;
  2033                           
  2034                           ;incstack = 0
  2035 ;; hardware stack exceeded
  2036                           ; Regs used in _USARTInit: [wreg+status,2+status,0+pclath+cstack]
  2037  0C76  1683               	bsf	3,5	;RP0=1, select bank3
  2038  0C77  1703               	bsf	3,6	;RP1=1, select bank3
  2039  0C78  01A9               	clrf	USARTInit@BR^(0+384)
  2040  0C79  01AA               	clrf	(USARTInit@BR+1)^(0+384)
  2041                           
  2042                           ;main.c: 43: if (Mode == 0)
  2043  0C7A  0824               	movf	(USARTInit@Mode+1)^(0+384),w
  2044  0C7B  0423               	iorwf	USARTInit@Mode^(0+384),w
  2045  0C7C  1D03               	skipz
  2046  0C7D  2C90               	goto	l3083
  2047                           
  2048                           ;main.c: 44: {
  2049                           ;main.c: 45: BR = (20000000 / (64 * BaudRate)) - 1;
  2050  0C7E  081F               	movf	USARTInit@BaudRate^(0+384),w
  2051  0C7F  00A5               	movwf	??_USARTInit^(0+384)
  2052  0C80  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2053  0C81  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2054  0C82  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2055  0C83  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2056  0C84  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2057  0C85  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2058  0C86  3006               	movlw	6
  2059  0C87                     u3905:	
  2060  0C87  1003               	clrc
  2061  0C88  0DA5               	rlf	??_USARTInit^(0+384),f
  2062  0C89  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2063  0C8A  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2064  0C8B  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2065  0C8C  3EFF               	addlw	-1
  2066  0C8D  1D03               	skipz
  2067  0C8E  2C87               	goto	u3905
  2068  0C8F  2CA3               	goto	L2
  2069  0C90                     l3083:	
  2070                           ;main.c: 47: } else
  2071                           
  2072                           ;main.c: 46: SPBRG = BR;
  2073                           
  2074                           
  2075                           ;main.c: 48: {
  2076                           ;main.c: 49: BR = (20000000 / (16 * BaudRate)) - 1;
  2077  0C90  1683               	bsf	3,5	;RP0=1, select bank3
  2078  0C91  1703               	bsf	3,6	;RP1=1, select bank3
  2079  0C92  081F               	movf	USARTInit@BaudRate^(0+384),w
  2080  0C93  00A5               	movwf	??_USARTInit^(0+384)
  2081  0C94  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2082  0C95  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2083  0C96  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2084  0C97  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2085  0C98  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2086  0C99  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2087  0C9A  3004               	movlw	4
  2088  0C9B                     u3915:	
  2089  0C9B  1003               	clrc
  2090  0C9C  0DA5               	rlf	??_USARTInit^(0+384),f
  2091  0C9D  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2092  0C9E  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2093  0C9F  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2094  0CA0  3EFF               	addlw	-1
  2095  0CA1  1D03               	skipz
  2096  0CA2  2C9B               	goto	u3915
  2097  0CA3                     L2:	
  2098  0CA3  0828               	movf	(??_USARTInit+3)^(0+384),w
  2099  0CA4  0093               	movwf	(___aldiv@divisor+3)^(0+384)
  2100  0CA5  0827               	movf	(??_USARTInit+2)^(0+384),w
  2101  0CA6  0092               	movwf	(___aldiv@divisor+2)^(0+384)
  2102  0CA7  0826               	movf	(??_USARTInit+1)^(0+384),w
  2103  0CA8  0091               	movwf	(___aldiv@divisor+1)^(0+384)
  2104  0CA9  0825               	movf	??_USARTInit^(0+384),w
  2105  0CAA  0090               	movwf	___aldiv@divisor^(0+384)
  2106  0CAB  3001               	movlw	1
  2107  0CAC  0097               	movwf	(___aldiv@dividend+3)^(0+384)
  2108  0CAD  3031               	movlw	49
  2109  0CAE  0096               	movwf	(___aldiv@dividend+2)^(0+384)
  2110  0CAF  302D               	movlw	45
  2111  0CB0  0095               	movwf	(___aldiv@dividend+1)^(0+384)
  2112  0CB1  3000               	movlw	0
  2113  0CB2  0094               	movwf	___aldiv@dividend^(0+384)
  2114  0CB3  120A  158A  25FF  120A  158A  	fcall	___aldiv
  2115  0CB8  1683               	bsf	3,5	;RP0=1, select bank3
  2116  0CB9  1703               	bsf	3,6	;RP1=1, select bank3
  2117  0CBA  0810               	movf	?___aldiv^(0+384),w
  2118  0CBB  3EFF               	addlw	255
  2119  0CBC  00A9               	movwf	USARTInit@BR^(0+384)
  2120  0CBD  0811               	movf	(?___aldiv^(0+384)+1),w
  2121  0CBE  1803               	skipnc
  2122  0CBF  3E01               	addlw	1
  2123  0CC0  3EFF               	addlw	255
  2124  0CC1  00AA               	movwf	(USARTInit@BR+1)^(0+384)
  2125                           
  2126                           ;main.c: 50: SPBRG = BR;
  2127  0CC2  0829               	movf	USARTInit@BR^(0+384),w
  2128  0CC3  1683               	bsf	3,5	;RP0=1, select bank1
  2129  0CC4  1303               	bcf	3,6	;RP1=0, select bank1
  2130  0CC5  0099               	movwf	25	;volatile
  2131                           
  2132                           ;main.c: 51: }
  2133                           ;main.c: 54: TXSTAbits.CSRC = 1;
  2134  0CC6  1798               	bsf	24,7	;volatile
  2135                           
  2136                           ;main.c: 55: TXSTAbits.TX9 = 0;
  2137  0CC7  1318               	bcf	24,6	;volatile
  2138                           
  2139                           ;main.c: 56: TXSTAbits.TXEN = 1;
  2140  0CC8  1698               	bsf	24,5	;volatile
  2141                           
  2142                           ;main.c: 57: TXSTAbits.SYNC = 0;
  2143  0CC9  1218               	bcf	24,4	;volatile
  2144                           
  2145                           ;main.c: 58: TXSTAbits.BRGH = Mode;
  2146  0CCA  1683               	bsf	3,5	;RP0=1, select bank3
  2147  0CCB  1703               	bsf	3,6	;RP1=1, select bank3
  2148  0CCC  0823               	movf	USARTInit@Mode^(0+384),w
  2149  0CCD  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0CCE  1303               	bcf	3,6	;RP1=0, select bank1
  2151  0CCF  1D03               	skipz
  2152  0CD0  1518               	bsf	24,2	;volatile
  2153  0CD1  1903               	skipnz
  2154  0CD2  1118               	bcf	24,2	;volatile
  2155                           
  2156                           ;main.c: 59: TXSTAbits.TRMT = 1;
  2157  0CD3  1498               	bsf	24,1	;volatile
  2158                           
  2159                           ;main.c: 60: TXSTAbits.TX9D = 0;
  2160  0CD4  1018               	bcf	24,0	;volatile
  2161                           
  2162                           ;main.c: 63: RCSTAbits.SPEN = 1;
  2163  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  2164  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  2165  0CD7  1798               	bsf	24,7	;volatile
  2166                           
  2167                           ;main.c: 64: RCSTAbits.RX9 = 0;
  2168  0CD8  1318               	bcf	24,6	;volatile
  2169                           
  2170                           ;main.c: 65: RCSTAbits.SREN = 0;
  2171  0CD9  1298               	bcf	24,5	;volatile
  2172                           
  2173                           ;main.c: 66: RCSTAbits.CREN = 1;
  2174  0CDA  1618               	bsf	24,4	;volatile
  2175                           
  2176                           ;main.c: 67: RCSTAbits.ADDEN = 0;
  2177  0CDB  1198               	bcf	24,3	;volatile
  2178                           
  2179                           ;main.c: 68: RCSTAbits.FERR = 0;
  2180  0CDC  1118               	bcf	24,2	;volatile
  2181                           
  2182                           ;main.c: 69: RCSTAbits.OERR = 0;
  2183  0CDD  1098               	bcf	24,1	;volatile
  2184                           
  2185                           ;main.c: 70: RCSTAbits.RX9D = 0;
  2186  0CDE  1018               	bcf	24,0	;volatile
  2187                           
  2188                           ;main.c: 73: PIE1bits.RCIE = 1;
  2189  0CDF  1683               	bsf	3,5	;RP0=1, select bank1
  2190  0CE0  1303               	bcf	3,6	;RP1=0, select bank1
  2191  0CE1  168C               	bsf	12,5	;volatile
  2192                           
  2193                           ;main.c: 74: PIR1bits.RCIF = 0;
  2194  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  2195  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  2196  0CE4  128C               	bcf	12,5	;volatile
  2197  0CE5  0008               	return
  2198  0CE6                     __end_of_USARTInit:	
  2199                           
  2200                           	psect	text7
  2201  0DFF                     __ptext7:	
  2202 ;; *************** function ___aldiv *****************
  2203 ;; Defined at:
  2204 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\aldiv.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  divisor         4    0[BANK3 ] long 
  2207 ;;  dividend        4    4[BANK3 ] long 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  quotient        4   11[BANK3 ] long 
  2210 ;;  sign            1   10[BANK3 ] unsigned char 
  2211 ;;  counter         1    9[BANK3 ] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  4    0[BANK3 ] long 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2221 ;;      Params:         0       0       0       8       0
  2222 ;;      Locals:         0       0       0       6       0
  2223 ;;      Temps:          0       0       0       1       0
  2224 ;;      Totals:         0       0       0      15       0
  2225 ;;Total ram usage:       15 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    6
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_USARTInit
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           
  2236                           ;psect for function ___aldiv
  2237  0DFF                     ___aldiv:	
  2238                           
  2239                           ;incstack = 0
  2240 ;; hardware stack exceeded
  2241                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2242  0DFF  1683               	bsf	3,5	;RP0=1, select bank3
  2243  0E00  1703               	bsf	3,6	;RP1=1, select bank3
  2244  0E01  019A               	clrf	___aldiv@sign^(0+384)
  2245  0E02  1F93               	btfss	(___aldiv@divisor+3)^(0+384),7
  2246  0E03  2E11               	goto	l430
  2247  0E04  0990               	comf	___aldiv@divisor^(0+384),f
  2248  0E05  0991               	comf	(___aldiv@divisor+1)^(0+384),f
  2249  0E06  0992               	comf	(___aldiv@divisor+2)^(0+384),f
  2250  0E07  0993               	comf	(___aldiv@divisor+3)^(0+384),f
  2251  0E08  0A90               	incf	___aldiv@divisor^(0+384),f
  2252  0E09  1903               	skipnz
  2253  0E0A  0A91               	incf	(___aldiv@divisor+1)^(0+384),f
  2254  0E0B  1903               	skipnz
  2255  0E0C  0A92               	incf	(___aldiv@divisor+2)^(0+384),f
  2256  0E0D  1903               	skipnz
  2257  0E0E  0A93               	incf	(___aldiv@divisor+3)^(0+384),f
  2258  0E0F  019A               	clrf	___aldiv@sign^(0+384)
  2259  0E10  0A9A               	incf	___aldiv@sign^(0+384),f
  2260  0E11                     l430:	
  2261  0E11  1F97               	btfss	(___aldiv@dividend+3)^(0+384),7
  2262  0E12  2E22               	goto	l3045
  2263  0E13  0994               	comf	___aldiv@dividend^(0+384),f
  2264  0E14  0995               	comf	(___aldiv@dividend+1)^(0+384),f
  2265  0E15  0996               	comf	(___aldiv@dividend+2)^(0+384),f
  2266  0E16  0997               	comf	(___aldiv@dividend+3)^(0+384),f
  2267  0E17  0A94               	incf	___aldiv@dividend^(0+384),f
  2268  0E18  1903               	skipnz
  2269  0E19  0A95               	incf	(___aldiv@dividend+1)^(0+384),f
  2270  0E1A  1903               	skipnz
  2271  0E1B  0A96               	incf	(___aldiv@dividend+2)^(0+384),f
  2272  0E1C  1903               	skipnz
  2273  0E1D  0A97               	incf	(___aldiv@dividend+3)^(0+384),f
  2274  0E1E  3001               	movlw	1
  2275  0E1F  0098               	movwf	??___aldiv^(0+384)
  2276  0E20  0818               	movf	??___aldiv^(0+384),w
  2277  0E21  069A               	xorwf	___aldiv@sign^(0+384),f
  2278  0E22                     l3045:	
  2279  0E22  3000               	movlw	0
  2280  0E23  009E               	movwf	(___aldiv@quotient+3)^(0+384)
  2281  0E24  3000               	movlw	0
  2282  0E25  009D               	movwf	(___aldiv@quotient+2)^(0+384)
  2283  0E26  3000               	movlw	0
  2284  0E27  009C               	movwf	(___aldiv@quotient+1)^(0+384)
  2285  0E28  3000               	movlw	0
  2286  0E29  009B               	movwf	___aldiv@quotient^(0+384)
  2287  0E2A  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2288  0E2B  0412               	iorwf	(___aldiv@divisor+2)^(0+384),w
  2289  0E2C  0411               	iorwf	(___aldiv@divisor+1)^(0+384),w
  2290  0E2D  0410               	iorwf	___aldiv@divisor^(0+384),w
  2291  0E2E  1903               	skipnz
  2292  0E2F  2E77               	goto	l3067
  2293  0E30  0199               	clrf	___aldiv@counter^(0+384)
  2294  0E31  0A99               	incf	___aldiv@counter^(0+384),f
  2295  0E32                     l3053:	
  2296  0E32  1B93               	btfsc	(___aldiv@divisor+3)^(0+384),7
  2297  0E33  2E42               	goto	l3055
  2298  0E34  3001               	movlw	1
  2299  0E35  0098               	movwf	??___aldiv^(0+384)
  2300  0E36                     u3825:	
  2301  0E36  1003               	clrc
  2302  0E37  0D90               	rlf	___aldiv@divisor^(0+384),f
  2303  0E38  0D91               	rlf	(___aldiv@divisor+1)^(0+384),f
  2304  0E39  0D92               	rlf	(___aldiv@divisor+2)^(0+384),f
  2305  0E3A  0D93               	rlf	(___aldiv@divisor+3)^(0+384),f
  2306  0E3B  0B98               	decfsz	??___aldiv^(0+384),f
  2307  0E3C  2E36               	goto	u3825
  2308  0E3D  3001               	movlw	1
  2309  0E3E  0098               	movwf	??___aldiv^(0+384)
  2310  0E3F  0818               	movf	??___aldiv^(0+384),w
  2311  0E40  0799               	addwf	___aldiv@counter^(0+384),f
  2312  0E41  2E32               	goto	l3053
  2313  0E42                     l3055:	
  2314  0E42  3001               	movlw	1
  2315  0E43  0098               	movwf	??___aldiv^(0+384)
  2316  0E44                     u3845:	
  2317  0E44  1003               	clrc
  2318  0E45  0D9B               	rlf	___aldiv@quotient^(0+384),f
  2319  0E46  0D9C               	rlf	(___aldiv@quotient+1)^(0+384),f
  2320  0E47  0D9D               	rlf	(___aldiv@quotient+2)^(0+384),f
  2321  0E48  0D9E               	rlf	(___aldiv@quotient+3)^(0+384),f
  2322  0E49  0B98               	decfsz	??___aldiv^(0+384),f
  2323  0E4A  2E44               	goto	u3845
  2324  0E4B  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2325  0E4C  0217               	subwf	(___aldiv@dividend+3)^(0+384),w
  2326  0E4D  1D03               	skipz
  2327  0E4E  2E59               	goto	u3855
  2328  0E4F  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2329  0E50  0216               	subwf	(___aldiv@dividend+2)^(0+384),w
  2330  0E51  1D03               	skipz
  2331  0E52  2E59               	goto	u3855
  2332  0E53  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2333  0E54  0215               	subwf	(___aldiv@dividend+1)^(0+384),w
  2334  0E55  1D03               	skipz
  2335  0E56  2E59               	goto	u3855
  2336  0E57  0810               	movf	___aldiv@divisor^(0+384),w
  2337  0E58  0214               	subwf	___aldiv@dividend^(0+384),w
  2338  0E59                     u3855:	
  2339  0E59  1C03               	skipc
  2340  0E5A  2E6A               	goto	l3063
  2341  0E5B  0810               	movf	___aldiv@divisor^(0+384),w
  2342  0E5C  0294               	subwf	___aldiv@dividend^(0+384),f
  2343  0E5D  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2344  0E5E  1C03               	skipc
  2345  0E5F  0F11               	incfsz	(___aldiv@divisor+1)^(0+384),w
  2346  0E60  0295               	subwf	(___aldiv@dividend+1)^(0+384),f
  2347  0E61  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2348  0E62  1C03               	skipc
  2349  0E63  0F12               	incfsz	(___aldiv@divisor+2)^(0+384),w
  2350  0E64  0296               	subwf	(___aldiv@dividend+2)^(0+384),f
  2351  0E65  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2352  0E66  1C03               	skipc
  2353  0E67  0F13               	incfsz	(___aldiv@divisor+3)^(0+384),w
  2354  0E68  0297               	subwf	(___aldiv@dividend+3)^(0+384),f
  2355  0E69  141B               	bsf	___aldiv@quotient^(0+384),0
  2356  0E6A                     l3063:	
  2357  0E6A  3001               	movlw	1
  2358  0E6B                     u3865:	
  2359  0E6B  1003               	clrc
  2360  0E6C  0C93               	rrf	(___aldiv@divisor+3)^(0+384),f
  2361  0E6D  0C92               	rrf	(___aldiv@divisor+2)^(0+384),f
  2362  0E6E  0C91               	rrf	(___aldiv@divisor+1)^(0+384),f
  2363  0E6F  0C90               	rrf	___aldiv@divisor^(0+384),f
  2364  0E70  3EFF               	addlw	-1
  2365  0E71  1D03               	skipz
  2366  0E72  2E6B               	goto	u3865
  2367  0E73  3001               	movlw	1
  2368  0E74  0299               	subwf	___aldiv@counter^(0+384),f
  2369  0E75  1D03               	btfss	3,2
  2370  0E76  2E42               	goto	l3055
  2371  0E77                     l3067:	
  2372  0E77  081A               	movf	___aldiv@sign^(0+384),w
  2373  0E78  1903               	btfsc	3,2
  2374  0E79  2E85               	goto	l3071
  2375  0E7A  099B               	comf	___aldiv@quotient^(0+384),f
  2376  0E7B  099C               	comf	(___aldiv@quotient+1)^(0+384),f
  2377  0E7C  099D               	comf	(___aldiv@quotient+2)^(0+384),f
  2378  0E7D  099E               	comf	(___aldiv@quotient+3)^(0+384),f
  2379  0E7E  0A9B               	incf	___aldiv@quotient^(0+384),f
  2380  0E7F  1903               	skipnz
  2381  0E80  0A9C               	incf	(___aldiv@quotient+1)^(0+384),f
  2382  0E81  1903               	skipnz
  2383  0E82  0A9D               	incf	(___aldiv@quotient+2)^(0+384),f
  2384  0E83  1903               	skipnz
  2385  0E84  0A9E               	incf	(___aldiv@quotient+3)^(0+384),f
  2386  0E85                     l3071:	
  2387  0E85  081E               	movf	(___aldiv@quotient+3)^(0+384),w
  2388  0E86  0093               	movwf	(?___aldiv+3)^(0+384)
  2389  0E87  081D               	movf	(___aldiv@quotient+2)^(0+384),w
  2390  0E88  0092               	movwf	(?___aldiv+2)^(0+384)
  2391  0E89  081C               	movf	(___aldiv@quotient+1)^(0+384),w
  2392  0E8A  0091               	movwf	(?___aldiv+1)^(0+384)
  2393  0E8B  081B               	movf	___aldiv@quotient^(0+384),w
  2394  0E8C  0090               	movwf	?___aldiv^(0+384)
  2395  0E8D  0008               	return
  2396  0E8E                     __end_of___aldiv:	
  2397                           
  2398                           	psect	text8
  2399  0909                     __ptext8:	
  2400 ;; *************** function _LCDClear *****************
  2401 ;; Defined at:
  2402 ;;		line 179 in file "lcd_4bit.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;		None
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;		None               void
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       0       0       0       0
  2417 ;;      Locals:         0       0       0       0       0
  2418 ;;      Temps:          0       0       0       2       0
  2419 ;;      Totals:         0       0       0       2       0
  2420 ;;Total ram usage:        2 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    8
  2423 ;; This function calls:
  2424 ;;		_lcd_envia_byte
  2425 ;; This function is called by:
  2426 ;;		_inicialize
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _LCDClear
  2432  0909                     _LCDClear:	
  2433                           
  2434                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2435                           
  2436                           ;incstack = 0
  2437 ;; hardware stack exceeded
  2438                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2439  0909  1683               	bsf	3,5	;RP0=1, select bank3
  2440  090A  1703               	bsf	3,6	;RP1=1, select bank3
  2441  090B  0192               	clrf	lcd_envia_byte@n^(0+384)
  2442  090C  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2443  090D  3000               	movlw	0
  2444  090E  120A  158A  2099  120A  158A  	fcall	_lcd_envia_byte
  2445                           
  2446                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2447  0913  3041               	movlw	65
  2448  0914  1683               	bsf	3,5	;RP0=1, select bank3
  2449  0915  1703               	bsf	3,6	;RP1=1, select bank3
  2450  0916  0096               	movwf	(??_LCDClear^(0+384)+1)
  2451  0917  30EE               	movlw	238
  2452  0918  0095               	movwf	??_LCDClear^(0+384)
  2453  0919                     u4307:	
  2454  0919  0B95               	decfsz	??_LCDClear^(0+384),f
  2455  091A  2919               	goto	u4307
  2456  091B  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2457  091C  2919               	goto	u4307
  2458  091D  0000               	nop
  2459                           
  2460                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2461  091E  300C               	movlw	12
  2462  091F  1683               	bsf	3,5	;RP0=1, select bank3
  2463  0920  1703               	bsf	3,6	;RP1=1, select bank3
  2464  0921  0095               	movwf	??_LCDClear^(0+384)
  2465  0922  0815               	movf	??_LCDClear^(0+384),w
  2466  0923  0092               	movwf	lcd_envia_byte@n^(0+384)
  2467  0924  3000               	movlw	0
  2468  0925  120A  158A  2099  120A  158A  	fcall	_lcd_envia_byte
  2469                           
  2470                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2471  092A  30F9               	movlw	249
  2472  092B  1683               	bsf	3,5	;RP0=1, select bank3
  2473  092C  1703               	bsf	3,6	;RP1=1, select bank3
  2474  092D  0095               	movwf	??_LCDClear^(0+384)
  2475  092E                     u4317:	
  2476  092E  0000               	nop
  2477  092F  0B95               	decfsz	??_LCDClear^(0+384),f
  2478  0930  292E               	goto	u4317
  2479  0931  2932               	nop2	;nop
  2480  0932  0000               	nop
  2481                           
  2482                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2483  0933  3006               	movlw	6
  2484  0934  1683               	bsf	3,5	;RP0=1, select bank3
  2485  0935  1703               	bsf	3,6	;RP1=1, select bank3
  2486  0936  0095               	movwf	??_LCDClear^(0+384)
  2487  0937  0815               	movf	??_LCDClear^(0+384),w
  2488  0938  0092               	movwf	lcd_envia_byte@n^(0+384)
  2489  0939  3000               	movlw	0
  2490  093A  120A  158A  2099  120A  158A  	fcall	_lcd_envia_byte
  2491                           
  2492                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2493  093F  30F9               	movlw	249
  2494  0940  1683               	bsf	3,5	;RP0=1, select bank3
  2495  0941  1703               	bsf	3,6	;RP1=1, select bank3
  2496  0942  0095               	movwf	??_LCDClear^(0+384)
  2497  0943                     u4327:	
  2498  0943  0000               	nop
  2499  0944  0B95               	decfsz	??_LCDClear^(0+384),f
  2500  0945  2943               	goto	u4327
  2501  0946  2947               	nop2	;nop
  2502  0947  0000               	nop
  2503  0948  0008               	return
  2504  0949                     __end_of_LCDClear:	
  2505                           
  2506                           	psect	text9
  2507  0899                     __ptext9:	
  2508 ;; *************** function _lcd_envia_byte *****************
  2509 ;; Defined at:
  2510 ;;		line 53 in file "lcd_4bit.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  address         1    wreg     unsigned char 
  2513 ;;  n               1    2[BANK3 ] unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  address         1    4[BANK3 ] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;		None               void
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0, pclath, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2525 ;;      Params:         0       0       0       1       0
  2526 ;;      Locals:         0       0       0       1       0
  2527 ;;      Temps:          0       0       0       1       0
  2528 ;;      Totals:         0       0       0       3       0
  2529 ;;Total ram usage:        3 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    7
  2532 ;; This function calls:
  2533 ;;		_lcd_envia_nibble
  2534 ;; This function is called by:
  2535 ;;		_init_lcd_4bit
  2536 ;;		_lcd_gotoxy
  2537 ;;		_lcd_putc
  2538 ;;		_LCDClear
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           
  2543                           ;psect for function _lcd_envia_byte
  2544  0899                     _lcd_envia_byte:	
  2545                           
  2546                           ;incstack = 0
  2547 ;; hardware stack exceeded
  2548                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2549                           ;lcd_envia_byte@address stored from wreg
  2550  0899  1683               	bsf	3,5	;RP0=1, select bank3
  2551  089A  1703               	bsf	3,6	;RP1=1, select bank3
  2552  089B  0094               	movwf	lcd_envia_byte@address^(0+384)
  2553                           
  2554                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2555  089C  1283               	bcf	3,5	;RP0=0, select bank0
  2556  089D  1303               	bcf	3,6	;RP1=0, select bank0
  2557  089E  1286               	bcf	6,5	;volatile
  2558                           
  2559                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2560  089F  3063               	movlw	99
  2561  08A0  1683               	bsf	3,5	;RP0=1, select bank3
  2562  08A1  1703               	bsf	3,6	;RP1=1, select bank3
  2563  08A2  0093               	movwf	??_lcd_envia_byte^(0+384)
  2564  08A3                     u4337:	
  2565  08A3  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2566  08A4  28A3               	goto	u4337
  2567  08A5  28A6               	nop2	;nop
  2568                           
  2569                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2570  08A6  1683               	bsf	3,5	;RP0=1, select bank3
  2571  08A7  1703               	bsf	3,6	;RP1=1, select bank3
  2572  08A8  0814               	movf	lcd_envia_byte@address^(0+384),w
  2573  08A9  1903               	btfsc	3,2
  2574  08AA  28AF               	goto	l189
  2575  08AB  1283               	bcf	3,5	;RP0=0, select bank0
  2576  08AC  1303               	bcf	3,6	;RP1=0, select bank0
  2577  08AD  1686               	bsf	6,5	;volatile
  2578  08AE  28B2               	goto	l190
  2579  08AF                     l189:	
  2580                           
  2581                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2582  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  2583  08B0  1303               	bcf	3,6	;RP1=0, select bank0
  2584  08B1  1286               	bcf	6,5	;volatile
  2585  08B2                     l190:	
  2586                           
  2587                           ;lcd_4bit.c: 61: _delay(1);
  2588  08B2  0000               	nop
  2589                           
  2590                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2591  08B3  1283               	bcf	3,5	;RP0=0, select bank0
  2592  08B4  1303               	bcf	3,6	;RP1=0, select bank0
  2593  08B5  1206               	bcf	6,4	;volatile
  2594                           
  2595                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2596  08B6  1683               	bsf	3,5	;RP0=1, select bank3
  2597  08B7  1703               	bsf	3,6	;RP1=1, select bank3
  2598  08B8  0812               	movf	lcd_envia_byte@n^(0+384),w
  2599  08B9  0093               	movwf	??_lcd_envia_byte^(0+384)
  2600  08BA  3004               	movlw	4
  2601  08BB                     u3765:	
  2602  08BB  1003               	clrc
  2603  08BC  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2604  08BD  3EFF               	addlw	-1
  2605  08BE  1D03               	skipz
  2606  08BF  28BB               	goto	u3765
  2607  08C0  0813               	movf	??_lcd_envia_byte^(0+384),w
  2608  08C1  120A  158A  2224  120A  158A  	fcall	_lcd_envia_nibble
  2609                           
  2610                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2611  08C6  1683               	bsf	3,5	;RP0=1, select bank3
  2612  08C7  1703               	bsf	3,6	;RP1=1, select bank3
  2613  08C8  0812               	movf	lcd_envia_byte@n^(0+384),w
  2614  08C9  390F               	andlw	15
  2615  08CA  120A  158A  2224   	fcall	_lcd_envia_nibble
  2616  08CD  0008               	return
  2617  08CE                     __end_of_lcd_envia_byte:	
  2618                           
  2619                           	psect	text10
  2620  0A24                     __ptext10:	
  2621 ;; *************** function _lcd_envia_nibble *****************
  2622 ;; Defined at:
  2623 ;;		line 39 in file "lcd_4bit.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  n               1    wreg     unsigned char 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  n               1    1[BANK3 ] unsigned char 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;		None               void
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2637 ;;      Params:         0       0       0       0       0
  2638 ;;      Locals:         0       0       0       1       0
  2639 ;;      Temps:          0       0       0       1       0
  2640 ;;      Totals:         0       0       0       2       0
  2641 ;;Total ram usage:        2 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    6
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_init_lcd_4bit
  2648 ;;		_lcd_envia_byte
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function _lcd_envia_nibble
  2654  0A24                     _lcd_envia_nibble:	
  2655                           
  2656                           ;incstack = 0
  2657 ;; hardware stack exceeded
  2658                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2659                           ;lcd_envia_nibble@n stored from wreg
  2660  0A24  1683               	bsf	3,5	;RP0=1, select bank3
  2661  0A25  1703               	bsf	3,6	;RP1=1, select bank3
  2662  0A26  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2663                           
  2664                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2665  0A27  3000               	movlw	0
  2666  0A28  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2667  0A29  3001               	movlw	1
  2668  0A2A  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2669  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  2670  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  2671  0A2D  0806               	movf	6,w	;volatile
  2672  0A2E  1683               	bsf	3,5	;RP0=1, select bank3
  2673  0A2F  1703               	bsf	3,6	;RP1=1, select bank3
  2674  0A30  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2675  0A31  39FE               	andlw	-2
  2676  0A32  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2677  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  2678  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  2679  0A35  0086               	movwf	6	;volatile
  2680                           
  2681                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2682  0A36  3000               	movlw	0
  2683  0A37  1683               	bsf	3,5	;RP0=1, select bank3
  2684  0A38  1703               	bsf	3,6	;RP1=1, select bank3
  2685  0A39  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2686  0A3A  3001               	movlw	1
  2687  0A3B  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2688  0A3C  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2689  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0A3F  0806               	movf	6,w	;volatile
  2692  0A40  1683               	bsf	3,5	;RP0=1, select bank3
  2693  0A41  1703               	bsf	3,6	;RP1=1, select bank3
  2694  0A42  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2695  0A43  39FD               	andlw	-3
  2696  0A44  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2697  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0A47  0086               	movwf	6	;volatile
  2700                           
  2701                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2702  0A48  3000               	movlw	0
  2703  0A49  1683               	bsf	3,5	;RP0=1, select bank3
  2704  0A4A  1703               	bsf	3,6	;RP1=1, select bank3
  2705  0A4B  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2706  0A4C  3001               	movlw	1
  2707  0A4D  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2708  0A4E  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2709  0A4F  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2710  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0A52  0806               	movf	6,w	;volatile
  2713  0A53  1683               	bsf	3,5	;RP0=1, select bank3
  2714  0A54  1703               	bsf	3,6	;RP1=1, select bank3
  2715  0A55  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2716  0A56  39FB               	andlw	-5
  2717  0A57  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2718  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0A5A  0086               	movwf	6	;volatile
  2721                           
  2722                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2723  0A5B  3000               	movlw	0
  2724  0A5C  1683               	bsf	3,5	;RP0=1, select bank3
  2725  0A5D  1703               	bsf	3,6	;RP1=1, select bank3
  2726  0A5E  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2727  0A5F  3001               	movlw	1
  2728  0A60  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2729  0A61  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2730  0A62  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2731  0A63  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2732  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0A66  0806               	movf	6,w	;volatile
  2735  0A67  1683               	bsf	3,5	;RP0=1, select bank3
  2736  0A68  1703               	bsf	3,6	;RP1=1, select bank3
  2737  0A69  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2738  0A6A  39F7               	andlw	-9
  2739  0A6B  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2740  0A6C  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0A6D  1303               	bcf	3,6	;RP1=0, select bank0
  2742  0A6E  0086               	movwf	6	;volatile
  2743                           
  2744                           ;lcd_4bit.c: 46: _delay(1);
  2745  0A6F  0000               	nop
  2746                           
  2747                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2748  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  2749  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0A72  1606               	bsf	6,4	;volatile
  2751                           
  2752                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2753  0A73  3003               	movlw	3
  2754  0A74  1683               	bsf	3,5	;RP0=1, select bank3
  2755  0A75  1703               	bsf	3,6	;RP1=1, select bank3
  2756  0A76  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2757  0A77                     u4347:	
  2758  0A77  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2759  0A78  2A77               	goto	u4347
  2760                           
  2761                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2762  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  2763  0A7A  1303               	bcf	3,6	;RP1=0, select bank0
  2764  0A7B  1206               	bcf	6,4	;volatile
  2765  0A7C  0008               	return
  2766  0A7D                     __end_of_lcd_envia_nibble:	
  2767                           
  2768                           	psect	text11
  2769  15D4                     __ptext11:	
  2770 ;; *************** function _ADCInit *****************
  2771 ;; Defined at:
  2772 ;;		line 143 in file "main.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;		None               void
  2779 ;; Registers used:
  2780 ;;		None
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2786 ;;      Params:         0       0       0       0       0
  2787 ;;      Locals:         0       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0
  2789 ;;      Totals:         0       0       0       0       0
  2790 ;;Total ram usage:        0 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    6
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_inicialize
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _ADCInit
  2802  15D4                     _ADCInit:	
  2803                           
  2804                           ;main.c: 145: ADCON1bits.ADFM = 1;
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _ADCInit: []
  2808  15D4  1683               	bsf	3,5	;RP0=1, select bank1
  2809  15D5  1303               	bcf	3,6	;RP1=0, select bank1
  2810  15D6  179F               	bsf	31,7	;volatile
  2811                           
  2812                           ;main.c: 146: ADCON1bits.PCFG3 = 0;
  2813  15D7  119F               	bcf	31,3	;volatile
  2814                           
  2815                           ;main.c: 147: ADCON1bits.PCFG2 = 0;
  2816  15D8  111F               	bcf	31,2	;volatile
  2817                           
  2818                           ;main.c: 148: ADCON1bits.PCFG1 = 0;
  2819  15D9  109F               	bcf	31,1	;volatile
  2820                           
  2821                           ;main.c: 149: ADCON1bits.PCFG0 = 0;
  2822  15DA  101F               	bcf	31,0	;volatile
  2823                           
  2824                           ;main.c: 152: ADCON0bits.ADCS1 = 1;
  2825  15DB  1283               	bcf	3,5	;RP0=0, select bank0
  2826  15DC  1303               	bcf	3,6	;RP1=0, select bank0
  2827  15DD  179F               	bsf	31,7	;volatile
  2828                           
  2829                           ;main.c: 153: ADCON0bits.ADCS0 = 0;
  2830  15DE  131F               	bcf	31,6	;volatile
  2831                           
  2832                           ;main.c: 157: ADCON0bits.ADON = 1;
  2833  15DF  141F               	bsf	31,0	;volatile
  2834                           
  2835                           ;main.c: 160: PIE1bits.ADIE = 1;
  2836  15E0  1683               	bsf	3,5	;RP0=1, select bank1
  2837  15E1  1303               	bcf	3,6	;RP1=0, select bank1
  2838  15E2  170C               	bsf	12,6	;volatile
  2839                           
  2840                           ;main.c: 161: PIR1bits.ADIF = 0;
  2841  15E3  1283               	bcf	3,5	;RP0=0, select bank0
  2842  15E4  1303               	bcf	3,6	;RP1=0, select bank0
  2843  15E5  130C               	bcf	12,6	;volatile
  2844  15E6  0008               	return
  2845  15E7                     __end_of_ADCInit:	
  2846                           
  2847                           	psect	text12
  2848  0C06                     __ptext12:	
  2849 ;; *************** function _ativar *****************
  2850 ;; Defined at:
  2851 ;;		line 328 in file "main.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;		None
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;		None               void
  2858 ;; Registers used:
  2859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2865 ;;      Params:         0       0       0       0       0
  2866 ;;      Locals:         0       0       0       0       0
  2867 ;;      Temps:          0       0       0       3       0
  2868 ;;      Totals:         0       0       0       3       0
  2869 ;;Total ram usage:        3 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    8
  2872 ;; This function calls:
  2873 ;;		_ADCRead
  2874 ;;		_USARTWriteString
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _ativar
  2882  0C06                     _ativar:	
  2883                           
  2884                           ;main.c: 329: if (PORTCbits.RC3 == 1) {
  2885                           
  2886                           ;incstack = 0
  2887 ;; hardware stack exceeded
  2888                           ; Regs used in _ativar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2889  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  2890  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  2891  0C08  1D87               	btfss	7,3	;volatile
  2892  0C09  2C3A               	goto	l3251
  2893                           
  2894                           ;main.c: 330: _delay((unsigned long)((300)*(20000000/4000.0)));
  2895  0C0A  3008               	movlw	8
  2896  0C0B  1683               	bsf	3,5	;RP0=1, select bank3
  2897  0C0C  1703               	bsf	3,6	;RP1=1, select bank3
  2898  0C0D  0095               	movwf	(??_ativar^(0+384)+2)
  2899  0C0E  309D               	movlw	157
  2900  0C0F  0094               	movwf	(??_ativar^(0+384)+1)
  2901  0C10  300B               	movlw	11
  2902  0C11  0093               	movwf	??_ativar^(0+384)
  2903  0C12                     u4357:	
  2904  0C12  0B93               	decfsz	??_ativar^(0+384),f
  2905  0C13  2C12               	goto	u4357
  2906  0C14  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2907  0C15  2C12               	goto	u4357
  2908  0C16  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2909  0C17  2C12               	goto	u4357
  2910  0C18  2C19               	nop2
  2911                           
  2912                           ;main.c: 331: if (flag_Start == 0) {
  2913  0C19  1683               	bsf	3,5	;RP0=1, select bank1
  2914  0C1A  1303               	bcf	3,6	;RP1=0, select bank1
  2915  0C1B  0848               	movf	(_flag_Start+1)^(0+128),w
  2916  0C1C  0447               	iorwf	_flag_Start^(0+128),w
  2917  0C1D  1D03               	skipz
  2918  0C1E  2C25               	goto	l3247
  2919                           
  2920                           ;main.c: 333: flag_Start = 1;
  2921  0C1F  3001               	movlw	1
  2922  0C20  00C7               	movwf	_flag_Start^(0+128)
  2923  0C21  3000               	movlw	0
  2924  0C22  00C8               	movwf	(_flag_Start^(0+128)+1)
  2925                           
  2926                           ;main.c: 334: USARTWriteString(LIGAR);
  2927  0C23  3030               	movlw	_LIGAR-__stringbase
  2928  0C24  2C2A               	goto	L3
  2929  0C25                     l3247:	
  2930                           ;main.c: 335: } else {
  2931                           
  2932                           
  2933                           ;main.c: 336: flag_Start = 0;
  2934  0C25  1683               	bsf	3,5	;RP0=1, select bank1
  2935  0C26  1303               	bcf	3,6	;RP1=0, select bank1
  2936  0C27  01C7               	clrf	_flag_Start^(0+128)
  2937  0C28  01C8               	clrf	(_flag_Start+1)^(0+128)
  2938                           
  2939                           ;main.c: 337: USARTWriteString(DESLIGAR);
  2940  0C29  302D               	movlw	_DESLIGAR-__stringbase
  2941  0C2A                     L3:	
  2942  0C2A  0084               	movwf	4
  2943  0C2B  120A  158A  200A  120A  158A  	fcall	stringdir
  2944  0C30  1683               	bsf	3,5	;RP0=1, select bank3
  2945  0C31  1703               	bsf	3,6	;RP1=1, select bank3
  2946  0C32  0091               	movwf	USARTWriteString@str^(0+384)
  2947  0C33  3080               	movlw	128
  2948  0C34  0092               	movwf	(USARTWriteString@str+1)^(0+384)
  2949  0C35  160A  118A  2794  120A  158A  	fcall	_USARTWriteString
  2950  0C3A                     l3251:	
  2951                           
  2952                           ;main.c: 339: }
  2953                           ;main.c: 340: }
  2954                           ;main.c: 342: if (flag_Start == 1) {
  2955  0C3A  3001               	movlw	1
  2956  0C3B  1683               	bsf	3,5	;RP0=1, select bank1
  2957  0C3C  1303               	bcf	3,6	;RP1=0, select bank1
  2958  0C3D  0647               	xorwf	_flag_Start^(0+128),w
  2959  0C3E  0448               	iorwf	(_flag_Start+1)^(0+128),w
  2960  0C3F  1D03               	skipz
  2961  0C40  0008               	return
  2962                           
  2963                           ;main.c: 343: ADCRead(0);
  2964  0C41  3000               	movlw	0
  2965  0C42  1683               	bsf	3,5	;RP0=1, select bank3
  2966  0C43  1703               	bsf	3,6	;RP1=1, select bank3
  2967  0C44  0090               	movwf	ADCRead@ch^(0+384)
  2968  0C45  3000               	movlw	0
  2969  0C46  0091               	movwf	(ADCRead@ch^(0+384)+1)
  2970  0C47  160A  118A  2736  120A  158A  	fcall	_ADCRead
  2971                           
  2972                           ;main.c: 344: _delay((unsigned long)((300)*(20000000/4000.0)));
  2973  0C4C  3008               	movlw	8
  2974  0C4D  1683               	bsf	3,5	;RP0=1, select bank3
  2975  0C4E  1703               	bsf	3,6	;RP1=1, select bank3
  2976  0C4F  0095               	movwf	(??_ativar^(0+384)+2)
  2977  0C50  309D               	movlw	157
  2978  0C51  0094               	movwf	(??_ativar^(0+384)+1)
  2979  0C52  300B               	movlw	11
  2980  0C53  0093               	movwf	??_ativar^(0+384)
  2981  0C54                     u4367:	
  2982  0C54  0B93               	decfsz	??_ativar^(0+384),f
  2983  0C55  2C54               	goto	u4367
  2984  0C56  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2985  0C57  2C54               	goto	u4367
  2986  0C58  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2987  0C59  2C54               	goto	u4367
  2988  0C5A  2C5B               	nop2
  2989                           
  2990                           ;main.c: 345: ADCRead(1);
  2991  0C5B  3001               	movlw	1
  2992  0C5C  1683               	bsf	3,5	;RP0=1, select bank3
  2993  0C5D  1703               	bsf	3,6	;RP1=1, select bank3
  2994  0C5E  0090               	movwf	ADCRead@ch^(0+384)
  2995  0C5F  3000               	movlw	0
  2996  0C60  0091               	movwf	(ADCRead@ch^(0+384)+1)
  2997  0C61  160A  118A  2736  120A  158A  	fcall	_ADCRead
  2998                           
  2999                           ;main.c: 346: _delay((unsigned long)((300)*(20000000/4000.0)));
  3000  0C66  3008               	movlw	8
  3001  0C67  1683               	bsf	3,5	;RP0=1, select bank3
  3002  0C68  1703               	bsf	3,6	;RP1=1, select bank3
  3003  0C69  0095               	movwf	(??_ativar^(0+384)+2)
  3004  0C6A  309D               	movlw	157
  3005  0C6B  0094               	movwf	(??_ativar^(0+384)+1)
  3006  0C6C  300B               	movlw	11
  3007  0C6D  0093               	movwf	??_ativar^(0+384)
  3008  0C6E                     u4377:	
  3009  0C6E  0B93               	decfsz	??_ativar^(0+384),f
  3010  0C6F  2C6E               	goto	u4377
  3011  0C70  0B94               	decfsz	(??_ativar^(0+384)+1),f
  3012  0C71  2C6E               	goto	u4377
  3013  0C72  0B95               	decfsz	(??_ativar^(0+384)+2),f
  3014  0C73  2C6E               	goto	u4377
  3015  0C74  2C75               	nop2
  3016  0C75  0008               	return
  3017  0C76                     __end_of_ativar:	
  3018                           
  3019                           	psect	text13
  3020  1794                     __ptext13:	
  3021 ;; *************** function _USARTWriteString *****************
  3022 ;; Defined at:
  3023 ;;		line 86 in file "main.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  str             2    1[BANK3 ] PTR const unsigned char 
  3026 ;;		 -> ftoa@buf(17), ROM(8192), STR_7(3), STR_3(3), 
  3027 ;;		 -> STR_1(40), 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;		None               void
  3032 ;; Registers used:
  3033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3039 ;;      Params:         0       0       0       2       0
  3040 ;;      Locals:         0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0
  3042 ;;      Totals:         0       0       0       2       0
  3043 ;;Total ram usage:        2 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    7
  3046 ;; This function calls:
  3047 ;;		_USARTWriteChar
  3048 ;; This function is called by:
  3049 ;;		_ativar
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _USARTWriteString
  3055  1794                     _USARTWriteString:	
  3056  1794                     l3127:	
  3057                           ;main.c: 88: while (*str != '\0') {
  3058                           
  3059                           ;incstack = 0
  3060 ;; hardware stack exceeded
  3061                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3062                           
  3063  1794  1683               	bsf	3,5	;RP0=1, select bank3
  3064  1795  1703               	bsf	3,6	;RP1=1, select bank3
  3065  1796  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  3066  1797  1283               	bcf	3,5	;RP0=0, select bank0
  3067  1798  1303               	bcf	3,6	;RP1=0, select bank0
  3068  1799  00FF               	movwf	127
  3069  179A  1683               	bsf	3,5	;RP0=1, select bank3
  3070  179B  1703               	bsf	3,6	;RP1=1, select bank3
  3071  179C  0811               	movf	USARTWriteString@str^(0+384),w
  3072  179D  0084               	movwf	4
  3073  179E  1283               	bcf	3,5	;RP0=0, select bank0
  3074  179F  1303               	bcf	3,6	;RP1=0, select bank0
  3075  17A0  120A  158A  2000  160A  118A  	fcall	stringtab
  3076  17A5  3800               	iorlw	0
  3077  17A6  1903               	btfsc	3,2
  3078  17A7  0008               	return
  3079                           
  3080                           ;main.c: 90: USARTWriteChar(*str);
  3081  17A8  1683               	bsf	3,5	;RP0=1, select bank3
  3082  17A9  1703               	bsf	3,6	;RP1=1, select bank3
  3083  17AA  0812               	movf	(USARTWriteString@str+1)^(0+384),w
  3084  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  3085  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  3086  17AD  00FF               	movwf	127
  3087  17AE  1683               	bsf	3,5	;RP0=1, select bank3
  3088  17AF  1703               	bsf	3,6	;RP1=1, select bank3
  3089  17B0  0811               	movf	USARTWriteString@str^(0+384),w
  3090  17B1  0084               	movwf	4
  3091  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  3092  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  3093  17B4  120A  158A  2000  160A  118A  	fcall	stringtab
  3094  17B9  160A  118A  25B6  160A  118A  	fcall	_USARTWriteChar
  3095                           
  3096                           ;main.c: 91: str++;
  3097  17BE  3001               	movlw	1
  3098  17BF  1683               	bsf	3,5	;RP0=1, select bank3
  3099  17C0  1703               	bsf	3,6	;RP1=1, select bank3
  3100  17C1  0791               	addwf	USARTWriteString@str^(0+384),f
  3101  17C2  1803               	skipnc
  3102  17C3  0A92               	incf	(USARTWriteString@str+1)^(0+384),f
  3103  17C4  3000               	movlw	0
  3104  17C5  0792               	addwf	(USARTWriteString@str+1)^(0+384),f
  3105  17C6  2F94               	goto	l3127
  3106  17C7                     __end_of_USARTWriteString:	
  3107                           
  3108                           	psect	text14
  3109  15B6                     __ptext14:	
  3110 ;; *************** function _USARTWriteChar *****************
  3111 ;; Defined at:
  3112 ;;		line 79 in file "main.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  USARTData       1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  USARTData       1    0[BANK3 ] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;		None               void
  3119 ;; Registers used:
  3120 ;;		wreg
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3126 ;;      Params:         0       0       0       0       0
  3127 ;;      Locals:         0       0       0       1       0
  3128 ;;      Temps:          0       0       0       0       0
  3129 ;;      Totals:         0       0       0       1       0
  3130 ;;Total ram usage:        1 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    6
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_USARTWriteString
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function _USARTWriteChar
  3142  15B6                     _USARTWriteChar:	
  3143                           
  3144                           ;incstack = 0
  3145 ;; hardware stack exceeded
  3146                           ; Regs used in _USARTWriteChar: [wreg]
  3147                           ;USARTWriteChar@USARTData stored from wreg
  3148  15B6  1683               	bsf	3,5	;RP0=1, select bank3
  3149  15B7  1703               	bsf	3,6	;RP1=1, select bank3
  3150  15B8  0090               	movwf	USARTWriteChar@USARTData^(0+384)
  3151  15B9                     l92:	
  3152                           ;main.c: 80: while (!PIR1bits.TXIF);
  3153                           
  3154  15B9  1283               	bcf	3,5	;RP0=0, select bank0
  3155  15BA  1303               	bcf	3,6	;RP1=0, select bank0
  3156  15BB  1E0C               	btfss	12,4	;volatile
  3157  15BC  2DB9               	goto	l92
  3158                           
  3159                           ;main.c: 81: TXREG = USARTData;
  3160  15BD  1683               	bsf	3,5	;RP0=1, select bank3
  3161  15BE  1703               	bsf	3,6	;RP1=1, select bank3
  3162  15BF  0810               	movf	USARTWriteChar@USARTData^(0+384),w
  3163  15C0  1283               	bcf	3,5	;RP0=0, select bank0
  3164  15C1  1303               	bcf	3,6	;RP1=0, select bank0
  3165  15C2  0099               	movwf	25	;volatile
  3166  15C3  0008               	return
  3167  15C4                     __end_of_USARTWriteChar:	
  3168                           
  3169                           	psect	text15
  3170  1736                     __ptext15:	
  3171 ;; *************** function _ADCRead *****************
  3172 ;; Defined at:
  3173 ;;		line 165 in file "main.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  ch              2    0[BANK3 ] int 
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;		None               void
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3187 ;;      Params:         0       0       0       2       0
  3188 ;;      Locals:         0       0       0       0       0
  3189 ;;      Temps:          0       0       0       1       0
  3190 ;;      Totals:         0       0       0       3       0
  3191 ;;Total ram usage:        3 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    6
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_ativar
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _ADCRead
  3203  1736                     _ADCRead:	
  3204                           
  3205                           ;main.c: 168: flag_ch = ch;
  3206                           
  3207                           ;incstack = 0
  3208                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  3209  1736  1683               	bsf	3,5	;RP0=1, select bank3
  3210  1737  1703               	bsf	3,6	;RP1=1, select bank3
  3211  1738  0811               	movf	(ADCRead@ch+1)^(0+384),w
  3212  1739  1683               	bsf	3,5	;RP0=1, select bank1
  3213  173A  1303               	bcf	3,6	;RP1=0, select bank1
  3214  173B  01DB               	clrf	(_flag_ch+1)^(0+128)
  3215  173C  07DB               	addwf	(_flag_ch+1)^(0+128),f
  3216  173D  1683               	bsf	3,5	;RP0=1, select bank3
  3217  173E  1703               	bsf	3,6	;RP1=1, select bank3
  3218  173F  0810               	movf	ADCRead@ch^(0+384),w
  3219  1740  1683               	bsf	3,5	;RP0=1, select bank1
  3220  1741  1303               	bcf	3,6	;RP1=0, select bank1
  3221  1742  01DA               	clrf	_flag_ch^(0+128)
  3222  1743  07DA               	addwf	_flag_ch^(0+128),f
  3223                           
  3224                           ;main.c: 169: ADCON0bits.CHS = ch;
  3225  1744  1683               	bsf	3,5	;RP0=1, select bank3
  3226  1745  1703               	bsf	3,6	;RP1=1, select bank3
  3227  1746  0810               	movf	ADCRead@ch^(0+384),w
  3228  1747  0092               	movwf	??_ADCRead^(0+384)
  3229  1748  0D92               	rlf	??_ADCRead^(0+384),f
  3230  1749  0D92               	rlf	??_ADCRead^(0+384),f
  3231  174A  0D92               	rlf	??_ADCRead^(0+384),f
  3232  174B  1283               	bcf	3,5	;RP0=0, select bank0
  3233  174C  1303               	bcf	3,6	;RP1=0, select bank0
  3234  174D  081F               	movf	31,w	;volatile
  3235  174E  1683               	bsf	3,5	;RP0=1, select bank3
  3236  174F  1703               	bsf	3,6	;RP1=1, select bank3
  3237  1750  0612               	xorwf	??_ADCRead^(0+384),w
  3238  1751  39C7               	andlw	-57
  3239  1752  0612               	xorwf	??_ADCRead^(0+384),w
  3240  1753  1283               	bcf	3,5	;RP0=0, select bank0
  3241  1754  1303               	bcf	3,6	;RP1=0, select bank0
  3242  1755  009F               	movwf	31	;volatile
  3243                           
  3244                           ;main.c: 172: _delay((unsigned long)((25)*(20000000/4000000.0)));
  3245  1756  3029               	movlw	41
  3246  1757  1683               	bsf	3,5	;RP0=1, select bank3
  3247  1758  1703               	bsf	3,6	;RP1=1, select bank3
  3248  1759  0092               	movwf	??_ADCRead^(0+384)
  3249  175A                     u4387:	
  3250  175A  0B92               	decfsz	??_ADCRead^(0+384),f
  3251  175B  2F5A               	goto	u4387
  3252  175C  0000               	nop
  3253                           
  3254                           ;main.c: 173: ADCON0bits.GO = 1;
  3255  175D  1283               	bcf	3,5	;RP0=0, select bank0
  3256  175E  1303               	bcf	3,6	;RP1=0, select bank0
  3257  175F  151F               	bsf	31,2	;volatile
  3258  1760                     l121:	
  3259                           ;main.c: 174: while (ADCON0bits.GO_DONE);
  3260                           
  3261  1760  1D1F               	btfss	31,2	;volatile
  3262  1761  0008               	return
  3263  1762  2F60               	goto	l121
  3264  1763                     __end_of_ADCRead:	
  3265                           
  3266                           	psect	text16
  3267  0052                     __ptext16:	
  3268 ;; *************** function _ISR *****************
  3269 ;; Defined at:
  3270 ;;		line 182 in file "main.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  recebimento     1   35[BANK1 ] unsigned char 
  3275 ;;  aux            16    0[BANK1 ] unsigned char [16]
  3276 ;;  input2          3   32[BANK1 ] float 
  3277 ;;  input           3   29[BANK1 ] float 
  3278 ;;  pre             3   19[BANK1 ] float 
  3279 ;;  status2         2   27[BANK1 ] int 
  3280 ;;  i               2   24[BANK1 ] int 
  3281 ;;  preint          2   22[BANK1 ] int 
  3282 ;;  status          2   17[BANK1 ] int 
  3283 ;;  per             1   36[BANK1 ] PTR unsigned char 
  3284 ;;		 -> ftoa@buf(17), 
  3285 ;;  result          1   26[BANK1 ] PTR unsigned char 
  3286 ;;		 -> ISR@aux(16), 
  3287 ;;  buf             1   16[BANK1 ] PTR unsigned char 
  3288 ;;		 -> ftoa@buf(17), 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;		None               void
  3291 ;; Registers used:
  3292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3298 ;;      Params:         0       0       0       0       0
  3299 ;;      Locals:         0       0      37       0       0
  3300 ;;      Temps:          0       8       0       0       0
  3301 ;;      Totals:         0       8      37       0       0
  3302 ;;Total ram usage:       45 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    5
  3305 ;; This function calls:
  3306 ;;		_FormatarValor
  3307 ;;		_USARTReceiveChar
  3308 ;;		___awtoft
  3309 ;;		___ftdiv
  3310 ;;		___ftmul
  3311 ;;		___fttol
  3312 ;;		_ftoa
  3313 ;;		i1_USARTWriteChar
  3314 ;;		i1_USARTWriteString
  3315 ;;		i1_lcd_escreve_string
  3316 ;;		i1_lcd_gotoxy
  3317 ;; This function is called by:
  3318 ;;		Interrupt level 1
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _ISR
  3324  0052                     _ISR:	
  3325                           
  3326                           ;main.c: 186: if (PIR1bits.ADIF) {
  3327  0052  1F0C               	btfss	12,6	;volatile
  3328  0053  2B62               	goto	i1l2853
  3329                           
  3330                           ;main.c: 189: ADCResult = ((ADRESH << 8) + ADRESL);
  3331  0054  081E               	movf	30,w	;volatile
  3332  0055  1683               	bsf	3,5	;RP0=1, select bank1
  3333  0056  1303               	bcf	3,6	;RP1=0, select bank1
  3334  0057  01C6               	clrf	(_ADCResult+1)^(0+128)
  3335  0058  07C6               	addwf	(_ADCResult+1)^(0+128),f
  3336  0059  081E               	movf	30,w	;volatile
  3337  005A  01C5               	clrf	_ADCResult^(0+128)
  3338  005B  07C5               	addwf	_ADCResult^(0+128),f
  3339                           
  3340                           ;main.c: 192: char * buf;
  3341                           ;main.c: 193: char * per;
  3342                           ;main.c: 196: float input;
  3343                           ;main.c: 197: float input2;
  3344                           ;main.c: 198: float pre;
  3345                           ;main.c: 199: int preint;
  3346                           ;main.c: 200: int status;
  3347                           ;main.c: 201: int status2;
  3348                           ;main.c: 203: int i = 0;
  3349  005C  01B8               	clrf	ISR@i^(0+128)
  3350  005D  01B9               	clrf	(ISR@i+1)^(0+128)
  3351                           
  3352                           ;main.c: 204: unsigned char *result;
  3353                           ;main.c: 205: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  3354  005E  30A0               	movlw	ISR@aux& (0+255)
  3355  005F  0084               	movwf	4
  3356  0060  30AE               	movlw	low ISR@F1361
  3357  0061  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0062  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0063  00D2               	movwf	??_ISR
  3360  0064  0804               	movf	4,w
  3361  0065  00D3               	movwf	??_ISR+1
  3362  0066  3010               	movlw	16
  3363  0067  00D4               	movwf	??_ISR+2
  3364  0068                     u341_20:	
  3365  0068  0852               	movf	??_ISR,w
  3366  0069  0084               	movwf	4
  3367  006A  1783               	bsf	3,7	;select IRP bank3
  3368  006B  0800               	movf	0,w
  3369  006C  00D5               	movwf	??_ISR+3
  3370  006D  0AD2               	incf	??_ISR,f
  3371  006E  0853               	movf	??_ISR+1,w
  3372  006F  0084               	movwf	4
  3373  0070  1383               	bcf	3,7	;select IRP bank1
  3374  0071  0855               	movf	??_ISR+3,w
  3375  0072  0080               	movwf	0
  3376  0073  0AD3               	incf	??_ISR+1,f
  3377  0074  0BD4               	decfsz	??_ISR+2,f
  3378  0075  2868               	goto	u341_20
  3379                           
  3380                           ;main.c: 208: if (flag_ch == 0) {
  3381  0076  1683               	bsf	3,5	;RP0=1, select bank1
  3382  0077  1303               	bcf	3,6	;RP1=0, select bank1
  3383  0078  085B               	movf	(_flag_ch+1)^(0+128),w
  3384  0079  045A               	iorwf	_flag_ch^(0+128),w
  3385  007A  1D03               	skipz
  3386  007B  2A1E               	goto	i1l2811
  3387                           
  3388                           ;main.c: 209: input = ADCResult * 0.0048828125;
  3389  007C  3000               	movlw	0
  3390  007D  1283               	bcf	3,5	;RP0=0, select bank0
  3391  007E  1303               	bcf	3,6	;RP1=0, select bank0
  3392  007F  00A0               	movwf	___ftmul@f1
  3393  0080  30A0               	movlw	160
  3394  0081  00A1               	movwf	___ftmul@f1+1
  3395  0082  303B               	movlw	59
  3396  0083  00A2               	movwf	___ftmul@f1+2
  3397  0084  1683               	bsf	3,5	;RP0=1, select bank1
  3398  0085  1303               	bcf	3,6	;RP1=0, select bank1
  3399  0086  0846               	movf	(_ADCResult+1)^(0+128),w
  3400  0087  01F9               	clrf	___awtoft@c+1
  3401  0088  07F9               	addwf	___awtoft@c+1,f
  3402  0089  0845               	movf	_ADCResult^(0+128),w
  3403  008A  01F8               	clrf	___awtoft@c
  3404  008B  07F8               	addwf	___awtoft@c,f
  3405  008C  160A  118A  2654  120A  118A  	fcall	___awtoft
  3406  0091  0878               	movf	?___awtoft,w
  3407  0092  1283               	bcf	3,5	;RP0=0, select bank0
  3408  0093  1303               	bcf	3,6	;RP1=0, select bank0
  3409  0094  00A3               	movwf	___ftmul@f2
  3410  0095  0879               	movf	?___awtoft+1,w
  3411  0096  00A4               	movwf	___ftmul@f2+1
  3412  0097  087A               	movf	?___awtoft+2,w
  3413  0098  00A5               	movwf	___ftmul@f2+2
  3414  0099  120A  118A  271B  120A  118A  	fcall	___ftmul
  3415  009E  1283               	bcf	3,5	;RP0=0, select bank0
  3416  009F  1303               	bcf	3,6	;RP1=0, select bank0
  3417  00A0  0820               	movf	?___ftmul,w
  3418  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  3419  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  3420  00A3  00BD               	movwf	ISR@input^(0+128)
  3421  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  3422  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  3423  00A6  0821               	movf	?___ftmul+1,w
  3424  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  3425  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  3426  00A9  00BE               	movwf	(ISR@input+1)^(0+128)
  3427  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  3428  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  3429  00AC  0822               	movf	?___ftmul+2,w
  3430  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  3431  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  3432  00AF  00BF               	movwf	(ISR@input+2)^(0+128)
  3433                           
  3434                           ;main.c: 210: buf = ftoa(input, &status);
  3435  00B0  083D               	movf	ISR@input^(0+128),w
  3436  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  3437  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  3438  00B3  00C4               	movwf	ftoa@f
  3439  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  3440  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  3441  00B6  083E               	movf	(ISR@input+1)^(0+128),w
  3442  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  3443  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  3444  00B9  00C5               	movwf	ftoa@f+1
  3445  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  3446  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  3447  00BC  083F               	movf	(ISR@input+2)^(0+128),w
  3448  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  3449  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  3450  00BF  00C6               	movwf	ftoa@f+2
  3451  00C0  30B1               	movlw	ISR@status& (0+255)
  3452  00C1  00D2               	movwf	??_ISR
  3453  00C2  0852               	movf	??_ISR,w
  3454  00C3  00C7               	movwf	ftoa@status
  3455  00C4  120A  158A  2746  120A  118A  	fcall	_ftoa
  3456  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  3457  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  3458  00CB  00D3               	movwf	??_ISR+1
  3459  00CC  0853               	movf	??_ISR+1,w
  3460  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  3461  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  3462  00CF  00B0               	movwf	ISR@buf^(0+128)
  3463                           
  3464                           ;main.c: 211: input2 = ((input * 100) / 1);
  3465  00D0  3000               	movlw	0
  3466  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3467  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3468  00D3  00B0               	movwf	___ftdiv@f2
  3469  00D4  3080               	movlw	128
  3470  00D5  00B1               	movwf	___ftdiv@f2+1
  3471  00D6  303F               	movlw	63
  3472  00D7  00B2               	movwf	___ftdiv@f2+2
  3473  00D8  3000               	movlw	0
  3474  00D9  00A0               	movwf	___ftmul@f1
  3475  00DA  30C8               	movlw	200
  3476  00DB  00A1               	movwf	___ftmul@f1+1
  3477  00DC  3042               	movlw	66
  3478  00DD  00A2               	movwf	___ftmul@f1+2
  3479  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  3480  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  3481  00E0  083D               	movf	ISR@input^(0+128),w
  3482  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  3483  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  3484  00E3  00A3               	movwf	___ftmul@f2
  3485  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  3486  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  3487  00E6  083E               	movf	(ISR@input+1)^(0+128),w
  3488  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  3489  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  3490  00E9  00A4               	movwf	___ftmul@f2+1
  3491  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  3492  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  3493  00EC  083F               	movf	(ISR@input+2)^(0+128),w
  3494  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  3495  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  3496  00EF  00A5               	movwf	___ftmul@f2+2
  3497  00F0  120A  118A  271B  120A  118A  	fcall	___ftmul
  3498  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3499  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3500  00F7  0820               	movf	?___ftmul,w
  3501  00F8  00B3               	movwf	___ftdiv@f1
  3502  00F9  0821               	movf	?___ftmul+1,w
  3503  00FA  00B4               	movwf	___ftdiv@f1+1
  3504  00FB  0822               	movf	?___ftmul+2,w
  3505  00FC  00B5               	movwf	___ftdiv@f1+2
  3506  00FD  120A  158A  268E  120A  118A  	fcall	___ftdiv
  3507  0102  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0103  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0104  0830               	movf	?___ftdiv,w
  3510  0105  1683               	bsf	3,5	;RP0=1, select bank1
  3511  0106  1303               	bcf	3,6	;RP1=0, select bank1
  3512  0107  00C0               	movwf	ISR@input2^(0+128)
  3513  0108  1283               	bcf	3,5	;RP0=0, select bank0
  3514  0109  1303               	bcf	3,6	;RP1=0, select bank0
  3515  010A  0831               	movf	?___ftdiv+1,w
  3516  010B  1683               	bsf	3,5	;RP0=1, select bank1
  3517  010C  1303               	bcf	3,6	;RP1=0, select bank1
  3518  010D  00C1               	movwf	(ISR@input2+1)^(0+128)
  3519  010E  1283               	bcf	3,5	;RP0=0, select bank0
  3520  010F  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0110  0832               	movf	?___ftdiv+2,w
  3522  0111  1683               	bsf	3,5	;RP0=1, select bank1
  3523  0112  1303               	bcf	3,6	;RP1=0, select bank1
  3524  0113  00C2               	movwf	(ISR@input2+2)^(0+128)
  3525                           
  3526                           ;main.c: 212: per = ftoa(input2, &status2);
  3527  0114  0840               	movf	ISR@input2^(0+128),w
  3528  0115  1283               	bcf	3,5	;RP0=0, select bank0
  3529  0116  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0117  00C4               	movwf	ftoa@f
  3531  0118  1683               	bsf	3,5	;RP0=1, select bank1
  3532  0119  1303               	bcf	3,6	;RP1=0, select bank1
  3533  011A  0841               	movf	(ISR@input2+1)^(0+128),w
  3534  011B  1283               	bcf	3,5	;RP0=0, select bank0
  3535  011C  1303               	bcf	3,6	;RP1=0, select bank0
  3536  011D  00C5               	movwf	ftoa@f+1
  3537  011E  1683               	bsf	3,5	;RP0=1, select bank1
  3538  011F  1303               	bcf	3,6	;RP1=0, select bank1
  3539  0120  0842               	movf	(ISR@input2+2)^(0+128),w
  3540  0121  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0122  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0123  00C6               	movwf	ftoa@f+2
  3543  0124  30BB               	movlw	ISR@status2& (0+255)
  3544  0125  00D2               	movwf	??_ISR
  3545  0126  0852               	movf	??_ISR,w
  3546  0127  00C7               	movwf	ftoa@status
  3547  0128  120A  158A  2746  120A  118A  	fcall	_ftoa
  3548  012D  1283               	bcf	3,5	;RP0=0, select bank0
  3549  012E  1303               	bcf	3,6	;RP1=0, select bank0
  3550  012F  00D3               	movwf	??_ISR+1
  3551  0130  0853               	movf	??_ISR+1,w
  3552  0131  1683               	bsf	3,5	;RP0=1, select bank1
  3553  0132  1303               	bcf	3,6	;RP1=0, select bank1
  3554  0133  00C4               	movwf	ISR@per^(0+128)
  3555                           
  3556                           ;main.c: 213: lcd_gotoxy(0, 1);
  3557  0134  01F5               	clrf	i1lcd_gotoxy@y
  3558  0135  0AF5               	incf	i1lcd_gotoxy@y,f
  3559  0136  3000               	movlw	0
  3560  0137  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3561                           
  3562                           ;main.c: 214: lcd_escreve_string("N1:");
  3563  013C  307A               	movlw	low (STR_2-__stringbase)
  3564  013D  00FC               	movwf	i1lcd_escreve_string@y
  3565  013E  3080               	movlw	128
  3566  013F  00FD               	movwf	i1lcd_escreve_string@y+1
  3567  0140  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3568                           
  3569                           ;main.c: 215: USARTWriteString("\nS");
  3570  0145  3085               	movlw	low (STR_3-__stringbase)
  3571  0146  00F1               	movwf	i1USARTWriteString@str
  3572  0147  3080               	movlw	128
  3573  0148  00F2               	movwf	i1USARTWriteString@str+1
  3574  0149  160A  118A  26BB  120A  118A  	fcall	i1_USARTWriteString
  3575                           
  3576                           ;main.c: 216: USARTWriteString(per);
  3577  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3578  014F  1303               	bcf	3,6	;RP1=0, select bank1
  3579  0150  0844               	movf	ISR@per^(0+128),w
  3580  0151  00F1               	movwf	i1USARTWriteString@str
  3581  0152  3000               	movlw	0
  3582  0153  00F2               	movwf	i1USARTWriteString@str+1
  3583  0154  160A  118A  26BB  120A  118A  	fcall	i1_USARTWriteString
  3584                           
  3585                           ;main.c: 217: lcd_gotoxy(4, 1);
  3586  0159  01F5               	clrf	i1lcd_gotoxy@y
  3587  015A  0AF5               	incf	i1lcd_gotoxy@y,f
  3588  015B  3004               	movlw	4
  3589  015C  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3590                           
  3591                           ;main.c: 218: lcd_escreve_string("   ");
  3592  0161  3076               	movlw	low (STR_4-__stringbase)
  3593  0162  00FC               	movwf	i1lcd_escreve_string@y
  3594  0163  3080               	movlw	128
  3595  0164  00FD               	movwf	i1lcd_escreve_string@y+1
  3596  0165  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3597                           
  3598                           ;main.c: 219: lcd_gotoxy(4, 1);
  3599  016A  01F5               	clrf	i1lcd_gotoxy@y
  3600  016B  0AF5               	incf	i1lcd_gotoxy@y,f
  3601  016C  3004               	movlw	4
  3602  016D  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3603                           
  3604                           ;main.c: 220: lcd_escreve_string(FormatarValor(per));
  3605  0172  1683               	bsf	3,5	;RP0=1, select bank1
  3606  0173  1303               	bcf	3,6	;RP1=0, select bank1
  3607  0174  0844               	movf	ISR@per^(0+128),w
  3608  0175  120A  158A  2149  120A  118A  	fcall	_FormatarValor
  3609  017A  00FC               	movwf	i1lcd_escreve_string@y
  3610  017B  3000               	movlw	0
  3611  017C  00FD               	movwf	i1lcd_escreve_string@y+1
  3612  017D  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3613                           
  3614                           ;main.c: 221: lcd_gotoxy(7, 1);
  3615  0182  01F5               	clrf	i1lcd_gotoxy@y
  3616  0183  0AF5               	incf	i1lcd_gotoxy@y,f
  3617  0184  3007               	movlw	7
  3618  0185  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3619                           
  3620                           ;main.c: 222: lcd_escreve_string("%");
  3621  018A  3088               	movlw	low (STR_5-__stringbase)
  3622  018B  00FC               	movwf	i1lcd_escreve_string@y
  3623  018C  3080               	movlw	128
  3624  018D  00FD               	movwf	i1lcd_escreve_string@y+1
  3625  018E  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3626                           
  3627                           ;main.c: 224: lcd_gotoxy(0, 0);
  3628  0193  01F5               	clrf	i1lcd_gotoxy@y
  3629  0194  3000               	movlw	0
  3630  0195  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3631                           
  3632                           ;main.c: 225: pre = input2 * 0.16;
  3633  019A  30D7               	movlw	215
  3634  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3635  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3636  019D  00A0               	movwf	___ftmul@f1
  3637  019E  3023               	movlw	35
  3638  019F  00A1               	movwf	___ftmul@f1+1
  3639  01A0  303E               	movlw	62
  3640  01A1  00A2               	movwf	___ftmul@f1+2
  3641  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  3642  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  3643  01A4  0840               	movf	ISR@input2^(0+128),w
  3644  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  3645  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  3646  01A7  00A3               	movwf	___ftmul@f2
  3647  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  3648  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  3649  01AA  0841               	movf	(ISR@input2+1)^(0+128),w
  3650  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3651  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3652  01AD  00A4               	movwf	___ftmul@f2+1
  3653  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  3654  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  3655  01B0  0842               	movf	(ISR@input2+2)^(0+128),w
  3656  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  3657  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  3658  01B3  00A5               	movwf	___ftmul@f2+2
  3659  01B4  120A  118A  271B  120A  118A  	fcall	___ftmul
  3660  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  3661  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  3662  01BB  0820               	movf	?___ftmul,w
  3663  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  3664  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  3665  01BE  00B3               	movwf	ISR@pre^(0+128)
  3666  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3667  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  3668  01C1  0821               	movf	?___ftmul+1,w
  3669  01C2  1683               	bsf	3,5	;RP0=1, select bank1
  3670  01C3  1303               	bcf	3,6	;RP1=0, select bank1
  3671  01C4  00B4               	movwf	(ISR@pre+1)^(0+128)
  3672  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  3673  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  3674  01C7  0822               	movf	?___ftmul+2,w
  3675  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  3676  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  3677  01CA  00B5               	movwf	(ISR@pre+2)^(0+128)
  3678                           
  3679                           ;main.c: 226: preint = (int) pre;
  3680  01CB  0833               	movf	ISR@pre^(0+128),w
  3681  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  3682  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  3683  01CE  00B0               	movwf	___fttol@f1
  3684  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  3685  01D0  1303               	bcf	3,6	;RP1=0, select bank1
  3686  01D1  0834               	movf	(ISR@pre+1)^(0+128),w
  3687  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  3688  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  3689  01D4  00B1               	movwf	___fttol@f1+1
  3690  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  3691  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  3692  01D7  0835               	movf	(ISR@pre+2)^(0+128),w
  3693  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  3694  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  3695  01DA  00B2               	movwf	___fttol@f1+2
  3696  01DB  120A  158A  2571  120A  118A  	fcall	___fttol
  3697  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  3698  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  3699  01E2  0831               	movf	?___fttol+1,w
  3700  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  3701  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  3702  01E5  01B7               	clrf	(ISR@preint+1)^(0+128)
  3703  01E6  07B7               	addwf	(ISR@preint+1)^(0+128),f
  3704  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  3705  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  3706  01E9  0830               	movf	?___fttol,w
  3707  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  3708  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  3709  01EC  01B6               	clrf	ISR@preint^(0+128)
  3710  01ED  07B6               	addwf	ISR@preint^(0+128),f
  3711  01EE                     i1l2805:	
  3712                           ;main.c: 228: while (preint >= 0) {
  3713                           
  3714  01EE  1BB7               	btfsc	(ISR@preint+1)^(0+128),7
  3715  01EF  2A0D               	goto	i1l2807
  3716                           
  3717                           ;main.c: 229: aux[i] = 0xFF;
  3718  01F0  30FF               	movlw	255
  3719  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3720  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3721  01F3  00D2               	movwf	??_ISR
  3722  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  3723  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  3724  01F6  0838               	movf	ISR@i^(0+128),w
  3725  01F7  3EA0               	addlw	ISR@aux& (0+255)
  3726  01F8  0084               	movwf	4
  3727  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  3728  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  3729  01FB  0852               	movf	??_ISR,w
  3730  01FC  1383               	bcf	3,7	;select IRP bank1
  3731  01FD  0080               	movwf	0
  3732                           
  3733                           ;main.c: 230: preint--;
  3734  01FE  30FF               	movlw	255
  3735  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  3736  0200  1303               	bcf	3,6	;RP1=0, select bank1
  3737  0201  07B6               	addwf	ISR@preint^(0+128),f
  3738  0202  1803               	skipnc
  3739  0203  0AB7               	incf	(ISR@preint+1)^(0+128),f
  3740  0204  30FF               	movlw	255
  3741  0205  07B7               	addwf	(ISR@preint+1)^(0+128),f
  3742                           
  3743                           ;main.c: 231: i++;
  3744  0206  3001               	movlw	1
  3745  0207  07B8               	addwf	ISR@i^(0+128),f
  3746  0208  1803               	skipnc
  3747  0209  0AB9               	incf	(ISR@i+1)^(0+128),f
  3748  020A  3000               	movlw	0
  3749  020B  07B9               	addwf	(ISR@i+1)^(0+128),f
  3750  020C  29EE               	goto	i1l2805
  3751  020D                     i1l2807:	
  3752                           
  3753                           ;main.c: 232: }
  3754                           ;main.c: 233: result = &aux;
  3755  020D  30A0               	movlw	ISR@aux& (0+255)
  3756  020E  1283               	bcf	3,5	;RP0=0, select bank0
  3757  020F  1303               	bcf	3,6	;RP1=0, select bank0
  3758  0210  00D2               	movwf	??_ISR
  3759  0211  0852               	movf	??_ISR,w
  3760  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3761  0213  1303               	bcf	3,6	;RP1=0, select bank1
  3762  0214  00BA               	movwf	ISR@result^(0+128)
  3763                           
  3764                           ;main.c: 234: lcd_escreve_string(result);
  3765  0215  083A               	movf	ISR@result^(0+128),w
  3766  0216  00FC               	movwf	i1lcd_escreve_string@y
  3767  0217  3000               	movlw	0
  3768  0218  00FD               	movwf	i1lcd_escreve_string@y+1
  3769  0219  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3770  021E                     i1l2811:	
  3771                           
  3772                           ;main.c: 236: }
  3773                           ;main.c: 238: if (flag_ch == 1) {
  3774  021E  3001               	movlw	1
  3775  021F  1683               	bsf	3,5	;RP0=1, select bank1
  3776  0220  1303               	bcf	3,6	;RP1=0, select bank1
  3777  0221  065A               	xorwf	_flag_ch^(0+128),w
  3778  0222  045B               	iorwf	(_flag_ch+1)^(0+128),w
  3779  0223  1D03               	skipz
  3780  0224  2B1C               	goto	i1l2837
  3781                           
  3782                           ;main.c: 239: input = ADCResult * 0.0048828125;
  3783  0225  3000               	movlw	0
  3784  0226  1283               	bcf	3,5	;RP0=0, select bank0
  3785  0227  1303               	bcf	3,6	;RP1=0, select bank0
  3786  0228  00A0               	movwf	___ftmul@f1
  3787  0229  30A0               	movlw	160
  3788  022A  00A1               	movwf	___ftmul@f1+1
  3789  022B  303B               	movlw	59
  3790  022C  00A2               	movwf	___ftmul@f1+2
  3791  022D  1683               	bsf	3,5	;RP0=1, select bank1
  3792  022E  1303               	bcf	3,6	;RP1=0, select bank1
  3793  022F  0846               	movf	(_ADCResult+1)^(0+128),w
  3794  0230  01F9               	clrf	___awtoft@c+1
  3795  0231  07F9               	addwf	___awtoft@c+1,f
  3796  0232  0845               	movf	_ADCResult^(0+128),w
  3797  0233  01F8               	clrf	___awtoft@c
  3798  0234  07F8               	addwf	___awtoft@c,f
  3799  0235  160A  118A  2654  120A  118A  	fcall	___awtoft
  3800  023A  0878               	movf	?___awtoft,w
  3801  023B  1283               	bcf	3,5	;RP0=0, select bank0
  3802  023C  1303               	bcf	3,6	;RP1=0, select bank0
  3803  023D  00A3               	movwf	___ftmul@f2
  3804  023E  0879               	movf	?___awtoft+1,w
  3805  023F  00A4               	movwf	___ftmul@f2+1
  3806  0240  087A               	movf	?___awtoft+2,w
  3807  0241  00A5               	movwf	___ftmul@f2+2
  3808  0242  120A  118A  271B  120A  118A  	fcall	___ftmul
  3809  0247  1283               	bcf	3,5	;RP0=0, select bank0
  3810  0248  1303               	bcf	3,6	;RP1=0, select bank0
  3811  0249  0820               	movf	?___ftmul,w
  3812  024A  1683               	bsf	3,5	;RP0=1, select bank1
  3813  024B  1303               	bcf	3,6	;RP1=0, select bank1
  3814  024C  00BD               	movwf	ISR@input^(0+128)
  3815  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3816  024E  1303               	bcf	3,6	;RP1=0, select bank0
  3817  024F  0821               	movf	?___ftmul+1,w
  3818  0250  1683               	bsf	3,5	;RP0=1, select bank1
  3819  0251  1303               	bcf	3,6	;RP1=0, select bank1
  3820  0252  00BE               	movwf	(ISR@input+1)^(0+128)
  3821  0253  1283               	bcf	3,5	;RP0=0, select bank0
  3822  0254  1303               	bcf	3,6	;RP1=0, select bank0
  3823  0255  0822               	movf	?___ftmul+2,w
  3824  0256  1683               	bsf	3,5	;RP0=1, select bank1
  3825  0257  1303               	bcf	3,6	;RP1=0, select bank1
  3826  0258  00BF               	movwf	(ISR@input+2)^(0+128)
  3827                           
  3828                           ;main.c: 241: input2 = ((input * 100) / 1);
  3829  0259  3000               	movlw	0
  3830  025A  1283               	bcf	3,5	;RP0=0, select bank0
  3831  025B  1303               	bcf	3,6	;RP1=0, select bank0
  3832  025C  00B0               	movwf	___ftdiv@f2
  3833  025D  3080               	movlw	128
  3834  025E  00B1               	movwf	___ftdiv@f2+1
  3835  025F  303F               	movlw	63
  3836  0260  00B2               	movwf	___ftdiv@f2+2
  3837  0261  3000               	movlw	0
  3838  0262  00A0               	movwf	___ftmul@f1
  3839  0263  30C8               	movlw	200
  3840  0264  00A1               	movwf	___ftmul@f1+1
  3841  0265  3042               	movlw	66
  3842  0266  00A2               	movwf	___ftmul@f1+2
  3843  0267  1683               	bsf	3,5	;RP0=1, select bank1
  3844  0268  1303               	bcf	3,6	;RP1=0, select bank1
  3845  0269  083D               	movf	ISR@input^(0+128),w
  3846  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3847  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3848  026C  00A3               	movwf	___ftmul@f2
  3849  026D  1683               	bsf	3,5	;RP0=1, select bank1
  3850  026E  1303               	bcf	3,6	;RP1=0, select bank1
  3851  026F  083E               	movf	(ISR@input+1)^(0+128),w
  3852  0270  1283               	bcf	3,5	;RP0=0, select bank0
  3853  0271  1303               	bcf	3,6	;RP1=0, select bank0
  3854  0272  00A4               	movwf	___ftmul@f2+1
  3855  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3856  0274  1303               	bcf	3,6	;RP1=0, select bank1
  3857  0275  083F               	movf	(ISR@input+2)^(0+128),w
  3858  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0278  00A5               	movwf	___ftmul@f2+2
  3861  0279  120A  118A  271B  120A  118A  	fcall	___ftmul
  3862  027E  1283               	bcf	3,5	;RP0=0, select bank0
  3863  027F  1303               	bcf	3,6	;RP1=0, select bank0
  3864  0280  0820               	movf	?___ftmul,w
  3865  0281  00B3               	movwf	___ftdiv@f1
  3866  0282  0821               	movf	?___ftmul+1,w
  3867  0283  00B4               	movwf	___ftdiv@f1+1
  3868  0284  0822               	movf	?___ftmul+2,w
  3869  0285  00B5               	movwf	___ftdiv@f1+2
  3870  0286  120A  158A  268E  120A  118A  	fcall	___ftdiv
  3871  028B  1283               	bcf	3,5	;RP0=0, select bank0
  3872  028C  1303               	bcf	3,6	;RP1=0, select bank0
  3873  028D  0830               	movf	?___ftdiv,w
  3874  028E  1683               	bsf	3,5	;RP0=1, select bank1
  3875  028F  1303               	bcf	3,6	;RP1=0, select bank1
  3876  0290  00C0               	movwf	ISR@input2^(0+128)
  3877  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0293  0831               	movf	?___ftdiv+1,w
  3880  0294  1683               	bsf	3,5	;RP0=1, select bank1
  3881  0295  1303               	bcf	3,6	;RP1=0, select bank1
  3882  0296  00C1               	movwf	(ISR@input2+1)^(0+128)
  3883  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3884  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3885  0299  0832               	movf	?___ftdiv+2,w
  3886  029A  1683               	bsf	3,5	;RP0=1, select bank1
  3887  029B  1303               	bcf	3,6	;RP1=0, select bank1
  3888  029C  00C2               	movwf	(ISR@input2+2)^(0+128)
  3889                           
  3890                           ;main.c: 243: per = ftoa(input2, &status2);
  3891  029D  0840               	movf	ISR@input2^(0+128),w
  3892  029E  1283               	bcf	3,5	;RP0=0, select bank0
  3893  029F  1303               	bcf	3,6	;RP1=0, select bank0
  3894  02A0  00C4               	movwf	ftoa@f
  3895  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  3896  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  3897  02A3  0841               	movf	(ISR@input2+1)^(0+128),w
  3898  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3899  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3900  02A6  00C5               	movwf	ftoa@f+1
  3901  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  3902  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  3903  02A9  0842               	movf	(ISR@input2+2)^(0+128),w
  3904  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  3905  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3906  02AC  00C6               	movwf	ftoa@f+2
  3907  02AD  30BB               	movlw	ISR@status2& (0+255)
  3908  02AE  00D2               	movwf	??_ISR
  3909  02AF  0852               	movf	??_ISR,w
  3910  02B0  00C7               	movwf	ftoa@status
  3911  02B1  120A  158A  2746  120A  118A  	fcall	_ftoa
  3912  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  3913  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  3914  02B8  00D3               	movwf	??_ISR+1
  3915  02B9  0853               	movf	??_ISR+1,w
  3916  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  3917  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  3918  02BC  00C4               	movwf	ISR@per^(0+128)
  3919                           
  3920                           ;main.c: 244: lcd_gotoxy(9, 1);
  3921  02BD  01F5               	clrf	i1lcd_gotoxy@y
  3922  02BE  0AF5               	incf	i1lcd_gotoxy@y,f
  3923  02BF  3009               	movlw	9
  3924  02C0  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3925                           
  3926                           ;main.c: 246: lcd_escreve_string("N2:");
  3927  02C5  307E               	movlw	low (STR_6-__stringbase)
  3928  02C6  00FC               	movwf	i1lcd_escreve_string@y
  3929  02C7  3080               	movlw	128
  3930  02C8  00FD               	movwf	i1lcd_escreve_string@y+1
  3931  02C9  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3932                           
  3933                           ;main.c: 247: USARTWriteString("\nI");
  3934  02CE  3082               	movlw	low (STR_7-__stringbase)
  3935  02CF  00F1               	movwf	i1USARTWriteString@str
  3936  02D0  3080               	movlw	128
  3937  02D1  00F2               	movwf	i1USARTWriteString@str+1
  3938  02D2  160A  118A  26BB  120A  118A  	fcall	i1_USARTWriteString
  3939                           
  3940                           ;main.c: 248: USARTWriteString(per);
  3941  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  3942  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  3943  02D9  0844               	movf	ISR@per^(0+128),w
  3944  02DA  00F1               	movwf	i1USARTWriteString@str
  3945  02DB  3000               	movlw	0
  3946  02DC  00F2               	movwf	i1USARTWriteString@str+1
  3947  02DD  160A  118A  26BB  120A  118A  	fcall	i1_USARTWriteString
  3948                           
  3949                           ;main.c: 249: lcd_gotoxy(13, 1);
  3950  02E2  01F5               	clrf	i1lcd_gotoxy@y
  3951  02E3  0AF5               	incf	i1lcd_gotoxy@y,f
  3952  02E4  300D               	movlw	13
  3953  02E5  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3954                           
  3955                           ;main.c: 250: lcd_escreve_string("   ");
  3956  02EA  3076               	movlw	low (STR_4-__stringbase)
  3957  02EB  00FC               	movwf	i1lcd_escreve_string@y
  3958  02EC  3080               	movlw	128
  3959  02ED  00FD               	movwf	i1lcd_escreve_string@y+1
  3960  02EE  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3961                           
  3962                           ;main.c: 251: lcd_gotoxy(13, 1);
  3963  02F3  01F5               	clrf	i1lcd_gotoxy@y
  3964  02F4  0AF5               	incf	i1lcd_gotoxy@y,f
  3965  02F5  300D               	movlw	13
  3966  02F6  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3967                           
  3968                           ;main.c: 252: lcd_escreve_string(FormatarValor(per));
  3969  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  3970  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  3971  02FD  0844               	movf	ISR@per^(0+128),w
  3972  02FE  120A  158A  2149  120A  118A  	fcall	_FormatarValor
  3973  0303  00FC               	movwf	i1lcd_escreve_string@y
  3974  0304  3000               	movlw	0
  3975  0305  00FD               	movwf	i1lcd_escreve_string@y+1
  3976  0306  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3977                           
  3978                           ;main.c: 253: lcd_gotoxy(16, 1);
  3979  030B  01F5               	clrf	i1lcd_gotoxy@y
  3980  030C  0AF5               	incf	i1lcd_gotoxy@y,f
  3981  030D  3010               	movlw	16
  3982  030E  160A  118A  25E7  120A  118A  	fcall	i1_lcd_gotoxy
  3983                           
  3984                           ;main.c: 254: lcd_escreve_string("%");
  3985  0313  3088               	movlw	low (STR_5-__stringbase)
  3986  0314  00FC               	movwf	i1lcd_escreve_string@y
  3987  0315  3080               	movlw	128
  3988  0316  00FD               	movwf	i1lcd_escreve_string@y+1
  3989  0317  160A  118A  2698  120A  118A  	fcall	i1_lcd_escreve_string
  3990  031C                     i1l2837:	
  3991                           
  3992                           ;main.c: 255: }
  3993                           ;main.c: 262: if (ADCResult < 50 && flag_ch == 0) {
  3994  031C  1683               	bsf	3,5	;RP0=1, select bank1
  3995  031D  1303               	bcf	3,6	;RP1=0, select bank1
  3996  031E  0846               	movf	(_ADCResult+1)^(0+128),w
  3997  031F  3A80               	xorlw	128
  3998  0320  00FF               	movwf	127
  3999  0321  3080               	movlw	128
  4000  0322  027F               	subwf	127,w
  4001  0323  1D03               	skipz
  4002  0324  2B27               	goto	u345_25
  4003  0325  3032               	movlw	50
  4004  0326  0245               	subwf	_ADCResult^(0+128),w
  4005  0327                     u345_25:	
  4006  0327  1803               	skipnc
  4007  0328  2B33               	goto	i1l2843
  4008  0329  1683               	bsf	3,5	;RP0=1, select bank1
  4009  032A  1303               	bcf	3,6	;RP1=0, select bank1
  4010  032B  085B               	movf	(_flag_ch+1)^(0+128),w
  4011  032C  045A               	iorwf	_flag_ch^(0+128),w
  4012  032D  1D03               	skipz
  4013  032E  2B33               	goto	i1l2843
  4014                           
  4015                           ;main.c: 263: PORTDbits.RD2 = 0;
  4016  032F  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0330  1303               	bcf	3,6	;RP1=0, select bank0
  4018  0331  1108               	bcf	8,2	;volatile
  4019                           
  4020                           ;main.c: 264: PORTDbits.RD3 = 1;
  4021  0332  1588               	bsf	8,3	;volatile
  4022  0333                     i1l2843:	
  4023                           
  4024                           ;main.c: 265: }
  4025                           ;main.c: 266: if (ADCResult > 200 && flag_ch == 0) {
  4026  0333  1683               	bsf	3,5	;RP0=1, select bank1
  4027  0334  1303               	bcf	3,6	;RP1=0, select bank1
  4028  0335  0846               	movf	(_ADCResult+1)^(0+128),w
  4029  0336  3A80               	xorlw	128
  4030  0337  00FF               	movwf	127
  4031  0338  3080               	movlw	128
  4032  0339  027F               	subwf	127,w
  4033  033A  1D03               	skipz
  4034  033B  2B3E               	goto	u347_25
  4035  033C  30C9               	movlw	201
  4036  033D  0245               	subwf	_ADCResult^(0+128),w
  4037  033E                     u347_25:	
  4038  033E  1C03               	skipc
  4039  033F  2B4A               	goto	i1l2849
  4040  0340  1683               	bsf	3,5	;RP0=1, select bank1
  4041  0341  1303               	bcf	3,6	;RP1=0, select bank1
  4042  0342  085B               	movf	(_flag_ch+1)^(0+128),w
  4043  0343  045A               	iorwf	_flag_ch^(0+128),w
  4044  0344  1D03               	skipz
  4045  0345  2B4A               	goto	i1l2849
  4046                           
  4047                           ;main.c: 267: PORTDbits.RD2 = 1;
  4048  0346  1283               	bcf	3,5	;RP0=0, select bank0
  4049  0347  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0348  1508               	bsf	8,2	;volatile
  4051                           
  4052                           ;main.c: 268: PORTDbits.RD3 = 0;
  4053  0349  1188               	bcf	8,3	;volatile
  4054  034A                     i1l2849:	
  4055                           
  4056                           ;main.c: 269: }
  4057                           ;main.c: 270: _delay((unsigned long)((200)*(20000000/4000.0)));
  4058  034A  3006               	movlw	6
  4059  034B  1283               	bcf	3,5	;RP0=0, select bank0
  4060  034C  1303               	bcf	3,6	;RP1=0, select bank0
  4061  034D  00D4               	movwf	??_ISR+2
  4062  034E  3013               	movlw	19
  4063  034F  00D3               	movwf	??_ISR+1
  4064  0350  30B1               	movlw	177
  4065  0351  00D2               	movwf	??_ISR
  4066  0352                     u439_27:	
  4067  0352  0BD2               	decfsz	??_ISR,f
  4068  0353  2B52               	goto	u439_27
  4069  0354  0BD3               	decfsz	??_ISR+1,f
  4070  0355  2B52               	goto	u439_27
  4071  0356  0BD4               	decfsz	??_ISR+2,f
  4072  0357  2B52               	goto	u439_27
  4073  0358  2B59               	nop2
  4074                           
  4075                           ;main.c: 271: PIR1bits.ADIF = 0;
  4076  0359  1283               	bcf	3,5	;RP0=0, select bank0
  4077  035A  1303               	bcf	3,6	;RP1=0, select bank0
  4078  035B  130C               	bcf	12,6	;volatile
  4079                           
  4080                           ;main.c: 272: flag_ch = -1;
  4081  035C  30FF               	movlw	255
  4082  035D  1683               	bsf	3,5	;RP0=1, select bank1
  4083  035E  1303               	bcf	3,6	;RP1=0, select bank1
  4084  035F  00DA               	movwf	_flag_ch^(0+128)
  4085  0360  30FF               	movlw	255
  4086  0361  00DB               	movwf	(_flag_ch^(0+128)+1)
  4087  0362                     i1l2853:	
  4088                           
  4089                           ;main.c: 273: }
  4090                           ;main.c: 275: if (PIR1bits.RCIF) {
  4091  0362  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0363  1E8C               	btfss	12,5	;volatile
  4093  0364  2BCC               	goto	i1l142
  4094                           
  4095                           ;main.c: 278: char recebimento = USARTReceiveChar();
  4096  0365  160A  118A  2601  120A  118A  	fcall	_USARTReceiveChar
  4097  036A  1283               	bcf	3,5	;RP0=0, select bank0
  4098  036B  1303               	bcf	3,6	;RP1=0, select bank0
  4099  036C  00D2               	movwf	??_ISR
  4100  036D  0852               	movf	??_ISR,w
  4101  036E  1683               	bsf	3,5	;RP0=1, select bank1
  4102  036F  1303               	bcf	3,6	;RP1=0, select bank1
  4103  0370  00C3               	movwf	ISR@recebimento^(0+128)
  4104                           
  4105                           ;main.c: 279: USARTWriteChar(USARTReceiveChar());
  4106  0371  160A  118A  2601  120A  118A  	fcall	_USARTReceiveChar
  4107  0376  160A  118A  2585  120A  118A  	fcall	i1_USARTWriteChar
  4108                           
  4109                           ;main.c: 280: if (recebimento == LIGAR_BOMBA) {
  4110  037B  3031               	movlw	_LIGAR_BOMBA-__stringbase
  4111  037C  0084               	movwf	4
  4112  037D  120A  158A  200A  120A  118A  	fcall	stringdir
  4113  0382  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0383  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0384  00D2               	movwf	??_ISR
  4116  0385  1683               	bsf	3,5	;RP0=1, select bank1
  4117  0386  1303               	bcf	3,6	;RP1=0, select bank1
  4118  0387  0843               	movf	ISR@recebimento^(0+128),w
  4119  0388  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0389  1303               	bcf	3,6	;RP1=0, select bank0
  4121  038A  0652               	xorwf	??_ISR,w
  4122  038B  1D03               	skipz
  4123  038C  2B8F               	goto	i1l2861
  4124                           
  4125                           ;main.c: 281: PORTDbits.RD2 = 0;
  4126  038D  1108               	bcf	8,2	;volatile
  4127                           
  4128                           ;main.c: 282: PORTDbits.RD3 = 1;
  4129  038E  1588               	bsf	8,3	;volatile
  4130  038F                     i1l2861:	
  4131                           
  4132                           ;main.c: 283: }
  4133                           ;main.c: 284: if (recebimento == DESLIGAR_BOMBA) {
  4134  038F  302E               	movlw	_DESLIGAR_BOMBA-__stringbase
  4135  0390  0084               	movwf	4
  4136  0391  120A  158A  200A  120A  118A  	fcall	stringdir
  4137  0396  00D2               	movwf	??_ISR
  4138  0397  1683               	bsf	3,5	;RP0=1, select bank1
  4139  0398  1303               	bcf	3,6	;RP1=0, select bank1
  4140  0399  0843               	movf	ISR@recebimento^(0+128),w
  4141  039A  1283               	bcf	3,5	;RP0=0, select bank0
  4142  039B  1303               	bcf	3,6	;RP1=0, select bank0
  4143  039C  0652               	xorwf	??_ISR,w
  4144  039D  1D03               	skipz
  4145  039E  2BA1               	goto	i1l2865
  4146                           
  4147                           ;main.c: 285: PORTDbits.RD2 = 1;
  4148  039F  1508               	bsf	8,2	;volatile
  4149                           
  4150                           ;main.c: 286: PORTDbits.RD3 = 0;
  4151  03A0  1188               	bcf	8,3	;volatile
  4152  03A1                     i1l2865:	
  4153                           
  4154                           ;main.c: 287: }
  4155                           ;main.c: 288: if (recebimento == LIGAR) {
  4156  03A1  3030               	movlw	_LIGAR-__stringbase
  4157  03A2  0084               	movwf	4
  4158  03A3  120A  158A  200A  120A  118A  	fcall	stringdir
  4159  03A8  00D2               	movwf	??_ISR
  4160  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  4161  03AA  1303               	bcf	3,6	;RP1=0, select bank1
  4162  03AB  0843               	movf	ISR@recebimento^(0+128),w
  4163  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  4164  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  4165  03AE  0652               	xorwf	??_ISR,w
  4166  03AF  1D03               	skipz
  4167  03B0  2BB7               	goto	i1l2869
  4168                           
  4169                           ;main.c: 289: flag_Start=1;
  4170  03B1  3001               	movlw	1
  4171  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  4172  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  4173  03B4  00C7               	movwf	_flag_Start^(0+128)
  4174  03B5  3000               	movlw	0
  4175  03B6  00C8               	movwf	(_flag_Start^(0+128)+1)
  4176  03B7                     i1l2869:	
  4177                           
  4178                           ;main.c: 290: }
  4179                           ;main.c: 291: if(recebimento == DESLIGAR){
  4180  03B7  302D               	movlw	_DESLIGAR-__stringbase
  4181  03B8  0084               	movwf	4
  4182  03B9  120A  158A  200A  120A  118A  	fcall	stringdir
  4183  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  4184  03BF  00D2               	movwf	??_ISR
  4185  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  4186  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  4187  03C2  0843               	movf	ISR@recebimento^(0+128),w
  4188  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  4189  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  4190  03C5  0652               	xorwf	??_ISR,w
  4191  03C6  1D03               	skipz
  4192  03C7  2BCC               	goto	i1l142
  4193                           
  4194                           ;main.c: 292: flag_Start=0;
  4195  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  4196  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  4197  03CA  01C7               	clrf	_flag_Start^(0+128)
  4198  03CB  01C8               	clrf	(_flag_Start+1)^(0+128)
  4199  03CC                     i1l142:	
  4200  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  4201  03CD  0859               	movf	??_ISR+7,w
  4202  03CE  00FF               	movwf	127
  4203  03CF  0858               	movf	??_ISR+6,w
  4204  03D0  008A               	movwf	10
  4205  03D1  0857               	movf	??_ISR+5,w
  4206  03D2  0084               	movwf	4
  4207  03D3  0E56               	swapf	(??_ISR+4)^0,w
  4208  03D4  0083               	movwf	3
  4209  03D5  0EFE               	swapf	126,f
  4210  03D6  0E7E               	swapf	126,w
  4211  03D7  0009               	retfie
  4212  03D8                     __end_of_ISR:	
  4213                           
  4214                           	psect	intentry
  4215  0004                     __pintentry:	
  4216                           ;incstack = 0
  4217 ;; hardware stack exceeded
  4218                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4219                           
  4220  0004                     interrupt_function:	
  4221  007E                     saved_w	set	btemp
  4222  0004  00FE               	movwf	btemp
  4223  0005  0E03               	swapf	3,w
  4224  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4225  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4226  0008  00D6               	movwf	??_ISR+4
  4227  0009  0804               	movf	4,w
  4228  000A  00D7               	movwf	??_ISR+5
  4229  000B  080A               	movf	10,w
  4230  000C  00D8               	movwf	??_ISR+6
  4231  000D  087F               	movf	btemp+1,w
  4232  000E  00D9               	movwf	??_ISR+7
  4233  000F  120A  118A  2852   	ljmp	_ISR
  4234                           
  4235                           	psect	text17
  4236  1698                     __ptext17:	
  4237 ;; *************** function i1_lcd_escreve_string *****************
  4238 ;; Defined at:
  4239 ;;		line 168 in file "lcd_4bit.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  y               2   12[COMMON] PTR const unsigned char 
  4242 ;;		 -> STR_10(16), STR_9(2), STR_8(4), STR_6(4), 
  4243 ;;		 -> STR_5(2), STR_4(4), STR_2(4), ISR@aux(16), 
  4244 ;;		 -> FormatarValor@aux(40), 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;		None               void
  4249 ;; Registers used:
  4250 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4256 ;;      Params:         2       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0
  4259 ;;      Totals:         2       0       0       0       0
  4260 ;;Total ram usage:        2 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    4
  4263 ;; This function calls:
  4264 ;;		i1_lcd_putc
  4265 ;; This function is called by:
  4266 ;;		_ISR
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function i1_lcd_escreve_string
  4272  1698                     i1_lcd_escreve_string:	
  4273  1698                     i1l2755:	
  4274                           ;lcd_4bit.c: 170: while(*y!='\0')
  4275                           
  4276                           ;incstack = 0
  4277 ;; hardware stack exceeded
  4278                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4279                           
  4280  1698  087D               	movf	i1lcd_escreve_string@y+1,w
  4281  1699  1283               	bcf	3,5	;RP0=0, select bank0
  4282  169A  1303               	bcf	3,6	;RP1=0, select bank0
  4283  169B  00FF               	movwf	127
  4284  169C  087C               	movf	i1lcd_escreve_string@y,w
  4285  169D  0084               	movwf	4
  4286  169E  120A  158A  2000  160A  118A  	fcall	stringtab
  4287  16A3  3800               	iorlw	0
  4288  16A4  1903               	btfsc	3,2
  4289  16A5  0008               	return
  4290                           
  4291                           ;lcd_4bit.c: 171: {
  4292                           ;lcd_4bit.c: 172: lcd_putc(*y);
  4293  16A6  087D               	movf	i1lcd_escreve_string@y+1,w
  4294  16A7  1283               	bcf	3,5	;RP0=0, select bank0
  4295  16A8  1303               	bcf	3,6	;RP1=0, select bank0
  4296  16A9  00FF               	movwf	127
  4297  16AA  087C               	movf	i1lcd_escreve_string@y,w
  4298  16AB  0084               	movwf	4
  4299  16AC  120A  158A  2000  160A  118A  	fcall	stringtab
  4300  16B1  120A  158A  20CE  160A  118A  	fcall	i1_lcd_putc
  4301                           
  4302                           ;lcd_4bit.c: 173: y++;
  4303  16B6  3001               	movlw	1
  4304  16B7  07FC               	addwf	i1lcd_escreve_string@y,f
  4305  16B8  1803               	skipnc
  4306  16B9  0AFD               	incf	i1lcd_escreve_string@y+1,f
  4307  16BA  2E98               	goto	i1l2755
  4308  16BB                     __end_ofi1_lcd_escreve_string:	
  4309                           
  4310                           	psect	text18
  4311  08CE                     __ptext18:	
  4312 ;; *************** function i1_lcd_putc *****************
  4313 ;; Defined at:
  4314 ;;		line 82 in file "lcd_4bit.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  c               1    wreg     unsigned char 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  c               1   11[COMMON] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;		None               void
  4321 ;; Registers used:
  4322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4328 ;;      Params:         0       0       0       0       0
  4329 ;;      Locals:         1       0       0       0       0
  4330 ;;      Temps:          2       0       0       0       0
  4331 ;;      Totals:         3       0       0       0       0
  4332 ;;Total ram usage:        3 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    3
  4335 ;; This function calls:
  4336 ;;		i1_lcd_envia_byte
  4337 ;;		i1_lcd_gotoxy
  4338 ;; This function is called by:
  4339 ;;		i1_lcd_escreve_string
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           
  4344                           ;psect for function i1_lcd_putc
  4345  08CE                     i1_lcd_putc:	
  4346                           
  4347                           ;incstack = 0
  4348 ;; hardware stack exceeded
  4349                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4350                           ;i1lcd_putc@c stored from wreg
  4351  08CE  00FB               	movwf	i1lcd_putc@c
  4352                           
  4353                           ;lcd_4bit.c: 84: switch(c)
  4354  08CF  28FD               	goto	i1l2557
  4355  08D0                     i1l2545:	
  4356                           ;lcd_4bit.c: 85: {
  4357                           ;lcd_4bit.c: 86: case '\f':
  4358                           
  4359                           
  4360                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  4361  08D0  01F2               	clrf	i1lcd_envia_byte@n
  4362  08D1  0AF2               	incf	i1lcd_envia_byte@n,f
  4363  08D2  3000               	movlw	0
  4364  08D3  160A  118A  270B  120A  158A  	fcall	i1_lcd_envia_byte
  4365                           
  4366                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  4367  08D8  300D               	movlw	13
  4368  08D9  00FA               	movwf	??i1_lcd_putc+1
  4369  08DA  30FB               	movlw	251
  4370  08DB  00F9               	movwf	??i1_lcd_putc
  4371  08DC                     u440_27:	
  4372  08DC  0BF9               	decfsz	??i1_lcd_putc,f
  4373  08DD  28DC               	goto	u440_27
  4374  08DE  0BFA               	decfsz	??i1_lcd_putc+1,f
  4375  08DF  28DC               	goto	u440_27
  4376  08E0  28E1               	nop2
  4377                           
  4378                           ;lcd_4bit.c: 89: break;
  4379  08E1  0008               	return
  4380  08E2                     i1l2549:	
  4381                           ;lcd_4bit.c: 91: case '\n':
  4382                           
  4383                           
  4384                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  4385  08E2  3002               	movlw	2
  4386  08E3  00F9               	movwf	??i1_lcd_putc
  4387  08E4  0879               	movf	??i1_lcd_putc,w
  4388  08E5  00F5               	movwf	i1lcd_gotoxy@y
  4389  08E6  3001               	movlw	1
  4390  08E7  160A  118A  25E7   	fcall	i1_lcd_gotoxy
  4391                           
  4392                           ;lcd_4bit.c: 93: break;
  4393  08EA  0008               	return
  4394  08EB                     i1l2551:	
  4395                           ;lcd_4bit.c: 95: case '\b':
  4396                           
  4397                           
  4398                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  4399  08EB  3010               	movlw	16
  4400  08EC  00F9               	movwf	??i1_lcd_putc
  4401  08ED  0879               	movf	??i1_lcd_putc,w
  4402  08EE  00F2               	movwf	i1lcd_envia_byte@n
  4403  08EF  3000               	movlw	0
  4404  08F0  160A  118A  270B   	fcall	i1_lcd_envia_byte
  4405                           
  4406                           ;lcd_4bit.c: 97: break;
  4407  08F3  0008               	return
  4408  08F4                     i1l2553:	
  4409                           ;lcd_4bit.c: 99: default:
  4410                           
  4411                           
  4412                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  4413  08F4  087B               	movf	i1lcd_putc@c,w
  4414  08F5  00F9               	movwf	??i1_lcd_putc
  4415  08F6  0879               	movf	??i1_lcd_putc,w
  4416  08F7  00F2               	movwf	i1lcd_envia_byte@n
  4417  08F8  3001               	movlw	1
  4418  08F9  160A  118A  270B   	fcall	i1_lcd_envia_byte
  4419                           
  4420                           ;lcd_4bit.c: 102: }
  4421                           
  4422                           ;lcd_4bit.c: 101: break;
  4423  08FC  0008               	return
  4424  08FD                     i1l2557:	
  4425  08FD  087B               	movf	i1lcd_putc@c,w
  4426                           
  4427                           ; Switch size 1, requested type "space"
  4428                           ; Number of cases is 3, Range of values is 8 to 12
  4429                           ; switch strategies available:
  4430                           ; Name         Instructions Cycles
  4431                           ; simple_byte           10     6 (average)
  4432                           ; direct_byte           26    11 (fixed)
  4433                           ; jumptable            263     9 (fixed)
  4434                           ;	Chosen strategy is simple_byte
  4435  08FE  3A08               	xorlw	8	; case 8
  4436  08FF  1903               	skipnz
  4437  0900  28EB               	goto	i1l2551
  4438  0901  3A02               	xorlw	2	; case 10
  4439  0902  1903               	skipnz
  4440  0903  28E2               	goto	i1l2549
  4441  0904  3A06               	xorlw	6	; case 12
  4442  0905  1903               	skipnz
  4443  0906  28D0               	goto	i1l2545
  4444  0907  28F4               	goto	i1l2553
  4445  0908  0008               	return
  4446  0909                     __end_ofi1_lcd_putc:	
  4447                           
  4448                           	psect	text19
  4449  15E7                     __ptext19:	
  4450 ;; *************** function i1_lcd_gotoxy *****************
  4451 ;; Defined at:
  4452 ;;		line 70 in file "lcd_4bit.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  x               1    wreg     unsigned char 
  4455 ;;  y               1    5[COMMON] unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  x               1    7[COMMON] unsigned char 
  4458 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4468 ;;      Params:         1       0       0       0       0
  4469 ;;      Locals:         2       0       0       0       0
  4470 ;;      Temps:          1       0       0       0       0
  4471 ;;      Totals:         4       0       0       0       0
  4472 ;;Total ram usage:        4 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    2
  4475 ;; This function calls:
  4476 ;;		i1_lcd_envia_byte
  4477 ;; This function is called by:
  4478 ;;		_ISR
  4479 ;;		i1_lcd_putc
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function i1_lcd_gotoxy
  4485  15E7                     i1_lcd_gotoxy:	
  4486                           
  4487                           ;incstack = 0
  4488 ;; hardware stack exceeded
  4489                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4490                           ;i1lcd_gotoxy@x stored from wreg
  4491  15E7  00F7               	movwf	i1lcd_gotoxy@x
  4492                           
  4493                           ;lcd_4bit.c: 72: unsigned char address;
  4494                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  4495  15E8  0875               	movf	i1lcd_gotoxy@y,w
  4496  15E9  3A01               	xorlw	1
  4497  15EA  1903               	skipnz
  4498  15EB  2DF1               	goto	i1l2175
  4499  15EC  3040               	movlw	64
  4500  15ED  00F6               	movwf	??i1_lcd_gotoxy
  4501  15EE  0876               	movf	??i1_lcd_gotoxy,w
  4502  15EF  00F8               	movwf	i1lcd_gotoxy@address
  4503  15F0  2DF2               	goto	i1l2177
  4504  15F1                     i1l2175:	
  4505                           
  4506                           ;lcd_4bit.c: 75: else address=0;
  4507  15F1  01F8               	clrf	i1lcd_gotoxy@address
  4508  15F2                     i1l2177:	
  4509                           
  4510                           ;lcd_4bit.c: 77: address += x-1;
  4511  15F2  0877               	movf	i1lcd_gotoxy@x,w
  4512  15F3  3EFF               	addlw	255
  4513  15F4  00F6               	movwf	??i1_lcd_gotoxy
  4514  15F5  0876               	movf	??i1_lcd_gotoxy,w
  4515  15F6  07F8               	addwf	i1lcd_gotoxy@address,f
  4516                           
  4517                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  4518  15F7  0878               	movf	i1lcd_gotoxy@address,w
  4519  15F8  3880               	iorlw	128
  4520  15F9  00F6               	movwf	??i1_lcd_gotoxy
  4521  15FA  0876               	movf	??i1_lcd_gotoxy,w
  4522  15FB  00F2               	movwf	i1lcd_envia_byte@n
  4523  15FC  3000               	movlw	0
  4524  15FD  160A  118A  270B   	fcall	i1_lcd_envia_byte
  4525  1600  0008               	return
  4526  1601                     __end_ofi1_lcd_gotoxy:	
  4527                           
  4528                           	psect	text20
  4529  170B                     __ptext20:	
  4530 ;; *************** function i1_lcd_envia_byte *****************
  4531 ;; Defined at:
  4532 ;;		line 53 in file "lcd_4bit.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  address         1    wreg     unsigned char 
  4535 ;;  n               1    2[COMMON] unsigned char 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  address         1    4[COMMON] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;		None               void
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0, pclath, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4547 ;;      Params:         1       0       0       0       0
  4548 ;;      Locals:         1       0       0       0       0
  4549 ;;      Temps:          1       0       0       0       0
  4550 ;;      Totals:         3       0       0       0       0
  4551 ;;Total ram usage:        3 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    1
  4554 ;; This function calls:
  4555 ;;		i1_lcd_envia_nibble
  4556 ;; This function is called by:
  4557 ;;		i1_lcd_gotoxy
  4558 ;;		i1_lcd_putc
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function i1_lcd_envia_byte
  4564  170B                     i1_lcd_envia_byte:	
  4565                           
  4566                           ;incstack = 0
  4567 ;; hardware stack exceeded
  4568                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  4569                           ;i1lcd_envia_byte@address stored from wreg
  4570  170B  00F4               	movwf	i1lcd_envia_byte@address
  4571                           
  4572                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  4573  170C  1283               	bcf	3,5	;RP0=0, select bank0
  4574  170D  1303               	bcf	3,6	;RP1=0, select bank0
  4575  170E  1286               	bcf	6,5	;volatile
  4576                           
  4577                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  4578  170F  3063               	movlw	99
  4579  1710  00F3               	movwf	??i1_lcd_envia_byte
  4580  1711                     u441_27:	
  4581  1711  0BF3               	decfsz	??i1_lcd_envia_byte,f
  4582  1712  2F11               	goto	u441_27
  4583  1713  2F14               	nop2	;nop
  4584                           
  4585                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  4586  1714  0874               	movf	i1lcd_envia_byte@address,w
  4587  1715  1903               	btfsc	3,2
  4588  1716  2F1B               	goto	i1l189
  4589  1717  1283               	bcf	3,5	;RP0=0, select bank0
  4590  1718  1303               	bcf	3,6	;RP1=0, select bank0
  4591  1719  1686               	bsf	6,5	;volatile
  4592  171A  2F1E               	goto	i1l190
  4593  171B                     i1l189:	
  4594                           
  4595                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  4596  171B  1283               	bcf	3,5	;RP0=0, select bank0
  4597  171C  1303               	bcf	3,6	;RP1=0, select bank0
  4598  171D  1286               	bcf	6,5	;volatile
  4599  171E                     i1l190:	
  4600                           
  4601                           ;lcd_4bit.c: 61: _delay(1);
  4602  171E  0000               	nop
  4603                           
  4604                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  4605  171F  1283               	bcf	3,5	;RP0=0, select bank0
  4606  1720  1303               	bcf	3,6	;RP1=0, select bank0
  4607  1721  1206               	bcf	6,4	;volatile
  4608                           
  4609                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  4610  1722  0872               	movf	i1lcd_envia_byte@n,w
  4611  1723  00F3               	movwf	??i1_lcd_envia_byte
  4612  1724  3004               	movlw	4
  4613  1725                     u203_25:	
  4614  1725  1003               	clrc
  4615  1726  0CF3               	rrf	??i1_lcd_envia_byte,f
  4616  1727  3EFF               	addlw	-1
  4617  1728  1D03               	skipz
  4618  1729  2F25               	goto	u203_25
  4619  172A  0873               	movf	??i1_lcd_envia_byte,w
  4620  172B  160A  118A  27C7  160A  118A  	fcall	i1_lcd_envia_nibble
  4621                           
  4622                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  4623  1730  0872               	movf	i1lcd_envia_byte@n,w
  4624  1731  390F               	andlw	15
  4625  1732  160A  118A  27C7   	fcall	i1_lcd_envia_nibble
  4626  1735  0008               	return
  4627  1736                     __end_ofi1_lcd_envia_byte:	
  4628                           
  4629                           	psect	text21
  4630  17C7                     __ptext21:	
  4631 ;; *************** function i1_lcd_envia_nibble *****************
  4632 ;; Defined at:
  4633 ;;		line 39 in file "lcd_4bit.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  n               1    wreg     unsigned char 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  n               1    1[COMMON] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4647 ;;      Params:         0       0       0       0       0
  4648 ;;      Locals:         1       0       0       0       0
  4649 ;;      Temps:          1       0       0       0       0
  4650 ;;      Totals:         2       0       0       0       0
  4651 ;;Total ram usage:        2 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; This function calls:
  4654 ;;		Nothing
  4655 ;; This function is called by:
  4656 ;;		i1_lcd_envia_byte
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           
  4661                           ;psect for function i1_lcd_envia_nibble
  4662  17C7                     i1_lcd_envia_nibble:	
  4663                           
  4664                           ;incstack = 0
  4665 ;; hardware stack exceeded
  4666                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  4667                           ;i1lcd_envia_nibble@n stored from wreg
  4668  17C7  00F1               	movwf	i1lcd_envia_nibble@n
  4669                           
  4670                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  4671  17C8  3000               	movlw	0
  4672  17C9  1871               	btfsc	i1lcd_envia_nibble@n,0
  4673  17CA  3001               	movlw	1
  4674  17CB  00F0               	movwf	??i1_lcd_envia_nibble
  4675  17CC  1283               	bcf	3,5	;RP0=0, select bank0
  4676  17CD  1303               	bcf	3,6	;RP1=0, select bank0
  4677  17CE  0806               	movf	6,w	;volatile
  4678  17CF  0670               	xorwf	??i1_lcd_envia_nibble,w
  4679  17D0  39FE               	andlw	-2
  4680  17D1  0670               	xorwf	??i1_lcd_envia_nibble,w
  4681  17D2  0086               	movwf	6	;volatile
  4682                           
  4683                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  4684  17D3  3000               	movlw	0
  4685  17D4  18F1               	btfsc	i1lcd_envia_nibble@n,1
  4686  17D5  3001               	movlw	1
  4687  17D6  00F0               	movwf	??i1_lcd_envia_nibble
  4688  17D7  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4689  17D8  0806               	movf	6,w	;volatile
  4690  17D9  0670               	xorwf	??i1_lcd_envia_nibble,w
  4691  17DA  39FD               	andlw	-3
  4692  17DB  0670               	xorwf	??i1_lcd_envia_nibble,w
  4693  17DC  0086               	movwf	6	;volatile
  4694                           
  4695                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  4696  17DD  3000               	movlw	0
  4697  17DE  1971               	btfsc	i1lcd_envia_nibble@n,2
  4698  17DF  3001               	movlw	1
  4699  17E0  00F0               	movwf	??i1_lcd_envia_nibble
  4700  17E1  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4701  17E2  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4702  17E3  0806               	movf	6,w	;volatile
  4703  17E4  0670               	xorwf	??i1_lcd_envia_nibble,w
  4704  17E5  39FB               	andlw	-5
  4705  17E6  0670               	xorwf	??i1_lcd_envia_nibble,w
  4706  17E7  0086               	movwf	6	;volatile
  4707                           
  4708                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  4709  17E8  3000               	movlw	0
  4710  17E9  19F1               	btfsc	i1lcd_envia_nibble@n,3
  4711  17EA  3001               	movlw	1
  4712  17EB  00F0               	movwf	??i1_lcd_envia_nibble
  4713  17EC  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4714  17ED  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4715  17EE  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4716  17EF  0806               	movf	6,w	;volatile
  4717  17F0  0670               	xorwf	??i1_lcd_envia_nibble,w
  4718  17F1  39F7               	andlw	-9
  4719  17F2  0670               	xorwf	??i1_lcd_envia_nibble,w
  4720  17F3  0086               	movwf	6	;volatile
  4721                           
  4722                           ;lcd_4bit.c: 46: _delay(1);
  4723  17F4  0000               	nop
  4724                           
  4725                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  4726  17F5  1283               	bcf	3,5	;RP0=0, select bank0
  4727  17F6  1303               	bcf	3,6	;RP1=0, select bank0
  4728  17F7  1606               	bsf	6,4	;volatile
  4729                           
  4730                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  4731  17F8  3003               	movlw	3
  4732  17F9  00F0               	movwf	??i1_lcd_envia_nibble
  4733  17FA                     u442_27:	
  4734  17FA  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  4735  17FB  2FFA               	goto	u442_27
  4736                           
  4737                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  4738  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  4739  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  4740  17FE  1206               	bcf	6,4	;volatile
  4741  17FF  0008               	return
  4742  1800                     __end_ofi1_lcd_envia_nibble:	
  4743                           
  4744                           	psect	text22
  4745  0F46                     __ptext22:	
  4746 ;; *************** function _ftoa *****************
  4747 ;; Defined at:
  4748 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  f               3   36[BANK0 ] float 
  4751 ;;  status          1   39[BANK0 ] PTR int 
  4752 ;;		 -> ISR@status2(2), ISR@status(2), 
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;  l               4   45[BANK0 ] unsigned long 
  4755 ;;  rem             4   41[BANK0 ] unsigned long 
  4756 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4757 ;;		 -> ftoa@buf(17), 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      PTR unsigned char 
  4760 ;; Registers used:
  4761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4767 ;;      Params:         0       4       0       0       0
  4768 ;;      Locals:         0       9       0       0       0
  4769 ;;      Temps:          0       1       0       0       0
  4770 ;;      Totals:         0      14       0       0       0
  4771 ;;Total ram usage:       14 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    3
  4774 ;; This function calls:
  4775 ;;		___ftge
  4776 ;;		___ftmul
  4777 ;;		___ftneg
  4778 ;;		___ftsub
  4779 ;;		___fttol
  4780 ;;		___lltoft
  4781 ;;		_sprintf
  4782 ;; This function is called by:
  4783 ;;		_ISR
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           
  4788                           ;psect for function _ftoa
  4789  0F46                     _ftoa:	
  4790                           
  4791                           ;incstack = 0
  4792 ;; hardware stack exceeded
  4793                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4794  0F46  30C9               	movlw	ftoa@buf& (0+255)
  4795  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  4796  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  4797  0F49  00C8               	movwf	??_ftoa
  4798  0F4A  0848               	movf	??_ftoa,w
  4799  0F4B  00D1               	movwf	ftoa@cp
  4800  0F4C  0844               	movf	ftoa@f,w
  4801  0F4D  00F0               	movwf	___ftge@ff1
  4802  0F4E  0845               	movf	ftoa@f+1,w
  4803  0F4F  00F1               	movwf	___ftge@ff1+1
  4804  0F50  0846               	movf	ftoa@f+2,w
  4805  0F51  00F2               	movwf	___ftge@ff1+2
  4806  0F52  3000               	movlw	0
  4807  0F53  00F3               	movwf	___ftge@ff2
  4808  0F54  3000               	movlw	0
  4809  0F55  00F4               	movwf	___ftge@ff2+1
  4810  0F56  3000               	movlw	0
  4811  0F57  00F5               	movwf	___ftge@ff2+2
  4812  0F58  120A  158A  227D  120A  158A  	fcall	___ftge
  4813  0F5D  1803               	btfsc	3,0
  4814  0F5E  2F7F               	goto	i1l2611
  4815  0F5F  302D               	movlw	45
  4816  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  4817  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  4818  0F62  00C8               	movwf	??_ftoa
  4819  0F63  0851               	movf	ftoa@cp,w
  4820  0F64  0084               	movwf	4
  4821  0F65  0848               	movf	??_ftoa,w
  4822  0F66  1383               	bcf	3,7	;select IRP bank0
  4823  0F67  0080               	movwf	0
  4824  0F68  3001               	movlw	1
  4825  0F69  00C8               	movwf	??_ftoa
  4826  0F6A  0848               	movf	??_ftoa,w
  4827  0F6B  07D1               	addwf	ftoa@cp,f
  4828  0F6C  0844               	movf	ftoa@f,w
  4829  0F6D  00F0               	movwf	___ftneg@f1
  4830  0F6E  0845               	movf	ftoa@f+1,w
  4831  0F6F  00F1               	movwf	___ftneg@f1+1
  4832  0F70  0846               	movf	ftoa@f+2,w
  4833  0F71  00F2               	movwf	___ftneg@f1+2
  4834  0F72  160A  118A  258D  120A  158A  	fcall	___ftneg
  4835  0F77  0870               	movf	?___ftneg,w
  4836  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4837  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4838  0F7A  00C4               	movwf	ftoa@f
  4839  0F7B  0871               	movf	?___ftneg+1,w
  4840  0F7C  00C5               	movwf	ftoa@f+1
  4841  0F7D  0872               	movf	?___ftneg+2,w
  4842  0F7E  00C6               	movwf	ftoa@f+2
  4843  0F7F                     i1l2611:	
  4844  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0F81  0844               	movf	ftoa@f,w
  4847  0F82  00B0               	movwf	___fttol@f1
  4848  0F83  0845               	movf	ftoa@f+1,w
  4849  0F84  00B1               	movwf	___fttol@f1+1
  4850  0F85  0846               	movf	ftoa@f+2,w
  4851  0F86  00B2               	movwf	___fttol@f1+2
  4852  0F87  120A  158A  2571  120A  158A  	fcall	___fttol
  4853  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  4854  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  4855  0F8E  0833               	movf	?___fttol+3,w
  4856  0F8F  00D0               	movwf	ftoa@l+3
  4857  0F90  0832               	movf	?___fttol+2,w
  4858  0F91  00CF               	movwf	ftoa@l+2
  4859  0F92  0831               	movf	?___fttol+1,w
  4860  0F93  00CE               	movwf	ftoa@l+1
  4861  0F94  0830               	movf	?___fttol,w
  4862  0F95  00CD               	movwf	ftoa@l
  4863  0F96  0850               	movf	ftoa@l+3,w
  4864  0F97  00FB               	movwf	___lltoft@c+3
  4865  0F98  084F               	movf	ftoa@l+2,w
  4866  0F99  00FA               	movwf	___lltoft@c+2
  4867  0F9A  084E               	movf	ftoa@l+1,w
  4868  0F9B  00F9               	movwf	___lltoft@c+1
  4869  0F9C  084D               	movf	ftoa@l,w
  4870  0F9D  00F8               	movwf	___lltoft@c
  4871  0F9E  160A  118A  26E0  120A  158A  	fcall	___lltoft
  4872  0FA3  0878               	movf	?___lltoft,w
  4873  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  4874  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  4875  0FA6  00A7               	movwf	___ftsub@f2
  4876  0FA7  0879               	movf	?___lltoft+1,w
  4877  0FA8  00A8               	movwf	___ftsub@f2+1
  4878  0FA9  087A               	movf	?___lltoft+2,w
  4879  0FAA  00A9               	movwf	___ftsub@f2+2
  4880  0FAB  0844               	movf	ftoa@f,w
  4881  0FAC  00AA               	movwf	___ftsub@f1
  4882  0FAD  0845               	movf	ftoa@f+1,w
  4883  0FAE  00AB               	movwf	___ftsub@f1+1
  4884  0FAF  0846               	movf	ftoa@f+2,w
  4885  0FB0  00AC               	movwf	___ftsub@f1+2
  4886  0FB1  160A  118A  261C  120A  158A  	fcall	___ftsub
  4887  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  4888  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  4889  0FB8  0827               	movf	?___ftsub,w
  4890  0FB9  00C4               	movwf	ftoa@f
  4891  0FBA  0828               	movf	?___ftsub+1,w
  4892  0FBB  00C5               	movwf	ftoa@f+1
  4893  0FBC  0829               	movf	?___ftsub+2,w
  4894  0FBD  00C6               	movwf	ftoa@f+2
  4895  0FBE  0844               	movf	ftoa@f,w
  4896  0FBF  00A3               	movwf	___ftmul@f2
  4897  0FC0  0845               	movf	ftoa@f+1,w
  4898  0FC1  00A4               	movwf	___ftmul@f2+1
  4899  0FC2  0846               	movf	ftoa@f+2,w
  4900  0FC3  00A5               	movwf	___ftmul@f2+2
  4901  0FC4  3024               	movlw	36
  4902  0FC5  00A0               	movwf	___ftmul@f1
  4903  0FC6  3074               	movlw	116
  4904  0FC7  00A1               	movwf	___ftmul@f1+1
  4905  0FC8  3049               	movlw	73
  4906  0FC9  00A2               	movwf	___ftmul@f1+2
  4907  0FCA  120A  118A  271B  120A  158A  	fcall	___ftmul
  4908  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0FD1  0820               	movf	?___ftmul,w
  4911  0FD2  00B0               	movwf	___fttol@f1
  4912  0FD3  0821               	movf	?___ftmul+1,w
  4913  0FD4  00B1               	movwf	___fttol@f1+1
  4914  0FD5  0822               	movf	?___ftmul+2,w
  4915  0FD6  00B2               	movwf	___fttol@f1+2
  4916  0FD7  120A  158A  2571  120A  158A  	fcall	___fttol
  4917  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4918  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4919  0FDE  0833               	movf	?___fttol+3,w
  4920  0FDF  00CC               	movwf	ftoa@rem+3
  4921  0FE0  0832               	movf	?___fttol+2,w
  4922  0FE1  00CB               	movwf	ftoa@rem+2
  4923  0FE2  0831               	movf	?___fttol+1,w
  4924  0FE3  00CA               	movwf	ftoa@rem+1
  4925  0FE4  0830               	movf	?___fttol,w
  4926  0FE5  00C9               	movwf	ftoa@rem
  4927  0FE6  306B               	movlw	(STR_11-__stringbase)& (0+255)
  4928  0FE7  00C8               	movwf	??_ftoa
  4929  0FE8  0848               	movf	??_ftoa,w
  4930  0FE9  00AA               	movwf	sprintf@f
  4931  0FEA  0850               	movf	ftoa@l+3,w
  4932  0FEB  00AE               	movwf	?_sprintf+4
  4933  0FEC  084F               	movf	ftoa@l+2,w
  4934  0FED  00AD               	movwf	?_sprintf+3
  4935  0FEE  084E               	movf	ftoa@l+1,w
  4936  0FEF  00AC               	movwf	?_sprintf+2
  4937  0FF0  084D               	movf	ftoa@l,w
  4938  0FF1  00AB               	movwf	?_sprintf+1
  4939  0FF2  084C               	movf	ftoa@rem+3,w
  4940  0FF3  00B2               	movwf	?_sprintf+8
  4941  0FF4  084B               	movf	ftoa@rem+2,w
  4942  0FF5  00B1               	movwf	?_sprintf+7
  4943  0FF6  084A               	movf	ftoa@rem+1,w
  4944  0FF7  00B0               	movwf	?_sprintf+6
  4945  0FF8  0849               	movf	ftoa@rem,w
  4946  0FF9  00AF               	movwf	?_sprintf+5
  4947  0FFA  0851               	movf	ftoa@cp,w
  4948  0FFB  120A  118A  23D8   	fcall	_sprintf
  4949  0FFE  30C9               	movlw	ftoa@buf& (0+255)
  4950  0FFF  0008               	return
  4951  1000                     __end_of_ftoa:	
  4952                           
  4953                           	psect	text23
  4954  03D8                     __ptext23:	
  4955 ;; *************** function _sprintf *****************
  4956 ;; Defined at:
  4957 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  sp              1    wreg     PTR unsigned char 
  4960 ;;		 -> ftoa@buf(17), 
  4961 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4962 ;;		 -> STR_11(11), 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4965 ;;		 -> ftoa@buf(17), 
  4966 ;;  _val            4   26[BANK0 ] struct .
  4967 ;;  prec            2   33[BANK0 ] int 
  4968 ;;  width           2   31[BANK0 ] int 
  4969 ;;  c               1   35[BANK0 ] char 
  4970 ;;  ap              1   25[BANK0 ] PTR void [1]
  4971 ;;		 -> ?_sprintf(2), 
  4972 ;;  flag            1   24[BANK0 ] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  2   10[BANK0 ] int 
  4975 ;; Registers used:
  4976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4982 ;;      Params:         0       9       0       0       0
  4983 ;;      Locals:         0      12       0       0       0
  4984 ;;      Temps:          0       5       0       0       0
  4985 ;;      Totals:         0      26       0       0       0
  4986 ;;Total ram usage:       26 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    1
  4989 ;; This function calls:
  4990 ;;		___lldiv
  4991 ;;		___llmod
  4992 ;;		___wmul
  4993 ;;		_isdigit
  4994 ;; This function is called by:
  4995 ;;		_ftoa
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _sprintf
  5001  03D8                     _sprintf:	
  5002                           
  5003                           ;incstack = 0
  5004 ;; hardware stack exceeded
  5005                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5006                           ;sprintf@sp stored from wreg
  5007  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  5008  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  5009  03DA  00BE               	movwf	sprintf@sp
  5010                           
  5011                           ;doprnt.c: 494: va_list ap;
  5012                           ;doprnt.c: 499: signed char c;
  5013                           ;doprnt.c: 501: int width;
  5014                           ;doprnt.c: 504: int prec;
  5015                           ;doprnt.c: 508: unsigned char flag;
  5016                           ;doprnt.c: 527: union {
  5017                           ;doprnt.c: 528: unsigned long _val;
  5018                           ;doprnt.c: 529: struct {
  5019                           ;doprnt.c: 530: const char * _cp;
  5020                           ;doprnt.c: 531: unsigned _len;
  5021                           ;doprnt.c: 532: } _str;
  5022                           ;doprnt.c: 533: } _val;
  5023                           ;doprnt.c: 542: *ap = __va_start();
  5024  03DB  302B               	movlw	(?_sprintf+1)& (0+255)
  5025  03DC  00B3               	movwf	??_sprintf
  5026  03DD  0833               	movf	??_sprintf,w
  5027  03DE  00B9               	movwf	sprintf@ap
  5028  03DF                     i1l2391:	
  5029                           ;doprnt.c: 545: while(c = *f++) {
  5030                           
  5031  03DF  3001               	movlw	1
  5032  03E0  07AA               	addwf	sprintf@f,f
  5033  03E1  30FF               	movlw	-1
  5034  03E2  072A               	addwf	sprintf@f,w
  5035  03E3  0084               	movwf	4
  5036  03E4  120A  158A  200A  120A  118A  	fcall	stringdir
  5037  03E9  00B3               	movwf	??_sprintf
  5038  03EA  0833               	movf	??_sprintf,w
  5039  03EB  00C3               	movwf	sprintf@c
  5040  03EC  08C3               	movf	sprintf@c,f
  5041  03ED  1903               	btfsc	3,2
  5042  03EE  2E0F               	goto	i1l2393
  5043                           
  5044                           ;doprnt.c: 547: if(c != '%')
  5045  03EF  0843               	movf	sprintf@c,w
  5046  03F0  3A25               	xorlw	37
  5047  03F1  1903               	skipnz
  5048  03F2  2BFF               	goto	i1l2301
  5049                           
  5050                           ;doprnt.c: 549: {
  5051                           ;doprnt.c: 550: ((*sp++ = (c)));
  5052  03F3  0843               	movf	sprintf@c,w
  5053  03F4  00B3               	movwf	??_sprintf
  5054  03F5  083E               	movf	sprintf@sp,w
  5055  03F6  0084               	movwf	4
  5056  03F7  0833               	movf	??_sprintf,w
  5057  03F8  1383               	bcf	3,7	;select IRP bank0
  5058  03F9  0080               	movwf	0
  5059  03FA  3001               	movlw	1
  5060  03FB  00B3               	movwf	??_sprintf
  5061  03FC  0833               	movf	??_sprintf,w
  5062  03FD  07BE               	addwf	sprintf@sp,f
  5063                           
  5064                           ;doprnt.c: 551: continue;
  5065  03FE  2BDF               	goto	i1l2391
  5066  03FF                     i1l2301:	
  5067                           
  5068                           ;doprnt.c: 552: }
  5069                           ;doprnt.c: 555: width = 0;
  5070  03FF  01BF               	clrf	sprintf@width
  5071  0400  01C0               	clrf	sprintf@width+1
  5072                           
  5073                           ;doprnt.c: 557: flag = 0;
  5074  0401  01B8               	clrf	sprintf@flag
  5075                           
  5076                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5077  0402  082A               	movf	sprintf@f,w
  5078  0403  0084               	movwf	4
  5079  0404  120A  158A  200A  120A  118A  	fcall	stringdir
  5080  0409  160A  118A  25A8  120A  118A  	fcall	_isdigit
  5081  040E  1C03               	btfss	3,0
  5082  040F  2C52               	goto	i1l2315
  5083                           
  5084                           ;doprnt.c: 607: width = 0;
  5085  0410  1283               	bcf	3,5	;RP0=0, select bank0
  5086  0411  1303               	bcf	3,6	;RP1=0, select bank0
  5087  0412  01BF               	clrf	sprintf@width
  5088  0413  01C0               	clrf	sprintf@width+1
  5089  0414                     i1l2307:	
  5090                           ;doprnt.c: 608: do {
  5091                           
  5092                           
  5093                           ;doprnt.c: 609: width *= 10;
  5094  0414  300A               	movlw	10
  5095  0415  00F0               	movwf	___wmul@multiplier
  5096  0416  3000               	movlw	0
  5097  0417  00F1               	movwf	___wmul@multiplier+1
  5098  0418  1283               	bcf	3,5	;RP0=0, select bank0
  5099  0419  1303               	bcf	3,6	;RP1=0, select bank0
  5100  041A  0840               	movf	sprintf@width+1,w
  5101  041B  01F3               	clrf	___wmul@multiplicand+1
  5102  041C  07F3               	addwf	___wmul@multiplicand+1,f
  5103  041D  083F               	movf	sprintf@width,w
  5104  041E  01F2               	clrf	___wmul@multiplicand
  5105  041F  07F2               	addwf	___wmul@multiplicand,f
  5106  0420  160A  118A  2675  120A  118A  	fcall	___wmul
  5107  0425  0871               	movf	?___wmul+1,w
  5108  0426  1283               	bcf	3,5	;RP0=0, select bank0
  5109  0427  1303               	bcf	3,6	;RP1=0, select bank0
  5110  0428  01C0               	clrf	sprintf@width+1
  5111  0429  07C0               	addwf	sprintf@width+1,f
  5112  042A  0870               	movf	?___wmul,w
  5113  042B  01BF               	clrf	sprintf@width
  5114  042C  07BF               	addwf	sprintf@width,f
  5115                           
  5116                           ;doprnt.c: 610: width += *f++ - '0';
  5117  042D  082A               	movf	sprintf@f,w
  5118  042E  0084               	movwf	4
  5119  042F  120A  158A  200A  120A  118A  	fcall	stringdir
  5120  0434  3ED0               	addlw	208
  5121  0435  00B3               	movwf	??_sprintf
  5122  0436  30FF               	movlw	255
  5123  0437  1803               	skipnc
  5124  0438  3000               	movlw	0
  5125  0439  00B4               	movwf	??_sprintf+1
  5126  043A  0833               	movf	??_sprintf,w
  5127  043B  07BF               	addwf	sprintf@width,f
  5128  043C  1803               	skipnc
  5129  043D  0AC0               	incf	sprintf@width+1,f
  5130  043E  0834               	movf	??_sprintf+1,w
  5131  043F  07C0               	addwf	sprintf@width+1,f
  5132  0440  3001               	movlw	1
  5133  0441  00B3               	movwf	??_sprintf
  5134  0442  0833               	movf	??_sprintf,w
  5135  0443  07AA               	addwf	sprintf@f,f
  5136                           
  5137                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5138  0444  082A               	movf	sprintf@f,w
  5139  0445  0084               	movwf	4
  5140  0446  120A  158A  200A  120A  118A  	fcall	stringdir
  5141  044B  160A  118A  25A8  120A  118A  	fcall	_isdigit
  5142  0450  1803               	btfsc	3,0
  5143  0451  2C14               	goto	i1l2307
  5144  0452                     i1l2315:	
  5145                           
  5146                           ;doprnt.c: 617: }
  5147                           ;doprnt.c: 620: if(*f == '.') {
  5148  0452  1283               	bcf	3,5	;RP0=0, select bank0
  5149  0453  1303               	bcf	3,6	;RP1=0, select bank0
  5150  0454  082A               	movf	sprintf@f,w
  5151  0455  0084               	movwf	4
  5152  0456  120A  158A  200A  120A  118A  	fcall	stringdir
  5153  045B  3A2E               	xorlw	46
  5154  045C  1D03               	skipz
  5155  045D  2CA0               	goto	i1l2327
  5156                           
  5157                           ;doprnt.c: 622: f++;
  5158  045E  3001               	movlw	1
  5159  045F  00B3               	movwf	??_sprintf
  5160  0460  0833               	movf	??_sprintf,w
  5161  0461  07AA               	addwf	sprintf@f,f
  5162                           
  5163                           ;doprnt.c: 629: {
  5164                           ;doprnt.c: 630: prec = 0;
  5165  0462  01C1               	clrf	sprintf@prec
  5166  0463  01C2               	clrf	sprintf@prec+1
  5167  0464                     i1l2325:	
  5168                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5169                           
  5170  0464  082A               	movf	sprintf@f,w
  5171  0465  0084               	movwf	4
  5172  0466  120A  158A  200A  120A  118A  	fcall	stringdir
  5173  046B  160A  118A  25A8  120A  118A  	fcall	_isdigit
  5174  0470  1C03               	btfss	3,0
  5175  0471  2CAC               	goto	i1l2333
  5176                           
  5177                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5178  0472  1283               	bcf	3,5	;RP0=0, select bank0
  5179  0473  1303               	bcf	3,6	;RP1=0, select bank0
  5180  0474  0842               	movf	sprintf@prec+1,w
  5181  0475  01F1               	clrf	___wmul@multiplier+1
  5182  0476  07F1               	addwf	___wmul@multiplier+1,f
  5183  0477  0841               	movf	sprintf@prec,w
  5184  0478  01F0               	clrf	___wmul@multiplier
  5185  0479  07F0               	addwf	___wmul@multiplier,f
  5186  047A  300A               	movlw	10
  5187  047B  00F2               	movwf	___wmul@multiplicand
  5188  047C  3000               	movlw	0
  5189  047D  00F3               	movwf	___wmul@multiplicand+1
  5190  047E  160A  118A  2675  120A  118A  	fcall	___wmul
  5191  0483  1283               	bcf	3,5	;RP0=0, select bank0
  5192  0484  1303               	bcf	3,6	;RP1=0, select bank0
  5193  0485  082A               	movf	sprintf@f,w
  5194  0486  0084               	movwf	4
  5195  0487  120A  158A  200A  120A  118A  	fcall	stringdir
  5196  048C  0770               	addwf	?___wmul,w
  5197  048D  00B3               	movwf	??_sprintf
  5198  048E  3000               	movlw	0
  5199  048F  1803               	skipnc
  5200  0490  3001               	movlw	1
  5201  0491  0771               	addwf	?___wmul+1,w
  5202  0492  00B4               	movwf	??_sprintf+1
  5203  0493  0833               	movf	??_sprintf,w
  5204  0494  3ED0               	addlw	208
  5205  0495  00C1               	movwf	sprintf@prec
  5206  0496  0834               	movf	??_sprintf+1,w
  5207  0497  1803               	skipnc
  5208  0498  3E01               	addlw	1
  5209  0499  3EFF               	addlw	255
  5210  049A  00C2               	movwf	sprintf@prec+1
  5211  049B  3001               	movlw	1
  5212  049C  00B3               	movwf	??_sprintf
  5213  049D  0833               	movf	??_sprintf,w
  5214  049E  07AA               	addwf	sprintf@f,f
  5215  049F  2C64               	goto	i1l2325
  5216  04A0                     i1l2327:	
  5217                           ;doprnt.c: 633: }
  5218                           ;doprnt.c: 634: } else {
  5219                           
  5220                           
  5221                           ;doprnt.c: 635: prec = 0;
  5222  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  5223  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  5224  04A2  01C1               	clrf	sprintf@prec
  5225  04A3  01C2               	clrf	sprintf@prec+1
  5226                           
  5227                           ;doprnt.c: 644: switch(c = *f++) {
  5228                           
  5229                           ;doprnt.c: 639: }
  5230                           ;doprnt.c: 642: loop:
  5231  04A4  2CAC               	goto	i1l2333
  5232  04A5                     i1l269:	
  5233                           ;doprnt.c: 650: case 'l':
  5234                           
  5235                           ;doprnt.c: 647: goto alldone;
  5236                           
  5237                           ;doprnt.c: 646: case 0:
  5238                           
  5239                           
  5240                           ;doprnt.c: 652: flag |= 0x10;
  5241  04A5  1638               	bsf	sprintf@flag,4
  5242                           
  5243                           ;doprnt.c: 653: goto loop;
  5244  04A6  2CAC               	goto	i1l2333
  5245  04A7                     i1l2329:	
  5246                           ;doprnt.c: 826: case 'u':
  5247                           
  5248                           ;doprnt.c: 822: continue;
  5249                           
  5250                           ;doprnt.c: 811: default:
  5251                           
  5252                           
  5253                           ;doprnt.c: 827: flag |= 0xC0;
  5254  04A7  30C0               	movlw	192
  5255  04A8  00B3               	movwf	??_sprintf
  5256  04A9  0833               	movf	??_sprintf,w
  5257  04AA  04B8               	iorwf	sprintf@flag,f
  5258                           
  5259                           ;doprnt.c: 831: }
  5260                           
  5261                           ;doprnt.c: 828: break;
  5262  04AB  2CC3               	goto	i1l272
  5263  04AC                     i1l2333:	
  5264  04AC  3001               	movlw	1
  5265  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  5266  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  5267  04AF  07AA               	addwf	sprintf@f,f
  5268  04B0  30FF               	movlw	-1
  5269  04B1  072A               	addwf	sprintf@f,w
  5270  04B2  0084               	movwf	4
  5271  04B3  120A  158A  200A  120A  118A  	fcall	stringdir
  5272  04B8  00C3               	movwf	sprintf@c
  5273                           
  5274                           ; Switch size 1, requested type "space"
  5275                           ; Number of cases is 3, Range of values is 0 to 117
  5276                           ; switch strategies available:
  5277                           ; Name         Instructions Cycles
  5278                           ; simple_byte           10     6 (average)
  5279                           ; jumptable            260     6 (fixed)
  5280                           ;	Chosen strategy is simple_byte
  5281  04B9  3A00               	xorlw	0	; case 0
  5282  04BA  1903               	skipnz
  5283  04BB  2E0F               	goto	i1l2393
  5284  04BC  3A6C               	xorlw	108	; case 108
  5285  04BD  1903               	skipnz
  5286  04BE  2CA5               	goto	i1l269
  5287  04BF  3A19               	xorlw	25	; case 117
  5288  04C0  1903               	skipnz
  5289  04C1  2CA7               	goto	i1l2329
  5290  04C2  2BDF               	goto	i1l2391
  5291  04C3                     i1l272:	
  5292                           
  5293                           ;doprnt.c: 1282: {
  5294                           ;doprnt.c: 1290: if(flag & 0x10)
  5295  04C3  1E38               	btfss	sprintf@flag,4
  5296  04C4  2CD5               	goto	i1l2339
  5297                           
  5298                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  5299  04C5  0839               	movf	sprintf@ap,w
  5300  04C6  0084               	movwf	4
  5301  04C7  1383               	bcf	3,7	;select IRP bank0
  5302  04C8  0800               	movf	0,w
  5303  04C9  00BA               	movwf	sprintf@_val
  5304  04CA  0A84               	incf	4,f
  5305  04CB  0800               	movf	0,w
  5306  04CC  00BB               	movwf	sprintf@_val+1
  5307  04CD  0A84               	incf	4,f
  5308  04CE  0800               	movf	0,w
  5309  04CF  00BC               	movwf	sprintf@_val+2
  5310  04D0  0A84               	incf	4,f
  5311  04D1  0800               	movf	0,w
  5312  04D2  00BD               	movwf	sprintf@_val+3
  5313  04D3  3004               	movlw	4
  5314  04D4  2CE4               	goto	L4
  5315  04D5                     i1l2339:	
  5316                           
  5317                           ;doprnt.c: 1292: else
  5318                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5319  04D5  0839               	movf	sprintf@ap,w
  5320  04D6  0084               	movwf	4
  5321  04D7  1383               	bcf	3,7	;select IRP bank0
  5322  04D8  0800               	movf	0,w
  5323  04D9  00B3               	movwf	??_sprintf
  5324  04DA  0A84               	incf	4,f
  5325  04DB  0800               	movf	0,w
  5326  04DC  00B4               	movwf	??_sprintf+1
  5327  04DD  0833               	movf	??_sprintf,w
  5328  04DE  00BA               	movwf	sprintf@_val
  5329  04DF  0834               	movf	??_sprintf+1,w
  5330  04E0  00BB               	movwf	sprintf@_val+1
  5331  04E1  01BC               	clrf	sprintf@_val+2
  5332  04E2  01BD               	clrf	sprintf@_val+3
  5333  04E3  3002               	movlw	2
  5334  04E4                     L4:	
  5335  04E4  00B3               	movwf	??_sprintf
  5336  04E5  0833               	movf	??_sprintf,w
  5337  04E6  07B9               	addwf	sprintf@ap,f
  5338                           
  5339                           ;doprnt.c: 1296: }
  5340                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  5341  04E7  0842               	movf	sprintf@prec+1,w
  5342  04E8  0441               	iorwf	sprintf@prec,w
  5343  04E9  1D03               	skipz
  5344  04EA  2CF7               	goto	i1l2349
  5345  04EB  083D               	movf	sprintf@_val+3,w
  5346  04EC  043C               	iorwf	sprintf@_val+2,w
  5347  04ED  043B               	iorwf	sprintf@_val+1,w
  5348  04EE  043A               	iorwf	sprintf@_val,w
  5349  04EF  1D03               	skipz
  5350  04F0  2CF7               	goto	i1l2349
  5351                           
  5352                           ;doprnt.c: 1300: prec++;
  5353  04F1  3001               	movlw	1
  5354  04F2  07C1               	addwf	sprintf@prec,f
  5355  04F3  1803               	skipnc
  5356  04F4  0AC2               	incf	sprintf@prec+1,f
  5357  04F5  3000               	movlw	0
  5358  04F6  07C2               	addwf	sprintf@prec+1,f
  5359  04F7                     i1l2349:	
  5360                           
  5361                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5362  04F7  01C3               	clrf	sprintf@c
  5363  04F8  0AC3               	incf	sprintf@c,f
  5364  04F9  0843               	movf	sprintf@c,w
  5365  04FA  3A0A               	xorlw	10
  5366  04FB  1903               	btfsc	3,2
  5367  04FC  2D39               	goto	i1l2361
  5368  04FD                     i1l2353:	
  5369                           
  5370                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5371  04FD  0843               	movf	sprintf@c,w
  5372  04FE  00B3               	movwf	??_sprintf
  5373  04FF  3001               	movlw	1
  5374  0500                     u279_25:	
  5375  0500  1003               	clrc
  5376  0501  0DB3               	rlf	??_sprintf,f
  5377  0502  3EFF               	addlw	-1
  5378  0503  1D03               	skipz
  5379  0504  2D00               	goto	u279_25
  5380  0505  1003               	clrc
  5381  0506  0D33               	rlf	??_sprintf,w
  5382  0507  3E01               	addlw	low (_dpowers-__stringbase)
  5383  0508  0084               	movwf	4
  5384  0509  120A  158A  200A  120A  118A  	fcall	stringdir
  5385  050E  00B4               	movwf	??_sprintf+1
  5386  050F  120A  158A  200A  120A  118A  	fcall	stringdir
  5387  0514  00B5               	movwf	??_sprintf+2
  5388  0515  120A  158A  200A  120A  118A  	fcall	stringdir
  5389  051A  00B6               	movwf	??_sprintf+3
  5390  051B  120A  158A  200A  120A  118A  	fcall	stringdir
  5391  0520  00B7               	movwf	??_sprintf+4
  5392  0521  0837               	movf	??_sprintf+4,w
  5393  0522  023D               	subwf	sprintf@_val+3,w
  5394  0523  1D03               	skipz
  5395  0524  2D2F               	goto	u280_25
  5396  0525  0836               	movf	??_sprintf+3,w
  5397  0526  023C               	subwf	sprintf@_val+2,w
  5398  0527  1D03               	skipz
  5399  0528  2D2F               	goto	u280_25
  5400  0529  0835               	movf	??_sprintf+2,w
  5401  052A  023B               	subwf	sprintf@_val+1,w
  5402  052B  1D03               	skipz
  5403  052C  2D2F               	goto	u280_25
  5404  052D  0834               	movf	??_sprintf+1,w
  5405  052E  023A               	subwf	sprintf@_val,w
  5406  052F                     u280_25:	
  5407  052F  1C03               	btfss	3,0
  5408  0530  2D39               	goto	i1l2361
  5409                           
  5410                           ;doprnt.c: 1316: break;
  5411  0531  3001               	movlw	1
  5412  0532  00B3               	movwf	??_sprintf
  5413  0533  0833               	movf	??_sprintf,w
  5414  0534  07C3               	addwf	sprintf@c,f
  5415  0535  0843               	movf	sprintf@c,w
  5416  0536  3A0A               	xorlw	10
  5417  0537  1D03               	skipz
  5418  0538  2CFD               	goto	i1l2353
  5419  0539                     i1l2361:	
  5420                           
  5421                           ;doprnt.c: 1348: if(c < prec)
  5422  0539  0843               	movf	sprintf@c,w
  5423  053A  00B3               	movwf	??_sprintf
  5424  053B  01B4               	clrf	??_sprintf+1
  5425  053C  1BB3               	btfsc	??_sprintf,7
  5426  053D  03B4               	decf	??_sprintf+1,f
  5427  053E  0834               	movf	??_sprintf+1,w
  5428  053F  3A80               	xorlw	128
  5429  0540  00B5               	movwf	??_sprintf+2
  5430  0541  0842               	movf	sprintf@prec+1,w
  5431  0542  3A80               	xorlw	128
  5432  0543  0235               	subwf	??_sprintf+2,w
  5433  0544  1D03               	skipz
  5434  0545  2D48               	goto	u282_25
  5435  0546  0841               	movf	sprintf@prec,w
  5436  0547  0233               	subwf	??_sprintf,w
  5437  0548                     u282_25:	
  5438  0548  1803               	skipnc
  5439  0549  2D51               	goto	i1l2365
  5440                           
  5441                           ;doprnt.c: 1349: c = prec;
  5442  054A  1283               	bcf	3,5	;RP0=0, select bank0
  5443  054B  1303               	bcf	3,6	;RP1=0, select bank0
  5444  054C  0841               	movf	sprintf@prec,w
  5445  054D  00B3               	movwf	??_sprintf
  5446  054E  0833               	movf	??_sprintf,w
  5447  054F  00C3               	movwf	sprintf@c
  5448  0550  2D6B               	goto	i1l2369
  5449  0551                     i1l2365:	
  5450                           
  5451                           ;doprnt.c: 1350: else if(prec < c)
  5452  0551  1283               	bcf	3,5	;RP0=0, select bank0
  5453  0552  1303               	bcf	3,6	;RP1=0, select bank0
  5454  0553  0843               	movf	sprintf@c,w
  5455  0554  00B3               	movwf	??_sprintf
  5456  0555  01B4               	clrf	??_sprintf+1
  5457  0556  1BB3               	btfsc	??_sprintf,7
  5458  0557  03B4               	decf	??_sprintf+1,f
  5459  0558  0842               	movf	sprintf@prec+1,w
  5460  0559  3A80               	xorlw	128
  5461  055A  00B5               	movwf	??_sprintf+2
  5462  055B  0834               	movf	??_sprintf+1,w
  5463  055C  3A80               	xorlw	128
  5464  055D  0235               	subwf	??_sprintf+2,w
  5465  055E  1D03               	skipz
  5466  055F  2D62               	goto	u283_25
  5467  0560  0833               	movf	??_sprintf,w
  5468  0561  0241               	subwf	sprintf@prec,w
  5469  0562                     u283_25:	
  5470  0562  1803               	skipnc
  5471  0563  2D6B               	goto	i1l2369
  5472                           
  5473                           ;doprnt.c: 1351: prec = c;
  5474  0564  1283               	bcf	3,5	;RP0=0, select bank0
  5475  0565  1303               	bcf	3,6	;RP1=0, select bank0
  5476  0566  0843               	movf	sprintf@c,w
  5477  0567  00C1               	movwf	sprintf@prec
  5478  0568  01C2               	clrf	sprintf@prec+1
  5479  0569  1BC1               	btfsc	sprintf@prec,7
  5480  056A  03C2               	decf	sprintf@prec+1,f
  5481  056B                     i1l2369:	
  5482                           
  5483                           ;doprnt.c: 1390: if(width > c)
  5484  056B  1283               	bcf	3,5	;RP0=0, select bank0
  5485  056C  1303               	bcf	3,6	;RP1=0, select bank0
  5486  056D  0843               	movf	sprintf@c,w
  5487  056E  00B3               	movwf	??_sprintf
  5488  056F  01B4               	clrf	??_sprintf+1
  5489  0570  1BB3               	btfsc	??_sprintf,7
  5490  0571  03B4               	decf	??_sprintf+1,f
  5491  0572  0834               	movf	??_sprintf+1,w
  5492  0573  3A80               	xorlw	128
  5493  0574  00B5               	movwf	??_sprintf+2
  5494  0575  0840               	movf	sprintf@width+1,w
  5495  0576  3A80               	xorlw	128
  5496  0577  0235               	subwf	??_sprintf+2,w
  5497  0578  1D03               	skipz
  5498  0579  2D7C               	goto	u284_25
  5499  057A  083F               	movf	sprintf@width,w
  5500  057B  0233               	subwf	??_sprintf,w
  5501  057C                     u284_25:	
  5502  057C  1803               	skipnc
  5503  057D  2D8C               	goto	i1l2373
  5504                           
  5505                           ;doprnt.c: 1391: width -= c;
  5506  057E  1283               	bcf	3,5	;RP0=0, select bank0
  5507  057F  1303               	bcf	3,6	;RP1=0, select bank0
  5508  0580  0843               	movf	sprintf@c,w
  5509  0581  00B3               	movwf	??_sprintf
  5510  0582  01B4               	clrf	??_sprintf+1
  5511  0583  1BB3               	btfsc	??_sprintf,7
  5512  0584  03B4               	decf	??_sprintf+1,f
  5513  0585  0833               	movf	??_sprintf,w
  5514  0586  02BF               	subwf	sprintf@width,f
  5515  0587  0834               	movf	??_sprintf+1,w
  5516  0588  1C03               	skipc
  5517  0589  03C0               	decf	sprintf@width+1,f
  5518  058A  02C0               	subwf	sprintf@width+1,f
  5519  058B  2D90               	goto	i1l2375
  5520  058C                     i1l2373:	
  5521                           
  5522                           ;doprnt.c: 1392: else
  5523                           ;doprnt.c: 1393: width = 0;
  5524  058C  1283               	bcf	3,5	;RP0=0, select bank0
  5525  058D  1303               	bcf	3,6	;RP1=0, select bank0
  5526  058E  01BF               	clrf	sprintf@width
  5527  058F  01C0               	clrf	sprintf@width+1
  5528  0590                     i1l2375:	
  5529                           
  5530                           ;doprnt.c: 1431: {
  5531                           ;doprnt.c: 1433: if(width
  5532                           ;doprnt.c: 1437: )
  5533  0590  0840               	movf	sprintf@width+1,w
  5534  0591  043F               	iorwf	sprintf@width,w
  5535  0592  1903               	skipnz
  5536  0593  2E00               	goto	i1l2389
  5537                           
  5538                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  5539                           
  5540                           ;doprnt.c: 1438: do
  5541  0594  3020               	movlw	32
  5542  0595  00B3               	movwf	??_sprintf
  5543  0596  083E               	movf	sprintf@sp,w
  5544  0597  0084               	movwf	4
  5545  0598  0833               	movf	??_sprintf,w
  5546  0599  1383               	bcf	3,7	;select IRP bank0
  5547  059A  0080               	movwf	0
  5548  059B  3001               	movlw	1
  5549  059C  00B3               	movwf	??_sprintf
  5550  059D  0833               	movf	??_sprintf,w
  5551  059E  07BE               	addwf	sprintf@sp,f
  5552                           
  5553                           ;doprnt.c: 1440: while(--width);
  5554  059F  30FF               	movlw	255
  5555  05A0  07BF               	addwf	sprintf@width,f
  5556  05A1  1803               	skipnc
  5557  05A2  0AC0               	incf	sprintf@width+1,f
  5558  05A3  30FF               	movlw	255
  5559  05A4  07C0               	addwf	sprintf@width+1,f
  5560  05A5  2D90               	goto	i1l2375
  5561  05A6                     i1l2383:	
  5562                           ;doprnt.c: 1478: }
  5563                           ;doprnt.c: 1483: while(prec--) {
  5564                           
  5565                           
  5566                           ;doprnt.c: 1487: {
  5567                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5568  05A6  3000               	movlw	0
  5569  05A7  00A3               	movwf	___llmod@divisor+3
  5570  05A8  3000               	movlw	0
  5571  05A9  00A2               	movwf	___llmod@divisor+2
  5572  05AA  3000               	movlw	0
  5573  05AB  00A1               	movwf	___llmod@divisor+1
  5574  05AC  300A               	movlw	10
  5575  05AD  00A0               	movwf	___llmod@divisor
  5576  05AE  0841               	movf	sprintf@prec,w
  5577  05AF  00B3               	movwf	??_sprintf
  5578  05B0  3001               	movlw	1
  5579  05B1                     u287_25:	
  5580  05B1  1003               	clrc
  5581  05B2  0DB3               	rlf	??_sprintf,f
  5582  05B3  3EFF               	addlw	-1
  5583  05B4  1D03               	skipz
  5584  05B5  2DB1               	goto	u287_25
  5585  05B6  1003               	clrc
  5586  05B7  0D33               	rlf	??_sprintf,w
  5587  05B8  3E01               	addlw	low (_dpowers-__stringbase)
  5588  05B9  0084               	movwf	4
  5589  05BA  120A  158A  200A  120A  118A  	fcall	stringdir
  5590  05BF  00F0               	movwf	___lldiv@divisor
  5591  05C0  120A  158A  200A  120A  118A  	fcall	stringdir
  5592  05C5  00F1               	movwf	___lldiv@divisor+1
  5593  05C6  120A  158A  200A  120A  118A  	fcall	stringdir
  5594  05CB  00F2               	movwf	___lldiv@divisor+2
  5595  05CC  120A  158A  200A  120A  118A  	fcall	stringdir
  5596  05D1  00F3               	movwf	___lldiv@divisor+3
  5597  05D2  083D               	movf	sprintf@_val+3,w
  5598  05D3  00F7               	movwf	___lldiv@dividend+3
  5599  05D4  083C               	movf	sprintf@_val+2,w
  5600  05D5  00F6               	movwf	___lldiv@dividend+2
  5601  05D6  083B               	movf	sprintf@_val+1,w
  5602  05D7  00F5               	movwf	___lldiv@dividend+1
  5603  05D8  083A               	movf	sprintf@_val,w
  5604  05D9  00F4               	movwf	___lldiv@dividend
  5605  05DA  120A  158A  22DA  120A  118A  	fcall	___lldiv
  5606  05DF  0873               	movf	?___lldiv+3,w
  5607  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  5608  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  5609  05E2  00A7               	movwf	___llmod@dividend+3
  5610  05E3  0872               	movf	?___lldiv+2,w
  5611  05E4  00A6               	movwf	___llmod@dividend+2
  5612  05E5  0871               	movf	?___lldiv+1,w
  5613  05E6  00A5               	movwf	___llmod@dividend+1
  5614  05E7  0870               	movf	?___lldiv,w
  5615  05E8  00A4               	movwf	___llmod@dividend
  5616  05E9  120A  158A  21D6  120A  118A  	fcall	___llmod
  5617  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  5618  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  5619  05F0  0820               	movf	?___llmod,w
  5620  05F1  3E30               	addlw	48
  5621  05F2  00B4               	movwf	??_sprintf+1
  5622  05F3  0834               	movf	??_sprintf+1,w
  5623  05F4  00C3               	movwf	sprintf@c
  5624                           
  5625                           ;doprnt.c: 1532: }
  5626                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5627  05F5  0843               	movf	sprintf@c,w
  5628  05F6  00B3               	movwf	??_sprintf
  5629  05F7  083E               	movf	sprintf@sp,w
  5630  05F8  0084               	movwf	4
  5631  05F9  0833               	movf	??_sprintf,w
  5632  05FA  1383               	bcf	3,7	;select IRP bank0
  5633  05FB  0080               	movwf	0
  5634  05FC  3001               	movlw	1
  5635  05FD  00B3               	movwf	??_sprintf
  5636  05FE  0833               	movf	??_sprintf,w
  5637  05FF  07BE               	addwf	sprintf@sp,f
  5638  0600                     i1l2389:	
  5639  0600  30FF               	movlw	255
  5640  0601  07C1               	addwf	sprintf@prec,f
  5641  0602  1803               	skipnc
  5642  0603  0AC2               	incf	sprintf@prec+1,f
  5643  0604  30FF               	movlw	255
  5644  0605  07C2               	addwf	sprintf@prec+1,f
  5645  0606  30FF               	movlw	255
  5646  0607  0642               	xorwf	sprintf@prec+1,w
  5647  0608  1D03               	skipz
  5648  0609  2E0C               	goto	u288_25
  5649  060A  30FF               	movlw	255
  5650  060B  0641               	xorwf	sprintf@prec,w
  5651  060C                     u288_25:	
  5652  060C  1903               	btfsc	3,2
  5653  060D  2BDF               	goto	i1l2391
  5654  060E  2DA6               	goto	i1l2383
  5655  060F                     i1l2393:	
  5656                           ;doprnt.c: 1534: }
  5657                           ;doprnt.c: 1542: }
  5658                           ;doprnt.c: 1544: alldone:
  5659                           
  5660                           
  5661                           ;doprnt.c: 1547: *sp = 0;
  5662  060F  083E               	movf	sprintf@sp,w
  5663  0610  0084               	movwf	4
  5664  0611  1383               	bcf	3,7	;select IRP bank0
  5665  0612  0180               	clrf	0
  5666  0613  0008               	return
  5667  0614                     __end_of_sprintf:	
  5668                           ;doprnt.c: 1549: return 0;
  5669                           ;	Return value of _sprintf is never used
  5670                           
  5671                           
  5672                           	psect	text24
  5673  15A8                     __ptext24:	
  5674 ;; *************** function _isdigit *****************
  5675 ;; Defined at:
  5676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  c               1    wreg     unsigned char 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  c               1    1[COMMON] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5690 ;;      Params:         0       0       0       0       0
  5691 ;;      Locals:         2       0       0       0       0
  5692 ;;      Temps:          0       0       0       0       0
  5693 ;;      Totals:         2       0       0       0       0
  5694 ;;Total ram usage:        2 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_sprintf
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           
  5704                           ;psect for function _isdigit
  5705  15A8                     _isdigit:	
  5706                           
  5707                           ;incstack = 0
  5708 ;; hardware stack exceeded
  5709                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5710                           ;isdigit@c stored from wreg
  5711  15A8  00F1               	movwf	isdigit@c
  5712  15A9  01F0               	clrf	_isdigit$897
  5713  15AA  303A               	movlw	58
  5714  15AB  0271               	subwf	isdigit@c,w
  5715  15AC  1803               	skipnc
  5716  15AD  2DB4               	goto	i1l1995
  5717  15AE  3030               	movlw	48
  5718  15AF  0271               	subwf	isdigit@c,w
  5719  15B0  1C03               	skipc
  5720  15B1  2DB4               	goto	i1l1995
  5721  15B2  01F0               	clrf	_isdigit$897
  5722  15B3  0AF0               	incf	_isdigit$897,f
  5723  15B4                     i1l1995:	
  5724  15B4  0C70               	rrf	_isdigit$897,w
  5725  15B5  0008               	return
  5726  15B6                     __end_of_isdigit:	
  5727                           
  5728                           	psect	text25
  5729  1675                     __ptext25:	
  5730 ;; *************** function ___wmul *****************
  5731 ;; Defined at:
  5732 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  multiplier      2    0[COMMON] unsigned int 
  5735 ;;  multiplicand    2    2[COMMON] unsigned int 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  product         2    4[COMMON] unsigned int 
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  2    0[COMMON] unsigned int 
  5740 ;; Registers used:
  5741 ;;		wreg, status,2, status,0
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5747 ;;      Params:         4       0       0       0       0
  5748 ;;      Locals:         2       0       0       0       0
  5749 ;;      Temps:          0       0       0       0       0
  5750 ;;      Totals:         6       0       0       0       0
  5751 ;;Total ram usage:        6 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_sprintf
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function ___wmul
  5762  1675                     ___wmul:	
  5763                           
  5764                           ;incstack = 0
  5765 ;; hardware stack exceeded
  5766                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5767  1675  01F4               	clrf	___wmul@product
  5768  1676  01F5               	clrf	___wmul@product+1
  5769  1677                     i1l2001:	
  5770  1677  1C70               	btfss	___wmul@multiplier,0
  5771  1678  2E7F               	goto	i1l375
  5772  1679  0872               	movf	___wmul@multiplicand,w
  5773  167A  07F4               	addwf	___wmul@product,f
  5774  167B  1803               	skipnc
  5775  167C  0AF5               	incf	___wmul@product+1,f
  5776  167D  0873               	movf	___wmul@multiplicand+1,w
  5777  167E  07F5               	addwf	___wmul@product+1,f
  5778  167F                     i1l375:	
  5779  167F  3001               	movlw	1
  5780  1680                     u208_25:	
  5781  1680  1003               	clrc
  5782  1681  0DF2               	rlf	___wmul@multiplicand,f
  5783  1682  0DF3               	rlf	___wmul@multiplicand+1,f
  5784  1683  3EFF               	addlw	-1
  5785  1684  1D03               	skipz
  5786  1685  2E80               	goto	u208_25
  5787  1686  3001               	movlw	1
  5788  1687                     u209_25:	
  5789  1687  1003               	clrc
  5790  1688  0CF1               	rrf	___wmul@multiplier+1,f
  5791  1689  0CF0               	rrf	___wmul@multiplier,f
  5792  168A  3EFF               	addlw	-1
  5793  168B  1D03               	skipz
  5794  168C  2E87               	goto	u209_25
  5795  168D  0871               	movf	___wmul@multiplier+1,w
  5796  168E  0470               	iorwf	___wmul@multiplier,w
  5797  168F  1D03               	skipz
  5798  1690  2E77               	goto	i1l2001
  5799  1691  0875               	movf	___wmul@product+1,w
  5800  1692  01F1               	clrf	?___wmul+1
  5801  1693  07F1               	addwf	?___wmul+1,f
  5802  1694  0874               	movf	___wmul@product,w
  5803  1695  01F0               	clrf	?___wmul
  5804  1696  07F0               	addwf	?___wmul,f
  5805  1697  0008               	return
  5806  1698                     __end_of___wmul:	
  5807                           
  5808                           	psect	text26
  5809  09D6                     __ptext26:	
  5810 ;; *************** function ___llmod *****************
  5811 ;; Defined at:
  5812 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\llmod.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  divisor         4    0[BANK0 ] unsigned long 
  5815 ;;  dividend        4    4[BANK0 ] unsigned long 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  counter         1    9[BANK0 ] unsigned char 
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  4    0[BANK0 ] unsigned long 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5827 ;;      Params:         0       8       0       0       0
  5828 ;;      Locals:         0       1       0       0       0
  5829 ;;      Temps:          0       1       0       0       0
  5830 ;;      Totals:         0      10       0       0       0
  5831 ;;Total ram usage:       10 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; This function calls:
  5834 ;;		Nothing
  5835 ;; This function is called by:
  5836 ;;		_sprintf
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           
  5841                           ;psect for function ___llmod
  5842  09D6                     ___llmod:	
  5843                           
  5844                           ;incstack = 0
  5845 ;; hardware stack exceeded
  5846                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5847  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  5848  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  5849  09D8  0823               	movf	___llmod@divisor+3,w
  5850  09D9  0422               	iorwf	___llmod@divisor+2,w
  5851  09DA  0421               	iorwf	___llmod@divisor+1,w
  5852  09DB  0420               	iorwf	___llmod@divisor,w
  5853  09DC  1903               	skipnz
  5854  09DD  2A1B               	goto	i1l2163
  5855  09DE  01A9               	clrf	___llmod@counter
  5856  09DF  0AA9               	incf	___llmod@counter,f
  5857  09E0                     i1l2153:	
  5858  09E0  1BA3               	btfsc	___llmod@divisor+3,7
  5859  09E1  29F0               	goto	i1l2155
  5860  09E2  3001               	movlw	1
  5861  09E3  00A8               	movwf	??___llmod
  5862  09E4                     u253_25:	
  5863  09E4  1003               	clrc
  5864  09E5  0DA0               	rlf	___llmod@divisor,f
  5865  09E6  0DA1               	rlf	___llmod@divisor+1,f
  5866  09E7  0DA2               	rlf	___llmod@divisor+2,f
  5867  09E8  0DA3               	rlf	___llmod@divisor+3,f
  5868  09E9  0BA8               	decfsz	??___llmod,f
  5869  09EA  29E4               	goto	u253_25
  5870  09EB  3001               	movlw	1
  5871  09EC  00A8               	movwf	??___llmod
  5872  09ED  0828               	movf	??___llmod,w
  5873  09EE  07A9               	addwf	___llmod@counter,f
  5874  09EF  29E0               	goto	i1l2153
  5875  09F0                     i1l2155:	
  5876  09F0  0823               	movf	___llmod@divisor+3,w
  5877  09F1  0227               	subwf	___llmod@dividend+3,w
  5878  09F2  1D03               	skipz
  5879  09F3  29FE               	goto	u255_25
  5880  09F4  0822               	movf	___llmod@divisor+2,w
  5881  09F5  0226               	subwf	___llmod@dividend+2,w
  5882  09F6  1D03               	skipz
  5883  09F7  29FE               	goto	u255_25
  5884  09F8  0821               	movf	___llmod@divisor+1,w
  5885  09F9  0225               	subwf	___llmod@dividend+1,w
  5886  09FA  1D03               	skipz
  5887  09FB  29FE               	goto	u255_25
  5888  09FC  0820               	movf	___llmod@divisor,w
  5889  09FD  0224               	subwf	___llmod@dividend,w
  5890  09FE                     u255_25:	
  5891  09FE  1C03               	skipc
  5892  09FF  2A0E               	goto	i1l2159
  5893  0A00  0820               	movf	___llmod@divisor,w
  5894  0A01  02A4               	subwf	___llmod@dividend,f
  5895  0A02  0821               	movf	___llmod@divisor+1,w
  5896  0A03  1C03               	skipc
  5897  0A04  0F21               	incfsz	___llmod@divisor+1,w
  5898  0A05  02A5               	subwf	___llmod@dividend+1,f
  5899  0A06  0822               	movf	___llmod@divisor+2,w
  5900  0A07  1C03               	skipc
  5901  0A08  0F22               	incfsz	___llmod@divisor+2,w
  5902  0A09  02A6               	subwf	___llmod@dividend+2,f
  5903  0A0A  0823               	movf	___llmod@divisor+3,w
  5904  0A0B  1C03               	skipc
  5905  0A0C  0F23               	incfsz	___llmod@divisor+3,w
  5906  0A0D  02A7               	subwf	___llmod@dividend+3,f
  5907  0A0E                     i1l2159:	
  5908  0A0E  3001               	movlw	1
  5909  0A0F                     u256_25:	
  5910  0A0F  1003               	clrc
  5911  0A10  0CA3               	rrf	___llmod@divisor+3,f
  5912  0A11  0CA2               	rrf	___llmod@divisor+2,f
  5913  0A12  0CA1               	rrf	___llmod@divisor+1,f
  5914  0A13  0CA0               	rrf	___llmod@divisor,f
  5915  0A14  3EFF               	addlw	-1
  5916  0A15  1D03               	skipz
  5917  0A16  2A0F               	goto	u256_25
  5918  0A17  3001               	movlw	1
  5919  0A18  02A9               	subwf	___llmod@counter,f
  5920  0A19  1D03               	btfss	3,2
  5921  0A1A  29F0               	goto	i1l2155
  5922  0A1B                     i1l2163:	
  5923  0A1B  0827               	movf	___llmod@dividend+3,w
  5924  0A1C  00A3               	movwf	?___llmod+3
  5925  0A1D  0826               	movf	___llmod@dividend+2,w
  5926  0A1E  00A2               	movwf	?___llmod+2
  5927  0A1F  0825               	movf	___llmod@dividend+1,w
  5928  0A20  00A1               	movwf	?___llmod+1
  5929  0A21  0824               	movf	___llmod@dividend,w
  5930  0A22  00A0               	movwf	?___llmod
  5931  0A23  0008               	return
  5932  0A24                     __end_of___llmod:	
  5933                           
  5934                           	psect	text27
  5935  0ADA                     __ptext27:	
  5936 ;; *************** function ___lldiv *****************
  5937 ;; Defined at:
  5938 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  divisor         4    0[COMMON] unsigned long 
  5941 ;;  dividend        4    4[COMMON] unsigned long 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  quotient        4    9[COMMON] unsigned long 
  5944 ;;  counter         1   13[COMMON] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  4    0[COMMON] unsigned long 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5954 ;;      Params:         8       0       0       0       0
  5955 ;;      Locals:         5       0       0       0       0
  5956 ;;      Temps:          1       0       0       0       0
  5957 ;;      Totals:        14       0       0       0       0
  5958 ;;Total ram usage:       14 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_sprintf
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function ___lldiv
  5969  0ADA                     ___lldiv:	
  5970                           
  5971                           ;incstack = 0
  5972 ;; hardware stack exceeded
  5973                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5974  0ADA  3000               	movlw	0
  5975  0ADB  00FC               	movwf	___lldiv@quotient+3
  5976  0ADC  3000               	movlw	0
  5977  0ADD  00FB               	movwf	___lldiv@quotient+2
  5978  0ADE  3000               	movlw	0
  5979  0ADF  00FA               	movwf	___lldiv@quotient+1
  5980  0AE0  3000               	movlw	0
  5981  0AE1  00F9               	movwf	___lldiv@quotient
  5982  0AE2  0873               	movf	___lldiv@divisor+3,w
  5983  0AE3  0472               	iorwf	___lldiv@divisor+2,w
  5984  0AE4  0471               	iorwf	___lldiv@divisor+1,w
  5985  0AE5  0470               	iorwf	___lldiv@divisor,w
  5986  0AE6  1903               	skipnz
  5987  0AE7  2B2F               	goto	i1l2143
  5988  0AE8  01FD               	clrf	___lldiv@counter
  5989  0AE9  0AFD               	incf	___lldiv@counter,f
  5990  0AEA                     i1l2129:	
  5991  0AEA  1BF3               	btfsc	___lldiv@divisor+3,7
  5992  0AEB  2AFA               	goto	i1l2131
  5993  0AEC  3001               	movlw	1
  5994  0AED  00F8               	movwf	??___lldiv
  5995  0AEE                     u246_25:	
  5996  0AEE  1003               	clrc
  5997  0AEF  0DF0               	rlf	___lldiv@divisor,f
  5998  0AF0  0DF1               	rlf	___lldiv@divisor+1,f
  5999  0AF1  0DF2               	rlf	___lldiv@divisor+2,f
  6000  0AF2  0DF3               	rlf	___lldiv@divisor+3,f
  6001  0AF3  0BF8               	decfsz	??___lldiv,f
  6002  0AF4  2AEE               	goto	u246_25
  6003  0AF5  3001               	movlw	1
  6004  0AF6  00F8               	movwf	??___lldiv
  6005  0AF7  0878               	movf	??___lldiv,w
  6006  0AF8  07FD               	addwf	___lldiv@counter,f
  6007  0AF9  2AEA               	goto	i1l2129
  6008  0AFA                     i1l2131:	
  6009  0AFA  3001               	movlw	1
  6010  0AFB  00F8               	movwf	??___lldiv
  6011  0AFC                     u248_25:	
  6012  0AFC  1003               	clrc
  6013  0AFD  0DF9               	rlf	___lldiv@quotient,f
  6014  0AFE  0DFA               	rlf	___lldiv@quotient+1,f
  6015  0AFF  0DFB               	rlf	___lldiv@quotient+2,f
  6016  0B00  0DFC               	rlf	___lldiv@quotient+3,f
  6017  0B01  0BF8               	decfsz	??___lldiv,f
  6018  0B02  2AFC               	goto	u248_25
  6019  0B03  0873               	movf	___lldiv@divisor+3,w
  6020  0B04  0277               	subwf	___lldiv@dividend+3,w
  6021  0B05  1D03               	skipz
  6022  0B06  2B11               	goto	u249_25
  6023  0B07  0872               	movf	___lldiv@divisor+2,w
  6024  0B08  0276               	subwf	___lldiv@dividend+2,w
  6025  0B09  1D03               	skipz
  6026  0B0A  2B11               	goto	u249_25
  6027  0B0B  0871               	movf	___lldiv@divisor+1,w
  6028  0B0C  0275               	subwf	___lldiv@dividend+1,w
  6029  0B0D  1D03               	skipz
  6030  0B0E  2B11               	goto	u249_25
  6031  0B0F  0870               	movf	___lldiv@divisor,w
  6032  0B10  0274               	subwf	___lldiv@dividend,w
  6033  0B11                     u249_25:	
  6034  0B11  1C03               	skipc
  6035  0B12  2B22               	goto	i1l2139
  6036  0B13  0870               	movf	___lldiv@divisor,w
  6037  0B14  02F4               	subwf	___lldiv@dividend,f
  6038  0B15  0871               	movf	___lldiv@divisor+1,w
  6039  0B16  1C03               	skipc
  6040  0B17  0F71               	incfsz	___lldiv@divisor+1,w
  6041  0B18  02F5               	subwf	___lldiv@dividend+1,f
  6042  0B19  0872               	movf	___lldiv@divisor+2,w
  6043  0B1A  1C03               	skipc
  6044  0B1B  0F72               	incfsz	___lldiv@divisor+2,w
  6045  0B1C  02F6               	subwf	___lldiv@dividend+2,f
  6046  0B1D  0873               	movf	___lldiv@divisor+3,w
  6047  0B1E  1C03               	skipc
  6048  0B1F  0F73               	incfsz	___lldiv@divisor+3,w
  6049  0B20  02F7               	subwf	___lldiv@dividend+3,f
  6050  0B21  1479               	bsf	___lldiv@quotient,0
  6051  0B22                     i1l2139:	
  6052  0B22  3001               	movlw	1
  6053  0B23                     u250_25:	
  6054  0B23  1003               	clrc
  6055  0B24  0CF3               	rrf	___lldiv@divisor+3,f
  6056  0B25  0CF2               	rrf	___lldiv@divisor+2,f
  6057  0B26  0CF1               	rrf	___lldiv@divisor+1,f
  6058  0B27  0CF0               	rrf	___lldiv@divisor,f
  6059  0B28  3EFF               	addlw	-1
  6060  0B29  1D03               	skipz
  6061  0B2A  2B23               	goto	u250_25
  6062  0B2B  3001               	movlw	1
  6063  0B2C  02FD               	subwf	___lldiv@counter,f
  6064  0B2D  1D03               	btfss	3,2
  6065  0B2E  2AFA               	goto	i1l2131
  6066  0B2F                     i1l2143:	
  6067  0B2F  087C               	movf	___lldiv@quotient+3,w
  6068  0B30  00F3               	movwf	?___lldiv+3
  6069  0B31  087B               	movf	___lldiv@quotient+2,w
  6070  0B32  00F2               	movwf	?___lldiv+2
  6071  0B33  087A               	movf	___lldiv@quotient+1,w
  6072  0B34  00F1               	movwf	?___lldiv+1
  6073  0B35  0879               	movf	___lldiv@quotient,w
  6074  0B36  00F0               	movwf	?___lldiv
  6075  0B37  0008               	return
  6076  0B38                     __end_of___lldiv:	
  6077                           
  6078                           	psect	text28
  6079  16E0                     __ptext28:	
  6080 ;; *************** function ___lltoft *****************
  6081 ;; Defined at:
  6082 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lltoft.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  c               4    8[COMMON] unsigned long 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  exp             1   13[COMMON] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  3    8[COMMON] float 
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0, pclath, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6096 ;;      Params:         4       0       0       0       0
  6097 ;;      Locals:         1       0       0       0       0
  6098 ;;      Temps:          1       0       0       0       0
  6099 ;;      Totals:         6       0       0       0       0
  6100 ;;Total ram usage:        6 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    1
  6103 ;; This function calls:
  6104 ;;		___ftpack
  6105 ;; This function is called by:
  6106 ;;		_ftoa
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           
  6111                           ;psect for function ___lltoft
  6112  16E0                     ___lltoft:	
  6113                           
  6114                           ;incstack = 0
  6115 ;; hardware stack exceeded
  6116                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6117  16E0  308E               	movlw	142
  6118  16E1  00FC               	movwf	??___lltoft
  6119  16E2  087C               	movf	??___lltoft,w
  6120  16E3  00FD               	movwf	___lltoft@exp
  6121  16E4                     i1l2529:	
  6122  16E4  30FF               	movlw	255
  6123  16E5  057B               	andwf	___lltoft@c+3,w
  6124  16E6  1903               	btfsc	3,2
  6125  16E7  2EF6               	goto	i1l2531
  6126  16E8  3001               	movlw	1
  6127  16E9                     u320_25:	
  6128  16E9  1003               	clrc
  6129  16EA  0CFB               	rrf	___lltoft@c+3,f
  6130  16EB  0CFA               	rrf	___lltoft@c+2,f
  6131  16EC  0CF9               	rrf	___lltoft@c+1,f
  6132  16ED  0CF8               	rrf	___lltoft@c,f
  6133  16EE  3EFF               	addlw	-1
  6134  16EF  1D03               	skipz
  6135  16F0  2EE9               	goto	u320_25
  6136  16F1  3001               	movlw	1
  6137  16F2  00FC               	movwf	??___lltoft
  6138  16F3  087C               	movf	??___lltoft,w
  6139  16F4  07FD               	addwf	___lltoft@exp,f
  6140  16F5  2EE4               	goto	i1l2529
  6141  16F6                     i1l2531:	
  6142  16F6  0878               	movf	___lltoft@c,w
  6143  16F7  00F0               	movwf	___ftpack@arg
  6144  16F8  0879               	movf	___lltoft@c+1,w
  6145  16F9  00F1               	movwf	___ftpack@arg+1
  6146  16FA  087A               	movf	___lltoft@c+2,w
  6147  16FB  00F2               	movwf	___ftpack@arg+2
  6148  16FC  087D               	movf	___lltoft@exp,w
  6149  16FD  00FC               	movwf	??___lltoft
  6150  16FE  087C               	movf	??___lltoft,w
  6151  16FF  00F3               	movwf	___ftpack@exp
  6152  1700  01F4               	clrf	___ftpack@sign
  6153  1701  120A  158A  239E   	fcall	___ftpack
  6154  1704  0870               	movf	?___ftpack,w
  6155  1705  00F8               	movwf	?___lltoft
  6156  1706  0871               	movf	?___ftpack+1,w
  6157  1707  00F9               	movwf	?___lltoft+1
  6158  1708  0872               	movf	?___ftpack+2,w
  6159  1709  00FA               	movwf	?___lltoft+2
  6160  170A  0008               	return
  6161  170B                     __end_of___lltoft:	
  6162                           
  6163                           	psect	text29
  6164  0D71                     __ptext29:	
  6165 ;; *************** function ___fttol *****************
  6166 ;; Defined at:
  6167 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  f1              3   16[BANK0 ] float 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  lval            4   25[BANK0 ] unsigned long 
  6172 ;;  exp1            1   29[BANK0 ] unsigned char 
  6173 ;;  sign1           1   24[BANK0 ] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  4   16[BANK0 ] long 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6183 ;;      Params:         0       4       0       0       0
  6184 ;;      Locals:         0       6       0       0       0
  6185 ;;      Temps:          0       4       0       0       0
  6186 ;;      Totals:         0      14       0       0       0
  6187 ;;Total ram usage:       14 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; This function calls:
  6190 ;;		Nothing
  6191 ;; This function is called by:
  6192 ;;		_ISR
  6193 ;;		_ftoa
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function ___fttol
  6199  0D71                     ___fttol:	
  6200                           
  6201                           ;incstack = 0
  6202 ;; hardware stack exceeded
  6203                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6204  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  6205  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  6206  0D73  0830               	movf	___fttol@f1,w
  6207  0D74  00B4               	movwf	??___fttol
  6208  0D75  0831               	movf	___fttol@f1+1,w
  6209  0D76  00B5               	movwf	??___fttol+1
  6210  0D77  0832               	movf	___fttol@f1+2,w
  6211  0D78  00B6               	movwf	??___fttol+2
  6212  0D79  1003               	clrc
  6213  0D7A  0D35               	rlf	??___fttol+1,w
  6214  0D7B  0D36               	rlf	??___fttol+2,w
  6215  0D7C  00B7               	movwf	??___fttol+3
  6216  0D7D  0837               	movf	??___fttol+3,w
  6217  0D7E  00BD               	movwf	___fttol@exp1
  6218  0D7F  08BD               	movf	___fttol@exp1,f
  6219  0D80  1D03               	skipz
  6220  0D81  2D8B               	goto	i1l2487
  6221  0D82  3000               	movlw	0
  6222  0D83  00B3               	movwf	?___fttol+3
  6223  0D84  3000               	movlw	0
  6224  0D85  00B2               	movwf	?___fttol+2
  6225  0D86  3000               	movlw	0
  6226  0D87  00B1               	movwf	?___fttol+1
  6227  0D88  3000               	movlw	0
  6228  0D89  00B0               	movwf	?___fttol
  6229  0D8A  0008               	return
  6230  0D8B                     i1l2487:	
  6231  0D8B  0830               	movf	___fttol@f1,w
  6232  0D8C  00B4               	movwf	??___fttol
  6233  0D8D  0831               	movf	___fttol@f1+1,w
  6234  0D8E  00B5               	movwf	??___fttol+1
  6235  0D8F  0832               	movf	___fttol@f1+2,w
  6236  0D90  00B6               	movwf	??___fttol+2
  6237  0D91  3017               	movlw	23
  6238  0D92                     u311_25:	
  6239  0D92  1003               	clrc
  6240  0D93  0CB6               	rrf	??___fttol+2,f
  6241  0D94  0CB5               	rrf	??___fttol+1,f
  6242  0D95  0CB4               	rrf	??___fttol,f
  6243  0D96  3EFF               	addlw	-1
  6244  0D97  1D03               	skipz
  6245  0D98  2D92               	goto	u311_25
  6246  0D99  0834               	movf	??___fttol,w
  6247  0D9A  00B7               	movwf	??___fttol+3
  6248  0D9B  0837               	movf	??___fttol+3,w
  6249  0D9C  00B8               	movwf	___fttol@sign1
  6250  0D9D  17B1               	bsf	___fttol@f1+1,7
  6251  0D9E  30FF               	movlw	255
  6252  0D9F  05B0               	andwf	___fttol@f1,f
  6253  0DA0  30FF               	movlw	255
  6254  0DA1  05B1               	andwf	___fttol@f1+1,f
  6255  0DA2  3000               	movlw	0
  6256  0DA3  05B2               	andwf	___fttol@f1+2,f
  6257  0DA4  0830               	movf	___fttol@f1,w
  6258  0DA5  00B9               	movwf	___fttol@lval
  6259  0DA6  0831               	movf	___fttol@f1+1,w
  6260  0DA7  00BA               	movwf	___fttol@lval+1
  6261  0DA8  0832               	movf	___fttol@f1+2,w
  6262  0DA9  00BB               	movwf	___fttol@lval+2
  6263  0DAA  01BC               	clrf	___fttol@lval+3
  6264  0DAB  308E               	movlw	142
  6265  0DAC  02BD               	subwf	___fttol@exp1,f
  6266  0DAD  1FBD               	btfss	___fttol@exp1,7
  6267  0DAE  2DCD               	goto	i1l2507
  6268  0DAF  083D               	movf	___fttol@exp1,w
  6269  0DB0  3A80               	xorlw	128
  6270  0DB1  3E8F               	addlw	143
  6271  0DB2  1803               	skipnc
  6272  0DB3  2DBD               	goto	i1l2505
  6273  0DB4  3000               	movlw	0
  6274  0DB5  00B3               	movwf	?___fttol+3
  6275  0DB6  3000               	movlw	0
  6276  0DB7  00B2               	movwf	?___fttol+2
  6277  0DB8  3000               	movlw	0
  6278  0DB9  00B1               	movwf	?___fttol+1
  6279  0DBA  3000               	movlw	0
  6280  0DBB  00B0               	movwf	?___fttol
  6281  0DBC  0008               	return
  6282  0DBD                     i1l2505:	
  6283  0DBD  3001               	movlw	1
  6284  0DBE                     u314_25:	
  6285  0DBE  1003               	clrc
  6286  0DBF  0CBC               	rrf	___fttol@lval+3,f
  6287  0DC0  0CBB               	rrf	___fttol@lval+2,f
  6288  0DC1  0CBA               	rrf	___fttol@lval+1,f
  6289  0DC2  0CB9               	rrf	___fttol@lval,f
  6290  0DC3  3EFF               	addlw	-1
  6291  0DC4  1D03               	skipz
  6292  0DC5  2DBE               	goto	u314_25
  6293  0DC6  3001               	movlw	1
  6294  0DC7  00B4               	movwf	??___fttol
  6295  0DC8  0834               	movf	??___fttol,w
  6296  0DC9  07BD               	addwf	___fttol@exp1,f
  6297  0DCA  1903               	btfsc	3,2
  6298  0DCB  2DE8               	goto	i1l2517
  6299  0DCC  2DBD               	goto	i1l2505
  6300  0DCD                     i1l2507:	
  6301  0DCD  3018               	movlw	24
  6302  0DCE  023D               	subwf	___fttol@exp1,w
  6303  0DCF  1C03               	skipc
  6304  0DD0  2DE5               	goto	i1l2515
  6305  0DD1  3000               	movlw	0
  6306  0DD2  00B3               	movwf	?___fttol+3
  6307  0DD3  3000               	movlw	0
  6308  0DD4  00B2               	movwf	?___fttol+2
  6309  0DD5  3000               	movlw	0
  6310  0DD6  00B1               	movwf	?___fttol+1
  6311  0DD7  3000               	movlw	0
  6312  0DD8  00B0               	movwf	?___fttol
  6313  0DD9  0008               	return
  6314  0DDA                     i1l2513:	
  6315  0DDA  3001               	movlw	1
  6316  0DDB  00B4               	movwf	??___fttol
  6317  0DDC                     u317_25:	
  6318  0DDC  1003               	clrc
  6319  0DDD  0DB9               	rlf	___fttol@lval,f
  6320  0DDE  0DBA               	rlf	___fttol@lval+1,f
  6321  0DDF  0DBB               	rlf	___fttol@lval+2,f
  6322  0DE0  0DBC               	rlf	___fttol@lval+3,f
  6323  0DE1  0BB4               	decfsz	??___fttol,f
  6324  0DE2  2DDC               	goto	u317_25
  6325  0DE3  3001               	movlw	1
  6326  0DE4  02BD               	subwf	___fttol@exp1,f
  6327  0DE5                     i1l2515:	
  6328  0DE5  08BD               	movf	___fttol@exp1,f
  6329  0DE6  1D03               	skipz
  6330  0DE7  2DDA               	goto	i1l2513
  6331  0DE8                     i1l2517:	
  6332  0DE8  0838               	movf	___fttol@sign1,w
  6333  0DE9  1903               	btfsc	3,2
  6334  0DEA  2DF6               	goto	i1l2521
  6335  0DEB  09B9               	comf	___fttol@lval,f
  6336  0DEC  09BA               	comf	___fttol@lval+1,f
  6337  0DED  09BB               	comf	___fttol@lval+2,f
  6338  0DEE  09BC               	comf	___fttol@lval+3,f
  6339  0DEF  0AB9               	incf	___fttol@lval,f
  6340  0DF0  1903               	skipnz
  6341  0DF1  0ABA               	incf	___fttol@lval+1,f
  6342  0DF2  1903               	skipnz
  6343  0DF3  0ABB               	incf	___fttol@lval+2,f
  6344  0DF4  1903               	skipnz
  6345  0DF5  0ABC               	incf	___fttol@lval+3,f
  6346  0DF6                     i1l2521:	
  6347  0DF6  083C               	movf	___fttol@lval+3,w
  6348  0DF7  00B3               	movwf	?___fttol+3
  6349  0DF8  083B               	movf	___fttol@lval+2,w
  6350  0DF9  00B2               	movwf	?___fttol+2
  6351  0DFA  083A               	movf	___fttol@lval+1,w
  6352  0DFB  00B1               	movwf	?___fttol+1
  6353  0DFC  0839               	movf	___fttol@lval,w
  6354  0DFD  00B0               	movwf	?___fttol
  6355  0DFE  0008               	return
  6356  0DFF                     __end_of___fttol:	
  6357                           
  6358                           	psect	text30
  6359  161C                     __ptext30:	
  6360 ;; *************** function ___ftsub *****************
  6361 ;; Defined at:
  6362 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftsub.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;  f2              3    7[BANK0 ] float 
  6365 ;;  f1              3   10[BANK0 ] float 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  3    7[BANK0 ] float 
  6370 ;; Registers used:
  6371 ;;		wreg, status,2, status,0, pclath, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6377 ;;      Params:         0       6       0       0       0
  6378 ;;      Locals:         0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0
  6380 ;;      Totals:         0       6       0       0       0
  6381 ;;Total ram usage:        6 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    2
  6384 ;; This function calls:
  6385 ;;		___ftadd
  6386 ;; This function is called by:
  6387 ;;		_ftoa
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function ___ftsub
  6393  161C                     ___ftsub:	
  6394                           
  6395                           ;incstack = 0
  6396 ;; hardware stack exceeded
  6397                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6398  161C  3080               	movlw	128
  6399  161D  1283               	bcf	3,5	;RP0=0, select bank0
  6400  161E  1303               	bcf	3,6	;RP1=0, select bank0
  6401  161F  06A9               	xorwf	___ftsub@f2+2,f
  6402  1620  082A               	movf	___ftsub@f1,w
  6403  1621  00F8               	movwf	___ftadd@f1
  6404  1622  082B               	movf	___ftsub@f1+1,w
  6405  1623  00F9               	movwf	___ftadd@f1+1
  6406  1624  082C               	movf	___ftsub@f1+2,w
  6407  1625  00FA               	movwf	___ftadd@f1+2
  6408  1626  0827               	movf	___ftsub@f2,w
  6409  1627  00FB               	movwf	___ftadd@f2
  6410  1628  0828               	movf	___ftsub@f2+1,w
  6411  1629  00FC               	movwf	___ftadd@f2+1
  6412  162A  0829               	movf	___ftsub@f2+2,w
  6413  162B  00FD               	movwf	___ftadd@f2+2
  6414  162C  120A  118A  2614   	fcall	___ftadd
  6415  162F  0878               	movf	?___ftadd,w
  6416  1630  1283               	bcf	3,5	;RP0=0, select bank0
  6417  1631  1303               	bcf	3,6	;RP1=0, select bank0
  6418  1632  00A7               	movwf	?___ftsub
  6419  1633  0879               	movf	?___ftadd+1,w
  6420  1634  00A8               	movwf	?___ftsub+1
  6421  1635  087A               	movf	?___ftadd+2,w
  6422  1636  00A9               	movwf	?___ftsub+2
  6423  1637  0008               	return
  6424  1638                     __end_of___ftsub:	
  6425                           
  6426                           	psect	text31
  6427  0614                     __ptext31:	
  6428 ;; *************** function ___ftadd *****************
  6429 ;; Defined at:
  6430 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  f1              3    8[COMMON] float 
  6433 ;;  f2              3   11[COMMON] float 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  exp1            1    6[BANK0 ] unsigned char 
  6436 ;;  exp2            1    5[BANK0 ] unsigned char 
  6437 ;;  sign            1    4[BANK0 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  3    8[COMMON] float 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6447 ;;      Params:         6       0       0       0       0
  6448 ;;      Locals:         0       3       0       0       0
  6449 ;;      Temps:          0       4       0       0       0
  6450 ;;      Totals:         6       7       0       0       0
  6451 ;;Total ram usage:       13 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    1
  6454 ;; This function calls:
  6455 ;;		___ftpack
  6456 ;; This function is called by:
  6457 ;;		___ftsub
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function ___ftadd
  6463  0614                     ___ftadd:	
  6464                           
  6465                           ;incstack = 0
  6466 ;; hardware stack exceeded
  6467                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6468  0614  0878               	movf	___ftadd@f1,w
  6469  0615  1283               	bcf	3,5	;RP0=0, select bank0
  6470  0616  1303               	bcf	3,6	;RP1=0, select bank0
  6471  0617  00A0               	movwf	??___ftadd
  6472  0618  0879               	movf	___ftadd@f1+1,w
  6473  0619  00A1               	movwf	??___ftadd+1
  6474  061A  087A               	movf	___ftadd@f1+2,w
  6475  061B  00A2               	movwf	??___ftadd+2
  6476  061C  1003               	clrc
  6477  061D  0D21               	rlf	??___ftadd+1,w
  6478  061E  0D22               	rlf	??___ftadd+2,w
  6479  061F  00A3               	movwf	??___ftadd+3
  6480  0620  0823               	movf	??___ftadd+3,w
  6481  0621  00A6               	movwf	___ftadd@exp1
  6482  0622  087B               	movf	___ftadd@f2,w
  6483  0623  00A0               	movwf	??___ftadd
  6484  0624  087C               	movf	___ftadd@f2+1,w
  6485  0625  00A1               	movwf	??___ftadd+1
  6486  0626  087D               	movf	___ftadd@f2+2,w
  6487  0627  00A2               	movwf	??___ftadd+2
  6488  0628  1003               	clrc
  6489  0629  0D21               	rlf	??___ftadd+1,w
  6490  062A  0D22               	rlf	??___ftadd+2,w
  6491  062B  00A3               	movwf	??___ftadd+3
  6492  062C  0823               	movf	??___ftadd+3,w
  6493  062D  00A5               	movwf	___ftadd@exp2
  6494  062E  0826               	movf	___ftadd@exp1,w
  6495  062F  1903               	btfsc	3,2
  6496  0630  2E3D               	goto	i1l2059
  6497  0631  0825               	movf	___ftadd@exp2,w
  6498  0632  0226               	subwf	___ftadd@exp1,w
  6499  0633  1803               	skipnc
  6500  0634  2E44               	goto	i1l2063
  6501  0635  0326               	decf	___ftadd@exp1,w
  6502  0636  3AFF               	xorlw	255
  6503  0637  0725               	addwf	___ftadd@exp2,w
  6504  0638  00A0               	movwf	??___ftadd
  6505  0639  3019               	movlw	25
  6506  063A  0220               	subwf	??___ftadd,w
  6507  063B  1C03               	skipc
  6508  063C  2E44               	goto	i1l2063
  6509  063D                     i1l2059:	
  6510  063D  087B               	movf	___ftadd@f2,w
  6511  063E  00F8               	movwf	?___ftadd
  6512  063F  087C               	movf	___ftadd@f2+1,w
  6513  0640  00F9               	movwf	?___ftadd+1
  6514  0641  087D               	movf	___ftadd@f2+2,w
  6515  0642  00FA               	movwf	?___ftadd+2
  6516  0643  0008               	return
  6517  0644                     i1l2063:	
  6518  0644  0825               	movf	___ftadd@exp2,w
  6519  0645  1903               	btfsc	3,2
  6520  0646  0008               	return
  6521  0647  0826               	movf	___ftadd@exp1,w
  6522  0648  0225               	subwf	___ftadd@exp2,w
  6523  0649  1803               	skipnc
  6524  064A  2E53               	goto	i1l2069
  6525  064B  0325               	decf	___ftadd@exp2,w
  6526  064C  3AFF               	xorlw	255
  6527  064D  0726               	addwf	___ftadd@exp1,w
  6528  064E  00A0               	movwf	??___ftadd
  6529  064F  3019               	movlw	25
  6530  0650  0220               	subwf	??___ftadd,w
  6531  0651  1803               	btfsc	3,0
  6532  0652  0008               	return
  6533  0653                     i1l2069:	
  6534  0653  3006               	movlw	6
  6535  0654  00A0               	movwf	??___ftadd
  6536  0655  0820               	movf	??___ftadd,w
  6537  0656  00A4               	movwf	___ftadd@sign
  6538  0657  1BFA               	btfsc	___ftadd@f1+2,7
  6539  0658  17A4               	bsf	___ftadd@sign,7
  6540  0659  1BFD               	btfsc	___ftadd@f2+2,7
  6541  065A  1724               	bsf	___ftadd@sign,6
  6542  065B  17F9               	bsf	___ftadd@f1+1,7
  6543  065C  30FF               	movlw	255
  6544  065D  05F8               	andwf	___ftadd@f1,f
  6545  065E  30FF               	movlw	255
  6546  065F  05F9               	andwf	___ftadd@f1+1,f
  6547  0660  3000               	movlw	0
  6548  0661  05FA               	andwf	___ftadd@f1+2,f
  6549  0662  17FC               	bsf	___ftadd@f2+1,7
  6550  0663  30FF               	movlw	255
  6551  0664  05FB               	andwf	___ftadd@f2,f
  6552  0665  30FF               	movlw	255
  6553  0666  05FC               	andwf	___ftadd@f2+1,f
  6554  0667  3000               	movlw	0
  6555  0668  05FD               	andwf	___ftadd@f2+2,f
  6556  0669  0825               	movf	___ftadd@exp2,w
  6557  066A  0226               	subwf	___ftadd@exp1,w
  6558  066B  1803               	skipnc
  6559  066C  2E93               	goto	i1l2091
  6560  066D                     i1l2081:	
  6561  066D  3001               	movlw	1
  6562  066E                     u230_25:	
  6563  066E  1003               	clrc
  6564  066F  0DFB               	rlf	___ftadd@f2,f
  6565  0670  0DFC               	rlf	___ftadd@f2+1,f
  6566  0671  0DFD               	rlf	___ftadd@f2+2,f
  6567  0672  3EFF               	addlw	-1
  6568  0673  1D03               	skipz
  6569  0674  2E6E               	goto	u230_25
  6570  0675  3001               	movlw	1
  6571  0676  02A5               	subwf	___ftadd@exp2,f
  6572  0677  0825               	movf	___ftadd@exp2,w
  6573  0678  0626               	xorwf	___ftadd@exp1,w
  6574  0679  1903               	skipnz
  6575  067A  2E8E               	goto	i1l2089
  6576  067B  3001               	movlw	1
  6577  067C  02A4               	subwf	___ftadd@sign,f
  6578  067D  0824               	movf	___ftadd@sign,w
  6579  067E  3907               	andlw	7
  6580  067F  1903               	btfsc	3,2
  6581  0680  2E8E               	goto	i1l2089
  6582  0681  2E6D               	goto	i1l2081
  6583  0682                     i1l2087:	
  6584  0682  3001               	movlw	1
  6585  0683                     u233_25:	
  6586  0683  1003               	clrc
  6587  0684  0CFA               	rrf	___ftadd@f1+2,f
  6588  0685  0CF9               	rrf	___ftadd@f1+1,f
  6589  0686  0CF8               	rrf	___ftadd@f1,f
  6590  0687  3EFF               	addlw	-1
  6591  0688  1D03               	skipz
  6592  0689  2E83               	goto	u233_25
  6593  068A  3001               	movlw	1
  6594  068B  00A0               	movwf	??___ftadd
  6595  068C  0820               	movf	??___ftadd,w
  6596  068D  07A6               	addwf	___ftadd@exp1,f
  6597  068E                     i1l2089:	
  6598  068E  0826               	movf	___ftadd@exp1,w
  6599  068F  0625               	xorwf	___ftadd@exp2,w
  6600  0690  1903               	btfsc	3,2
  6601  0691  2EBC               	goto	i1l565
  6602  0692  2E82               	goto	i1l2087
  6603  0693                     i1l2091:	
  6604  0693  0826               	movf	___ftadd@exp1,w
  6605  0694  0225               	subwf	___ftadd@exp2,w
  6606  0695  1803               	skipnc
  6607  0696  2EBC               	goto	i1l565
  6608  0697                     i1l2093:	
  6609  0697  3001               	movlw	1
  6610  0698                     u236_25:	
  6611  0698  1003               	clrc
  6612  0699  0DF8               	rlf	___ftadd@f1,f
  6613  069A  0DF9               	rlf	___ftadd@f1+1,f
  6614  069B  0DFA               	rlf	___ftadd@f1+2,f
  6615  069C  3EFF               	addlw	-1
  6616  069D  1D03               	skipz
  6617  069E  2E98               	goto	u236_25
  6618  069F  3001               	movlw	1
  6619  06A0  02A6               	subwf	___ftadd@exp1,f
  6620  06A1  0825               	movf	___ftadd@exp2,w
  6621  06A2  0626               	xorwf	___ftadd@exp1,w
  6622  06A3  1903               	skipnz
  6623  06A4  2EB8               	goto	i1l2101
  6624  06A5  3001               	movlw	1
  6625  06A6  02A4               	subwf	___ftadd@sign,f
  6626  06A7  0824               	movf	___ftadd@sign,w
  6627  06A8  3907               	andlw	7
  6628  06A9  1903               	btfsc	3,2
  6629  06AA  2EB8               	goto	i1l2101
  6630  06AB  2E97               	goto	i1l2093
  6631  06AC                     i1l2099:	
  6632  06AC  3001               	movlw	1
  6633  06AD                     u239_25:	
  6634  06AD  1003               	clrc
  6635  06AE  0CFD               	rrf	___ftadd@f2+2,f
  6636  06AF  0CFC               	rrf	___ftadd@f2+1,f
  6637  06B0  0CFB               	rrf	___ftadd@f2,f
  6638  06B1  3EFF               	addlw	-1
  6639  06B2  1D03               	skipz
  6640  06B3  2EAD               	goto	u239_25
  6641  06B4  3001               	movlw	1
  6642  06B5  00A0               	movwf	??___ftadd
  6643  06B6  0820               	movf	??___ftadd,w
  6644  06B7  07A5               	addwf	___ftadd@exp2,f
  6645  06B8                     i1l2101:	
  6646  06B8  0826               	movf	___ftadd@exp1,w
  6647  06B9  0625               	xorwf	___ftadd@exp2,w
  6648  06BA  1D03               	skipz
  6649  06BB  2EAC               	goto	i1l2099
  6650  06BC                     i1l565:	
  6651  06BC  1FA4               	btfss	___ftadd@sign,7
  6652  06BD  2ECE               	goto	i1l2105
  6653  06BE  30FF               	movlw	255
  6654  06BF  06F8               	xorwf	___ftadd@f1,f
  6655  06C0  30FF               	movlw	255
  6656  06C1  06F9               	xorwf	___ftadd@f1+1,f
  6657  06C2  30FF               	movlw	255
  6658  06C3  06FA               	xorwf	___ftadd@f1+2,f
  6659  06C4  3001               	movlw	1
  6660  06C5  07F8               	addwf	___ftadd@f1,f
  6661  06C6  3000               	movlw	0
  6662  06C7  1803               	skipnc
  6663  06C8  3001               	movlw	1
  6664  06C9  07F9               	addwf	___ftadd@f1+1,f
  6665  06CA  3000               	movlw	0
  6666  06CB  1803               	skipnc
  6667  06CC  3001               	movlw	1
  6668  06CD  07FA               	addwf	___ftadd@f1+2,f
  6669  06CE                     i1l2105:	
  6670  06CE  1F24               	btfss	___ftadd@sign,6
  6671  06CF  2EE0               	goto	i1l2109
  6672  06D0  30FF               	movlw	255
  6673  06D1  06FB               	xorwf	___ftadd@f2,f
  6674  06D2  30FF               	movlw	255
  6675  06D3  06FC               	xorwf	___ftadd@f2+1,f
  6676  06D4  30FF               	movlw	255
  6677  06D5  06FD               	xorwf	___ftadd@f2+2,f
  6678  06D6  3001               	movlw	1
  6679  06D7  07FB               	addwf	___ftadd@f2,f
  6680  06D8  3000               	movlw	0
  6681  06D9  1803               	skipnc
  6682  06DA  3001               	movlw	1
  6683  06DB  07FC               	addwf	___ftadd@f2+1,f
  6684  06DC  3000               	movlw	0
  6685  06DD  1803               	skipnc
  6686  06DE  3001               	movlw	1
  6687  06DF  07FD               	addwf	___ftadd@f2+2,f
  6688  06E0                     i1l2109:	
  6689  06E0  01A4               	clrf	___ftadd@sign
  6690  06E1  0878               	movf	___ftadd@f1,w
  6691  06E2  07FB               	addwf	___ftadd@f2,f
  6692  06E3  0879               	movf	___ftadd@f1+1,w
  6693  06E4  1103               	clrz
  6694  06E5  1803               	skipnc
  6695  06E6  0A79               	incf	___ftadd@f1+1,w
  6696  06E7  1D03               	btfss	3,2
  6697  06E8  07FC               	addwf	___ftadd@f2+1,f
  6698  06E9  087A               	movf	___ftadd@f1+2,w
  6699  06EA  1103               	clrz
  6700  06EB  1803               	skipnc
  6701  06EC  0A7A               	incf	___ftadd@f1+2,w
  6702  06ED  1D03               	btfss	3,2
  6703  06EE  07FD               	addwf	___ftadd@f2+2,f
  6704  06EF  1FFD               	btfss	___ftadd@f2+2,7
  6705  06F0  2F03               	goto	i1l2119
  6706  06F1  30FF               	movlw	255
  6707  06F2  06FB               	xorwf	___ftadd@f2,f
  6708  06F3  30FF               	movlw	255
  6709  06F4  06FC               	xorwf	___ftadd@f2+1,f
  6710  06F5  30FF               	movlw	255
  6711  06F6  06FD               	xorwf	___ftadd@f2+2,f
  6712  06F7  3001               	movlw	1
  6713  06F8  07FB               	addwf	___ftadd@f2,f
  6714  06F9  3000               	movlw	0
  6715  06FA  1803               	skipnc
  6716  06FB  3001               	movlw	1
  6717  06FC  07FC               	addwf	___ftadd@f2+1,f
  6718  06FD  3000               	movlw	0
  6719  06FE  1803               	skipnc
  6720  06FF  3001               	movlw	1
  6721  0700  07FD               	addwf	___ftadd@f2+2,f
  6722  0701  01A4               	clrf	___ftadd@sign
  6723  0702  0AA4               	incf	___ftadd@sign,f
  6724  0703                     i1l2119:	
  6725  0703  087B               	movf	___ftadd@f2,w
  6726  0704  00F0               	movwf	___ftpack@arg
  6727  0705  087C               	movf	___ftadd@f2+1,w
  6728  0706  00F1               	movwf	___ftpack@arg+1
  6729  0707  087D               	movf	___ftadd@f2+2,w
  6730  0708  00F2               	movwf	___ftpack@arg+2
  6731  0709  0826               	movf	___ftadd@exp1,w
  6732  070A  00A0               	movwf	??___ftadd
  6733  070B  0820               	movf	??___ftadd,w
  6734  070C  00F3               	movwf	___ftpack@exp
  6735  070D  0824               	movf	___ftadd@sign,w
  6736  070E  00A1               	movwf	??___ftadd+1
  6737  070F  0821               	movf	??___ftadd+1,w
  6738  0710  00F4               	movwf	___ftpack@sign
  6739  0711  120A  158A  239E   	fcall	___ftpack
  6740  0714  0870               	movf	?___ftpack,w
  6741  0715  00F8               	movwf	?___ftadd
  6742  0716  0871               	movf	?___ftpack+1,w
  6743  0717  00F9               	movwf	?___ftadd+1
  6744  0718  0872               	movf	?___ftpack+2,w
  6745  0719  00FA               	movwf	?___ftadd+2
  6746  071A  0008               	return
  6747  071B                     __end_of___ftadd:	
  6748                           
  6749                           	psect	text32
  6750  158D                     __ptext32:	
  6751 ;; *************** function ___ftneg *****************
  6752 ;; Defined at:
  6753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;  f1              3    0[COMMON] float 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  3    0[COMMON] float 
  6760 ;; Registers used:
  6761 ;;		wreg
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6767 ;;      Params:         3       0       0       0       0
  6768 ;;      Locals:         0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0
  6770 ;;      Totals:         3       0       0       0       0
  6771 ;;Total ram usage:        3 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		_ftoa
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           
  6781                           ;psect for function ___ftneg
  6782  158D                     ___ftneg:	
  6783                           
  6784                           ;incstack = 0
  6785 ;; hardware stack exceeded
  6786                           ; Regs used in ___ftneg: [wreg]
  6787  158D  0872               	movf	___ftneg@f1+2,w
  6788  158E  0471               	iorwf	___ftneg@f1+1,w
  6789  158F  0470               	iorwf	___ftneg@f1,w
  6790  1590  1903               	skipnz
  6791  1591  0008               	return
  6792  1592  3080               	movlw	128
  6793  1593  06F2               	xorwf	___ftneg@f1+2,f
  6794  1594  0008               	return
  6795  1595                     __end_of___ftneg:	
  6796                           
  6797                           	psect	text33
  6798  071B                     __ptext33:	
  6799 ;; *************** function ___ftmul *****************
  6800 ;; Defined at:
  6801 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  f1              3    0[BANK0 ] float 
  6804 ;;  f2              3    3[BANK0 ] float 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6807 ;;  sign            1   15[BANK0 ] unsigned char 
  6808 ;;  cntr            1   14[BANK0 ] unsigned char 
  6809 ;;  exp             1   10[BANK0 ] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  3    0[BANK0 ] float 
  6812 ;; Registers used:
  6813 ;;		wreg, status,2, status,0, pclath, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6819 ;;      Params:         0       6       0       0       0
  6820 ;;      Locals:         0       6       0       0       0
  6821 ;;      Temps:          0       4       0       0       0
  6822 ;;      Totals:         0      16       0       0       0
  6823 ;;Total ram usage:       16 bytes
  6824 ;; Hardware stack levels used:    1
  6825 ;; Hardware stack levels required when called:    1
  6826 ;; This function calls:
  6827 ;;		___ftpack
  6828 ;; This function is called by:
  6829 ;;		_ISR
  6830 ;;		_ftoa
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function ___ftmul
  6836  071B                     ___ftmul:	
  6837                           
  6838                           ;incstack = 0
  6839 ;; hardware stack exceeded
  6840                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6841  071B  1283               	bcf	3,5	;RP0=0, select bank0
  6842  071C  1303               	bcf	3,6	;RP1=0, select bank0
  6843  071D  0820               	movf	___ftmul@f1,w
  6844  071E  00A6               	movwf	??___ftmul
  6845  071F  0821               	movf	___ftmul@f1+1,w
  6846  0720  00A7               	movwf	??___ftmul+1
  6847  0721  0822               	movf	___ftmul@f1+2,w
  6848  0722  00A8               	movwf	??___ftmul+2
  6849  0723  1003               	clrc
  6850  0724  0D27               	rlf	??___ftmul+1,w
  6851  0725  0D28               	rlf	??___ftmul+2,w
  6852  0726  00A9               	movwf	??___ftmul+3
  6853  0727  0829               	movf	??___ftmul+3,w
  6854  0728  00AA               	movwf	___ftmul@exp
  6855  0729  08AA               	movf	___ftmul@exp,f
  6856  072A  1D03               	skipz
  6857  072B  2F33               	goto	i1l2423
  6858  072C  3000               	movlw	0
  6859  072D  00A0               	movwf	?___ftmul
  6860  072E  3000               	movlw	0
  6861  072F  00A1               	movwf	?___ftmul+1
  6862  0730  3000               	movlw	0
  6863  0731  00A2               	movwf	?___ftmul+2
  6864  0732  0008               	return
  6865  0733                     i1l2423:	
  6866  0733  0823               	movf	___ftmul@f2,w
  6867  0734  00A6               	movwf	??___ftmul
  6868  0735  0824               	movf	___ftmul@f2+1,w
  6869  0736  00A7               	movwf	??___ftmul+1
  6870  0737  0825               	movf	___ftmul@f2+2,w
  6871  0738  00A8               	movwf	??___ftmul+2
  6872  0739  1003               	clrc
  6873  073A  0D27               	rlf	??___ftmul+1,w
  6874  073B  0D28               	rlf	??___ftmul+2,w
  6875  073C  00A9               	movwf	??___ftmul+3
  6876  073D  0829               	movf	??___ftmul+3,w
  6877  073E  00AF               	movwf	___ftmul@sign
  6878  073F  08AF               	movf	___ftmul@sign,f
  6879  0740  1D03               	skipz
  6880  0741  2F49               	goto	i1l2429
  6881  0742  3000               	movlw	0
  6882  0743  00A0               	movwf	?___ftmul
  6883  0744  3000               	movlw	0
  6884  0745  00A1               	movwf	?___ftmul+1
  6885  0746  3000               	movlw	0
  6886  0747  00A2               	movwf	?___ftmul+2
  6887  0748  0008               	return
  6888  0749                     i1l2429:	
  6889  0749  082F               	movf	___ftmul@sign,w
  6890  074A  3E7B               	addlw	123
  6891  074B  00A6               	movwf	??___ftmul
  6892  074C  0826               	movf	??___ftmul,w
  6893  074D  07AA               	addwf	___ftmul@exp,f
  6894  074E  0820               	movf	___ftmul@f1,w
  6895  074F  00A6               	movwf	??___ftmul
  6896  0750  0821               	movf	___ftmul@f1+1,w
  6897  0751  00A7               	movwf	??___ftmul+1
  6898  0752  0822               	movf	___ftmul@f1+2,w
  6899  0753  00A8               	movwf	??___ftmul+2
  6900  0754  3010               	movlw	16
  6901  0755                     u297_25:	
  6902  0755  1003               	clrc
  6903  0756  0CA8               	rrf	??___ftmul+2,f
  6904  0757  0CA7               	rrf	??___ftmul+1,f
  6905  0758  0CA6               	rrf	??___ftmul,f
  6906  0759  3EFF               	addlw	-1
  6907  075A  1D03               	skipz
  6908  075B  2F55               	goto	u297_25
  6909  075C  0826               	movf	??___ftmul,w
  6910  075D  00A9               	movwf	??___ftmul+3
  6911  075E  0829               	movf	??___ftmul+3,w
  6912  075F  00AF               	movwf	___ftmul@sign
  6913  0760  0823               	movf	___ftmul@f2,w
  6914  0761  00A6               	movwf	??___ftmul
  6915  0762  0824               	movf	___ftmul@f2+1,w
  6916  0763  00A7               	movwf	??___ftmul+1
  6917  0764  0825               	movf	___ftmul@f2+2,w
  6918  0765  00A8               	movwf	??___ftmul+2
  6919  0766  3010               	movlw	16
  6920  0767                     u298_25:	
  6921  0767  1003               	clrc
  6922  0768  0CA8               	rrf	??___ftmul+2,f
  6923  0769  0CA7               	rrf	??___ftmul+1,f
  6924  076A  0CA6               	rrf	??___ftmul,f
  6925  076B  3EFF               	addlw	-1
  6926  076C  1D03               	skipz
  6927  076D  2F67               	goto	u298_25
  6928  076E  0826               	movf	??___ftmul,w
  6929  076F  00A9               	movwf	??___ftmul+3
  6930  0770  0829               	movf	??___ftmul+3,w
  6931  0771  06AF               	xorwf	___ftmul@sign,f
  6932  0772  3080               	movlw	128
  6933  0773  00A6               	movwf	??___ftmul
  6934  0774  0826               	movf	??___ftmul,w
  6935  0775  05AF               	andwf	___ftmul@sign,f
  6936  0776  17A1               	bsf	___ftmul@f1+1,7
  6937  0777  17A4               	bsf	___ftmul@f2+1,7
  6938  0778  30FF               	movlw	255
  6939  0779  05A3               	andwf	___ftmul@f2,f
  6940  077A  30FF               	movlw	255
  6941  077B  05A4               	andwf	___ftmul@f2+1,f
  6942  077C  3000               	movlw	0
  6943  077D  05A5               	andwf	___ftmul@f2+2,f
  6944  077E  3000               	movlw	0
  6945  077F  00AB               	movwf	___ftmul@f3_as_product
  6946  0780  3000               	movlw	0
  6947  0781  00AC               	movwf	___ftmul@f3_as_product+1
  6948  0782  3000               	movlw	0
  6949  0783  00AD               	movwf	___ftmul@f3_as_product+2
  6950  0784  3007               	movlw	7
  6951  0785  00A6               	movwf	??___ftmul
  6952  0786  0826               	movf	??___ftmul,w
  6953  0787  00AE               	movwf	___ftmul@cntr
  6954  0788                     i1l2441:	
  6955  0788  1C20               	btfss	___ftmul@f1,0
  6956  0789  2F98               	goto	i1l2445
  6957  078A  0823               	movf	___ftmul@f2,w
  6958  078B  07AB               	addwf	___ftmul@f3_as_product,f
  6959  078C  0824               	movf	___ftmul@f2+1,w
  6960  078D  1103               	clrz
  6961  078E  1803               	skipnc
  6962  078F  0A24               	incf	___ftmul@f2+1,w
  6963  0790  1D03               	btfss	3,2
  6964  0791  07AC               	addwf	___ftmul@f3_as_product+1,f
  6965  0792  0825               	movf	___ftmul@f2+2,w
  6966  0793  1103               	clrz
  6967  0794  1803               	skipnc
  6968  0795  0A25               	incf	___ftmul@f2+2,w
  6969  0796  1D03               	btfss	3,2
  6970  0797  07AD               	addwf	___ftmul@f3_as_product+2,f
  6971  0798                     i1l2445:	
  6972  0798  3001               	movlw	1
  6973  0799                     u301_25:	
  6974  0799  1003               	clrc
  6975  079A  0CA2               	rrf	___ftmul@f1+2,f
  6976  079B  0CA1               	rrf	___ftmul@f1+1,f
  6977  079C  0CA0               	rrf	___ftmul@f1,f
  6978  079D  3EFF               	addlw	-1
  6979  079E  1D03               	skipz
  6980  079F  2F99               	goto	u301_25
  6981  07A0  3001               	movlw	1
  6982  07A1                     u302_25:	
  6983  07A1  1003               	clrc
  6984  07A2  0DA3               	rlf	___ftmul@f2,f
  6985  07A3  0DA4               	rlf	___ftmul@f2+1,f
  6986  07A4  0DA5               	rlf	___ftmul@f2+2,f
  6987  07A5  3EFF               	addlw	-1
  6988  07A6  1D03               	skipz
  6989  07A7  2FA1               	goto	u302_25
  6990  07A8  3001               	movlw	1
  6991  07A9  02AE               	subwf	___ftmul@cntr,f
  6992  07AA  1D03               	btfss	3,2
  6993  07AB  2F88               	goto	i1l2441
  6994  07AC  3009               	movlw	9
  6995  07AD  00A6               	movwf	??___ftmul
  6996  07AE  0826               	movf	??___ftmul,w
  6997  07AF  00AE               	movwf	___ftmul@cntr
  6998  07B0                     i1l2453:	
  6999  07B0  1C20               	btfss	___ftmul@f1,0
  7000  07B1  2FC0               	goto	i1l2457
  7001  07B2  0823               	movf	___ftmul@f2,w
  7002  07B3  07AB               	addwf	___ftmul@f3_as_product,f
  7003  07B4  0824               	movf	___ftmul@f2+1,w
  7004  07B5  1103               	clrz
  7005  07B6  1803               	skipnc
  7006  07B7  0A24               	incf	___ftmul@f2+1,w
  7007  07B8  1D03               	btfss	3,2
  7008  07B9  07AC               	addwf	___ftmul@f3_as_product+1,f
  7009  07BA  0825               	movf	___ftmul@f2+2,w
  7010  07BB  1103               	clrz
  7011  07BC  1803               	skipnc
  7012  07BD  0A25               	incf	___ftmul@f2+2,w
  7013  07BE  1D03               	btfss	3,2
  7014  07BF  07AD               	addwf	___ftmul@f3_as_product+2,f
  7015  07C0                     i1l2457:	
  7016  07C0  3001               	movlw	1
  7017  07C1                     u306_25:	
  7018  07C1  1003               	clrc
  7019  07C2  0CA2               	rrf	___ftmul@f1+2,f
  7020  07C3  0CA1               	rrf	___ftmul@f1+1,f
  7021  07C4  0CA0               	rrf	___ftmul@f1,f
  7022  07C5  3EFF               	addlw	-1
  7023  07C6  1D03               	skipz
  7024  07C7  2FC1               	goto	u306_25
  7025  07C8  3001               	movlw	1
  7026  07C9                     u307_25:	
  7027  07C9  1003               	clrc
  7028  07CA  0CAD               	rrf	___ftmul@f3_as_product+2,f
  7029  07CB  0CAC               	rrf	___ftmul@f3_as_product+1,f
  7030  07CC  0CAB               	rrf	___ftmul@f3_as_product,f
  7031  07CD  3EFF               	addlw	-1
  7032  07CE  1D03               	skipz
  7033  07CF  2FC9               	goto	u307_25
  7034  07D0  3001               	movlw	1
  7035  07D1  02AE               	subwf	___ftmul@cntr,f
  7036  07D2  1D03               	btfss	3,2
  7037  07D3  2FB0               	goto	i1l2453
  7038  07D4  082B               	movf	___ftmul@f3_as_product,w
  7039  07D5  00F0               	movwf	___ftpack@arg
  7040  07D6  082C               	movf	___ftmul@f3_as_product+1,w
  7041  07D7  00F1               	movwf	___ftpack@arg+1
  7042  07D8  082D               	movf	___ftmul@f3_as_product+2,w
  7043  07D9  00F2               	movwf	___ftpack@arg+2
  7044  07DA  082A               	movf	___ftmul@exp,w
  7045  07DB  00A6               	movwf	??___ftmul
  7046  07DC  0826               	movf	??___ftmul,w
  7047  07DD  00F3               	movwf	___ftpack@exp
  7048  07DE  082F               	movf	___ftmul@sign,w
  7049  07DF  00A7               	movwf	??___ftmul+1
  7050  07E0  0827               	movf	??___ftmul+1,w
  7051  07E1  00F4               	movwf	___ftpack@sign
  7052  07E2  120A  158A  239E   	fcall	___ftpack
  7053  07E5  0870               	movf	?___ftpack,w
  7054  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  7055  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  7056  07E8  00A0               	movwf	?___ftmul
  7057  07E9  0871               	movf	?___ftpack+1,w
  7058  07EA  00A1               	movwf	?___ftmul+1
  7059  07EB  0872               	movf	?___ftpack+2,w
  7060  07EC  00A2               	movwf	?___ftmul+2
  7061  07ED  0008               	return
  7062  07EE                     __end_of___ftmul:	
  7063                           
  7064                           	psect	text34
  7065  0A7D                     __ptext34:	
  7066 ;; *************** function ___ftge *****************
  7067 ;; Defined at:
  7068 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftge.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;  ff1             3    0[COMMON] float 
  7071 ;;  ff2             3    3[COMMON] float 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;		None               void
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7083 ;;      Params:         6       0       0       0       0
  7084 ;;      Locals:         0       0       0       0       0
  7085 ;;      Temps:          6       0       0       0       0
  7086 ;;      Totals:        12       0       0       0       0
  7087 ;;Total ram usage:       12 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_ftoa
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function ___ftge
  7098  0A7D                     ___ftge:	
  7099                           
  7100                           ;incstack = 0
  7101 ;; hardware stack exceeded
  7102                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7103  0A7D  1FF2               	btfss	___ftge@ff1+2,7
  7104  0A7E  2AA4               	goto	i1l2401
  7105  0A7F  3000               	movlw	0
  7106  0A80  00F6               	movwf	??___ftge
  7107  0A81  3000               	movlw	0
  7108  0A82  00F7               	movwf	??___ftge+1
  7109  0A83  3080               	movlw	128
  7110  0A84  00F8               	movwf	??___ftge+2
  7111  0A85  0970               	comf	___ftge@ff1,w
  7112  0A86  00F9               	movwf	??___ftge+3
  7113  0A87  0971               	comf	___ftge@ff1+1,w
  7114  0A88  00FA               	movwf	??___ftge+4
  7115  0A89  0972               	comf	___ftge@ff1+2,w
  7116  0A8A  00FB               	movwf	??___ftge+5
  7117  0A8B  0AF9               	incf	??___ftge+3,f
  7118  0A8C  1903               	skipnz
  7119  0A8D  0AFA               	incf	??___ftge+4,f
  7120  0A8E  1903               	skipnz
  7121  0A8F  0AFB               	incf	??___ftge+5,f
  7122  0A90  0879               	movf	??___ftge+3,w
  7123  0A91  07F6               	addwf	??___ftge,f
  7124  0A92  087A               	movf	??___ftge+4,w
  7125  0A93  1803               	skipnc
  7126  0A94  0F7A               	incfsz	??___ftge+4,w
  7127  0A95  2A97               	goto	u291_21
  7128  0A96  2A98               	goto	u291_22
  7129  0A97                     u291_21:	
  7130  0A97  07F7               	addwf	??___ftge+1,f
  7131  0A98                     u291_22:	
  7132  0A98  087B               	movf	??___ftge+5,w
  7133  0A99  1803               	skipnc
  7134  0A9A  0F7B               	incfsz	??___ftge+5,w
  7135  0A9B  2A9D               	goto	u291_23
  7136  0A9C  2A9E               	goto	u291_24
  7137  0A9D                     u291_23:	
  7138  0A9D  07F8               	addwf	??___ftge+2,f
  7139  0A9E                     u291_24:	
  7140  0A9E  0876               	movf	??___ftge,w
  7141  0A9F  00F0               	movwf	___ftge@ff1
  7142  0AA0  0877               	movf	??___ftge+1,w
  7143  0AA1  00F1               	movwf	___ftge@ff1+1
  7144  0AA2  0878               	movf	??___ftge+2,w
  7145  0AA3  00F2               	movwf	___ftge@ff1+2
  7146  0AA4                     i1l2401:	
  7147  0AA4  1FF5               	btfss	___ftge@ff2+2,7
  7148  0AA5  2ACB               	goto	i1l2405
  7149  0AA6  3000               	movlw	0
  7150  0AA7  00F6               	movwf	??___ftge
  7151  0AA8  3000               	movlw	0
  7152  0AA9  00F7               	movwf	??___ftge+1
  7153  0AAA  3080               	movlw	128
  7154  0AAB  00F8               	movwf	??___ftge+2
  7155  0AAC  0973               	comf	___ftge@ff2,w
  7156  0AAD  00F9               	movwf	??___ftge+3
  7157  0AAE  0974               	comf	___ftge@ff2+1,w
  7158  0AAF  00FA               	movwf	??___ftge+4
  7159  0AB0  0975               	comf	___ftge@ff2+2,w
  7160  0AB1  00FB               	movwf	??___ftge+5
  7161  0AB2  0AF9               	incf	??___ftge+3,f
  7162  0AB3  1903               	skipnz
  7163  0AB4  0AFA               	incf	??___ftge+4,f
  7164  0AB5  1903               	skipnz
  7165  0AB6  0AFB               	incf	??___ftge+5,f
  7166  0AB7  0879               	movf	??___ftge+3,w
  7167  0AB8  07F6               	addwf	??___ftge,f
  7168  0AB9  087A               	movf	??___ftge+4,w
  7169  0ABA  1803               	skipnc
  7170  0ABB  0F7A               	incfsz	??___ftge+4,w
  7171  0ABC  2ABE               	goto	u293_21
  7172  0ABD  2ABF               	goto	u293_22
  7173  0ABE                     u293_21:	
  7174  0ABE  07F7               	addwf	??___ftge+1,f
  7175  0ABF                     u293_22:	
  7176  0ABF  087B               	movf	??___ftge+5,w
  7177  0AC0  1803               	skipnc
  7178  0AC1  0F7B               	incfsz	??___ftge+5,w
  7179  0AC2  2AC4               	goto	u293_23
  7180  0AC3  2AC5               	goto	u293_24
  7181  0AC4                     u293_23:	
  7182  0AC4  07F8               	addwf	??___ftge+2,f
  7183  0AC5                     u293_24:	
  7184  0AC5  0876               	movf	??___ftge,w
  7185  0AC6  00F3               	movwf	___ftge@ff2
  7186  0AC7  0877               	movf	??___ftge+1,w
  7187  0AC8  00F4               	movwf	___ftge@ff2+1
  7188  0AC9  0878               	movf	??___ftge+2,w
  7189  0ACA  00F5               	movwf	___ftge@ff2+2
  7190  0ACB                     i1l2405:	
  7191  0ACB  3080               	movlw	128
  7192  0ACC  06F2               	xorwf	___ftge@ff1+2,f
  7193  0ACD  3080               	movlw	128
  7194  0ACE  06F5               	xorwf	___ftge@ff2+2,f
  7195  0ACF  0875               	movf	___ftge@ff2+2,w
  7196  0AD0  0272               	subwf	___ftge@ff1+2,w
  7197  0AD1  1D03               	skipz
  7198  0AD2  0008               	return
  7199  0AD3  0874               	movf	___ftge@ff2+1,w
  7200  0AD4  0271               	subwf	___ftge@ff1+1,w
  7201  0AD5  1D03               	skipz
  7202  0AD6  0008               	return
  7203  0AD7  0873               	movf	___ftge@ff2,w
  7204  0AD8  0270               	subwf	___ftge@ff1,w
  7205  0AD9  0008               	return
  7206  0ADA                     __end_of___ftge:	
  7207                           
  7208                           	psect	text35
  7209  0E8E                     __ptext35:	
  7210 ;; *************** function ___ftdiv *****************
  7211 ;; Defined at:
  7212 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  f2              3   16[BANK0 ] float 
  7215 ;;  f1              3   19[BANK0 ] float 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  f3              3   27[BANK0 ] float 
  7218 ;;  sign            1   31[BANK0 ] unsigned char 
  7219 ;;  exp             1   30[BANK0 ] unsigned char 
  7220 ;;  cntr            1   26[BANK0 ] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  3   16[BANK0 ] float 
  7223 ;; Registers used:
  7224 ;;		wreg, status,2, status,0, pclath, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7230 ;;      Params:         0       6       0       0       0
  7231 ;;      Locals:         0       6       0       0       0
  7232 ;;      Temps:          0       4       0       0       0
  7233 ;;      Totals:         0      16       0       0       0
  7234 ;;Total ram usage:       16 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    1
  7237 ;; This function calls:
  7238 ;;		___ftpack
  7239 ;; This function is called by:
  7240 ;;		_ISR
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function ___ftdiv
  7246  0E8E                     ___ftdiv:	
  7247                           
  7248                           ;incstack = 0
  7249 ;; hardware stack exceeded
  7250                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7251  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  7252  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  7253  0E90  0833               	movf	___ftdiv@f1,w
  7254  0E91  00B6               	movwf	??___ftdiv
  7255  0E92  0834               	movf	___ftdiv@f1+1,w
  7256  0E93  00B7               	movwf	??___ftdiv+1
  7257  0E94  0835               	movf	___ftdiv@f1+2,w
  7258  0E95  00B8               	movwf	??___ftdiv+2
  7259  0E96  1003               	clrc
  7260  0E97  0D37               	rlf	??___ftdiv+1,w
  7261  0E98  0D38               	rlf	??___ftdiv+2,w
  7262  0E99  00B9               	movwf	??___ftdiv+3
  7263  0E9A  0839               	movf	??___ftdiv+3,w
  7264  0E9B  00BE               	movwf	___ftdiv@exp
  7265  0E9C  08BE               	movf	___ftdiv@exp,f
  7266  0E9D  1D03               	skipz
  7267  0E9E  2EA6               	goto	i1l2713
  7268  0E9F  3000               	movlw	0
  7269  0EA0  00B0               	movwf	?___ftdiv
  7270  0EA1  3000               	movlw	0
  7271  0EA2  00B1               	movwf	?___ftdiv+1
  7272  0EA3  3000               	movlw	0
  7273  0EA4  00B2               	movwf	?___ftdiv+2
  7274  0EA5  0008               	return
  7275  0EA6                     i1l2713:	
  7276  0EA6  0830               	movf	___ftdiv@f2,w
  7277  0EA7  00B6               	movwf	??___ftdiv
  7278  0EA8  0831               	movf	___ftdiv@f2+1,w
  7279  0EA9  00B7               	movwf	??___ftdiv+1
  7280  0EAA  0832               	movf	___ftdiv@f2+2,w
  7281  0EAB  00B8               	movwf	??___ftdiv+2
  7282  0EAC  1003               	clrc
  7283  0EAD  0D37               	rlf	??___ftdiv+1,w
  7284  0EAE  0D38               	rlf	??___ftdiv+2,w
  7285  0EAF  00B9               	movwf	??___ftdiv+3
  7286  0EB0  0839               	movf	??___ftdiv+3,w
  7287  0EB1  00BF               	movwf	___ftdiv@sign
  7288  0EB2  08BF               	movf	___ftdiv@sign,f
  7289  0EB3  1D03               	skipz
  7290  0EB4  2EBC               	goto	i1l2719
  7291  0EB5  3000               	movlw	0
  7292  0EB6  00B0               	movwf	?___ftdiv
  7293  0EB7  3000               	movlw	0
  7294  0EB8  00B1               	movwf	?___ftdiv+1
  7295  0EB9  3000               	movlw	0
  7296  0EBA  00B2               	movwf	?___ftdiv+2
  7297  0EBB  0008               	return
  7298  0EBC                     i1l2719:	
  7299  0EBC  3000               	movlw	0
  7300  0EBD  00BB               	movwf	___ftdiv@f3
  7301  0EBE  3000               	movlw	0
  7302  0EBF  00BC               	movwf	___ftdiv@f3+1
  7303  0EC0  3000               	movlw	0
  7304  0EC1  00BD               	movwf	___ftdiv@f3+2
  7305  0EC2  3089               	movlw	137
  7306  0EC3  073F               	addwf	___ftdiv@sign,w
  7307  0EC4  00B6               	movwf	??___ftdiv
  7308  0EC5  0836               	movf	??___ftdiv,w
  7309  0EC6  02BE               	subwf	___ftdiv@exp,f
  7310  0EC7  0833               	movf	___ftdiv@f1,w
  7311  0EC8  00B6               	movwf	??___ftdiv
  7312  0EC9  0834               	movf	___ftdiv@f1+1,w
  7313  0ECA  00B7               	movwf	??___ftdiv+1
  7314  0ECB  0835               	movf	___ftdiv@f1+2,w
  7315  0ECC  00B8               	movwf	??___ftdiv+2
  7316  0ECD  3010               	movlw	16
  7317  0ECE                     u333_25:	
  7318  0ECE  1003               	clrc
  7319  0ECF  0CB8               	rrf	??___ftdiv+2,f
  7320  0ED0  0CB7               	rrf	??___ftdiv+1,f
  7321  0ED1  0CB6               	rrf	??___ftdiv,f
  7322  0ED2  3EFF               	addlw	-1
  7323  0ED3  1D03               	skipz
  7324  0ED4  2ECE               	goto	u333_25
  7325  0ED5  0836               	movf	??___ftdiv,w
  7326  0ED6  00B9               	movwf	??___ftdiv+3
  7327  0ED7  0839               	movf	??___ftdiv+3,w
  7328  0ED8  00BF               	movwf	___ftdiv@sign
  7329  0ED9  0830               	movf	___ftdiv@f2,w
  7330  0EDA  00B6               	movwf	??___ftdiv
  7331  0EDB  0831               	movf	___ftdiv@f2+1,w
  7332  0EDC  00B7               	movwf	??___ftdiv+1
  7333  0EDD  0832               	movf	___ftdiv@f2+2,w
  7334  0EDE  00B8               	movwf	??___ftdiv+2
  7335  0EDF  3010               	movlw	16
  7336  0EE0                     u334_25:	
  7337  0EE0  1003               	clrc
  7338  0EE1  0CB8               	rrf	??___ftdiv+2,f
  7339  0EE2  0CB7               	rrf	??___ftdiv+1,f
  7340  0EE3  0CB6               	rrf	??___ftdiv,f
  7341  0EE4  3EFF               	addlw	-1
  7342  0EE5  1D03               	skipz
  7343  0EE6  2EE0               	goto	u334_25
  7344  0EE7  0836               	movf	??___ftdiv,w
  7345  0EE8  00B9               	movwf	??___ftdiv+3
  7346  0EE9  0839               	movf	??___ftdiv+3,w
  7347  0EEA  06BF               	xorwf	___ftdiv@sign,f
  7348  0EEB  3080               	movlw	128
  7349  0EEC  00B6               	movwf	??___ftdiv
  7350  0EED  0836               	movf	??___ftdiv,w
  7351  0EEE  05BF               	andwf	___ftdiv@sign,f
  7352  0EEF  17B4               	bsf	___ftdiv@f1+1,7
  7353  0EF0  30FF               	movlw	255
  7354  0EF1  05B3               	andwf	___ftdiv@f1,f
  7355  0EF2  30FF               	movlw	255
  7356  0EF3  05B4               	andwf	___ftdiv@f1+1,f
  7357  0EF4  3000               	movlw	0
  7358  0EF5  05B5               	andwf	___ftdiv@f1+2,f
  7359  0EF6  17B1               	bsf	___ftdiv@f2+1,7
  7360  0EF7  30FF               	movlw	255
  7361  0EF8  05B0               	andwf	___ftdiv@f2,f
  7362  0EF9  30FF               	movlw	255
  7363  0EFA  05B1               	andwf	___ftdiv@f2+1,f
  7364  0EFB  3000               	movlw	0
  7365  0EFC  05B2               	andwf	___ftdiv@f2+2,f
  7366  0EFD  3018               	movlw	24
  7367  0EFE  00B6               	movwf	??___ftdiv
  7368  0EFF  0836               	movf	??___ftdiv,w
  7369  0F00  00BA               	movwf	___ftdiv@cntr
  7370  0F01                     i1l2733:	
  7371  0F01  3001               	movlw	1
  7372  0F02                     u335_25:	
  7373  0F02  1003               	clrc
  7374  0F03  0DBB               	rlf	___ftdiv@f3,f
  7375  0F04  0DBC               	rlf	___ftdiv@f3+1,f
  7376  0F05  0DBD               	rlf	___ftdiv@f3+2,f
  7377  0F06  3EFF               	addlw	-1
  7378  0F07  1D03               	skipz
  7379  0F08  2F02               	goto	u335_25
  7380  0F09  0832               	movf	___ftdiv@f2+2,w
  7381  0F0A  0235               	subwf	___ftdiv@f1+2,w
  7382  0F0B  1D03               	skipz
  7383  0F0C  2F13               	goto	u336_25
  7384  0F0D  0831               	movf	___ftdiv@f2+1,w
  7385  0F0E  0234               	subwf	___ftdiv@f1+1,w
  7386  0F0F  1D03               	skipz
  7387  0F10  2F13               	goto	u336_25
  7388  0F11  0830               	movf	___ftdiv@f2,w
  7389  0F12  0233               	subwf	___ftdiv@f1,w
  7390  0F13                     u336_25:	
  7391  0F13  1C03               	skipc
  7392  0F14  2F20               	goto	i1l2741
  7393  0F15  0830               	movf	___ftdiv@f2,w
  7394  0F16  02B3               	subwf	___ftdiv@f1,f
  7395  0F17  0831               	movf	___ftdiv@f2+1,w
  7396  0F18  1C03               	skipc
  7397  0F19  0F31               	incfsz	___ftdiv@f2+1,w
  7398  0F1A  02B4               	subwf	___ftdiv@f1+1,f
  7399  0F1B  0832               	movf	___ftdiv@f2+2,w
  7400  0F1C  1C03               	skipc
  7401  0F1D  0A32               	incf	___ftdiv@f2+2,w
  7402  0F1E  02B5               	subwf	___ftdiv@f1+2,f
  7403  0F1F  143B               	bsf	___ftdiv@f3,0
  7404  0F20                     i1l2741:	
  7405  0F20  3001               	movlw	1
  7406  0F21                     u337_25:	
  7407  0F21  1003               	clrc
  7408  0F22  0DB3               	rlf	___ftdiv@f1,f
  7409  0F23  0DB4               	rlf	___ftdiv@f1+1,f
  7410  0F24  0DB5               	rlf	___ftdiv@f1+2,f
  7411  0F25  3EFF               	addlw	-1
  7412  0F26  1D03               	skipz
  7413  0F27  2F21               	goto	u337_25
  7414  0F28  3001               	movlw	1
  7415  0F29  02BA               	subwf	___ftdiv@cntr,f
  7416  0F2A  1D03               	btfss	3,2
  7417  0F2B  2F01               	goto	i1l2733
  7418  0F2C  083B               	movf	___ftdiv@f3,w
  7419  0F2D  00F0               	movwf	___ftpack@arg
  7420  0F2E  083C               	movf	___ftdiv@f3+1,w
  7421  0F2F  00F1               	movwf	___ftpack@arg+1
  7422  0F30  083D               	movf	___ftdiv@f3+2,w
  7423  0F31  00F2               	movwf	___ftpack@arg+2
  7424  0F32  083E               	movf	___ftdiv@exp,w
  7425  0F33  00B6               	movwf	??___ftdiv
  7426  0F34  0836               	movf	??___ftdiv,w
  7427  0F35  00F3               	movwf	___ftpack@exp
  7428  0F36  083F               	movf	___ftdiv@sign,w
  7429  0F37  00B7               	movwf	??___ftdiv+1
  7430  0F38  0837               	movf	??___ftdiv+1,w
  7431  0F39  00F4               	movwf	___ftpack@sign
  7432  0F3A  120A  158A  239E   	fcall	___ftpack
  7433  0F3D  0870               	movf	?___ftpack,w
  7434  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  7435  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  7436  0F40  00B0               	movwf	?___ftdiv
  7437  0F41  0871               	movf	?___ftpack+1,w
  7438  0F42  00B1               	movwf	?___ftdiv+1
  7439  0F43  0872               	movf	?___ftpack+2,w
  7440  0F44  00B2               	movwf	?___ftdiv+2
  7441  0F45  0008               	return
  7442  0F46                     __end_of___ftdiv:	
  7443                           
  7444                           	psect	text36
  7445  1654                     __ptext36:	
  7446 ;; *************** function ___awtoft *****************
  7447 ;; Defined at:
  7448 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  c               2    8[COMMON] int 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  sign            1   13[COMMON] unsigned char 
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  3    8[COMMON] float 
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7462 ;;      Params:         3       0       0       0       0
  7463 ;;      Locals:         1       0       0       0       0
  7464 ;;      Temps:          2       0       0       0       0
  7465 ;;      Totals:         6       0       0       0       0
  7466 ;;Total ram usage:        6 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; Hardware stack levels required when called:    1
  7469 ;; This function calls:
  7470 ;;		___ftpack
  7471 ;; This function is called by:
  7472 ;;		_ISR
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function ___awtoft
  7478  1654                     ___awtoft:	
  7479                           
  7480                           ;incstack = 0
  7481 ;; hardware stack exceeded
  7482                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7483  1654  01FD               	clrf	___awtoft@sign
  7484  1655  1FF9               	btfss	___awtoft@c+1,7
  7485  1656  2E5E               	goto	i1l2703
  7486  1657  09F8               	comf	___awtoft@c,f
  7487  1658  09F9               	comf	___awtoft@c+1,f
  7488  1659  0AF8               	incf	___awtoft@c,f
  7489  165A  1903               	skipnz
  7490  165B  0AF9               	incf	___awtoft@c+1,f
  7491  165C  01FD               	clrf	___awtoft@sign
  7492  165D  0AFD               	incf	___awtoft@sign,f
  7493  165E                     i1l2703:	
  7494  165E  0878               	movf	___awtoft@c,w
  7495  165F  00F0               	movwf	___ftpack@arg
  7496  1660  0879               	movf	___awtoft@c+1,w
  7497  1661  00F1               	movwf	___ftpack@arg+1
  7498  1662  01F2               	clrf	___ftpack@arg+2
  7499  1663  308E               	movlw	142
  7500  1664  00FB               	movwf	??___awtoft
  7501  1665  087B               	movf	??___awtoft,w
  7502  1666  00F3               	movwf	___ftpack@exp
  7503  1667  087D               	movf	___awtoft@sign,w
  7504  1668  00FC               	movwf	??___awtoft+1
  7505  1669  087C               	movf	??___awtoft+1,w
  7506  166A  00F4               	movwf	___ftpack@sign
  7507  166B  120A  158A  239E   	fcall	___ftpack
  7508  166E  0870               	movf	?___ftpack,w
  7509  166F  00F8               	movwf	?___awtoft
  7510  1670  0871               	movf	?___ftpack+1,w
  7511  1671  00F9               	movwf	?___awtoft+1
  7512  1672  0872               	movf	?___ftpack+2,w
  7513  1673  00FA               	movwf	?___awtoft+2
  7514  1674  0008               	return
  7515  1675                     __end_of___awtoft:	
  7516                           
  7517                           	psect	text37
  7518  0B9E                     __ptext37:	
  7519 ;; *************** function ___ftpack *****************
  7520 ;; Defined at:
  7521 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  arg             3    0[COMMON] unsigned um
  7524 ;;  exp             1    3[COMMON] unsigned char 
  7525 ;;  sign            1    4[COMMON] unsigned char 
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  3    0[COMMON] float 
  7530 ;; Registers used:
  7531 ;;		wreg, status,2, status,0
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7537 ;;      Params:         5       0       0       0       0
  7538 ;;      Locals:         0       0       0       0       0
  7539 ;;      Temps:          3       0       0       0       0
  7540 ;;      Totals:         8       0       0       0       0
  7541 ;;Total ram usage:        8 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; This function calls:
  7544 ;;		Nothing
  7545 ;; This function is called by:
  7546 ;;		___awtoft
  7547 ;;		___ftadd
  7548 ;;		___ftdiv
  7549 ;;		___ftmul
  7550 ;;		___lltoft
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           
  7555                           ;psect for function ___ftpack
  7556  0B9E                     ___ftpack:	
  7557                           
  7558                           ;incstack = 0
  7559 ;; hardware stack exceeded
  7560                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7561  0B9E  0873               	movf	___ftpack@exp,w
  7562  0B9F  1903               	btfsc	3,2
  7563  0BA0  2BA6               	goto	i1l1933
  7564  0BA1  0872               	movf	___ftpack@arg+2,w
  7565  0BA2  0471               	iorwf	___ftpack@arg+1,w
  7566  0BA3  0470               	iorwf	___ftpack@arg,w
  7567  0BA4  1D03               	skipz
  7568  0BA5  2BB9               	goto	i1l1939
  7569  0BA6                     i1l1933:	
  7570  0BA6  3000               	movlw	0
  7571  0BA7  00F0               	movwf	?___ftpack
  7572  0BA8  3000               	movlw	0
  7573  0BA9  00F1               	movwf	?___ftpack+1
  7574  0BAA  3000               	movlw	0
  7575  0BAB  00F2               	movwf	?___ftpack+2
  7576  0BAC  0008               	return
  7577  0BAD                     i1l1937:	
  7578  0BAD  3001               	movlw	1
  7579  0BAE  00F5               	movwf	??___ftpack
  7580  0BAF  0875               	movf	??___ftpack,w
  7581  0BB0  07F3               	addwf	___ftpack@exp,f
  7582  0BB1  3001               	movlw	1
  7583  0BB2                     u193_25:	
  7584  0BB2  1003               	clrc
  7585  0BB3  0CF2               	rrf	___ftpack@arg+2,f
  7586  0BB4  0CF1               	rrf	___ftpack@arg+1,f
  7587  0BB5  0CF0               	rrf	___ftpack@arg,f
  7588  0BB6  3EFF               	addlw	-1
  7589  0BB7  1D03               	skipz
  7590  0BB8  2BB2               	goto	u193_25
  7591  0BB9                     i1l1939:	
  7592  0BB9  30FE               	movlw	254
  7593  0BBA  0572               	andwf	___ftpack@arg+2,w
  7594  0BBB  1903               	btfsc	3,2
  7595  0BBC  2BD4               	goto	i1l536
  7596  0BBD  2BAD               	goto	i1l1937
  7597  0BBE                     i1l1941:	
  7598  0BBE  3001               	movlw	1
  7599  0BBF  00F5               	movwf	??___ftpack
  7600  0BC0  0875               	movf	??___ftpack,w
  7601  0BC1  07F3               	addwf	___ftpack@exp,f
  7602  0BC2  3001               	movlw	1
  7603  0BC3  07F0               	addwf	___ftpack@arg,f
  7604  0BC4  3000               	movlw	0
  7605  0BC5  1803               	skipnc
  7606  0BC6  3001               	movlw	1
  7607  0BC7  07F1               	addwf	___ftpack@arg+1,f
  7608  0BC8  3000               	movlw	0
  7609  0BC9  1803               	skipnc
  7610  0BCA  3001               	movlw	1
  7611  0BCB  07F2               	addwf	___ftpack@arg+2,f
  7612  0BCC  3001               	movlw	1
  7613  0BCD                     u195_25:	
  7614  0BCD  1003               	clrc
  7615  0BCE  0CF2               	rrf	___ftpack@arg+2,f
  7616  0BCF  0CF1               	rrf	___ftpack@arg+1,f
  7617  0BD0  0CF0               	rrf	___ftpack@arg,f
  7618  0BD1  3EFF               	addlw	-1
  7619  0BD2  1D03               	skipz
  7620  0BD3  2BCD               	goto	u195_25
  7621  0BD4                     i1l536:	
  7622  0BD4  30FF               	movlw	255
  7623  0BD5  0572               	andwf	___ftpack@arg+2,w
  7624  0BD6  1903               	btfsc	3,2
  7625  0BD7  2BE3               	goto	i1l1949
  7626  0BD8  2BBE               	goto	i1l1941
  7627  0BD9                     i1l1947:	
  7628  0BD9  3001               	movlw	1
  7629  0BDA  02F3               	subwf	___ftpack@exp,f
  7630  0BDB  3001               	movlw	1
  7631  0BDC                     u197_25:	
  7632  0BDC  1003               	clrc
  7633  0BDD  0DF0               	rlf	___ftpack@arg,f
  7634  0BDE  0DF1               	rlf	___ftpack@arg+1,f
  7635  0BDF  0DF2               	rlf	___ftpack@arg+2,f
  7636  0BE0  3EFF               	addlw	-1
  7637  0BE1  1D03               	skipz
  7638  0BE2  2BDC               	goto	u197_25
  7639  0BE3                     i1l1949:	
  7640  0BE3  1FF1               	btfss	___ftpack@arg+1,7
  7641  0BE4  2BD9               	goto	i1l1947
  7642  0BE5  1873               	btfsc	___ftpack@exp,0
  7643  0BE6  2BED               	goto	i1l542
  7644  0BE7  30FF               	movlw	255
  7645  0BE8  05F0               	andwf	___ftpack@arg,f
  7646  0BE9  307F               	movlw	127
  7647  0BEA  05F1               	andwf	___ftpack@arg+1,f
  7648  0BEB  30FF               	movlw	255
  7649  0BEC  05F2               	andwf	___ftpack@arg+2,f
  7650  0BED                     i1l542:	
  7651  0BED  1003               	clrc
  7652  0BEE  0CF3               	rrf	___ftpack@exp,f
  7653  0BEF  0873               	movf	___ftpack@exp,w
  7654  0BF0  00F5               	movwf	??___ftpack
  7655  0BF1  01F6               	clrf	??___ftpack+1
  7656  0BF2  01F7               	clrf	??___ftpack+2
  7657  0BF3  3010               	movlw	16
  7658  0BF4                     u200_25:	
  7659  0BF4  1003               	clrc
  7660  0BF5  0DF5               	rlf	??___ftpack,f
  7661  0BF6  0DF6               	rlf	??___ftpack+1,f
  7662  0BF7  0DF7               	rlf	??___ftpack+2,f
  7663  0BF8  3EFF               	addlw	-1
  7664  0BF9  1D03               	skipz
  7665  0BFA  2BF4               	goto	u200_25
  7666  0BFB  0875               	movf	??___ftpack,w
  7667  0BFC  04F0               	iorwf	___ftpack@arg,f
  7668  0BFD  0876               	movf	??___ftpack+1,w
  7669  0BFE  04F1               	iorwf	___ftpack@arg+1,f
  7670  0BFF  0877               	movf	??___ftpack+2,w
  7671  0C00  04F2               	iorwf	___ftpack@arg+2,f
  7672  0C01  0874               	movf	___ftpack@sign,w
  7673  0C02  1903               	btfsc	3,2
  7674  0C03  0008               	return
  7675  0C04  17F2               	bsf	___ftpack@arg+2,7
  7676  0C05  0008               	return
  7677  0C06                     __end_of___ftpack:	
  7678                           
  7679                           	psect	text38
  7680  1601                     __ptext38:	
  7681 ;; *************** function _USARTReceiveChar *****************
  7682 ;; Defined at:
  7683 ;;		line 119 in file "main.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;		None
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  USARTData       1    4[COMMON] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      unsigned char 
  7690 ;; Registers used:
  7691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7697 ;;      Params:         0       0       0       0       0
  7698 ;;      Locals:         1       0       0       0       0
  7699 ;;      Temps:          1       0       0       0       0
  7700 ;;      Totals:         2       0       0       0       0
  7701 ;;Total ram usage:        2 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    2
  7704 ;; This function calls:
  7705 ;;		i1_USARTWriteString
  7706 ;; This function is called by:
  7707 ;;		_ISR
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           
  7712                           ;psect for function _USARTReceiveChar
  7713  1601                     _USARTReceiveChar:	
  7714                           
  7715                           ;main.c: 120: unsigned char USARTData;
  7716                           ;main.c: 122: if (!OERR)
  7717                           
  7718                           ;incstack = 0
  7719 ;; hardware stack exceeded
  7720                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7721  1601  1283               	bcf	3,5	;RP0=0, select bank0
  7722  1602  1303               	bcf	3,6	;RP1=0, select bank0
  7723  1603  1898               	btfsc	24,1	;volatile
  7724  1604  2E0A               	goto	i1l2587
  7725                           
  7726                           ;main.c: 123: {
  7727                           ;main.c: 124: USARTData = RCREG;
  7728  1605  081A               	movf	26,w	;volatile
  7729  1606  00F3               	movwf	??_USARTReceiveChar
  7730  1607  0873               	movf	??_USARTReceiveChar,w
  7731  1608  00F4               	movwf	USARTReceiveChar@USARTData
  7732  1609  2E19               	goto	i1l2595
  7733  160A                     i1l2587:	
  7734                           ;main.c: 126: } else {
  7735                           
  7736                           ;main.c: 125: PIR1bits.RCIF = 0;
  7737                           
  7738                           
  7739                           ;main.c: 127: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7740  160A  3033               	movlw	low (STR_1-__stringbase)
  7741  160B  00F1               	movwf	i1USARTWriteString@str
  7742  160C  3080               	movlw	128
  7743  160D  00F2               	movwf	i1USARTWriteString@str+1
  7744  160E  160A  118A  26BB   	fcall	i1_USARTWriteString
  7745                           
  7746                           ;main.c: 129: RCSTAbits.CREN = 0;
  7747  1611  1283               	bcf	3,5	;RP0=0, select bank0
  7748  1612  1303               	bcf	3,6	;RP1=0, select bank0
  7749  1613  1218               	bcf	24,4	;volatile
  7750                           
  7751                           ;main.c: 130: USARTData = RCREG;
  7752  1614  081A               	movf	26,w	;volatile
  7753  1615  00F3               	movwf	??_USARTReceiveChar
  7754  1616  0873               	movf	??_USARTReceiveChar,w
  7755  1617  00F4               	movwf	USARTReceiveChar@USARTData
  7756                           
  7757                           ;main.c: 131: RCSTAbits.CREN = 1;
  7758  1618  1618               	bsf	24,4	;volatile
  7759  1619                     i1l2595:	
  7760                           
  7761                           ;main.c: 132: PIR1bits.RCIF = 0;
  7762  1619  128C               	bcf	12,5	;volatile
  7763                           
  7764                           ;main.c: 133: }
  7765                           ;main.c: 135: return (USARTData);
  7766  161A  0874               	movf	USARTReceiveChar@USARTData,w
  7767  161B  0008               	return
  7768  161C                     __end_of_USARTReceiveChar:	
  7769                           
  7770                           	psect	text39
  7771  16BB                     __ptext39:	
  7772 ;; *************** function i1_USARTWriteString *****************
  7773 ;; Defined at:
  7774 ;;		line 86 in file "main.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  str             2    1[COMMON] PTR const unsigned char 
  7777 ;;		 -> ftoa@buf(17), ROM(8192), STR_7(3), STR_3(3), 
  7778 ;;		 -> STR_1(40), 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;		None               void
  7783 ;; Registers used:
  7784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7790 ;;      Params:         2       0       0       0       0
  7791 ;;      Locals:         0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0
  7793 ;;      Totals:         2       0       0       0       0
  7794 ;;Total ram usage:        2 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    1
  7797 ;; This function calls:
  7798 ;;		i1_USARTWriteChar
  7799 ;; This function is called by:
  7800 ;;		_USARTReceiveChar
  7801 ;;		_ISR
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           
  7806                           ;psect for function i1_USARTWriteString
  7807  16BB                     i1_USARTWriteString:	
  7808  16BB                     i1l2541:	
  7809                           ;main.c: 88: while (*str != '\0') {
  7810                           
  7811                           ;incstack = 0
  7812 ;; hardware stack exceeded
  7813                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7814                           
  7815  16BB  0872               	movf	i1USARTWriteString@str+1,w
  7816  16BC  1283               	bcf	3,5	;RP0=0, select bank0
  7817  16BD  1303               	bcf	3,6	;RP1=0, select bank0
  7818  16BE  00FF               	movwf	127
  7819  16BF  0871               	movf	i1USARTWriteString@str,w
  7820  16C0  0084               	movwf	4
  7821  16C1  120A  158A  2000  160A  118A  	fcall	stringtab
  7822  16C6  3800               	iorlw	0
  7823  16C7  1903               	btfsc	3,2
  7824  16C8  0008               	return
  7825                           
  7826                           ;main.c: 90: USARTWriteChar(*str);
  7827  16C9  0872               	movf	i1USARTWriteString@str+1,w
  7828  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  7829  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  7830  16CC  00FF               	movwf	127
  7831  16CD  0871               	movf	i1USARTWriteString@str,w
  7832  16CE  0084               	movwf	4
  7833  16CF  120A  158A  2000  160A  118A  	fcall	stringtab
  7834  16D4  160A  118A  2585  160A  118A  	fcall	i1_USARTWriteChar
  7835                           
  7836                           ;main.c: 91: str++;
  7837  16D9  3001               	movlw	1
  7838  16DA  07F1               	addwf	i1USARTWriteString@str,f
  7839  16DB  1803               	skipnc
  7840  16DC  0AF2               	incf	i1USARTWriteString@str+1,f
  7841  16DD  3000               	movlw	0
  7842  16DE  07F2               	addwf	i1USARTWriteString@str+1,f
  7843  16DF  2EBB               	goto	i1l2541
  7844  16E0                     __end_ofi1_USARTWriteString:	
  7845                           
  7846                           	psect	text40
  7847  1585                     __ptext40:	
  7848 ;; *************** function i1_USARTWriteChar *****************
  7849 ;; Defined at:
  7850 ;;		line 79 in file "main.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;  USARTData       1    wreg     unsigned char 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  USARTData       1    0[COMMON] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;		None               void
  7857 ;; Registers used:
  7858 ;;		wreg
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7864 ;;      Params:         0       0       0       0       0
  7865 ;;      Locals:         1       0       0       0       0
  7866 ;;      Temps:          0       0       0       0       0
  7867 ;;      Totals:         1       0       0       0       0
  7868 ;;Total ram usage:        1 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; This function calls:
  7871 ;;		Nothing
  7872 ;; This function is called by:
  7873 ;;		_ISR
  7874 ;;		i1_USARTWriteString
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           
  7879                           ;psect for function i1_USARTWriteChar
  7880  1585                     i1_USARTWriteChar:	
  7881                           
  7882                           ;incstack = 0
  7883 ;; hardware stack exceeded
  7884                           ; Regs used in i1_USARTWriteChar: [wreg]
  7885                           ;i1USARTWriteChar@USARTData stored from wreg
  7886  1585  00F0               	movwf	i1USARTWriteChar@USARTData
  7887  1586                     i1l92:	
  7888                           ;main.c: 80: while (!PIR1bits.TXIF);
  7889                           
  7890  1586  1283               	bcf	3,5	;RP0=0, select bank0
  7891  1587  1303               	bcf	3,6	;RP1=0, select bank0
  7892  1588  1E0C               	btfss	12,4	;volatile
  7893  1589  2D86               	goto	i1l92
  7894                           
  7895                           ;main.c: 81: TXREG = USARTData;
  7896  158A  0870               	movf	i1USARTWriteChar@USARTData,w
  7897  158B  0099               	movwf	25	;volatile
  7898  158C  0008               	return
  7899  158D                     __end_ofi1_USARTWriteChar:	
  7900                           
  7901                           	psect	text41
  7902  0949                     __ptext41:	
  7903 ;; *************** function _FormatarValor *****************
  7904 ;; Defined at:
  7905 ;;		line 95 in file "main.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  str             1    wreg     PTR const unsigned char 
  7908 ;;		 -> ftoa@buf(17), 
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;  str             1   45[BANK0 ] PTR const unsigned char 
  7911 ;;		 -> ftoa@buf(17), 
  7912 ;;  aux            40    0[BANK0 ] unsigned char [40]
  7913 ;;  i               2   43[BANK0 ] int 
  7914 ;;  posicao         2   41[BANK0 ] int 
  7915 ;;  retorno         1   40[BANK0 ] PTR unsigned char 
  7916 ;;		 -> FormatarValor@aux(40), 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      PTR unsigned char 
  7919 ;; Registers used:
  7920 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7926 ;;      Params:         0       0       0       0       0
  7927 ;;      Locals:         0      46       0       0       0
  7928 ;;      Temps:          1       0       0       0       0
  7929 ;;      Totals:         1      46       0       0       0
  7930 ;;Total ram usage:       47 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		_ISR
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           
  7940                           ;psect for function _FormatarValor
  7941  0949                     _FormatarValor:	
  7942                           
  7943                           ;incstack = 0
  7944                           ; Regs used in _FormatarValor: [wreg-fsr0h+status,2+status,0]
  7945                           ;FormatarValor@str stored from wreg
  7946  0949  1283               	bcf	3,5	;RP0=0, select bank0
  7947  094A  1303               	bcf	3,6	;RP1=0, select bank0
  7948  094B  00CD               	movwf	FormatarValor@str
  7949                           
  7950                           ;main.c: 97: char *retorno;
  7951                           ;main.c: 98: int posicao = 0;
  7952  094C  01C9               	clrf	FormatarValor@posicao
  7953  094D  01CA               	clrf	FormatarValor@posicao+1
  7954                           
  7955                           ;main.c: 99: char aux [40];
  7956                           ;main.c: 100: int i = 0;
  7957  094E  01CB               	clrf	FormatarValor@i
  7958  094F  01CC               	clrf	FormatarValor@i+1
  7959  0950                     i1l2565:	
  7960                           ;main.c: 101: while (*str != '.') {
  7961                           
  7962  0950  084D               	movf	FormatarValor@str,w
  7963  0951  0084               	movwf	4
  7964  0952  1383               	bcf	3,7	;select IRP bank0
  7965  0953  0800               	movf	0,w
  7966  0954  3A2E               	xorlw	46
  7967  0955  1903               	btfsc	3,2
  7968  0956  2962               	goto	i1l2567
  7969                           
  7970                           ;main.c: 103: posicao++;
  7971  0957  3001               	movlw	1
  7972  0958  07C9               	addwf	FormatarValor@posicao,f
  7973  0959  1803               	skipnc
  7974  095A  0ACA               	incf	FormatarValor@posicao+1,f
  7975  095B  3000               	movlw	0
  7976  095C  07CA               	addwf	FormatarValor@posicao+1,f
  7977                           
  7978                           ;main.c: 104: str++;
  7979  095D  3001               	movlw	1
  7980  095E  00F0               	movwf	??_FormatarValor
  7981  095F  0870               	movf	??_FormatarValor,w
  7982  0960  07CD               	addwf	FormatarValor@str,f
  7983  0961  2950               	goto	i1l2565
  7984  0962                     i1l2567:	
  7985                           
  7986                           ;main.c: 105: }
  7987                           ;main.c: 107: str -= posicao;
  7988  0962  0849               	movf	FormatarValor@posicao,w
  7989  0963  02CD               	subwf	FormatarValor@str,f
  7990  0964                     i1l2575:	
  7991                           ;main.c: 109: for (; i < posicao; i++) {
  7992                           
  7993  0964  084C               	movf	FormatarValor@i+1,w
  7994  0965  3A80               	xorlw	128
  7995  0966  00F0               	movwf	??_FormatarValor
  7996  0967  084A               	movf	FormatarValor@posicao+1,w
  7997  0968  3A80               	xorlw	128
  7998  0969  0270               	subwf	??_FormatarValor,w
  7999  096A  1D03               	skipz
  8000  096B  296E               	goto	u324_25
  8001  096C  0849               	movf	FormatarValor@posicao,w
  8002  096D  024B               	subwf	FormatarValor@i,w
  8003  096E                     u324_25:	
  8004  096E  1803               	btfsc	3,0
  8005  096F  2987               	goto	i1l2577
  8006                           
  8007                           ;main.c: 110: aux[i] = *str;
  8008  0970  1283               	bcf	3,5	;RP0=0, select bank0
  8009  0971  1303               	bcf	3,6	;RP1=0, select bank0
  8010  0972  084D               	movf	FormatarValor@str,w
  8011  0973  0084               	movwf	4
  8012  0974  1383               	bcf	3,7	;select IRP bank0
  8013  0975  0800               	movf	0,w
  8014  0976  00F0               	movwf	??_FormatarValor
  8015  0977  084B               	movf	FormatarValor@i,w
  8016  0978  3E20               	addlw	FormatarValor@aux& (0+255)
  8017  0979  0084               	movwf	4
  8018  097A  0870               	movf	??_FormatarValor,w
  8019  097B  0080               	movwf	0
  8020                           
  8021                           ;main.c: 111: str++;
  8022  097C  3001               	movlw	1
  8023  097D  00F0               	movwf	??_FormatarValor
  8024  097E  0870               	movf	??_FormatarValor,w
  8025  097F  07CD               	addwf	FormatarValor@str,f
  8026  0980  3001               	movlw	1
  8027  0981  07CB               	addwf	FormatarValor@i,f
  8028  0982  1803               	skipnc
  8029  0983  0ACC               	incf	FormatarValor@i+1,f
  8030  0984  3000               	movlw	0
  8031  0985  07CC               	addwf	FormatarValor@i+1,f
  8032  0986  2964               	goto	i1l2575
  8033  0987                     i1l2577:	
  8034                           
  8035                           ;main.c: 112: }
  8036                           ;main.c: 113: retorno = &aux;
  8037  0987  3020               	movlw	FormatarValor@aux& (0+255)
  8038  0988  00F0               	movwf	??_FormatarValor
  8039  0989  0870               	movf	??_FormatarValor,w
  8040  098A  1283               	bcf	3,5	;RP0=0, select bank0
  8041  098B  1303               	bcf	3,6	;RP1=0, select bank0
  8042  098C  00C8               	movwf	FormatarValor@retorno
  8043                           
  8044                           ;main.c: 114: return retorno;
  8045  098D  0848               	movf	FormatarValor@retorno,w
  8046  098E  0008               	return
  8047  098F                     __end_of_FormatarValor:	
  8048  007E                     btemp	set	126	;btemp
  8049  007E                     wtemp	set	126
  8050  007E                     wtemp0	set	126
  8051  0080                     wtemp1	set	128
  8052  0082                     wtemp2	set	130
  8053  0084                     wtemp3	set	132
  8054  0086                     wtemp4	set	134
  8055  0088                     wtemp5	set	136
  8056  007F                     wtemp6	set	127
  8057  007E                     ttemp	set	126
  8058  007E                     ttemp0	set	126
  8059  0081                     ttemp1	set	129
  8060  0084                     ttemp2	set	132
  8061  0087                     ttemp3	set	135
  8062  007F                     ttemp4	set	127
  8063  007E                     ltemp	set	126
  8064  007E                     ltemp0	set	126
  8065  0082                     ltemp1	set	130
  8066  0086                     ltemp2	set	134
  8067  0080                     ltemp3	set	128


Data Sizes:
    Strings     87
    Constant    50
    Data        20
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      77
    BANK1            80     37      60
    BANK3            96     30      46
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK1[2]), ISR@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_11(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S689$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_10(CODE[16]), STR_9(CODE[2]), STR_8(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[4]), STR_2(CODE[4]), ISR@aux(BANK1[16]), 
		 -> FormatarValor@aux(BANK0[40]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@result	PTR unsigned char  size(1) Largest target is 16
		 -> ISR@aux(BANK1[16]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sp__FormatarValor	PTR unsigned char  size(1) Largest target is 40
		 -> FormatarValor@aux(BANK0[40]), 

    FormatarValor@retorno	PTR unsigned char  size(1) Largest target is 40
		 -> FormatarValor@aux(BANK0[40]), 

    FormatarValor@str	PTR const unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> ftoa@buf(BANK1[17]), ROM(CODE[8192]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _USARTReceiveChar->i1_USARTWriteString
    i1_USARTWriteString->i1_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    i1_lcd_escreve_string->_FormatarValor
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_USARTInit
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTInit->___aldiv
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble
    _ativar->_ADCRead
    _ativar->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6540
                             _ativar
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    5864
                                             27 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                          _USARTInit
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    2805
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    2285
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1    1390
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0    1124
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                           12     6      6    1102
                                             15 BANK3     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                              0 BANK3     15     7      8
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     833
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     833
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0     124
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ativar                                               3     3      0     676
                                              3 BANK3      3     3      0
                            _ADCRead
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _USARTWriteString                                     2     0      2     460
                                              1 BANK3      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      31
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2     216
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 45    45      0   23602
                                             50 BANK0      8     8      0
                                              0 BANK1     37    37      0
                      _FormatarValor
                   _USARTReceiveChar
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
                   i1_USARTWriteChar
                 i1_USARTWriteString
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2    1168
                                             12 COMMON     2     0      2
                      _FormatarValor (ARG)
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     889
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     587
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   12054
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3181
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2623
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2306
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     221
                                              3 COMMON     2     2      0
                 i1_USARTWriteString
 ---------------------------------------------------------------------------------
 (8) i1_USARTWriteString                                   2     0      2     197
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) i1_USARTWriteChar                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _FormatarValor                                       47    47      0     272
                                              0 COMMON     1     1      0
                                              0 BANK0     46    46      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ativar
     _ADCRead
     _USARTWriteString
       _USARTWriteChar
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTInit
       ___aldiv
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _FormatarValor
   _USARTReceiveChar
     i1_USARTWriteString
       i1_USARTWriteChar
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   i1_USARTWriteChar
   i1_USARTWriteString
     i1_USARTWriteChar
   i1_lcd_escreve_string
     _FormatarValor (ARG)
     i1_lcd_putc (ARG)
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1E      2E       9       47.9%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     25      3C       7       75.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C5      12        0.0%
ABS                  0      0      C5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Nov 08 14:32:31 2014

                            pc 0002                    __CFG_CP$OFF 0000                             l92 15B9  
                           fsr 0004            ___wmul@multiplicand 0072                   ___ftadd@exp1 0026  
                 ___ftadd@exp2 0025                   ___ftadd@sign 0024                            l121 1760  
                          l155 15A2                            l190 08B2                            l430 0E11  
                          l189 08AF              i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000  
                          _ISR 0052                            fsr0 0004                __end_of_ADCInit 15E7  
              __end_of_ADCRead 1763                            indf 0000                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 08CE                    lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                         ISR@i 00B8                   ___ftdiv@sign 003F                           l3011 1645  
                         l3021 0993                           l3009 1644                           l3025 09A7  
                         l3033 09C8                           l3027 09B2                           l3053 0E32  
                         l3045 0E22                           l3029 09BD                           l3127 1794  
                         l3071 0E85                           l3063 0E6A                           l3055 0E42  
                         l3143 1763                           l3251 0C3A                           l3067 0E77  
                         l3083 0C90                           l3163 0B79                           l3155 0B5E  
                         l3247 0C25                           STR_1 0842                           STR_2 0889  
                         STR_3 0894                           STR_4 0885                           STR_5 0897  
                         STR_6 088D                           STR_7 0891                           STR_8 0885  
                         STR_9 0897                           u4307 0919                           u4317 092E  
                         u4237 0D24                           u4327 0943                           u4247 0D37  
                         u4337 08A3                           u4257 0D47                           u4347 0A77  
                         u4267 0D66                           u4357 0C12                           u4277 09A1  
                         u4367 0C54                           u4287 0B52                           u4377 0C6E  
                         u3825 0E36                           u3905 0C87                           u4297 0B6A  
                         u4387 175A                           u3915 0C9B                           u3765 08BB  
                         u3845 0E44                           u3855 0E59                           u3865 0E6B  
                         i1l92 1586                           _OERR 00C1                   __CFG_WRT$OFF 0000  
       __end_of_USARTWriteChar 15C4                           _main 159D                           _ftoa 0F46  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0012  
                         ttemp 007E                           wtemp 007E               __end_of_DESLIGAR 083D  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                          ??_ISR 0052  
             __end_of_LCDClear 0949                   ___fttol@exp1 003D                   ___fttol@lval 0039  
   __end_of_lcd_escreve_string 1794                  _FormatarValor 0949                __end_of___aldiv 0E8E  
                        ?_main 0070                          ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A  
              __end_of___ftadd 071B                          STR_10 086A                          STR_11 087A  
                __CFG_WDTE$OFF 0000      __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 0F46  
              __end_of___ftneg 1595                __end_of___lldiv 0B38                __end_of___ftmul 07EE  
              __end_of___llmod 0A24                __end_of___ftsub 1638                __end_of___fttol 0DFF  
                        _LIGAR 083F                          i1l142 03CC                          i1l190 171E  
                        i1l272 04C3                          i1l269 04A5                          i1l189 171B  
                        i1l542 0BED                          i1l375 167F                          i1l536 0BD4  
                        i1l565 06BC                          _RCREG 001A                          _SPBRG 0099  
          i1lcd_envia_nibble@n 0071                          _TRISA 0085                          _TXREG 0019  
                __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D           i1_lcd_escreve_string 1698  
                ___awtoft@sign 007D                __end_of_dpowers 0838                __end_of_isdigit 15B6  
                ___ftpack@sign 0074                  _countInferior 0061                          ftoa@f 0044  
                        ftoa@l 004D                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
           __size_of_USARTInit 0070                ?_USARTWriteChar 0070                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 0614               i1_lcd_envia_byte 170B                __initialization 0015  
                 i1_lcd_gotoxy 15E7                   __end_of_main 15A8                   __end_of_ftoa 1000  
                _countSuperior 0063                 ?_FormatarValor 0070                    i1lcd_putc@c 007B  
                    ??_ADCInit 0190                      ??_ADCRead 0192      __size_of_lcd_envia_nibble 0059  
                       ??_main 01AE                         ??_ftoa 0048                  ___fttol@sign1 0038  
           i1_USARTWriteString 16BB                         ISR@buf 00B0                         ISR@aux 00A0  
                       ISR@per 00C4                         ISR@pre 00B3        USARTWriteChar@USARTData 0190  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 0190  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             __end_of___awtoft 1675               __end_of___ftpack 0C06            ?i1_USARTWriteString 0071  
             __end_of___lltoft 170B                         i1l2001 1677                         i1l2101 06B8  
                       i1l2105 06CE                         i1l2131 0AFA                         i1l2109 06E0  
                       i1l2301 03FF                         i1l2119 0703                         i1l2063 0644  
                       i1l2143 0B2F                         i1l2401 0AA4                         i1l2081 066D  
                       i1l2129 0AEA                         i1l2153 09E0                         i1l2091 0693  
                       i1l2059 063D                         i1l2139 0B22                         i1l2155 09F0  
                       i1l2163 0A1B                         i1l2307 0414                         i1l2315 0452  
                       u200_25 0BF4                         i1l2405 0ACB                         i1l2093 0697  
                       i1l2069 0653                         i1l2333 04AC                         i1l2325 0464  
                       i1l2423 0733                         i1l2087 0682                         i1l2159 0A0E  
                       i1l2327 04A0                         i1l2175 15F1                         i1l2441 0788  
                       i1l2089 068E                         i1l2521 0DF6                         i1l2513 0DDA  
                       i1l2505 0DBD                         i1l2361 0539                         i1l2353 04FD  
                       i1l2329 04A7                         i1l2177 15F2                         i1l2099 06AC  
                       i1l2515 0DE5                         i1l2507 0DCD                         i1l2531 16F6  
                       i1l2339 04D5                         i1l2611 0F7F                         i1l2541 16BB  
                       i1l2453 07B0                         i1l2445 0798                         i1l2429 0749  
                       i1l2517 0DE8                         i1l2373 058C                         i1l2365 0551  
                       i1l2349 04F7                         i1l2703 165E                         i1l2383 05A6  
                       i1l2375 0590                         i1l2391 03DF                         i1l2551 08EB  
                       i1l2713 0EA6                         i1l2457 07C0                         i1l2529 16E4  
                       i1l2369 056B                         i1l2393 060F                         i1l2553 08F4  
                       i1l2545 08D0                         i1l2811 021E                         i1l2565 0950  
                       i1l1941 0BBE                         i1l1933 0BA6                         i1l2741 0F20  
                       i1l2733 0F01                         i1l2389 0600                         i1l2549 08E2  
                       i1l2557 08FD                         i1l2805 01EE                         i1l2575 0964  
                       i1l2567 0962                         i1l2719 0EBC                         i1l2487 0D8B  
                       i1l2807 020D                         i1l2577 0987                         i1l1937 0BAD  
                       i1l2595 1619                         i1l2587 160A                         i1l1947 0BD9  
                       i1l1939 0BB9                         i1l2755 1698                         i1l2843 0333  
                       i1l1949 0BE3                         u203_25 1725                         i1l2861 038F  
                       i1l2837 031C                         i1l2853 0362                         i1l2865 03A1  
                       i1l2849 034A                         i1l1995 15B4                         i1l2869 03B7  
                       u301_25 0799                         u302_25 07A1                         u230_25 066E  
                       u311_25 0D92                         u320_25 16E9                         u208_25 1680  
                       u233_25 0683                         u209_25 1687                         u306_25 07C1  
                       u314_25 0DBE                         u250_25 0B23                         u307_25 07C9  
                       u324_25 096E                         u236_25 0698                         u341_20 0068  
                       u333_25 0ECE                         u317_25 0DDC                         u253_25 09E4  
                       u334_25 0EE0                         u246_25 0AEE                         u335_25 0F02  
                       u239_25 06AD                         u255_25 09FE                         u336_25 0F13  
                       u248_25 0AFC                         u256_25 0A0F                         u280_25 052F  
                       u440_27 08DC                         u193_25 0BB2                         u337_25 0F21  
                       u249_25 0B11                         u345_25 0327                         u441_27 1711  
                       u282_25 0548                         u442_27 17FA                         u291_21 0A97  
                       u291_22 0A98                         u291_23 0A9D                         u291_24 0A9E  
                       u195_25 0BCD                         u283_25 0562                         u347_25 033E  
                       u284_25 057C                         u293_21 0ABE                         u293_22 0ABF  
                       u293_23 0AC4                         u293_24 0AC5                         u197_25 0BDC  
                       u287_25 05B1                         u279_25 0500                         u439_27 0352  
                       u288_25 060C                         u297_25 0755                         u298_25 0767  
                USARTInit@Mode 01A3      i1USARTWriteChar@USARTData 0070         __size_of_init_lcd_4bit 0066  
             __end_of_lcd_putc 09D6                         ___ftge 0A7D                      ??___aldiv 0198  
                       ___wmul 1675                      ??___ftadd 0020                      ??___ftdiv 0036  
                    ??___ftneg 0073                      ??___lldiv 0078                      ??___ftmul 0026  
                    ??___llmod 0028                      ??___ftsub 007E                      ??___fttol 0034  
         ??i1_USARTWriteString 0073                         _ativar 0C06       __end_of_USARTWriteString 17C7  
             ??_lcd_envia_byte 0193              __end_of_USARTInit 0CE6                         ftoa@cp 0051  
        ___ftmul@f3_as_product 002B                      ??_isdigit 0070                         saved_w 007E  
        i1lcd_escreve_string@y 007C                      ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 1800  
            ?_USARTReceiveChar 0070                      ?_LCDClear 0070        __end_of__initialization 004E  
           ??_USARTReceiveChar 0073                     ___ftadd@f1 0078                     ___ftadd@f2 007B  
                   ___ftge@ff1 0070                     ___ftge@ff2 0073                     ___ftdiv@f1 0033  
                   ___ftdiv@f2 0030                     ___ftdiv@f3 003B                  __end_of_LIGAR 0840  
                   ___ftneg@f1 0070                     ___awtoft@c 0078                     ___ftmul@f1 0020  
                   ___ftmul@f2 0023                     ___ftsub@f1 002A                     ___ftsub@f2 0027  
                   ___fttol@f1 0030                 __pcstackCOMMON 0070                   __pidataBANK0 1583  
                 __pidataBANK1 1581                   __pidataBANK3 15C4                ??_FormatarValor 0070  
          __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078               i1_USARTWriteChar 1585  
                _init_lcd_4bit 0B38         ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 0198  
                 sprintf@width 003F                     __pbssBANK0 005A                     __pbssBANK1 00C5  
                   ??_LCDClear 0195                      ISR@input2 00C0                      ISR@preint 00B6  
                    ISR@result 00BA                      ISR@status 00B1      USARTReceiveChar@USARTData 0074  
                   __pmaintext 159D                        ?___ftge 0070                        ?___wmul 0070  
                   __pintentry 0004                     _flag_Start 00C7                        ?_ativar 0070  
                      _ADCInit 15D4                        _ADCRead 1736                      ?___awtoft 0078  
                    ?___ftpack 0070               _lcd_envia_nibble 0A24                      ?___lltoft 0078  
               ?_init_lcd_4bit 0070                 ISR@recebimento 00C3                     _lcd_gotoxy 1638  
     __end_ofi1_lcd_envia_byte 1736               ??_USARTWriteChar 0190             _lcd_escreve_string 1763  
                    ?_lcd_putc 0070                     __stringtab 0800            ?_lcd_escreve_string 019C  
                      _Display 005A                      _ADCResult 00C5                     _inicialize 0CE6  
                      ___aldiv 0DFF                __size_of___ftge 005D          i1USARTWriteString@str 0071  
                      ___ftadd 0614                        ___ftdiv 0E8E                        ___ftneg 158D  
                      ___lldiv 0ADA                __size_of___wmul 0023                        ___ftmul 071B  
                      ___llmod 09D6                        ___ftsub 161C                        ___fttol 0D71  
              __size_of_ativar 0070                     ??___awtoft 007B                     ??___ftpack 0075  
                      _flag_ch 00DA                        _flag_an 006B                     ??___lltoft 007C  
                      __ptext1 0CE6                        __ptext2 1763                        __ptext3 098F  
                      __ptext4 1638                        __ptext5 0B38                        __ptext6 0C76  
                      __ptext7 0DFF                        __ptext8 0909                        __ptext9 0899  
         ??_lcd_escreve_string 019E                   __size_of_ISR 0386                        _dpowers 0810  
                      _isdigit 15A8               ___aldiv@dividend 0194                lcd_envia_byte@n 0192  
                 ??i1_lcd_putc 0079                     _recipiente 0069                        _sprintf 03D8  
                      clrloop0 1596                     ??_lcd_putc 0199           end_of_initialization 004E  
                      ftoa@buf 00C9                        ftoa@rem 0049        i1lcd_envia_byte@address 0074  
              ___lldiv@divisor 0070                ___lldiv@counter 007D                      _RCSTAbits 0018  
             ___aldiv@quotient 019B             __end_ofi1_lcd_putc 0909                ??_init_lcd_4bit 0195  
            ?_USARTWriteString 0191                      _PORTAbits 0005                      _PORTBbits 0006  
                    _PORTCbits 0007                      _PORTDbits 0008             ??_USARTWriteString 0193  
             FormatarValor@aux 0020               FormatarValor@str 004D                      _USARTInit 0C76  
                    _TRISBbits 0086                      _TRISCbits 0087                      _TRISDbits 0088  
                  ?_lcd_gotoxy 0195                _LCD_INIT_STRING 0838                    ___ftdiv@exp 003E  
     __end_ofi1_USARTWriteChar 158D                      _TXSTAbits 0098              __size_of_LCDClear 0040  
                  ?_inicialize 0070                    ___ftmul@exp 002A             i1_lcd_envia_nibble 17C7  
    __size_of_USARTReceiveChar 001B                 __end_of___ftge 0ADA    __size_ofi1_USARTWriteString 0025  
                  USARTInit@BR 01A9                 __end_of___wmul 1698            ?i1_lcd_envia_nibble 0070  
               __end_of_ativar 0C76                  _nivelInferior 0065            start_initialization 0015  
                   ?_USARTInit 019F                    __end_of_ISR 03D8                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075           ??i1_lcd_envia_nibble 0070  
     __end_of_lcd_envia_nibble 0A7D          lcd_envia_byte@address 0194                ___llmod@divisor 0020  
              ___llmod@counter 0029                  _nivelSuperior 0067                       ??___ftge 0076  
          __size_of_lcd_gotoxy 001C                       ??___wmul 0074                     init_fetch0 07EE  
                     ??_ativar 0193                    __pdataBANK0 006B                    __pdataBANK1 00DA  
                  __pdataBANK3 01AE          __end_of_FormatarValor 098F                       ?_ADCInit 0070  
                     ?_ADCRead 0190            __end_of_LIGAR_BOMBA 0841            __end_of_LIGAR_MOTOR 0842  
      __end_of_LCD_INIT_STRING 083C              __size_of___awtoft 0021              __size_of___ftpack 0068  
            __size_of___lltoft 002B                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0                  __pcstackBANK3 0190            __end_of__stringdata 0899  
          __size_of_inicialize 008B  __size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072  
                     ISR@F1361 01AE        __size_of_lcd_envia_byte 0035             ??i1_lcd_envia_byte 0073  
                  sprintf@_val 003A                    sprintf@flag 0038              __size_of_lcd_putc 0047  
                  sprintf@prec 0041                     ISR@status2 00BB                       ISR@input 00BD  
                ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078                       ?___aldiv 0190  
                     ?___ftadd 0078                       ?___ftdiv 0030                       ?___ftneg 0070  
                     ?___lldiv 0070                       ?___ftmul 0020                       ?___llmod 0020  
                     ?___ftsub 0027                       ?___fttol 0030                      __pstrings 0800  
                     ?_isdigit 0070                    ??_USARTInit 01A5                       _DESLIGAR 083C  
               init_lcd_4bit@i 0197                       ?_sprintf 002A                       _LCDClear 0909  
              ___aldiv@divisor 0190              interrupt_function 0004                ___aldiv@counter 0199  
               ___wmul@product 0074                      clear_ram0 1595                       _PIE1bits 008C  
            lcd_envia_nibble@n 0191                 ??i1_lcd_gotoxy 0076                       _PIR1bits 000C  
                  _LIGAR_BOMBA 0840                    _LIGAR_MOTOR 0841               _USARTReceiveChar 1601  
             __size_of_ADCInit 0013               __size_of_ADCRead 002D                     _ADCON0bits 001F  
                  __stringbase 080F                     _ADCON1bits 009F                    __stringdata 0842  
            ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031                      lcd_putc@c 019B  
                 ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C      __size_of_USARTWriteString 0033  
            ?i1_USARTWriteChar 0070        __size_of_USARTWriteChar 000E                   ??_inicialize 01AB  
           ??i1_USARTWriteChar 0070             __end_of_lcd_gotoxy 1654               __size_of___aldiv 008F  
             __size_of___ftadd 0107               __size_of___ftdiv 00B8               __size_of___ftneg 0008  
             __size_of___lldiv 005E               __size_of___ftmul 00D3               __size_of___llmod 004E  
             __size_of___ftsub 001C               __size_of___fttol 008E                       ___awtoft 1654  
                     ___ftpack 0B9E             __end_of__stringtab 0810                       ___lltoft 16E0  
                  _isdigit$897 0070          __end_of_init_lcd_4bit 0B9E               __size_of_isdigit 000E  
                     __ptext10 0A24                       __ptext11 15D4                       __ptext20 170B  
                     __ptext12 0C06                       __ptext21 17C7                       __ptext13 1794  
                     __ptext30 161C                       __ptext22 0F46                       __ptext14 15B6  
                     __ptext31 0614                       __ptext23 03D8                       __ptext15 1736  
                     __ptext40 1585                       __ptext32 158D                       __ptext24 15A8  
                     __ptext16 0052                       __ptext41 0949                       __ptext33 071B  
                     __ptext25 1675                       __ptext17 1698                       __ptext34 0A7D  
                     __ptext26 09D6                       __ptext18 08CE                       __ptext35 0E8E  
                     __ptext27 0ADA                       __ptext19 15E7                       __ptext36 1654  
                     __ptext28 16E0                       __ptext37 0B9E                       __ptext29 0D71  
                     __ptext38 1601                       __ptext39 16BB                 _lcd_envia_byte 0899  
           __end_of_inicialize 0D71                       _lcd_putc 098F               __size_of_sprintf 023C  
                __size_of_main 000B                  __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070  
           ??_lcd_envia_nibble 0190     __end_ofi1_USARTWriteString 16E0                 FormatarValor@i 004B  
                   _INTCONbits 000B         __end_of_lcd_envia_byte 08CE           __end_ofi1_lcd_gotoxy 1601  
                     init_ram0 07F2                       isdigit@c 0071                       intlevel1 0000  
                    sprintf@ap 0039                      sprintf@sp 003E    __size_ofi1_lcd_envia_nibble 0039  
             ___lldiv@dividend 0074                      stringcode 080A   __end_ofi1_lcd_escreve_string 16BB  
    __size_ofi1_lcd_envia_byte 002B              USARTInit@BaudRate 019F                 _DESLIGAR_BOMBA 083D  
               _DESLIGAR_MOTOR 083E            USARTWriteString@str 0191           FormatarValor@retorno 0048  
         FormatarValor@posicao 0049                       sprintf@c 0043                       sprintf@f 002A  
             ___lldiv@quotient 0079                ?_lcd_envia_byte 0192                       stringdir 080A  
                     stringtab 0800                   ___aldiv@sign 019A       __end_of_USARTReceiveChar 161C  
             _USARTWriteString 1794         __size_of_FormatarValor 0046                 _USARTWriteChar 15B6  
       __end_of_DESLIGAR_BOMBA 083E         __end_of_DESLIGAR_MOTOR 083F  
