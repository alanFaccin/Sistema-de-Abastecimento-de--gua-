

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 07 09:55:20 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK0
   184  168B                     __pidataBANK0:	
   185                           
   186                           ;initializer for _flag_an
   187  168B  34FF               	retlw	255
   188  168C  34FF               	retlw	255
   189                           
   190                           	psect	idataBANK1
   191  16B6                     __pidataBANK1:	
   192                           
   193                           ;initializer for ISR@F1357
   194  16B6  3420               	retlw	32
   195  16B7  3420               	retlw	32
   196  16B8  3420               	retlw	32
   197  16B9  3420               	retlw	32
   198  16BA  3420               	retlw	32
   199  16BB  3420               	retlw	32
   200  16BC  3420               	retlw	32
   201  16BD  3420               	retlw	32
   202  16BE  3420               	retlw	32
   203  16BF  3420               	retlw	32
   204  16C0  3420               	retlw	32
   205  16C1  3420               	retlw	32
   206  16C2  3420               	retlw	32
   207  16C3  3420               	retlw	32
   208  16C4  3420               	retlw	32
   209  16C5  3420               	retlw	32
   210                           
   211                           	psect	strings
   212  0800                     __pstrings:	
   213  0800                     stringtab:	
   214  0800                     __stringtab:	
   215                           
   216                           ;	String table - string pointers are 1 byte each
   217  0800  1BFF               	btfsc	btemp+1,7
   218  0801  280A               	ljmp	stringcode
   219  0802  1383               	bcf	3,7
   220  0803  187F               	btfsc	btemp+1,0
   221  0804  1783               	bsf	3,7
   222  0805  0800               	movf	0,w
   223  0806  0A84               	incf	4,f
   224  0807  1903               	skipnz
   225  0808  0AFF               	incf	btemp+1,f
   226  0809  0008               	return
   227  080A                     stringcode:	
   228  080A                     stringdir:	
   229  080A  3008               	movlw	high stringdir
   230  080B  008A               	movwf	10
   231  080C  0804               	movf	4,w
   232  080D  0A84               	incf	4,f
   233  080E  0782               	addwf	2,f
   234  080F                     __stringbase:	
   235  080F  3400               	retlw	0
   236  0810                     __end_of__stringtab:	
   237  0810                     _dpowers:	
   238  0810  3401               	retlw	1
   239  0811  3400               	retlw	0
   240  0812  3400               	retlw	0
   241  0813  3400               	retlw	0
   242  0814  340A               	retlw	10
   243  0815  3400               	retlw	0
   244  0816  3400               	retlw	0
   245  0817  3400               	retlw	0
   246  0818  3464               	retlw	100
   247  0819  3400               	retlw	0
   248  081A  3400               	retlw	0
   249  081B  3400               	retlw	0
   250  081C  34E8               	retlw	232
   251  081D  3403               	retlw	3
   252  081E  3400               	retlw	0
   253  081F  3400               	retlw	0
   254  0820  3410               	retlw	16
   255  0821  3427               	retlw	39
   256  0822  3400               	retlw	0
   257  0823  3400               	retlw	0
   258  0824  34A0               	retlw	160
   259  0825  3486               	retlw	134
   260  0826  3401               	retlw	1
   261  0827  3400               	retlw	0
   262  0828  3440               	retlw	64
   263  0829  3442               	retlw	66
   264  082A  340F               	retlw	15
   265  082B  3400               	retlw	0
   266  082C  3480               	retlw	128
   267  082D  3496               	retlw	150
   268  082E  3498               	retlw	152
   269  082F  3400               	retlw	0
   270  0830  3400               	retlw	0
   271  0831  34E1               	retlw	225
   272  0832  34F5               	retlw	245
   273  0833  3405               	retlw	5
   274  0834  3400               	retlw	0
   275  0835  34CA               	retlw	202
   276  0836  349A               	retlw	154
   277  0837  343B               	retlw	59
   278  0838                     __end_of_dpowers:	
   279  0838                     _LCD_INIT_STRING:	
   280  0838  341C               	retlw	28
   281  0839  340C               	retlw	12
   282  083A  3401               	retlw	1
   283  083B  3406               	retlw	6
   284  083C                     __end_of_LCD_INIT_STRING:	
   285  083C                     _DESLIGAR:	
   286  083C  346C               	retlw	108
   287  083D                     __end_of_DESLIGAR:	
   288  083D                     _DESLIGAR_BOMBA:	
   289  083D  3462               	retlw	98
   290  083E                     __end_of_DESLIGAR_BOMBA:	
   291  083E                     _DESLIGAR_MOTOR:	
   292  083E  346D               	retlw	109
   293  083F                     __end_of_DESLIGAR_MOTOR:	
   294  083F                     _LIGAR:	
   295  083F  344C               	retlw	76
   296  0840                     __end_of_LIGAR:	
   297  0840                     _LIGAR_BOMBA:	
   298  0840  3442               	retlw	66
   299  0841                     __end_of_LIGAR_BOMBA:	
   300  0841                     _LIGAR_MOTOR:	
   301  0841  344D               	retlw	77
   302  0842                     __end_of_LIGAR_MOTOR:	
   303  001F                     _ADCON0bits	set	31
   304  001E                     _ADRESH	set	30
   305  000B                     _INTCONbits	set	11
   306  000C                     _PIR1bits	set	12
   307  0005                     _PORTAbits	set	5
   308  0006                     _PORTBbits	set	6
   309  0007                     _PORTCbits	set	7
   310  0008                     _PORTDbits	set	8
   311  001A                     _RCREG	set	26
   312  0018                     _RCSTAbits	set	24
   313  0019                     _TXREG	set	25
   314  00C1                     _OERR	set	193
   315  009F                     _ADCON1bits	set	159
   316  009E                     _ADRESL	set	158
   317  008C                     _PIE1bits	set	140
   318  0099                     _SPBRG	set	153
   319  0085                     _TRISA	set	133
   320  0086                     _TRISBbits	set	134
   321  0087                     _TRISCbits	set	135
   322  0088                     _TRISDbits	set	136
   323  0098                     _TXSTAbits	set	152
   324  0842                     __stringdata:	
   325  0842                     STR_1:	
   326  0842  340A               	retlw	10
   327  0843  340D               	retlw	13
   328  0844  3420               	retlw	32	;' '
   329  0845  342D               	retlw	45	;'-'
   330  0846  342D               	retlw	45	;'-'
   331  0847  342D               	retlw	45	;'-'
   332  0848  342D               	retlw	45	;'-'
   333  0849  342D               	retlw	45	;'-'
   334  084A  342D               	retlw	45	;'-'
   335  084B  342D               	retlw	45	;'-'
   336  084C  3420               	retlw	32	;' '
   337  084D  3445               	retlw	69	;'E'
   338  084E  3453               	retlw	83	;'S'
   339  084F  3454               	retlw	84	;'T'
   340  0850  344F               	retlw	79	;'O'
   341  0851  3455               	retlw	85	;'U'
   342  0852  3452               	retlw	82	;'R'
   343  0853  344F               	retlw	79	;'O'
   344  0854  3420               	retlw	32	;' '
   345  0855  3444               	retlw	68	;'D'
   346  0856  3445               	retlw	69	;'E'
   347  0857  3420               	retlw	32	;' '
   348  0858  3450               	retlw	80	;'P'
   349  0859  3449               	retlw	73	;'I'
   350  085A  344C               	retlw	76	;'L'
   351  085B  3448               	retlw	72	;'H'
   352  085C  3441               	retlw	65	;'A'
   353  085D  3420               	retlw	32	;' '
   354  085E  342D               	retlw	45	;'-'
   355  085F  342D               	retlw	45	;'-'
   356  0860  342D               	retlw	45	;'-'
   357  0861  342D               	retlw	45	;'-'
   358  0862  342D               	retlw	45	;'-'
   359  0863  342D               	retlw	45	;'-'
   360  0864  342D               	retlw	45	;'-'
   361  0865  3420               	retlw	32	;' '
   362  0866  340A               	retlw	10
   363  0867  340D               	retlw	13
   364  0868  3420               	retlw	32	;' '
   365  0869  3400               	retlw	0
   366  086A                     STR_5:	
   367  086A  340A               	retlw	10
   368  086B  340D               	retlw	13
   369  086C  3420               	retlw	32	;' '
   370  086D  3443               	retlw	67	;'C'
   371  086E  3461               	retlw	97	;'a'
   372  086F  3472               	retlw	114	;'r'
   373  0870  3461               	retlw	97	;'a'
   374  0871  3463               	retlw	99	;'c'
   375  0872  3474               	retlw	116	;'t'
   376  0873  3465               	retlw	101	;'e'
   377  0874  3472               	retlw	114	;'r'
   378  0875  3420               	retlw	32	;' '
   379  0876  3444               	retlw	68	;'D'
   380  0877  3469               	retlw	105	;'i'
   381  0878  3467               	retlw	103	;'g'
   382  0879  3469               	retlw	105	;'i'
   383  087A  3474               	retlw	116	;'t'
   384  087B  3461               	retlw	97	;'a'
   385  087C  3464               	retlw	100	;'d'
   386  087D  346F               	retlw	111	;'o'
   387  087E  3420               	retlw	32	;' '
   388  087F  343A               	retlw	58	;':'
   389  0880  3400               	retlw	0
   390  0881                     STR_6:	
   391  0881  340C               	retlw	12
   392  0882  344C               	retlw	76	;'L'
   393  0883  346F               	retlw	111	;'o'
   394  0884  3461               	retlw	97	;'a'
   395  0885  3464               	retlw	100	;'d'
   396  0886  3469               	retlw	105	;'i'
   397  0887  346E               	retlw	110	;'n'
   398  0888  3467               	retlw	103	;'g'
   399  0889  3420               	retlw	32	;' '
   400  088A  3450               	retlw	80	;'P'
   401  088B  3449               	retlw	73	;'I'
   402  088C  3443               	retlw	67	;'C'
   403  088D  342E               	retlw	46	;'.'
   404  088E  342E               	retlw	46	;'.'
   405  088F  342E               	retlw	46	;'.'
   406  0890  3400               	retlw	0
   407  0891                     STR_7:	
   408  0891  3425               	retlw	37	;'%'
   409  0892  346C               	retlw	108	;'l'
   410  0893  3475               	retlw	117	;'u'
   411  0894  342E               	retlw	46	;'.'
   412  0895  3425               	retlw	37	;'%'
   413  0896  3436               	retlw	54	;'6'
   414  0897  342E               	retlw	46	;'.'
   415  0898  3436               	retlw	54	;'6'
   416  0899  346C               	retlw	108	;'l'
   417  089A  3475               	retlw	117	;'u'
   418  089B  3400               	retlw	0
   419  089C                     STR_2:	
   420  089C  344E               	retlw	78	;'N'
   421  089D  3469               	retlw	105	;'i'
   422  089E  3476               	retlw	118	;'v'
   423  089F  3465               	retlw	101	;'e'
   424  08A0  346C               	retlw	108	;'l'
   425  08A1  343A               	retlw	58	;':'
   426  08A2  3400               	retlw	0
   427  08A3                     STR_3:	
   428  08A3  340A               	retlw	10
   429  08A4  3453               	retlw	83	;'S'
   430  08A5  3400               	retlw	0
   431  08A6                     STR_4:	
   432  08A6  3425               	retlw	37	;'%'
   433  08A7  3400               	retlw	0
   434  08A8                     __end_of__stringdata:	
   435                           
   436                           ; #config settings
   437  0000                     
   438                           	psect	cinit
   439  0015                     start_initialization:	
   440  0015                     __initialization:	
   441                           
   442                           ; Clear objects allocated to BANK0
   443  0015  1383               	bcf	3,7	;select IRP bank0
   444  0016  305A               	movlw	low __pbssBANK0
   445  0017  0084               	movwf	4
   446  0018  3064               	movlw	low (__pbssBANK0+10)
   447  0019  120A  158A  20A8  120A  118A  	fcall	clear_ram0
   448                           
   449                           ; Clear objects allocated to BANK1
   450  001E  30D4               	movlw	low __pbssBANK1
   451  001F  0084               	movwf	4
   452  0020  30DF               	movlw	low (__pbssBANK1+11)
   453  0021  120A  158A  20A8  120A  118A  	fcall	clear_ram0
   454                           
   455                           ; Clear objects allocated to BANK3
   456  0026  1783               	bsf	3,7	;select IRP bank2
   457  0027  30AE               	movlw	low __pbssBANK3
   458  0028  0084               	movwf	4
   459  0029  30BF               	movlw	low (__pbssBANK3+17)
   460  002A  120A  158A  20A8  120A  118A  	fcall	clear_ram0
   461                           
   462                           ; Initialize objects allocated to BANK1
   463  002F  1383               	bcf	3,7	;select IRP bank0
   464  0030  30D4               	movlw	low (__pdataBANK1+16)
   465  0031  00FD               	movwf	btemp+-1
   466  0032  3016               	movlw	high __pidataBANK1
   467  0033  00FE               	movwf	btemp
   468  0034  30B6               	movlw	low __pidataBANK1
   469  0035  00FF               	movwf	btemp+1
   470  0036  30C4               	movlw	low __pdataBANK1
   471  0037  0084               	movwf	4
   472  0038  160A  118A  26CA  120A  118A  	fcall	init_ram0
   473                           
   474                           ; Initialize objects allocated to BANK0
   475  003D  160A  118A  268B  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   476  0042  00E4               	movwf	__pdataBANK0& (0+127)
   477  0043  160A  118A  268C   	fcall	__pidataBANK0+1	;fetch initializer
   478  0046  00E5               	movwf	(__pdataBANK0+1)& (0+127)
   479  0047                     end_of_initialization:	
   480                           ;End of C runtime variable initialization code
   481                           
   482  0047                     __end_of__initialization:	
   483  0047  0183               	clrf	3
   484  0048  160A  118A  2E9D   	ljmp	_main	;jump to C main() function
   485                           
   486                           	psect	bssBANK0
   487  005A                     __pbssBANK0:	
   488  005A                     _countInferior:	
   489  005A                     	ds	2
   490  005C                     _countSuperior:	
   491  005C                     	ds	2
   492  005E                     _nivelInferior:	
   493  005E                     	ds	2
   494  0060                     _nivelSuperior:	
   495  0060                     	ds	2
   496  0062                     _recipiente:	
   497  0062                     	ds	2
   498                           
   499                           	psect	dataBANK0
   500  0064                     __pdataBANK0:	
   501  0064                     _flag_an:	
   502  0064                     	ds	2
   503                           
   504                           	psect	bssBANK1
   505  00D4                     __pbssBANK1:	
   506  00D4                     _Display:	
   507  00D4                     	ds	7
   508  00DB                     _ADCResult:	
   509  00DB                     	ds	2
   510  00DD                     _flag_Start:	
   511  00DD                     	ds	2
   512                           
   513                           	psect	dataBANK1
   514  00C4                     __pdataBANK1:	
   515  00C4                     ISR@F1357:	
   516  00C4                     	ds	16
   517                           
   518                           	psect	bssBANK3
   519  01AE                     __pbssBANK3:	
   520  01AE                     ftoa@buf:	
   521  01AE                     	ds	17
   522                           
   523                           	psect	clrtext
   524  08A8                     clear_ram0:	
   525                           ;	Called with FSR containing the base address, and
   526                           ;	W with the last address+1
   527                           
   528  08A8  0064               	clrwdt	;clear the watchdog before getting into this loop
   529  08A9                     clrloop0:	
   530  08A9  0180               	clrf	0	;clear RAM location pointed to by FSR
   531  08AA  0A84               	incf	4,f	;increment pointer
   532  08AB  0604               	xorwf	4,w	;XOR with final address
   533  08AC  1903               	btfsc	3,2	;have we reached the end yet?
   534  08AD  3400               	retlw	0	;all done for this memory range, return
   535  08AE  0604               	xorwf	4,w	;XOR again to restore value
   536  08AF  28A9               	goto	clrloop0	;do the next byte
   537                           
   538                           	psect	inittext
   539  16C6                     init_fetch0:	
   540                           ;	Called with low address in FSR and high address in W
   541                           
   542  16C6  087E               	movf	126,w
   543  16C7  008A               	movwf	10
   544  16C8  087F               	movf	127,w
   545  16C9  0082               	movwf	2
   546  16CA                     init_ram0:	
   547                           ;Called with:
   548                           ;	high address of idata address in btemp 
   549                           ;	low address of idata address in btemp+1 
   550                           ;	low address of data in FSR
   551                           ;	high address + 1 of data in btemp-1
   552                           
   553  16CA  26C6  160A  118A   	fcall	init_fetch0
   554  16CD  0080               	movwf	0
   555  16CE  0A84               	incf	4,f
   556  16CF  0804               	movf	4,w
   557  16D0  067D               	xorwf	125,w
   558  16D1  1903               	btfsc	3,2
   559  16D2  3400               	retlw	0
   560  16D3  0AFF               	incf	127,f
   561  16D4  1903               	btfsc	3,2
   562  16D5  0AFE               	incf	126,f
   563  16D6  2ECA               	goto	init_ram0
   564                           
   565                           	psect	cstackBANK3
   566  0190                     __pcstackBANK3:	
   567  0190                     ??_lcd_envia_nibble:	
   568  0190                     ??_ADCInit:	
   569                           ; 0 bytes @ 0x0
   570                           
   571  0190                     ?_ADCRead:	
   572                           ; 0 bytes @ 0x0
   573                           
   574  0190                     ?___aldiv:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0190                     ADCRead@ch:	
   578                           ; 4 bytes @ 0x0
   579                           
   580  0190                     ___aldiv@divisor:	
   581                           ; 2 bytes @ 0x0
   582                           
   583                           
   584                           ; 4 bytes @ 0x0
   585  0190                     	ds	1
   586  0191                     lcd_envia_nibble@n:	
   587                           
   588                           ; 1 bytes @ 0x1
   589  0191                     	ds	1
   590  0192                     ?_lcd_envia_byte:	
   591  0192                     ??_ADCRead:	
   592                           ; 0 bytes @ 0x2
   593                           
   594  0192                     lcd_envia_byte@n:	
   595                           ; 0 bytes @ 0x2
   596                           
   597                           
   598                           ; 1 bytes @ 0x2
   599  0192                     	ds	1
   600  0193                     ??_lcd_envia_byte:	
   601  0193                     ??_ativar:	
   602                           ; 0 bytes @ 0x3
   603                           
   604                           
   605                           ; 0 bytes @ 0x3
   606  0193                     	ds	1
   607  0194                     lcd_envia_byte@address:	
   608  0194                     ___aldiv@dividend:	
   609                           ; 1 bytes @ 0x4
   610                           
   611                           
   612                           ; 4 bytes @ 0x4
   613  0194                     	ds	1
   614  0195                     ?_lcd_gotoxy:	
   615  0195                     ??_init_lcd_4bit:	
   616                           ; 0 bytes @ 0x5
   617                           
   618  0195                     ??_LCDClear:	
   619                           ; 0 bytes @ 0x5
   620                           
   621  0195                     lcd_gotoxy@y:	
   622                           ; 0 bytes @ 0x5
   623                           
   624                           
   625                           ; 1 bytes @ 0x5
   626  0195                     	ds	1
   627  0196                     ??_lcd_gotoxy:	
   628                           
   629                           ; 0 bytes @ 0x6
   630  0196                     	ds	1
   631  0197                     init_lcd_4bit@i:	
   632  0197                     lcd_gotoxy@x:	
   633                           ; 1 bytes @ 0x7
   634                           
   635                           
   636                           ; 1 bytes @ 0x7
   637  0197                     	ds	1
   638  0198                     ??___aldiv:	
   639  0198                     lcd_gotoxy@address:	
   640                           ; 0 bytes @ 0x8
   641                           
   642                           
   643                           ; 1 bytes @ 0x8
   644  0198                     	ds	1
   645  0199                     ??_lcd_putc:	
   646  0199                     ___aldiv@counter:	
   647                           ; 0 bytes @ 0x9
   648                           
   649                           
   650                           ; 1 bytes @ 0x9
   651  0199                     	ds	1
   652  019A                     ___aldiv@sign:	
   653                           
   654                           ; 1 bytes @ 0xA
   655  019A                     	ds	1
   656  019B                     lcd_putc@c:	
   657  019B                     ___aldiv@quotient:	
   658                           ; 1 bytes @ 0xB
   659                           
   660                           
   661                           ; 4 bytes @ 0xB
   662  019B                     	ds	1
   663  019C                     ?_lcd_escreve_string:	
   664  019C                     lcd_escreve_string@y:	
   665                           ; 0 bytes @ 0xC
   666                           
   667                           
   668                           ; 2 bytes @ 0xC
   669  019C                     	ds	2
   670  019E                     ??_lcd_escreve_string:	
   671                           
   672                           ; 0 bytes @ 0xE
   673  019E                     	ds	1
   674  019F                     ?_USARTInit:	
   675  019F                     USARTInit@BaudRate:	
   676                           ; 0 bytes @ 0xF
   677                           
   678                           
   679                           ; 4 bytes @ 0xF
   680  019F                     	ds	4
   681  01A3                     USARTInit@Mode:	
   682                           
   683                           ; 2 bytes @ 0x13
   684  01A3                     	ds	2
   685  01A5                     ??_USARTInit:	
   686                           
   687                           ; 0 bytes @ 0x15
   688  01A5                     	ds	4
   689  01A9                     USARTInit@BR:	
   690                           
   691                           ; 2 bytes @ 0x19
   692  01A9                     	ds	2
   693  01AB                     ??_inicialize:	
   694                           
   695                           ; 0 bytes @ 0x1B
   696  01AB                     	ds	3
   697  01AE                     ??_main:	
   698                           
   699                           	psect	cstackBANK1
   700  00A0                     __pcstackBANK1:	
   701                           ; 0 bytes @ 0x1E
   702                           
   703  00A0                     ISR@aux:	
   704                           
   705                           ; 16 bytes @ 0x0
   706  00A0                     	ds	16
   707  00B0                     ISR@buf:	
   708                           
   709                           ; 1 bytes @ 0x10
   710  00B0                     	ds	1
   711  00B1                     ISR@status:	
   712                           
   713                           ; 2 bytes @ 0x11
   714  00B1                     	ds	2
   715  00B3                     ISR@status2:	
   716                           
   717                           ; 2 bytes @ 0x13
   718  00B3                     	ds	2
   719  00B5                     ISR@pre:	
   720                           
   721                           ; 3 bytes @ 0x15
   722  00B5                     	ds	3
   723  00B8                     ISR@preint:	
   724                           
   725                           ; 2 bytes @ 0x18
   726  00B8                     	ds	2
   727  00BA                     ISR@i:	
   728                           
   729                           ; 2 bytes @ 0x1A
   730  00BA                     	ds	2
   731  00BC                     ISR@result:	
   732                           
   733                           ; 1 bytes @ 0x1C
   734  00BC                     	ds	1
   735  00BD                     ISR@input:	
   736                           
   737                           ; 3 bytes @ 0x1D
   738  00BD                     	ds	3
   739  00C0                     ISR@input2:	
   740                           
   741                           ; 3 bytes @ 0x20
   742  00C0                     	ds	3
   743  00C3                     ISR@per:	
   744                           
   745                           ; 1 bytes @ 0x23
   746  00C3                     	ds	1
   747                           
   748                           	psect	cstackCOMMON
   749  0070                     __pcstackCOMMON:	
   750  0070                     ?_init_lcd_4bit:	
   751  0070                     ?_LCDClear:	
   752                           ; 0 bytes @ 0x0
   753                           
   754  0070                     ?_lcd_envia_nibble:	
   755                           ; 0 bytes @ 0x0
   756                           
   757  0070                     ?_isdigit:	
   758                           ; 0 bytes @ 0x0
   759                           
   760  0070                     ??_isdigit:	
   761                           ; 1 bit 
   762                           
   763  0070                     ?_USARTWriteChar:	
   764                           ; 0 bytes @ 0x0
   765                           
   766  0070                     ??_USARTWriteChar:	
   767                           ; 0 bytes @ 0x0
   768                           
   769  0070                     ?_ADCInit:	
   770                           ; 0 bytes @ 0x0
   771                           
   772  0070                     ?_ISR:	
   773                           ; 0 bytes @ 0x0
   774                           
   775  0070                     ?_inicialize:	
   776                           ; 0 bytes @ 0x0
   777                           
   778  0070                     ?_ativar:	
   779                           ; 0 bytes @ 0x0
   780                           
   781  0070                     ?_main:	
   782                           ; 0 bytes @ 0x0
   783                           
   784  0070                     ?_lcd_putc:	
   785                           ; 0 bytes @ 0x0
   786                           
   787  0070                     ?___ftge:	
   788                           ; 0 bytes @ 0x0
   789                           
   790  0070                     ?i1_lcd_envia_nibble:	
   791                           ; 1 bit 
   792                           
   793  0070                     ??i1_lcd_envia_nibble:	
   794                           ; 0 bytes @ 0x0
   795                           
   796  0070                     ?i1_lcd_putc:	
   797                           ; 0 bytes @ 0x0
   798                           
   799  0070                     ?_USARTReceiveChar:	
   800                           ; 0 bytes @ 0x0
   801                           
   802  0070                     ?___wmul:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ?___awdiv:	
   806                           ; 2 bytes @ 0x0
   807                           
   808  0070                     ?___ftpack:	
   809                           ; 2 bytes @ 0x0
   810                           
   811  0070                     ?___ftneg:	
   812                           ; 3 bytes @ 0x0
   813                           
   814  0070                     ?___lldiv:	
   815                           ; 3 bytes @ 0x0
   816                           
   817  0070                     USARTWriteChar@USARTData:	
   818                           ; 4 bytes @ 0x0
   819                           
   820  0070                     _isdigit$886:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ___wmul@multiplier:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ___awdiv@divisor:	
   827                           ; 2 bytes @ 0x0
   828                           
   829  0070                     ___ftpack@arg:	
   830                           ; 2 bytes @ 0x0
   831                           
   832  0070                     ___ftge@ff1:	
   833                           ; 3 bytes @ 0x0
   834                           
   835  0070                     ___ftneg@f1:	
   836                           ; 3 bytes @ 0x0
   837                           
   838  0070                     ___lldiv@divisor:	
   839                           ; 3 bytes @ 0x0
   840                           
   841                           
   842                           ; 4 bytes @ 0x0
   843  0070                     	ds	1
   844  0071                     ?_USARTWriteString:	
   845  0071                     isdigit@c:	
   846                           ; 0 bytes @ 0x1
   847                           
   848  0071                     i1lcd_envia_nibble@n:	
   849                           ; 1 bytes @ 0x1
   850                           
   851  0071                     USARTWriteString@str:	
   852                           ; 1 bytes @ 0x1
   853                           
   854                           
   855                           ; 2 bytes @ 0x1
   856  0071                     	ds	1
   857  0072                     ?i1_lcd_envia_byte:	
   858  0072                     i1lcd_envia_byte@n:	
   859                           ; 0 bytes @ 0x2
   860                           
   861  0072                     ___wmul@multiplicand:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0072                     ___awdiv@dividend:	
   865                           ; 2 bytes @ 0x2
   866                           
   867                           
   868                           ; 2 bytes @ 0x2
   869  0072                     	ds	1
   870  0073                     ??_USARTWriteString:	
   871  0073                     ??_USARTReceiveChar:	
   872                           ; 0 bytes @ 0x3
   873                           
   874  0073                     ??___ftneg:	
   875                           ; 0 bytes @ 0x3
   876                           
   877  0073                     ??i1_lcd_envia_byte:	
   878                           ; 0 bytes @ 0x3
   879                           
   880  0073                     ___ftpack@exp:	
   881                           ; 0 bytes @ 0x3
   882                           
   883  0073                     ___ftge@ff2:	
   884                           ; 1 bytes @ 0x3
   885                           
   886                           
   887                           ; 3 bytes @ 0x3
   888  0073                     	ds	1
   889  0074                     ??___wmul:	
   890  0074                     ??___awdiv:	
   891                           ; 0 bytes @ 0x4
   892                           
   893  0074                     USARTReceiveChar@USARTData:	
   894                           ; 0 bytes @ 0x4
   895                           
   896  0074                     ___ftpack@sign:	
   897                           ; 1 bytes @ 0x4
   898                           
   899  0074                     i1lcd_envia_byte@address:	
   900                           ; 1 bytes @ 0x4
   901                           
   902  0074                     ___wmul@product:	
   903                           ; 1 bytes @ 0x4
   904                           
   905  0074                     ___lldiv@dividend:	
   906                           ; 2 bytes @ 0x4
   907                           
   908                           
   909                           ; 4 bytes @ 0x4
   910  0074                     	ds	1
   911  0075                     ??___ftpack:	
   912  0075                     ?i1_lcd_gotoxy:	
   913                           ; 0 bytes @ 0x5
   914                           
   915  0075                     ___awdiv@counter:	
   916                           ; 0 bytes @ 0x5
   917                           
   918  0075                     i1lcd_gotoxy@y:	
   919                           ; 1 bytes @ 0x5
   920                           
   921                           
   922                           ; 1 bytes @ 0x5
   923  0075                     	ds	1
   924  0076                     ??___ftge:	
   925  0076                     ??i1_lcd_gotoxy:	
   926                           ; 0 bytes @ 0x6
   927                           
   928  0076                     ___awdiv@sign:	
   929                           ; 0 bytes @ 0x6
   930                           
   931                           
   932                           ; 1 bytes @ 0x6
   933  0076                     	ds	1
   934  0077                     i1lcd_gotoxy@x:	
   935  0077                     ___awdiv@quotient:	
   936                           ; 1 bytes @ 0x7
   937                           
   938                           
   939                           ; 2 bytes @ 0x7
   940  0077                     	ds	1
   941  0078                     ??___lldiv:	
   942  0078                     ?___awtoft:	
   943                           ; 0 bytes @ 0x8
   944                           
   945  0078                     ?___ftadd:	
   946                           ; 3 bytes @ 0x8
   947                           
   948  0078                     ?___lltoft:	
   949                           ; 3 bytes @ 0x8
   950                           
   951  0078                     i1lcd_gotoxy@address:	
   952                           ; 3 bytes @ 0x8
   953                           
   954  0078                     ___awtoft@c:	
   955                           ; 1 bytes @ 0x8
   956                           
   957  0078                     ___ftadd@f1:	
   958                           ; 2 bytes @ 0x8
   959                           
   960  0078                     ___lltoft@c:	
   961                           ; 3 bytes @ 0x8
   962                           
   963                           
   964                           ; 4 bytes @ 0x8
   965  0078                     	ds	1
   966  0079                     ??i1_lcd_putc:	
   967  0079                     ?___awmod:	
   968                           ; 0 bytes @ 0x9
   969                           
   970  0079                     ___awmod@divisor:	
   971                           ; 2 bytes @ 0x9
   972                           
   973  0079                     ___lldiv@quotient:	
   974                           ; 2 bytes @ 0x9
   975                           
   976                           
   977                           ; 4 bytes @ 0x9
   978  0079                     	ds	2
   979  007B                     ??___awtoft:	
   980  007B                     i1lcd_putc@c:	
   981                           ; 0 bytes @ 0xB
   982                           
   983  007B                     ___awmod@dividend:	
   984                           ; 1 bytes @ 0xB
   985                           
   986  007B                     ___ftadd@f2:	
   987                           ; 2 bytes @ 0xB
   988                           
   989                           
   990                           ; 3 bytes @ 0xB
   991  007B                     	ds	1
   992  007C                     ??___lltoft:	
   993  007C                     ?i1_lcd_escreve_string:	
   994                           ; 0 bytes @ 0xC
   995                           
   996  007C                     i1lcd_escreve_string@y:	
   997                           ; 0 bytes @ 0xC
   998                           
   999                           
  1000                           ; 2 bytes @ 0xC
  1001  007C                     	ds	1
  1002  007D                     ??___awmod:	
  1003  007D                     ___awtoft@sign:	
  1004                           ; 0 bytes @ 0xD
  1005                           
  1006  007D                     ___lldiv@counter:	
  1007                           ; 1 bytes @ 0xD
  1008                           
  1009  007D                     ___lltoft@exp:	
  1010                           ; 1 bytes @ 0xD
  1011                           
  1012                           
  1013                           ; 1 bytes @ 0xD
  1014  007D                     	ds	1
  1015  007E                     ??___ftsub:	
  1016  007E                     ??i1_lcd_escreve_string:	
  1017                           ; 0 bytes @ 0xE
  1018                           
  1019                           
  1020                           	psect	cstackBANK0
  1021  0020                     __pcstackBANK0:	
  1022                           ; 0 bytes @ 0xE
  1023                           
  1024  0020                     ??___ftadd:	
  1025  0020                     ?___ftmul:	
  1026                           ; 0 bytes @ 0x0
  1027                           
  1028  0020                     ?___llmod:	
  1029                           ; 3 bytes @ 0x0
  1030                           
  1031  0020                     ___awmod@counter:	
  1032                           ; 4 bytes @ 0x0
  1033                           
  1034  0020                     ___ftmul@f1:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0020                     ___llmod@divisor:	
  1038                           ; 3 bytes @ 0x0
  1039                           
  1040                           
  1041                           ; 4 bytes @ 0x0
  1042  0020                     	ds	1
  1043  0021                     ___awmod@sign:	
  1044                           
  1045                           ; 1 bytes @ 0x1
  1046  0021                     	ds	2
  1047  0023                     ___ftmul@f2:	
  1048                           
  1049                           ; 3 bytes @ 0x3
  1050  0023                     	ds	1
  1051  0024                     ___ftadd@sign:	
  1052  0024                     ___llmod@dividend:	
  1053                           ; 1 bytes @ 0x4
  1054                           
  1055                           
  1056                           ; 4 bytes @ 0x4
  1057  0024                     	ds	1
  1058  0025                     ___ftadd@exp2:	
  1059                           
  1060                           ; 1 bytes @ 0x5
  1061  0025                     	ds	1
  1062  0026                     ??___ftmul:	
  1063  0026                     ___ftadd@exp1:	
  1064                           ; 0 bytes @ 0x6
  1065                           
  1066                           
  1067                           ; 1 bytes @ 0x6
  1068  0026                     	ds	1
  1069  0027                     ?___ftsub:	
  1070  0027                     ___ftsub@f2:	
  1071                           ; 3 bytes @ 0x7
  1072                           
  1073                           
  1074                           ; 3 bytes @ 0x7
  1075  0027                     	ds	1
  1076  0028                     ??___llmod:	
  1077                           
  1078                           ; 0 bytes @ 0x8
  1079  0028                     	ds	1
  1080  0029                     ___llmod@counter:	
  1081                           
  1082                           ; 1 bytes @ 0x9
  1083  0029                     	ds	1
  1084  002A                     ?_sprintf:	
  1085  002A                     sprintf@f:	
  1086                           ; 2 bytes @ 0xA
  1087                           
  1088  002A                     ___ftmul@exp:	
  1089                           ; 1 bytes @ 0xA
  1090                           
  1091  002A                     ___ftsub@f1:	
  1092                           ; 1 bytes @ 0xA
  1093                           
  1094                           
  1095                           ; 3 bytes @ 0xA
  1096  002A                     	ds	1
  1097  002B                     ___ftmul@f3_as_product:	
  1098                           
  1099                           ; 3 bytes @ 0xB
  1100  002B                     	ds	3
  1101  002E                     ___ftmul@cntr:	
  1102                           
  1103                           ; 1 bytes @ 0xE
  1104  002E                     	ds	1
  1105  002F                     ___ftmul@sign:	
  1106                           
  1107                           ; 1 bytes @ 0xF
  1108  002F                     	ds	1
  1109  0030                     ?___ftdiv:	
  1110  0030                     ?___fttol:	
  1111                           ; 3 bytes @ 0x10
  1112                           
  1113  0030                     ___ftdiv@f2:	
  1114                           ; 4 bytes @ 0x10
  1115                           
  1116  0030                     ___fttol@f1:	
  1117                           ; 3 bytes @ 0x10
  1118                           
  1119                           
  1120                           ; 3 bytes @ 0x10
  1121  0030                     	ds	3
  1122  0033                     ??_sprintf:	
  1123  0033                     ___ftdiv@f1:	
  1124                           ; 0 bytes @ 0x13
  1125                           
  1126                           
  1127                           ; 3 bytes @ 0x13
  1128  0033                     	ds	1
  1129  0034                     ??___fttol:	
  1130                           
  1131                           ; 0 bytes @ 0x14
  1132  0034                     	ds	2
  1133  0036                     ??___ftdiv:	
  1134                           
  1135                           ; 0 bytes @ 0x16
  1136  0036                     	ds	2
  1137  0038                     sprintf@flag:	
  1138  0038                     ___fttol@sign1:	
  1139                           ; 1 bytes @ 0x18
  1140                           
  1141                           
  1142                           ; 1 bytes @ 0x18
  1143  0038                     	ds	1
  1144  0039                     sprintf@ap:	
  1145  0039                     ___fttol@lval:	
  1146                           ; 1 bytes @ 0x19
  1147                           
  1148                           
  1149                           ; 4 bytes @ 0x19
  1150  0039                     	ds	1
  1151  003A                     ___ftdiv@cntr:	
  1152  003A                     sprintf@_val:	
  1153                           ; 1 bytes @ 0x1A
  1154                           
  1155                           
  1156                           ; 4 bytes @ 0x1A
  1157  003A                     	ds	1
  1158  003B                     ___ftdiv@f3:	
  1159                           
  1160                           ; 3 bytes @ 0x1B
  1161  003B                     	ds	2
  1162  003D                     ___fttol@exp1:	
  1163                           
  1164                           ; 1 bytes @ 0x1D
  1165  003D                     	ds	1
  1166  003E                     sprintf@sp:	
  1167  003E                     ___ftdiv@exp:	
  1168                           ; 1 bytes @ 0x1E
  1169                           
  1170                           
  1171                           ; 1 bytes @ 0x1E
  1172  003E                     	ds	1
  1173  003F                     ___ftdiv@sign:	
  1174  003F                     sprintf@width:	
  1175                           ; 1 bytes @ 0x1F
  1176                           
  1177                           
  1178                           ; 2 bytes @ 0x1F
  1179  003F                     	ds	2
  1180  0041                     sprintf@prec:	
  1181                           
  1182                           ; 2 bytes @ 0x21
  1183  0041                     	ds	2
  1184  0043                     sprintf@c:	
  1185                           
  1186                           ; 1 bytes @ 0x23
  1187  0043                     	ds	1
  1188  0044                     ?_ftoa:	
  1189  0044                     ftoa@f:	
  1190                           ; 1 bytes @ 0x24
  1191                           
  1192                           
  1193                           ; 3 bytes @ 0x24
  1194  0044                     	ds	3
  1195  0047                     ftoa@status:	
  1196                           
  1197                           ; 1 bytes @ 0x27
  1198  0047                     	ds	1
  1199  0048                     ??_ftoa:	
  1200                           
  1201                           ; 0 bytes @ 0x28
  1202  0048                     	ds	1
  1203  0049                     ftoa@rem:	
  1204                           
  1205                           ; 4 bytes @ 0x29
  1206  0049                     	ds	4
  1207  004D                     ftoa@l:	
  1208                           
  1209                           ; 4 bytes @ 0x2D
  1210  004D                     	ds	4
  1211  0051                     ftoa@cp:	
  1212                           
  1213                           ; 1 bytes @ 0x31
  1214  0051                     	ds	1
  1215  0052                     ??_ISR:	
  1216                           
  1217                           ; 0 bytes @ 0x32
  1218  0052                     	ds	8
  1219                           
  1220                           	psect	maintext
  1221  169D                     __pmaintext:	
  1222 ;;
  1223 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1224 ;;
  1225 ;; *************** function _main *****************
  1226 ;; Defined at:
  1227 ;;		line 312 in file "main.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;		None               void
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 17F/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0
  1244 ;;      Totals:         0       0       0       0       0
  1245 ;;Total ram usage:        0 bytes
  1246 ;; Hardware stack levels required when called:   12
  1247 ;; This function calls:
  1248 ;;		_ativar
  1249 ;;		_inicialize
  1250 ;; This function is called by:
  1251 ;;		Startup code after reset
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _main
  1257  169D                     _main:	
  1258                           
  1259                           ;main.c: 314: inicialize();
  1260                           
  1261                           ;incstack = 0
  1262 ;; hardware stack exceeded
  1263                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1264  169D  120A  158A  25A7  160A  118A  	fcall	_inicialize
  1265  16A2                     l3218:	
  1266                           ;main.c: 315: while (1) {
  1267                           
  1268                           
  1269                           ;main.c: 316: ativar();
  1270  16A2  120A  158A  23B8  160A  118A  	fcall	_ativar
  1271  16A7  2EA2               	goto	l3218
  1272  16A8                     __end_of_main:	
  1273                           
  1274                           	psect	text1
  1275  0DA7                     __ptext1:	
  1276 ;; *************** function _inicialize *****************
  1277 ;; Defined at:
  1278 ;;		line 265 in file "main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;		None               void
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1292 ;;      Params:         0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0
  1294 ;;      Temps:          0       0       0       3       0
  1295 ;;      Totals:         0       0       0       3       0
  1296 ;;Total ram usage:        3 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:   11
  1299 ;; This function calls:
  1300 ;;		_ADCInit
  1301 ;;		_LCDClear
  1302 ;;		_USARTInit
  1303 ;;		_init_lcd_4bit
  1304 ;;		_lcd_escreve_string
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           
  1311                           ;psect for function _inicialize
  1312  0DA7                     _inicialize:	
  1313                           
  1314                           ;main.c: 267: USARTInit(57600, 1);
  1315                           
  1316                           ;incstack = 0
  1317 ;; hardware stack exceeded
  1318                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1319  0DA7  3000               	movlw	0
  1320  0DA8  1683               	bsf	3,5	;RP0=1, select bank3
  1321  0DA9  1703               	bsf	3,6	;RP1=1, select bank3
  1322  0DAA  00A2               	movwf	(USARTInit@BaudRate+3)^(0+384)
  1323  0DAB  3000               	movlw	0
  1324  0DAC  00A1               	movwf	(USARTInit@BaudRate+2)^(0+384)
  1325  0DAD  30E1               	movlw	225
  1326  0DAE  00A0               	movwf	(USARTInit@BaudRate+1)^(0+384)
  1327  0DAF  3000               	movlw	0
  1328  0DB0  009F               	movwf	USARTInit@BaudRate^(0+384)
  1329  0DB1  3001               	movlw	1
  1330  0DB2  00A3               	movwf	USARTInit@Mode^(0+384)
  1331  0DB3  3000               	movlw	0
  1332  0DB4  00A4               	movwf	(USARTInit@Mode^(0+384)+1)
  1333  0DB5  120A  158A  2537  120A  158A  	fcall	_USARTInit
  1334                           
  1335                           ;main.c: 269: TRISA = 0b11111111;
  1336  0DBA  30FF               	movlw	255
  1337  0DBB  1683               	bsf	3,5	;RP0=1, select bank1
  1338  0DBC  1303               	bcf	3,6	;RP1=0, select bank1
  1339  0DBD  0085               	movwf	5	;volatile
  1340                           
  1341                           ;main.c: 270: PORTAbits.RA0 = 0;
  1342  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  1344  0DC0  1005               	bcf	5,0	;volatile
  1345                           
  1346                           ;main.c: 271: TRISDbits.TRISD2 = 0;
  1347  0DC1  1683               	bsf	3,5	;RP0=1, select bank1
  1348  0DC2  1303               	bcf	3,6	;RP1=0, select bank1
  1349  0DC3  1108               	bcf	8,2	;volatile
  1350                           
  1351                           ;main.c: 272: PORTDbits.RD2 = 1;
  1352  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  1353  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  1354  0DC6  1508               	bsf	8,2	;volatile
  1355                           
  1356                           ;main.c: 273: TRISDbits.TRISD3 = 0;
  1357  0DC7  1683               	bsf	3,5	;RP0=1, select bank1
  1358  0DC8  1303               	bcf	3,6	;RP1=0, select bank1
  1359  0DC9  1188               	bcf	8,3	;volatile
  1360                           
  1361                           ;main.c: 274: PORTDbits.RD3 = 0;
  1362  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0DCC  1188               	bcf	8,3	;volatile
  1365                           
  1366                           ;main.c: 276: TRISCbits.TRISC0 = 1;
  1367  0DCD  1683               	bsf	3,5	;RP0=1, select bank1
  1368  0DCE  1303               	bcf	3,6	;RP1=0, select bank1
  1369  0DCF  1407               	bsf	7,0	;volatile
  1370                           
  1371                           ;main.c: 277: TRISCbits.TRISC1 = 1;
  1372  0DD0  1487               	bsf	7,1	;volatile
  1373                           
  1374                           ;main.c: 278: TRISCbits.TRISC2 = 1;
  1375  0DD1  1507               	bsf	7,2	;volatile
  1376                           
  1377                           ;main.c: 279: TRISCbits.TRISC3 = 1;
  1378  0DD2  1587               	bsf	7,3	;volatile
  1379                           
  1380                           ;main.c: 280: PORTCbits.RC3 = 0;
  1381  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0DD5  1187               	bcf	7,3	;volatile
  1384                           
  1385                           ;main.c: 281: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1386  0DD6  3033               	movlw	51
  1387  0DD7  1683               	bsf	3,5	;RP0=1, select bank3
  1388  0DD8  1703               	bsf	3,6	;RP1=1, select bank3
  1389  0DD9  00AD               	movwf	(??_inicialize^(0+384)+2)
  1390  0DDA  30BC               	movlw	188
  1391  0DDB  00AC               	movwf	(??_inicialize^(0+384)+1)
  1392  0DDC  3010               	movlw	16
  1393  0DDD  00AB               	movwf	??_inicialize^(0+384)
  1394  0DDE                     u4357:	
  1395  0DDE  0BAB               	decfsz	??_inicialize^(0+384),f
  1396  0DDF  2DDE               	goto	u4357
  1397  0DE0  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1398  0DE1  2DDE               	goto	u4357
  1399  0DE2  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1400  0DE3  2DDE               	goto	u4357
  1401                           
  1402                           ;main.c: 282: init_lcd_4bit();
  1403  0DE4  120A  118A  2799  120A  158A  	fcall	_init_lcd_4bit
  1404                           
  1405                           ;main.c: 283: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1406  0DE9  3033               	movlw	51
  1407  0DEA  1683               	bsf	3,5	;RP0=1, select bank3
  1408  0DEB  1703               	bsf	3,6	;RP1=1, select bank3
  1409  0DEC  00AD               	movwf	(??_inicialize^(0+384)+2)
  1410  0DED  30BC               	movlw	188
  1411  0DEE  00AC               	movwf	(??_inicialize^(0+384)+1)
  1412  0DEF  3010               	movlw	16
  1413  0DF0  00AB               	movwf	??_inicialize^(0+384)
  1414  0DF1                     u4367:	
  1415  0DF1  0BAB               	decfsz	??_inicialize^(0+384),f
  1416  0DF2  2DF1               	goto	u4367
  1417  0DF3  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1418  0DF4  2DF1               	goto	u4367
  1419  0DF5  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1420  0DF6  2DF1               	goto	u4367
  1421                           
  1422                           ;main.c: 284: INTCONbits.PEIE = 1;
  1423  0DF7  170B               	bsf	11,6	;volatile
  1424                           
  1425                           ;main.c: 285: INTCONbits.GIE = 1;
  1426  0DF8  178B               	bsf	11,7	;volatile
  1427                           
  1428                           ;main.c: 286: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1429  0DF9  301A               	movlw	26
  1430  0DFA  1683               	bsf	3,5	;RP0=1, select bank3
  1431  0DFB  1703               	bsf	3,6	;RP1=1, select bank3
  1432  0DFC  00AD               	movwf	(??_inicialize^(0+384)+2)
  1433  0DFD  305E               	movlw	94
  1434  0DFE  00AC               	movwf	(??_inicialize^(0+384)+1)
  1435  0DFF  3086               	movlw	134
  1436  0E00  00AB               	movwf	??_inicialize^(0+384)
  1437  0E01                     u4377:	
  1438  0E01  0BAB               	decfsz	??_inicialize^(0+384),f
  1439  0E02  2E01               	goto	u4377
  1440  0E03  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1441  0E04  2E01               	goto	u4377
  1442  0E05  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1443  0E06  2E01               	goto	u4377
  1444  0E07  0000               	nop
  1445                           
  1446                           ;main.c: 287: ADCInit();
  1447  0E08  160A  118A  26D7  120A  158A  	fcall	_ADCInit
  1448                           
  1449                           ;main.c: 288: lcd_escreve_string("\fLoading PIC...");
  1450  0E0D  3072               	movlw	low (STR_6-__stringbase)
  1451  0E0E  1683               	bsf	3,5	;RP0=1, select bank3
  1452  0E0F  1703               	bsf	3,6	;RP1=1, select bank3
  1453  0E10  009C               	movwf	lcd_escreve_string@y^(0+384)
  1454  0E11  3080               	movlw	128
  1455  0E12  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1456  0E13  120A  158A  2106  120A  158A  	fcall	_lcd_escreve_string
  1457                           
  1458                           ;main.c: 289: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1459  0E18  307F               	movlw	127
  1460  0E19  1683               	bsf	3,5	;RP0=1, select bank3
  1461  0E1A  1703               	bsf	3,6	;RP1=1, select bank3
  1462  0E1B  00AD               	movwf	(??_inicialize^(0+384)+2)
  1463  0E1C  30D4               	movlw	212
  1464  0E1D  00AC               	movwf	(??_inicialize^(0+384)+1)
  1465  0E1E  30AE               	movlw	174
  1466  0E1F  00AB               	movwf	??_inicialize^(0+384)
  1467  0E20                     u4387:	
  1468  0E20  0BAB               	decfsz	??_inicialize^(0+384),f
  1469  0E21  2E20               	goto	u4387
  1470  0E22  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1471  0E23  2E20               	goto	u4387
  1472  0E24  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1473  0E25  2E20               	goto	u4387
  1474  0E26  2E27               	nop2
  1475                           
  1476                           ;main.c: 290: LCDClear();
  1477  0E27  120A  158A  21E0   	fcall	_LCDClear
  1478  0E2A  0008               	return
  1479  0E2B                     __end_of_inicialize:	
  1480                           
  1481                           	psect	text2
  1482  0906                     __ptext2:	
  1483 ;; *************** function _lcd_escreve_string *****************
  1484 ;; Defined at:
  1485 ;;		line 168 in file "lcd_4bit.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1488 ;;		 -> ftoa@buf(17), STR_6(16), STR_4(2), STR_2(7), 
  1489 ;;		 -> ISR@aux(16), 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;		None
  1492 ;; Return value:  Size  Location     Type
  1493 ;;		None               void
  1494 ;; Registers used:
  1495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1501 ;;      Params:         0       0       0       2       0
  1502 ;;      Locals:         0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0
  1504 ;;      Totals:         0       0       0       2       0
  1505 ;;Total ram usage:        2 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:   10
  1508 ;; This function calls:
  1509 ;;		_lcd_putc
  1510 ;; This function is called by:
  1511 ;;		_inicialize
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           
  1516                           ;psect for function _lcd_escreve_string
  1517  0906                     _lcd_escreve_string:	
  1518  0906                     l3110:	
  1519                           ;lcd_4bit.c: 170: while(*y!='\0')
  1520                           
  1521                           ;incstack = 0
  1522 ;; hardware stack exceeded
  1523                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1524                           
  1525  0906  1683               	bsf	3,5	;RP0=1, select bank3
  1526  0907  1703               	bsf	3,6	;RP1=1, select bank3
  1527  0908  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1528  0909  1283               	bcf	3,5	;RP0=0, select bank0
  1529  090A  1303               	bcf	3,6	;RP1=0, select bank0
  1530  090B  00FF               	movwf	127
  1531  090C  1683               	bsf	3,5	;RP0=1, select bank3
  1532  090D  1703               	bsf	3,6	;RP1=1, select bank3
  1533  090E  081C               	movf	lcd_escreve_string@y^(0+384),w
  1534  090F  0084               	movwf	4
  1535  0910  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0911  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0912  120A  158A  2000  120A  158A  	fcall	stringtab
  1538  0917  3800               	iorlw	0
  1539  0918  1903               	btfsc	3,2
  1540  0919  0008               	return
  1541                           
  1542                           ;lcd_4bit.c: 171: {
  1543                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1544  091A  1683               	bsf	3,5	;RP0=1, select bank3
  1545  091B  1703               	bsf	3,6	;RP1=1, select bank3
  1546  091C  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1547  091D  1283               	bcf	3,5	;RP0=0, select bank0
  1548  091E  1303               	bcf	3,6	;RP1=0, select bank0
  1549  091F  00FF               	movwf	127
  1550  0920  1683               	bsf	3,5	;RP0=1, select bank3
  1551  0921  1703               	bsf	3,6	;RP1=1, select bank3
  1552  0922  081C               	movf	lcd_escreve_string@y^(0+384),w
  1553  0923  0084               	movwf	4
  1554  0924  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0925  1303               	bcf	3,6	;RP1=0, select bank0
  1556  0926  120A  158A  2000  120A  158A  	fcall	stringtab
  1557  092B  120A  158A  2220  120A  158A  	fcall	_lcd_putc
  1558                           
  1559                           ;lcd_4bit.c: 173: y++;
  1560  0930  3001               	movlw	1
  1561  0931  1683               	bsf	3,5	;RP0=1, select bank3
  1562  0932  1703               	bsf	3,6	;RP1=1, select bank3
  1563  0933  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1564  0934  1803               	skipnc
  1565  0935  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1566  0936  2906               	goto	l3110
  1567  0937                     __end_of_lcd_escreve_string:	
  1568                           
  1569                           	psect	text3
  1570  0A20                     __ptext3:	
  1571 ;; *************** function _lcd_putc *****************
  1572 ;; Defined at:
  1573 ;;		line 82 in file "lcd_4bit.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  c               1    wreg     unsigned char 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  c               1   11[BANK3 ] unsigned char 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;		None               void
  1580 ;; Registers used:
  1581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1587 ;;      Params:         0       0       0       0       0
  1588 ;;      Locals:         0       0       0       1       0
  1589 ;;      Temps:          0       0       0       2       0
  1590 ;;      Totals:         0       0       0       3       0
  1591 ;;Total ram usage:        3 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    9
  1594 ;; This function calls:
  1595 ;;		_lcd_envia_byte
  1596 ;;		_lcd_gotoxy
  1597 ;; This function is called by:
  1598 ;;		_lcd_escreve_string
  1599 ;;		_lcd_escreve_p
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           
  1604                           ;psect for function _lcd_putc
  1605  0A20                     _lcd_putc:	
  1606                           
  1607                           ;incstack = 0
  1608 ;; hardware stack exceeded
  1609                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1610                           ;lcd_putc@c stored from wreg
  1611  0A20  1683               	bsf	3,5	;RP0=1, select bank3
  1612  0A21  1703               	bsf	3,6	;RP1=1, select bank3
  1613  0A22  009B               	movwf	lcd_putc@c^(0+384)
  1614                           
  1615                           ;lcd_4bit.c: 84: switch(c)
  1616  0A23  2A59               	goto	l3008
  1617  0A24                     l2996:	
  1618                           ;lcd_4bit.c: 85: {
  1619                           ;lcd_4bit.c: 86: case '\f':
  1620                           
  1621                           
  1622                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1623  0A24  0192               	clrf	lcd_envia_byte@n^(0+384)
  1624  0A25  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1625  0A26  3000               	movlw	0
  1626  0A27  120A  158A  2137  120A  158A  	fcall	_lcd_envia_byte
  1627                           
  1628                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1629  0A2C  300D               	movlw	13
  1630  0A2D  1683               	bsf	3,5	;RP0=1, select bank3
  1631  0A2E  1703               	bsf	3,6	;RP1=1, select bank3
  1632  0A2F  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1633  0A30  30FB               	movlw	251
  1634  0A31  0099               	movwf	??_lcd_putc^(0+384)
  1635  0A32                     u4397:	
  1636  0A32  0B99               	decfsz	??_lcd_putc^(0+384),f
  1637  0A33  2A32               	goto	u4397
  1638  0A34  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1639  0A35  2A32               	goto	u4397
  1640  0A36  2A37               	nop2
  1641                           
  1642                           ;lcd_4bit.c: 89: break;
  1643  0A37  0008               	return
  1644  0A38                     l3000:	
  1645                           ;lcd_4bit.c: 91: case '\n':
  1646                           
  1647                           
  1648                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1649  0A38  3002               	movlw	2
  1650  0A39  1683               	bsf	3,5	;RP0=1, select bank3
  1651  0A3A  1703               	bsf	3,6	;RP1=1, select bank3
  1652  0A3B  0099               	movwf	??_lcd_putc^(0+384)
  1653  0A3C  0819               	movf	??_lcd_putc^(0+384),w
  1654  0A3D  0095               	movwf	lcd_gotoxy@y^(0+384)
  1655  0A3E  3001               	movlw	1
  1656  0A3F  160A  118A  273B   	fcall	_lcd_gotoxy
  1657                           
  1658                           ;lcd_4bit.c: 93: break;
  1659  0A42  0008               	return
  1660  0A43                     l3002:	
  1661                           ;lcd_4bit.c: 95: case '\b':
  1662                           
  1663                           
  1664                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1665  0A43  3010               	movlw	16
  1666  0A44  1683               	bsf	3,5	;RP0=1, select bank3
  1667  0A45  1703               	bsf	3,6	;RP1=1, select bank3
  1668  0A46  0099               	movwf	??_lcd_putc^(0+384)
  1669  0A47  0819               	movf	??_lcd_putc^(0+384),w
  1670  0A48  0092               	movwf	lcd_envia_byte@n^(0+384)
  1671  0A49  3000               	movlw	0
  1672  0A4A  120A  158A  2137   	fcall	_lcd_envia_byte
  1673                           
  1674                           ;lcd_4bit.c: 97: break;
  1675  0A4D  0008               	return
  1676  0A4E                     l3004:	
  1677                           ;lcd_4bit.c: 99: default:
  1678                           
  1679                           
  1680                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1681  0A4E  1683               	bsf	3,5	;RP0=1, select bank3
  1682  0A4F  1703               	bsf	3,6	;RP1=1, select bank3
  1683  0A50  081B               	movf	lcd_putc@c^(0+384),w
  1684  0A51  0099               	movwf	??_lcd_putc^(0+384)
  1685  0A52  0819               	movf	??_lcd_putc^(0+384),w
  1686  0A53  0092               	movwf	lcd_envia_byte@n^(0+384)
  1687  0A54  3001               	movlw	1
  1688  0A55  120A  158A  2137   	fcall	_lcd_envia_byte
  1689                           
  1690                           ;lcd_4bit.c: 102: }
  1691                           
  1692                           ;lcd_4bit.c: 101: break;
  1693  0A58  0008               	return
  1694  0A59                     l3008:	
  1695  0A59  1683               	bsf	3,5	;RP0=1, select bank3
  1696  0A5A  1703               	bsf	3,6	;RP1=1, select bank3
  1697  0A5B  081B               	movf	lcd_putc@c^(0+384),w
  1698                           
  1699                           ; Switch size 1, requested type "space"
  1700                           ; Number of cases is 3, Range of values is 8 to 12
  1701                           ; switch strategies available:
  1702                           ; Name         Instructions Cycles
  1703                           ; simple_byte           10     6 (average)
  1704                           ; direct_byte           26    11 (fixed)
  1705                           ; jumptable            263     9 (fixed)
  1706                           ;	Chosen strategy is simple_byte
  1707  0A5C  3A08               	xorlw	8	; case 8
  1708  0A5D  1903               	skipnz
  1709  0A5E  2A43               	goto	l3002
  1710  0A5F  3A02               	xorlw	2	; case 10
  1711  0A60  1903               	skipnz
  1712  0A61  2A38               	goto	l3000
  1713  0A62  3A06               	xorlw	6	; case 12
  1714  0A63  1903               	skipnz
  1715  0A64  2A24               	goto	l2996
  1716  0A65  2A4E               	goto	l3004
  1717  0A66  0008               	return
  1718  0A67                     __end_of_lcd_putc:	
  1719                           
  1720                           	psect	text4
  1721  173B                     __ptext4:	
  1722 ;; *************** function _lcd_gotoxy *****************
  1723 ;; Defined at:
  1724 ;;		line 70 in file "lcd_4bit.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  x               1    wreg     unsigned char 
  1727 ;;  y               1    5[BANK3 ] unsigned char 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  x               1    7[BANK3 ] unsigned char 
  1730 ;;  address         1    8[BANK3 ] unsigned char 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, pclath, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1740 ;;      Params:         0       0       0       1       0
  1741 ;;      Locals:         0       0       0       2       0
  1742 ;;      Temps:          0       0       0       1       0
  1743 ;;      Totals:         0       0       0       4       0
  1744 ;;Total ram usage:        4 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    8
  1747 ;; This function calls:
  1748 ;;		_lcd_envia_byte
  1749 ;; This function is called by:
  1750 ;;		_lcd_putc
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           
  1755                           ;psect for function _lcd_gotoxy
  1756  173B                     _lcd_gotoxy:	
  1757                           
  1758                           ;incstack = 0
  1759 ;; hardware stack exceeded
  1760                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1761                           ;lcd_gotoxy@x stored from wreg
  1762  173B  1683               	bsf	3,5	;RP0=1, select bank3
  1763  173C  1703               	bsf	3,6	;RP1=1, select bank3
  1764  173D  0097               	movwf	lcd_gotoxy@x^(0+384)
  1765                           
  1766                           ;lcd_4bit.c: 72: unsigned char address;
  1767                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1768  173E  0815               	movf	lcd_gotoxy@y^(0+384),w
  1769  173F  3A01               	xorlw	1
  1770  1740  1903               	skipnz
  1771  1741  2F47               	goto	l2988
  1772  1742  3040               	movlw	64
  1773  1743  0096               	movwf	??_lcd_gotoxy^(0+384)
  1774  1744  0816               	movf	??_lcd_gotoxy^(0+384),w
  1775  1745  0098               	movwf	lcd_gotoxy@address^(0+384)
  1776  1746  2F48               	goto	l2990
  1777  1747                     l2988:	
  1778                           
  1779                           ;lcd_4bit.c: 75: else address=0;
  1780  1747  0198               	clrf	lcd_gotoxy@address^(0+384)
  1781  1748                     l2990:	
  1782                           
  1783                           ;lcd_4bit.c: 77: address += x-1;
  1784  1748  0817               	movf	lcd_gotoxy@x^(0+384),w
  1785  1749  3EFF               	addlw	255
  1786  174A  0096               	movwf	??_lcd_gotoxy^(0+384)
  1787  174B  0816               	movf	??_lcd_gotoxy^(0+384),w
  1788  174C  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1789                           
  1790                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1791  174D  0818               	movf	lcd_gotoxy@address^(0+384),w
  1792  174E  3880               	iorlw	128
  1793  174F  0096               	movwf	??_lcd_gotoxy^(0+384)
  1794  1750  0816               	movf	??_lcd_gotoxy^(0+384),w
  1795  1751  0092               	movwf	lcd_envia_byte@n^(0+384)
  1796  1752  3000               	movlw	0
  1797  1753  120A  158A  2137   	fcall	_lcd_envia_byte
  1798  1756  0008               	return
  1799  1757                     __end_of_lcd_gotoxy:	
  1800                           
  1801                           	psect	text5
  1802  0799                     __ptext5:	
  1803 ;; *************** function _init_lcd_4bit *****************
  1804 ;; Defined at:
  1805 ;;		line 6 in file "lcd_4bit.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  i               1    7[BANK3 ] unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;		None               void
  1812 ;; Registers used:
  1813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1819 ;;      Params:         0       0       0       0       0
  1820 ;;      Locals:         0       0       0       1       0
  1821 ;;      Temps:          0       0       0       2       0
  1822 ;;      Totals:         0       0       0       3       0
  1823 ;;Total ram usage:        3 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    8
  1826 ;; This function calls:
  1827 ;;		_lcd_envia_byte
  1828 ;;		_lcd_envia_nibble
  1829 ;; This function is called by:
  1830 ;;		_inicialize
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           
  1835                           ;psect for function _init_lcd_4bit
  1836  0799                     _init_lcd_4bit:	
  1837                           
  1838                           ;lcd_4bit.c: 8: unsigned char i;
  1839                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1840                           
  1841                           ;incstack = 0
  1842 ;; hardware stack exceeded
  1843                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1844  0799  1683               	bsf	3,5	;RP0=1, select bank1
  1845  079A  1303               	bcf	3,6	;RP1=0, select bank1
  1846  079B  1206               	bcf	6,4	;volatile
  1847                           
  1848                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1849  079C  1286               	bcf	6,5	;volatile
  1850                           
  1851                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1852  079D  1283               	bcf	3,5	;RP0=0, select bank0
  1853  079E  1303               	bcf	3,6	;RP1=0, select bank0
  1854  079F  1206               	bcf	6,4	;volatile
  1855                           
  1856                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1857  07A0  1286               	bcf	6,5	;volatile
  1858                           
  1859                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1860  07A1  1683               	bsf	3,5	;RP0=1, select bank1
  1861  07A2  1303               	bcf	3,6	;RP1=0, select bank1
  1862  07A3  1006               	bcf	6,0	;volatile
  1863                           
  1864                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1865  07A4  1086               	bcf	6,1	;volatile
  1866                           
  1867                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1868  07A5  1106               	bcf	6,2	;volatile
  1869                           
  1870                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1871  07A6  1186               	bcf	6,3	;volatile
  1872                           
  1873                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1874  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  1875  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  1876  07A9  1006               	bcf	6,0	;volatile
  1877                           
  1878                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1879  07AA  1086               	bcf	6,1	;volatile
  1880                           
  1881                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1882  07AB  1106               	bcf	6,2	;volatile
  1883                           
  1884                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1885  07AC  1186               	bcf	6,3	;volatile
  1886                           
  1887                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1888  07AD  3062               	movlw	98
  1889  07AE  1683               	bsf	3,5	;RP0=1, select bank3
  1890  07AF  1703               	bsf	3,6	;RP1=1, select bank3
  1891  07B0  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1892  07B1  3065               	movlw	101
  1893  07B2  0095               	movwf	??_init_lcd_4bit^(0+384)
  1894  07B3                     u4407:	
  1895  07B3  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1896  07B4  2FB3               	goto	u4407
  1897  07B5  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1898  07B6  2FB3               	goto	u4407
  1899  07B7  2FB8               	nop2
  1900                           
  1901                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1902  07B8  1683               	bsf	3,5	;RP0=1, select bank3
  1903  07B9  1703               	bsf	3,6	;RP1=1, select bank3
  1904  07BA  0197               	clrf	init_lcd_4bit@i^(0+384)
  1905  07BB  3003               	movlw	3
  1906  07BC  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1907  07BD  1803               	btfsc	3,0
  1908  07BE  2FDA               	goto	l3130
  1909  07BF                     l3122:	
  1910                           
  1911                           ;lcd_4bit.c: 26: {
  1912                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1913  07BF  3003               	movlw	3
  1914  07C0  120A  158A  2304  120A  118A  	fcall	_lcd_envia_nibble
  1915                           
  1916                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1917  07C5  3021               	movlw	33
  1918  07C6  1683               	bsf	3,5	;RP0=1, select bank3
  1919  07C7  1703               	bsf	3,6	;RP1=1, select bank3
  1920  07C8  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1921  07C9  3076               	movlw	118
  1922  07CA  0095               	movwf	??_init_lcd_4bit^(0+384)
  1923  07CB                     u4417:	
  1924  07CB  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1925  07CC  2FCB               	goto	u4417
  1926  07CD  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1927  07CE  2FCB               	goto	u4417
  1928  07CF  0000               	nop
  1929  07D0  3001               	movlw	1
  1930  07D1  1683               	bsf	3,5	;RP0=1, select bank3
  1931  07D2  1703               	bsf	3,6	;RP1=1, select bank3
  1932  07D3  0095               	movwf	??_init_lcd_4bit^(0+384)
  1933  07D4  0815               	movf	??_init_lcd_4bit^(0+384),w
  1934  07D5  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1935  07D6  3003               	movlw	3
  1936  07D7  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1937  07D8  1C03               	skipc
  1938  07D9  2FBF               	goto	l3122
  1939  07DA                     l3130:	
  1940                           
  1941                           ;lcd_4bit.c: 29: }
  1942                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1943  07DA  3002               	movlw	2
  1944  07DB  120A  158A  2304  120A  118A  	fcall	_lcd_envia_nibble
  1945                           
  1946                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1947  07E0  1683               	bsf	3,5	;RP0=1, select bank3
  1948  07E1  1703               	bsf	3,6	;RP1=1, select bank3
  1949  07E2  0197               	clrf	init_lcd_4bit@i^(0+384)
  1950  07E3                     L1:	
  1951  07E3  3004               	movlw	4
  1952  07E4  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1953  07E5  1803               	btfsc	3,0
  1954  07E6  0008               	return
  1955                           
  1956                           ;lcd_4bit.c: 33: {
  1957                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  1958  07E7  0817               	movf	init_lcd_4bit@i^(0+384),w
  1959  07E8  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  1960  07E9  0084               	movwf	4
  1961  07EA  120A  158A  200A  120A  118A  	fcall	stringdir
  1962  07EF  0095               	movwf	??_init_lcd_4bit^(0+384)
  1963  07F0  0815               	movf	??_init_lcd_4bit^(0+384),w
  1964  07F1  0092               	movwf	lcd_envia_byte@n^(0+384)
  1965  07F2  3000               	movlw	0
  1966  07F3  120A  158A  2137  120A  118A  	fcall	_lcd_envia_byte
  1967  07F8  3001               	movlw	1
  1968  07F9  1683               	bsf	3,5	;RP0=1, select bank3
  1969  07FA  1703               	bsf	3,6	;RP1=1, select bank3
  1970  07FB  0095               	movwf	??_init_lcd_4bit^(0+384)
  1971  07FC  0815               	movf	??_init_lcd_4bit^(0+384),w
  1972  07FD  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1973  07FE  2FE3               	goto	L1
  1974  07FF                     __end_of_init_lcd_4bit:	
  1975                           
  1976                           	psect	text6
  1977  0D37                     __ptext6:	
  1978 ;; *************** function _USARTInit *****************
  1979 ;; Defined at:
  1980 ;;		line 36 in file "main.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  BaudRate        4   15[BANK3 ] long 
  1983 ;;  Mode            2   19[BANK3 ] int 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  BR              2   25[BANK3 ] int 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;		None               void
  1988 ;; Registers used:
  1989 ;;		wreg, status,2, status,0, pclath, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1995 ;;      Params:         0       0       0       6       0
  1996 ;;      Locals:         0       0       0       2       0
  1997 ;;      Temps:          0       0       0       4       0
  1998 ;;      Totals:         0       0       0      12       0
  1999 ;;Total ram usage:       12 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    7
  2002 ;; This function calls:
  2003 ;;		___aldiv
  2004 ;; This function is called by:
  2005 ;;		_inicialize
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           
  2010                           ;psect for function _USARTInit
  2011  0D37                     _USARTInit:	
  2012                           
  2013                           ;main.c: 37: int BR = 0;
  2014                           
  2015                           ;incstack = 0
  2016 ;; hardware stack exceeded
  2017                           ; Regs used in _USARTInit: [wreg+status,2+status,0+pclath+cstack]
  2018  0D37  1683               	bsf	3,5	;RP0=1, select bank3
  2019  0D38  1703               	bsf	3,6	;RP1=1, select bank3
  2020  0D39  01A9               	clrf	USARTInit@BR^(0+384)
  2021  0D3A  01AA               	clrf	(USARTInit@BR+1)^(0+384)
  2022                           
  2023                           ;main.c: 40: if (Mode == 0)
  2024  0D3B  0824               	movf	(USARTInit@Mode+1)^(0+384),w
  2025  0D3C  0423               	iorwf	USARTInit@Mode^(0+384),w
  2026  0D3D  1D03               	skipz
  2027  0D3E  2D51               	goto	l3058
  2028                           
  2029                           ;main.c: 41: {
  2030                           ;main.c: 42: BR = (20000000 / (64 * BaudRate)) - 1;
  2031  0D3F  081F               	movf	USARTInit@BaudRate^(0+384),w
  2032  0D40  00A5               	movwf	??_USARTInit^(0+384)
  2033  0D41  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2034  0D42  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2035  0D43  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2036  0D44  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2037  0D45  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2038  0D46  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2039  0D47  3006               	movlw	6
  2040  0D48                     u4035:	
  2041  0D48  1003               	clrc
  2042  0D49  0DA5               	rlf	??_USARTInit^(0+384),f
  2043  0D4A  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2044  0D4B  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2045  0D4C  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2046  0D4D  3EFF               	addlw	-1
  2047  0D4E  1D03               	skipz
  2048  0D4F  2D48               	goto	u4035
  2049  0D50  2D64               	goto	L2
  2050  0D51                     l3058:	
  2051                           ;main.c: 44: } else
  2052                           
  2053                           ;main.c: 43: SPBRG = BR;
  2054                           
  2055                           
  2056                           ;main.c: 45: {
  2057                           ;main.c: 46: BR = (20000000 / (16 * BaudRate)) - 1;
  2058  0D51  1683               	bsf	3,5	;RP0=1, select bank3
  2059  0D52  1703               	bsf	3,6	;RP1=1, select bank3
  2060  0D53  081F               	movf	USARTInit@BaudRate^(0+384),w
  2061  0D54  00A5               	movwf	??_USARTInit^(0+384)
  2062  0D55  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2063  0D56  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2064  0D57  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2065  0D58  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2066  0D59  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2067  0D5A  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2068  0D5B  3004               	movlw	4
  2069  0D5C                     u4045:	
  2070  0D5C  1003               	clrc
  2071  0D5D  0DA5               	rlf	??_USARTInit^(0+384),f
  2072  0D5E  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2073  0D5F  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2074  0D60  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2075  0D61  3EFF               	addlw	-1
  2076  0D62  1D03               	skipz
  2077  0D63  2D5C               	goto	u4045
  2078  0D64                     L2:	
  2079  0D64  0828               	movf	(??_USARTInit+3)^(0+384),w
  2080  0D65  0093               	movwf	(___aldiv@divisor+3)^(0+384)
  2081  0D66  0827               	movf	(??_USARTInit+2)^(0+384),w
  2082  0D67  0092               	movwf	(___aldiv@divisor+2)^(0+384)
  2083  0D68  0826               	movf	(??_USARTInit+1)^(0+384),w
  2084  0D69  0091               	movwf	(___aldiv@divisor+1)^(0+384)
  2085  0D6A  0825               	movf	??_USARTInit^(0+384),w
  2086  0D6B  0090               	movwf	___aldiv@divisor^(0+384)
  2087  0D6C  3001               	movlw	1
  2088  0D6D  0097               	movwf	(___aldiv@dividend+3)^(0+384)
  2089  0D6E  3031               	movlw	49
  2090  0D6F  0096               	movwf	(___aldiv@dividend+2)^(0+384)
  2091  0D70  302D               	movlw	45
  2092  0D71  0095               	movwf	(___aldiv@dividend+1)^(0+384)
  2093  0D72  3000               	movlw	0
  2094  0D73  0094               	movwf	___aldiv@dividend^(0+384)
  2095  0D74  120A  158A  26B9  120A  158A  	fcall	___aldiv
  2096  0D79  1683               	bsf	3,5	;RP0=1, select bank3
  2097  0D7A  1703               	bsf	3,6	;RP1=1, select bank3
  2098  0D7B  0810               	movf	?___aldiv^(0+384),w
  2099  0D7C  3EFF               	addlw	255
  2100  0D7D  00A9               	movwf	USARTInit@BR^(0+384)
  2101  0D7E  0811               	movf	(?___aldiv^(0+384)+1),w
  2102  0D7F  1803               	skipnc
  2103  0D80  3E01               	addlw	1
  2104  0D81  3EFF               	addlw	255
  2105  0D82  00AA               	movwf	(USARTInit@BR+1)^(0+384)
  2106                           
  2107                           ;main.c: 47: SPBRG = BR;
  2108  0D83  0829               	movf	USARTInit@BR^(0+384),w
  2109  0D84  1683               	bsf	3,5	;RP0=1, select bank1
  2110  0D85  1303               	bcf	3,6	;RP1=0, select bank1
  2111  0D86  0099               	movwf	25	;volatile
  2112                           
  2113                           ;main.c: 48: }
  2114                           ;main.c: 51: TXSTAbits.CSRC = 1;
  2115  0D87  1798               	bsf	24,7	;volatile
  2116                           
  2117                           ;main.c: 52: TXSTAbits.TX9 = 0;
  2118  0D88  1318               	bcf	24,6	;volatile
  2119                           
  2120                           ;main.c: 53: TXSTAbits.TXEN = 1;
  2121  0D89  1698               	bsf	24,5	;volatile
  2122                           
  2123                           ;main.c: 54: TXSTAbits.SYNC = 0;
  2124  0D8A  1218               	bcf	24,4	;volatile
  2125                           
  2126                           ;main.c: 55: TXSTAbits.BRGH = Mode;
  2127  0D8B  1683               	bsf	3,5	;RP0=1, select bank3
  2128  0D8C  1703               	bsf	3,6	;RP1=1, select bank3
  2129  0D8D  0823               	movf	USARTInit@Mode^(0+384),w
  2130  0D8E  1683               	bsf	3,5	;RP0=1, select bank1
  2131  0D8F  1303               	bcf	3,6	;RP1=0, select bank1
  2132  0D90  1D03               	skipz
  2133  0D91  1518               	bsf	24,2	;volatile
  2134  0D92  1903               	skipnz
  2135  0D93  1118               	bcf	24,2	;volatile
  2136                           
  2137                           ;main.c: 56: TXSTAbits.TRMT = 1;
  2138  0D94  1498               	bsf	24,1	;volatile
  2139                           
  2140                           ;main.c: 57: TXSTAbits.TX9D = 0;
  2141  0D95  1018               	bcf	24,0	;volatile
  2142                           
  2143                           ;main.c: 60: RCSTAbits.SPEN = 1;
  2144  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0D98  1798               	bsf	24,7	;volatile
  2147                           
  2148                           ;main.c: 61: RCSTAbits.RX9 = 0;
  2149  0D99  1318               	bcf	24,6	;volatile
  2150                           
  2151                           ;main.c: 62: RCSTAbits.SREN = 0;
  2152  0D9A  1298               	bcf	24,5	;volatile
  2153                           
  2154                           ;main.c: 63: RCSTAbits.CREN = 1;
  2155  0D9B  1618               	bsf	24,4	;volatile
  2156                           
  2157                           ;main.c: 64: RCSTAbits.ADDEN = 0;
  2158  0D9C  1198               	bcf	24,3	;volatile
  2159                           
  2160                           ;main.c: 65: RCSTAbits.FERR = 0;
  2161  0D9D  1118               	bcf	24,2	;volatile
  2162                           
  2163                           ;main.c: 66: RCSTAbits.OERR = 0;
  2164  0D9E  1098               	bcf	24,1	;volatile
  2165                           
  2166                           ;main.c: 67: RCSTAbits.RX9D = 0;
  2167  0D9F  1018               	bcf	24,0	;volatile
  2168                           
  2169                           ;main.c: 70: PIE1bits.RCIE = 1;
  2170  0DA0  1683               	bsf	3,5	;RP0=1, select bank1
  2171  0DA1  1303               	bcf	3,6	;RP1=0, select bank1
  2172  0DA2  168C               	bsf	12,5	;volatile
  2173                           
  2174                           ;main.c: 71: PIR1bits.RCIF = 0;
  2175  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0DA5  128C               	bcf	12,5	;volatile
  2178  0DA6  0008               	return
  2179  0DA7                     __end_of_USARTInit:	
  2180                           
  2181                           	psect	text7
  2182  0EB9                     __ptext7:	
  2183 ;; *************** function ___aldiv *****************
  2184 ;; Defined at:
  2185 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\aldiv.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  divisor         4    0[BANK3 ] long 
  2188 ;;  dividend        4    4[BANK3 ] long 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;  quotient        4   11[BANK3 ] long 
  2191 ;;  sign            1   10[BANK3 ] unsigned char 
  2192 ;;  counter         1    9[BANK3 ] unsigned char 
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  4    0[BANK3 ] long 
  2195 ;; Registers used:
  2196 ;;		wreg, status,2, status,0
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2202 ;;      Params:         0       0       0       8       0
  2203 ;;      Locals:         0       0       0       6       0
  2204 ;;      Temps:          0       0       0       1       0
  2205 ;;      Totals:         0       0       0      15       0
  2206 ;;Total ram usage:       15 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    6
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		_USARTInit
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           
  2217                           ;psect for function ___aldiv
  2218  0EB9                     ___aldiv:	
  2219                           
  2220                           ;incstack = 0
  2221 ;; hardware stack exceeded
  2222                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2223  0EB9  1683               	bsf	3,5	;RP0=1, select bank3
  2224  0EBA  1703               	bsf	3,6	;RP1=1, select bank3
  2225  0EBB  019A               	clrf	___aldiv@sign^(0+384)
  2226  0EBC  1F93               	btfss	(___aldiv@divisor+3)^(0+384),7
  2227  0EBD  2ECB               	goto	l413
  2228  0EBE  0990               	comf	___aldiv@divisor^(0+384),f
  2229  0EBF  0991               	comf	(___aldiv@divisor+1)^(0+384),f
  2230  0EC0  0992               	comf	(___aldiv@divisor+2)^(0+384),f
  2231  0EC1  0993               	comf	(___aldiv@divisor+3)^(0+384),f
  2232  0EC2  0A90               	incf	___aldiv@divisor^(0+384),f
  2233  0EC3  1903               	skipnz
  2234  0EC4  0A91               	incf	(___aldiv@divisor+1)^(0+384),f
  2235  0EC5  1903               	skipnz
  2236  0EC6  0A92               	incf	(___aldiv@divisor+2)^(0+384),f
  2237  0EC7  1903               	skipnz
  2238  0EC8  0A93               	incf	(___aldiv@divisor+3)^(0+384),f
  2239  0EC9  019A               	clrf	___aldiv@sign^(0+384)
  2240  0ECA  0A9A               	incf	___aldiv@sign^(0+384),f
  2241  0ECB                     l413:	
  2242  0ECB  1F97               	btfss	(___aldiv@dividend+3)^(0+384),7
  2243  0ECC  2EDC               	goto	l3020
  2244  0ECD  0994               	comf	___aldiv@dividend^(0+384),f
  2245  0ECE  0995               	comf	(___aldiv@dividend+1)^(0+384),f
  2246  0ECF  0996               	comf	(___aldiv@dividend+2)^(0+384),f
  2247  0ED0  0997               	comf	(___aldiv@dividend+3)^(0+384),f
  2248  0ED1  0A94               	incf	___aldiv@dividend^(0+384),f
  2249  0ED2  1903               	skipnz
  2250  0ED3  0A95               	incf	(___aldiv@dividend+1)^(0+384),f
  2251  0ED4  1903               	skipnz
  2252  0ED5  0A96               	incf	(___aldiv@dividend+2)^(0+384),f
  2253  0ED6  1903               	skipnz
  2254  0ED7  0A97               	incf	(___aldiv@dividend+3)^(0+384),f
  2255  0ED8  3001               	movlw	1
  2256  0ED9  0098               	movwf	??___aldiv^(0+384)
  2257  0EDA  0818               	movf	??___aldiv^(0+384),w
  2258  0EDB  069A               	xorwf	___aldiv@sign^(0+384),f
  2259  0EDC                     l3020:	
  2260  0EDC  3000               	movlw	0
  2261  0EDD  009E               	movwf	(___aldiv@quotient+3)^(0+384)
  2262  0EDE  3000               	movlw	0
  2263  0EDF  009D               	movwf	(___aldiv@quotient+2)^(0+384)
  2264  0EE0  3000               	movlw	0
  2265  0EE1  009C               	movwf	(___aldiv@quotient+1)^(0+384)
  2266  0EE2  3000               	movlw	0
  2267  0EE3  009B               	movwf	___aldiv@quotient^(0+384)
  2268  0EE4  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2269  0EE5  0412               	iorwf	(___aldiv@divisor+2)^(0+384),w
  2270  0EE6  0411               	iorwf	(___aldiv@divisor+1)^(0+384),w
  2271  0EE7  0410               	iorwf	___aldiv@divisor^(0+384),w
  2272  0EE8  1903               	skipnz
  2273  0EE9  2F31               	goto	l3042
  2274  0EEA  0199               	clrf	___aldiv@counter^(0+384)
  2275  0EEB  0A99               	incf	___aldiv@counter^(0+384),f
  2276  0EEC                     l3028:	
  2277  0EEC  1B93               	btfsc	(___aldiv@divisor+3)^(0+384),7
  2278  0EED  2EFC               	goto	l3030
  2279  0EEE  3001               	movlw	1
  2280  0EEF  0098               	movwf	??___aldiv^(0+384)
  2281  0EF0                     u3955:	
  2282  0EF0  1003               	clrc
  2283  0EF1  0D90               	rlf	___aldiv@divisor^(0+384),f
  2284  0EF2  0D91               	rlf	(___aldiv@divisor+1)^(0+384),f
  2285  0EF3  0D92               	rlf	(___aldiv@divisor+2)^(0+384),f
  2286  0EF4  0D93               	rlf	(___aldiv@divisor+3)^(0+384),f
  2287  0EF5  0B98               	decfsz	??___aldiv^(0+384),f
  2288  0EF6  2EF0               	goto	u3955
  2289  0EF7  3001               	movlw	1
  2290  0EF8  0098               	movwf	??___aldiv^(0+384)
  2291  0EF9  0818               	movf	??___aldiv^(0+384),w
  2292  0EFA  0799               	addwf	___aldiv@counter^(0+384),f
  2293  0EFB  2EEC               	goto	l3028
  2294  0EFC                     l3030:	
  2295  0EFC  3001               	movlw	1
  2296  0EFD  0098               	movwf	??___aldiv^(0+384)
  2297  0EFE                     u3975:	
  2298  0EFE  1003               	clrc
  2299  0EFF  0D9B               	rlf	___aldiv@quotient^(0+384),f
  2300  0F00  0D9C               	rlf	(___aldiv@quotient+1)^(0+384),f
  2301  0F01  0D9D               	rlf	(___aldiv@quotient+2)^(0+384),f
  2302  0F02  0D9E               	rlf	(___aldiv@quotient+3)^(0+384),f
  2303  0F03  0B98               	decfsz	??___aldiv^(0+384),f
  2304  0F04  2EFE               	goto	u3975
  2305  0F05  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2306  0F06  0217               	subwf	(___aldiv@dividend+3)^(0+384),w
  2307  0F07  1D03               	skipz
  2308  0F08  2F13               	goto	u3985
  2309  0F09  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2310  0F0A  0216               	subwf	(___aldiv@dividend+2)^(0+384),w
  2311  0F0B  1D03               	skipz
  2312  0F0C  2F13               	goto	u3985
  2313  0F0D  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2314  0F0E  0215               	subwf	(___aldiv@dividend+1)^(0+384),w
  2315  0F0F  1D03               	skipz
  2316  0F10  2F13               	goto	u3985
  2317  0F11  0810               	movf	___aldiv@divisor^(0+384),w
  2318  0F12  0214               	subwf	___aldiv@dividend^(0+384),w
  2319  0F13                     u3985:	
  2320  0F13  1C03               	skipc
  2321  0F14  2F24               	goto	l3038
  2322  0F15  0810               	movf	___aldiv@divisor^(0+384),w
  2323  0F16  0294               	subwf	___aldiv@dividend^(0+384),f
  2324  0F17  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2325  0F18  1C03               	skipc
  2326  0F19  0F11               	incfsz	(___aldiv@divisor+1)^(0+384),w
  2327  0F1A  0295               	subwf	(___aldiv@dividend+1)^(0+384),f
  2328  0F1B  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2329  0F1C  1C03               	skipc
  2330  0F1D  0F12               	incfsz	(___aldiv@divisor+2)^(0+384),w
  2331  0F1E  0296               	subwf	(___aldiv@dividend+2)^(0+384),f
  2332  0F1F  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2333  0F20  1C03               	skipc
  2334  0F21  0F13               	incfsz	(___aldiv@divisor+3)^(0+384),w
  2335  0F22  0297               	subwf	(___aldiv@dividend+3)^(0+384),f
  2336  0F23  141B               	bsf	___aldiv@quotient^(0+384),0
  2337  0F24                     l3038:	
  2338  0F24  3001               	movlw	1
  2339  0F25                     u3995:	
  2340  0F25  1003               	clrc
  2341  0F26  0C93               	rrf	(___aldiv@divisor+3)^(0+384),f
  2342  0F27  0C92               	rrf	(___aldiv@divisor+2)^(0+384),f
  2343  0F28  0C91               	rrf	(___aldiv@divisor+1)^(0+384),f
  2344  0F29  0C90               	rrf	___aldiv@divisor^(0+384),f
  2345  0F2A  3EFF               	addlw	-1
  2346  0F2B  1D03               	skipz
  2347  0F2C  2F25               	goto	u3995
  2348  0F2D  3001               	movlw	1
  2349  0F2E  0299               	subwf	___aldiv@counter^(0+384),f
  2350  0F2F  1D03               	btfss	3,2
  2351  0F30  2EFC               	goto	l3030
  2352  0F31                     l3042:	
  2353  0F31  081A               	movf	___aldiv@sign^(0+384),w
  2354  0F32  1903               	btfsc	3,2
  2355  0F33  2F3F               	goto	l3046
  2356  0F34  099B               	comf	___aldiv@quotient^(0+384),f
  2357  0F35  099C               	comf	(___aldiv@quotient+1)^(0+384),f
  2358  0F36  099D               	comf	(___aldiv@quotient+2)^(0+384),f
  2359  0F37  099E               	comf	(___aldiv@quotient+3)^(0+384),f
  2360  0F38  0A9B               	incf	___aldiv@quotient^(0+384),f
  2361  0F39  1903               	skipnz
  2362  0F3A  0A9C               	incf	(___aldiv@quotient+1)^(0+384),f
  2363  0F3B  1903               	skipnz
  2364  0F3C  0A9D               	incf	(___aldiv@quotient+2)^(0+384),f
  2365  0F3D  1903               	skipnz
  2366  0F3E  0A9E               	incf	(___aldiv@quotient+3)^(0+384),f
  2367  0F3F                     l3046:	
  2368  0F3F  081E               	movf	(___aldiv@quotient+3)^(0+384),w
  2369  0F40  0093               	movwf	(?___aldiv+3)^(0+384)
  2370  0F41  081D               	movf	(___aldiv@quotient+2)^(0+384),w
  2371  0F42  0092               	movwf	(?___aldiv+2)^(0+384)
  2372  0F43  081C               	movf	(___aldiv@quotient+1)^(0+384),w
  2373  0F44  0091               	movwf	(?___aldiv+1)^(0+384)
  2374  0F45  081B               	movf	___aldiv@quotient^(0+384),w
  2375  0F46  0090               	movwf	?___aldiv^(0+384)
  2376  0F47  0008               	return
  2377  0F48                     __end_of___aldiv:	
  2378                           
  2379                           	psect	text8
  2380  09E0                     __ptext8:	
  2381 ;; *************** function _LCDClear *****************
  2382 ;; Defined at:
  2383 ;;		line 179 in file "lcd_4bit.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;		None               void
  2390 ;; Registers used:
  2391 ;;		wreg, status,2, status,0, pclath, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2397 ;;      Params:         0       0       0       0       0
  2398 ;;      Locals:         0       0       0       0       0
  2399 ;;      Temps:          0       0       0       2       0
  2400 ;;      Totals:         0       0       0       2       0
  2401 ;;Total ram usage:        2 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    8
  2404 ;; This function calls:
  2405 ;;		_lcd_envia_byte
  2406 ;; This function is called by:
  2407 ;;		_inicialize
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           
  2412                           ;psect for function _LCDClear
  2413  09E0                     _LCDClear:	
  2414                           
  2415                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2416                           
  2417                           ;incstack = 0
  2418 ;; hardware stack exceeded
  2419                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2420  09E0  1683               	bsf	3,5	;RP0=1, select bank3
  2421  09E1  1703               	bsf	3,6	;RP1=1, select bank3
  2422  09E2  0192               	clrf	lcd_envia_byte@n^(0+384)
  2423  09E3  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2424  09E4  3000               	movlw	0
  2425  09E5  120A  158A  2137  120A  158A  	fcall	_lcd_envia_byte
  2426                           
  2427                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2428  09EA  3041               	movlw	65
  2429  09EB  1683               	bsf	3,5	;RP0=1, select bank3
  2430  09EC  1703               	bsf	3,6	;RP1=1, select bank3
  2431  09ED  0096               	movwf	(??_LCDClear^(0+384)+1)
  2432  09EE  30EE               	movlw	238
  2433  09EF  0095               	movwf	??_LCDClear^(0+384)
  2434  09F0                     u4427:	
  2435  09F0  0B95               	decfsz	??_LCDClear^(0+384),f
  2436  09F1  29F0               	goto	u4427
  2437  09F2  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2438  09F3  29F0               	goto	u4427
  2439  09F4  0000               	nop
  2440                           
  2441                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2442  09F5  300C               	movlw	12
  2443  09F6  1683               	bsf	3,5	;RP0=1, select bank3
  2444  09F7  1703               	bsf	3,6	;RP1=1, select bank3
  2445  09F8  0095               	movwf	??_LCDClear^(0+384)
  2446  09F9  0815               	movf	??_LCDClear^(0+384),w
  2447  09FA  0092               	movwf	lcd_envia_byte@n^(0+384)
  2448  09FB  3000               	movlw	0
  2449  09FC  120A  158A  2137  120A  158A  	fcall	_lcd_envia_byte
  2450                           
  2451                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2452  0A01  30F9               	movlw	249
  2453  0A02  1683               	bsf	3,5	;RP0=1, select bank3
  2454  0A03  1703               	bsf	3,6	;RP1=1, select bank3
  2455  0A04  0095               	movwf	??_LCDClear^(0+384)
  2456  0A05                     u4437:	
  2457  0A05  0000               	nop
  2458  0A06  0B95               	decfsz	??_LCDClear^(0+384),f
  2459  0A07  2A05               	goto	u4437
  2460  0A08  2A09               	nop2	;nop
  2461  0A09  0000               	nop
  2462                           
  2463                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2464  0A0A  3006               	movlw	6
  2465  0A0B  1683               	bsf	3,5	;RP0=1, select bank3
  2466  0A0C  1703               	bsf	3,6	;RP1=1, select bank3
  2467  0A0D  0095               	movwf	??_LCDClear^(0+384)
  2468  0A0E  0815               	movf	??_LCDClear^(0+384),w
  2469  0A0F  0092               	movwf	lcd_envia_byte@n^(0+384)
  2470  0A10  3000               	movlw	0
  2471  0A11  120A  158A  2137  120A  158A  	fcall	_lcd_envia_byte
  2472                           
  2473                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2474  0A16  30F9               	movlw	249
  2475  0A17  1683               	bsf	3,5	;RP0=1, select bank3
  2476  0A18  1703               	bsf	3,6	;RP1=1, select bank3
  2477  0A19  0095               	movwf	??_LCDClear^(0+384)
  2478  0A1A                     u4447:	
  2479  0A1A  0000               	nop
  2480  0A1B  0B95               	decfsz	??_LCDClear^(0+384),f
  2481  0A1C  2A1A               	goto	u4447
  2482  0A1D  2A1E               	nop2	;nop
  2483  0A1E  0000               	nop
  2484  0A1F  0008               	return
  2485  0A20                     __end_of_LCDClear:	
  2486                           
  2487                           	psect	text9
  2488  0937                     __ptext9:	
  2489 ;; *************** function _lcd_envia_byte *****************
  2490 ;; Defined at:
  2491 ;;		line 53 in file "lcd_4bit.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  address         1    wreg     unsigned char 
  2494 ;;  n               1    2[BANK3 ] unsigned char 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  address         1    4[BANK3 ] unsigned char 
  2497 ;; Return value:  Size  Location     Type
  2498 ;;		None               void
  2499 ;; Registers used:
  2500 ;;		wreg, status,2, status,0, pclath, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2506 ;;      Params:         0       0       0       1       0
  2507 ;;      Locals:         0       0       0       1       0
  2508 ;;      Temps:          0       0       0       1       0
  2509 ;;      Totals:         0       0       0       3       0
  2510 ;;Total ram usage:        3 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; Hardware stack levels required when called:    7
  2513 ;; This function calls:
  2514 ;;		_lcd_envia_nibble
  2515 ;; This function is called by:
  2516 ;;		_init_lcd_4bit
  2517 ;;		_lcd_gotoxy
  2518 ;;		_lcd_putc
  2519 ;;		_LCDClear
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _lcd_envia_byte
  2525  0937                     _lcd_envia_byte:	
  2526                           
  2527                           ;incstack = 0
  2528 ;; hardware stack exceeded
  2529                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2530                           ;lcd_envia_byte@address stored from wreg
  2531  0937  1683               	bsf	3,5	;RP0=1, select bank3
  2532  0938  1703               	bsf	3,6	;RP1=1, select bank3
  2533  0939  0094               	movwf	lcd_envia_byte@address^(0+384)
  2534                           
  2535                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2536  093A  1283               	bcf	3,5	;RP0=0, select bank0
  2537  093B  1303               	bcf	3,6	;RP1=0, select bank0
  2538  093C  1286               	bcf	6,5	;volatile
  2539                           
  2540                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2541  093D  3063               	movlw	99
  2542  093E  1683               	bsf	3,5	;RP0=1, select bank3
  2543  093F  1703               	bsf	3,6	;RP1=1, select bank3
  2544  0940  0093               	movwf	??_lcd_envia_byte^(0+384)
  2545  0941                     u4457:	
  2546  0941  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2547  0942  2941               	goto	u4457
  2548  0943  2944               	nop2	;nop
  2549                           
  2550                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2551  0944  1683               	bsf	3,5	;RP0=1, select bank3
  2552  0945  1703               	bsf	3,6	;RP1=1, select bank3
  2553  0946  0814               	movf	lcd_envia_byte@address^(0+384),w
  2554  0947  1903               	btfsc	3,2
  2555  0948  294D               	goto	l172
  2556  0949  1283               	bcf	3,5	;RP0=0, select bank0
  2557  094A  1303               	bcf	3,6	;RP1=0, select bank0
  2558  094B  1686               	bsf	6,5	;volatile
  2559  094C  2950               	goto	l173
  2560  094D                     l172:	
  2561                           
  2562                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2563  094D  1283               	bcf	3,5	;RP0=0, select bank0
  2564  094E  1303               	bcf	3,6	;RP1=0, select bank0
  2565  094F  1286               	bcf	6,5	;volatile
  2566  0950                     l173:	
  2567                           
  2568                           ;lcd_4bit.c: 61: _delay(1);
  2569  0950  0000               	nop
  2570                           
  2571                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2572  0951  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0952  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0953  1206               	bcf	6,4	;volatile
  2575                           
  2576                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2577  0954  1683               	bsf	3,5	;RP0=1, select bank3
  2578  0955  1703               	bsf	3,6	;RP1=1, select bank3
  2579  0956  0812               	movf	lcd_envia_byte@n^(0+384),w
  2580  0957  0093               	movwf	??_lcd_envia_byte^(0+384)
  2581  0958  3004               	movlw	4
  2582  0959                     u3905:	
  2583  0959  1003               	clrc
  2584  095A  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2585  095B  3EFF               	addlw	-1
  2586  095C  1D03               	skipz
  2587  095D  2959               	goto	u3905
  2588  095E  0813               	movf	??_lcd_envia_byte^(0+384),w
  2589  095F  120A  158A  2304  120A  158A  	fcall	_lcd_envia_nibble
  2590                           
  2591                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2592  0964  1683               	bsf	3,5	;RP0=1, select bank3
  2593  0965  1703               	bsf	3,6	;RP1=1, select bank3
  2594  0966  0812               	movf	lcd_envia_byte@n^(0+384),w
  2595  0967  390F               	andlw	15
  2596  0968  120A  158A  2304   	fcall	_lcd_envia_nibble
  2597  096B  0008               	return
  2598  096C                     __end_of_lcd_envia_byte:	
  2599                           
  2600                           	psect	text10
  2601  0B04                     __ptext10:	
  2602 ;; *************** function _lcd_envia_nibble *****************
  2603 ;; Defined at:
  2604 ;;		line 39 in file "lcd_4bit.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  n               1    wreg     unsigned char 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  n               1    1[BANK3 ] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;		None               void
  2611 ;; Registers used:
  2612 ;;		wreg, status,2, status,0
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2618 ;;      Params:         0       0       0       0       0
  2619 ;;      Locals:         0       0       0       1       0
  2620 ;;      Temps:          0       0       0       1       0
  2621 ;;      Totals:         0       0       0       2       0
  2622 ;;Total ram usage:        2 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    6
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_init_lcd_4bit
  2629 ;;		_lcd_envia_byte
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _lcd_envia_nibble
  2635  0B04                     _lcd_envia_nibble:	
  2636                           
  2637                           ;incstack = 0
  2638 ;; hardware stack exceeded
  2639                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2640                           ;lcd_envia_nibble@n stored from wreg
  2641  0B04  1683               	bsf	3,5	;RP0=1, select bank3
  2642  0B05  1703               	bsf	3,6	;RP1=1, select bank3
  2643  0B06  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2644                           
  2645                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2646  0B07  3000               	movlw	0
  2647  0B08  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2648  0B09  3001               	movlw	1
  2649  0B0A  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2650  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
  2651  0B0C  1303               	bcf	3,6	;RP1=0, select bank0
  2652  0B0D  0806               	movf	6,w	;volatile
  2653  0B0E  1683               	bsf	3,5	;RP0=1, select bank3
  2654  0B0F  1703               	bsf	3,6	;RP1=1, select bank3
  2655  0B10  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2656  0B11  39FE               	andlw	-2
  2657  0B12  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2658  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0B15  0086               	movwf	6	;volatile
  2661                           
  2662                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2663  0B16  3000               	movlw	0
  2664  0B17  1683               	bsf	3,5	;RP0=1, select bank3
  2665  0B18  1703               	bsf	3,6	;RP1=1, select bank3
  2666  0B19  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2667  0B1A  3001               	movlw	1
  2668  0B1B  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2669  0B1C  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2670  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0B1F  0806               	movf	6,w	;volatile
  2673  0B20  1683               	bsf	3,5	;RP0=1, select bank3
  2674  0B21  1703               	bsf	3,6	;RP1=1, select bank3
  2675  0B22  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2676  0B23  39FD               	andlw	-3
  2677  0B24  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2678  0B25  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0B26  1303               	bcf	3,6	;RP1=0, select bank0
  2680  0B27  0086               	movwf	6	;volatile
  2681                           
  2682                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2683  0B28  3000               	movlw	0
  2684  0B29  1683               	bsf	3,5	;RP0=1, select bank3
  2685  0B2A  1703               	bsf	3,6	;RP1=1, select bank3
  2686  0B2B  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2687  0B2C  3001               	movlw	1
  2688  0B2D  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2689  0B2E  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2690  0B2F  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2691  0B30  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0B31  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0B32  0806               	movf	6,w	;volatile
  2694  0B33  1683               	bsf	3,5	;RP0=1, select bank3
  2695  0B34  1703               	bsf	3,6	;RP1=1, select bank3
  2696  0B35  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2697  0B36  39FB               	andlw	-5
  2698  0B37  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2699  0B38  1283               	bcf	3,5	;RP0=0, select bank0
  2700  0B39  1303               	bcf	3,6	;RP1=0, select bank0
  2701  0B3A  0086               	movwf	6	;volatile
  2702                           
  2703                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2704  0B3B  3000               	movlw	0
  2705  0B3C  1683               	bsf	3,5	;RP0=1, select bank3
  2706  0B3D  1703               	bsf	3,6	;RP1=1, select bank3
  2707  0B3E  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2708  0B3F  3001               	movlw	1
  2709  0B40  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2710  0B41  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2711  0B42  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2712  0B43  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2713  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  2715  0B46  0806               	movf	6,w	;volatile
  2716  0B47  1683               	bsf	3,5	;RP0=1, select bank3
  2717  0B48  1703               	bsf	3,6	;RP1=1, select bank3
  2718  0B49  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2719  0B4A  39F7               	andlw	-9
  2720  0B4B  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2721  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  2722  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  2723  0B4E  0086               	movwf	6	;volatile
  2724                           
  2725                           ;lcd_4bit.c: 46: _delay(1);
  2726  0B4F  0000               	nop
  2727                           
  2728                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2729  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0B52  1606               	bsf	6,4	;volatile
  2732                           
  2733                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2734  0B53  3003               	movlw	3
  2735  0B54  1683               	bsf	3,5	;RP0=1, select bank3
  2736  0B55  1703               	bsf	3,6	;RP1=1, select bank3
  2737  0B56  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2738  0B57                     u4467:	
  2739  0B57  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2740  0B58  2B57               	goto	u4467
  2741                           
  2742                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2743  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  2744  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  2745  0B5B  1206               	bcf	6,4	;volatile
  2746  0B5C  0008               	return
  2747  0B5D                     __end_of_lcd_envia_nibble:	
  2748                           
  2749                           	psect	text11
  2750  16D7                     __ptext11:	
  2751 ;; *************** function _ADCInit *****************
  2752 ;; Defined at:
  2753 ;;		line 118 in file "main.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;		None               void
  2760 ;; Registers used:
  2761 ;;		None
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2767 ;;      Params:         0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0
  2770 ;;      Totals:         0       0       0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    6
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_inicialize
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           
  2782                           ;psect for function _ADCInit
  2783  16D7                     _ADCInit:	
  2784                           
  2785                           ;main.c: 120: ADCON1bits.ADFM = 1;
  2786                           
  2787                           ;incstack = 0
  2788                           ; Regs used in _ADCInit: []
  2789  16D7  1683               	bsf	3,5	;RP0=1, select bank1
  2790  16D8  1303               	bcf	3,6	;RP1=0, select bank1
  2791  16D9  179F               	bsf	31,7	;volatile
  2792                           
  2793                           ;main.c: 121: ADCON1bits.PCFG3 = 0;
  2794  16DA  119F               	bcf	31,3	;volatile
  2795                           
  2796                           ;main.c: 122: ADCON1bits.PCFG2 = 0;
  2797  16DB  111F               	bcf	31,2	;volatile
  2798                           
  2799                           ;main.c: 123: ADCON1bits.PCFG1 = 0;
  2800  16DC  109F               	bcf	31,1	;volatile
  2801                           
  2802                           ;main.c: 124: ADCON1bits.PCFG0 = 0;
  2803  16DD  101F               	bcf	31,0	;volatile
  2804                           
  2805                           ;main.c: 127: ADCON0bits.ADCS1 = 1;
  2806  16DE  1283               	bcf	3,5	;RP0=0, select bank0
  2807  16DF  1303               	bcf	3,6	;RP1=0, select bank0
  2808  16E0  179F               	bsf	31,7	;volatile
  2809                           
  2810                           ;main.c: 128: ADCON0bits.ADCS0 = 0;
  2811  16E1  131F               	bcf	31,6	;volatile
  2812                           
  2813                           ;main.c: 132: ADCON0bits.ADON = 1;
  2814  16E2  141F               	bsf	31,0	;volatile
  2815                           
  2816                           ;main.c: 135: PIE1bits.ADIE = 1;
  2817  16E3  1683               	bsf	3,5	;RP0=1, select bank1
  2818  16E4  1303               	bcf	3,6	;RP1=0, select bank1
  2819  16E5  170C               	bsf	12,6	;volatile
  2820                           
  2821                           ;main.c: 136: PIR1bits.ADIF = 0;
  2822  16E6  1283               	bcf	3,5	;RP0=0, select bank0
  2823  16E7  1303               	bcf	3,6	;RP1=0, select bank0
  2824  16E8  130C               	bcf	12,6	;volatile
  2825  16E9  0008               	return
  2826  16EA                     __end_of_ADCInit:	
  2827                           
  2828                           	psect	text12
  2829  0BB8                     __ptext12:	
  2830 ;; *************** function _ativar *****************
  2831 ;; Defined at:
  2832 ;;		line 292 in file "main.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;		None               void
  2839 ;; Registers used:
  2840 ;;		wreg, status,2, status,0, pclath, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2846 ;;      Params:         0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0
  2848 ;;      Temps:          0       0       0       3       0
  2849 ;;      Totals:         0       0       0       3       0
  2850 ;;Total ram usage:        3 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    7
  2853 ;; This function calls:
  2854 ;;		_ADCRead
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           
  2861                           ;psect for function _ativar
  2862  0BB8                     _ativar:	
  2863                           
  2864                           ;main.c: 293: if (PORTCbits.RC3 == 1) {
  2865                           
  2866                           ;incstack = 0
  2867                           ; Regs used in _ativar: [wreg+status,2+status,0+pclath+cstack]
  2868  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  2869  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  2870  0BBA  1D87               	btfss	7,3	;volatile
  2871  0BBB  2BD8               	goto	l3208
  2872                           
  2873                           ;main.c: 294: _delay((unsigned long)((300)*(20000000/4000.0)));
  2874  0BBC  3008               	movlw	8
  2875  0BBD  1683               	bsf	3,5	;RP0=1, select bank3
  2876  0BBE  1703               	bsf	3,6	;RP1=1, select bank3
  2877  0BBF  0095               	movwf	(??_ativar^(0+384)+2)
  2878  0BC0  309D               	movlw	157
  2879  0BC1  0094               	movwf	(??_ativar^(0+384)+1)
  2880  0BC2  300B               	movlw	11
  2881  0BC3  0093               	movwf	??_ativar^(0+384)
  2882  0BC4                     u4477:	
  2883  0BC4  0B93               	decfsz	??_ativar^(0+384),f
  2884  0BC5  2BC4               	goto	u4477
  2885  0BC6  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2886  0BC7  2BC4               	goto	u4477
  2887  0BC8  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2888  0BC9  2BC4               	goto	u4477
  2889  0BCA  2BCB               	nop2
  2890                           
  2891                           ;main.c: 295: if (flag_Start == 0) {
  2892  0BCB  1683               	bsf	3,5	;RP0=1, select bank1
  2893  0BCC  1303               	bcf	3,6	;RP1=0, select bank1
  2894  0BCD  085E               	movf	(_flag_Start+1)^(0+128),w
  2895  0BCE  045D               	iorwf	_flag_Start^(0+128),w
  2896  0BCF  1D03               	skipz
  2897  0BD0  2BD6               	goto	l3206
  2898                           
  2899                           ;main.c: 297: flag_Start = 1;
  2900  0BD1  3001               	movlw	1
  2901  0BD2  00DD               	movwf	_flag_Start^(0+128)
  2902  0BD3  3000               	movlw	0
  2903  0BD4  00DE               	movwf	(_flag_Start^(0+128)+1)
  2904                           
  2905                           ;main.c: 298: } else {
  2906  0BD5  2BD8               	goto	l3208
  2907  0BD6                     l3206:	
  2908                           
  2909                           ;main.c: 299: flag_Start = 0;
  2910  0BD6  01DD               	clrf	_flag_Start^(0+128)
  2911  0BD7  01DE               	clrf	(_flag_Start+1)^(0+128)
  2912  0BD8                     l3208:	
  2913                           
  2914                           ;main.c: 301: }
  2915                           ;main.c: 302: }
  2916                           ;main.c: 304: if (flag_Start == 1) {
  2917  0BD8  3001               	movlw	1
  2918  0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  2920  0BDB  065D               	xorwf	_flag_Start^(0+128),w
  2921  0BDC  045E               	iorwf	(_flag_Start+1)^(0+128),w
  2922  0BDD  1D03               	skipz
  2923  0BDE  0008               	return
  2924                           
  2925                           ;main.c: 305: ADCRead(0);
  2926  0BDF  3000               	movlw	0
  2927  0BE0  1683               	bsf	3,5	;RP0=1, select bank3
  2928  0BE1  1703               	bsf	3,6	;RP1=1, select bank3
  2929  0BE2  0090               	movwf	ADCRead@ch^(0+384)
  2930  0BE3  3000               	movlw	0
  2931  0BE4  0091               	movwf	(ADCRead@ch^(0+384)+1)
  2932  0BE5  160A  118A  2757  120A  158A  	fcall	_ADCRead
  2933                           
  2934                           ;main.c: 306: _delay((unsigned long)((300)*(20000000/4000.0)));
  2935  0BEA  3008               	movlw	8
  2936  0BEB  1683               	bsf	3,5	;RP0=1, select bank3
  2937  0BEC  1703               	bsf	3,6	;RP1=1, select bank3
  2938  0BED  0095               	movwf	(??_ativar^(0+384)+2)
  2939  0BEE  309D               	movlw	157
  2940  0BEF  0094               	movwf	(??_ativar^(0+384)+1)
  2941  0BF0  300B               	movlw	11
  2942  0BF1  0093               	movwf	??_ativar^(0+384)
  2943  0BF2                     u4487:	
  2944  0BF2  0B93               	decfsz	??_ativar^(0+384),f
  2945  0BF3  2BF2               	goto	u4487
  2946  0BF4  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2947  0BF5  2BF2               	goto	u4487
  2948  0BF6  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2949  0BF7  2BF2               	goto	u4487
  2950  0BF8  2BF9               	nop2
  2951                           
  2952                           ;main.c: 307: ADCRead(1);
  2953  0BF9  3001               	movlw	1
  2954  0BFA  1683               	bsf	3,5	;RP0=1, select bank3
  2955  0BFB  1703               	bsf	3,6	;RP1=1, select bank3
  2956  0BFC  0090               	movwf	ADCRead@ch^(0+384)
  2957  0BFD  3000               	movlw	0
  2958  0BFE  0091               	movwf	(ADCRead@ch^(0+384)+1)
  2959  0BFF  160A  118A  2757  120A  158A  	fcall	_ADCRead
  2960                           
  2961                           ;main.c: 308: _delay((unsigned long)((300)*(20000000/4000.0)));
  2962  0C04  3008               	movlw	8
  2963  0C05  1683               	bsf	3,5	;RP0=1, select bank3
  2964  0C06  1703               	bsf	3,6	;RP1=1, select bank3
  2965  0C07  0095               	movwf	(??_ativar^(0+384)+2)
  2966  0C08  309D               	movlw	157
  2967  0C09  0094               	movwf	(??_ativar^(0+384)+1)
  2968  0C0A  300B               	movlw	11
  2969  0C0B  0093               	movwf	??_ativar^(0+384)
  2970  0C0C                     u4497:	
  2971  0C0C  0B93               	decfsz	??_ativar^(0+384),f
  2972  0C0D  2C0C               	goto	u4497
  2973  0C0E  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2974  0C0F  2C0C               	goto	u4497
  2975  0C10  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2976  0C11  2C0C               	goto	u4497
  2977  0C12  2C13               	nop2
  2978  0C13  0008               	return
  2979  0C14                     __end_of_ativar:	
  2980                           
  2981                           	psect	text13
  2982  1757                     __ptext13:	
  2983 ;; *************** function _ADCRead *****************
  2984 ;; Defined at:
  2985 ;;		line 140 in file "main.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;  ch              2    0[BANK3 ] int 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;		None
  2990 ;; Return value:  Size  Location     Type
  2991 ;;		None               void
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2999 ;;      Params:         0       0       0       2       0
  3000 ;;      Locals:         0       0       0       0       0
  3001 ;;      Temps:          0       0       0       1       0
  3002 ;;      Totals:         0       0       0       3       0
  3003 ;;Total ram usage:        3 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    6
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_ativar
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           
  3014                           ;psect for function _ADCRead
  3015  1757                     _ADCRead:	
  3016                           
  3017                           ;main.c: 144: ADCON0bits.CHS = ch;
  3018                           
  3019                           ;incstack = 0
  3020                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  3021  1757  1683               	bsf	3,5	;RP0=1, select bank3
  3022  1758  1703               	bsf	3,6	;RP1=1, select bank3
  3023  1759  0810               	movf	ADCRead@ch^(0+384),w
  3024  175A  0092               	movwf	??_ADCRead^(0+384)
  3025  175B  0D92               	rlf	??_ADCRead^(0+384),f
  3026  175C  0D92               	rlf	??_ADCRead^(0+384),f
  3027  175D  0D92               	rlf	??_ADCRead^(0+384),f
  3028  175E  1283               	bcf	3,5	;RP0=0, select bank0
  3029  175F  1303               	bcf	3,6	;RP1=0, select bank0
  3030  1760  081F               	movf	31,w	;volatile
  3031  1761  1683               	bsf	3,5	;RP0=1, select bank3
  3032  1762  1703               	bsf	3,6	;RP1=1, select bank3
  3033  1763  0612               	xorwf	??_ADCRead^(0+384),w
  3034  1764  39C7               	andlw	-57
  3035  1765  0612               	xorwf	??_ADCRead^(0+384),w
  3036  1766  1283               	bcf	3,5	;RP0=0, select bank0
  3037  1767  1303               	bcf	3,6	;RP1=0, select bank0
  3038  1768  009F               	movwf	31	;volatile
  3039                           
  3040                           ;main.c: 147: _delay((unsigned long)((25)*(20000000/4000000.0)));
  3041  1769  3029               	movlw	41
  3042  176A  1683               	bsf	3,5	;RP0=1, select bank3
  3043  176B  1703               	bsf	3,6	;RP1=1, select bank3
  3044  176C  0092               	movwf	??_ADCRead^(0+384)
  3045  176D                     u4507:	
  3046  176D  0B92               	decfsz	??_ADCRead^(0+384),f
  3047  176E  2F6D               	goto	u4507
  3048  176F  0000               	nop
  3049                           
  3050                           ;main.c: 148: ADCON0bits.GO = 1;
  3051  1770  1283               	bcf	3,5	;RP0=0, select bank0
  3052  1771  1303               	bcf	3,6	;RP1=0, select bank0
  3053  1772  151F               	bsf	31,2	;volatile
  3054  1773                     l110:	
  3055                           ;main.c: 149: while (ADCON0bits.GO_DONE);
  3056                           
  3057  1773  1D1F               	btfss	31,2	;volatile
  3058  1774  0008               	return
  3059  1775  2F73               	goto	l110
  3060  1776                     __end_of_ADCRead:	
  3061                           
  3062                           	psect	text14
  3063  004B                     __ptext14:	
  3064 ;; *************** function _ISR *****************
  3065 ;; Defined at:
  3066 ;;		line 157 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  aux            16    0[BANK1 ] unsigned char [16]
  3071 ;;  input2          3   32[BANK1 ] float 
  3072 ;;  input           3   29[BANK1 ] float 
  3073 ;;  pre             3   21[BANK1 ] float 
  3074 ;;  i               2   26[BANK1 ] int 
  3075 ;;  preint          2   24[BANK1 ] int 
  3076 ;;  status2         2   19[BANK1 ] int 
  3077 ;;  status          2   17[BANK1 ] int 
  3078 ;;  status3         2    0        int 
  3079 ;;  qtdc            2    0        PTR unsigned char 
  3080 ;;  teste           2    0        PTR unsigned char 
  3081 ;;  per             1   35[BANK1 ] PTR unsigned char 
  3082 ;;		 -> ftoa@buf(17), 
  3083 ;;  result          1   28[BANK1 ] PTR unsigned char 
  3084 ;;		 -> ISR@aux(16), 
  3085 ;;  buf             1   16[BANK1 ] PTR unsigned char 
  3086 ;;		 -> ftoa@buf(17), 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;		None               void
  3089 ;; Registers used:
  3090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3096 ;;      Params:         0       0       0       0       0
  3097 ;;      Locals:         0       0      36       0       0
  3098 ;;      Temps:          0       8       0       0       0
  3099 ;;      Totals:         0       8      36       0       0
  3100 ;;Total ram usage:       44 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    5
  3103 ;; This function calls:
  3104 ;;		_USARTReceiveChar
  3105 ;;		_USARTWriteChar
  3106 ;;		_USARTWriteString
  3107 ;;		___awdiv
  3108 ;;		___awmod
  3109 ;;		___awtoft
  3110 ;;		___ftdiv
  3111 ;;		___ftmul
  3112 ;;		___fttol
  3113 ;;		_ftoa
  3114 ;;		i1_lcd_escreve_string
  3115 ;;		i1_lcd_gotoxy
  3116 ;; This function is called by:
  3117 ;;		Interrupt level 1
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           
  3122                           ;psect for function _ISR
  3123  004B                     _ISR:	
  3124                           
  3125                           ;main.c: 161: if (PIR1bits.ADIF) {
  3126  004B  1F0C               	btfss	12,6	;volatile
  3127  004C  2AA7               	goto	i1l2846
  3128                           
  3129                           ;main.c: 164: ADCResult = ((ADRESH << 8) + ADRESL);
  3130  004D  081E               	movf	30,w	;volatile
  3131  004E  1683               	bsf	3,5	;RP0=1, select bank1
  3132  004F  1303               	bcf	3,6	;RP1=0, select bank1
  3133  0050  01DC               	clrf	(_ADCResult+1)^(0+128)
  3134  0051  07DC               	addwf	(_ADCResult+1)^(0+128),f
  3135  0052  081E               	movf	30,w	;volatile
  3136  0053  01DB               	clrf	_ADCResult^(0+128)
  3137  0054  07DB               	addwf	_ADCResult^(0+128),f
  3138                           
  3139                           ;main.c: 167: char * buf;
  3140                           ;main.c: 168: char * per;
  3141                           ;main.c: 169: char * teste;
  3142                           ;main.c: 170: char * qtdc;
  3143                           ;main.c: 171: float input;
  3144                           ;main.c: 172: float input2;
  3145                           ;main.c: 173: float pre;
  3146                           ;main.c: 174: int preint;
  3147                           ;main.c: 175: int status;
  3148                           ;main.c: 176: int status2;
  3149                           ;main.c: 177: int status3;
  3150                           ;main.c: 178: int i = 0;
  3151  0055  01BA               	clrf	ISR@i^(0+128)
  3152  0056  01BB               	clrf	(ISR@i+1)^(0+128)
  3153                           
  3154                           ;main.c: 179: unsigned char *result;
  3155                           ;main.c: 180: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  3156  0057  30A0               	movlw	ISR@aux& (0+255)
  3157  0058  0084               	movwf	4
  3158  0059  30C4               	movlw	low ISR@F1357
  3159  005A  1283               	bcf	3,5	;RP0=0, select bank0
  3160  005B  1303               	bcf	3,6	;RP1=0, select bank0
  3161  005C  00D2               	movwf	??_ISR
  3162  005D  0804               	movf	4,w
  3163  005E  00D3               	movwf	??_ISR+1
  3164  005F  3010               	movlw	16
  3165  0060  00D4               	movwf	??_ISR+2
  3166  0061                     u363_20:	
  3167  0061  0852               	movf	??_ISR,w
  3168  0062  0084               	movwf	4
  3169  0063  1383               	bcf	3,7	;select IRP bank1
  3170  0064  0800               	movf	0,w
  3171  0065  00D5               	movwf	??_ISR+3
  3172  0066  0AD2               	incf	??_ISR,f
  3173  0067  0853               	movf	??_ISR+1,w
  3174  0068  0084               	movwf	4
  3175  0069  0855               	movf	??_ISR+3,w
  3176  006A  0080               	movwf	0
  3177  006B  0AD3               	incf	??_ISR+1,f
  3178  006C  0BD4               	decfsz	??_ISR+2,f
  3179  006D  2861               	goto	u363_20
  3180                           
  3181                           ;main.c: 182: input = ADCResult * 0.0048828125;
  3182  006E  3000               	movlw	0
  3183  006F  00A0               	movwf	___ftmul@f1
  3184  0070  30A0               	movlw	160
  3185  0071  00A1               	movwf	___ftmul@f1+1
  3186  0072  303B               	movlw	59
  3187  0073  00A2               	movwf	___ftmul@f1+2
  3188  0074  1683               	bsf	3,5	;RP0=1, select bank1
  3189  0075  1303               	bcf	3,6	;RP1=0, select bank1
  3190  0076  085C               	movf	(_ADCResult+1)^(0+128),w
  3191  0077  01F9               	clrf	___awtoft@c+1
  3192  0078  07F9               	addwf	___awtoft@c+1,f
  3193  0079  085B               	movf	_ADCResult^(0+128),w
  3194  007A  01F8               	clrf	___awtoft@c
  3195  007B  07F8               	addwf	___awtoft@c,f
  3196  007C  160A  118A  2776  120A  118A  	fcall	___awtoft
  3197  0081  0878               	movf	?___awtoft,w
  3198  0082  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0083  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0084  00A3               	movwf	___ftmul@f2
  3201  0085  0879               	movf	?___awtoft+1,w
  3202  0086  00A4               	movwf	___ftmul@f2+1
  3203  0087  087A               	movf	?___awtoft+2,w
  3204  0088  00A5               	movwf	___ftmul@f2+2
  3205  0089  120A  118A  260C  120A  118A  	fcall	___ftmul
  3206  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3207  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3208  0090  0820               	movf	?___ftmul,w
  3209  0091  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0092  1303               	bcf	3,6	;RP1=0, select bank1
  3211  0093  00BD               	movwf	ISR@input^(0+128)
  3212  0094  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0095  1303               	bcf	3,6	;RP1=0, select bank0
  3214  0096  0821               	movf	?___ftmul+1,w
  3215  0097  1683               	bsf	3,5	;RP0=1, select bank1
  3216  0098  1303               	bcf	3,6	;RP1=0, select bank1
  3217  0099  00BE               	movwf	(ISR@input+1)^(0+128)
  3218  009A  1283               	bcf	3,5	;RP0=0, select bank0
  3219  009B  1303               	bcf	3,6	;RP1=0, select bank0
  3220  009C  0822               	movf	?___ftmul+2,w
  3221  009D  1683               	bsf	3,5	;RP0=1, select bank1
  3222  009E  1303               	bcf	3,6	;RP1=0, select bank1
  3223  009F  00BF               	movwf	(ISR@input+2)^(0+128)
  3224                           
  3225                           ;main.c: 183: buf = ftoa(input, &status);
  3226  00A0  083D               	movf	ISR@input^(0+128),w
  3227  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  3228  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  3229  00A3  00C4               	movwf	ftoa@f
  3230  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  3231  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  3232  00A6  083E               	movf	(ISR@input+1)^(0+128),w
  3233  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  3234  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  3235  00A9  00C5               	movwf	ftoa@f+1
  3236  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  3237  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  3238  00AC  083F               	movf	(ISR@input+2)^(0+128),w
  3239  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  3240  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  3241  00AF  00C6               	movwf	ftoa@f+2
  3242  00B0  30B1               	movlw	ISR@status& (0+255)
  3243  00B1  00D2               	movwf	??_ISR
  3244  00B2  0852               	movf	??_ISR,w
  3245  00B3  00C7               	movwf	ftoa@status
  3246  00B4  120A  118A  26DF  120A  118A  	fcall	_ftoa
  3247  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  3248  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  3249  00BB  00D3               	movwf	??_ISR+1
  3250  00BC  0853               	movf	??_ISR+1,w
  3251  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  3252  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  3253  00BF  00B0               	movwf	ISR@buf^(0+128)
  3254                           
  3255                           ;main.c: 187: Display[0] = (ADCResult / 1000) + 48;
  3256  00C0  30E8               	movlw	232
  3257  00C1  00F0               	movwf	___awdiv@divisor
  3258  00C2  3003               	movlw	3
  3259  00C3  00F1               	movwf	___awdiv@divisor+1
  3260  00C4  085C               	movf	(_ADCResult+1)^(0+128),w
  3261  00C5  01F3               	clrf	___awdiv@dividend+1
  3262  00C6  07F3               	addwf	___awdiv@dividend+1,f
  3263  00C7  085B               	movf	_ADCResult^(0+128),w
  3264  00C8  01F2               	clrf	___awdiv@dividend
  3265  00C9  07F2               	addwf	___awdiv@dividend,f
  3266  00CA  120A  158A  235D  120A  118A  	fcall	___awdiv
  3267  00CF  0870               	movf	?___awdiv,w
  3268  00D0  3E30               	addlw	48
  3269  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3270  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3271  00D3  00D2               	movwf	??_ISR
  3272  00D4  0852               	movf	??_ISR,w
  3273  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  3274  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  3275  00D7  00D4               	movwf	_Display^(0+128)
  3276                           
  3277                           ;main.c: 188: Display[1] = ((ADCResult / 100) % 10) + 48;
  3278  00D8  300A               	movlw	10
  3279  00D9  00F9               	movwf	___awmod@divisor
  3280  00DA  3000               	movlw	0
  3281  00DB  00FA               	movwf	___awmod@divisor+1
  3282  00DC  3064               	movlw	100
  3283  00DD  00F0               	movwf	___awdiv@divisor
  3284  00DE  3000               	movlw	0
  3285  00DF  00F1               	movwf	___awdiv@divisor+1
  3286  00E0  085C               	movf	(_ADCResult+1)^(0+128),w
  3287  00E1  01F3               	clrf	___awdiv@dividend+1
  3288  00E2  07F3               	addwf	___awdiv@dividend+1,f
  3289  00E3  085B               	movf	_ADCResult^(0+128),w
  3290  00E4  01F2               	clrf	___awdiv@dividend
  3291  00E5  07F2               	addwf	___awdiv@dividend,f
  3292  00E6  120A  158A  235D  120A  118A  	fcall	___awdiv
  3293  00EB  0871               	movf	?___awdiv+1,w
  3294  00EC  01FC               	clrf	___awmod@dividend+1
  3295  00ED  07FC               	addwf	___awmod@dividend+1,f
  3296  00EE  0870               	movf	?___awdiv,w
  3297  00EF  01FB               	clrf	___awmod@dividend
  3298  00F0  07FB               	addwf	___awmod@dividend,f
  3299  00F1  120A  158A  22B5  120A  118A  	fcall	___awmod
  3300  00F6  0879               	movf	?___awmod,w
  3301  00F7  3E30               	addlw	48
  3302  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  3303  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  3304  00FA  00D2               	movwf	??_ISR
  3305  00FB  0852               	movf	??_ISR,w
  3306  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  3307  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  3308  00FE  00D5               	movwf	(_Display^(0+128)+1)
  3309                           
  3310                           ;main.c: 189: Display[2] = ((ADCResult / 10) % 10) + 48;
  3311  00FF  300A               	movlw	10
  3312  0100  00F9               	movwf	___awmod@divisor
  3313  0101  3000               	movlw	0
  3314  0102  00FA               	movwf	___awmod@divisor+1
  3315  0103  300A               	movlw	10
  3316  0104  00F0               	movwf	___awdiv@divisor
  3317  0105  3000               	movlw	0
  3318  0106  00F1               	movwf	___awdiv@divisor+1
  3319  0107  085C               	movf	(_ADCResult+1)^(0+128),w
  3320  0108  01F3               	clrf	___awdiv@dividend+1
  3321  0109  07F3               	addwf	___awdiv@dividend+1,f
  3322  010A  085B               	movf	_ADCResult^(0+128),w
  3323  010B  01F2               	clrf	___awdiv@dividend
  3324  010C  07F2               	addwf	___awdiv@dividend,f
  3325  010D  120A  158A  235D  120A  118A  	fcall	___awdiv
  3326  0112  0871               	movf	?___awdiv+1,w
  3327  0113  01FC               	clrf	___awmod@dividend+1
  3328  0114  07FC               	addwf	___awmod@dividend+1,f
  3329  0115  0870               	movf	?___awdiv,w
  3330  0116  01FB               	clrf	___awmod@dividend
  3331  0117  07FB               	addwf	___awmod@dividend,f
  3332  0118  120A  158A  22B5  120A  118A  	fcall	___awmod
  3333  011D  0879               	movf	?___awmod,w
  3334  011E  3E30               	addlw	48
  3335  011F  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0120  1303               	bcf	3,6	;RP1=0, select bank0
  3337  0121  00D2               	movwf	??_ISR
  3338  0122  0852               	movf	??_ISR,w
  3339  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3340  0124  1303               	bcf	3,6	;RP1=0, select bank1
  3341  0125  00D6               	movwf	(_Display^(0+128)+2)
  3342                           
  3343                           ;main.c: 190: Display[3] = (ADCResult % 10) + 48;
  3344  0126  300A               	movlw	10
  3345  0127  00F9               	movwf	___awmod@divisor
  3346  0128  3000               	movlw	0
  3347  0129  00FA               	movwf	___awmod@divisor+1
  3348  012A  085C               	movf	(_ADCResult+1)^(0+128),w
  3349  012B  01FC               	clrf	___awmod@dividend+1
  3350  012C  07FC               	addwf	___awmod@dividend+1,f
  3351  012D  085B               	movf	_ADCResult^(0+128),w
  3352  012E  01FB               	clrf	___awmod@dividend
  3353  012F  07FB               	addwf	___awmod@dividend,f
  3354  0130  120A  158A  22B5  120A  118A  	fcall	___awmod
  3355  0135  0879               	movf	?___awmod,w
  3356  0136  3E30               	addlw	48
  3357  0137  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0138  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0139  00D2               	movwf	??_ISR
  3360  013A  0852               	movf	??_ISR,w
  3361  013B  1683               	bsf	3,5	;RP0=1, select bank1
  3362  013C  1303               	bcf	3,6	;RP1=0, select bank1
  3363  013D  00D7               	movwf	(_Display^(0+128)+3)
  3364                           
  3365                           ;main.c: 195: lcd_gotoxy(0, 1);
  3366  013E  01F5               	clrf	i1lcd_gotoxy@y
  3367  013F  0AF5               	incf	i1lcd_gotoxy@y,f
  3368  0140  3000               	movlw	0
  3369  0141  160A  118A  26EA  120A  118A  	fcall	i1_lcd_gotoxy
  3370                           
  3371                           ;main.c: 196: lcd_escreve_string("Nivel:");
  3372  0146  308D               	movlw	low (STR_2-__stringbase)
  3373  0147  00FC               	movwf	i1lcd_escreve_string@y
  3374  0148  3080               	movlw	128
  3375  0149  00FD               	movwf	i1lcd_escreve_string@y+1
  3376  014A  160A  118A  27DD  120A  118A  	fcall	i1_lcd_escreve_string
  3377                           
  3378                           ;main.c: 197: lcd_gotoxy(7, 1);
  3379  014F  01F5               	clrf	i1lcd_gotoxy@y
  3380  0150  0AF5               	incf	i1lcd_gotoxy@y,f
  3381  0151  3007               	movlw	7
  3382  0152  160A  118A  26EA  120A  118A  	fcall	i1_lcd_gotoxy
  3383                           
  3384                           ;main.c: 198: input2 = ((input * 100) / 1);
  3385  0157  3000               	movlw	0
  3386  0158  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0159  1303               	bcf	3,6	;RP1=0, select bank0
  3388  015A  00B0               	movwf	___ftdiv@f2
  3389  015B  3080               	movlw	128
  3390  015C  00B1               	movwf	___ftdiv@f2+1
  3391  015D  303F               	movlw	63
  3392  015E  00B2               	movwf	___ftdiv@f2+2
  3393  015F  3000               	movlw	0
  3394  0160  00A0               	movwf	___ftmul@f1
  3395  0161  30C8               	movlw	200
  3396  0162  00A1               	movwf	___ftmul@f1+1
  3397  0163  3042               	movlw	66
  3398  0164  00A2               	movwf	___ftmul@f1+2
  3399  0165  1683               	bsf	3,5	;RP0=1, select bank1
  3400  0166  1303               	bcf	3,6	;RP1=0, select bank1
  3401  0167  083D               	movf	ISR@input^(0+128),w
  3402  0168  1283               	bcf	3,5	;RP0=0, select bank0
  3403  0169  1303               	bcf	3,6	;RP1=0, select bank0
  3404  016A  00A3               	movwf	___ftmul@f2
  3405  016B  1683               	bsf	3,5	;RP0=1, select bank1
  3406  016C  1303               	bcf	3,6	;RP1=0, select bank1
  3407  016D  083E               	movf	(ISR@input+1)^(0+128),w
  3408  016E  1283               	bcf	3,5	;RP0=0, select bank0
  3409  016F  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0170  00A4               	movwf	___ftmul@f2+1
  3411  0171  1683               	bsf	3,5	;RP0=1, select bank1
  3412  0172  1303               	bcf	3,6	;RP1=0, select bank1
  3413  0173  083F               	movf	(ISR@input+2)^(0+128),w
  3414  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3415  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3416  0176  00A5               	movwf	___ftmul@f2+2
  3417  0177  120A  118A  260C  120A  118A  	fcall	___ftmul
  3418  017C  1283               	bcf	3,5	;RP0=0, select bank0
  3419  017D  1303               	bcf	3,6	;RP1=0, select bank0
  3420  017E  0820               	movf	?___ftmul,w
  3421  017F  00B3               	movwf	___ftdiv@f1
  3422  0180  0821               	movf	?___ftmul+1,w
  3423  0181  00B4               	movwf	___ftdiv@f1+1
  3424  0182  0822               	movf	?___ftmul+2,w
  3425  0183  00B5               	movwf	___ftdiv@f1+2
  3426  0184  120A  158A  2748  120A  118A  	fcall	___ftdiv
  3427  0189  1283               	bcf	3,5	;RP0=0, select bank0
  3428  018A  1303               	bcf	3,6	;RP1=0, select bank0
  3429  018B  0830               	movf	?___ftdiv,w
  3430  018C  1683               	bsf	3,5	;RP0=1, select bank1
  3431  018D  1303               	bcf	3,6	;RP1=0, select bank1
  3432  018E  00C0               	movwf	ISR@input2^(0+128)
  3433  018F  1283               	bcf	3,5	;RP0=0, select bank0
  3434  0190  1303               	bcf	3,6	;RP1=0, select bank0
  3435  0191  0831               	movf	?___ftdiv+1,w
  3436  0192  1683               	bsf	3,5	;RP0=1, select bank1
  3437  0193  1303               	bcf	3,6	;RP1=0, select bank1
  3438  0194  00C1               	movwf	(ISR@input2+1)^(0+128)
  3439  0195  1283               	bcf	3,5	;RP0=0, select bank0
  3440  0196  1303               	bcf	3,6	;RP1=0, select bank0
  3441  0197  0832               	movf	?___ftdiv+2,w
  3442  0198  1683               	bsf	3,5	;RP0=1, select bank1
  3443  0199  1303               	bcf	3,6	;RP1=0, select bank1
  3444  019A  00C2               	movwf	(ISR@input2+2)^(0+128)
  3445                           
  3446                           ;main.c: 199: per = ftoa(input2, &status2);
  3447  019B  0840               	movf	ISR@input2^(0+128),w
  3448  019C  1283               	bcf	3,5	;RP0=0, select bank0
  3449  019D  1303               	bcf	3,6	;RP1=0, select bank0
  3450  019E  00C4               	movwf	ftoa@f
  3451  019F  1683               	bsf	3,5	;RP0=1, select bank1
  3452  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  3453  01A1  0841               	movf	(ISR@input2+1)^(0+128),w
  3454  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3455  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3456  01A4  00C5               	movwf	ftoa@f+1
  3457  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  3458  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  3459  01A7  0842               	movf	(ISR@input2+2)^(0+128),w
  3460  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  3461  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  3462  01AA  00C6               	movwf	ftoa@f+2
  3463  01AB  30B3               	movlw	ISR@status2& (0+255)
  3464  01AC  00D2               	movwf	??_ISR
  3465  01AD  0852               	movf	??_ISR,w
  3466  01AE  00C7               	movwf	ftoa@status
  3467  01AF  120A  118A  26DF  120A  118A  	fcall	_ftoa
  3468  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  3469  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  3470  01B6  00D3               	movwf	??_ISR+1
  3471  01B7  0853               	movf	??_ISR+1,w
  3472  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  3473  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  3474  01BA  00C3               	movwf	ISR@per^(0+128)
  3475                           
  3476                           ;main.c: 200: lcd_escreve_string(per);
  3477  01BB  0843               	movf	ISR@per^(0+128),w
  3478  01BC  00FC               	movwf	i1lcd_escreve_string@y
  3479  01BD  3001               	movlw	1
  3480  01BE  00FD               	movwf	i1lcd_escreve_string@y+1
  3481  01BF  160A  118A  27DD  120A  118A  	fcall	i1_lcd_escreve_string
  3482                           
  3483                           ;main.c: 201: USARTWriteString("\nS");
  3484  01C4  3094               	movlw	low (STR_3-__stringbase)
  3485  01C5  00F1               	movwf	USARTWriteString@str
  3486  01C6  3080               	movlw	128
  3487  01C7  00F2               	movwf	USARTWriteString@str+1
  3488  01C8  160A  118A  2797  120A  118A  	fcall	_USARTWriteString
  3489                           
  3490                           ;main.c: 202: USARTWriteString(per);
  3491  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  3492  01CE  1303               	bcf	3,6	;RP1=0, select bank1
  3493  01CF  0843               	movf	ISR@per^(0+128),w
  3494  01D0  00F1               	movwf	USARTWriteString@str
  3495  01D1  3001               	movlw	1
  3496  01D2  00F2               	movwf	USARTWriteString@str+1
  3497  01D3  160A  118A  2797  120A  118A  	fcall	_USARTWriteString
  3498                           
  3499                           ;main.c: 204: lcd_gotoxy(16, 1);
  3500  01D8  01F5               	clrf	i1lcd_gotoxy@y
  3501  01D9  0AF5               	incf	i1lcd_gotoxy@y,f
  3502  01DA  3010               	movlw	16
  3503  01DB  160A  118A  26EA  120A  118A  	fcall	i1_lcd_gotoxy
  3504                           
  3505                           ;main.c: 205: lcd_escreve_string("%");
  3506  01E0  3097               	movlw	low (STR_4-__stringbase)
  3507  01E1  00FC               	movwf	i1lcd_escreve_string@y
  3508  01E2  3080               	movlw	128
  3509  01E3  00FD               	movwf	i1lcd_escreve_string@y+1
  3510  01E4  160A  118A  27DD  120A  118A  	fcall	i1_lcd_escreve_string
  3511                           
  3512                           ;main.c: 206: lcd_gotoxy(0, 0);
  3513  01E9  01F5               	clrf	i1lcd_gotoxy@y
  3514  01EA  3000               	movlw	0
  3515  01EB  160A  118A  26EA  120A  118A  	fcall	i1_lcd_gotoxy
  3516                           
  3517                           ;main.c: 207: pre = input2 * 0.16;
  3518  01F0  30D7               	movlw	215
  3519  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3520  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3521  01F3  00A0               	movwf	___ftmul@f1
  3522  01F4  3023               	movlw	35
  3523  01F5  00A1               	movwf	___ftmul@f1+1
  3524  01F6  303E               	movlw	62
  3525  01F7  00A2               	movwf	___ftmul@f1+2
  3526  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  3527  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  3528  01FA  0840               	movf	ISR@input2^(0+128),w
  3529  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3530  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  3531  01FD  00A3               	movwf	___ftmul@f2
  3532  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  3533  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  3534  0200  0841               	movf	(ISR@input2+1)^(0+128),w
  3535  0201  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0202  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0203  00A4               	movwf	___ftmul@f2+1
  3538  0204  1683               	bsf	3,5	;RP0=1, select bank1
  3539  0205  1303               	bcf	3,6	;RP1=0, select bank1
  3540  0206  0842               	movf	(ISR@input2+2)^(0+128),w
  3541  0207  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0208  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0209  00A5               	movwf	___ftmul@f2+2
  3544  020A  120A  118A  260C  120A  118A  	fcall	___ftmul
  3545  020F  1283               	bcf	3,5	;RP0=0, select bank0
  3546  0210  1303               	bcf	3,6	;RP1=0, select bank0
  3547  0211  0820               	movf	?___ftmul,w
  3548  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3549  0213  1303               	bcf	3,6	;RP1=0, select bank1
  3550  0214  00B5               	movwf	ISR@pre^(0+128)
  3551  0215  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0216  1303               	bcf	3,6	;RP1=0, select bank0
  3553  0217  0821               	movf	?___ftmul+1,w
  3554  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3555  0219  1303               	bcf	3,6	;RP1=0, select bank1
  3556  021A  00B6               	movwf	(ISR@pre+1)^(0+128)
  3557  021B  1283               	bcf	3,5	;RP0=0, select bank0
  3558  021C  1303               	bcf	3,6	;RP1=0, select bank0
  3559  021D  0822               	movf	?___ftmul+2,w
  3560  021E  1683               	bsf	3,5	;RP0=1, select bank1
  3561  021F  1303               	bcf	3,6	;RP1=0, select bank1
  3562  0220  00B7               	movwf	(ISR@pre+2)^(0+128)
  3563                           
  3564                           ;main.c: 208: preint = (int) pre;
  3565  0221  0835               	movf	ISR@pre^(0+128),w
  3566  0222  1283               	bcf	3,5	;RP0=0, select bank0
  3567  0223  1303               	bcf	3,6	;RP1=0, select bank0
  3568  0224  00B0               	movwf	___fttol@f1
  3569  0225  1683               	bsf	3,5	;RP0=1, select bank1
  3570  0226  1303               	bcf	3,6	;RP1=0, select bank1
  3571  0227  0836               	movf	(ISR@pre+1)^(0+128),w
  3572  0228  1283               	bcf	3,5	;RP0=0, select bank0
  3573  0229  1303               	bcf	3,6	;RP1=0, select bank0
  3574  022A  00B1               	movwf	___fttol@f1+1
  3575  022B  1683               	bsf	3,5	;RP0=1, select bank1
  3576  022C  1303               	bcf	3,6	;RP1=0, select bank1
  3577  022D  0837               	movf	(ISR@pre+2)^(0+128),w
  3578  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3579  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3580  0230  00B2               	movwf	___fttol@f1+2
  3581  0231  120A  158A  262B  120A  118A  	fcall	___fttol
  3582  0236  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0237  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0238  0831               	movf	?___fttol+1,w
  3585  0239  1683               	bsf	3,5	;RP0=1, select bank1
  3586  023A  1303               	bcf	3,6	;RP1=0, select bank1
  3587  023B  01B9               	clrf	(ISR@preint+1)^(0+128)
  3588  023C  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3589  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3590  023E  1303               	bcf	3,6	;RP1=0, select bank0
  3591  023F  0830               	movf	?___fttol,w
  3592  0240  1683               	bsf	3,5	;RP0=1, select bank1
  3593  0241  1303               	bcf	3,6	;RP1=0, select bank1
  3594  0242  01B8               	clrf	ISR@preint^(0+128)
  3595  0243  07B8               	addwf	ISR@preint^(0+128),f
  3596                           
  3597                           ;main.c: 211: if (ADCResult < 200) {
  3598  0244  085C               	movf	(_ADCResult+1)^(0+128),w
  3599  0245  3A80               	xorlw	128
  3600  0246  00FF               	movwf	127
  3601  0247  3080               	movlw	128
  3602  0248  027F               	subwf	127,w
  3603  0249  1D03               	skipz
  3604  024A  2A4D               	goto	u364_25
  3605  024B  30C8               	movlw	200
  3606  024C  025B               	subwf	_ADCResult^(0+128),w
  3607  024D                     u364_25:	
  3608  024D  1803               	skipnc
  3609  024E  2A53               	goto	i1l2826
  3610                           
  3611                           ;main.c: 212: PORTDbits.RD2 = 0;
  3612  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3613  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3614  0251  1108               	bcf	8,2	;volatile
  3615                           
  3616                           ;main.c: 213: PORTDbits.RD3 = 1;
  3617  0252  1588               	bsf	8,3	;volatile
  3618  0253                     i1l2826:	
  3619                           
  3620                           ;main.c: 214: }
  3621                           ;main.c: 216: if (ADCResult > 200) {
  3622  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3623  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3624  0255  085C               	movf	(_ADCResult+1)^(0+128),w
  3625  0256  3A80               	xorlw	128
  3626  0257  00FF               	movwf	127
  3627  0258  3080               	movlw	128
  3628  0259  027F               	subwf	127,w
  3629  025A  1D03               	skipz
  3630  025B  2A5E               	goto	u365_25
  3631  025C  30C9               	movlw	201
  3632  025D  025B               	subwf	_ADCResult^(0+128),w
  3633  025E                     u365_25:	
  3634  025E  1C03               	skipc
  3635  025F  2A64               	goto	i1l2836
  3636                           
  3637                           ;main.c: 217: PORTDbits.RD2 = 1;
  3638  0260  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0261  1303               	bcf	3,6	;RP1=0, select bank0
  3640  0262  1508               	bsf	8,2	;volatile
  3641                           
  3642                           ;main.c: 218: PORTDbits.RD3 = 0;
  3643  0263  1188               	bcf	8,3	;volatile
  3644  0264                     i1l2836:	
  3645                           ;main.c: 219: }
  3646                           ;main.c: 222: while (preint >= 0) {
  3647                           
  3648  0264  1683               	bsf	3,5	;RP0=1, select bank1
  3649  0265  1303               	bcf	3,6	;RP1=0, select bank1
  3650  0266  1BB9               	btfsc	(ISR@preint+1)^(0+128),7
  3651  0267  2A84               	goto	i1l2838
  3652                           
  3653                           ;main.c: 223: aux[i] = 0xFF;
  3654  0268  30FF               	movlw	255
  3655  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3656  026A  00D2               	movwf	??_ISR
  3657  026B  1683               	bsf	3,5	;RP0=1, select bank1
  3658  026C  1303               	bcf	3,6	;RP1=0, select bank1
  3659  026D  083A               	movf	ISR@i^(0+128),w
  3660  026E  3EA0               	addlw	ISR@aux& (0+255)
  3661  026F  0084               	movwf	4
  3662  0270  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0271  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0272  0852               	movf	??_ISR,w
  3665  0273  1383               	bcf	3,7	;select IRP bank1
  3666  0274  0080               	movwf	0
  3667                           
  3668                           ;main.c: 224: preint--;
  3669  0275  30FF               	movlw	255
  3670  0276  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0277  1303               	bcf	3,6	;RP1=0, select bank1
  3672  0278  07B8               	addwf	ISR@preint^(0+128),f
  3673  0279  1803               	skipnc
  3674  027A  0AB9               	incf	(ISR@preint+1)^(0+128),f
  3675  027B  30FF               	movlw	255
  3676  027C  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3677                           
  3678                           ;main.c: 225: i++;
  3679  027D  3001               	movlw	1
  3680  027E  07BA               	addwf	ISR@i^(0+128),f
  3681  027F  1803               	skipnc
  3682  0280  0ABB               	incf	(ISR@i+1)^(0+128),f
  3683  0281  3000               	movlw	0
  3684  0282  07BB               	addwf	(ISR@i+1)^(0+128),f
  3685  0283  2A64               	goto	i1l2836
  3686  0284                     i1l2838:	
  3687                           
  3688                           ;main.c: 226: }
  3689                           ;main.c: 227: result = &aux;
  3690  0284  30A0               	movlw	ISR@aux& (0+255)
  3691  0285  1283               	bcf	3,5	;RP0=0, select bank0
  3692  0286  1303               	bcf	3,6	;RP1=0, select bank0
  3693  0287  00D2               	movwf	??_ISR
  3694  0288  0852               	movf	??_ISR,w
  3695  0289  1683               	bsf	3,5	;RP0=1, select bank1
  3696  028A  1303               	bcf	3,6	;RP1=0, select bank1
  3697  028B  00BC               	movwf	ISR@result^(0+128)
  3698                           
  3699                           ;main.c: 229: lcd_escreve_string(result);
  3700  028C  083C               	movf	ISR@result^(0+128),w
  3701  028D  00FC               	movwf	i1lcd_escreve_string@y
  3702  028E  3000               	movlw	0
  3703  028F  00FD               	movwf	i1lcd_escreve_string@y+1
  3704  0290  160A  118A  27DD  120A  118A  	fcall	i1_lcd_escreve_string
  3705                           
  3706                           ;main.c: 252: _delay((unsigned long)((200)*(20000000/4000.0)));
  3707  0295  3006               	movlw	6
  3708  0296  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0297  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0298  00D4               	movwf	??_ISR+2
  3711  0299  3013               	movlw	19
  3712  029A  00D3               	movwf	??_ISR+1
  3713  029B  30B1               	movlw	177
  3714  029C  00D2               	movwf	??_ISR
  3715  029D                     u451_27:	
  3716  029D  0BD2               	decfsz	??_ISR,f
  3717  029E  2A9D               	goto	u451_27
  3718  029F  0BD3               	decfsz	??_ISR+1,f
  3719  02A0  2A9D               	goto	u451_27
  3720  02A1  0BD4               	decfsz	??_ISR+2,f
  3721  02A2  2A9D               	goto	u451_27
  3722  02A3  2AA4               	nop2
  3723                           
  3724                           ;main.c: 254: PIR1bits.ADIF = 0;
  3725  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3726  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3727  02A6  130C               	bcf	12,6	;volatile
  3728  02A7                     i1l2846:	
  3729                           
  3730                           ;main.c: 255: }
  3731                           ;main.c: 257: if (PIR1bits.RCIF) {
  3732  02A7  1E8C               	btfss	12,5	;volatile
  3733  02A8  2ABC               	goto	i1l125
  3734                           
  3735                           ;main.c: 259: USARTWriteString("\n\r Caracter Digitado :");
  3736  02A9  305B               	movlw	low (STR_5-__stringbase)
  3737  02AA  00F1               	movwf	USARTWriteString@str
  3738  02AB  3080               	movlw	128
  3739  02AC  00F2               	movwf	USARTWriteString@str+1
  3740  02AD  160A  118A  2797  120A  118A  	fcall	_USARTWriteString
  3741                           
  3742                           ;main.c: 260: USARTWriteChar(USARTReceiveChar());
  3743  02B2  160A  118A  2704  120A  118A  	fcall	_USARTReceiveChar
  3744  02B7  160A  118A  268D  120A  118A  	fcall	_USARTWriteChar
  3745  02BC                     i1l125:	
  3746  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  3747  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  3748  02BE  0859               	movf	??_ISR+7,w
  3749  02BF  00FF               	movwf	127
  3750  02C0  0858               	movf	??_ISR+6,w
  3751  02C1  008A               	movwf	10
  3752  02C2  0857               	movf	??_ISR+5,w
  3753  02C3  0084               	movwf	4
  3754  02C4  0E56               	swapf	(??_ISR+4)^0,w
  3755  02C5  0083               	movwf	3
  3756  02C6  0EFE               	swapf	126,f
  3757  02C7  0E7E               	swapf	126,w
  3758  02C8  0009               	retfie
  3759  02C9                     __end_of_ISR:	
  3760                           
  3761                           	psect	intentry
  3762  0004                     __pintentry:	
  3763                           ;incstack = 0
  3764 ;; hardware stack exceeded
  3765                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3766                           
  3767  0004                     interrupt_function:	
  3768  007E                     saved_w	set	btemp
  3769  0004  00FE               	movwf	btemp
  3770  0005  0E03               	swapf	3,w
  3771  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3772  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3773  0008  00D6               	movwf	??_ISR+4
  3774  0009  0804               	movf	4,w
  3775  000A  00D7               	movwf	??_ISR+5
  3776  000B  080A               	movf	10,w
  3777  000C  00D8               	movwf	??_ISR+6
  3778  000D  087F               	movf	btemp+1,w
  3779  000E  00D9               	movwf	??_ISR+7
  3780  000F  120A  118A  284B   	ljmp	_ISR
  3781                           
  3782                           	psect	text15
  3783  17DD                     __ptext15:	
  3784 ;; *************** function i1_lcd_escreve_string *****************
  3785 ;; Defined at:
  3786 ;;		line 168 in file "lcd_4bit.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  y               2   12[COMMON] PTR const unsigned char 
  3789 ;;		 -> ftoa@buf(17), STR_6(16), STR_4(2), STR_2(7), 
  3790 ;;		 -> ISR@aux(16), 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;		None
  3793 ;; Return value:  Size  Location     Type
  3794 ;;		None               void
  3795 ;; Registers used:
  3796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3802 ;;      Params:         2       0       0       0       0
  3803 ;;      Locals:         0       0       0       0       0
  3804 ;;      Temps:          0       0       0       0       0
  3805 ;;      Totals:         2       0       0       0       0
  3806 ;;Total ram usage:        2 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:    4
  3809 ;; This function calls:
  3810 ;;		i1_lcd_putc
  3811 ;; This function is called by:
  3812 ;;		_ISR
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816                           
  3817                           ;psect for function i1_lcd_escreve_string
  3818  17DD                     i1_lcd_escreve_string:	
  3819  17DD                     i1l2774:	
  3820                           ;lcd_4bit.c: 170: while(*y!='\0')
  3821                           
  3822                           ;incstack = 0
  3823 ;; hardware stack exceeded
  3824                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3825                           
  3826  17DD  087D               	movf	i1lcd_escreve_string@y+1,w
  3827  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  3828  17DF  1303               	bcf	3,6	;RP1=0, select bank0
  3829  17E0  00FF               	movwf	127
  3830  17E1  087C               	movf	i1lcd_escreve_string@y,w
  3831  17E2  0084               	movwf	4
  3832  17E3  120A  158A  2000  160A  118A  	fcall	stringtab
  3833  17E8  3800               	iorlw	0
  3834  17E9  1903               	btfsc	3,2
  3835  17EA  0008               	return
  3836                           
  3837                           ;lcd_4bit.c: 171: {
  3838                           ;lcd_4bit.c: 172: lcd_putc(*y);
  3839  17EB  087D               	movf	i1lcd_escreve_string@y+1,w
  3840  17EC  1283               	bcf	3,5	;RP0=0, select bank0
  3841  17ED  1303               	bcf	3,6	;RP1=0, select bank0
  3842  17EE  00FF               	movwf	127
  3843  17EF  087C               	movf	i1lcd_escreve_string@y,w
  3844  17F0  0084               	movwf	4
  3845  17F1  120A  158A  2000  160A  118A  	fcall	stringtab
  3846  17F6  120A  158A  21A5  160A  118A  	fcall	i1_lcd_putc
  3847                           
  3848                           ;lcd_4bit.c: 173: y++;
  3849  17FB  3001               	movlw	1
  3850  17FC  07FC               	addwf	i1lcd_escreve_string@y,f
  3851  17FD  1803               	skipnc
  3852  17FE  0AFD               	incf	i1lcd_escreve_string@y+1,f
  3853  17FF  2FDD               	goto	i1l2774
  3854  1800                     __end_ofi1_lcd_escreve_string:	
  3855                           
  3856                           	psect	text16
  3857  09A5                     __ptext16:	
  3858 ;; *************** function i1_lcd_putc *****************
  3859 ;; Defined at:
  3860 ;;		line 82 in file "lcd_4bit.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  c               1    wreg     unsigned char 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  c               1   11[COMMON] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;		None               void
  3867 ;; Registers used:
  3868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3874 ;;      Params:         0       0       0       0       0
  3875 ;;      Locals:         1       0       0       0       0
  3876 ;;      Temps:          2       0       0       0       0
  3877 ;;      Totals:         3       0       0       0       0
  3878 ;;Total ram usage:        3 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    3
  3881 ;; This function calls:
  3882 ;;		i1_lcd_envia_byte
  3883 ;;		i1_lcd_gotoxy
  3884 ;; This function is called by:
  3885 ;;		i1_lcd_escreve_string
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           
  3890                           ;psect for function i1_lcd_putc
  3891  09A5                     i1_lcd_putc:	
  3892                           
  3893                           ;incstack = 0
  3894 ;; hardware stack exceeded
  3895                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3896                           ;i1lcd_putc@c stored from wreg
  3897  09A5  00FB               	movwf	i1lcd_putc@c
  3898                           
  3899                           ;lcd_4bit.c: 84: switch(c)
  3900  09A6  29D4               	goto	i1l2526
  3901  09A7                     i1l2514:	
  3902                           ;lcd_4bit.c: 85: {
  3903                           ;lcd_4bit.c: 86: case '\f':
  3904                           
  3905                           
  3906                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  3907  09A7  01F2               	clrf	i1lcd_envia_byte@n
  3908  09A8  0AF2               	incf	i1lcd_envia_byte@n,f
  3909  09A9  3000               	movlw	0
  3910  09AA  120A  158A  20DB  120A  158A  	fcall	i1_lcd_envia_byte
  3911                           
  3912                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3913  09AF  300D               	movlw	13
  3914  09B0  00FA               	movwf	??i1_lcd_putc+1
  3915  09B1  30FB               	movlw	251
  3916  09B2  00F9               	movwf	??i1_lcd_putc
  3917  09B3                     u452_27:	
  3918  09B3  0BF9               	decfsz	??i1_lcd_putc,f
  3919  09B4  29B3               	goto	u452_27
  3920  09B5  0BFA               	decfsz	??i1_lcd_putc+1,f
  3921  09B6  29B3               	goto	u452_27
  3922  09B7  29B8               	nop2
  3923                           
  3924                           ;lcd_4bit.c: 89: break;
  3925  09B8  0008               	return
  3926  09B9                     i1l2518:	
  3927                           ;lcd_4bit.c: 91: case '\n':
  3928                           
  3929                           
  3930                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  3931  09B9  3002               	movlw	2
  3932  09BA  00F9               	movwf	??i1_lcd_putc
  3933  09BB  0879               	movf	??i1_lcd_putc,w
  3934  09BC  00F5               	movwf	i1lcd_gotoxy@y
  3935  09BD  3001               	movlw	1
  3936  09BE  160A  118A  26EA   	fcall	i1_lcd_gotoxy
  3937                           
  3938                           ;lcd_4bit.c: 93: break;
  3939  09C1  0008               	return
  3940  09C2                     i1l2520:	
  3941                           ;lcd_4bit.c: 95: case '\b':
  3942                           
  3943                           
  3944                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  3945  09C2  3010               	movlw	16
  3946  09C3  00F9               	movwf	??i1_lcd_putc
  3947  09C4  0879               	movf	??i1_lcd_putc,w
  3948  09C5  00F2               	movwf	i1lcd_envia_byte@n
  3949  09C6  3000               	movlw	0
  3950  09C7  120A  158A  20DB   	fcall	i1_lcd_envia_byte
  3951                           
  3952                           ;lcd_4bit.c: 97: break;
  3953  09CA  0008               	return
  3954  09CB                     i1l2522:	
  3955                           ;lcd_4bit.c: 99: default:
  3956                           
  3957                           
  3958                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  3959  09CB  087B               	movf	i1lcd_putc@c,w
  3960  09CC  00F9               	movwf	??i1_lcd_putc
  3961  09CD  0879               	movf	??i1_lcd_putc,w
  3962  09CE  00F2               	movwf	i1lcd_envia_byte@n
  3963  09CF  3001               	movlw	1
  3964  09D0  120A  158A  20DB   	fcall	i1_lcd_envia_byte
  3965                           
  3966                           ;lcd_4bit.c: 102: }
  3967                           
  3968                           ;lcd_4bit.c: 101: break;
  3969  09D3  0008               	return
  3970  09D4                     i1l2526:	
  3971  09D4  087B               	movf	i1lcd_putc@c,w
  3972                           
  3973                           ; Switch size 1, requested type "space"
  3974                           ; Number of cases is 3, Range of values is 8 to 12
  3975                           ; switch strategies available:
  3976                           ; Name         Instructions Cycles
  3977                           ; simple_byte           10     6 (average)
  3978                           ; direct_byte           26    11 (fixed)
  3979                           ; jumptable            263     9 (fixed)
  3980                           ;	Chosen strategy is simple_byte
  3981  09D5  3A08               	xorlw	8	; case 8
  3982  09D6  1903               	skipnz
  3983  09D7  29C2               	goto	i1l2520
  3984  09D8  3A02               	xorlw	2	; case 10
  3985  09D9  1903               	skipnz
  3986  09DA  29B9               	goto	i1l2518
  3987  09DB  3A06               	xorlw	6	; case 12
  3988  09DC  1903               	skipnz
  3989  09DD  29A7               	goto	i1l2514
  3990  09DE  29CB               	goto	i1l2522
  3991  09DF  0008               	return
  3992  09E0                     __end_ofi1_lcd_putc:	
  3993                           
  3994                           	psect	text17
  3995  16EA                     __ptext17:	
  3996 ;; *************** function i1_lcd_gotoxy *****************
  3997 ;; Defined at:
  3998 ;;		line 70 in file "lcd_4bit.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  x               1    wreg     unsigned char 
  4001 ;;  y               1    5[COMMON] unsigned char 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  x               1    7[COMMON] unsigned char 
  4004 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4014 ;;      Params:         1       0       0       0       0
  4015 ;;      Locals:         2       0       0       0       0
  4016 ;;      Temps:          1       0       0       0       0
  4017 ;;      Totals:         4       0       0       0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    2
  4021 ;; This function calls:
  4022 ;;		i1_lcd_envia_byte
  4023 ;; This function is called by:
  4024 ;;		_ISR
  4025 ;;		i1_lcd_putc
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           
  4030                           ;psect for function i1_lcd_gotoxy
  4031  16EA                     i1_lcd_gotoxy:	
  4032                           
  4033                           ;incstack = 0
  4034 ;; hardware stack exceeded
  4035                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4036                           ;i1lcd_gotoxy@x stored from wreg
  4037  16EA  00F7               	movwf	i1lcd_gotoxy@x
  4038                           
  4039                           ;lcd_4bit.c: 72: unsigned char address;
  4040                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  4041  16EB  0875               	movf	i1lcd_gotoxy@y,w
  4042  16EC  3A01               	xorlw	1
  4043  16ED  1903               	skipnz
  4044  16EE  2EF4               	goto	i1l2152
  4045  16EF  3040               	movlw	64
  4046  16F0  00F6               	movwf	??i1_lcd_gotoxy
  4047  16F1  0876               	movf	??i1_lcd_gotoxy,w
  4048  16F2  00F8               	movwf	i1lcd_gotoxy@address
  4049  16F3  2EF5               	goto	i1l2154
  4050  16F4                     i1l2152:	
  4051                           
  4052                           ;lcd_4bit.c: 75: else address=0;
  4053  16F4  01F8               	clrf	i1lcd_gotoxy@address
  4054  16F5                     i1l2154:	
  4055                           
  4056                           ;lcd_4bit.c: 77: address += x-1;
  4057  16F5  0877               	movf	i1lcd_gotoxy@x,w
  4058  16F6  3EFF               	addlw	255
  4059  16F7  00F6               	movwf	??i1_lcd_gotoxy
  4060  16F8  0876               	movf	??i1_lcd_gotoxy,w
  4061  16F9  07F8               	addwf	i1lcd_gotoxy@address,f
  4062                           
  4063                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  4064  16FA  0878               	movf	i1lcd_gotoxy@address,w
  4065  16FB  3880               	iorlw	128
  4066  16FC  00F6               	movwf	??i1_lcd_gotoxy
  4067  16FD  0876               	movf	??i1_lcd_gotoxy,w
  4068  16FE  00F2               	movwf	i1lcd_envia_byte@n
  4069  16FF  3000               	movlw	0
  4070  1700  120A  158A  20DB   	fcall	i1_lcd_envia_byte
  4071  1703  0008               	return
  4072  1704                     __end_ofi1_lcd_gotoxy:	
  4073                           
  4074                           	psect	text18
  4075  08DB                     __ptext18:	
  4076 ;; *************** function i1_lcd_envia_byte *****************
  4077 ;; Defined at:
  4078 ;;		line 53 in file "lcd_4bit.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  address         1    wreg     unsigned char 
  4081 ;;  n               1    2[COMMON] unsigned char 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  address         1    4[COMMON] unsigned char 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;		None               void
  4086 ;; Registers used:
  4087 ;;		wreg, status,2, status,0, pclath, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4093 ;;      Params:         1       0       0       0       0
  4094 ;;      Locals:         1       0       0       0       0
  4095 ;;      Temps:          1       0       0       0       0
  4096 ;;      Totals:         3       0       0       0       0
  4097 ;;Total ram usage:        3 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    1
  4100 ;; This function calls:
  4101 ;;		i1_lcd_envia_nibble
  4102 ;; This function is called by:
  4103 ;;		i1_lcd_gotoxy
  4104 ;;		i1_lcd_putc
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function i1_lcd_envia_byte
  4110  08DB                     i1_lcd_envia_byte:	
  4111                           
  4112                           ;incstack = 0
  4113 ;; hardware stack exceeded
  4114                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  4115                           ;i1lcd_envia_byte@address stored from wreg
  4116  08DB  00F4               	movwf	i1lcd_envia_byte@address
  4117                           
  4118                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  4119  08DC  1283               	bcf	3,5	;RP0=0, select bank0
  4120  08DD  1303               	bcf	3,6	;RP1=0, select bank0
  4121  08DE  1286               	bcf	6,5	;volatile
  4122                           
  4123                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  4124  08DF  3063               	movlw	99
  4125  08E0  00F3               	movwf	??i1_lcd_envia_byte
  4126  08E1                     u453_27:	
  4127  08E1  0BF3               	decfsz	??i1_lcd_envia_byte,f
  4128  08E2  28E1               	goto	u453_27
  4129  08E3  28E4               	nop2	;nop
  4130                           
  4131                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  4132  08E4  0874               	movf	i1lcd_envia_byte@address,w
  4133  08E5  1903               	btfsc	3,2
  4134  08E6  28EB               	goto	i1l172
  4135  08E7  1283               	bcf	3,5	;RP0=0, select bank0
  4136  08E8  1303               	bcf	3,6	;RP1=0, select bank0
  4137  08E9  1686               	bsf	6,5	;volatile
  4138  08EA  28EE               	goto	i1l173
  4139  08EB                     i1l172:	
  4140                           
  4141                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  4142  08EB  1283               	bcf	3,5	;RP0=0, select bank0
  4143  08EC  1303               	bcf	3,6	;RP1=0, select bank0
  4144  08ED  1286               	bcf	6,5	;volatile
  4145  08EE                     i1l173:	
  4146                           
  4147                           ;lcd_4bit.c: 61: _delay(1);
  4148  08EE  0000               	nop
  4149                           
  4150                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  4151  08EF  1283               	bcf	3,5	;RP0=0, select bank0
  4152  08F0  1303               	bcf	3,6	;RP1=0, select bank0
  4153  08F1  1206               	bcf	6,4	;volatile
  4154                           
  4155                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  4156  08F2  0872               	movf	i1lcd_envia_byte@n,w
  4157  08F3  00F3               	movwf	??i1_lcd_envia_byte
  4158  08F4  3004               	movlw	4
  4159  08F5                     u210_25:	
  4160  08F5  1003               	clrc
  4161  08F6  0CF3               	rrf	??i1_lcd_envia_byte,f
  4162  08F7  3EFF               	addlw	-1
  4163  08F8  1D03               	skipz
  4164  08F9  28F5               	goto	u210_25
  4165  08FA  0873               	movf	??i1_lcd_envia_byte,w
  4166  08FB  120A  158A  216C  120A  158A  	fcall	i1_lcd_envia_nibble
  4167                           
  4168                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  4169  0900  0872               	movf	i1lcd_envia_byte@n,w
  4170  0901  390F               	andlw	15
  4171  0902  120A  158A  216C   	fcall	i1_lcd_envia_nibble
  4172  0905  0008               	return
  4173  0906                     __end_ofi1_lcd_envia_byte:	
  4174                           
  4175                           	psect	text19
  4176  096C                     __ptext19:	
  4177 ;; *************** function i1_lcd_envia_nibble *****************
  4178 ;; Defined at:
  4179 ;;		line 39 in file "lcd_4bit.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  n               1    wreg     unsigned char 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  n               1    1[COMMON] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;		None               void
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4193 ;;      Params:         0       0       0       0       0
  4194 ;;      Locals:         1       0       0       0       0
  4195 ;;      Temps:          1       0       0       0       0
  4196 ;;      Totals:         2       0       0       0       0
  4197 ;;Total ram usage:        2 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		i1_lcd_envia_byte
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           
  4207                           ;psect for function i1_lcd_envia_nibble
  4208  096C                     i1_lcd_envia_nibble:	
  4209                           
  4210                           ;incstack = 0
  4211 ;; hardware stack exceeded
  4212                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  4213                           ;i1lcd_envia_nibble@n stored from wreg
  4214  096C  00F1               	movwf	i1lcd_envia_nibble@n
  4215                           
  4216                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  4217  096D  3000               	movlw	0
  4218  096E  1871               	btfsc	i1lcd_envia_nibble@n,0
  4219  096F  3001               	movlw	1
  4220  0970  00F0               	movwf	??i1_lcd_envia_nibble
  4221  0971  1283               	bcf	3,5	;RP0=0, select bank0
  4222  0972  1303               	bcf	3,6	;RP1=0, select bank0
  4223  0973  0806               	movf	6,w	;volatile
  4224  0974  0670               	xorwf	??i1_lcd_envia_nibble,w
  4225  0975  39FE               	andlw	-2
  4226  0976  0670               	xorwf	??i1_lcd_envia_nibble,w
  4227  0977  0086               	movwf	6	;volatile
  4228                           
  4229                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  4230  0978  3000               	movlw	0
  4231  0979  18F1               	btfsc	i1lcd_envia_nibble@n,1
  4232  097A  3001               	movlw	1
  4233  097B  00F0               	movwf	??i1_lcd_envia_nibble
  4234  097C  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4235  097D  0806               	movf	6,w	;volatile
  4236  097E  0670               	xorwf	??i1_lcd_envia_nibble,w
  4237  097F  39FD               	andlw	-3
  4238  0980  0670               	xorwf	??i1_lcd_envia_nibble,w
  4239  0981  0086               	movwf	6	;volatile
  4240                           
  4241                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  4242  0982  3000               	movlw	0
  4243  0983  1971               	btfsc	i1lcd_envia_nibble@n,2
  4244  0984  3001               	movlw	1
  4245  0985  00F0               	movwf	??i1_lcd_envia_nibble
  4246  0986  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4247  0987  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4248  0988  0806               	movf	6,w	;volatile
  4249  0989  0670               	xorwf	??i1_lcd_envia_nibble,w
  4250  098A  39FB               	andlw	-5
  4251  098B  0670               	xorwf	??i1_lcd_envia_nibble,w
  4252  098C  0086               	movwf	6	;volatile
  4253                           
  4254                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  4255  098D  3000               	movlw	0
  4256  098E  19F1               	btfsc	i1lcd_envia_nibble@n,3
  4257  098F  3001               	movlw	1
  4258  0990  00F0               	movwf	??i1_lcd_envia_nibble
  4259  0991  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4260  0992  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4261  0993  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4262  0994  0806               	movf	6,w	;volatile
  4263  0995  0670               	xorwf	??i1_lcd_envia_nibble,w
  4264  0996  39F7               	andlw	-9
  4265  0997  0670               	xorwf	??i1_lcd_envia_nibble,w
  4266  0998  0086               	movwf	6	;volatile
  4267                           
  4268                           ;lcd_4bit.c: 46: _delay(1);
  4269  0999  0000               	nop
  4270                           
  4271                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  4272  099A  1283               	bcf	3,5	;RP0=0, select bank0
  4273  099B  1303               	bcf	3,6	;RP1=0, select bank0
  4274  099C  1606               	bsf	6,4	;volatile
  4275                           
  4276                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  4277  099D  3003               	movlw	3
  4278  099E  00F0               	movwf	??i1_lcd_envia_nibble
  4279  099F                     u454_27:	
  4280  099F  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  4281  09A0  299F               	goto	u454_27
  4282                           
  4283                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  4284  09A1  1283               	bcf	3,5	;RP0=0, select bank0
  4285  09A2  1303               	bcf	3,6	;RP1=0, select bank0
  4286  09A3  1206               	bcf	6,4	;volatile
  4287  09A4  0008               	return
  4288  09A5                     __end_ofi1_lcd_envia_nibble:	
  4289                           
  4290                           	psect	text20
  4291  06DF                     __ptext20:	
  4292 ;; *************** function _ftoa *****************
  4293 ;; Defined at:
  4294 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  f               3   36[BANK0 ] float 
  4297 ;;  status          1   39[BANK0 ] PTR int 
  4298 ;;		 -> ISR@status2(2), ISR@status(2), 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  l               4   45[BANK0 ] unsigned long 
  4301 ;;  rem             4   41[BANK0 ] unsigned long 
  4302 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4303 ;;		 -> ftoa@buf(17), 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      PTR unsigned char 
  4306 ;; Registers used:
  4307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4313 ;;      Params:         0       4       0       0       0
  4314 ;;      Locals:         0       9       0       0       0
  4315 ;;      Temps:          0       1       0       0       0
  4316 ;;      Totals:         0      14       0       0       0
  4317 ;;Total ram usage:       14 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    3
  4320 ;; This function calls:
  4321 ;;		___ftge
  4322 ;;		___ftmul
  4323 ;;		___ftneg
  4324 ;;		___ftsub
  4325 ;;		___fttol
  4326 ;;		___lltoft
  4327 ;;		_sprintf
  4328 ;; This function is called by:
  4329 ;;		_ISR
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           
  4334                           ;psect for function _ftoa
  4335  06DF                     _ftoa:	
  4336                           
  4337                           ;incstack = 0
  4338 ;; hardware stack exceeded
  4339                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4340  06DF  30AE               	movlw	ftoa@buf& (0+255)
  4341  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  4342  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  4343  06E2  00C8               	movwf	??_ftoa
  4344  06E3  0848               	movf	??_ftoa,w
  4345  06E4  00D1               	movwf	ftoa@cp
  4346  06E5  0844               	movf	ftoa@f,w
  4347  06E6  00F0               	movwf	___ftge@ff1
  4348  06E7  0845               	movf	ftoa@f+1,w
  4349  06E8  00F1               	movwf	___ftge@ff1+1
  4350  06E9  0846               	movf	ftoa@f+2,w
  4351  06EA  00F2               	movwf	___ftge@ff1+2
  4352  06EB  3000               	movlw	0
  4353  06EC  00F3               	movwf	___ftge@ff2
  4354  06ED  3000               	movlw	0
  4355  06EE  00F4               	movwf	___ftge@ff2+1
  4356  06EF  3000               	movlw	0
  4357  06F0  00F5               	movwf	___ftge@ff2+2
  4358  06F1  120A  158A  2414  120A  118A  	fcall	___ftge
  4359  06F6  1803               	btfsc	3,0
  4360  06F7  2F18               	goto	i1l2558
  4361  06F8  302D               	movlw	45
  4362  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  4363  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  4364  06FB  00C8               	movwf	??_ftoa
  4365  06FC  0851               	movf	ftoa@cp,w
  4366  06FD  0084               	movwf	4
  4367  06FE  0848               	movf	??_ftoa,w
  4368  06FF  1783               	bsf	3,7	;select IRP bank2
  4369  0700  0080               	movwf	0
  4370  0701  3001               	movlw	1
  4371  0702  00C8               	movwf	??_ftoa
  4372  0703  0848               	movf	??_ftoa,w
  4373  0704  07D1               	addwf	ftoa@cp,f
  4374  0705  0844               	movf	ftoa@f,w
  4375  0706  00F0               	movwf	___ftneg@f1
  4376  0707  0845               	movf	ftoa@f+1,w
  4377  0708  00F1               	movwf	___ftneg@f1+1
  4378  0709  0846               	movf	ftoa@f+2,w
  4379  070A  00F2               	movwf	___ftneg@f1+2
  4380  070B  160A  118A  2695  120A  118A  	fcall	___ftneg
  4381  0710  0870               	movf	?___ftneg,w
  4382  0711  1283               	bcf	3,5	;RP0=0, select bank0
  4383  0712  1303               	bcf	3,6	;RP1=0, select bank0
  4384  0713  00C4               	movwf	ftoa@f
  4385  0714  0871               	movf	?___ftneg+1,w
  4386  0715  00C5               	movwf	ftoa@f+1
  4387  0716  0872               	movf	?___ftneg+2,w
  4388  0717  00C6               	movwf	ftoa@f+2
  4389  0718                     i1l2558:	
  4390  0718  1283               	bcf	3,5	;RP0=0, select bank0
  4391  0719  1303               	bcf	3,6	;RP1=0, select bank0
  4392  071A  0844               	movf	ftoa@f,w
  4393  071B  00B0               	movwf	___fttol@f1
  4394  071C  0845               	movf	ftoa@f+1,w
  4395  071D  00B1               	movwf	___fttol@f1+1
  4396  071E  0846               	movf	ftoa@f+2,w
  4397  071F  00B2               	movwf	___fttol@f1+2
  4398  0720  120A  158A  262B  120A  118A  	fcall	___fttol
  4399  0725  1283               	bcf	3,5	;RP0=0, select bank0
  4400  0726  1303               	bcf	3,6	;RP1=0, select bank0
  4401  0727  0833               	movf	?___fttol+3,w
  4402  0728  00D0               	movwf	ftoa@l+3
  4403  0729  0832               	movf	?___fttol+2,w
  4404  072A  00CF               	movwf	ftoa@l+2
  4405  072B  0831               	movf	?___fttol+1,w
  4406  072C  00CE               	movwf	ftoa@l+1
  4407  072D  0830               	movf	?___fttol,w
  4408  072E  00CD               	movwf	ftoa@l
  4409  072F  0850               	movf	ftoa@l+3,w
  4410  0730  00FB               	movwf	___lltoft@c+3
  4411  0731  084F               	movf	ftoa@l+2,w
  4412  0732  00FA               	movwf	___lltoft@c+2
  4413  0733  084E               	movf	ftoa@l+1,w
  4414  0734  00F9               	movwf	___lltoft@c+1
  4415  0735  084D               	movf	ftoa@l,w
  4416  0736  00F8               	movwf	___lltoft@c
  4417  0737  120A  158A  20B0  120A  118A  	fcall	___lltoft
  4418  073C  0878               	movf	?___lltoft,w
  4419  073D  1283               	bcf	3,5	;RP0=0, select bank0
  4420  073E  1303               	bcf	3,6	;RP1=0, select bank0
  4421  073F  00A7               	movwf	___ftsub@f2
  4422  0740  0879               	movf	?___lltoft+1,w
  4423  0741  00A8               	movwf	___ftsub@f2+1
  4424  0742  087A               	movf	?___lltoft+2,w
  4425  0743  00A9               	movwf	___ftsub@f2+2
  4426  0744  0844               	movf	ftoa@f,w
  4427  0745  00AA               	movwf	___ftsub@f1
  4428  0746  0845               	movf	ftoa@f+1,w
  4429  0747  00AB               	movwf	___ftsub@f1+1
  4430  0748  0846               	movf	ftoa@f+2,w
  4431  0749  00AC               	movwf	___ftsub@f1+2
  4432  074A  160A  118A  271F  120A  118A  	fcall	___ftsub
  4433  074F  1283               	bcf	3,5	;RP0=0, select bank0
  4434  0750  1303               	bcf	3,6	;RP1=0, select bank0
  4435  0751  0827               	movf	?___ftsub,w
  4436  0752  00C4               	movwf	ftoa@f
  4437  0753  0828               	movf	?___ftsub+1,w
  4438  0754  00C5               	movwf	ftoa@f+1
  4439  0755  0829               	movf	?___ftsub+2,w
  4440  0756  00C6               	movwf	ftoa@f+2
  4441  0757  0844               	movf	ftoa@f,w
  4442  0758  00A3               	movwf	___ftmul@f2
  4443  0759  0845               	movf	ftoa@f+1,w
  4444  075A  00A4               	movwf	___ftmul@f2+1
  4445  075B  0846               	movf	ftoa@f+2,w
  4446  075C  00A5               	movwf	___ftmul@f2+2
  4447  075D  3024               	movlw	36
  4448  075E  00A0               	movwf	___ftmul@f1
  4449  075F  3074               	movlw	116
  4450  0760  00A1               	movwf	___ftmul@f1+1
  4451  0761  3049               	movlw	73
  4452  0762  00A2               	movwf	___ftmul@f1+2
  4453  0763  120A  118A  260C  120A  118A  	fcall	___ftmul
  4454  0768  1283               	bcf	3,5	;RP0=0, select bank0
  4455  0769  1303               	bcf	3,6	;RP1=0, select bank0
  4456  076A  0820               	movf	?___ftmul,w
  4457  076B  00B0               	movwf	___fttol@f1
  4458  076C  0821               	movf	?___ftmul+1,w
  4459  076D  00B1               	movwf	___fttol@f1+1
  4460  076E  0822               	movf	?___ftmul+2,w
  4461  076F  00B2               	movwf	___fttol@f1+2
  4462  0770  120A  158A  262B  120A  118A  	fcall	___fttol
  4463  0775  1283               	bcf	3,5	;RP0=0, select bank0
  4464  0776  1303               	bcf	3,6	;RP1=0, select bank0
  4465  0777  0833               	movf	?___fttol+3,w
  4466  0778  00CC               	movwf	ftoa@rem+3
  4467  0779  0832               	movf	?___fttol+2,w
  4468  077A  00CB               	movwf	ftoa@rem+2
  4469  077B  0831               	movf	?___fttol+1,w
  4470  077C  00CA               	movwf	ftoa@rem+1
  4471  077D  0830               	movf	?___fttol,w
  4472  077E  00C9               	movwf	ftoa@rem
  4473  077F  3082               	movlw	(STR_7-__stringbase)& (0+255)
  4474  0780  00C8               	movwf	??_ftoa
  4475  0781  0848               	movf	??_ftoa,w
  4476  0782  00AA               	movwf	sprintf@f
  4477  0783  0850               	movf	ftoa@l+3,w
  4478  0784  00AE               	movwf	?_sprintf+4
  4479  0785  084F               	movf	ftoa@l+2,w
  4480  0786  00AD               	movwf	?_sprintf+3
  4481  0787  084E               	movf	ftoa@l+1,w
  4482  0788  00AC               	movwf	?_sprintf+2
  4483  0789  084D               	movf	ftoa@l,w
  4484  078A  00AB               	movwf	?_sprintf+1
  4485  078B  084C               	movf	ftoa@rem+3,w
  4486  078C  00B2               	movwf	?_sprintf+8
  4487  078D  084B               	movf	ftoa@rem+2,w
  4488  078E  00B1               	movwf	?_sprintf+7
  4489  078F  084A               	movf	ftoa@rem+1,w
  4490  0790  00B0               	movwf	?_sprintf+6
  4491  0791  0849               	movf	ftoa@rem,w
  4492  0792  00AF               	movwf	?_sprintf+5
  4493  0793  0851               	movf	ftoa@cp,w
  4494  0794  120A  118A  22C9   	fcall	_sprintf
  4495  0797  30AE               	movlw	ftoa@buf& (0+255)
  4496  0798  0008               	return
  4497  0799                     __end_of_ftoa:	
  4498                           
  4499                           	psect	text21
  4500  02C9                     __ptext21:	
  4501 ;; *************** function _sprintf *****************
  4502 ;; Defined at:
  4503 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;  sp              1    wreg     PTR unsigned char 
  4506 ;;		 -> ftoa@buf(17), 
  4507 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4508 ;;		 -> STR_7(11), 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4511 ;;		 -> ftoa@buf(17), 
  4512 ;;  _val            4   26[BANK0 ] struct .
  4513 ;;  prec            2   33[BANK0 ] int 
  4514 ;;  width           2   31[BANK0 ] int 
  4515 ;;  c               1   35[BANK0 ] char 
  4516 ;;  ap              1   25[BANK0 ] PTR void [1]
  4517 ;;		 -> ?_sprintf(2), 
  4518 ;;  flag            1   24[BANK0 ] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  2   10[BANK0 ] int 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4528 ;;      Params:         0       9       0       0       0
  4529 ;;      Locals:         0      12       0       0       0
  4530 ;;      Temps:          0       5       0       0       0
  4531 ;;      Totals:         0      26       0       0       0
  4532 ;;Total ram usage:       26 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    1
  4535 ;; This function calls:
  4536 ;;		___lldiv
  4537 ;;		___llmod
  4538 ;;		___wmul
  4539 ;;		_isdigit
  4540 ;; This function is called by:
  4541 ;;		_ftoa
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _sprintf
  4547  02C9                     _sprintf:	
  4548                           
  4549                           ;incstack = 0
  4550 ;; hardware stack exceeded
  4551                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4552                           ;sprintf@sp stored from wreg
  4553  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  4554  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  4555  02CB  00BE               	movwf	sprintf@sp
  4556                           
  4557                           ;doprnt.c: 494: va_list ap;
  4558                           ;doprnt.c: 499: signed char c;
  4559                           ;doprnt.c: 501: int width;
  4560                           ;doprnt.c: 504: int prec;
  4561                           ;doprnt.c: 508: unsigned char flag;
  4562                           ;doprnt.c: 527: union {
  4563                           ;doprnt.c: 528: unsigned long _val;
  4564                           ;doprnt.c: 529: struct {
  4565                           ;doprnt.c: 530: const char * _cp;
  4566                           ;doprnt.c: 531: unsigned _len;
  4567                           ;doprnt.c: 532: } _str;
  4568                           ;doprnt.c: 533: } _val;
  4569                           ;doprnt.c: 542: *ap = __va_start();
  4570  02CC  302B               	movlw	(?_sprintf+1)& (0+255)
  4571  02CD  00B3               	movwf	??_sprintf
  4572  02CE  0833               	movf	??_sprintf,w
  4573  02CF  00B9               	movwf	sprintf@ap
  4574  02D0                     i1l2368:	
  4575                           ;doprnt.c: 545: while(c = *f++) {
  4576                           
  4577  02D0  3001               	movlw	1
  4578  02D1  07AA               	addwf	sprintf@f,f
  4579  02D2  30FF               	movlw	-1
  4580  02D3  072A               	addwf	sprintf@f,w
  4581  02D4  0084               	movwf	4
  4582  02D5  120A  158A  200A  120A  118A  	fcall	stringdir
  4583  02DA  00B3               	movwf	??_sprintf
  4584  02DB  0833               	movf	??_sprintf,w
  4585  02DC  00C3               	movwf	sprintf@c
  4586  02DD  08C3               	movf	sprintf@c,f
  4587  02DE  1903               	btfsc	3,2
  4588  02DF  2D00               	goto	i1l2370
  4589                           
  4590                           ;doprnt.c: 547: if(c != '%')
  4591  02E0  0843               	movf	sprintf@c,w
  4592  02E1  3A25               	xorlw	37
  4593  02E2  1903               	skipnz
  4594  02E3  2AF0               	goto	i1l2278
  4595                           
  4596                           ;doprnt.c: 549: {
  4597                           ;doprnt.c: 550: ((*sp++ = (c)));
  4598  02E4  0843               	movf	sprintf@c,w
  4599  02E5  00B3               	movwf	??_sprintf
  4600  02E6  083E               	movf	sprintf@sp,w
  4601  02E7  0084               	movwf	4
  4602  02E8  0833               	movf	??_sprintf,w
  4603  02E9  1783               	bsf	3,7	;select IRP bank2
  4604  02EA  0080               	movwf	0
  4605  02EB  3001               	movlw	1
  4606  02EC  00B3               	movwf	??_sprintf
  4607  02ED  0833               	movf	??_sprintf,w
  4608  02EE  07BE               	addwf	sprintf@sp,f
  4609                           
  4610                           ;doprnt.c: 551: continue;
  4611  02EF  2AD0               	goto	i1l2368
  4612  02F0                     i1l2278:	
  4613                           
  4614                           ;doprnt.c: 552: }
  4615                           ;doprnt.c: 555: width = 0;
  4616  02F0  01BF               	clrf	sprintf@width
  4617  02F1  01C0               	clrf	sprintf@width+1
  4618                           
  4619                           ;doprnt.c: 557: flag = 0;
  4620  02F2  01B8               	clrf	sprintf@flag
  4621                           
  4622                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4623  02F3  082A               	movf	sprintf@f,w
  4624  02F4  0084               	movwf	4
  4625  02F5  120A  158A  200A  120A  118A  	fcall	stringdir
  4626  02FA  160A  118A  26A8  120A  118A  	fcall	_isdigit
  4627  02FF  1C03               	btfss	3,0
  4628  0300  2B43               	goto	i1l2292
  4629                           
  4630                           ;doprnt.c: 607: width = 0;
  4631  0301  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0302  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0303  01BF               	clrf	sprintf@width
  4634  0304  01C0               	clrf	sprintf@width+1
  4635  0305                     i1l2284:	
  4636                           ;doprnt.c: 608: do {
  4637                           
  4638                           
  4639                           ;doprnt.c: 609: width *= 10;
  4640  0305  300A               	movlw	10
  4641  0306  00F0               	movwf	___wmul@multiplier
  4642  0307  3000               	movlw	0
  4643  0308  00F1               	movwf	___wmul@multiplier+1
  4644  0309  1283               	bcf	3,5	;RP0=0, select bank0
  4645  030A  1303               	bcf	3,6	;RP1=0, select bank0
  4646  030B  0840               	movf	sprintf@width+1,w
  4647  030C  01F3               	clrf	___wmul@multiplicand+1
  4648  030D  07F3               	addwf	___wmul@multiplicand+1,f
  4649  030E  083F               	movf	sprintf@width,w
  4650  030F  01F2               	clrf	___wmul@multiplicand
  4651  0310  07F2               	addwf	___wmul@multiplicand,f
  4652  0311  160A  118A  27BA  120A  118A  	fcall	___wmul
  4653  0316  0871               	movf	?___wmul+1,w
  4654  0317  1283               	bcf	3,5	;RP0=0, select bank0
  4655  0318  1303               	bcf	3,6	;RP1=0, select bank0
  4656  0319  01C0               	clrf	sprintf@width+1
  4657  031A  07C0               	addwf	sprintf@width+1,f
  4658  031B  0870               	movf	?___wmul,w
  4659  031C  01BF               	clrf	sprintf@width
  4660  031D  07BF               	addwf	sprintf@width,f
  4661                           
  4662                           ;doprnt.c: 610: width += *f++ - '0';
  4663  031E  082A               	movf	sprintf@f,w
  4664  031F  0084               	movwf	4
  4665  0320  120A  158A  200A  120A  118A  	fcall	stringdir
  4666  0325  3ED0               	addlw	208
  4667  0326  00B3               	movwf	??_sprintf
  4668  0327  30FF               	movlw	255
  4669  0328  1803               	skipnc
  4670  0329  3000               	movlw	0
  4671  032A  00B4               	movwf	??_sprintf+1
  4672  032B  0833               	movf	??_sprintf,w
  4673  032C  07BF               	addwf	sprintf@width,f
  4674  032D  1803               	skipnc
  4675  032E  0AC0               	incf	sprintf@width+1,f
  4676  032F  0834               	movf	??_sprintf+1,w
  4677  0330  07C0               	addwf	sprintf@width+1,f
  4678  0331  3001               	movlw	1
  4679  0332  00B3               	movwf	??_sprintf
  4680  0333  0833               	movf	??_sprintf,w
  4681  0334  07AA               	addwf	sprintf@f,f
  4682                           
  4683                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4684  0335  082A               	movf	sprintf@f,w
  4685  0336  0084               	movwf	4
  4686  0337  120A  158A  200A  120A  118A  	fcall	stringdir
  4687  033C  160A  118A  26A8  120A  118A  	fcall	_isdigit
  4688  0341  1803               	btfsc	3,0
  4689  0342  2B05               	goto	i1l2284
  4690  0343                     i1l2292:	
  4691                           
  4692                           ;doprnt.c: 617: }
  4693                           ;doprnt.c: 620: if(*f == '.') {
  4694  0343  1283               	bcf	3,5	;RP0=0, select bank0
  4695  0344  1303               	bcf	3,6	;RP1=0, select bank0
  4696  0345  082A               	movf	sprintf@f,w
  4697  0346  0084               	movwf	4
  4698  0347  120A  158A  200A  120A  118A  	fcall	stringdir
  4699  034C  3A2E               	xorlw	46
  4700  034D  1D03               	skipz
  4701  034E  2B91               	goto	i1l2304
  4702                           
  4703                           ;doprnt.c: 622: f++;
  4704  034F  3001               	movlw	1
  4705  0350  00B3               	movwf	??_sprintf
  4706  0351  0833               	movf	??_sprintf,w
  4707  0352  07AA               	addwf	sprintf@f,f
  4708                           
  4709                           ;doprnt.c: 629: {
  4710                           ;doprnt.c: 630: prec = 0;
  4711  0353  01C1               	clrf	sprintf@prec
  4712  0354  01C2               	clrf	sprintf@prec+1
  4713  0355                     i1l2302:	
  4714                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4715                           
  4716  0355  082A               	movf	sprintf@f,w
  4717  0356  0084               	movwf	4
  4718  0357  120A  158A  200A  120A  118A  	fcall	stringdir
  4719  035C  160A  118A  26A8  120A  118A  	fcall	_isdigit
  4720  0361  1C03               	btfss	3,0
  4721  0362  2B9D               	goto	i1l2310
  4722                           
  4723                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4724  0363  1283               	bcf	3,5	;RP0=0, select bank0
  4725  0364  1303               	bcf	3,6	;RP1=0, select bank0
  4726  0365  0842               	movf	sprintf@prec+1,w
  4727  0366  01F1               	clrf	___wmul@multiplier+1
  4728  0367  07F1               	addwf	___wmul@multiplier+1,f
  4729  0368  0841               	movf	sprintf@prec,w
  4730  0369  01F0               	clrf	___wmul@multiplier
  4731  036A  07F0               	addwf	___wmul@multiplier,f
  4732  036B  300A               	movlw	10
  4733  036C  00F2               	movwf	___wmul@multiplicand
  4734  036D  3000               	movlw	0
  4735  036E  00F3               	movwf	___wmul@multiplicand+1
  4736  036F  160A  118A  27BA  120A  118A  	fcall	___wmul
  4737  0374  1283               	bcf	3,5	;RP0=0, select bank0
  4738  0375  1303               	bcf	3,6	;RP1=0, select bank0
  4739  0376  082A               	movf	sprintf@f,w
  4740  0377  0084               	movwf	4
  4741  0378  120A  158A  200A  120A  118A  	fcall	stringdir
  4742  037D  0770               	addwf	?___wmul,w
  4743  037E  00B3               	movwf	??_sprintf
  4744  037F  3000               	movlw	0
  4745  0380  1803               	skipnc
  4746  0381  3001               	movlw	1
  4747  0382  0771               	addwf	?___wmul+1,w
  4748  0383  00B4               	movwf	??_sprintf+1
  4749  0384  0833               	movf	??_sprintf,w
  4750  0385  3ED0               	addlw	208
  4751  0386  00C1               	movwf	sprintf@prec
  4752  0387  0834               	movf	??_sprintf+1,w
  4753  0388  1803               	skipnc
  4754  0389  3E01               	addlw	1
  4755  038A  3EFF               	addlw	255
  4756  038B  00C2               	movwf	sprintf@prec+1
  4757  038C  3001               	movlw	1
  4758  038D  00B3               	movwf	??_sprintf
  4759  038E  0833               	movf	??_sprintf,w
  4760  038F  07AA               	addwf	sprintf@f,f
  4761  0390  2B55               	goto	i1l2302
  4762  0391                     i1l2304:	
  4763                           ;doprnt.c: 633: }
  4764                           ;doprnt.c: 634: } else {
  4765                           
  4766                           
  4767                           ;doprnt.c: 635: prec = 0;
  4768  0391  1283               	bcf	3,5	;RP0=0, select bank0
  4769  0392  1303               	bcf	3,6	;RP1=0, select bank0
  4770  0393  01C1               	clrf	sprintf@prec
  4771  0394  01C2               	clrf	sprintf@prec+1
  4772                           
  4773                           ;doprnt.c: 644: switch(c = *f++) {
  4774                           
  4775                           ;doprnt.c: 639: }
  4776                           ;doprnt.c: 642: loop:
  4777  0395  2B9D               	goto	i1l2310
  4778  0396                     i1l252:	
  4779                           ;doprnt.c: 650: case 'l':
  4780                           
  4781                           ;doprnt.c: 647: goto alldone;
  4782                           
  4783                           ;doprnt.c: 646: case 0:
  4784                           
  4785                           
  4786                           ;doprnt.c: 652: flag |= 0x10;
  4787  0396  1638               	bsf	sprintf@flag,4
  4788                           
  4789                           ;doprnt.c: 653: goto loop;
  4790  0397  2B9D               	goto	i1l2310
  4791  0398                     i1l2306:	
  4792                           ;doprnt.c: 826: case 'u':
  4793                           
  4794                           ;doprnt.c: 822: continue;
  4795                           
  4796                           ;doprnt.c: 811: default:
  4797                           
  4798                           
  4799                           ;doprnt.c: 827: flag |= 0xC0;
  4800  0398  30C0               	movlw	192
  4801  0399  00B3               	movwf	??_sprintf
  4802  039A  0833               	movf	??_sprintf,w
  4803  039B  04B8               	iorwf	sprintf@flag,f
  4804                           
  4805                           ;doprnt.c: 831: }
  4806                           
  4807                           ;doprnt.c: 828: break;
  4808  039C  2BB4               	goto	i1l255
  4809  039D                     i1l2310:	
  4810  039D  3001               	movlw	1
  4811  039E  1283               	bcf	3,5	;RP0=0, select bank0
  4812  039F  1303               	bcf	3,6	;RP1=0, select bank0
  4813  03A0  07AA               	addwf	sprintf@f,f
  4814  03A1  30FF               	movlw	-1
  4815  03A2  072A               	addwf	sprintf@f,w
  4816  03A3  0084               	movwf	4
  4817  03A4  120A  158A  200A  120A  118A  	fcall	stringdir
  4818  03A9  00C3               	movwf	sprintf@c
  4819                           
  4820                           ; Switch size 1, requested type "space"
  4821                           ; Number of cases is 3, Range of values is 0 to 117
  4822                           ; switch strategies available:
  4823                           ; Name         Instructions Cycles
  4824                           ; simple_byte           10     6 (average)
  4825                           ; jumptable            260     6 (fixed)
  4826                           ;	Chosen strategy is simple_byte
  4827  03AA  3A00               	xorlw	0	; case 0
  4828  03AB  1903               	skipnz
  4829  03AC  2D00               	goto	i1l2370
  4830  03AD  3A6C               	xorlw	108	; case 108
  4831  03AE  1903               	skipnz
  4832  03AF  2B96               	goto	i1l252
  4833  03B0  3A19               	xorlw	25	; case 117
  4834  03B1  1903               	skipnz
  4835  03B2  2B98               	goto	i1l2306
  4836  03B3  2AD0               	goto	i1l2368
  4837  03B4                     i1l255:	
  4838                           
  4839                           ;doprnt.c: 1282: {
  4840                           ;doprnt.c: 1290: if(flag & 0x10)
  4841  03B4  1E38               	btfss	sprintf@flag,4
  4842  03B5  2BC6               	goto	i1l2316
  4843                           
  4844                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  4845  03B6  0839               	movf	sprintf@ap,w
  4846  03B7  0084               	movwf	4
  4847  03B8  1383               	bcf	3,7	;select IRP bank0
  4848  03B9  0800               	movf	0,w
  4849  03BA  00BA               	movwf	sprintf@_val
  4850  03BB  0A84               	incf	4,f
  4851  03BC  0800               	movf	0,w
  4852  03BD  00BB               	movwf	sprintf@_val+1
  4853  03BE  0A84               	incf	4,f
  4854  03BF  0800               	movf	0,w
  4855  03C0  00BC               	movwf	sprintf@_val+2
  4856  03C1  0A84               	incf	4,f
  4857  03C2  0800               	movf	0,w
  4858  03C3  00BD               	movwf	sprintf@_val+3
  4859  03C4  3004               	movlw	4
  4860  03C5  2BD5               	goto	L3
  4861  03C6                     i1l2316:	
  4862                           
  4863                           ;doprnt.c: 1292: else
  4864                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4865  03C6  0839               	movf	sprintf@ap,w
  4866  03C7  0084               	movwf	4
  4867  03C8  1383               	bcf	3,7	;select IRP bank0
  4868  03C9  0800               	movf	0,w
  4869  03CA  00B3               	movwf	??_sprintf
  4870  03CB  0A84               	incf	4,f
  4871  03CC  0800               	movf	0,w
  4872  03CD  00B4               	movwf	??_sprintf+1
  4873  03CE  0833               	movf	??_sprintf,w
  4874  03CF  00BA               	movwf	sprintf@_val
  4875  03D0  0834               	movf	??_sprintf+1,w
  4876  03D1  00BB               	movwf	sprintf@_val+1
  4877  03D2  01BC               	clrf	sprintf@_val+2
  4878  03D3  01BD               	clrf	sprintf@_val+3
  4879  03D4  3002               	movlw	2
  4880  03D5                     L3:	
  4881  03D5  00B3               	movwf	??_sprintf
  4882  03D6  0833               	movf	??_sprintf,w
  4883  03D7  07B9               	addwf	sprintf@ap,f
  4884                           
  4885                           ;doprnt.c: 1296: }
  4886                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4887  03D8  0842               	movf	sprintf@prec+1,w
  4888  03D9  0441               	iorwf	sprintf@prec,w
  4889  03DA  1D03               	skipz
  4890  03DB  2BE8               	goto	i1l2326
  4891  03DC  083D               	movf	sprintf@_val+3,w
  4892  03DD  043C               	iorwf	sprintf@_val+2,w
  4893  03DE  043B               	iorwf	sprintf@_val+1,w
  4894  03DF  043A               	iorwf	sprintf@_val,w
  4895  03E0  1D03               	skipz
  4896  03E1  2BE8               	goto	i1l2326
  4897                           
  4898                           ;doprnt.c: 1300: prec++;
  4899  03E2  3001               	movlw	1
  4900  03E3  07C1               	addwf	sprintf@prec,f
  4901  03E4  1803               	skipnc
  4902  03E5  0AC2               	incf	sprintf@prec+1,f
  4903  03E6  3000               	movlw	0
  4904  03E7  07C2               	addwf	sprintf@prec+1,f
  4905  03E8                     i1l2326:	
  4906                           
  4907                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4908  03E8  01C3               	clrf	sprintf@c
  4909  03E9  0AC3               	incf	sprintf@c,f
  4910  03EA  0843               	movf	sprintf@c,w
  4911  03EB  3A0A               	xorlw	10
  4912  03EC  1903               	btfsc	3,2
  4913  03ED  2C2A               	goto	i1l2338
  4914  03EE                     i1l2330:	
  4915                           
  4916                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4917  03EE  0843               	movf	sprintf@c,w
  4918  03EF  00B3               	movwf	??_sprintf
  4919  03F0  3001               	movlw	1
  4920  03F1                     u285_25:	
  4921  03F1  1003               	clrc
  4922  03F2  0DB3               	rlf	??_sprintf,f
  4923  03F3  3EFF               	addlw	-1
  4924  03F4  1D03               	skipz
  4925  03F5  2BF1               	goto	u285_25
  4926  03F6  1003               	clrc
  4927  03F7  0D33               	rlf	??_sprintf,w
  4928  03F8  3E01               	addlw	low (_dpowers-__stringbase)
  4929  03F9  0084               	movwf	4
  4930  03FA  120A  158A  200A  120A  118A  	fcall	stringdir
  4931  03FF  00B4               	movwf	??_sprintf+1
  4932  0400  120A  158A  200A  120A  118A  	fcall	stringdir
  4933  0405  00B5               	movwf	??_sprintf+2
  4934  0406  120A  158A  200A  120A  118A  	fcall	stringdir
  4935  040B  00B6               	movwf	??_sprintf+3
  4936  040C  120A  158A  200A  120A  118A  	fcall	stringdir
  4937  0411  00B7               	movwf	??_sprintf+4
  4938  0412  0837               	movf	??_sprintf+4,w
  4939  0413  023D               	subwf	sprintf@_val+3,w
  4940  0414  1D03               	skipz
  4941  0415  2C20               	goto	u286_25
  4942  0416  0836               	movf	??_sprintf+3,w
  4943  0417  023C               	subwf	sprintf@_val+2,w
  4944  0418  1D03               	skipz
  4945  0419  2C20               	goto	u286_25
  4946  041A  0835               	movf	??_sprintf+2,w
  4947  041B  023B               	subwf	sprintf@_val+1,w
  4948  041C  1D03               	skipz
  4949  041D  2C20               	goto	u286_25
  4950  041E  0834               	movf	??_sprintf+1,w
  4951  041F  023A               	subwf	sprintf@_val,w
  4952  0420                     u286_25:	
  4953  0420  1C03               	btfss	3,0
  4954  0421  2C2A               	goto	i1l2338
  4955                           
  4956                           ;doprnt.c: 1316: break;
  4957  0422  3001               	movlw	1
  4958  0423  00B3               	movwf	??_sprintf
  4959  0424  0833               	movf	??_sprintf,w
  4960  0425  07C3               	addwf	sprintf@c,f
  4961  0426  0843               	movf	sprintf@c,w
  4962  0427  3A0A               	xorlw	10
  4963  0428  1D03               	skipz
  4964  0429  2BEE               	goto	i1l2330
  4965  042A                     i1l2338:	
  4966                           
  4967                           ;doprnt.c: 1348: if(c < prec)
  4968  042A  0843               	movf	sprintf@c,w
  4969  042B  00B3               	movwf	??_sprintf
  4970  042C  01B4               	clrf	??_sprintf+1
  4971  042D  1BB3               	btfsc	??_sprintf,7
  4972  042E  03B4               	decf	??_sprintf+1,f
  4973  042F  0834               	movf	??_sprintf+1,w
  4974  0430  3A80               	xorlw	128
  4975  0431  00B5               	movwf	??_sprintf+2
  4976  0432  0842               	movf	sprintf@prec+1,w
  4977  0433  3A80               	xorlw	128
  4978  0434  0235               	subwf	??_sprintf+2,w
  4979  0435  1D03               	skipz
  4980  0436  2C39               	goto	u288_25
  4981  0437  0841               	movf	sprintf@prec,w
  4982  0438  0233               	subwf	??_sprintf,w
  4983  0439                     u288_25:	
  4984  0439  1803               	skipnc
  4985  043A  2C42               	goto	i1l2342
  4986                           
  4987                           ;doprnt.c: 1349: c = prec;
  4988  043B  1283               	bcf	3,5	;RP0=0, select bank0
  4989  043C  1303               	bcf	3,6	;RP1=0, select bank0
  4990  043D  0841               	movf	sprintf@prec,w
  4991  043E  00B3               	movwf	??_sprintf
  4992  043F  0833               	movf	??_sprintf,w
  4993  0440  00C3               	movwf	sprintf@c
  4994  0441  2C5C               	goto	i1l2346
  4995  0442                     i1l2342:	
  4996                           
  4997                           ;doprnt.c: 1350: else if(prec < c)
  4998  0442  1283               	bcf	3,5	;RP0=0, select bank0
  4999  0443  1303               	bcf	3,6	;RP1=0, select bank0
  5000  0444  0843               	movf	sprintf@c,w
  5001  0445  00B3               	movwf	??_sprintf
  5002  0446  01B4               	clrf	??_sprintf+1
  5003  0447  1BB3               	btfsc	??_sprintf,7
  5004  0448  03B4               	decf	??_sprintf+1,f
  5005  0449  0842               	movf	sprintf@prec+1,w
  5006  044A  3A80               	xorlw	128
  5007  044B  00B5               	movwf	??_sprintf+2
  5008  044C  0834               	movf	??_sprintf+1,w
  5009  044D  3A80               	xorlw	128
  5010  044E  0235               	subwf	??_sprintf+2,w
  5011  044F  1D03               	skipz
  5012  0450  2C53               	goto	u289_25
  5013  0451  0833               	movf	??_sprintf,w
  5014  0452  0241               	subwf	sprintf@prec,w
  5015  0453                     u289_25:	
  5016  0453  1803               	skipnc
  5017  0454  2C5C               	goto	i1l2346
  5018                           
  5019                           ;doprnt.c: 1351: prec = c;
  5020  0455  1283               	bcf	3,5	;RP0=0, select bank0
  5021  0456  1303               	bcf	3,6	;RP1=0, select bank0
  5022  0457  0843               	movf	sprintf@c,w
  5023  0458  00C1               	movwf	sprintf@prec
  5024  0459  01C2               	clrf	sprintf@prec+1
  5025  045A  1BC1               	btfsc	sprintf@prec,7
  5026  045B  03C2               	decf	sprintf@prec+1,f
  5027  045C                     i1l2346:	
  5028                           
  5029                           ;doprnt.c: 1390: if(width > c)
  5030  045C  1283               	bcf	3,5	;RP0=0, select bank0
  5031  045D  1303               	bcf	3,6	;RP1=0, select bank0
  5032  045E  0843               	movf	sprintf@c,w
  5033  045F  00B3               	movwf	??_sprintf
  5034  0460  01B4               	clrf	??_sprintf+1
  5035  0461  1BB3               	btfsc	??_sprintf,7
  5036  0462  03B4               	decf	??_sprintf+1,f
  5037  0463  0834               	movf	??_sprintf+1,w
  5038  0464  3A80               	xorlw	128
  5039  0465  00B5               	movwf	??_sprintf+2
  5040  0466  0840               	movf	sprintf@width+1,w
  5041  0467  3A80               	xorlw	128
  5042  0468  0235               	subwf	??_sprintf+2,w
  5043  0469  1D03               	skipz
  5044  046A  2C6D               	goto	u290_25
  5045  046B  083F               	movf	sprintf@width,w
  5046  046C  0233               	subwf	??_sprintf,w
  5047  046D                     u290_25:	
  5048  046D  1803               	skipnc
  5049  046E  2C7D               	goto	i1l2350
  5050                           
  5051                           ;doprnt.c: 1391: width -= c;
  5052  046F  1283               	bcf	3,5	;RP0=0, select bank0
  5053  0470  1303               	bcf	3,6	;RP1=0, select bank0
  5054  0471  0843               	movf	sprintf@c,w
  5055  0472  00B3               	movwf	??_sprintf
  5056  0473  01B4               	clrf	??_sprintf+1
  5057  0474  1BB3               	btfsc	??_sprintf,7
  5058  0475  03B4               	decf	??_sprintf+1,f
  5059  0476  0833               	movf	??_sprintf,w
  5060  0477  02BF               	subwf	sprintf@width,f
  5061  0478  0834               	movf	??_sprintf+1,w
  5062  0479  1C03               	skipc
  5063  047A  03C0               	decf	sprintf@width+1,f
  5064  047B  02C0               	subwf	sprintf@width+1,f
  5065  047C  2C81               	goto	i1l2352
  5066  047D                     i1l2350:	
  5067                           
  5068                           ;doprnt.c: 1392: else
  5069                           ;doprnt.c: 1393: width = 0;
  5070  047D  1283               	bcf	3,5	;RP0=0, select bank0
  5071  047E  1303               	bcf	3,6	;RP1=0, select bank0
  5072  047F  01BF               	clrf	sprintf@width
  5073  0480  01C0               	clrf	sprintf@width+1
  5074  0481                     i1l2352:	
  5075                           
  5076                           ;doprnt.c: 1431: {
  5077                           ;doprnt.c: 1433: if(width
  5078                           ;doprnt.c: 1437: )
  5079  0481  0840               	movf	sprintf@width+1,w
  5080  0482  043F               	iorwf	sprintf@width,w
  5081  0483  1903               	skipnz
  5082  0484  2CF1               	goto	i1l2366
  5083                           
  5084                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  5085                           
  5086                           ;doprnt.c: 1438: do
  5087  0485  3020               	movlw	32
  5088  0486  00B3               	movwf	??_sprintf
  5089  0487  083E               	movf	sprintf@sp,w
  5090  0488  0084               	movwf	4
  5091  0489  0833               	movf	??_sprintf,w
  5092  048A  1783               	bsf	3,7	;select IRP bank2
  5093  048B  0080               	movwf	0
  5094  048C  3001               	movlw	1
  5095  048D  00B3               	movwf	??_sprintf
  5096  048E  0833               	movf	??_sprintf,w
  5097  048F  07BE               	addwf	sprintf@sp,f
  5098                           
  5099                           ;doprnt.c: 1440: while(--width);
  5100  0490  30FF               	movlw	255
  5101  0491  07BF               	addwf	sprintf@width,f
  5102  0492  1803               	skipnc
  5103  0493  0AC0               	incf	sprintf@width+1,f
  5104  0494  30FF               	movlw	255
  5105  0495  07C0               	addwf	sprintf@width+1,f
  5106  0496  2C81               	goto	i1l2352
  5107  0497                     i1l2360:	
  5108                           ;doprnt.c: 1478: }
  5109                           ;doprnt.c: 1483: while(prec--) {
  5110                           
  5111                           
  5112                           ;doprnt.c: 1487: {
  5113                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5114  0497  3000               	movlw	0
  5115  0498  00A3               	movwf	___llmod@divisor+3
  5116  0499  3000               	movlw	0
  5117  049A  00A2               	movwf	___llmod@divisor+2
  5118  049B  3000               	movlw	0
  5119  049C  00A1               	movwf	___llmod@divisor+1
  5120  049D  300A               	movlw	10
  5121  049E  00A0               	movwf	___llmod@divisor
  5122  049F  0841               	movf	sprintf@prec,w
  5123  04A0  00B3               	movwf	??_sprintf
  5124  04A1  3001               	movlw	1
  5125  04A2                     u293_25:	
  5126  04A2  1003               	clrc
  5127  04A3  0DB3               	rlf	??_sprintf,f
  5128  04A4  3EFF               	addlw	-1
  5129  04A5  1D03               	skipz
  5130  04A6  2CA2               	goto	u293_25
  5131  04A7  1003               	clrc
  5132  04A8  0D33               	rlf	??_sprintf,w
  5133  04A9  3E01               	addlw	low (_dpowers-__stringbase)
  5134  04AA  0084               	movwf	4
  5135  04AB  120A  158A  200A  120A  118A  	fcall	stringdir
  5136  04B0  00F0               	movwf	___lldiv@divisor
  5137  04B1  120A  158A  200A  120A  118A  	fcall	stringdir
  5138  04B6  00F1               	movwf	___lldiv@divisor+1
  5139  04B7  120A  158A  200A  120A  118A  	fcall	stringdir
  5140  04BC  00F2               	movwf	___lldiv@divisor+2
  5141  04BD  120A  158A  200A  120A  118A  	fcall	stringdir
  5142  04C2  00F3               	movwf	___lldiv@divisor+3
  5143  04C3  083D               	movf	sprintf@_val+3,w
  5144  04C4  00F7               	movwf	___lldiv@dividend+3
  5145  04C5  083C               	movf	sprintf@_val+2,w
  5146  04C6  00F6               	movwf	___lldiv@dividend+2
  5147  04C7  083B               	movf	sprintf@_val+1,w
  5148  04C8  00F5               	movwf	___lldiv@dividend+1
  5149  04C9  083A               	movf	sprintf@_val,w
  5150  04CA  00F4               	movwf	___lldiv@dividend
  5151  04CB  120A  158A  2471  120A  118A  	fcall	___lldiv
  5152  04D0  0873               	movf	?___lldiv+3,w
  5153  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  5154  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  5155  04D3  00A7               	movwf	___llmod@dividend+3
  5156  04D4  0872               	movf	?___lldiv+2,w
  5157  04D5  00A6               	movwf	___llmod@dividend+2
  5158  04D6  0871               	movf	?___lldiv+1,w
  5159  04D7  00A5               	movwf	___llmod@dividend+1
  5160  04D8  0870               	movf	?___lldiv,w
  5161  04D9  00A4               	movwf	___llmod@dividend
  5162  04DA  120A  158A  2267  120A  118A  	fcall	___llmod
  5163  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  5164  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  5165  04E1  0820               	movf	?___llmod,w
  5166  04E2  3E30               	addlw	48
  5167  04E3  00B4               	movwf	??_sprintf+1
  5168  04E4  0834               	movf	??_sprintf+1,w
  5169  04E5  00C3               	movwf	sprintf@c
  5170                           
  5171                           ;doprnt.c: 1532: }
  5172                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5173  04E6  0843               	movf	sprintf@c,w
  5174  04E7  00B3               	movwf	??_sprintf
  5175  04E8  083E               	movf	sprintf@sp,w
  5176  04E9  0084               	movwf	4
  5177  04EA  0833               	movf	??_sprintf,w
  5178  04EB  1783               	bsf	3,7	;select IRP bank2
  5179  04EC  0080               	movwf	0
  5180  04ED  3001               	movlw	1
  5181  04EE  00B3               	movwf	??_sprintf
  5182  04EF  0833               	movf	??_sprintf,w
  5183  04F0  07BE               	addwf	sprintf@sp,f
  5184  04F1                     i1l2366:	
  5185  04F1  30FF               	movlw	255
  5186  04F2  07C1               	addwf	sprintf@prec,f
  5187  04F3  1803               	skipnc
  5188  04F4  0AC2               	incf	sprintf@prec+1,f
  5189  04F5  30FF               	movlw	255
  5190  04F6  07C2               	addwf	sprintf@prec+1,f
  5191  04F7  30FF               	movlw	255
  5192  04F8  0642               	xorwf	sprintf@prec+1,w
  5193  04F9  1D03               	skipz
  5194  04FA  2CFD               	goto	u294_25
  5195  04FB  30FF               	movlw	255
  5196  04FC  0641               	xorwf	sprintf@prec,w
  5197  04FD                     u294_25:	
  5198  04FD  1903               	btfsc	3,2
  5199  04FE  2AD0               	goto	i1l2368
  5200  04FF  2C97               	goto	i1l2360
  5201  0500                     i1l2370:	
  5202                           ;doprnt.c: 1534: }
  5203                           ;doprnt.c: 1542: }
  5204                           ;doprnt.c: 1544: alldone:
  5205                           
  5206                           
  5207                           ;doprnt.c: 1547: *sp = 0;
  5208  0500  083E               	movf	sprintf@sp,w
  5209  0501  0084               	movwf	4
  5210  0502  1783               	bsf	3,7	;select IRP bank2
  5211  0503  0180               	clrf	0
  5212  0504  0008               	return
  5213  0505                     __end_of_sprintf:	
  5214                           ;doprnt.c: 1549: return 0;
  5215                           ;	Return value of _sprintf is never used
  5216                           
  5217                           
  5218                           	psect	text22
  5219  16A8                     __ptext22:	
  5220 ;; *************** function _isdigit *****************
  5221 ;; Defined at:
  5222 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  c               1    wreg     unsigned char 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  c               1    1[COMMON] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;		None               void
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5236 ;;      Params:         0       0       0       0       0
  5237 ;;      Locals:         2       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0
  5239 ;;      Totals:         2       0       0       0       0
  5240 ;;Total ram usage:        2 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_sprintf
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function _isdigit
  5251  16A8                     _isdigit:	
  5252                           
  5253                           ;incstack = 0
  5254 ;; hardware stack exceeded
  5255                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5256                           ;isdigit@c stored from wreg
  5257  16A8  00F1               	movwf	isdigit@c
  5258  16A9  01F0               	clrf	_isdigit$886
  5259  16AA  303A               	movlw	58
  5260  16AB  0271               	subwf	isdigit@c,w
  5261  16AC  1803               	skipnc
  5262  16AD  2EB4               	goto	i1l1976
  5263  16AE  3030               	movlw	48
  5264  16AF  0271               	subwf	isdigit@c,w
  5265  16B0  1C03               	skipc
  5266  16B1  2EB4               	goto	i1l1976
  5267  16B2  01F0               	clrf	_isdigit$886
  5268  16B3  0AF0               	incf	_isdigit$886,f
  5269  16B4                     i1l1976:	
  5270  16B4  0C70               	rrf	_isdigit$886,w
  5271  16B5  0008               	return
  5272  16B6                     __end_of_isdigit:	
  5273                           
  5274                           	psect	text23
  5275  17BA                     __ptext23:	
  5276 ;; *************** function ___wmul *****************
  5277 ;; Defined at:
  5278 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  multiplier      2    0[COMMON] unsigned int 
  5281 ;;  multiplicand    2    2[COMMON] unsigned int 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  product         2    4[COMMON] unsigned int 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  2    0[COMMON] unsigned int 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5293 ;;      Params:         4       0       0       0       0
  5294 ;;      Locals:         2       0       0       0       0
  5295 ;;      Temps:          0       0       0       0       0
  5296 ;;      Totals:         6       0       0       0       0
  5297 ;;Total ram usage:        6 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; This function calls:
  5300 ;;		Nothing
  5301 ;; This function is called by:
  5302 ;;		_sprintf
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           
  5307                           ;psect for function ___wmul
  5308  17BA                     ___wmul:	
  5309                           
  5310                           ;incstack = 0
  5311 ;; hardware stack exceeded
  5312                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5313  17BA  01F4               	clrf	___wmul@product
  5314  17BB  01F5               	clrf	___wmul@product+1
  5315  17BC                     i1l1982:	
  5316  17BC  1C70               	btfss	___wmul@multiplier,0
  5317  17BD  2FC4               	goto	i1l358
  5318  17BE  0872               	movf	___wmul@multiplicand,w
  5319  17BF  07F4               	addwf	___wmul@product,f
  5320  17C0  1803               	skipnc
  5321  17C1  0AF5               	incf	___wmul@product+1,f
  5322  17C2  0873               	movf	___wmul@multiplicand+1,w
  5323  17C3  07F5               	addwf	___wmul@product+1,f
  5324  17C4                     i1l358:	
  5325  17C4  3001               	movlw	1
  5326  17C5                     u215_25:	
  5327  17C5  1003               	clrc
  5328  17C6  0DF2               	rlf	___wmul@multiplicand,f
  5329  17C7  0DF3               	rlf	___wmul@multiplicand+1,f
  5330  17C8  3EFF               	addlw	-1
  5331  17C9  1D03               	skipz
  5332  17CA  2FC5               	goto	u215_25
  5333  17CB  3001               	movlw	1
  5334  17CC                     u216_25:	
  5335  17CC  1003               	clrc
  5336  17CD  0CF1               	rrf	___wmul@multiplier+1,f
  5337  17CE  0CF0               	rrf	___wmul@multiplier,f
  5338  17CF  3EFF               	addlw	-1
  5339  17D0  1D03               	skipz
  5340  17D1  2FCC               	goto	u216_25
  5341  17D2  0871               	movf	___wmul@multiplier+1,w
  5342  17D3  0470               	iorwf	___wmul@multiplier,w
  5343  17D4  1D03               	skipz
  5344  17D5  2FBC               	goto	i1l1982
  5345  17D6  0875               	movf	___wmul@product+1,w
  5346  17D7  01F1               	clrf	?___wmul+1
  5347  17D8  07F1               	addwf	?___wmul+1,f
  5348  17D9  0874               	movf	___wmul@product,w
  5349  17DA  01F0               	clrf	?___wmul
  5350  17DB  07F0               	addwf	?___wmul,f
  5351  17DC  0008               	return
  5352  17DD                     __end_of___wmul:	
  5353                           
  5354                           	psect	text24
  5355  0A67                     __ptext24:	
  5356 ;; *************** function ___llmod *****************
  5357 ;; Defined at:
  5358 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  divisor         4    0[BANK0 ] unsigned long 
  5361 ;;  dividend        4    4[BANK0 ] unsigned long 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  counter         1    9[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  4    0[BANK0 ] unsigned long 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5373 ;;      Params:         0       8       0       0       0
  5374 ;;      Locals:         0       1       0       0       0
  5375 ;;      Temps:          0       1       0       0       0
  5376 ;;      Totals:         0      10       0       0       0
  5377 ;;Total ram usage:       10 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_sprintf
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function ___llmod
  5388  0A67                     ___llmod:	
  5389                           
  5390                           ;incstack = 0
  5391 ;; hardware stack exceeded
  5392                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5393  0A67  1283               	bcf	3,5	;RP0=0, select bank0
  5394  0A68  1303               	bcf	3,6	;RP1=0, select bank0
  5395  0A69  0823               	movf	___llmod@divisor+3,w
  5396  0A6A  0422               	iorwf	___llmod@divisor+2,w
  5397  0A6B  0421               	iorwf	___llmod@divisor+1,w
  5398  0A6C  0420               	iorwf	___llmod@divisor,w
  5399  0A6D  1903               	skipnz
  5400  0A6E  2AAC               	goto	i1l2144
  5401  0A6F  01A9               	clrf	___llmod@counter
  5402  0A70  0AA9               	incf	___llmod@counter,f
  5403  0A71                     i1l2134:	
  5404  0A71  1BA3               	btfsc	___llmod@divisor+3,7
  5405  0A72  2A81               	goto	i1l2136
  5406  0A73  3001               	movlw	1
  5407  0A74  00A8               	movwf	??___llmod
  5408  0A75                     u260_25:	
  5409  0A75  1003               	clrc
  5410  0A76  0DA0               	rlf	___llmod@divisor,f
  5411  0A77  0DA1               	rlf	___llmod@divisor+1,f
  5412  0A78  0DA2               	rlf	___llmod@divisor+2,f
  5413  0A79  0DA3               	rlf	___llmod@divisor+3,f
  5414  0A7A  0BA8               	decfsz	??___llmod,f
  5415  0A7B  2A75               	goto	u260_25
  5416  0A7C  3001               	movlw	1
  5417  0A7D  00A8               	movwf	??___llmod
  5418  0A7E  0828               	movf	??___llmod,w
  5419  0A7F  07A9               	addwf	___llmod@counter,f
  5420  0A80  2A71               	goto	i1l2134
  5421  0A81                     i1l2136:	
  5422  0A81  0823               	movf	___llmod@divisor+3,w
  5423  0A82  0227               	subwf	___llmod@dividend+3,w
  5424  0A83  1D03               	skipz
  5425  0A84  2A8F               	goto	u262_25
  5426  0A85  0822               	movf	___llmod@divisor+2,w
  5427  0A86  0226               	subwf	___llmod@dividend+2,w
  5428  0A87  1D03               	skipz
  5429  0A88  2A8F               	goto	u262_25
  5430  0A89  0821               	movf	___llmod@divisor+1,w
  5431  0A8A  0225               	subwf	___llmod@dividend+1,w
  5432  0A8B  1D03               	skipz
  5433  0A8C  2A8F               	goto	u262_25
  5434  0A8D  0820               	movf	___llmod@divisor,w
  5435  0A8E  0224               	subwf	___llmod@dividend,w
  5436  0A8F                     u262_25:	
  5437  0A8F  1C03               	skipc
  5438  0A90  2A9F               	goto	i1l2140
  5439  0A91  0820               	movf	___llmod@divisor,w
  5440  0A92  02A4               	subwf	___llmod@dividend,f
  5441  0A93  0821               	movf	___llmod@divisor+1,w
  5442  0A94  1C03               	skipc
  5443  0A95  0F21               	incfsz	___llmod@divisor+1,w
  5444  0A96  02A5               	subwf	___llmod@dividend+1,f
  5445  0A97  0822               	movf	___llmod@divisor+2,w
  5446  0A98  1C03               	skipc
  5447  0A99  0F22               	incfsz	___llmod@divisor+2,w
  5448  0A9A  02A6               	subwf	___llmod@dividend+2,f
  5449  0A9B  0823               	movf	___llmod@divisor+3,w
  5450  0A9C  1C03               	skipc
  5451  0A9D  0F23               	incfsz	___llmod@divisor+3,w
  5452  0A9E  02A7               	subwf	___llmod@dividend+3,f
  5453  0A9F                     i1l2140:	
  5454  0A9F  3001               	movlw	1
  5455  0AA0                     u263_25:	
  5456  0AA0  1003               	clrc
  5457  0AA1  0CA3               	rrf	___llmod@divisor+3,f
  5458  0AA2  0CA2               	rrf	___llmod@divisor+2,f
  5459  0AA3  0CA1               	rrf	___llmod@divisor+1,f
  5460  0AA4  0CA0               	rrf	___llmod@divisor,f
  5461  0AA5  3EFF               	addlw	-1
  5462  0AA6  1D03               	skipz
  5463  0AA7  2AA0               	goto	u263_25
  5464  0AA8  3001               	movlw	1
  5465  0AA9  02A9               	subwf	___llmod@counter,f
  5466  0AAA  1D03               	btfss	3,2
  5467  0AAB  2A81               	goto	i1l2136
  5468  0AAC                     i1l2144:	
  5469  0AAC  0827               	movf	___llmod@dividend+3,w
  5470  0AAD  00A3               	movwf	?___llmod+3
  5471  0AAE  0826               	movf	___llmod@dividend+2,w
  5472  0AAF  00A2               	movwf	?___llmod+2
  5473  0AB0  0825               	movf	___llmod@dividend+1,w
  5474  0AB1  00A1               	movwf	?___llmod+1
  5475  0AB2  0824               	movf	___llmod@dividend,w
  5476  0AB3  00A0               	movwf	?___llmod
  5477  0AB4  0008               	return
  5478  0AB5                     __end_of___llmod:	
  5479                           
  5480                           	psect	text25
  5481  0C71                     __ptext25:	
  5482 ;; *************** function ___lldiv *****************
  5483 ;; Defined at:
  5484 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;  divisor         4    0[COMMON] unsigned long 
  5487 ;;  dividend        4    4[COMMON] unsigned long 
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  quotient        4    9[COMMON] unsigned long 
  5490 ;;  counter         1   13[COMMON] unsigned char 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  4    0[COMMON] unsigned long 
  5493 ;; Registers used:
  5494 ;;		wreg, status,2, status,0
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5500 ;;      Params:         8       0       0       0       0
  5501 ;;      Locals:         5       0       0       0       0
  5502 ;;      Temps:          1       0       0       0       0
  5503 ;;      Totals:        14       0       0       0       0
  5504 ;;Total ram usage:       14 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_sprintf
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function ___lldiv
  5515  0C71                     ___lldiv:	
  5516                           
  5517                           ;incstack = 0
  5518 ;; hardware stack exceeded
  5519                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5520  0C71  3000               	movlw	0
  5521  0C72  00FC               	movwf	___lldiv@quotient+3
  5522  0C73  3000               	movlw	0
  5523  0C74  00FB               	movwf	___lldiv@quotient+2
  5524  0C75  3000               	movlw	0
  5525  0C76  00FA               	movwf	___lldiv@quotient+1
  5526  0C77  3000               	movlw	0
  5527  0C78  00F9               	movwf	___lldiv@quotient
  5528  0C79  0873               	movf	___lldiv@divisor+3,w
  5529  0C7A  0472               	iorwf	___lldiv@divisor+2,w
  5530  0C7B  0471               	iorwf	___lldiv@divisor+1,w
  5531  0C7C  0470               	iorwf	___lldiv@divisor,w
  5532  0C7D  1903               	skipnz
  5533  0C7E  2CC6               	goto	i1l2124
  5534  0C7F  01FD               	clrf	___lldiv@counter
  5535  0C80  0AFD               	incf	___lldiv@counter,f
  5536  0C81                     i1l2110:	
  5537  0C81  1BF3               	btfsc	___lldiv@divisor+3,7
  5538  0C82  2C91               	goto	i1l2112
  5539  0C83  3001               	movlw	1
  5540  0C84  00F8               	movwf	??___lldiv
  5541  0C85                     u253_25:	
  5542  0C85  1003               	clrc
  5543  0C86  0DF0               	rlf	___lldiv@divisor,f
  5544  0C87  0DF1               	rlf	___lldiv@divisor+1,f
  5545  0C88  0DF2               	rlf	___lldiv@divisor+2,f
  5546  0C89  0DF3               	rlf	___lldiv@divisor+3,f
  5547  0C8A  0BF8               	decfsz	??___lldiv,f
  5548  0C8B  2C85               	goto	u253_25
  5549  0C8C  3001               	movlw	1
  5550  0C8D  00F8               	movwf	??___lldiv
  5551  0C8E  0878               	movf	??___lldiv,w
  5552  0C8F  07FD               	addwf	___lldiv@counter,f
  5553  0C90  2C81               	goto	i1l2110
  5554  0C91                     i1l2112:	
  5555  0C91  3001               	movlw	1
  5556  0C92  00F8               	movwf	??___lldiv
  5557  0C93                     u255_25:	
  5558  0C93  1003               	clrc
  5559  0C94  0DF9               	rlf	___lldiv@quotient,f
  5560  0C95  0DFA               	rlf	___lldiv@quotient+1,f
  5561  0C96  0DFB               	rlf	___lldiv@quotient+2,f
  5562  0C97  0DFC               	rlf	___lldiv@quotient+3,f
  5563  0C98  0BF8               	decfsz	??___lldiv,f
  5564  0C99  2C93               	goto	u255_25
  5565  0C9A  0873               	movf	___lldiv@divisor+3,w
  5566  0C9B  0277               	subwf	___lldiv@dividend+3,w
  5567  0C9C  1D03               	skipz
  5568  0C9D  2CA8               	goto	u256_25
  5569  0C9E  0872               	movf	___lldiv@divisor+2,w
  5570  0C9F  0276               	subwf	___lldiv@dividend+2,w
  5571  0CA0  1D03               	skipz
  5572  0CA1  2CA8               	goto	u256_25
  5573  0CA2  0871               	movf	___lldiv@divisor+1,w
  5574  0CA3  0275               	subwf	___lldiv@dividend+1,w
  5575  0CA4  1D03               	skipz
  5576  0CA5  2CA8               	goto	u256_25
  5577  0CA6  0870               	movf	___lldiv@divisor,w
  5578  0CA7  0274               	subwf	___lldiv@dividend,w
  5579  0CA8                     u256_25:	
  5580  0CA8  1C03               	skipc
  5581  0CA9  2CB9               	goto	i1l2120
  5582  0CAA  0870               	movf	___lldiv@divisor,w
  5583  0CAB  02F4               	subwf	___lldiv@dividend,f
  5584  0CAC  0871               	movf	___lldiv@divisor+1,w
  5585  0CAD  1C03               	skipc
  5586  0CAE  0F71               	incfsz	___lldiv@divisor+1,w
  5587  0CAF  02F5               	subwf	___lldiv@dividend+1,f
  5588  0CB0  0872               	movf	___lldiv@divisor+2,w
  5589  0CB1  1C03               	skipc
  5590  0CB2  0F72               	incfsz	___lldiv@divisor+2,w
  5591  0CB3  02F6               	subwf	___lldiv@dividend+2,f
  5592  0CB4  0873               	movf	___lldiv@divisor+3,w
  5593  0CB5  1C03               	skipc
  5594  0CB6  0F73               	incfsz	___lldiv@divisor+3,w
  5595  0CB7  02F7               	subwf	___lldiv@dividend+3,f
  5596  0CB8  1479               	bsf	___lldiv@quotient,0
  5597  0CB9                     i1l2120:	
  5598  0CB9  3001               	movlw	1
  5599  0CBA                     u257_25:	
  5600  0CBA  1003               	clrc
  5601  0CBB  0CF3               	rrf	___lldiv@divisor+3,f
  5602  0CBC  0CF2               	rrf	___lldiv@divisor+2,f
  5603  0CBD  0CF1               	rrf	___lldiv@divisor+1,f
  5604  0CBE  0CF0               	rrf	___lldiv@divisor,f
  5605  0CBF  3EFF               	addlw	-1
  5606  0CC0  1D03               	skipz
  5607  0CC1  2CBA               	goto	u257_25
  5608  0CC2  3001               	movlw	1
  5609  0CC3  02FD               	subwf	___lldiv@counter,f
  5610  0CC4  1D03               	btfss	3,2
  5611  0CC5  2C91               	goto	i1l2112
  5612  0CC6                     i1l2124:	
  5613  0CC6  087C               	movf	___lldiv@quotient+3,w
  5614  0CC7  00F3               	movwf	?___lldiv+3
  5615  0CC8  087B               	movf	___lldiv@quotient+2,w
  5616  0CC9  00F2               	movwf	?___lldiv+2
  5617  0CCA  087A               	movf	___lldiv@quotient+1,w
  5618  0CCB  00F1               	movwf	?___lldiv+1
  5619  0CCC  0879               	movf	___lldiv@quotient,w
  5620  0CCD  00F0               	movwf	?___lldiv
  5621  0CCE  0008               	return
  5622  0CCF                     __end_of___lldiv:	
  5623                           
  5624                           	psect	text26
  5625  08B0                     __ptext26:	
  5626 ;; *************** function ___lltoft *****************
  5627 ;; Defined at:
  5628 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  c               4    8[COMMON] unsigned long 
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  exp             1   13[COMMON] unsigned char 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;                  3    8[COMMON] float 
  5635 ;; Registers used:
  5636 ;;		wreg, status,2, status,0, pclath, cstack
  5637 ;; Tracked objects:
  5638 ;;		On entry : 0/0
  5639 ;;		On exit  : 0/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5642 ;;      Params:         4       0       0       0       0
  5643 ;;      Locals:         1       0       0       0       0
  5644 ;;      Temps:          1       0       0       0       0
  5645 ;;      Totals:         6       0       0       0       0
  5646 ;;Total ram usage:        6 bytes
  5647 ;; Hardware stack levels used:    1
  5648 ;; Hardware stack levels required when called:    1
  5649 ;; This function calls:
  5650 ;;		___ftpack
  5651 ;; This function is called by:
  5652 ;;		_ftoa
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function ___lltoft
  5658  08B0                     ___lltoft:	
  5659                           
  5660                           ;incstack = 0
  5661 ;; hardware stack exceeded
  5662                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5663  08B0  308E               	movlw	142
  5664  08B1  00FC               	movwf	??___lltoft
  5665  08B2  087C               	movf	??___lltoft,w
  5666  08B3  00FD               	movwf	___lltoft@exp
  5667  08B4                     i1l2506:	
  5668  08B4  30FF               	movlw	255
  5669  08B5  057B               	andwf	___lltoft@c+3,w
  5670  08B6  1903               	btfsc	3,2
  5671  08B7  28C6               	goto	i1l2508
  5672  08B8  3001               	movlw	1
  5673  08B9                     u326_25:	
  5674  08B9  1003               	clrc
  5675  08BA  0CFB               	rrf	___lltoft@c+3,f
  5676  08BB  0CFA               	rrf	___lltoft@c+2,f
  5677  08BC  0CF9               	rrf	___lltoft@c+1,f
  5678  08BD  0CF8               	rrf	___lltoft@c,f
  5679  08BE  3EFF               	addlw	-1
  5680  08BF  1D03               	skipz
  5681  08C0  28B9               	goto	u326_25
  5682  08C1  3001               	movlw	1
  5683  08C2  00FC               	movwf	??___lltoft
  5684  08C3  087C               	movf	??___lltoft,w
  5685  08C4  07FD               	addwf	___lltoft@exp,f
  5686  08C5  28B4               	goto	i1l2506
  5687  08C6                     i1l2508:	
  5688  08C6  0878               	movf	___lltoft@c,w
  5689  08C7  00F0               	movwf	___ftpack@arg
  5690  08C8  0879               	movf	___lltoft@c+1,w
  5691  08C9  00F1               	movwf	___ftpack@arg+1
  5692  08CA  087A               	movf	___lltoft@c+2,w
  5693  08CB  00F2               	movwf	___ftpack@arg+2
  5694  08CC  087D               	movf	___lltoft@exp,w
  5695  08CD  00FC               	movwf	??___lltoft
  5696  08CE  087C               	movf	??___lltoft,w
  5697  08CF  00F3               	movwf	___ftpack@exp
  5698  08D0  01F4               	clrf	___ftpack@sign
  5699  08D1  120A  158A  24CF   	fcall	___ftpack
  5700  08D4  0870               	movf	?___ftpack,w
  5701  08D5  00F8               	movwf	?___lltoft
  5702  08D6  0871               	movf	?___ftpack+1,w
  5703  08D7  00F9               	movwf	?___lltoft+1
  5704  08D8  0872               	movf	?___ftpack+2,w
  5705  08D9  00FA               	movwf	?___lltoft+2
  5706  08DA  0008               	return
  5707  08DB                     __end_of___lltoft:	
  5708                           
  5709                           	psect	text27
  5710  0E2B                     __ptext27:	
  5711 ;; *************** function ___fttol *****************
  5712 ;; Defined at:
  5713 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  f1              3   16[BANK0 ] float 
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  lval            4   25[BANK0 ] unsigned long 
  5718 ;;  exp1            1   29[BANK0 ] unsigned char 
  5719 ;;  sign1           1   24[BANK0 ] unsigned char 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  4   16[BANK0 ] long 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5729 ;;      Params:         0       4       0       0       0
  5730 ;;      Locals:         0       6       0       0       0
  5731 ;;      Temps:          0       4       0       0       0
  5732 ;;      Totals:         0      14       0       0       0
  5733 ;;Total ram usage:       14 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_ISR
  5739 ;;		_ftoa
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function ___fttol
  5745  0E2B                     ___fttol:	
  5746                           
  5747                           ;incstack = 0
  5748 ;; hardware stack exceeded
  5749                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5750  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  5751  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  5752  0E2D  0830               	movf	___fttol@f1,w
  5753  0E2E  00B4               	movwf	??___fttol
  5754  0E2F  0831               	movf	___fttol@f1+1,w
  5755  0E30  00B5               	movwf	??___fttol+1
  5756  0E31  0832               	movf	___fttol@f1+2,w
  5757  0E32  00B6               	movwf	??___fttol+2
  5758  0E33  1003               	clrc
  5759  0E34  0D35               	rlf	??___fttol+1,w
  5760  0E35  0D36               	rlf	??___fttol+2,w
  5761  0E36  00B7               	movwf	??___fttol+3
  5762  0E37  0837               	movf	??___fttol+3,w
  5763  0E38  00BD               	movwf	___fttol@exp1
  5764  0E39  08BD               	movf	___fttol@exp1,f
  5765  0E3A  1D03               	skipz
  5766  0E3B  2E45               	goto	i1l2464
  5767  0E3C  3000               	movlw	0
  5768  0E3D  00B3               	movwf	?___fttol+3
  5769  0E3E  3000               	movlw	0
  5770  0E3F  00B2               	movwf	?___fttol+2
  5771  0E40  3000               	movlw	0
  5772  0E41  00B1               	movwf	?___fttol+1
  5773  0E42  3000               	movlw	0
  5774  0E43  00B0               	movwf	?___fttol
  5775  0E44  0008               	return
  5776  0E45                     i1l2464:	
  5777  0E45  0830               	movf	___fttol@f1,w
  5778  0E46  00B4               	movwf	??___fttol
  5779  0E47  0831               	movf	___fttol@f1+1,w
  5780  0E48  00B5               	movwf	??___fttol+1
  5781  0E49  0832               	movf	___fttol@f1+2,w
  5782  0E4A  00B6               	movwf	??___fttol+2
  5783  0E4B  3017               	movlw	23
  5784  0E4C                     u317_25:	
  5785  0E4C  1003               	clrc
  5786  0E4D  0CB6               	rrf	??___fttol+2,f
  5787  0E4E  0CB5               	rrf	??___fttol+1,f
  5788  0E4F  0CB4               	rrf	??___fttol,f
  5789  0E50  3EFF               	addlw	-1
  5790  0E51  1D03               	skipz
  5791  0E52  2E4C               	goto	u317_25
  5792  0E53  0834               	movf	??___fttol,w
  5793  0E54  00B7               	movwf	??___fttol+3
  5794  0E55  0837               	movf	??___fttol+3,w
  5795  0E56  00B8               	movwf	___fttol@sign1
  5796  0E57  17B1               	bsf	___fttol@f1+1,7
  5797  0E58  30FF               	movlw	255
  5798  0E59  05B0               	andwf	___fttol@f1,f
  5799  0E5A  30FF               	movlw	255
  5800  0E5B  05B1               	andwf	___fttol@f1+1,f
  5801  0E5C  3000               	movlw	0
  5802  0E5D  05B2               	andwf	___fttol@f1+2,f
  5803  0E5E  0830               	movf	___fttol@f1,w
  5804  0E5F  00B9               	movwf	___fttol@lval
  5805  0E60  0831               	movf	___fttol@f1+1,w
  5806  0E61  00BA               	movwf	___fttol@lval+1
  5807  0E62  0832               	movf	___fttol@f1+2,w
  5808  0E63  00BB               	movwf	___fttol@lval+2
  5809  0E64  01BC               	clrf	___fttol@lval+3
  5810  0E65  308E               	movlw	142
  5811  0E66  02BD               	subwf	___fttol@exp1,f
  5812  0E67  1FBD               	btfss	___fttol@exp1,7
  5813  0E68  2E87               	goto	i1l2484
  5814  0E69  083D               	movf	___fttol@exp1,w
  5815  0E6A  3A80               	xorlw	128
  5816  0E6B  3E8F               	addlw	143
  5817  0E6C  1803               	skipnc
  5818  0E6D  2E77               	goto	i1l2482
  5819  0E6E  3000               	movlw	0
  5820  0E6F  00B3               	movwf	?___fttol+3
  5821  0E70  3000               	movlw	0
  5822  0E71  00B2               	movwf	?___fttol+2
  5823  0E72  3000               	movlw	0
  5824  0E73  00B1               	movwf	?___fttol+1
  5825  0E74  3000               	movlw	0
  5826  0E75  00B0               	movwf	?___fttol
  5827  0E76  0008               	return
  5828  0E77                     i1l2482:	
  5829  0E77  3001               	movlw	1
  5830  0E78                     u320_25:	
  5831  0E78  1003               	clrc
  5832  0E79  0CBC               	rrf	___fttol@lval+3,f
  5833  0E7A  0CBB               	rrf	___fttol@lval+2,f
  5834  0E7B  0CBA               	rrf	___fttol@lval+1,f
  5835  0E7C  0CB9               	rrf	___fttol@lval,f
  5836  0E7D  3EFF               	addlw	-1
  5837  0E7E  1D03               	skipz
  5838  0E7F  2E78               	goto	u320_25
  5839  0E80  3001               	movlw	1
  5840  0E81  00B4               	movwf	??___fttol
  5841  0E82  0834               	movf	??___fttol,w
  5842  0E83  07BD               	addwf	___fttol@exp1,f
  5843  0E84  1903               	btfsc	3,2
  5844  0E85  2EA2               	goto	i1l2494
  5845  0E86  2E77               	goto	i1l2482
  5846  0E87                     i1l2484:	
  5847  0E87  3018               	movlw	24
  5848  0E88  023D               	subwf	___fttol@exp1,w
  5849  0E89  1C03               	skipc
  5850  0E8A  2E9F               	goto	i1l2492
  5851  0E8B  3000               	movlw	0
  5852  0E8C  00B3               	movwf	?___fttol+3
  5853  0E8D  3000               	movlw	0
  5854  0E8E  00B2               	movwf	?___fttol+2
  5855  0E8F  3000               	movlw	0
  5856  0E90  00B1               	movwf	?___fttol+1
  5857  0E91  3000               	movlw	0
  5858  0E92  00B0               	movwf	?___fttol
  5859  0E93  0008               	return
  5860  0E94                     i1l2490:	
  5861  0E94  3001               	movlw	1
  5862  0E95  00B4               	movwf	??___fttol
  5863  0E96                     u323_25:	
  5864  0E96  1003               	clrc
  5865  0E97  0DB9               	rlf	___fttol@lval,f
  5866  0E98  0DBA               	rlf	___fttol@lval+1,f
  5867  0E99  0DBB               	rlf	___fttol@lval+2,f
  5868  0E9A  0DBC               	rlf	___fttol@lval+3,f
  5869  0E9B  0BB4               	decfsz	??___fttol,f
  5870  0E9C  2E96               	goto	u323_25
  5871  0E9D  3001               	movlw	1
  5872  0E9E  02BD               	subwf	___fttol@exp1,f
  5873  0E9F                     i1l2492:	
  5874  0E9F  08BD               	movf	___fttol@exp1,f
  5875  0EA0  1D03               	skipz
  5876  0EA1  2E94               	goto	i1l2490
  5877  0EA2                     i1l2494:	
  5878  0EA2  0838               	movf	___fttol@sign1,w
  5879  0EA3  1903               	btfsc	3,2
  5880  0EA4  2EB0               	goto	i1l2498
  5881  0EA5  09B9               	comf	___fttol@lval,f
  5882  0EA6  09BA               	comf	___fttol@lval+1,f
  5883  0EA7  09BB               	comf	___fttol@lval+2,f
  5884  0EA8  09BC               	comf	___fttol@lval+3,f
  5885  0EA9  0AB9               	incf	___fttol@lval,f
  5886  0EAA  1903               	skipnz
  5887  0EAB  0ABA               	incf	___fttol@lval+1,f
  5888  0EAC  1903               	skipnz
  5889  0EAD  0ABB               	incf	___fttol@lval+2,f
  5890  0EAE  1903               	skipnz
  5891  0EAF  0ABC               	incf	___fttol@lval+3,f
  5892  0EB0                     i1l2498:	
  5893  0EB0  083C               	movf	___fttol@lval+3,w
  5894  0EB1  00B3               	movwf	?___fttol+3
  5895  0EB2  083B               	movf	___fttol@lval+2,w
  5896  0EB3  00B2               	movwf	?___fttol+2
  5897  0EB4  083A               	movf	___fttol@lval+1,w
  5898  0EB5  00B1               	movwf	?___fttol+1
  5899  0EB6  0839               	movf	___fttol@lval,w
  5900  0EB7  00B0               	movwf	?___fttol
  5901  0EB8  0008               	return
  5902  0EB9                     __end_of___fttol:	
  5903                           
  5904                           	psect	text28
  5905  171F                     __ptext28:	
  5906 ;; *************** function ___ftsub *****************
  5907 ;; Defined at:
  5908 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  f2              3    7[BANK0 ] float 
  5911 ;;  f1              3   10[BANK0 ] float 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;		None
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  3    7[BANK0 ] float 
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0, pclath, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5923 ;;      Params:         0       6       0       0       0
  5924 ;;      Locals:         0       0       0       0       0
  5925 ;;      Temps:          0       0       0       0       0
  5926 ;;      Totals:         0       6       0       0       0
  5927 ;;Total ram usage:        6 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    2
  5930 ;; This function calls:
  5931 ;;		___ftadd
  5932 ;; This function is called by:
  5933 ;;		_ftoa
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           
  5938                           ;psect for function ___ftsub
  5939  171F                     ___ftsub:	
  5940                           
  5941                           ;incstack = 0
  5942 ;; hardware stack exceeded
  5943                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5944  171F  3080               	movlw	128
  5945  1720  1283               	bcf	3,5	;RP0=0, select bank0
  5946  1721  1303               	bcf	3,6	;RP1=0, select bank0
  5947  1722  06A9               	xorwf	___ftsub@f2+2,f
  5948  1723  082A               	movf	___ftsub@f1,w
  5949  1724  00F8               	movwf	___ftadd@f1
  5950  1725  082B               	movf	___ftsub@f1+1,w
  5951  1726  00F9               	movwf	___ftadd@f1+1
  5952  1727  082C               	movf	___ftsub@f1+2,w
  5953  1728  00FA               	movwf	___ftadd@f1+2
  5954  1729  0827               	movf	___ftsub@f2,w
  5955  172A  00FB               	movwf	___ftadd@f2
  5956  172B  0828               	movf	___ftsub@f2+1,w
  5957  172C  00FC               	movwf	___ftadd@f2+1
  5958  172D  0829               	movf	___ftsub@f2+2,w
  5959  172E  00FD               	movwf	___ftadd@f2+2
  5960  172F  120A  118A  2505   	fcall	___ftadd
  5961  1732  0878               	movf	?___ftadd,w
  5962  1733  1283               	bcf	3,5	;RP0=0, select bank0
  5963  1734  1303               	bcf	3,6	;RP1=0, select bank0
  5964  1735  00A7               	movwf	?___ftsub
  5965  1736  0879               	movf	?___ftadd+1,w
  5966  1737  00A8               	movwf	?___ftsub+1
  5967  1738  087A               	movf	?___ftadd+2,w
  5968  1739  00A9               	movwf	?___ftsub+2
  5969  173A  0008               	return
  5970  173B                     __end_of___ftsub:	
  5971                           
  5972                           	psect	text29
  5973  0505                     __ptext29:	
  5974 ;; *************** function ___ftadd *****************
  5975 ;; Defined at:
  5976 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  f1              3    8[COMMON] float 
  5979 ;;  f2              3   11[COMMON] float 
  5980 ;; Auto vars:     Size  Location     Type
  5981 ;;  exp1            1    6[BANK0 ] unsigned char 
  5982 ;;  exp2            1    5[BANK0 ] unsigned char 
  5983 ;;  sign            1    4[BANK0 ] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  3    8[COMMON] float 
  5986 ;; Registers used:
  5987 ;;		wreg, status,2, status,0, pclath, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5993 ;;      Params:         6       0       0       0       0
  5994 ;;      Locals:         0       3       0       0       0
  5995 ;;      Temps:          0       4       0       0       0
  5996 ;;      Totals:         6       7       0       0       0
  5997 ;;Total ram usage:       13 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:    1
  6000 ;; This function calls:
  6001 ;;		___ftpack
  6002 ;; This function is called by:
  6003 ;;		___ftsub
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           
  6008                           ;psect for function ___ftadd
  6009  0505                     ___ftadd:	
  6010                           
  6011                           ;incstack = 0
  6012 ;; hardware stack exceeded
  6013                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6014  0505  0878               	movf	___ftadd@f1,w
  6015  0506  1283               	bcf	3,5	;RP0=0, select bank0
  6016  0507  1303               	bcf	3,6	;RP1=0, select bank0
  6017  0508  00A0               	movwf	??___ftadd
  6018  0509  0879               	movf	___ftadd@f1+1,w
  6019  050A  00A1               	movwf	??___ftadd+1
  6020  050B  087A               	movf	___ftadd@f1+2,w
  6021  050C  00A2               	movwf	??___ftadd+2
  6022  050D  1003               	clrc
  6023  050E  0D21               	rlf	??___ftadd+1,w
  6024  050F  0D22               	rlf	??___ftadd+2,w
  6025  0510  00A3               	movwf	??___ftadd+3
  6026  0511  0823               	movf	??___ftadd+3,w
  6027  0512  00A6               	movwf	___ftadd@exp1
  6028  0513  087B               	movf	___ftadd@f2,w
  6029  0514  00A0               	movwf	??___ftadd
  6030  0515  087C               	movf	___ftadd@f2+1,w
  6031  0516  00A1               	movwf	??___ftadd+1
  6032  0517  087D               	movf	___ftadd@f2+2,w
  6033  0518  00A2               	movwf	??___ftadd+2
  6034  0519  1003               	clrc
  6035  051A  0D21               	rlf	??___ftadd+1,w
  6036  051B  0D22               	rlf	??___ftadd+2,w
  6037  051C  00A3               	movwf	??___ftadd+3
  6038  051D  0823               	movf	??___ftadd+3,w
  6039  051E  00A5               	movwf	___ftadd@exp2
  6040  051F  0826               	movf	___ftadd@exp1,w
  6041  0520  1903               	btfsc	3,2
  6042  0521  2D2E               	goto	i1l2040
  6043  0522  0825               	movf	___ftadd@exp2,w
  6044  0523  0226               	subwf	___ftadd@exp1,w
  6045  0524  1803               	skipnc
  6046  0525  2D35               	goto	i1l2044
  6047  0526  0326               	decf	___ftadd@exp1,w
  6048  0527  3AFF               	xorlw	255
  6049  0528  0725               	addwf	___ftadd@exp2,w
  6050  0529  00A0               	movwf	??___ftadd
  6051  052A  3019               	movlw	25
  6052  052B  0220               	subwf	??___ftadd,w
  6053  052C  1C03               	skipc
  6054  052D  2D35               	goto	i1l2044
  6055  052E                     i1l2040:	
  6056  052E  087B               	movf	___ftadd@f2,w
  6057  052F  00F8               	movwf	?___ftadd
  6058  0530  087C               	movf	___ftadd@f2+1,w
  6059  0531  00F9               	movwf	?___ftadd+1
  6060  0532  087D               	movf	___ftadd@f2+2,w
  6061  0533  00FA               	movwf	?___ftadd+2
  6062  0534  0008               	return
  6063  0535                     i1l2044:	
  6064  0535  0825               	movf	___ftadd@exp2,w
  6065  0536  1903               	btfsc	3,2
  6066  0537  0008               	return
  6067  0538  0826               	movf	___ftadd@exp1,w
  6068  0539  0225               	subwf	___ftadd@exp2,w
  6069  053A  1803               	skipnc
  6070  053B  2D44               	goto	i1l2050
  6071  053C  0325               	decf	___ftadd@exp2,w
  6072  053D  3AFF               	xorlw	255
  6073  053E  0726               	addwf	___ftadd@exp1,w
  6074  053F  00A0               	movwf	??___ftadd
  6075  0540  3019               	movlw	25
  6076  0541  0220               	subwf	??___ftadd,w
  6077  0542  1803               	btfsc	3,0
  6078  0543  0008               	return
  6079  0544                     i1l2050:	
  6080  0544  3006               	movlw	6
  6081  0545  00A0               	movwf	??___ftadd
  6082  0546  0820               	movf	??___ftadd,w
  6083  0547  00A4               	movwf	___ftadd@sign
  6084  0548  1BFA               	btfsc	___ftadd@f1+2,7
  6085  0549  17A4               	bsf	___ftadd@sign,7
  6086  054A  1BFD               	btfsc	___ftadd@f2+2,7
  6087  054B  1724               	bsf	___ftadd@sign,6
  6088  054C  17F9               	bsf	___ftadd@f1+1,7
  6089  054D  30FF               	movlw	255
  6090  054E  05F8               	andwf	___ftadd@f1,f
  6091  054F  30FF               	movlw	255
  6092  0550  05F9               	andwf	___ftadd@f1+1,f
  6093  0551  3000               	movlw	0
  6094  0552  05FA               	andwf	___ftadd@f1+2,f
  6095  0553  17FC               	bsf	___ftadd@f2+1,7
  6096  0554  30FF               	movlw	255
  6097  0555  05FB               	andwf	___ftadd@f2,f
  6098  0556  30FF               	movlw	255
  6099  0557  05FC               	andwf	___ftadd@f2+1,f
  6100  0558  3000               	movlw	0
  6101  0559  05FD               	andwf	___ftadd@f2+2,f
  6102  055A  0825               	movf	___ftadd@exp2,w
  6103  055B  0226               	subwf	___ftadd@exp1,w
  6104  055C  1803               	skipnc
  6105  055D  2D84               	goto	i1l2072
  6106  055E                     i1l2062:	
  6107  055E  3001               	movlw	1
  6108  055F                     u237_25:	
  6109  055F  1003               	clrc
  6110  0560  0DFB               	rlf	___ftadd@f2,f
  6111  0561  0DFC               	rlf	___ftadd@f2+1,f
  6112  0562  0DFD               	rlf	___ftadd@f2+2,f
  6113  0563  3EFF               	addlw	-1
  6114  0564  1D03               	skipz
  6115  0565  2D5F               	goto	u237_25
  6116  0566  3001               	movlw	1
  6117  0567  02A5               	subwf	___ftadd@exp2,f
  6118  0568  0825               	movf	___ftadd@exp2,w
  6119  0569  0626               	xorwf	___ftadd@exp1,w
  6120  056A  1903               	skipnz
  6121  056B  2D7F               	goto	i1l2070
  6122  056C  3001               	movlw	1
  6123  056D  02A4               	subwf	___ftadd@sign,f
  6124  056E  0824               	movf	___ftadd@sign,w
  6125  056F  3907               	andlw	7
  6126  0570  1903               	btfsc	3,2
  6127  0571  2D7F               	goto	i1l2070
  6128  0572  2D5E               	goto	i1l2062
  6129  0573                     i1l2068:	
  6130  0573  3001               	movlw	1
  6131  0574                     u240_25:	
  6132  0574  1003               	clrc
  6133  0575  0CFA               	rrf	___ftadd@f1+2,f
  6134  0576  0CF9               	rrf	___ftadd@f1+1,f
  6135  0577  0CF8               	rrf	___ftadd@f1,f
  6136  0578  3EFF               	addlw	-1
  6137  0579  1D03               	skipz
  6138  057A  2D74               	goto	u240_25
  6139  057B  3001               	movlw	1
  6140  057C  00A0               	movwf	??___ftadd
  6141  057D  0820               	movf	??___ftadd,w
  6142  057E  07A6               	addwf	___ftadd@exp1,f
  6143  057F                     i1l2070:	
  6144  057F  0826               	movf	___ftadd@exp1,w
  6145  0580  0625               	xorwf	___ftadd@exp2,w
  6146  0581  1903               	btfsc	3,2
  6147  0582  2DAD               	goto	i1l548
  6148  0583  2D73               	goto	i1l2068
  6149  0584                     i1l2072:	
  6150  0584  0826               	movf	___ftadd@exp1,w
  6151  0585  0225               	subwf	___ftadd@exp2,w
  6152  0586  1803               	skipnc
  6153  0587  2DAD               	goto	i1l548
  6154  0588                     i1l2074:	
  6155  0588  3001               	movlw	1
  6156  0589                     u243_25:	
  6157  0589  1003               	clrc
  6158  058A  0DF8               	rlf	___ftadd@f1,f
  6159  058B  0DF9               	rlf	___ftadd@f1+1,f
  6160  058C  0DFA               	rlf	___ftadd@f1+2,f
  6161  058D  3EFF               	addlw	-1
  6162  058E  1D03               	skipz
  6163  058F  2D89               	goto	u243_25
  6164  0590  3001               	movlw	1
  6165  0591  02A6               	subwf	___ftadd@exp1,f
  6166  0592  0825               	movf	___ftadd@exp2,w
  6167  0593  0626               	xorwf	___ftadd@exp1,w
  6168  0594  1903               	skipnz
  6169  0595  2DA9               	goto	i1l2082
  6170  0596  3001               	movlw	1
  6171  0597  02A4               	subwf	___ftadd@sign,f
  6172  0598  0824               	movf	___ftadd@sign,w
  6173  0599  3907               	andlw	7
  6174  059A  1903               	btfsc	3,2
  6175  059B  2DA9               	goto	i1l2082
  6176  059C  2D88               	goto	i1l2074
  6177  059D                     i1l2080:	
  6178  059D  3001               	movlw	1
  6179  059E                     u246_25:	
  6180  059E  1003               	clrc
  6181  059F  0CFD               	rrf	___ftadd@f2+2,f
  6182  05A0  0CFC               	rrf	___ftadd@f2+1,f
  6183  05A1  0CFB               	rrf	___ftadd@f2,f
  6184  05A2  3EFF               	addlw	-1
  6185  05A3  1D03               	skipz
  6186  05A4  2D9E               	goto	u246_25
  6187  05A5  3001               	movlw	1
  6188  05A6  00A0               	movwf	??___ftadd
  6189  05A7  0820               	movf	??___ftadd,w
  6190  05A8  07A5               	addwf	___ftadd@exp2,f
  6191  05A9                     i1l2082:	
  6192  05A9  0826               	movf	___ftadd@exp1,w
  6193  05AA  0625               	xorwf	___ftadd@exp2,w
  6194  05AB  1D03               	skipz
  6195  05AC  2D9D               	goto	i1l2080
  6196  05AD                     i1l548:	
  6197  05AD  1FA4               	btfss	___ftadd@sign,7
  6198  05AE  2DBF               	goto	i1l2086
  6199  05AF  30FF               	movlw	255
  6200  05B0  06F8               	xorwf	___ftadd@f1,f
  6201  05B1  30FF               	movlw	255
  6202  05B2  06F9               	xorwf	___ftadd@f1+1,f
  6203  05B3  30FF               	movlw	255
  6204  05B4  06FA               	xorwf	___ftadd@f1+2,f
  6205  05B5  3001               	movlw	1
  6206  05B6  07F8               	addwf	___ftadd@f1,f
  6207  05B7  3000               	movlw	0
  6208  05B8  1803               	skipnc
  6209  05B9  3001               	movlw	1
  6210  05BA  07F9               	addwf	___ftadd@f1+1,f
  6211  05BB  3000               	movlw	0
  6212  05BC  1803               	skipnc
  6213  05BD  3001               	movlw	1
  6214  05BE  07FA               	addwf	___ftadd@f1+2,f
  6215  05BF                     i1l2086:	
  6216  05BF  1F24               	btfss	___ftadd@sign,6
  6217  05C0  2DD1               	goto	i1l2090
  6218  05C1  30FF               	movlw	255
  6219  05C2  06FB               	xorwf	___ftadd@f2,f
  6220  05C3  30FF               	movlw	255
  6221  05C4  06FC               	xorwf	___ftadd@f2+1,f
  6222  05C5  30FF               	movlw	255
  6223  05C6  06FD               	xorwf	___ftadd@f2+2,f
  6224  05C7  3001               	movlw	1
  6225  05C8  07FB               	addwf	___ftadd@f2,f
  6226  05C9  3000               	movlw	0
  6227  05CA  1803               	skipnc
  6228  05CB  3001               	movlw	1
  6229  05CC  07FC               	addwf	___ftadd@f2+1,f
  6230  05CD  3000               	movlw	0
  6231  05CE  1803               	skipnc
  6232  05CF  3001               	movlw	1
  6233  05D0  07FD               	addwf	___ftadd@f2+2,f
  6234  05D1                     i1l2090:	
  6235  05D1  01A4               	clrf	___ftadd@sign
  6236  05D2  0878               	movf	___ftadd@f1,w
  6237  05D3  07FB               	addwf	___ftadd@f2,f
  6238  05D4  0879               	movf	___ftadd@f1+1,w
  6239  05D5  1103               	clrz
  6240  05D6  1803               	skipnc
  6241  05D7  0A79               	incf	___ftadd@f1+1,w
  6242  05D8  1D03               	btfss	3,2
  6243  05D9  07FC               	addwf	___ftadd@f2+1,f
  6244  05DA  087A               	movf	___ftadd@f1+2,w
  6245  05DB  1103               	clrz
  6246  05DC  1803               	skipnc
  6247  05DD  0A7A               	incf	___ftadd@f1+2,w
  6248  05DE  1D03               	btfss	3,2
  6249  05DF  07FD               	addwf	___ftadd@f2+2,f
  6250  05E0  1FFD               	btfss	___ftadd@f2+2,7
  6251  05E1  2DF4               	goto	i1l2100
  6252  05E2  30FF               	movlw	255
  6253  05E3  06FB               	xorwf	___ftadd@f2,f
  6254  05E4  30FF               	movlw	255
  6255  05E5  06FC               	xorwf	___ftadd@f2+1,f
  6256  05E6  30FF               	movlw	255
  6257  05E7  06FD               	xorwf	___ftadd@f2+2,f
  6258  05E8  3001               	movlw	1
  6259  05E9  07FB               	addwf	___ftadd@f2,f
  6260  05EA  3000               	movlw	0
  6261  05EB  1803               	skipnc
  6262  05EC  3001               	movlw	1
  6263  05ED  07FC               	addwf	___ftadd@f2+1,f
  6264  05EE  3000               	movlw	0
  6265  05EF  1803               	skipnc
  6266  05F0  3001               	movlw	1
  6267  05F1  07FD               	addwf	___ftadd@f2+2,f
  6268  05F2  01A4               	clrf	___ftadd@sign
  6269  05F3  0AA4               	incf	___ftadd@sign,f
  6270  05F4                     i1l2100:	
  6271  05F4  087B               	movf	___ftadd@f2,w
  6272  05F5  00F0               	movwf	___ftpack@arg
  6273  05F6  087C               	movf	___ftadd@f2+1,w
  6274  05F7  00F1               	movwf	___ftpack@arg+1
  6275  05F8  087D               	movf	___ftadd@f2+2,w
  6276  05F9  00F2               	movwf	___ftpack@arg+2
  6277  05FA  0826               	movf	___ftadd@exp1,w
  6278  05FB  00A0               	movwf	??___ftadd
  6279  05FC  0820               	movf	??___ftadd,w
  6280  05FD  00F3               	movwf	___ftpack@exp
  6281  05FE  0824               	movf	___ftadd@sign,w
  6282  05FF  00A1               	movwf	??___ftadd+1
  6283  0600  0821               	movf	??___ftadd+1,w
  6284  0601  00F4               	movwf	___ftpack@sign
  6285  0602  120A  158A  24CF   	fcall	___ftpack
  6286  0605  0870               	movf	?___ftpack,w
  6287  0606  00F8               	movwf	?___ftadd
  6288  0607  0871               	movf	?___ftpack+1,w
  6289  0608  00F9               	movwf	?___ftadd+1
  6290  0609  0872               	movf	?___ftpack+2,w
  6291  060A  00FA               	movwf	?___ftadd+2
  6292  060B  0008               	return
  6293  060C                     __end_of___ftadd:	
  6294                           
  6295                           	psect	text30
  6296  1695                     __ptext30:	
  6297 ;; *************** function ___ftneg *****************
  6298 ;; Defined at:
  6299 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  f1              3    0[COMMON] float 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  3    0[COMMON] float 
  6306 ;; Registers used:
  6307 ;;		wreg
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6313 ;;      Params:         3       0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0
  6316 ;;      Totals:         3       0       0       0       0
  6317 ;;Total ram usage:        3 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_ftoa
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function ___ftneg
  6328  1695                     ___ftneg:	
  6329                           
  6330                           ;incstack = 0
  6331 ;; hardware stack exceeded
  6332                           ; Regs used in ___ftneg: [wreg]
  6333  1695  0872               	movf	___ftneg@f1+2,w
  6334  1696  0471               	iorwf	___ftneg@f1+1,w
  6335  1697  0470               	iorwf	___ftneg@f1,w
  6336  1698  1903               	skipnz
  6337  1699  0008               	return
  6338  169A  3080               	movlw	128
  6339  169B  06F2               	xorwf	___ftneg@f1+2,f
  6340  169C  0008               	return
  6341  169D                     __end_of___ftneg:	
  6342                           
  6343                           	psect	text31
  6344  060C                     __ptext31:	
  6345 ;; *************** function ___ftmul *****************
  6346 ;; Defined at:
  6347 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  f1              3    0[BANK0 ] float 
  6350 ;;  f2              3    3[BANK0 ] float 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6353 ;;  sign            1   15[BANK0 ] unsigned char 
  6354 ;;  cntr            1   14[BANK0 ] unsigned char 
  6355 ;;  exp             1   10[BANK0 ] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  3    0[BANK0 ] float 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0, pclath, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6365 ;;      Params:         0       6       0       0       0
  6366 ;;      Locals:         0       6       0       0       0
  6367 ;;      Temps:          0       4       0       0       0
  6368 ;;      Totals:         0      16       0       0       0
  6369 ;;Total ram usage:       16 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    1
  6372 ;; This function calls:
  6373 ;;		___ftpack
  6374 ;; This function is called by:
  6375 ;;		_ISR
  6376 ;;		_ftoa
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           
  6381                           ;psect for function ___ftmul
  6382  060C                     ___ftmul:	
  6383                           
  6384                           ;incstack = 0
  6385 ;; hardware stack exceeded
  6386                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6387  060C  1283               	bcf	3,5	;RP0=0, select bank0
  6388  060D  1303               	bcf	3,6	;RP1=0, select bank0
  6389  060E  0820               	movf	___ftmul@f1,w
  6390  060F  00A6               	movwf	??___ftmul
  6391  0610  0821               	movf	___ftmul@f1+1,w
  6392  0611  00A7               	movwf	??___ftmul+1
  6393  0612  0822               	movf	___ftmul@f1+2,w
  6394  0613  00A8               	movwf	??___ftmul+2
  6395  0614  1003               	clrc
  6396  0615  0D27               	rlf	??___ftmul+1,w
  6397  0616  0D28               	rlf	??___ftmul+2,w
  6398  0617  00A9               	movwf	??___ftmul+3
  6399  0618  0829               	movf	??___ftmul+3,w
  6400  0619  00AA               	movwf	___ftmul@exp
  6401  061A  08AA               	movf	___ftmul@exp,f
  6402  061B  1D03               	skipz
  6403  061C  2E24               	goto	i1l2400
  6404  061D  3000               	movlw	0
  6405  061E  00A0               	movwf	?___ftmul
  6406  061F  3000               	movlw	0
  6407  0620  00A1               	movwf	?___ftmul+1
  6408  0621  3000               	movlw	0
  6409  0622  00A2               	movwf	?___ftmul+2
  6410  0623  0008               	return
  6411  0624                     i1l2400:	
  6412  0624  0823               	movf	___ftmul@f2,w
  6413  0625  00A6               	movwf	??___ftmul
  6414  0626  0824               	movf	___ftmul@f2+1,w
  6415  0627  00A7               	movwf	??___ftmul+1
  6416  0628  0825               	movf	___ftmul@f2+2,w
  6417  0629  00A8               	movwf	??___ftmul+2
  6418  062A  1003               	clrc
  6419  062B  0D27               	rlf	??___ftmul+1,w
  6420  062C  0D28               	rlf	??___ftmul+2,w
  6421  062D  00A9               	movwf	??___ftmul+3
  6422  062E  0829               	movf	??___ftmul+3,w
  6423  062F  00AF               	movwf	___ftmul@sign
  6424  0630  08AF               	movf	___ftmul@sign,f
  6425  0631  1D03               	skipz
  6426  0632  2E3A               	goto	i1l2406
  6427  0633  3000               	movlw	0
  6428  0634  00A0               	movwf	?___ftmul
  6429  0635  3000               	movlw	0
  6430  0636  00A1               	movwf	?___ftmul+1
  6431  0637  3000               	movlw	0
  6432  0638  00A2               	movwf	?___ftmul+2
  6433  0639  0008               	return
  6434  063A                     i1l2406:	
  6435  063A  082F               	movf	___ftmul@sign,w
  6436  063B  3E7B               	addlw	123
  6437  063C  00A6               	movwf	??___ftmul
  6438  063D  0826               	movf	??___ftmul,w
  6439  063E  07AA               	addwf	___ftmul@exp,f
  6440  063F  0820               	movf	___ftmul@f1,w
  6441  0640  00A6               	movwf	??___ftmul
  6442  0641  0821               	movf	___ftmul@f1+1,w
  6443  0642  00A7               	movwf	??___ftmul+1
  6444  0643  0822               	movf	___ftmul@f1+2,w
  6445  0644  00A8               	movwf	??___ftmul+2
  6446  0645  3010               	movlw	16
  6447  0646                     u303_25:	
  6448  0646  1003               	clrc
  6449  0647  0CA8               	rrf	??___ftmul+2,f
  6450  0648  0CA7               	rrf	??___ftmul+1,f
  6451  0649  0CA6               	rrf	??___ftmul,f
  6452  064A  3EFF               	addlw	-1
  6453  064B  1D03               	skipz
  6454  064C  2E46               	goto	u303_25
  6455  064D  0826               	movf	??___ftmul,w
  6456  064E  00A9               	movwf	??___ftmul+3
  6457  064F  0829               	movf	??___ftmul+3,w
  6458  0650  00AF               	movwf	___ftmul@sign
  6459  0651  0823               	movf	___ftmul@f2,w
  6460  0652  00A6               	movwf	??___ftmul
  6461  0653  0824               	movf	___ftmul@f2+1,w
  6462  0654  00A7               	movwf	??___ftmul+1
  6463  0655  0825               	movf	___ftmul@f2+2,w
  6464  0656  00A8               	movwf	??___ftmul+2
  6465  0657  3010               	movlw	16
  6466  0658                     u304_25:	
  6467  0658  1003               	clrc
  6468  0659  0CA8               	rrf	??___ftmul+2,f
  6469  065A  0CA7               	rrf	??___ftmul+1,f
  6470  065B  0CA6               	rrf	??___ftmul,f
  6471  065C  3EFF               	addlw	-1
  6472  065D  1D03               	skipz
  6473  065E  2E58               	goto	u304_25
  6474  065F  0826               	movf	??___ftmul,w
  6475  0660  00A9               	movwf	??___ftmul+3
  6476  0661  0829               	movf	??___ftmul+3,w
  6477  0662  06AF               	xorwf	___ftmul@sign,f
  6478  0663  3080               	movlw	128
  6479  0664  00A6               	movwf	??___ftmul
  6480  0665  0826               	movf	??___ftmul,w
  6481  0666  05AF               	andwf	___ftmul@sign,f
  6482  0667  17A1               	bsf	___ftmul@f1+1,7
  6483  0668  17A4               	bsf	___ftmul@f2+1,7
  6484  0669  30FF               	movlw	255
  6485  066A  05A3               	andwf	___ftmul@f2,f
  6486  066B  30FF               	movlw	255
  6487  066C  05A4               	andwf	___ftmul@f2+1,f
  6488  066D  3000               	movlw	0
  6489  066E  05A5               	andwf	___ftmul@f2+2,f
  6490  066F  3000               	movlw	0
  6491  0670  00AB               	movwf	___ftmul@f3_as_product
  6492  0671  3000               	movlw	0
  6493  0672  00AC               	movwf	___ftmul@f3_as_product+1
  6494  0673  3000               	movlw	0
  6495  0674  00AD               	movwf	___ftmul@f3_as_product+2
  6496  0675  3007               	movlw	7
  6497  0676  00A6               	movwf	??___ftmul
  6498  0677  0826               	movf	??___ftmul,w
  6499  0678  00AE               	movwf	___ftmul@cntr
  6500  0679                     i1l2418:	
  6501  0679  1C20               	btfss	___ftmul@f1,0
  6502  067A  2E89               	goto	i1l2422
  6503  067B  0823               	movf	___ftmul@f2,w
  6504  067C  07AB               	addwf	___ftmul@f3_as_product,f
  6505  067D  0824               	movf	___ftmul@f2+1,w
  6506  067E  1103               	clrz
  6507  067F  1803               	skipnc
  6508  0680  0A24               	incf	___ftmul@f2+1,w
  6509  0681  1D03               	btfss	3,2
  6510  0682  07AC               	addwf	___ftmul@f3_as_product+1,f
  6511  0683  0825               	movf	___ftmul@f2+2,w
  6512  0684  1103               	clrz
  6513  0685  1803               	skipnc
  6514  0686  0A25               	incf	___ftmul@f2+2,w
  6515  0687  1D03               	btfss	3,2
  6516  0688  07AD               	addwf	___ftmul@f3_as_product+2,f
  6517  0689                     i1l2422:	
  6518  0689  3001               	movlw	1
  6519  068A                     u307_25:	
  6520  068A  1003               	clrc
  6521  068B  0CA2               	rrf	___ftmul@f1+2,f
  6522  068C  0CA1               	rrf	___ftmul@f1+1,f
  6523  068D  0CA0               	rrf	___ftmul@f1,f
  6524  068E  3EFF               	addlw	-1
  6525  068F  1D03               	skipz
  6526  0690  2E8A               	goto	u307_25
  6527  0691  3001               	movlw	1
  6528  0692                     u308_25:	
  6529  0692  1003               	clrc
  6530  0693  0DA3               	rlf	___ftmul@f2,f
  6531  0694  0DA4               	rlf	___ftmul@f2+1,f
  6532  0695  0DA5               	rlf	___ftmul@f2+2,f
  6533  0696  3EFF               	addlw	-1
  6534  0697  1D03               	skipz
  6535  0698  2E92               	goto	u308_25
  6536  0699  3001               	movlw	1
  6537  069A  02AE               	subwf	___ftmul@cntr,f
  6538  069B  1D03               	btfss	3,2
  6539  069C  2E79               	goto	i1l2418
  6540  069D  3009               	movlw	9
  6541  069E  00A6               	movwf	??___ftmul
  6542  069F  0826               	movf	??___ftmul,w
  6543  06A0  00AE               	movwf	___ftmul@cntr
  6544  06A1                     i1l2430:	
  6545  06A1  1C20               	btfss	___ftmul@f1,0
  6546  06A2  2EB1               	goto	i1l2434
  6547  06A3  0823               	movf	___ftmul@f2,w
  6548  06A4  07AB               	addwf	___ftmul@f3_as_product,f
  6549  06A5  0824               	movf	___ftmul@f2+1,w
  6550  06A6  1103               	clrz
  6551  06A7  1803               	skipnc
  6552  06A8  0A24               	incf	___ftmul@f2+1,w
  6553  06A9  1D03               	btfss	3,2
  6554  06AA  07AC               	addwf	___ftmul@f3_as_product+1,f
  6555  06AB  0825               	movf	___ftmul@f2+2,w
  6556  06AC  1103               	clrz
  6557  06AD  1803               	skipnc
  6558  06AE  0A25               	incf	___ftmul@f2+2,w
  6559  06AF  1D03               	btfss	3,2
  6560  06B0  07AD               	addwf	___ftmul@f3_as_product+2,f
  6561  06B1                     i1l2434:	
  6562  06B1  3001               	movlw	1
  6563  06B2                     u312_25:	
  6564  06B2  1003               	clrc
  6565  06B3  0CA2               	rrf	___ftmul@f1+2,f
  6566  06B4  0CA1               	rrf	___ftmul@f1+1,f
  6567  06B5  0CA0               	rrf	___ftmul@f1,f
  6568  06B6  3EFF               	addlw	-1
  6569  06B7  1D03               	skipz
  6570  06B8  2EB2               	goto	u312_25
  6571  06B9  3001               	movlw	1
  6572  06BA                     u313_25:	
  6573  06BA  1003               	clrc
  6574  06BB  0CAD               	rrf	___ftmul@f3_as_product+2,f
  6575  06BC  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6576  06BD  0CAB               	rrf	___ftmul@f3_as_product,f
  6577  06BE  3EFF               	addlw	-1
  6578  06BF  1D03               	skipz
  6579  06C0  2EBA               	goto	u313_25
  6580  06C1  3001               	movlw	1
  6581  06C2  02AE               	subwf	___ftmul@cntr,f
  6582  06C3  1D03               	btfss	3,2
  6583  06C4  2EA1               	goto	i1l2430
  6584  06C5  082B               	movf	___ftmul@f3_as_product,w
  6585  06C6  00F0               	movwf	___ftpack@arg
  6586  06C7  082C               	movf	___ftmul@f3_as_product+1,w
  6587  06C8  00F1               	movwf	___ftpack@arg+1
  6588  06C9  082D               	movf	___ftmul@f3_as_product+2,w
  6589  06CA  00F2               	movwf	___ftpack@arg+2
  6590  06CB  082A               	movf	___ftmul@exp,w
  6591  06CC  00A6               	movwf	??___ftmul
  6592  06CD  0826               	movf	??___ftmul,w
  6593  06CE  00F3               	movwf	___ftpack@exp
  6594  06CF  082F               	movf	___ftmul@sign,w
  6595  06D0  00A7               	movwf	??___ftmul+1
  6596  06D1  0827               	movf	??___ftmul+1,w
  6597  06D2  00F4               	movwf	___ftpack@sign
  6598  06D3  120A  158A  24CF   	fcall	___ftpack
  6599  06D6  0870               	movf	?___ftpack,w
  6600  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  6601  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  6602  06D9  00A0               	movwf	?___ftmul
  6603  06DA  0871               	movf	?___ftpack+1,w
  6604  06DB  00A1               	movwf	?___ftmul+1
  6605  06DC  0872               	movf	?___ftpack+2,w
  6606  06DD  00A2               	movwf	?___ftmul+2
  6607  06DE  0008               	return
  6608  06DF                     __end_of___ftmul:	
  6609                           
  6610                           	psect	text32
  6611  0C14                     __ptext32:	
  6612 ;; *************** function ___ftge *****************
  6613 ;; Defined at:
  6614 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  ff1             3    0[COMMON] float 
  6617 ;;  ff2             3    3[COMMON] float 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;		None               void
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6629 ;;      Params:         6       0       0       0       0
  6630 ;;      Locals:         0       0       0       0       0
  6631 ;;      Temps:          6       0       0       0       0
  6632 ;;      Totals:        12       0       0       0       0
  6633 ;;Total ram usage:       12 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_ftoa
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function ___ftge
  6644  0C14                     ___ftge:	
  6645                           
  6646                           ;incstack = 0
  6647 ;; hardware stack exceeded
  6648                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6649  0C14  1FF2               	btfss	___ftge@ff1+2,7
  6650  0C15  2C3B               	goto	i1l2378
  6651  0C16  3000               	movlw	0
  6652  0C17  00F6               	movwf	??___ftge
  6653  0C18  3000               	movlw	0
  6654  0C19  00F7               	movwf	??___ftge+1
  6655  0C1A  3080               	movlw	128
  6656  0C1B  00F8               	movwf	??___ftge+2
  6657  0C1C  0970               	comf	___ftge@ff1,w
  6658  0C1D  00F9               	movwf	??___ftge+3
  6659  0C1E  0971               	comf	___ftge@ff1+1,w
  6660  0C1F  00FA               	movwf	??___ftge+4
  6661  0C20  0972               	comf	___ftge@ff1+2,w
  6662  0C21  00FB               	movwf	??___ftge+5
  6663  0C22  0AF9               	incf	??___ftge+3,f
  6664  0C23  1903               	skipnz
  6665  0C24  0AFA               	incf	??___ftge+4,f
  6666  0C25  1903               	skipnz
  6667  0C26  0AFB               	incf	??___ftge+5,f
  6668  0C27  0879               	movf	??___ftge+3,w
  6669  0C28  07F6               	addwf	??___ftge,f
  6670  0C29  087A               	movf	??___ftge+4,w
  6671  0C2A  1803               	skipnc
  6672  0C2B  0F7A               	incfsz	??___ftge+4,w
  6673  0C2C  2C2E               	goto	u297_21
  6674  0C2D  2C2F               	goto	u297_22
  6675  0C2E                     u297_21:	
  6676  0C2E  07F7               	addwf	??___ftge+1,f
  6677  0C2F                     u297_22:	
  6678  0C2F  087B               	movf	??___ftge+5,w
  6679  0C30  1803               	skipnc
  6680  0C31  0F7B               	incfsz	??___ftge+5,w
  6681  0C32  2C34               	goto	u297_23
  6682  0C33  2C35               	goto	u297_24
  6683  0C34                     u297_23:	
  6684  0C34  07F8               	addwf	??___ftge+2,f
  6685  0C35                     u297_24:	
  6686  0C35  0876               	movf	??___ftge,w
  6687  0C36  00F0               	movwf	___ftge@ff1
  6688  0C37  0877               	movf	??___ftge+1,w
  6689  0C38  00F1               	movwf	___ftge@ff1+1
  6690  0C39  0878               	movf	??___ftge+2,w
  6691  0C3A  00F2               	movwf	___ftge@ff1+2
  6692  0C3B                     i1l2378:	
  6693  0C3B  1FF5               	btfss	___ftge@ff2+2,7
  6694  0C3C  2C62               	goto	i1l2382
  6695  0C3D  3000               	movlw	0
  6696  0C3E  00F6               	movwf	??___ftge
  6697  0C3F  3000               	movlw	0
  6698  0C40  00F7               	movwf	??___ftge+1
  6699  0C41  3080               	movlw	128
  6700  0C42  00F8               	movwf	??___ftge+2
  6701  0C43  0973               	comf	___ftge@ff2,w
  6702  0C44  00F9               	movwf	??___ftge+3
  6703  0C45  0974               	comf	___ftge@ff2+1,w
  6704  0C46  00FA               	movwf	??___ftge+4
  6705  0C47  0975               	comf	___ftge@ff2+2,w
  6706  0C48  00FB               	movwf	??___ftge+5
  6707  0C49  0AF9               	incf	??___ftge+3,f
  6708  0C4A  1903               	skipnz
  6709  0C4B  0AFA               	incf	??___ftge+4,f
  6710  0C4C  1903               	skipnz
  6711  0C4D  0AFB               	incf	??___ftge+5,f
  6712  0C4E  0879               	movf	??___ftge+3,w
  6713  0C4F  07F6               	addwf	??___ftge,f
  6714  0C50  087A               	movf	??___ftge+4,w
  6715  0C51  1803               	skipnc
  6716  0C52  0F7A               	incfsz	??___ftge+4,w
  6717  0C53  2C55               	goto	u299_21
  6718  0C54  2C56               	goto	u299_22
  6719  0C55                     u299_21:	
  6720  0C55  07F7               	addwf	??___ftge+1,f
  6721  0C56                     u299_22:	
  6722  0C56  087B               	movf	??___ftge+5,w
  6723  0C57  1803               	skipnc
  6724  0C58  0F7B               	incfsz	??___ftge+5,w
  6725  0C59  2C5B               	goto	u299_23
  6726  0C5A  2C5C               	goto	u299_24
  6727  0C5B                     u299_23:	
  6728  0C5B  07F8               	addwf	??___ftge+2,f
  6729  0C5C                     u299_24:	
  6730  0C5C  0876               	movf	??___ftge,w
  6731  0C5D  00F3               	movwf	___ftge@ff2
  6732  0C5E  0877               	movf	??___ftge+1,w
  6733  0C5F  00F4               	movwf	___ftge@ff2+1
  6734  0C60  0878               	movf	??___ftge+2,w
  6735  0C61  00F5               	movwf	___ftge@ff2+2
  6736  0C62                     i1l2382:	
  6737  0C62  3080               	movlw	128
  6738  0C63  06F2               	xorwf	___ftge@ff1+2,f
  6739  0C64  3080               	movlw	128
  6740  0C65  06F5               	xorwf	___ftge@ff2+2,f
  6741  0C66  0875               	movf	___ftge@ff2+2,w
  6742  0C67  0272               	subwf	___ftge@ff1+2,w
  6743  0C68  1D03               	skipz
  6744  0C69  0008               	return
  6745  0C6A  0874               	movf	___ftge@ff2+1,w
  6746  0C6B  0271               	subwf	___ftge@ff1+1,w
  6747  0C6C  1D03               	skipz
  6748  0C6D  0008               	return
  6749  0C6E  0873               	movf	___ftge@ff2,w
  6750  0C6F  0270               	subwf	___ftge@ff1,w
  6751  0C70  0008               	return
  6752  0C71                     __end_of___ftge:	
  6753                           
  6754                           	psect	text33
  6755  0F48                     __ptext33:	
  6756 ;; *************** function ___ftdiv *****************
  6757 ;; Defined at:
  6758 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  f2              3   16[BANK0 ] float 
  6761 ;;  f1              3   19[BANK0 ] float 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  f3              3   27[BANK0 ] float 
  6764 ;;  sign            1   31[BANK0 ] unsigned char 
  6765 ;;  exp             1   30[BANK0 ] unsigned char 
  6766 ;;  cntr            1   26[BANK0 ] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  3   16[BANK0 ] float 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, pclath, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6776 ;;      Params:         0       6       0       0       0
  6777 ;;      Locals:         0       6       0       0       0
  6778 ;;      Temps:          0       4       0       0       0
  6779 ;;      Totals:         0      16       0       0       0
  6780 ;;Total ram usage:       16 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    1
  6783 ;; This function calls:
  6784 ;;		___ftpack
  6785 ;; This function is called by:
  6786 ;;		_ISR
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           
  6791                           ;psect for function ___ftdiv
  6792  0F48                     ___ftdiv:	
  6793                           
  6794                           ;incstack = 0
  6795 ;; hardware stack exceeded
  6796                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6797  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  6798  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  6799  0F4A  0833               	movf	___ftdiv@f1,w
  6800  0F4B  00B6               	movwf	??___ftdiv
  6801  0F4C  0834               	movf	___ftdiv@f1+1,w
  6802  0F4D  00B7               	movwf	??___ftdiv+1
  6803  0F4E  0835               	movf	___ftdiv@f1+2,w
  6804  0F4F  00B8               	movwf	??___ftdiv+2
  6805  0F50  1003               	clrc
  6806  0F51  0D37               	rlf	??___ftdiv+1,w
  6807  0F52  0D38               	rlf	??___ftdiv+2,w
  6808  0F53  00B9               	movwf	??___ftdiv+3
  6809  0F54  0839               	movf	??___ftdiv+3,w
  6810  0F55  00BE               	movwf	___ftdiv@exp
  6811  0F56  08BE               	movf	___ftdiv@exp,f
  6812  0F57  1D03               	skipz
  6813  0F58  2F60               	goto	i1l2732
  6814  0F59  3000               	movlw	0
  6815  0F5A  00B0               	movwf	?___ftdiv
  6816  0F5B  3000               	movlw	0
  6817  0F5C  00B1               	movwf	?___ftdiv+1
  6818  0F5D  3000               	movlw	0
  6819  0F5E  00B2               	movwf	?___ftdiv+2
  6820  0F5F  0008               	return
  6821  0F60                     i1l2732:	
  6822  0F60  0830               	movf	___ftdiv@f2,w
  6823  0F61  00B6               	movwf	??___ftdiv
  6824  0F62  0831               	movf	___ftdiv@f2+1,w
  6825  0F63  00B7               	movwf	??___ftdiv+1
  6826  0F64  0832               	movf	___ftdiv@f2+2,w
  6827  0F65  00B8               	movwf	??___ftdiv+2
  6828  0F66  1003               	clrc
  6829  0F67  0D37               	rlf	??___ftdiv+1,w
  6830  0F68  0D38               	rlf	??___ftdiv+2,w
  6831  0F69  00B9               	movwf	??___ftdiv+3
  6832  0F6A  0839               	movf	??___ftdiv+3,w
  6833  0F6B  00BF               	movwf	___ftdiv@sign
  6834  0F6C  08BF               	movf	___ftdiv@sign,f
  6835  0F6D  1D03               	skipz
  6836  0F6E  2F76               	goto	i1l2738
  6837  0F6F  3000               	movlw	0
  6838  0F70  00B0               	movwf	?___ftdiv
  6839  0F71  3000               	movlw	0
  6840  0F72  00B1               	movwf	?___ftdiv+1
  6841  0F73  3000               	movlw	0
  6842  0F74  00B2               	movwf	?___ftdiv+2
  6843  0F75  0008               	return
  6844  0F76                     i1l2738:	
  6845  0F76  3000               	movlw	0
  6846  0F77  00BB               	movwf	___ftdiv@f3
  6847  0F78  3000               	movlw	0
  6848  0F79  00BC               	movwf	___ftdiv@f3+1
  6849  0F7A  3000               	movlw	0
  6850  0F7B  00BD               	movwf	___ftdiv@f3+2
  6851  0F7C  3089               	movlw	137
  6852  0F7D  073F               	addwf	___ftdiv@sign,w
  6853  0F7E  00B6               	movwf	??___ftdiv
  6854  0F7F  0836               	movf	??___ftdiv,w
  6855  0F80  02BE               	subwf	___ftdiv@exp,f
  6856  0F81  0833               	movf	___ftdiv@f1,w
  6857  0F82  00B6               	movwf	??___ftdiv
  6858  0F83  0834               	movf	___ftdiv@f1+1,w
  6859  0F84  00B7               	movwf	??___ftdiv+1
  6860  0F85  0835               	movf	___ftdiv@f1+2,w
  6861  0F86  00B8               	movwf	??___ftdiv+2
  6862  0F87  3010               	movlw	16
  6863  0F88                     u355_25:	
  6864  0F88  1003               	clrc
  6865  0F89  0CB8               	rrf	??___ftdiv+2,f
  6866  0F8A  0CB7               	rrf	??___ftdiv+1,f
  6867  0F8B  0CB6               	rrf	??___ftdiv,f
  6868  0F8C  3EFF               	addlw	-1
  6869  0F8D  1D03               	skipz
  6870  0F8E  2F88               	goto	u355_25
  6871  0F8F  0836               	movf	??___ftdiv,w
  6872  0F90  00B9               	movwf	??___ftdiv+3
  6873  0F91  0839               	movf	??___ftdiv+3,w
  6874  0F92  00BF               	movwf	___ftdiv@sign
  6875  0F93  0830               	movf	___ftdiv@f2,w
  6876  0F94  00B6               	movwf	??___ftdiv
  6877  0F95  0831               	movf	___ftdiv@f2+1,w
  6878  0F96  00B7               	movwf	??___ftdiv+1
  6879  0F97  0832               	movf	___ftdiv@f2+2,w
  6880  0F98  00B8               	movwf	??___ftdiv+2
  6881  0F99  3010               	movlw	16
  6882  0F9A                     u356_25:	
  6883  0F9A  1003               	clrc
  6884  0F9B  0CB8               	rrf	??___ftdiv+2,f
  6885  0F9C  0CB7               	rrf	??___ftdiv+1,f
  6886  0F9D  0CB6               	rrf	??___ftdiv,f
  6887  0F9E  3EFF               	addlw	-1
  6888  0F9F  1D03               	skipz
  6889  0FA0  2F9A               	goto	u356_25
  6890  0FA1  0836               	movf	??___ftdiv,w
  6891  0FA2  00B9               	movwf	??___ftdiv+3
  6892  0FA3  0839               	movf	??___ftdiv+3,w
  6893  0FA4  06BF               	xorwf	___ftdiv@sign,f
  6894  0FA5  3080               	movlw	128
  6895  0FA6  00B6               	movwf	??___ftdiv
  6896  0FA7  0836               	movf	??___ftdiv,w
  6897  0FA8  05BF               	andwf	___ftdiv@sign,f
  6898  0FA9  17B4               	bsf	___ftdiv@f1+1,7
  6899  0FAA  30FF               	movlw	255
  6900  0FAB  05B3               	andwf	___ftdiv@f1,f
  6901  0FAC  30FF               	movlw	255
  6902  0FAD  05B4               	andwf	___ftdiv@f1+1,f
  6903  0FAE  3000               	movlw	0
  6904  0FAF  05B5               	andwf	___ftdiv@f1+2,f
  6905  0FB0  17B1               	bsf	___ftdiv@f2+1,7
  6906  0FB1  30FF               	movlw	255
  6907  0FB2  05B0               	andwf	___ftdiv@f2,f
  6908  0FB3  30FF               	movlw	255
  6909  0FB4  05B1               	andwf	___ftdiv@f2+1,f
  6910  0FB5  3000               	movlw	0
  6911  0FB6  05B2               	andwf	___ftdiv@f2+2,f
  6912  0FB7  3018               	movlw	24
  6913  0FB8  00B6               	movwf	??___ftdiv
  6914  0FB9  0836               	movf	??___ftdiv,w
  6915  0FBA  00BA               	movwf	___ftdiv@cntr
  6916  0FBB                     i1l2752:	
  6917  0FBB  3001               	movlw	1
  6918  0FBC                     u357_25:	
  6919  0FBC  1003               	clrc
  6920  0FBD  0DBB               	rlf	___ftdiv@f3,f
  6921  0FBE  0DBC               	rlf	___ftdiv@f3+1,f
  6922  0FBF  0DBD               	rlf	___ftdiv@f3+2,f
  6923  0FC0  3EFF               	addlw	-1
  6924  0FC1  1D03               	skipz
  6925  0FC2  2FBC               	goto	u357_25
  6926  0FC3  0832               	movf	___ftdiv@f2+2,w
  6927  0FC4  0235               	subwf	___ftdiv@f1+2,w
  6928  0FC5  1D03               	skipz
  6929  0FC6  2FCD               	goto	u358_25
  6930  0FC7  0831               	movf	___ftdiv@f2+1,w
  6931  0FC8  0234               	subwf	___ftdiv@f1+1,w
  6932  0FC9  1D03               	skipz
  6933  0FCA  2FCD               	goto	u358_25
  6934  0FCB  0830               	movf	___ftdiv@f2,w
  6935  0FCC  0233               	subwf	___ftdiv@f1,w
  6936  0FCD                     u358_25:	
  6937  0FCD  1C03               	skipc
  6938  0FCE  2FDA               	goto	i1l2760
  6939  0FCF  0830               	movf	___ftdiv@f2,w
  6940  0FD0  02B3               	subwf	___ftdiv@f1,f
  6941  0FD1  0831               	movf	___ftdiv@f2+1,w
  6942  0FD2  1C03               	skipc
  6943  0FD3  0F31               	incfsz	___ftdiv@f2+1,w
  6944  0FD4  02B4               	subwf	___ftdiv@f1+1,f
  6945  0FD5  0832               	movf	___ftdiv@f2+2,w
  6946  0FD6  1C03               	skipc
  6947  0FD7  0A32               	incf	___ftdiv@f2+2,w
  6948  0FD8  02B5               	subwf	___ftdiv@f1+2,f
  6949  0FD9  143B               	bsf	___ftdiv@f3,0
  6950  0FDA                     i1l2760:	
  6951  0FDA  3001               	movlw	1
  6952  0FDB                     u359_25:	
  6953  0FDB  1003               	clrc
  6954  0FDC  0DB3               	rlf	___ftdiv@f1,f
  6955  0FDD  0DB4               	rlf	___ftdiv@f1+1,f
  6956  0FDE  0DB5               	rlf	___ftdiv@f1+2,f
  6957  0FDF  3EFF               	addlw	-1
  6958  0FE0  1D03               	skipz
  6959  0FE1  2FDB               	goto	u359_25
  6960  0FE2  3001               	movlw	1
  6961  0FE3  02BA               	subwf	___ftdiv@cntr,f
  6962  0FE4  1D03               	btfss	3,2
  6963  0FE5  2FBB               	goto	i1l2752
  6964  0FE6  083B               	movf	___ftdiv@f3,w
  6965  0FE7  00F0               	movwf	___ftpack@arg
  6966  0FE8  083C               	movf	___ftdiv@f3+1,w
  6967  0FE9  00F1               	movwf	___ftpack@arg+1
  6968  0FEA  083D               	movf	___ftdiv@f3+2,w
  6969  0FEB  00F2               	movwf	___ftpack@arg+2
  6970  0FEC  083E               	movf	___ftdiv@exp,w
  6971  0FED  00B6               	movwf	??___ftdiv
  6972  0FEE  0836               	movf	??___ftdiv,w
  6973  0FEF  00F3               	movwf	___ftpack@exp
  6974  0FF0  083F               	movf	___ftdiv@sign,w
  6975  0FF1  00B7               	movwf	??___ftdiv+1
  6976  0FF2  0837               	movf	??___ftdiv+1,w
  6977  0FF3  00F4               	movwf	___ftpack@sign
  6978  0FF4  120A  158A  24CF   	fcall	___ftpack
  6979  0FF7  0870               	movf	?___ftpack,w
  6980  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  6981  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  6982  0FFA  00B0               	movwf	?___ftdiv
  6983  0FFB  0871               	movf	?___ftpack+1,w
  6984  0FFC  00B1               	movwf	?___ftdiv+1
  6985  0FFD  0872               	movf	?___ftpack+2,w
  6986  0FFE  00B2               	movwf	?___ftdiv+2
  6987  0FFF  0008               	return
  6988  1000                     __end_of___ftdiv:	
  6989                           
  6990                           	psect	text34
  6991  1776                     __ptext34:	
  6992 ;; *************** function ___awtoft *****************
  6993 ;; Defined at:
  6994 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  c               2    8[COMMON] int 
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;  sign            1   13[COMMON] unsigned char 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  3    8[COMMON] float 
  7001 ;; Registers used:
  7002 ;;		wreg, status,2, status,0, pclath, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7008 ;;      Params:         3       0       0       0       0
  7009 ;;      Locals:         1       0       0       0       0
  7010 ;;      Temps:          2       0       0       0       0
  7011 ;;      Totals:         6       0       0       0       0
  7012 ;;Total ram usage:        6 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    1
  7015 ;; This function calls:
  7016 ;;		___ftpack
  7017 ;; This function is called by:
  7018 ;;		_ISR
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function ___awtoft
  7024  1776                     ___awtoft:	
  7025                           
  7026                           ;incstack = 0
  7027 ;; hardware stack exceeded
  7028                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7029  1776  01FD               	clrf	___awtoft@sign
  7030  1777  1FF9               	btfss	___awtoft@c+1,7
  7031  1778  2F80               	goto	i1l2722
  7032  1779  09F8               	comf	___awtoft@c,f
  7033  177A  09F9               	comf	___awtoft@c+1,f
  7034  177B  0AF8               	incf	___awtoft@c,f
  7035  177C  1903               	skipnz
  7036  177D  0AF9               	incf	___awtoft@c+1,f
  7037  177E  01FD               	clrf	___awtoft@sign
  7038  177F  0AFD               	incf	___awtoft@sign,f
  7039  1780                     i1l2722:	
  7040  1780  0878               	movf	___awtoft@c,w
  7041  1781  00F0               	movwf	___ftpack@arg
  7042  1782  0879               	movf	___awtoft@c+1,w
  7043  1783  00F1               	movwf	___ftpack@arg+1
  7044  1784  01F2               	clrf	___ftpack@arg+2
  7045  1785  308E               	movlw	142
  7046  1786  00FB               	movwf	??___awtoft
  7047  1787  087B               	movf	??___awtoft,w
  7048  1788  00F3               	movwf	___ftpack@exp
  7049  1789  087D               	movf	___awtoft@sign,w
  7050  178A  00FC               	movwf	??___awtoft+1
  7051  178B  087C               	movf	??___awtoft+1,w
  7052  178C  00F4               	movwf	___ftpack@sign
  7053  178D  120A  158A  24CF   	fcall	___ftpack
  7054  1790  0870               	movf	?___ftpack,w
  7055  1791  00F8               	movwf	?___awtoft
  7056  1792  0871               	movf	?___ftpack+1,w
  7057  1793  00F9               	movwf	?___awtoft+1
  7058  1794  0872               	movf	?___ftpack+2,w
  7059  1795  00FA               	movwf	?___awtoft+2
  7060  1796  0008               	return
  7061  1797                     __end_of___awtoft:	
  7062                           
  7063                           	psect	text35
  7064  0CCF                     __ptext35:	
  7065 ;; *************** function ___ftpack *****************
  7066 ;; Defined at:
  7067 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;  arg             3    0[COMMON] unsigned um
  7070 ;;  exp             1    3[COMMON] unsigned char 
  7071 ;;  sign            1    4[COMMON] unsigned char 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  3    0[COMMON] float 
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7083 ;;      Params:         5       0       0       0       0
  7084 ;;      Locals:         0       0       0       0       0
  7085 ;;      Temps:          3       0       0       0       0
  7086 ;;      Totals:         8       0       0       0       0
  7087 ;;Total ram usage:        8 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		___awtoft
  7093 ;;		___ftadd
  7094 ;;		___ftdiv
  7095 ;;		___ftmul
  7096 ;;		___lltoft
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           
  7101                           ;psect for function ___ftpack
  7102  0CCF                     ___ftpack:	
  7103                           
  7104                           ;incstack = 0
  7105 ;; hardware stack exceeded
  7106                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7107  0CCF  0873               	movf	___ftpack@exp,w
  7108  0CD0  1903               	btfsc	3,2
  7109  0CD1  2CD7               	goto	i1l1914
  7110  0CD2  0872               	movf	___ftpack@arg+2,w
  7111  0CD3  0471               	iorwf	___ftpack@arg+1,w
  7112  0CD4  0470               	iorwf	___ftpack@arg,w
  7113  0CD5  1D03               	skipz
  7114  0CD6  2CEA               	goto	i1l1920
  7115  0CD7                     i1l1914:	
  7116  0CD7  3000               	movlw	0
  7117  0CD8  00F0               	movwf	?___ftpack
  7118  0CD9  3000               	movlw	0
  7119  0CDA  00F1               	movwf	?___ftpack+1
  7120  0CDB  3000               	movlw	0
  7121  0CDC  00F2               	movwf	?___ftpack+2
  7122  0CDD  0008               	return
  7123  0CDE                     i1l1918:	
  7124  0CDE  3001               	movlw	1
  7125  0CDF  00F5               	movwf	??___ftpack
  7126  0CE0  0875               	movf	??___ftpack,w
  7127  0CE1  07F3               	addwf	___ftpack@exp,f
  7128  0CE2  3001               	movlw	1
  7129  0CE3                     u200_25:	
  7130  0CE3  1003               	clrc
  7131  0CE4  0CF2               	rrf	___ftpack@arg+2,f
  7132  0CE5  0CF1               	rrf	___ftpack@arg+1,f
  7133  0CE6  0CF0               	rrf	___ftpack@arg,f
  7134  0CE7  3EFF               	addlw	-1
  7135  0CE8  1D03               	skipz
  7136  0CE9  2CE3               	goto	u200_25
  7137  0CEA                     i1l1920:	
  7138  0CEA  30FE               	movlw	254
  7139  0CEB  0572               	andwf	___ftpack@arg+2,w
  7140  0CEC  1903               	btfsc	3,2
  7141  0CED  2D05               	goto	i1l519
  7142  0CEE  2CDE               	goto	i1l1918
  7143  0CEF                     i1l1922:	
  7144  0CEF  3001               	movlw	1
  7145  0CF0  00F5               	movwf	??___ftpack
  7146  0CF1  0875               	movf	??___ftpack,w
  7147  0CF2  07F3               	addwf	___ftpack@exp,f
  7148  0CF3  3001               	movlw	1
  7149  0CF4  07F0               	addwf	___ftpack@arg,f
  7150  0CF5  3000               	movlw	0
  7151  0CF6  1803               	skipnc
  7152  0CF7  3001               	movlw	1
  7153  0CF8  07F1               	addwf	___ftpack@arg+1,f
  7154  0CF9  3000               	movlw	0
  7155  0CFA  1803               	skipnc
  7156  0CFB  3001               	movlw	1
  7157  0CFC  07F2               	addwf	___ftpack@arg+2,f
  7158  0CFD  3001               	movlw	1
  7159  0CFE                     u202_25:	
  7160  0CFE  1003               	clrc
  7161  0CFF  0CF2               	rrf	___ftpack@arg+2,f
  7162  0D00  0CF1               	rrf	___ftpack@arg+1,f
  7163  0D01  0CF0               	rrf	___ftpack@arg,f
  7164  0D02  3EFF               	addlw	-1
  7165  0D03  1D03               	skipz
  7166  0D04  2CFE               	goto	u202_25
  7167  0D05                     i1l519:	
  7168  0D05  30FF               	movlw	255
  7169  0D06  0572               	andwf	___ftpack@arg+2,w
  7170  0D07  1903               	btfsc	3,2
  7171  0D08  2D14               	goto	i1l1930
  7172  0D09  2CEF               	goto	i1l1922
  7173  0D0A                     i1l1928:	
  7174  0D0A  3001               	movlw	1
  7175  0D0B  02F3               	subwf	___ftpack@exp,f
  7176  0D0C  3001               	movlw	1
  7177  0D0D                     u204_25:	
  7178  0D0D  1003               	clrc
  7179  0D0E  0DF0               	rlf	___ftpack@arg,f
  7180  0D0F  0DF1               	rlf	___ftpack@arg+1,f
  7181  0D10  0DF2               	rlf	___ftpack@arg+2,f
  7182  0D11  3EFF               	addlw	-1
  7183  0D12  1D03               	skipz
  7184  0D13  2D0D               	goto	u204_25
  7185  0D14                     i1l1930:	
  7186  0D14  1FF1               	btfss	___ftpack@arg+1,7
  7187  0D15  2D0A               	goto	i1l1928
  7188  0D16  1873               	btfsc	___ftpack@exp,0
  7189  0D17  2D1E               	goto	i1l525
  7190  0D18  30FF               	movlw	255
  7191  0D19  05F0               	andwf	___ftpack@arg,f
  7192  0D1A  307F               	movlw	127
  7193  0D1B  05F1               	andwf	___ftpack@arg+1,f
  7194  0D1C  30FF               	movlw	255
  7195  0D1D  05F2               	andwf	___ftpack@arg+2,f
  7196  0D1E                     i1l525:	
  7197  0D1E  1003               	clrc
  7198  0D1F  0CF3               	rrf	___ftpack@exp,f
  7199  0D20  0873               	movf	___ftpack@exp,w
  7200  0D21  00F5               	movwf	??___ftpack
  7201  0D22  01F6               	clrf	??___ftpack+1
  7202  0D23  01F7               	clrf	??___ftpack+2
  7203  0D24  3010               	movlw	16
  7204  0D25                     u207_25:	
  7205  0D25  1003               	clrc
  7206  0D26  0DF5               	rlf	??___ftpack,f
  7207  0D27  0DF6               	rlf	??___ftpack+1,f
  7208  0D28  0DF7               	rlf	??___ftpack+2,f
  7209  0D29  3EFF               	addlw	-1
  7210  0D2A  1D03               	skipz
  7211  0D2B  2D25               	goto	u207_25
  7212  0D2C  0875               	movf	??___ftpack,w
  7213  0D2D  04F0               	iorwf	___ftpack@arg,f
  7214  0D2E  0876               	movf	??___ftpack+1,w
  7215  0D2F  04F1               	iorwf	___ftpack@arg+1,f
  7216  0D30  0877               	movf	??___ftpack+2,w
  7217  0D31  04F2               	iorwf	___ftpack@arg+2,f
  7218  0D32  0874               	movf	___ftpack@sign,w
  7219  0D33  1903               	btfsc	3,2
  7220  0D34  0008               	return
  7221  0D35  17F2               	bsf	___ftpack@arg+2,7
  7222  0D36  0008               	return
  7223  0D37                     __end_of___ftpack:	
  7224                           
  7225                           	psect	text36
  7226  0AB5                     __ptext36:	
  7227 ;; *************** function ___awmod *****************
  7228 ;; Defined at:
  7229 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awmod.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  divisor         2    9[COMMON] int 
  7232 ;;  dividend        2   11[COMMON] int 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;  sign            1    1[BANK0 ] unsigned char 
  7235 ;;  counter         1    0[BANK0 ] unsigned char 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  2    9[COMMON] int 
  7238 ;; Registers used:
  7239 ;;		wreg, status,2, status,0
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7245 ;;      Params:         4       0       0       0       0
  7246 ;;      Locals:         0       2       0       0       0
  7247 ;;      Temps:          1       0       0       0       0
  7248 ;;      Totals:         5       2       0       0       0
  7249 ;;Total ram usage:        7 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; This function calls:
  7252 ;;		Nothing
  7253 ;; This function is called by:
  7254 ;;		_ISR
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           
  7259                           ;psect for function ___awmod
  7260  0AB5                     ___awmod:	
  7261                           
  7262                           ;incstack = 0
  7263                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7264  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  7265  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  7266  0AB7  01A1               	clrf	___awmod@sign
  7267  0AB8  1FFC               	btfss	___awmod@dividend+1,7
  7268  0AB9  2AC1               	goto	i1l2684
  7269  0ABA  09FB               	comf	___awmod@dividend,f
  7270  0ABB  09FC               	comf	___awmod@dividend+1,f
  7271  0ABC  0AFB               	incf	___awmod@dividend,f
  7272  0ABD  1903               	skipnz
  7273  0ABE  0AFC               	incf	___awmod@dividend+1,f
  7274  0ABF  01A1               	clrf	___awmod@sign
  7275  0AC0  0AA1               	incf	___awmod@sign,f
  7276  0AC1                     i1l2684:	
  7277  0AC1  1FFA               	btfss	___awmod@divisor+1,7
  7278  0AC2  2AC8               	goto	i1l2688
  7279  0AC3  09F9               	comf	___awmod@divisor,f
  7280  0AC4  09FA               	comf	___awmod@divisor+1,f
  7281  0AC5  0AF9               	incf	___awmod@divisor,f
  7282  0AC6  1903               	skipnz
  7283  0AC7  0AFA               	incf	___awmod@divisor+1,f
  7284  0AC8                     i1l2688:	
  7285  0AC8  087A               	movf	___awmod@divisor+1,w
  7286  0AC9  0479               	iorwf	___awmod@divisor,w
  7287  0ACA  1903               	skipnz
  7288  0ACB  2AF5               	goto	i1l2706
  7289  0ACC  01A0               	clrf	___awmod@counter
  7290  0ACD  0AA0               	incf	___awmod@counter,f
  7291  0ACE                     i1l2696:	
  7292  0ACE  1BFA               	btfsc	___awmod@divisor+1,7
  7293  0ACF  2ADC               	goto	i1l2698
  7294  0AD0  3001               	movlw	1
  7295  0AD1                     u346_25:	
  7296  0AD1  1003               	clrc
  7297  0AD2  0DF9               	rlf	___awmod@divisor,f
  7298  0AD3  0DFA               	rlf	___awmod@divisor+1,f
  7299  0AD4  3EFF               	addlw	-1
  7300  0AD5  1D03               	skipz
  7301  0AD6  2AD1               	goto	u346_25
  7302  0AD7  3001               	movlw	1
  7303  0AD8  00FD               	movwf	??___awmod
  7304  0AD9  087D               	movf	??___awmod,w
  7305  0ADA  07A0               	addwf	___awmod@counter,f
  7306  0ADB  2ACE               	goto	i1l2696
  7307  0ADC                     i1l2698:	
  7308  0ADC  087A               	movf	___awmod@divisor+1,w
  7309  0ADD  027C               	subwf	___awmod@dividend+1,w
  7310  0ADE  1D03               	skipz
  7311  0ADF  2AE2               	goto	u348_25
  7312  0AE0  0879               	movf	___awmod@divisor,w
  7313  0AE1  027B               	subwf	___awmod@dividend,w
  7314  0AE2                     u348_25:	
  7315  0AE2  1C03               	skipc
  7316  0AE3  2AEA               	goto	i1l2702
  7317  0AE4  0879               	movf	___awmod@divisor,w
  7318  0AE5  02FB               	subwf	___awmod@dividend,f
  7319  0AE6  087A               	movf	___awmod@divisor+1,w
  7320  0AE7  1C03               	skipc
  7321  0AE8  03FC               	decf	___awmod@dividend+1,f
  7322  0AE9  02FC               	subwf	___awmod@dividend+1,f
  7323  0AEA                     i1l2702:	
  7324  0AEA  3001               	movlw	1
  7325  0AEB                     u349_25:	
  7326  0AEB  1003               	clrc
  7327  0AEC  0CFA               	rrf	___awmod@divisor+1,f
  7328  0AED  0CF9               	rrf	___awmod@divisor,f
  7329  0AEE  3EFF               	addlw	-1
  7330  0AEF  1D03               	skipz
  7331  0AF0  2AEB               	goto	u349_25
  7332  0AF1  3001               	movlw	1
  7333  0AF2  02A0               	subwf	___awmod@counter,f
  7334  0AF3  1D03               	btfss	3,2
  7335  0AF4  2ADC               	goto	i1l2698
  7336  0AF5                     i1l2706:	
  7337  0AF5  0821               	movf	___awmod@sign,w
  7338  0AF6  1903               	btfsc	3,2
  7339  0AF7  2AFD               	goto	i1l2710
  7340  0AF8  09FB               	comf	___awmod@dividend,f
  7341  0AF9  09FC               	comf	___awmod@dividend+1,f
  7342  0AFA  0AFB               	incf	___awmod@dividend,f
  7343  0AFB  1903               	skipnz
  7344  0AFC  0AFC               	incf	___awmod@dividend+1,f
  7345  0AFD                     i1l2710:	
  7346  0AFD  087C               	movf	___awmod@dividend+1,w
  7347  0AFE  01FA               	clrf	?___awmod+1
  7348  0AFF  07FA               	addwf	?___awmod+1,f
  7349  0B00  087B               	movf	___awmod@dividend,w
  7350  0B01  01F9               	clrf	?___awmod
  7351  0B02  07F9               	addwf	?___awmod,f
  7352  0B03  0008               	return
  7353  0B04                     __end_of___awmod:	
  7354                           
  7355                           	psect	text37
  7356  0B5D                     __ptext37:	
  7357 ;; *************** function ___awdiv *****************
  7358 ;; Defined at:
  7359 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  divisor         2    0[COMMON] int 
  7362 ;;  dividend        2    2[COMMON] int 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;  quotient        2    7[COMMON] int 
  7365 ;;  sign            1    6[COMMON] unsigned char 
  7366 ;;  counter         1    5[COMMON] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  2    0[COMMON] int 
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7376 ;;      Params:         4       0       0       0       0
  7377 ;;      Locals:         4       0       0       0       0
  7378 ;;      Temps:          1       0       0       0       0
  7379 ;;      Totals:         9       0       0       0       0
  7380 ;;Total ram usage:        9 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_ISR
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function ___awdiv
  7391  0B5D                     ___awdiv:	
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7395  0B5D  01F6               	clrf	___awdiv@sign
  7396  0B5E  1FF1               	btfss	___awdiv@divisor+1,7
  7397  0B5F  2B67               	goto	i1l2640
  7398  0B60  09F0               	comf	___awdiv@divisor,f
  7399  0B61  09F1               	comf	___awdiv@divisor+1,f
  7400  0B62  0AF0               	incf	___awdiv@divisor,f
  7401  0B63  1903               	skipnz
  7402  0B64  0AF1               	incf	___awdiv@divisor+1,f
  7403  0B65  01F6               	clrf	___awdiv@sign
  7404  0B66  0AF6               	incf	___awdiv@sign,f
  7405  0B67                     i1l2640:	
  7406  0B67  1FF3               	btfss	___awdiv@dividend+1,7
  7407  0B68  2B72               	goto	i1l2646
  7408  0B69  09F2               	comf	___awdiv@dividend,f
  7409  0B6A  09F3               	comf	___awdiv@dividend+1,f
  7410  0B6B  0AF2               	incf	___awdiv@dividend,f
  7411  0B6C  1903               	skipnz
  7412  0B6D  0AF3               	incf	___awdiv@dividend+1,f
  7413  0B6E  3001               	movlw	1
  7414  0B6F  00F4               	movwf	??___awdiv
  7415  0B70  0874               	movf	??___awdiv,w
  7416  0B71  06F6               	xorwf	___awdiv@sign,f
  7417  0B72                     i1l2646:	
  7418  0B72  01F7               	clrf	___awdiv@quotient
  7419  0B73  01F8               	clrf	___awdiv@quotient+1
  7420  0B74  0871               	movf	___awdiv@divisor+1,w
  7421  0B75  0470               	iorwf	___awdiv@divisor,w
  7422  0B76  1903               	skipnz
  7423  0B77  2BA9               	goto	i1l2668
  7424  0B78  01F5               	clrf	___awdiv@counter
  7425  0B79  0AF5               	incf	___awdiv@counter,f
  7426  0B7A                     i1l2656:	
  7427  0B7A  1BF1               	btfsc	___awdiv@divisor+1,7
  7428  0B7B  2B88               	goto	i1l2658
  7429  0B7C  3001               	movlw	1
  7430  0B7D                     u336_25:	
  7431  0B7D  1003               	clrc
  7432  0B7E  0DF0               	rlf	___awdiv@divisor,f
  7433  0B7F  0DF1               	rlf	___awdiv@divisor+1,f
  7434  0B80  3EFF               	addlw	-1
  7435  0B81  1D03               	skipz
  7436  0B82  2B7D               	goto	u336_25
  7437  0B83  3001               	movlw	1
  7438  0B84  00F4               	movwf	??___awdiv
  7439  0B85  0874               	movf	??___awdiv,w
  7440  0B86  07F5               	addwf	___awdiv@counter,f
  7441  0B87  2B7A               	goto	i1l2656
  7442  0B88                     i1l2658:	
  7443  0B88  3001               	movlw	1
  7444  0B89                     u338_25:	
  7445  0B89  1003               	clrc
  7446  0B8A  0DF7               	rlf	___awdiv@quotient,f
  7447  0B8B  0DF8               	rlf	___awdiv@quotient+1,f
  7448  0B8C  3EFF               	addlw	-1
  7449  0B8D  1D03               	skipz
  7450  0B8E  2B89               	goto	u338_25
  7451  0B8F  0871               	movf	___awdiv@divisor+1,w
  7452  0B90  0273               	subwf	___awdiv@dividend+1,w
  7453  0B91  1D03               	skipz
  7454  0B92  2B95               	goto	u339_25
  7455  0B93  0870               	movf	___awdiv@divisor,w
  7456  0B94  0272               	subwf	___awdiv@dividend,w
  7457  0B95                     u339_25:	
  7458  0B95  1C03               	skipc
  7459  0B96  2B9E               	goto	i1l2664
  7460  0B97  0870               	movf	___awdiv@divisor,w
  7461  0B98  02F2               	subwf	___awdiv@dividend,f
  7462  0B99  0871               	movf	___awdiv@divisor+1,w
  7463  0B9A  1C03               	skipc
  7464  0B9B  03F3               	decf	___awdiv@dividend+1,f
  7465  0B9C  02F3               	subwf	___awdiv@dividend+1,f
  7466  0B9D  1477               	bsf	___awdiv@quotient,0
  7467  0B9E                     i1l2664:	
  7468  0B9E  3001               	movlw	1
  7469  0B9F                     u340_25:	
  7470  0B9F  1003               	clrc
  7471  0BA0  0CF1               	rrf	___awdiv@divisor+1,f
  7472  0BA1  0CF0               	rrf	___awdiv@divisor,f
  7473  0BA2  3EFF               	addlw	-1
  7474  0BA3  1D03               	skipz
  7475  0BA4  2B9F               	goto	u340_25
  7476  0BA5  3001               	movlw	1
  7477  0BA6  02F5               	subwf	___awdiv@counter,f
  7478  0BA7  1D03               	btfss	3,2
  7479  0BA8  2B88               	goto	i1l2658
  7480  0BA9                     i1l2668:	
  7481  0BA9  0876               	movf	___awdiv@sign,w
  7482  0BAA  1903               	btfsc	3,2
  7483  0BAB  2BB1               	goto	i1l2672
  7484  0BAC  09F7               	comf	___awdiv@quotient,f
  7485  0BAD  09F8               	comf	___awdiv@quotient+1,f
  7486  0BAE  0AF7               	incf	___awdiv@quotient,f
  7487  0BAF  1903               	skipnz
  7488  0BB0  0AF8               	incf	___awdiv@quotient+1,f
  7489  0BB1                     i1l2672:	
  7490  0BB1  0878               	movf	___awdiv@quotient+1,w
  7491  0BB2  01F1               	clrf	?___awdiv+1
  7492  0BB3  07F1               	addwf	?___awdiv+1,f
  7493  0BB4  0877               	movf	___awdiv@quotient,w
  7494  0BB5  01F0               	clrf	?___awdiv
  7495  0BB6  07F0               	addwf	?___awdiv,f
  7496  0BB7  0008               	return
  7497  0BB8                     __end_of___awdiv:	
  7498                           
  7499                           	psect	text38
  7500  1704                     __ptext38:	
  7501 ;; *************** function _USARTReceiveChar *****************
  7502 ;; Defined at:
  7503 ;;		line 94 in file "main.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  USARTData       1    4[COMMON] unsigned char 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      unsigned char 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7517 ;;      Params:         0       0       0       0       0
  7518 ;;      Locals:         1       0       0       0       0
  7519 ;;      Temps:          1       0       0       0       0
  7520 ;;      Totals:         2       0       0       0       0
  7521 ;;Total ram usage:        2 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    2
  7524 ;; This function calls:
  7525 ;;		_USARTWriteString
  7526 ;; This function is called by:
  7527 ;;		_ISR
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _USARTReceiveChar
  7533  1704                     _USARTReceiveChar:	
  7534                           
  7535                           ;main.c: 95: unsigned char USARTData;
  7536                           ;main.c: 97: if (!OERR)
  7537                           
  7538                           ;incstack = 0
  7539 ;; hardware stack exceeded
  7540                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7541  1704  1283               	bcf	3,5	;RP0=0, select bank0
  7542  1705  1303               	bcf	3,6	;RP1=0, select bank0
  7543  1706  1898               	btfsc	24,1	;volatile
  7544  1707  2F0D               	goto	i1l2534
  7545                           
  7546                           ;main.c: 98: {
  7547                           ;main.c: 99: USARTData = RCREG;
  7548  1708  081A               	movf	26,w	;volatile
  7549  1709  00F3               	movwf	??_USARTReceiveChar
  7550  170A  0873               	movf	??_USARTReceiveChar,w
  7551  170B  00F4               	movwf	USARTReceiveChar@USARTData
  7552  170C  2F1C               	goto	i1l2542
  7553  170D                     i1l2534:	
  7554                           ;main.c: 101: } else {
  7555                           
  7556                           ;main.c: 100: PIR1bits.RCIF = 0;
  7557                           
  7558                           
  7559                           ;main.c: 102: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7560  170D  3033               	movlw	low (STR_1-__stringbase)
  7561  170E  00F1               	movwf	USARTWriteString@str
  7562  170F  3080               	movlw	128
  7563  1710  00F2               	movwf	USARTWriteString@str+1
  7564  1711  160A  118A  2797   	fcall	_USARTWriteString
  7565                           
  7566                           ;main.c: 104: RCSTAbits.CREN = 0;
  7567  1714  1283               	bcf	3,5	;RP0=0, select bank0
  7568  1715  1303               	bcf	3,6	;RP1=0, select bank0
  7569  1716  1218               	bcf	24,4	;volatile
  7570                           
  7571                           ;main.c: 105: USARTData = RCREG;
  7572  1717  081A               	movf	26,w	;volatile
  7573  1718  00F3               	movwf	??_USARTReceiveChar
  7574  1719  0873               	movf	??_USARTReceiveChar,w
  7575  171A  00F4               	movwf	USARTReceiveChar@USARTData
  7576                           
  7577                           ;main.c: 106: RCSTAbits.CREN = 1;
  7578  171B  1618               	bsf	24,4	;volatile
  7579  171C                     i1l2542:	
  7580                           
  7581                           ;main.c: 107: PIR1bits.RCIF = 0;
  7582  171C  128C               	bcf	12,5	;volatile
  7583                           
  7584                           ;main.c: 108: }
  7585                           ;main.c: 110: return (USARTData);
  7586  171D  0874               	movf	USARTReceiveChar@USARTData,w
  7587  171E  0008               	return
  7588  171F                     __end_of_USARTReceiveChar:	
  7589                           
  7590                           	psect	text39
  7591  1797                     __ptext39:	
  7592 ;; *************** function _USARTWriteString *****************
  7593 ;; Defined at:
  7594 ;;		line 83 in file "main.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  str             2    1[COMMON] PTR const unsigned char 
  7597 ;;		 -> ftoa@buf(17), STR_5(23), STR_3(3), STR_1(40), 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;		None
  7600 ;; Return value:  Size  Location     Type
  7601 ;;		None               void
  7602 ;; Registers used:
  7603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7609 ;;      Params:         2       0       0       0       0
  7610 ;;      Locals:         0       0       0       0       0
  7611 ;;      Temps:          0       0       0       0       0
  7612 ;;      Totals:         2       0       0       0       0
  7613 ;;Total ram usage:        2 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    1
  7616 ;; This function calls:
  7617 ;;		_USARTWriteChar
  7618 ;; This function is called by:
  7619 ;;		_USARTReceiveChar
  7620 ;;		_ISR
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           
  7625                           ;psect for function _USARTWriteString
  7626  1797                     _USARTWriteString:	
  7627  1797                     i1l2210:	
  7628                           ;main.c: 85: while (*str != '\0') {
  7629                           
  7630                           ;incstack = 0
  7631 ;; hardware stack exceeded
  7632                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7633                           
  7634  1797  0872               	movf	USARTWriteString@str+1,w
  7635  1798  1283               	bcf	3,5	;RP0=0, select bank0
  7636  1799  1303               	bcf	3,6	;RP1=0, select bank0
  7637  179A  00FF               	movwf	127
  7638  179B  0871               	movf	USARTWriteString@str,w
  7639  179C  0084               	movwf	4
  7640  179D  120A  158A  2000  160A  118A  	fcall	stringtab
  7641  17A2  3800               	iorlw	0
  7642  17A3  1903               	btfsc	3,2
  7643  17A4  0008               	return
  7644                           
  7645                           ;main.c: 87: USARTWriteChar(*str);
  7646  17A5  0872               	movf	USARTWriteString@str+1,w
  7647  17A6  1283               	bcf	3,5	;RP0=0, select bank0
  7648  17A7  1303               	bcf	3,6	;RP1=0, select bank0
  7649  17A8  00FF               	movwf	127
  7650  17A9  0871               	movf	USARTWriteString@str,w
  7651  17AA  0084               	movwf	4
  7652  17AB  120A  158A  2000  160A  118A  	fcall	stringtab
  7653  17B0  160A  118A  268D  160A  118A  	fcall	_USARTWriteChar
  7654                           
  7655                           ;main.c: 88: str++;
  7656  17B5  3001               	movlw	1
  7657  17B6  07F1               	addwf	USARTWriteString@str,f
  7658  17B7  1803               	skipnc
  7659  17B8  0AF2               	incf	USARTWriteString@str+1,f
  7660  17B9  2F97               	goto	i1l2210
  7661  17BA                     __end_of_USARTWriteString:	
  7662                           
  7663                           	psect	text40
  7664  168D                     __ptext40:	
  7665 ;; *************** function _USARTWriteChar *****************
  7666 ;; Defined at:
  7667 ;;		line 76 in file "main.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;  USARTData       1    wreg     unsigned char 
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;  USARTData       1    0[COMMON] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;		None               void
  7674 ;; Registers used:
  7675 ;;		wreg
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7681 ;;      Params:         0       0       0       0       0
  7682 ;;      Locals:         1       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0
  7684 ;;      Totals:         1       0       0       0       0
  7685 ;;Total ram usage:        1 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; This function calls:
  7688 ;;		Nothing
  7689 ;; This function is called by:
  7690 ;;		_USARTWriteString
  7691 ;;		_ISR
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function _USARTWriteChar
  7697  168D                     _USARTWriteChar:	
  7698                           
  7699                           ;incstack = 0
  7700 ;; hardware stack exceeded
  7701                           ; Regs used in _USARTWriteChar: [wreg]
  7702                           ;USARTWriteChar@USARTData stored from wreg
  7703  168D  00F0               	movwf	USARTWriteChar@USARTData
  7704  168E                     i1l90:	
  7705                           ;main.c: 77: while (!PIR1bits.TXIF);
  7706                           
  7707  168E  1283               	bcf	3,5	;RP0=0, select bank0
  7708  168F  1303               	bcf	3,6	;RP1=0, select bank0
  7709  1690  1E0C               	btfss	12,4	;volatile
  7710  1691  2E8E               	goto	i1l90
  7711                           
  7712                           ;main.c: 78: TXREG = USARTData;
  7713  1692  0870               	movf	USARTWriteChar@USARTData,w
  7714  1693  0099               	movwf	25	;volatile
  7715  1694  0008               	return
  7716  1695                     __end_of_USARTWriteChar:	
  7717  007E                     btemp	set	126	;btemp
  7718  007E                     wtemp	set	126
  7719  007E                     wtemp0	set	126
  7720  0080                     wtemp1	set	128
  7721  0082                     wtemp2	set	130
  7722  0084                     wtemp3	set	132
  7723  0086                     wtemp4	set	134
  7724  0088                     wtemp5	set	136
  7725  007F                     wtemp6	set	127
  7726  007E                     ttemp	set	126
  7727  007E                     ttemp0	set	126
  7728  0081                     ttemp1	set	129
  7729  0084                     ttemp2	set	132
  7730  0087                     ttemp3	set	135
  7731  007F                     ttemp4	set	127
  7732  007E                     ltemp	set	126
  7733  007E                     ltemp0	set	126
  7734  0082                     ltemp1	set	130
  7735  0086                     ltemp2	set	134
  7736  0080                     ltemp3	set	128


Data Sizes:
    Strings     102
    Constant    50
    Data        18
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      70
    BANK1            80     36      63
    BANK3            96     30      47
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK1[2]), ISR@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_7(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S678$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK3[17]), STR_6(CODE[16]), STR_4(CODE[2]), STR_2(CODE[7]), 
		 -> ISR@aux(BANK1[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@result	PTR unsigned char  size(1) Largest target is 16
		 -> ISR@aux(BANK1[16]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> ftoa@buf(BANK3[17]), STR_5(CODE[23]), STR_3(CODE[3]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod
    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    ___awmod->___awdiv
    _USARTReceiveChar->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_USARTInit
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTInit->___aldiv
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble
    _ativar->_ADCRead

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5629
                             _ativar
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    5444
                                             27 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                          _USARTInit
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    2385
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    2075
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1    1180
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0    1124
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                           12     6      6    1102
                                             15 BANK3     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                              0 BANK3     15     7      8
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     833
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     833
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0     124
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ativar                                               3     3      0     185
                                              3 BANK3      3     3      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2     185
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 50    50      0   23522
                                             50 BANK0      8     8      0
                                              0 BANK1     36    36      0
                   _USARTReceiveChar
                     _USARTWriteChar
                   _USARTWriteString
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              7     3      4     680
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     684
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     347
                                              3 COMMON     2     2      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _USARTWriteString                                     2     0      2     323
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ativar
     _ADCRead
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTInit
       ___aldiv
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     _USARTWriteString
       _USARTWriteChar
   _USARTWriteChar
   _USARTWriteString
     _USARTWriteChar
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1E      2F       9       49.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      3F       7       78.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      46       5       87.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C2      12        0.0%
ABS                  0      0      C2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 07 09:55:20 2014

                            pc 0002                    __CFG_CP$OFF 0000                   ___awdiv@sign 0076  
                           fsr 0004            ___wmul@multiplicand 0072                   ___ftadd@exp1 0026  
                 ___ftadd@exp2 0025                   ___ftadd@sign 0024                            l110 1773  
                          l172 094D                            l173 0950                            l413 0ECB  
            i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000                            _ISR 004B  
                          fsr0 0004                __end_of_ADCInit 16EA                __end_of_ADCRead 1776  
                          indf 0000                   ___awmod@sign 0021                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 09A5                    lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                         ISR@i 00BA                   ___ftdiv@sign 003F                           l3000 0A38  
                         l3002 0A43                           l3020 0EDC                           l3004 0A4E  
                         l3030 0EFC                           l3110 0906                           l3008 0A59  
                         l3042 0F31                           l3130 07DA                           l3122 07BF  
                         l3028 0EEC                           l3206 0BD6                           l3046 0F3F  
                         l3038 0F24                           l3208 0BD8                           l3058 0D51  
                         l3218 16A2                           l2990 1748                           l2988 1747  
                         l2996 0A24                           STR_1 0842                           STR_2 089C  
                         STR_3 08A3                           STR_4 08A6                           STR_5 086A  
                         STR_6 0881                           STR_7 0891                           u4035 0D48  
                         u4045 0D5C                           u4407 07B3                           u4417 07CB  
                         u4507 176D                           u4427 09F0                           u4437 0A05  
                         u4357 0DDE                           u4447 0A1A                           u4367 0DF1  
                         u3905 0959                           u4457 0941                           u4377 0E01  
                         u4467 0B57                           u4387 0E20                           u4477 0BC4  
                         u4397 0A32                           u4487 0BF2                           u4497 0C0C  
                         i1l90 168E                           u3955 0EF0                           u3975 0EFE  
                         u3985 0F13                           _OERR 00C1                           u3995 0F25  
                 __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 1695                           _main 169D  
                         _ftoa 06DF                   ___ftpack@arg 0070                   ___ftpack@exp 0073  
                         btemp 007E                  __CFG_BOREN$ON 0000                           ltemp 007E  
                         start 0012                           ttemp 007E                           wtemp 007E  
             __end_of_DESLIGAR 083D                   ___ftmul@cntr 002E                   ___ftmul@sign 002F  
                        ??_ISR 0052               __end_of_LCDClear 0A20                   ___fttol@exp1 003D  
                 ___fttol@lval 0039     __end_of_lcd_escreve_string 0937                __end_of___aldiv 0F48  
                        ?_main 0070                          ?_ftoa 0044          __size_ofi1_lcd_gotoxy 001A  
              __end_of___awdiv 0BB8                __end_of___ftadd 060C                  __CFG_WDTE$OFF 0000  
              __end_of___awmod 0B04                __end_of___ftdiv 1000                __end_of___ftneg 169D  
              __end_of___lldiv 0CCF                __end_of___ftmul 06DF                ___awdiv@divisor 0070  
              __end_of___llmod 0AB5                __end_of___ftsub 173B                __end_of___fttol 0EB9  
                        _LIGAR 083F                          i1l125 02BC                          i1l252 0396  
                        i1l172 08EB                          i1l173 08EE                          i1l255 03B4  
                        i1l525 0D1E                          i1l358 17C4                          i1l519 0D05  
                        i1l548 05AD                ___awdiv@counter 0075                          _RCREG 001A  
                        _SPBRG 0099            i1lcd_envia_nibble@n 0071                          _TRISA 0085  
                        _TXREG 0019                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
         i1_lcd_escreve_string 17DD                  ___awtoft@sign 007D                __end_of_dpowers 0838  
              __end_of_isdigit 16B6                  ___ftpack@sign 0074                  _countInferior 005A  
                        ftoa@f 0044                          ftoa@l 004D                          pclath 000A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080             __size_of_USARTInit 0070                ?_USARTWriteChar 0070  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __end_of_sprintf 0505               i1_lcd_envia_byte 08DB  
              __initialization 0015                   i1_lcd_gotoxy 16EA                   __end_of_main 16A8  
                 __end_of_ftoa 0799                  _countSuperior 005C                    i1lcd_putc@c 007B  
                    ??_ADCInit 0190                      ??_ADCRead 0192      __size_of_lcd_envia_nibble 0059  
                       ??_main 01AE                         ??_ftoa 0048                  ___fttol@sign1 0038  
                       ISR@buf 00B0                         ISR@aux 00A0                         ISR@per 00C3  
                       ISR@pre 00B5        USARTWriteChar@USARTData 0070          ?i1_lcd_escreve_string 007C  
                  ?i1_lcd_putc 0070                      ADCRead@ch 0190               ___llmod@dividend 0024  
                       _ADRESH 001E                         _ADRESL 009E               ___awdiv@dividend 0072  
             __end_of___awtoft 1797               __end_of___ftpack 0D37               __end_of___lltoft 08DB  
                       i1l2100 05F4                         i1l2110 0C81                         i1l2040 052E  
                       i1l2120 0CB9                         i1l2112 0C91                         i1l2210 1797  
                       i1l2050 0544                         i1l2044 0535                         i1l2124 0CC6  
                       i1l2140 0A9F                         i1l2070 057F                         i1l2062 055E  
                       i1l2134 0A71                         i1l2310 039D                         i1l2302 0355  
                       i1l2400 0624                         i1l2080 059D                         i1l2072 0584  
                       i1l2136 0A81                         i1l2144 0AAC                         i1l2304 0391  
                       i1l2152 16F4                         i1l2090 05D1                         i1l2082 05A9  
                       i1l2074 0588                         i1l2330 03EE                         i1l2306 0398  
                       i1l2154 16F5                         i1l2068 0573                         i1l2316 03C6  
                       u200_25 0CE3                         i1l2430 06A1                         i1l2422 0689  
                       i1l2406 063A                         i1l2086 05BF                         i1l2350 047D  
                       i1l2342 0442                         i1l2326 03E8                         i1l2360 0497  
                       i1l2352 0481                         i1l2520 09C2                         i1l2434 06B1  
                       i1l2418 0679                         i1l2506 08B4                         i1l2346 045C  
                       i1l2338 042A                         i1l2370 0500                         i1l2522 09CB  
                       i1l2514 09A7                         i1l2508 08C6                         i1l2284 0305  
                       i1l2292 0343                         i1l2542 171C                         i1l2534 170D  
                       i1l2710 0AFD                         i1l2702 0AEA                         i1l2382 0C62  
                       i1l2366 04F1                         i1l2278 02F0                         i1l2518 09B9  
                       i1l2526 09D4                         i1l2640 0B67                         i1l1920 0CEA  
                       i1l2464 0E45                         i1l2368 02D0                         i1l2706 0AF5  
                       i1l1930 0D14                         i1l1922 0CEF                         i1l1914 0CD7  
                       i1l2722 1780                         i1l2378 0C3B                         i1l2490 0E94  
                       i1l2482 0E77                         i1l2732 0F60                         i1l2492 0E9F  
                       i1l2484 0E87                         u202_25 0CFE                         u210_25 08F5  
                       i1l2646 0B72                         i1l1918 0CDE                         i1l2494 0EA2  
                       i1l2558 0718                         i1l2672 0BB1                         i1l2664 0B9E  
                       i1l2656 0B7A                         i1l1928 0D0A                         i1l2760 0FDA  
                       i1l2752 0FBB                         i1l2658 0B88                         i1l2738 0F76  
                       i1l2498 0EB0                         i1l2826 0253                         i1l2668 0BA9  
                       i1l2684 0AC1                         i1l2836 0264                         i1l1982 17BC  
                       i1l2774 17DD                         i1l2838 0284                         i1l2846 02A7  
                       i1l2696 0ACE                         i1l2688 0AC8                         i1l1976 16B4  
                       i1l2698 0ADC                         u204_25 0D0D                         u207_25 0D25  
                       u303_25 0646                         u215_25 17C5                         u312_25 06B2  
                       u304_25 0658                         u240_25 0574                         u320_25 0E78  
                       u216_25 17CC                         u313_25 06BA                         u307_25 068A  
                       u243_25 0589                         u323_25 0E96                         u340_25 0B9F  
                       u308_25 0692                         u260_25 0A75                         u237_25 055F  
                       u317_25 0E4C                         u253_25 0C85                         u246_25 059E  
                       u326_25 08B9                         u262_25 0A8F                         u255_25 0C93  
                       u263_25 0AA0                         u336_25 0B7D                         u256_25 0CA8  
                       u257_25 0CBA                         u338_25 0B89                         u346_25 0AD1  
                       u290_25 046D                         u363_20 0061                         u339_25 0B95  
                       u355_25 0F88                         u451_27 029D                         u348_25 0AE2  
                       u356_25 0F9A                         u364_25 024D                         u452_27 09B3  
                       u349_25 0AEB                         u357_25 0FBC                         u293_25 04A2  
                       u285_25 03F1                         u365_25 025E                         u453_27 08E1  
                       u358_25 0FCD                         u294_25 04FD                         u286_25 0420  
                       u454_27 099F                         u359_25 0FDB                         u288_25 0439  
                       u297_21 0C2E                         u297_22 0C2F                         u297_23 0C34  
                       u297_24 0C35                         u289_25 0453                         u299_21 0C55  
                       u299_22 0C56                         u299_23 0C5B                         u299_24 0C5C  
                USARTInit@Mode 01A3         __size_of_init_lcd_4bit 0066               __end_of_lcd_putc 0A67  
                       ___ftge 0C14                      ??___aldiv 0198                         ___wmul 17BA  
                    ??___awdiv 0074                      ??___ftadd 0020                      ??___awmod 007D  
                    ??___ftdiv 0036                      ??___ftneg 0073                      ??___lldiv 0078  
                    ??___ftmul 0026                      ??___llmod 0028                      ??___ftsub 007E  
                    ??___fttol 0034                         _ativar 0BB8       __end_of_USARTWriteString 17BA  
             ___awdiv@quotient 0077                ___awmod@divisor 0079               ??_lcd_envia_byte 0193  
              ___awmod@counter 0020              __end_of_USARTInit 0DA7                         ftoa@cp 0051  
        ___ftmul@f3_as_product 002B                      ??_isdigit 0070                         saved_w 007E  
        i1lcd_escreve_string@y 007C                      ??_sprintf 0033     __end_ofi1_lcd_envia_nibble 09A5  
            ?_USARTReceiveChar 0070                      ?_LCDClear 0070        __end_of__initialization 0047  
           ??_USARTReceiveChar 0073                     ___ftadd@f1 0078                     ___ftadd@f2 007B  
                   ___ftge@ff1 0070                     ___ftge@ff2 0073                     ___ftdiv@f1 0033  
                   ___ftdiv@f2 0030                     ___ftdiv@f3 003B                  __end_of_LIGAR 0840  
                   ___ftneg@f1 0070                     ___awtoft@c 0078                     ___ftmul@f1 0020  
                   ___ftmul@f2 0023                     ___ftsub@f1 002A                     ___ftsub@f2 0027  
                   ___fttol@f1 0030                 __pcstackCOMMON 0070                   __pidataBANK0 168B  
                 __pidataBANK1 16B6            __size_ofi1_lcd_putc 003B                     ___lltoft@c 0078  
                _init_lcd_4bit 0799         ??i1_lcd_escreve_string 007E              lcd_gotoxy@address 0198  
                 sprintf@width 003F                     __pbssBANK0 005A                     __pbssBANK1 00D4  
                   __pbssBANK3 01AE                     ??_LCDClear 0195                      ISR@input2 00C0  
                    ISR@preint 00B8                      ISR@result 00BC                      ISR@status 00B1  
    USARTReceiveChar@USARTData 0074                     __pmaintext 169D                        ?___ftge 0070  
                      ?___wmul 0070                     __pintentry 0004                     _flag_Start 00DD  
                      ?_ativar 0070                        _ADCInit 16D7                        _ADCRead 1757  
                    ?___awtoft 0078                      ?___ftpack 0070               _lcd_envia_nibble 0B04  
                    ?___lltoft 0078                 ?_init_lcd_4bit 0070                     _lcd_gotoxy 173B  
     __end_ofi1_lcd_envia_byte 0906               ??_USARTWriteChar 0070             _lcd_escreve_string 0906  
                    ?_lcd_putc 0070                     __stringtab 0800            ?_lcd_escreve_string 019C  
                      _Display 00D4                      _ADCResult 00DB                     _inicialize 0DA7  
                      ___aldiv 0EB9                __size_of___ftge 005D                        ___awdiv 0B5D  
                      ___ftadd 0505                        ___awmod 0AB5                        ___ftdiv 0F48  
                      ___ftneg 1695                        ___lldiv 0C71                __size_of___wmul 0023  
                      ___ftmul 060C                        ___llmod 0A67                        ___ftsub 171F  
                      ___fttol 0E2B                __size_of_ativar 005C                     ??___awtoft 007B  
                   ??___ftpack 0075                        _flag_an 0064                     ??___lltoft 007C  
                      __ptext1 0DA7                        __ptext2 0906                        __ptext3 0A20  
                      __ptext4 173B                        __ptext5 0799                        __ptext6 0D37  
                      __ptext7 0EB9                        __ptext8 09E0                        __ptext9 0937  
         ??_lcd_escreve_string 019E                   __size_of_ISR 027E                        _dpowers 0810  
                      _isdigit 16A8               ___awmod@dividend 007B               ___aldiv@dividend 0194  
              lcd_envia_byte@n 0192                   ??i1_lcd_putc 0079                     _recipiente 0062  
                      _sprintf 02C9                        clrloop0 08A9                     ??_lcd_putc 0199  
         end_of_initialization 0047                        ftoa@buf 01AE                        ftoa@rem 0049  
      i1lcd_envia_byte@address 0074                ___lldiv@divisor 0070                ___lldiv@counter 007D  
                    _RCSTAbits 0018               ___aldiv@quotient 019B             __end_ofi1_lcd_putc 09E0  
              ??_init_lcd_4bit 0195              ?_USARTWriteString 0071                      _PORTAbits 0005  
                    _PORTBbits 0006                      _PORTCbits 0007                      _PORTDbits 0008  
           ??_USARTWriteString 0073                      _USARTInit 0D37                      _TRISBbits 0086  
                    _TRISCbits 0087                      _TRISDbits 0088                    ?_lcd_gotoxy 0195  
              _LCD_INIT_STRING 0838                    ___ftdiv@exp 003E                      _TXSTAbits 0098  
            __size_of_LCDClear 0040                    ?_inicialize 0070                    ___ftmul@exp 002A  
           i1_lcd_envia_nibble 096C      __size_of_USARTReceiveChar 001B                 __end_of___ftge 0C71  
                  USARTInit@BR 01A9                 __end_of___wmul 17DD            ?i1_lcd_envia_nibble 0070  
               __end_of_ativar 0C14                  _nivelInferior 005E            start_initialization 0015  
                   ?_USARTInit 019F                    __end_of_ISR 02C9                     ftoa@status 0047  
                i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075           ??i1_lcd_envia_nibble 0070  
     __end_of_lcd_envia_nibble 0B5D          lcd_envia_byte@address 0194                ___llmod@divisor 0020  
              ___llmod@counter 0029                  _nivelSuperior 0060                       ??___ftge 0076  
          __size_of_lcd_gotoxy 001C                       ??___wmul 0074                     init_fetch0 16C6  
                     ??_ativar 0193                    __pdataBANK0 0064                    __pdataBANK1 00C4  
                     ?_ADCInit 0070                       ?_ADCRead 0190            __end_of_LIGAR_BOMBA 0841  
          __end_of_LIGAR_MOTOR 0842        __end_of_LCD_INIT_STRING 083C              __size_of___awtoft 0021  
            __size_of___ftpack 0068              __size_of___lltoft 002B                      ___latbits 0002  
                __pcstackBANK0 0020                  __pcstackBANK1 00A0                  __pcstackBANK3 0190  
          __end_of__stringdata 08A8            __size_of_inicialize 0084  __size_ofi1_lcd_escreve_string 0023  
            ?i1_lcd_envia_byte 0072                       ISR@F1357 00C4        __size_of_lcd_envia_byte 0035  
           ??i1_lcd_envia_byte 0073                    sprintf@_val 003A                    sprintf@flag 0038  
            __size_of_lcd_putc 0047                    sprintf@prec 0041                     ISR@status2 00B3  
                     ISR@input 00BD                  ?i1_lcd_gotoxy 0075            i1lcd_gotoxy@address 0078  
                     ?___aldiv 0190                       ?___awdiv 0070                       ?___ftadd 0078  
                     ?___awmod 0079                       ?___ftdiv 0030                       ?___ftneg 0070  
                     ?___lldiv 0070                       ?___ftmul 0020                       ?___llmod 0020  
                     ?___ftsub 0027                       ?___fttol 0030                      __pstrings 0800  
                     ?_isdigit 0070                    ??_USARTInit 01A5                       _DESLIGAR 083C  
               init_lcd_4bit@i 0197                       ?_sprintf 002A                       _LCDClear 09E0  
              ___aldiv@divisor 0190              interrupt_function 0004                ___aldiv@counter 0199  
               ___wmul@product 0074                      clear_ram0 08A8                       _PIE1bits 008C  
            lcd_envia_nibble@n 0191                 ??i1_lcd_gotoxy 0076                       _PIR1bits 000C  
                  _LIGAR_BOMBA 0840                    _LIGAR_MOTOR 0841               _USARTReceiveChar 1704  
             __size_of_ADCInit 0013               __size_of_ADCRead 001F                     _ADCON0bits 001F  
                  __stringbase 080F                     _ADCON1bits 009F                    __stringdata 0842  
            ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031                      lcd_putc@c 019B  
                 ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C      __size_of_USARTWriteString 0023  
      __size_of_USARTWriteChar 0008                   ??_inicialize 01AB             __end_of_lcd_gotoxy 1757  
             __size_of___aldiv 008F               __size_of___awdiv 005B               __size_of___ftadd 0107  
             __size_of___awmod 004F               __size_of___ftdiv 00B8               __size_of___ftneg 0008  
             __size_of___lldiv 005E               __size_of___ftmul 00D3               __size_of___llmod 004E  
             __size_of___ftsub 001C               __size_of___fttol 008E                       ___awtoft 1776  
                     ___ftpack 0CCF             __end_of__stringtab 0810                       ___lltoft 08B0  
                  _isdigit$886 0070          __end_of_init_lcd_4bit 07FF               __size_of_isdigit 000E  
                     __ptext10 0B04                       __ptext11 16D7                       __ptext20 06DF  
                     __ptext12 0BB8                       __ptext21 02C9                       __ptext13 1757  
                     __ptext30 1695                       __ptext22 16A8                       __ptext14 004B  
                     __ptext31 060C                       __ptext23 17BA                       __ptext15 17DD  
                     __ptext40 168D                       __ptext32 0C14                       __ptext24 0A67  
                     __ptext16 09A5                       __ptext33 0F48                       __ptext25 0C71  
                     __ptext17 16EA                       __ptext34 1776                       __ptext26 08B0  
                     __ptext18 08DB                       __ptext35 0CCF                       __ptext27 0E2B  
                     __ptext19 096C                       __ptext36 0AB5                       __ptext28 171F  
                     __ptext37 0B5D                       __ptext29 0505                       __ptext38 1704  
                     __ptext39 1797                 _lcd_envia_byte 0937             __end_of_inicialize 0E2B  
                     _lcd_putc 0A20               __size_of_sprintf 023C                  __size_of_main 000B  
                __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070             ??_lcd_envia_nibble 0190  
                   _INTCONbits 000B         __end_of_lcd_envia_byte 096C           __end_ofi1_lcd_gotoxy 1704  
                     init_ram0 16CA                       isdigit@c 0071                       intlevel1 0000  
                    sprintf@ap 0039                      sprintf@sp 003E    __size_ofi1_lcd_envia_nibble 0039  
             ___lldiv@dividend 0074                      stringcode 080A   __end_ofi1_lcd_escreve_string 1800  
    __size_ofi1_lcd_envia_byte 002B              USARTInit@BaudRate 019F                 _DESLIGAR_BOMBA 083D  
               _DESLIGAR_MOTOR 083E            USARTWriteString@str 0071                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                ?_lcd_envia_byte 0192  
                     stringdir 080A                       stringtab 0800                   ___aldiv@sign 019A  
     __end_of_USARTReceiveChar 171F               _USARTWriteString 1797                 _USARTWriteChar 168D  
       __end_of_DESLIGAR_BOMBA 083E         __end_of_DESLIGAR_MOTOR 083F  
