

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Nov 06 21:47:19 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK0
   184  07FC                     __pidataBANK0:	
   185                           
   186                           ;initializer for _flag_an
   187  07FC  34FF               	retlw	255
   188  07FD  34FF               	retlw	255
   189                           
   190                           	psect	idataBANK1
   191  1683                     __pidataBANK1:	
   192                           
   193                           ;initializer for ISR@F1357
   194  1683  3420               	retlw	32
   195  1684  3420               	retlw	32
   196  1685  3420               	retlw	32
   197  1686  3420               	retlw	32
   198  1687  3420               	retlw	32
   199  1688  3420               	retlw	32
   200  1689  3420               	retlw	32
   201  168A  3420               	retlw	32
   202  168B  3420               	retlw	32
   203  168C  3420               	retlw	32
   204  168D  3420               	retlw	32
   205  168E  3420               	retlw	32
   206  168F  3420               	retlw	32
   207  1690  3420               	retlw	32
   208  1691  3420               	retlw	32
   209  1692  3420               	retlw	32
   210                           
   211                           	psect	strings
   212  0615                     __pstrings:	
   213  0615                     stringtab:	
   214  0615                     __stringtab:	
   215                           
   216                           ;	String table - string pointers are 1 byte each
   217  0615  1BFF               	btfsc	btemp+1,7
   218  0616  2E1F               	ljmp	stringcode
   219  0617  1383               	bcf	3,7
   220  0618  187F               	btfsc	btemp+1,0
   221  0619  1783               	bsf	3,7
   222  061A  0800               	movf	0,w
   223  061B  0A84               	incf	4,f
   224  061C  1903               	skipnz
   225  061D  0AFF               	incf	btemp+1,f
   226  061E  0008               	return
   227  061F                     stringcode:	
   228  061F                     stringdir:	
   229  061F  3006               	movlw	high stringdir
   230  0620  008A               	movwf	10
   231  0621  0804               	movf	4,w
   232  0622  0A84               	incf	4,f
   233  0623  0782               	addwf	2,f
   234  0624                     __stringbase:	
   235  0624  3400               	retlw	0
   236  0625                     __end_of__stringtab:	
   237  0625                     _dpowers:	
   238  0625  3401               	retlw	1
   239  0626  3400               	retlw	0
   240  0627  3400               	retlw	0
   241  0628  3400               	retlw	0
   242  0629  340A               	retlw	10
   243  062A  3400               	retlw	0
   244  062B  3400               	retlw	0
   245  062C  3400               	retlw	0
   246  062D  3464               	retlw	100
   247  062E  3400               	retlw	0
   248  062F  3400               	retlw	0
   249  0630  3400               	retlw	0
   250  0631  34E8               	retlw	232
   251  0632  3403               	retlw	3
   252  0633  3400               	retlw	0
   253  0634  3400               	retlw	0
   254  0635  3410               	retlw	16
   255  0636  3427               	retlw	39
   256  0637  3400               	retlw	0
   257  0638  3400               	retlw	0
   258  0639  34A0               	retlw	160
   259  063A  3486               	retlw	134
   260  063B  3401               	retlw	1
   261  063C  3400               	retlw	0
   262  063D  3440               	retlw	64
   263  063E  3442               	retlw	66
   264  063F  340F               	retlw	15
   265  0640  3400               	retlw	0
   266  0641  3480               	retlw	128
   267  0642  3496               	retlw	150
   268  0643  3498               	retlw	152
   269  0644  3400               	retlw	0
   270  0645  3400               	retlw	0
   271  0646  34E1               	retlw	225
   272  0647  34F5               	retlw	245
   273  0648  3405               	retlw	5
   274  0649  3400               	retlw	0
   275  064A  34CA               	retlw	202
   276  064B  349A               	retlw	154
   277  064C  343B               	retlw	59
   278  064D                     __end_of_dpowers:	
   279  064D                     _LCD_INIT_STRING:	
   280  064D  341C               	retlw	28
   281  064E  340C               	retlw	12
   282  064F  3401               	retlw	1
   283  0650  3406               	retlw	6
   284  0651                     __end_of_LCD_INIT_STRING:	
   285  0651                     _DESLIGAR:	
   286  0651  346C               	retlw	108
   287  0652                     __end_of_DESLIGAR:	
   288  0652                     _DESLIGAR_BOMBA:	
   289  0652  3462               	retlw	98
   290  0653                     __end_of_DESLIGAR_BOMBA:	
   291  0653                     _DESLIGAR_MOTOR:	
   292  0653  346D               	retlw	109
   293  0654                     __end_of_DESLIGAR_MOTOR:	
   294  0654                     _LIGAR:	
   295  0654  344C               	retlw	76
   296  0655                     __end_of_LIGAR:	
   297  0655                     _LIGAR_BOMBA:	
   298  0655  3442               	retlw	66
   299  0656                     __end_of_LIGAR_BOMBA:	
   300  0656                     _LIGAR_MOTOR:	
   301  0656  344D               	retlw	77
   302  0657                     __end_of_LIGAR_MOTOR:	
   303  001F                     _ADCON0bits	set	31
   304  001E                     _ADRESH	set	30
   305  000B                     _INTCONbits	set	11
   306  000C                     _PIR1bits	set	12
   307  0005                     _PORTAbits	set	5
   308  0006                     _PORTBbits	set	6
   309  0007                     _PORTCbits	set	7
   310  0008                     _PORTDbits	set	8
   311  001A                     _RCREG	set	26
   312  0018                     _RCSTAbits	set	24
   313  0019                     _TXREG	set	25
   314  00C1                     _OERR	set	193
   315  009F                     _ADCON1bits	set	159
   316  009E                     _ADRESL	set	158
   317  008C                     _PIE1bits	set	140
   318  0099                     _SPBRG	set	153
   319  0085                     _TRISA	set	133
   320  0086                     _TRISBbits	set	134
   321  0087                     _TRISCbits	set	135
   322  0088                     _TRISDbits	set	136
   323  0098                     _TXSTAbits	set	152
   324  0657                     __stringdata:	
   325  0657                     STR_5:	
   326  0657  340A               	retlw	10
   327  0658  340D               	retlw	13
   328  0659  3420               	retlw	32	;' '
   329  065A  3445               	retlw	69	;'E'
   330  065B  346E               	retlw	110	;'n'
   331  065C  3474               	retlw	116	;'t'
   332  065D  3472               	retlw	114	;'r'
   333  065E  346F               	retlw	111	;'o'
   334  065F  3475               	retlw	117	;'u'
   335  0660  3420               	retlw	32	;' '
   336  0661  346E               	retlw	110	;'n'
   337  0662  3461               	retlw	97	;'a'
   338  0663  3420               	retlw	32	;' '
   339  0664  3466               	retlw	102	;'f'
   340  0665  3475               	retlw	117	;'u'
   341  0666  346E               	retlw	110	;'n'
   342  0667  3463               	retlw	99	;'c'
   343  0668  3461               	retlw	97	;'a'
   344  0669  346F               	retlw	111	;'o'
   345  066A  3420               	retlw	32	;' '
   346  066B  3464               	retlw	100	;'d'
   347  066C  3465               	retlw	101	;'e'
   348  066D  3420               	retlw	32	;' '
   349  066E  3449               	retlw	73	;'I'
   350  066F  346E               	retlw	110	;'n'
   351  0670  3474               	retlw	116	;'t'
   352  0671  3465               	retlw	101	;'e'
   353  0672  3472               	retlw	114	;'r'
   354  0673  3472               	retlw	114	;'r'
   355  0674  3475               	retlw	117	;'u'
   356  0675  3470               	retlw	112	;'p'
   357  0676  3463               	retlw	99	;'c'
   358  0677  3461               	retlw	97	;'a'
   359  0678  346F               	retlw	111	;'o'
   360  0679  3420               	retlw	32	;' '
   361  067A  3464               	retlw	100	;'d'
   362  067B  3461               	retlw	97	;'a'
   363  067C  3420               	retlw	32	;' '
   364  067D  3455               	retlw	85	;'U'
   365  067E  3453               	retlw	83	;'S'
   366  067F  3441               	retlw	65	;'A'
   367  0680  3452               	retlw	82	;'R'
   368  0681  3454               	retlw	84	;'T'
   369  0682  3400               	retlw	0
   370  0683                     STR_1:	
   371  0683  340A               	retlw	10
   372  0684  340D               	retlw	13
   373  0685  3420               	retlw	32	;' '
   374  0686  342D               	retlw	45	;'-'
   375  0687  342D               	retlw	45	;'-'
   376  0688  342D               	retlw	45	;'-'
   377  0689  342D               	retlw	45	;'-'
   378  068A  342D               	retlw	45	;'-'
   379  068B  342D               	retlw	45	;'-'
   380  068C  342D               	retlw	45	;'-'
   381  068D  3420               	retlw	32	;' '
   382  068E  3445               	retlw	69	;'E'
   383  068F  3453               	retlw	83	;'S'
   384  0690  3454               	retlw	84	;'T'
   385  0691  344F               	retlw	79	;'O'
   386  0692  3455               	retlw	85	;'U'
   387  0693  3452               	retlw	82	;'R'
   388  0694  344F               	retlw	79	;'O'
   389  0695  3420               	retlw	32	;' '
   390  0696  3444               	retlw	68	;'D'
   391  0697  3445               	retlw	69	;'E'
   392  0698  3420               	retlw	32	;' '
   393  0699  3450               	retlw	80	;'P'
   394  069A  3449               	retlw	73	;'I'
   395  069B  344C               	retlw	76	;'L'
   396  069C  3448               	retlw	72	;'H'
   397  069D  3441               	retlw	65	;'A'
   398  069E  3420               	retlw	32	;' '
   399  069F  342D               	retlw	45	;'-'
   400  06A0  342D               	retlw	45	;'-'
   401  06A1  342D               	retlw	45	;'-'
   402  06A2  342D               	retlw	45	;'-'
   403  06A3  342D               	retlw	45	;'-'
   404  06A4  342D               	retlw	45	;'-'
   405  06A5  342D               	retlw	45	;'-'
   406  06A6  3420               	retlw	32	;' '
   407  06A7  340A               	retlw	10
   408  06A8  340D               	retlw	13
   409  06A9  3420               	retlw	32	;' '
   410  06AA  3400               	retlw	0
   411  06AB                     STR_6:	
   412  06AB  340A               	retlw	10
   413  06AC  340D               	retlw	13
   414  06AD  3420               	retlw	32	;' '
   415  06AE  3443               	retlw	67	;'C'
   416  06AF  3461               	retlw	97	;'a'
   417  06B0  3472               	retlw	114	;'r'
   418  06B1  3461               	retlw	97	;'a'
   419  06B2  3463               	retlw	99	;'c'
   420  06B3  3474               	retlw	116	;'t'
   421  06B4  3465               	retlw	101	;'e'
   422  06B5  3472               	retlw	114	;'r'
   423  06B6  3420               	retlw	32	;' '
   424  06B7  3444               	retlw	68	;'D'
   425  06B8  3469               	retlw	105	;'i'
   426  06B9  3467               	retlw	103	;'g'
   427  06BA  3469               	retlw	105	;'i'
   428  06BB  3474               	retlw	116	;'t'
   429  06BC  3461               	retlw	97	;'a'
   430  06BD  3464               	retlw	100	;'d'
   431  06BE  346F               	retlw	111	;'o'
   432  06BF  3420               	retlw	32	;' '
   433  06C0  343A               	retlw	58	;':'
   434  06C1  3400               	retlw	0
   435  06C2                     STR_7:	
   436  06C2  340C               	retlw	12
   437  06C3  344C               	retlw	76	;'L'
   438  06C4  346F               	retlw	111	;'o'
   439  06C5  3461               	retlw	97	;'a'
   440  06C6  3464               	retlw	100	;'d'
   441  06C7  3469               	retlw	105	;'i'
   442  06C8  346E               	retlw	110	;'n'
   443  06C9  3467               	retlw	103	;'g'
   444  06CA  3420               	retlw	32	;' '
   445  06CB  3450               	retlw	80	;'P'
   446  06CC  3449               	retlw	73	;'I'
   447  06CD  3443               	retlw	67	;'C'
   448  06CE  342E               	retlw	46	;'.'
   449  06CF  342E               	retlw	46	;'.'
   450  06D0  342E               	retlw	46	;'.'
   451  06D1  3400               	retlw	0
   452  06D2                     STR_8:	
   453  06D2  3425               	retlw	37	;'%'
   454  06D3  346C               	retlw	108	;'l'
   455  06D4  3475               	retlw	117	;'u'
   456  06D5  342E               	retlw	46	;'.'
   457  06D6  3425               	retlw	37	;'%'
   458  06D7  3436               	retlw	54	;'6'
   459  06D8  342E               	retlw	46	;'.'
   460  06D9  3436               	retlw	54	;'6'
   461  06DA  346C               	retlw	108	;'l'
   462  06DB  3475               	retlw	117	;'u'
   463  06DC  3400               	retlw	0
   464  06DD                     STR_2:	
   465  06DD  344E               	retlw	78	;'N'
   466  06DE  3469               	retlw	105	;'i'
   467  06DF  3476               	retlw	118	;'v'
   468  06E0  3465               	retlw	101	;'e'
   469  06E1  346C               	retlw	108	;'l'
   470  06E2  343A               	retlw	58	;':'
   471  06E3  3400               	retlw	0
   472  06E4                     STR_3:	
   473  06E4  340D               	retlw	13
   474  06E5  3453               	retlw	83	;'S'
   475  06E6  3400               	retlw	0
   476  06E7                     STR_4:	
   477  06E7  3425               	retlw	37	;'%'
   478  06E8  3400               	retlw	0
   479  06E9                     __end_of__stringdata:	
   480                           
   481                           ; #config settings
   482  0000                     
   483                           	psect	cinit
   484  0015                     start_initialization:	
   485  0015                     __initialization:	
   486                           
   487                           ; Clear objects allocated to BANK0
   488  0015  1383               	bcf	3,7	;select IRP bank0
   489  0016  305A               	movlw	low __pbssBANK0
   490  0017  0084               	movwf	4
   491  0018  3064               	movlw	low (__pbssBANK0+10)
   492  0019  160A  118A  2662  120A  118A  	fcall	clear_ram0
   493                           
   494                           ; Clear objects allocated to BANK1
   495  001E  30D4               	movlw	low __pbssBANK1
   496  001F  0084               	movwf	4
   497  0020  30DF               	movlw	low (__pbssBANK1+11)
   498  0021  160A  118A  2662  120A  118A  	fcall	clear_ram0
   499                           
   500                           ; Clear objects allocated to BANK3
   501  0026  1783               	bsf	3,7	;select IRP bank2
   502  0027  30AE               	movlw	low __pbssBANK3
   503  0028  0084               	movwf	4
   504  0029  30BF               	movlw	low (__pbssBANK3+17)
   505  002A  160A  118A  2662  120A  118A  	fcall	clear_ram0
   506                           
   507                           ; Initialize objects allocated to BANK1
   508  002F  1383               	bcf	3,7	;select IRP bank0
   509  0030  30D4               	movlw	low (__pdataBANK1+16)
   510  0031  00FD               	movwf	btemp+-1
   511  0032  3016               	movlw	high __pidataBANK1
   512  0033  00FE               	movwf	btemp
   513  0034  3083               	movlw	low __pidataBANK1
   514  0035  00FF               	movwf	btemp+1
   515  0036  30C4               	movlw	low __pdataBANK1
   516  0037  0084               	movwf	4
   517  0038  160A  118A  2697  120A  118A  	fcall	init_ram0
   518                           
   519                           ; Initialize objects allocated to BANK0
   520  003D  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   521  0042  00E4               	movwf	__pdataBANK0& (0+127)
   522  0043  120A  118A  27FD   	fcall	__pidataBANK0+1	;fetch initializer
   523  0046  00E5               	movwf	(__pdataBANK0+1)& (0+127)
   524  0047                     end_of_initialization:	
   525                           ;End of C runtime variable initialization code
   526                           
   527  0047                     __end_of__initialization:	
   528  0047  0183               	clrf	3
   529  0048  160A  118A  2E6A   	ljmp	_main	;jump to C main() function
   530                           
   531                           	psect	bssBANK0
   532  005A                     __pbssBANK0:	
   533  005A                     _countInferior:	
   534  005A                     	ds	2
   535  005C                     _countSuperior:	
   536  005C                     	ds	2
   537  005E                     _nivelInferior:	
   538  005E                     	ds	2
   539  0060                     _nivelSuperior:	
   540  0060                     	ds	2
   541  0062                     _recipiente:	
   542  0062                     	ds	2
   543                           
   544                           	psect	dataBANK0
   545  0064                     __pdataBANK0:	
   546  0064                     _flag_an:	
   547  0064                     	ds	2
   548                           
   549                           	psect	bssBANK1
   550  00D4                     __pbssBANK1:	
   551  00D4                     _Display:	
   552  00D4                     	ds	7
   553  00DB                     _ADCResult:	
   554  00DB                     	ds	2
   555  00DD                     _flag_Start:	
   556  00DD                     	ds	2
   557                           
   558                           	psect	dataBANK1
   559  00C4                     __pdataBANK1:	
   560  00C4                     ISR@F1357:	
   561  00C4                     	ds	16
   562                           
   563                           	psect	bssBANK3
   564  01AE                     __pbssBANK3:	
   565  01AE                     ftoa@buf:	
   566  01AE                     	ds	17
   567                           
   568                           	psect	clrtext
   569  1662                     clear_ram0:	
   570                           ;	Called with FSR containing the base address, and
   571                           ;	W with the last address+1
   572                           
   573  1662  0064               	clrwdt	;clear the watchdog before getting into this loop
   574  1663                     clrloop0:	
   575  1663  0180               	clrf	0	;clear RAM location pointed to by FSR
   576  1664  0A84               	incf	4,f	;increment pointer
   577  1665  0604               	xorwf	4,w	;XOR with final address
   578  1666  1903               	btfsc	3,2	;have we reached the end yet?
   579  1667  3400               	retlw	0	;all done for this memory range, return
   580  1668  0604               	xorwf	4,w	;XOR again to restore value
   581  1669  2E63               	goto	clrloop0	;do the next byte
   582                           
   583                           	psect	inittext
   584  1693                     init_fetch0:	
   585                           ;	Called with low address in FSR and high address in W
   586                           
   587  1693  087E               	movf	126,w
   588  1694  008A               	movwf	10
   589  1695  087F               	movf	127,w
   590  1696  0082               	movwf	2
   591  1697                     init_ram0:	
   592                           ;Called with:
   593                           ;	high address of idata address in btemp 
   594                           ;	low address of idata address in btemp+1 
   595                           ;	low address of data in FSR
   596                           ;	high address + 1 of data in btemp-1
   597                           
   598  1697  2693  160A  118A   	fcall	init_fetch0
   599  169A  0080               	movwf	0
   600  169B  0A84               	incf	4,f
   601  169C  0804               	movf	4,w
   602  169D  067D               	xorwf	125,w
   603  169E  1903               	btfsc	3,2
   604  169F  3400               	retlw	0
   605  16A0  0AFF               	incf	127,f
   606  16A1  1903               	btfsc	3,2
   607  16A2  0AFE               	incf	126,f
   608  16A3  2E97               	goto	init_ram0
   609                           
   610                           	psect	cstackBANK3
   611  0190                     __pcstackBANK3:	
   612  0190                     ??_lcd_envia_nibble:	
   613  0190                     ??_ADCInit:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0190                     ?_ADCRead:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0190                     ?___aldiv:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0190                     ADCRead@ch:	
   623                           ; 4 bytes @ 0x0
   624                           
   625  0190                     ___aldiv@divisor:	
   626                           ; 2 bytes @ 0x0
   627                           
   628                           
   629                           ; 4 bytes @ 0x0
   630  0190                     	ds	1
   631  0191                     lcd_envia_nibble@n:	
   632                           
   633                           ; 1 bytes @ 0x1
   634  0191                     	ds	1
   635  0192                     ?_lcd_envia_byte:	
   636  0192                     ??_ADCRead:	
   637                           ; 0 bytes @ 0x2
   638                           
   639  0192                     lcd_envia_byte@n:	
   640                           ; 0 bytes @ 0x2
   641                           
   642                           
   643                           ; 1 bytes @ 0x2
   644  0192                     	ds	1
   645  0193                     ??_lcd_envia_byte:	
   646  0193                     ??_ativar:	
   647                           ; 0 bytes @ 0x3
   648                           
   649                           
   650                           ; 0 bytes @ 0x3
   651  0193                     	ds	1
   652  0194                     lcd_envia_byte@address:	
   653  0194                     ___aldiv@dividend:	
   654                           ; 1 bytes @ 0x4
   655                           
   656                           
   657                           ; 4 bytes @ 0x4
   658  0194                     	ds	1
   659  0195                     ?_lcd_gotoxy:	
   660  0195                     ??_init_lcd_4bit:	
   661                           ; 0 bytes @ 0x5
   662                           
   663  0195                     ??_LCDClear:	
   664                           ; 0 bytes @ 0x5
   665                           
   666  0195                     lcd_gotoxy@y:	
   667                           ; 0 bytes @ 0x5
   668                           
   669                           
   670                           ; 1 bytes @ 0x5
   671  0195                     	ds	1
   672  0196                     ??_lcd_gotoxy:	
   673                           
   674                           ; 0 bytes @ 0x6
   675  0196                     	ds	1
   676  0197                     init_lcd_4bit@i:	
   677  0197                     lcd_gotoxy@x:	
   678                           ; 1 bytes @ 0x7
   679                           
   680                           
   681                           ; 1 bytes @ 0x7
   682  0197                     	ds	1
   683  0198                     ??___aldiv:	
   684  0198                     lcd_gotoxy@address:	
   685                           ; 0 bytes @ 0x8
   686                           
   687                           
   688                           ; 1 bytes @ 0x8
   689  0198                     	ds	1
   690  0199                     ??_lcd_putc:	
   691  0199                     ___aldiv@counter:	
   692                           ; 0 bytes @ 0x9
   693                           
   694                           
   695                           ; 1 bytes @ 0x9
   696  0199                     	ds	1
   697  019A                     ___aldiv@sign:	
   698                           
   699                           ; 1 bytes @ 0xA
   700  019A                     	ds	1
   701  019B                     lcd_putc@c:	
   702  019B                     ___aldiv@quotient:	
   703                           ; 1 bytes @ 0xB
   704                           
   705                           
   706                           ; 4 bytes @ 0xB
   707  019B                     	ds	1
   708  019C                     ?_lcd_escreve_string:	
   709  019C                     lcd_escreve_string@y:	
   710                           ; 0 bytes @ 0xC
   711                           
   712                           
   713                           ; 2 bytes @ 0xC
   714  019C                     	ds	2
   715  019E                     ??_lcd_escreve_string:	
   716                           
   717                           ; 0 bytes @ 0xE
   718  019E                     	ds	1
   719  019F                     ?_USARTInit:	
   720  019F                     USARTInit@BaudRate:	
   721                           ; 0 bytes @ 0xF
   722                           
   723                           
   724                           ; 4 bytes @ 0xF
   725  019F                     	ds	4
   726  01A3                     USARTInit@Mode:	
   727                           
   728                           ; 2 bytes @ 0x13
   729  01A3                     	ds	2
   730  01A5                     ??_USARTInit:	
   731                           
   732                           ; 0 bytes @ 0x15
   733  01A5                     	ds	4
   734  01A9                     USARTInit@BR:	
   735                           
   736                           ; 2 bytes @ 0x19
   737  01A9                     	ds	2
   738  01AB                     ??_inicialize:	
   739                           
   740                           ; 0 bytes @ 0x1B
   741  01AB                     	ds	3
   742  01AE                     ??_main:	
   743                           
   744                           	psect	cstackBANK1
   745  00A0                     __pcstackBANK1:	
   746                           ; 0 bytes @ 0x1E
   747                           
   748  00A0                     ISR@aux:	
   749                           
   750                           ; 16 bytes @ 0x0
   751  00A0                     	ds	16
   752  00B0                     ISR@buf:	
   753                           
   754                           ; 1 bytes @ 0x10
   755  00B0                     	ds	1
   756  00B1                     ISR@status:	
   757                           
   758                           ; 2 bytes @ 0x11
   759  00B1                     	ds	2
   760  00B3                     ISR@status2:	
   761                           
   762                           ; 2 bytes @ 0x13
   763  00B3                     	ds	2
   764  00B5                     ISR@pre:	
   765                           
   766                           ; 3 bytes @ 0x15
   767  00B5                     	ds	3
   768  00B8                     ISR@preint:	
   769                           
   770                           ; 2 bytes @ 0x18
   771  00B8                     	ds	2
   772  00BA                     ISR@i:	
   773                           
   774                           ; 2 bytes @ 0x1A
   775  00BA                     	ds	2
   776  00BC                     ISR@result:	
   777                           
   778                           ; 1 bytes @ 0x1C
   779  00BC                     	ds	1
   780  00BD                     ISR@input:	
   781                           
   782                           ; 3 bytes @ 0x1D
   783  00BD                     	ds	3
   784  00C0                     ISR@input2:	
   785                           
   786                           ; 3 bytes @ 0x20
   787  00C0                     	ds	3
   788  00C3                     ISR@per:	
   789                           
   790                           ; 1 bytes @ 0x23
   791  00C3                     	ds	1
   792                           
   793                           	psect	cstackCOMMON
   794  0070                     __pcstackCOMMON:	
   795  0070                     ?_init_lcd_4bit:	
   796  0070                     ?_LCDClear:	
   797                           ; 0 bytes @ 0x0
   798                           
   799  0070                     ?_lcd_envia_nibble:	
   800                           ; 0 bytes @ 0x0
   801                           
   802  0070                     ?_isdigit:	
   803                           ; 0 bytes @ 0x0
   804                           
   805  0070                     ??_isdigit:	
   806                           ; 1 bit 
   807                           
   808  0070                     ?_USARTWriteChar:	
   809                           ; 0 bytes @ 0x0
   810                           
   811  0070                     ??_USARTWriteChar:	
   812                           ; 0 bytes @ 0x0
   813                           
   814  0070                     ?_ADCInit:	
   815                           ; 0 bytes @ 0x0
   816                           
   817  0070                     ?_ISR:	
   818                           ; 0 bytes @ 0x0
   819                           
   820  0070                     ?_inicialize:	
   821                           ; 0 bytes @ 0x0
   822                           
   823  0070                     ?_ativar:	
   824                           ; 0 bytes @ 0x0
   825                           
   826  0070                     ?_main:	
   827                           ; 0 bytes @ 0x0
   828                           
   829  0070                     ?_lcd_putc:	
   830                           ; 0 bytes @ 0x0
   831                           
   832  0070                     ?___ftge:	
   833                           ; 0 bytes @ 0x0
   834                           
   835  0070                     ?i1_lcd_envia_nibble:	
   836                           ; 1 bit 
   837                           
   838  0070                     ??i1_lcd_envia_nibble:	
   839                           ; 0 bytes @ 0x0
   840                           
   841  0070                     ?i1_lcd_putc:	
   842                           ; 0 bytes @ 0x0
   843                           
   844  0070                     ?_USARTReceiveChar:	
   845                           ; 0 bytes @ 0x0
   846                           
   847  0070                     ?___wmul:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?___awdiv:	
   851                           ; 2 bytes @ 0x0
   852                           
   853  0070                     ?___ftpack:	
   854                           ; 2 bytes @ 0x0
   855                           
   856  0070                     ?___ftneg:	
   857                           ; 3 bytes @ 0x0
   858                           
   859  0070                     ?___lldiv:	
   860                           ; 3 bytes @ 0x0
   861                           
   862  0070                     USARTWriteChar@USARTData:	
   863                           ; 4 bytes @ 0x0
   864                           
   865  0070                     _isdigit$887:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ___wmul@multiplier:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ___awdiv@divisor:	
   872                           ; 2 bytes @ 0x0
   873                           
   874  0070                     ___ftpack@arg:	
   875                           ; 2 bytes @ 0x0
   876                           
   877  0070                     ___ftge@ff1:	
   878                           ; 3 bytes @ 0x0
   879                           
   880  0070                     ___ftneg@f1:	
   881                           ; 3 bytes @ 0x0
   882                           
   883  0070                     ___lldiv@divisor:	
   884                           ; 3 bytes @ 0x0
   885                           
   886                           
   887                           ; 4 bytes @ 0x0
   888  0070                     	ds	1
   889  0071                     ?_USARTWriteString:	
   890  0071                     isdigit@c:	
   891                           ; 0 bytes @ 0x1
   892                           
   893  0071                     i1lcd_envia_nibble@n:	
   894                           ; 1 bytes @ 0x1
   895                           
   896  0071                     USARTWriteString@str:	
   897                           ; 1 bytes @ 0x1
   898                           
   899                           
   900                           ; 2 bytes @ 0x1
   901  0071                     	ds	1
   902  0072                     ?i1_lcd_envia_byte:	
   903  0072                     i1lcd_envia_byte@n:	
   904                           ; 0 bytes @ 0x2
   905                           
   906  0072                     ___wmul@multiplicand:	
   907                           ; 1 bytes @ 0x2
   908                           
   909  0072                     ___awdiv@dividend:	
   910                           ; 2 bytes @ 0x2
   911                           
   912                           
   913                           ; 2 bytes @ 0x2
   914  0072                     	ds	1
   915  0073                     ??_USARTWriteString:	
   916  0073                     ??_USARTReceiveChar:	
   917                           ; 0 bytes @ 0x3
   918                           
   919  0073                     ??___ftneg:	
   920                           ; 0 bytes @ 0x3
   921                           
   922  0073                     ??i1_lcd_envia_byte:	
   923                           ; 0 bytes @ 0x3
   924                           
   925  0073                     ___ftpack@exp:	
   926                           ; 0 bytes @ 0x3
   927                           
   928  0073                     ___ftge@ff2:	
   929                           ; 1 bytes @ 0x3
   930                           
   931                           
   932                           ; 3 bytes @ 0x3
   933  0073                     	ds	1
   934  0074                     ??___wmul:	
   935  0074                     ??___awdiv:	
   936                           ; 0 bytes @ 0x4
   937                           
   938  0074                     USARTReceiveChar@USARTData:	
   939                           ; 0 bytes @ 0x4
   940                           
   941  0074                     ___ftpack@sign:	
   942                           ; 1 bytes @ 0x4
   943                           
   944  0074                     i1lcd_envia_byte@address:	
   945                           ; 1 bytes @ 0x4
   946                           
   947  0074                     ___wmul@product:	
   948                           ; 1 bytes @ 0x4
   949                           
   950  0074                     ___lldiv@dividend:	
   951                           ; 2 bytes @ 0x4
   952                           
   953                           
   954                           ; 4 bytes @ 0x4
   955  0074                     	ds	1
   956  0075                     ??___ftpack:	
   957  0075                     ?i1_lcd_gotoxy:	
   958                           ; 0 bytes @ 0x5
   959                           
   960  0075                     ___awdiv@counter:	
   961                           ; 0 bytes @ 0x5
   962                           
   963  0075                     i1lcd_gotoxy@y:	
   964                           ; 1 bytes @ 0x5
   965                           
   966                           
   967                           ; 1 bytes @ 0x5
   968  0075                     	ds	1
   969  0076                     ??___ftge:	
   970  0076                     ??i1_lcd_gotoxy:	
   971                           ; 0 bytes @ 0x6
   972                           
   973  0076                     ___awdiv@sign:	
   974                           ; 0 bytes @ 0x6
   975                           
   976                           
   977                           ; 1 bytes @ 0x6
   978  0076                     	ds	1
   979  0077                     i1lcd_gotoxy@x:	
   980  0077                     ___awdiv@quotient:	
   981                           ; 1 bytes @ 0x7
   982                           
   983                           
   984                           ; 2 bytes @ 0x7
   985  0077                     	ds	1
   986  0078                     ??___lldiv:	
   987  0078                     ?___awtoft:	
   988                           ; 0 bytes @ 0x8
   989                           
   990  0078                     ?___ftadd:	
   991                           ; 3 bytes @ 0x8
   992                           
   993  0078                     ?___lltoft:	
   994                           ; 3 bytes @ 0x8
   995                           
   996  0078                     i1lcd_gotoxy@address:	
   997                           ; 3 bytes @ 0x8
   998                           
   999  0078                     ___awtoft@c:	
  1000                           ; 1 bytes @ 0x8
  1001                           
  1002  0078                     ___ftadd@f1:	
  1003                           ; 2 bytes @ 0x8
  1004                           
  1005  0078                     ___lltoft@c:	
  1006                           ; 3 bytes @ 0x8
  1007                           
  1008                           
  1009                           ; 4 bytes @ 0x8
  1010  0078                     	ds	1
  1011  0079                     ??i1_lcd_putc:	
  1012  0079                     ?___awmod:	
  1013                           ; 0 bytes @ 0x9
  1014                           
  1015  0079                     ___awmod@divisor:	
  1016                           ; 2 bytes @ 0x9
  1017                           
  1018  0079                     ___lldiv@quotient:	
  1019                           ; 2 bytes @ 0x9
  1020                           
  1021                           
  1022                           ; 4 bytes @ 0x9
  1023  0079                     	ds	2
  1024  007B                     ??___awtoft:	
  1025  007B                     i1lcd_putc@c:	
  1026                           ; 0 bytes @ 0xB
  1027                           
  1028  007B                     ___awmod@dividend:	
  1029                           ; 1 bytes @ 0xB
  1030                           
  1031  007B                     ___ftadd@f2:	
  1032                           ; 2 bytes @ 0xB
  1033                           
  1034                           
  1035                           ; 3 bytes @ 0xB
  1036  007B                     	ds	1
  1037  007C                     ??___lltoft:	
  1038  007C                     ?i1_lcd_escreve_string:	
  1039                           ; 0 bytes @ 0xC
  1040                           
  1041  007C                     i1lcd_escreve_string@y:	
  1042                           ; 0 bytes @ 0xC
  1043                           
  1044                           
  1045                           ; 2 bytes @ 0xC
  1046  007C                     	ds	1
  1047  007D                     ??___awmod:	
  1048  007D                     ___awtoft@sign:	
  1049                           ; 0 bytes @ 0xD
  1050                           
  1051  007D                     ___lldiv@counter:	
  1052                           ; 1 bytes @ 0xD
  1053                           
  1054  007D                     ___lltoft@exp:	
  1055                           ; 1 bytes @ 0xD
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0xD
  1059  007D                     	ds	1
  1060  007E                     ??___ftsub:	
  1061  007E                     ??i1_lcd_escreve_string:	
  1062                           ; 0 bytes @ 0xE
  1063                           
  1064                           
  1065                           	psect	cstackBANK0
  1066  0020                     __pcstackBANK0:	
  1067                           ; 0 bytes @ 0xE
  1068                           
  1069  0020                     ??___ftadd:	
  1070  0020                     ?___ftmul:	
  1071                           ; 0 bytes @ 0x0
  1072                           
  1073  0020                     ?___llmod:	
  1074                           ; 3 bytes @ 0x0
  1075                           
  1076  0020                     ___awmod@counter:	
  1077                           ; 4 bytes @ 0x0
  1078                           
  1079  0020                     ___ftmul@f1:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0020                     ___llmod@divisor:	
  1083                           ; 3 bytes @ 0x0
  1084                           
  1085                           
  1086                           ; 4 bytes @ 0x0
  1087  0020                     	ds	1
  1088  0021                     ___awmod@sign:	
  1089                           
  1090                           ; 1 bytes @ 0x1
  1091  0021                     	ds	2
  1092  0023                     ___ftmul@f2:	
  1093                           
  1094                           ; 3 bytes @ 0x3
  1095  0023                     	ds	1
  1096  0024                     ___ftadd@sign:	
  1097  0024                     ___llmod@dividend:	
  1098                           ; 1 bytes @ 0x4
  1099                           
  1100                           
  1101                           ; 4 bytes @ 0x4
  1102  0024                     	ds	1
  1103  0025                     ___ftadd@exp2:	
  1104                           
  1105                           ; 1 bytes @ 0x5
  1106  0025                     	ds	1
  1107  0026                     ??___ftmul:	
  1108  0026                     ___ftadd@exp1:	
  1109                           ; 0 bytes @ 0x6
  1110                           
  1111                           
  1112                           ; 1 bytes @ 0x6
  1113  0026                     	ds	1
  1114  0027                     ?___ftsub:	
  1115  0027                     ___ftsub@f2:	
  1116                           ; 3 bytes @ 0x7
  1117                           
  1118                           
  1119                           ; 3 bytes @ 0x7
  1120  0027                     	ds	1
  1121  0028                     ??___llmod:	
  1122                           
  1123                           ; 0 bytes @ 0x8
  1124  0028                     	ds	1
  1125  0029                     ___llmod@counter:	
  1126                           
  1127                           ; 1 bytes @ 0x9
  1128  0029                     	ds	1
  1129  002A                     ?_sprintf:	
  1130  002A                     sprintf@f:	
  1131                           ; 2 bytes @ 0xA
  1132                           
  1133  002A                     ___ftmul@exp:	
  1134                           ; 1 bytes @ 0xA
  1135                           
  1136  002A                     ___ftsub@f1:	
  1137                           ; 1 bytes @ 0xA
  1138                           
  1139                           
  1140                           ; 3 bytes @ 0xA
  1141  002A                     	ds	1
  1142  002B                     ___ftmul@f3_as_product:	
  1143                           
  1144                           ; 3 bytes @ 0xB
  1145  002B                     	ds	3
  1146  002E                     ___ftmul@cntr:	
  1147                           
  1148                           ; 1 bytes @ 0xE
  1149  002E                     	ds	1
  1150  002F                     ___ftmul@sign:	
  1151                           
  1152                           ; 1 bytes @ 0xF
  1153  002F                     	ds	1
  1154  0030                     ?___ftdiv:	
  1155  0030                     ?___fttol:	
  1156                           ; 3 bytes @ 0x10
  1157                           
  1158  0030                     ___ftdiv@f2:	
  1159                           ; 4 bytes @ 0x10
  1160                           
  1161  0030                     ___fttol@f1:	
  1162                           ; 3 bytes @ 0x10
  1163                           
  1164                           
  1165                           ; 3 bytes @ 0x10
  1166  0030                     	ds	3
  1167  0033                     ??_sprintf:	
  1168  0033                     ___ftdiv@f1:	
  1169                           ; 0 bytes @ 0x13
  1170                           
  1171                           
  1172                           ; 3 bytes @ 0x13
  1173  0033                     	ds	1
  1174  0034                     ??___fttol:	
  1175                           
  1176                           ; 0 bytes @ 0x14
  1177  0034                     	ds	2
  1178  0036                     ??___ftdiv:	
  1179                           
  1180                           ; 0 bytes @ 0x16
  1181  0036                     	ds	2
  1182  0038                     sprintf@flag:	
  1183  0038                     ___fttol@sign1:	
  1184                           ; 1 bytes @ 0x18
  1185                           
  1186                           
  1187                           ; 1 bytes @ 0x18
  1188  0038                     	ds	1
  1189  0039                     sprintf@ap:	
  1190  0039                     ___fttol@lval:	
  1191                           ; 1 bytes @ 0x19
  1192                           
  1193                           
  1194                           ; 4 bytes @ 0x19
  1195  0039                     	ds	1
  1196  003A                     ___ftdiv@cntr:	
  1197  003A                     sprintf@_val:	
  1198                           ; 1 bytes @ 0x1A
  1199                           
  1200                           
  1201                           ; 4 bytes @ 0x1A
  1202  003A                     	ds	1
  1203  003B                     ___ftdiv@f3:	
  1204                           
  1205                           ; 3 bytes @ 0x1B
  1206  003B                     	ds	2
  1207  003D                     ___fttol@exp1:	
  1208                           
  1209                           ; 1 bytes @ 0x1D
  1210  003D                     	ds	1
  1211  003E                     sprintf@sp:	
  1212  003E                     ___ftdiv@exp:	
  1213                           ; 1 bytes @ 0x1E
  1214                           
  1215                           
  1216                           ; 1 bytes @ 0x1E
  1217  003E                     	ds	1
  1218  003F                     ___ftdiv@sign:	
  1219  003F                     sprintf@width:	
  1220                           ; 1 bytes @ 0x1F
  1221                           
  1222                           
  1223                           ; 2 bytes @ 0x1F
  1224  003F                     	ds	2
  1225  0041                     sprintf@prec:	
  1226                           
  1227                           ; 2 bytes @ 0x21
  1228  0041                     	ds	2
  1229  0043                     sprintf@c:	
  1230                           
  1231                           ; 1 bytes @ 0x23
  1232  0043                     	ds	1
  1233  0044                     ?_ftoa:	
  1234  0044                     ftoa@f:	
  1235                           ; 1 bytes @ 0x24
  1236                           
  1237                           
  1238                           ; 3 bytes @ 0x24
  1239  0044                     	ds	3
  1240  0047                     ftoa@status:	
  1241                           
  1242                           ; 1 bytes @ 0x27
  1243  0047                     	ds	1
  1244  0048                     ??_ftoa:	
  1245                           
  1246                           ; 0 bytes @ 0x28
  1247  0048                     	ds	1
  1248  0049                     ftoa@rem:	
  1249                           
  1250                           ; 4 bytes @ 0x29
  1251  0049                     	ds	4
  1252  004D                     ftoa@l:	
  1253                           
  1254                           ; 4 bytes @ 0x2D
  1255  004D                     	ds	4
  1256  0051                     ftoa@cp:	
  1257                           
  1258                           ; 1 bytes @ 0x31
  1259  0051                     	ds	1
  1260  0052                     ??_ISR:	
  1261                           
  1262                           ; 0 bytes @ 0x32
  1263  0052                     	ds	8
  1264                           
  1265                           	psect	maintext
  1266  166A                     __pmaintext:	
  1267 ;;
  1268 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1269 ;;
  1270 ;; *************** function _main *****************
  1271 ;; Defined at:
  1272 ;;		line 312 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;		None               void
  1279 ;; Registers used:
  1280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 17F/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1286 ;;      Params:         0       0       0       0       0
  1287 ;;      Locals:         0       0       0       0       0
  1288 ;;      Temps:          0       0       0       0       0
  1289 ;;      Totals:         0       0       0       0       0
  1290 ;;Total ram usage:        0 bytes
  1291 ;; Hardware stack levels required when called:   12
  1292 ;; This function calls:
  1293 ;;		_ativar
  1294 ;;		_inicialize
  1295 ;; This function is called by:
  1296 ;;		Startup code after reset
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _main
  1302  166A                     _main:	
  1303                           
  1304                           ;main.c: 314: inicialize();
  1305                           
  1306                           ;incstack = 0
  1307 ;; hardware stack exceeded
  1308                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1309  166A  120A  158A  24ED  160A  118A  	fcall	_inicialize
  1310  166F                     l3218:	
  1311                           ;main.c: 315: while (1) {
  1312                           
  1313                           
  1314                           ;main.c: 316: ativar();
  1315  166F  120A  158A  2298  160A  118A  	fcall	_ativar
  1316  1674  2E6F               	goto	l3218
  1317  1675                     __end_of_main:	
  1318                           
  1319                           	psect	text1
  1320  0CED                     __ptext1:	
  1321 ;; *************** function _inicialize *****************
  1322 ;; Defined at:
  1323 ;;		line 265 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;		None               void
  1330 ;; Registers used:
  1331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1337 ;;      Params:         0       0       0       0       0
  1338 ;;      Locals:         0       0       0       0       0
  1339 ;;      Temps:          0       0       0       3       0
  1340 ;;      Totals:         0       0       0       3       0
  1341 ;;Total ram usage:        3 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:   11
  1344 ;; This function calls:
  1345 ;;		_ADCInit
  1346 ;;		_LCDClear
  1347 ;;		_USARTInit
  1348 ;;		_init_lcd_4bit
  1349 ;;		_lcd_escreve_string
  1350 ;; This function is called by:
  1351 ;;		_main
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           
  1356                           ;psect for function _inicialize
  1357  0CED                     _inicialize:	
  1358                           
  1359                           ;main.c: 267: USARTInit(57600, 1);
  1360                           
  1361                           ;incstack = 0
  1362 ;; hardware stack exceeded
  1363                           ; Regs used in _inicialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1364  0CED  3000               	movlw	0
  1365  0CEE  1683               	bsf	3,5	;RP0=1, select bank3
  1366  0CEF  1703               	bsf	3,6	;RP1=1, select bank3
  1367  0CF0  00A2               	movwf	(USARTInit@BaudRate+3)^(0+384)
  1368  0CF1  3000               	movlw	0
  1369  0CF2  00A1               	movwf	(USARTInit@BaudRate+2)^(0+384)
  1370  0CF3  30E1               	movlw	225
  1371  0CF4  00A0               	movwf	(USARTInit@BaudRate+1)^(0+384)
  1372  0CF5  3000               	movlw	0
  1373  0CF6  009F               	movwf	USARTInit@BaudRate^(0+384)
  1374  0CF7  3001               	movlw	1
  1375  0CF8  00A3               	movwf	USARTInit@Mode^(0+384)
  1376  0CF9  3000               	movlw	0
  1377  0CFA  00A4               	movwf	(USARTInit@Mode^(0+384)+1)
  1378  0CFB  120A  158A  247D  120A  158A  	fcall	_USARTInit
  1379                           
  1380                           ;main.c: 269: TRISA = 0b11111111;
  1381  0D00  30FF               	movlw	255
  1382  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  1383  0D02  1303               	bcf	3,6	;RP1=0, select bank1
  1384  0D03  0085               	movwf	5	;volatile
  1385                           
  1386                           ;main.c: 270: PORTAbits.RA0 = 0;
  1387  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0D05  1303               	bcf	3,6	;RP1=0, select bank0
  1389  0D06  1005               	bcf	5,0	;volatile
  1390                           
  1391                           ;main.c: 271: TRISDbits.TRISD2 = 0;
  1392  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0D08  1303               	bcf	3,6	;RP1=0, select bank1
  1394  0D09  1108               	bcf	8,2	;volatile
  1395                           
  1396                           ;main.c: 272: PORTDbits.RD2 = 1;
  1397  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0D0C  1508               	bsf	8,2	;volatile
  1400                           
  1401                           ;main.c: 273: TRISDbits.TRISD3 = 0;
  1402  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  1403  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  1404  0D0F  1188               	bcf	8,3	;volatile
  1405                           
  1406                           ;main.c: 274: PORTDbits.RD3 = 0;
  1407  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0D12  1188               	bcf	8,3	;volatile
  1410                           
  1411                           ;main.c: 276: TRISCbits.TRISC0 = 1;
  1412  0D13  1683               	bsf	3,5	;RP0=1, select bank1
  1413  0D14  1303               	bcf	3,6	;RP1=0, select bank1
  1414  0D15  1407               	bsf	7,0	;volatile
  1415                           
  1416                           ;main.c: 277: TRISCbits.TRISC1 = 1;
  1417  0D16  1487               	bsf	7,1	;volatile
  1418                           
  1419                           ;main.c: 278: TRISCbits.TRISC2 = 1;
  1420  0D17  1507               	bsf	7,2	;volatile
  1421                           
  1422                           ;main.c: 279: TRISCbits.TRISC3 = 1;
  1423  0D18  1587               	bsf	7,3	;volatile
  1424                           
  1425                           ;main.c: 280: PORTCbits.RC3 = 0;
  1426  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0D1B  1187               	bcf	7,3	;volatile
  1429                           
  1430                           ;main.c: 281: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1431  0D1C  3033               	movlw	51
  1432  0D1D  1683               	bsf	3,5	;RP0=1, select bank3
  1433  0D1E  1703               	bsf	3,6	;RP1=1, select bank3
  1434  0D1F  00AD               	movwf	(??_inicialize^(0+384)+2)
  1435  0D20  30BC               	movlw	188
  1436  0D21  00AC               	movwf	(??_inicialize^(0+384)+1)
  1437  0D22  3010               	movlw	16
  1438  0D23  00AB               	movwf	??_inicialize^(0+384)
  1439  0D24                     u4357:	
  1440  0D24  0BAB               	decfsz	??_inicialize^(0+384),f
  1441  0D25  2D24               	goto	u4357
  1442  0D26  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1443  0D27  2D24               	goto	u4357
  1444  0D28  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1445  0D29  2D24               	goto	u4357
  1446                           
  1447                           ;main.c: 282: init_lcd_4bit();
  1448  0D2A  120A  158A  23AF  120A  158A  	fcall	_init_lcd_4bit
  1449                           
  1450                           ;main.c: 283: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1451  0D2F  3033               	movlw	51
  1452  0D30  1683               	bsf	3,5	;RP0=1, select bank3
  1453  0D31  1703               	bsf	3,6	;RP1=1, select bank3
  1454  0D32  00AD               	movwf	(??_inicialize^(0+384)+2)
  1455  0D33  30BC               	movlw	188
  1456  0D34  00AC               	movwf	(??_inicialize^(0+384)+1)
  1457  0D35  3010               	movlw	16
  1458  0D36  00AB               	movwf	??_inicialize^(0+384)
  1459  0D37                     u4367:	
  1460  0D37  0BAB               	decfsz	??_inicialize^(0+384),f
  1461  0D38  2D37               	goto	u4367
  1462  0D39  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1463  0D3A  2D37               	goto	u4367
  1464  0D3B  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1465  0D3C  2D37               	goto	u4367
  1466                           
  1467                           ;main.c: 284: INTCONbits.PEIE = 1;
  1468  0D3D  170B               	bsf	11,6	;volatile
  1469                           
  1470                           ;main.c: 285: INTCONbits.GIE = 1;
  1471  0D3E  178B               	bsf	11,7	;volatile
  1472                           
  1473                           ;main.c: 286: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1474  0D3F  301A               	movlw	26
  1475  0D40  1683               	bsf	3,5	;RP0=1, select bank3
  1476  0D41  1703               	bsf	3,6	;RP1=1, select bank3
  1477  0D42  00AD               	movwf	(??_inicialize^(0+384)+2)
  1478  0D43  305E               	movlw	94
  1479  0D44  00AC               	movwf	(??_inicialize^(0+384)+1)
  1480  0D45  3086               	movlw	134
  1481  0D46  00AB               	movwf	??_inicialize^(0+384)
  1482  0D47                     u4377:	
  1483  0D47  0BAB               	decfsz	??_inicialize^(0+384),f
  1484  0D48  2D47               	goto	u4377
  1485  0D49  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1486  0D4A  2D47               	goto	u4377
  1487  0D4B  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1488  0D4C  2D47               	goto	u4377
  1489  0D4D  0000               	nop
  1490                           
  1491                           ;main.c: 287: ADCInit();
  1492  0D4E  160A  118A  26A4  120A  158A  	fcall	_ADCInit
  1493                           
  1494                           ;main.c: 288: lcd_escreve_string("\fLoading PIC...");
  1495  0D53  309E               	movlw	low (STR_7-__stringbase)
  1496  0D54  1683               	bsf	3,5	;RP0=1, select bank3
  1497  0D55  1703               	bsf	3,6	;RP1=1, select bank3
  1498  0D56  009C               	movwf	lcd_escreve_string@y^(0+384)
  1499  0D57  3080               	movlw	128
  1500  0D58  009D               	movwf	(lcd_escreve_string@y+1)^(0+384)
  1501  0D59  120A  158A  2026  120A  158A  	fcall	_lcd_escreve_string
  1502                           
  1503                           ;main.c: 289: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1504  0D5E  307F               	movlw	127
  1505  0D5F  1683               	bsf	3,5	;RP0=1, select bank3
  1506  0D60  1703               	bsf	3,6	;RP1=1, select bank3
  1507  0D61  00AD               	movwf	(??_inicialize^(0+384)+2)
  1508  0D62  30D4               	movlw	212
  1509  0D63  00AC               	movwf	(??_inicialize^(0+384)+1)
  1510  0D64  30AE               	movlw	174
  1511  0D65  00AB               	movwf	??_inicialize^(0+384)
  1512  0D66                     u4387:	
  1513  0D66  0BAB               	decfsz	??_inicialize^(0+384),f
  1514  0D67  2D66               	goto	u4387
  1515  0D68  0BAC               	decfsz	(??_inicialize^(0+384)+1),f
  1516  0D69  2D66               	goto	u4387
  1517  0D6A  0BAD               	decfsz	(??_inicialize^(0+384)+2),f
  1518  0D6B  2D66               	goto	u4387
  1519  0D6C  2D6D               	nop2
  1520                           
  1521                           ;main.c: 290: LCDClear();
  1522  0D6D  120A  118A  27BC   	fcall	_LCDClear
  1523  0D70  0008               	return
  1524  0D71                     __end_of_inicialize:	
  1525                           
  1526                           	psect	text2
  1527  0826                     __ptext2:	
  1528 ;; *************** function _lcd_escreve_string *****************
  1529 ;; Defined at:
  1530 ;;		line 168 in file "lcd_4bit.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  y               2   12[BANK3 ] PTR const unsigned char 
  1533 ;;		 -> ftoa@buf(17), STR_7(16), STR_4(2), STR_2(7), 
  1534 ;;		 -> ISR@aux(16), 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;		None               void
  1539 ;; Registers used:
  1540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1546 ;;      Params:         0       0       0       2       0
  1547 ;;      Locals:         0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0
  1549 ;;      Totals:         0       0       0       2       0
  1550 ;;Total ram usage:        2 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:   10
  1553 ;; This function calls:
  1554 ;;		_lcd_putc
  1555 ;; This function is called by:
  1556 ;;		_inicialize
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _lcd_escreve_string
  1562  0826                     _lcd_escreve_string:	
  1563  0826                     l3110:	
  1564                           ;lcd_4bit.c: 170: while(*y!='\0')
  1565                           
  1566                           ;incstack = 0
  1567 ;; hardware stack exceeded
  1568                           ; Regs used in _lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1569                           
  1570  0826  1683               	bsf	3,5	;RP0=1, select bank3
  1571  0827  1703               	bsf	3,6	;RP1=1, select bank3
  1572  0828  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1573  0829  1283               	bcf	3,5	;RP0=0, select bank0
  1574  082A  1303               	bcf	3,6	;RP1=0, select bank0
  1575  082B  00FF               	movwf	127
  1576  082C  1683               	bsf	3,5	;RP0=1, select bank3
  1577  082D  1703               	bsf	3,6	;RP1=1, select bank3
  1578  082E  081C               	movf	lcd_escreve_string@y^(0+384),w
  1579  082F  0084               	movwf	4
  1580  0830  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0831  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0832  120A  118A  2615  120A  158A  	fcall	stringtab
  1583  0837  3800               	iorlw	0
  1584  0838  1903               	btfsc	3,2
  1585  0839  0008               	return
  1586                           
  1587                           ;lcd_4bit.c: 171: {
  1588                           ;lcd_4bit.c: 172: lcd_putc(*y);
  1589  083A  1683               	bsf	3,5	;RP0=1, select bank3
  1590  083B  1703               	bsf	3,6	;RP1=1, select bank3
  1591  083C  081D               	movf	(lcd_escreve_string@y+1)^(0+384),w
  1592  083D  1283               	bcf	3,5	;RP0=0, select bank0
  1593  083E  1303               	bcf	3,6	;RP1=0, select bank0
  1594  083F  00FF               	movwf	127
  1595  0840  1683               	bsf	3,5	;RP0=1, select bank3
  1596  0841  1703               	bsf	3,6	;RP1=1, select bank3
  1597  0842  081C               	movf	lcd_escreve_string@y^(0+384),w
  1598  0843  0084               	movwf	4
  1599  0844  1283               	bcf	3,5	;RP0=0, select bank0
  1600  0845  1303               	bcf	3,6	;RP1=0, select bank0
  1601  0846  120A  118A  2615  120A  158A  	fcall	stringtab
  1602  084B  120A  158A  2100  120A  158A  	fcall	_lcd_putc
  1603                           
  1604                           ;lcd_4bit.c: 173: y++;
  1605  0850  3001               	movlw	1
  1606  0851  1683               	bsf	3,5	;RP0=1, select bank3
  1607  0852  1703               	bsf	3,6	;RP1=1, select bank3
  1608  0853  079C               	addwf	lcd_escreve_string@y^(0+384),f
  1609  0854  1803               	skipnc
  1610  0855  0A9D               	incf	(lcd_escreve_string@y+1)^(0+384),f
  1611  0856  2826               	goto	l3110
  1612  0857                     __end_of_lcd_escreve_string:	
  1613                           
  1614                           	psect	text3
  1615  0900                     __ptext3:	
  1616 ;; *************** function _lcd_putc *****************
  1617 ;; Defined at:
  1618 ;;		line 82 in file "lcd_4bit.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;  c               1    wreg     unsigned char 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  c               1   11[BANK3 ] unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;		None               void
  1625 ;; Registers used:
  1626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         0       0       0       0       0
  1633 ;;      Locals:         0       0       0       1       0
  1634 ;;      Temps:          0       0       0       2       0
  1635 ;;      Totals:         0       0       0       3       0
  1636 ;;Total ram usage:        3 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    9
  1639 ;; This function calls:
  1640 ;;		_lcd_envia_byte
  1641 ;;		_lcd_gotoxy
  1642 ;; This function is called by:
  1643 ;;		_lcd_escreve_string
  1644 ;;		_lcd_escreve_p
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           
  1649                           ;psect for function _lcd_putc
  1650  0900                     _lcd_putc:	
  1651                           
  1652                           ;incstack = 0
  1653 ;; hardware stack exceeded
  1654                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1655                           ;lcd_putc@c stored from wreg
  1656  0900  1683               	bsf	3,5	;RP0=1, select bank3
  1657  0901  1703               	bsf	3,6	;RP1=1, select bank3
  1658  0902  009B               	movwf	lcd_putc@c^(0+384)
  1659                           
  1660                           ;lcd_4bit.c: 84: switch(c)
  1661  0903  2939               	goto	l3008
  1662  0904                     l2996:	
  1663                           ;lcd_4bit.c: 85: {
  1664                           ;lcd_4bit.c: 86: case '\f':
  1665                           
  1666                           
  1667                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  1668  0904  0192               	clrf	lcd_envia_byte@n^(0+384)
  1669  0905  0A92               	incf	lcd_envia_byte@n^(0+384),f
  1670  0906  3000               	movlw	0
  1671  0907  120A  158A  2057  120A  158A  	fcall	_lcd_envia_byte
  1672                           
  1673                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  1674  090C  300D               	movlw	13
  1675  090D  1683               	bsf	3,5	;RP0=1, select bank3
  1676  090E  1703               	bsf	3,6	;RP1=1, select bank3
  1677  090F  009A               	movwf	(??_lcd_putc^(0+384)+1)
  1678  0910  30FB               	movlw	251
  1679  0911  0099               	movwf	??_lcd_putc^(0+384)
  1680  0912                     u4397:	
  1681  0912  0B99               	decfsz	??_lcd_putc^(0+384),f
  1682  0913  2912               	goto	u4397
  1683  0914  0B9A               	decfsz	(??_lcd_putc^(0+384)+1),f
  1684  0915  2912               	goto	u4397
  1685  0916  2917               	nop2
  1686                           
  1687                           ;lcd_4bit.c: 89: break;
  1688  0917  0008               	return
  1689  0918                     l3000:	
  1690                           ;lcd_4bit.c: 91: case '\n':
  1691                           
  1692                           
  1693                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  1694  0918  3002               	movlw	2
  1695  0919  1683               	bsf	3,5	;RP0=1, select bank3
  1696  091A  1703               	bsf	3,6	;RP1=1, select bank3
  1697  091B  0099               	movwf	??_lcd_putc^(0+384)
  1698  091C  0819               	movf	??_lcd_putc^(0+384),w
  1699  091D  0095               	movwf	lcd_gotoxy@y^(0+384)
  1700  091E  3001               	movlw	1
  1701  091F  160A  118A  2708   	fcall	_lcd_gotoxy
  1702                           
  1703                           ;lcd_4bit.c: 93: break;
  1704  0922  0008               	return
  1705  0923                     l3002:	
  1706                           ;lcd_4bit.c: 95: case '\b':
  1707                           
  1708                           
  1709                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  1710  0923  3010               	movlw	16
  1711  0924  1683               	bsf	3,5	;RP0=1, select bank3
  1712  0925  1703               	bsf	3,6	;RP1=1, select bank3
  1713  0926  0099               	movwf	??_lcd_putc^(0+384)
  1714  0927  0819               	movf	??_lcd_putc^(0+384),w
  1715  0928  0092               	movwf	lcd_envia_byte@n^(0+384)
  1716  0929  3000               	movlw	0
  1717  092A  120A  158A  2057   	fcall	_lcd_envia_byte
  1718                           
  1719                           ;lcd_4bit.c: 97: break;
  1720  092D  0008               	return
  1721  092E                     l3004:	
  1722                           ;lcd_4bit.c: 99: default:
  1723                           
  1724                           
  1725                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  1726  092E  1683               	bsf	3,5	;RP0=1, select bank3
  1727  092F  1703               	bsf	3,6	;RP1=1, select bank3
  1728  0930  081B               	movf	lcd_putc@c^(0+384),w
  1729  0931  0099               	movwf	??_lcd_putc^(0+384)
  1730  0932  0819               	movf	??_lcd_putc^(0+384),w
  1731  0933  0092               	movwf	lcd_envia_byte@n^(0+384)
  1732  0934  3001               	movlw	1
  1733  0935  120A  158A  2057   	fcall	_lcd_envia_byte
  1734                           
  1735                           ;lcd_4bit.c: 102: }
  1736                           
  1737                           ;lcd_4bit.c: 101: break;
  1738  0938  0008               	return
  1739  0939                     l3008:	
  1740  0939  1683               	bsf	3,5	;RP0=1, select bank3
  1741  093A  1703               	bsf	3,6	;RP1=1, select bank3
  1742  093B  081B               	movf	lcd_putc@c^(0+384),w
  1743                           
  1744                           ; Switch size 1, requested type "space"
  1745                           ; Number of cases is 3, Range of values is 8 to 12
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte           10     6 (average)
  1749                           ; direct_byte           26    11 (fixed)
  1750                           ; jumptable            263     9 (fixed)
  1751                           ;	Chosen strategy is simple_byte
  1752  093C  3A08               	xorlw	8	; case 8
  1753  093D  1903               	skipnz
  1754  093E  2923               	goto	l3002
  1755  093F  3A02               	xorlw	2	; case 10
  1756  0940  1903               	skipnz
  1757  0941  2918               	goto	l3000
  1758  0942  3A06               	xorlw	6	; case 12
  1759  0943  1903               	skipnz
  1760  0944  2904               	goto	l2996
  1761  0945  292E               	goto	l3004
  1762  0946  0008               	return
  1763  0947                     __end_of_lcd_putc:	
  1764                           
  1765                           	psect	text4
  1766  1708                     __ptext4:	
  1767 ;; *************** function _lcd_gotoxy *****************
  1768 ;; Defined at:
  1769 ;;		line 70 in file "lcd_4bit.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  x               1    wreg     unsigned char 
  1772 ;;  y               1    5[BANK3 ] unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  x               1    7[BANK3 ] unsigned char 
  1775 ;;  address         1    8[BANK3 ] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;		None               void
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0, pclath, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1785 ;;      Params:         0       0       0       1       0
  1786 ;;      Locals:         0       0       0       2       0
  1787 ;;      Temps:          0       0       0       1       0
  1788 ;;      Totals:         0       0       0       4       0
  1789 ;;Total ram usage:        4 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    8
  1792 ;; This function calls:
  1793 ;;		_lcd_envia_byte
  1794 ;; This function is called by:
  1795 ;;		_lcd_putc
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           
  1800                           ;psect for function _lcd_gotoxy
  1801  1708                     _lcd_gotoxy:	
  1802                           
  1803                           ;incstack = 0
  1804 ;; hardware stack exceeded
  1805                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1806                           ;lcd_gotoxy@x stored from wreg
  1807  1708  1683               	bsf	3,5	;RP0=1, select bank3
  1808  1709  1703               	bsf	3,6	;RP1=1, select bank3
  1809  170A  0097               	movwf	lcd_gotoxy@x^(0+384)
  1810                           
  1811                           ;lcd_4bit.c: 72: unsigned char address;
  1812                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  1813  170B  0815               	movf	lcd_gotoxy@y^(0+384),w
  1814  170C  3A01               	xorlw	1
  1815  170D  1903               	skipnz
  1816  170E  2F14               	goto	l2988
  1817  170F  3040               	movlw	64
  1818  1710  0096               	movwf	??_lcd_gotoxy^(0+384)
  1819  1711  0816               	movf	??_lcd_gotoxy^(0+384),w
  1820  1712  0098               	movwf	lcd_gotoxy@address^(0+384)
  1821  1713  2F15               	goto	l2990
  1822  1714                     l2988:	
  1823                           
  1824                           ;lcd_4bit.c: 75: else address=0;
  1825  1714  0198               	clrf	lcd_gotoxy@address^(0+384)
  1826  1715                     l2990:	
  1827                           
  1828                           ;lcd_4bit.c: 77: address += x-1;
  1829  1715  0817               	movf	lcd_gotoxy@x^(0+384),w
  1830  1716  3EFF               	addlw	255
  1831  1717  0096               	movwf	??_lcd_gotoxy^(0+384)
  1832  1718  0816               	movf	??_lcd_gotoxy^(0+384),w
  1833  1719  0798               	addwf	lcd_gotoxy@address^(0+384),f
  1834                           
  1835                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  1836  171A  0818               	movf	lcd_gotoxy@address^(0+384),w
  1837  171B  3880               	iorlw	128
  1838  171C  0096               	movwf	??_lcd_gotoxy^(0+384)
  1839  171D  0816               	movf	??_lcd_gotoxy^(0+384),w
  1840  171E  0092               	movwf	lcd_envia_byte@n^(0+384)
  1841  171F  3000               	movlw	0
  1842  1720  120A  158A  2057   	fcall	_lcd_envia_byte
  1843  1723  0008               	return
  1844  1724                     __end_of_lcd_gotoxy:	
  1845                           
  1846                           	psect	text5
  1847  0BAF                     __ptext5:	
  1848 ;; *************** function _init_lcd_4bit *****************
  1849 ;; Defined at:
  1850 ;;		line 6 in file "lcd_4bit.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  i               1    7[BANK3 ] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;		None               void
  1857 ;; Registers used:
  1858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1864 ;;      Params:         0       0       0       0       0
  1865 ;;      Locals:         0       0       0       1       0
  1866 ;;      Temps:          0       0       0       2       0
  1867 ;;      Totals:         0       0       0       3       0
  1868 ;;Total ram usage:        3 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    8
  1871 ;; This function calls:
  1872 ;;		_lcd_envia_byte
  1873 ;;		_lcd_envia_nibble
  1874 ;; This function is called by:
  1875 ;;		_inicialize
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           
  1880                           ;psect for function _init_lcd_4bit
  1881  0BAF                     _init_lcd_4bit:	
  1882                           
  1883                           ;lcd_4bit.c: 8: unsigned char i;
  1884                           ;lcd_4bit.c: 10: TRISBbits.TRISB4=0;
  1885                           
  1886                           ;incstack = 0
  1887 ;; hardware stack exceeded
  1888                           ; Regs used in _init_lcd_4bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1889  0BAF  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0BB0  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0BB1  1206               	bcf	6,4	;volatile
  1892                           
  1893                           ;lcd_4bit.c: 11: TRISBbits.TRISB5=0;
  1894  0BB2  1286               	bcf	6,5	;volatile
  1895                           
  1896                           ;lcd_4bit.c: 12: PORTBbits.RB4=0;
  1897  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0BB5  1206               	bcf	6,4	;volatile
  1900                           
  1901                           ;lcd_4bit.c: 13: PORTBbits.RB5=0;
  1902  0BB6  1286               	bcf	6,5	;volatile
  1903                           
  1904                           ;lcd_4bit.c: 14: TRISBbits.TRISB0=0;
  1905  0BB7  1683               	bsf	3,5	;RP0=1, select bank1
  1906  0BB8  1303               	bcf	3,6	;RP1=0, select bank1
  1907  0BB9  1006               	bcf	6,0	;volatile
  1908                           
  1909                           ;lcd_4bit.c: 15: TRISBbits.TRISB1=0;
  1910  0BBA  1086               	bcf	6,1	;volatile
  1911                           
  1912                           ;lcd_4bit.c: 16: TRISBbits.TRISB2=0;
  1913  0BBB  1106               	bcf	6,2	;volatile
  1914                           
  1915                           ;lcd_4bit.c: 17: TRISBbits.TRISB3=0;
  1916  0BBC  1186               	bcf	6,3	;volatile
  1917                           
  1918                           ;lcd_4bit.c: 18: PORTBbits.RB0=0;
  1919  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  1920  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  1921  0BBF  1006               	bcf	6,0	;volatile
  1922                           
  1923                           ;lcd_4bit.c: 19: PORTBbits.RB1=0;
  1924  0BC0  1086               	bcf	6,1	;volatile
  1925                           
  1926                           ;lcd_4bit.c: 20: PORTBbits.RB2=0;
  1927  0BC1  1106               	bcf	6,2	;volatile
  1928                           
  1929                           ;lcd_4bit.c: 21: PORTBbits.RB3=0;
  1930  0BC2  1186               	bcf	6,3	;volatile
  1931                           
  1932                           ;lcd_4bit.c: 23: _delay((unsigned long)((15)*(20000000/4000.0)));
  1933  0BC3  3062               	movlw	98
  1934  0BC4  1683               	bsf	3,5	;RP0=1, select bank3
  1935  0BC5  1703               	bsf	3,6	;RP1=1, select bank3
  1936  0BC6  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1937  0BC7  3065               	movlw	101
  1938  0BC8  0095               	movwf	??_init_lcd_4bit^(0+384)
  1939  0BC9                     u4407:	
  1940  0BC9  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1941  0BCA  2BC9               	goto	u4407
  1942  0BCB  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1943  0BCC  2BC9               	goto	u4407
  1944  0BCD  2BCE               	nop2
  1945                           
  1946                           ;lcd_4bit.c: 25: for(i=0; i<3; i++)
  1947  0BCE  1683               	bsf	3,5	;RP0=1, select bank3
  1948  0BCF  1703               	bsf	3,6	;RP1=1, select bank3
  1949  0BD0  0197               	clrf	init_lcd_4bit@i^(0+384)
  1950  0BD1  3003               	movlw	3
  1951  0BD2  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1952  0BD3  1803               	btfsc	3,0
  1953  0BD4  2BF0               	goto	l3130
  1954  0BD5                     l3122:	
  1955                           
  1956                           ;lcd_4bit.c: 26: {
  1957                           ;lcd_4bit.c: 27: lcd_envia_nibble(0x03);
  1958  0BD5  3003               	movlw	3
  1959  0BD6  120A  158A  21E4  120A  158A  	fcall	_lcd_envia_nibble
  1960                           
  1961                           ;lcd_4bit.c: 28: _delay((unsigned long)((5)*(20000000/4000.0)));
  1962  0BDB  3021               	movlw	33
  1963  0BDC  1683               	bsf	3,5	;RP0=1, select bank3
  1964  0BDD  1703               	bsf	3,6	;RP1=1, select bank3
  1965  0BDE  0096               	movwf	(??_init_lcd_4bit^(0+384)+1)
  1966  0BDF  3076               	movlw	118
  1967  0BE0  0095               	movwf	??_init_lcd_4bit^(0+384)
  1968  0BE1                     u4417:	
  1969  0BE1  0B95               	decfsz	??_init_lcd_4bit^(0+384),f
  1970  0BE2  2BE1               	goto	u4417
  1971  0BE3  0B96               	decfsz	(??_init_lcd_4bit^(0+384)+1),f
  1972  0BE4  2BE1               	goto	u4417
  1973  0BE5  0000               	nop
  1974  0BE6  3001               	movlw	1
  1975  0BE7  1683               	bsf	3,5	;RP0=1, select bank3
  1976  0BE8  1703               	bsf	3,6	;RP1=1, select bank3
  1977  0BE9  0095               	movwf	??_init_lcd_4bit^(0+384)
  1978  0BEA  0815               	movf	??_init_lcd_4bit^(0+384),w
  1979  0BEB  0797               	addwf	init_lcd_4bit@i^(0+384),f
  1980  0BEC  3003               	movlw	3
  1981  0BED  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1982  0BEE  1C03               	skipc
  1983  0BEF  2BD5               	goto	l3122
  1984  0BF0                     l3130:	
  1985                           
  1986                           ;lcd_4bit.c: 29: }
  1987                           ;lcd_4bit.c: 30: lcd_envia_nibble(0x02);
  1988  0BF0  3002               	movlw	2
  1989  0BF1  120A  158A  21E4  120A  158A  	fcall	_lcd_envia_nibble
  1990                           
  1991                           ;lcd_4bit.c: 32: for(i=0; i < sizeof(LCD_INIT_STRING); i++)
  1992  0BF6  1683               	bsf	3,5	;RP0=1, select bank3
  1993  0BF7  1703               	bsf	3,6	;RP1=1, select bank3
  1994  0BF8  0197               	clrf	init_lcd_4bit@i^(0+384)
  1995  0BF9                     L1:	
  1996  0BF9  3004               	movlw	4
  1997  0BFA  0217               	subwf	init_lcd_4bit@i^(0+384),w
  1998  0BFB  1803               	btfsc	3,0
  1999  0BFC  0008               	return
  2000                           
  2001                           ;lcd_4bit.c: 33: {
  2002                           ;lcd_4bit.c: 34: lcd_envia_byte(0, LCD_INIT_STRING[i]);
  2003  0BFD  0817               	movf	init_lcd_4bit@i^(0+384),w
  2004  0BFE  3E29               	addlw	low (_LCD_INIT_STRING-__stringbase)
  2005  0BFF  0084               	movwf	4
  2006  0C00  120A  118A  261F  120A  158A  	fcall	stringdir
  2007  0C05  0095               	movwf	??_init_lcd_4bit^(0+384)
  2008  0C06  0815               	movf	??_init_lcd_4bit^(0+384),w
  2009  0C07  0092               	movwf	lcd_envia_byte@n^(0+384)
  2010  0C08  3000               	movlw	0
  2011  0C09  120A  158A  2057  120A  158A  	fcall	_lcd_envia_byte
  2012  0C0E  3001               	movlw	1
  2013  0C0F  1683               	bsf	3,5	;RP0=1, select bank3
  2014  0C10  1703               	bsf	3,6	;RP1=1, select bank3
  2015  0C11  0095               	movwf	??_init_lcd_4bit^(0+384)
  2016  0C12  0815               	movf	??_init_lcd_4bit^(0+384),w
  2017  0C13  0797               	addwf	init_lcd_4bit@i^(0+384),f
  2018  0C14  2BF9               	goto	L1
  2019  0C15                     __end_of_init_lcd_4bit:	
  2020                           
  2021                           	psect	text6
  2022  0C7D                     __ptext6:	
  2023 ;; *************** function _USARTInit *****************
  2024 ;; Defined at:
  2025 ;;		line 36 in file "main.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  BaudRate        4   15[BANK3 ] long 
  2028 ;;  Mode            2   19[BANK3 ] int 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  BR              2   25[BANK3 ] int 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;		None               void
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       0       0       6       0
  2041 ;;      Locals:         0       0       0       2       0
  2042 ;;      Temps:          0       0       0       4       0
  2043 ;;      Totals:         0       0       0      12       0
  2044 ;;Total ram usage:       12 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    7
  2047 ;; This function calls:
  2048 ;;		___aldiv
  2049 ;; This function is called by:
  2050 ;;		_inicialize
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function _USARTInit
  2056  0C7D                     _USARTInit:	
  2057                           
  2058                           ;main.c: 37: int BR = 0;
  2059                           
  2060                           ;incstack = 0
  2061 ;; hardware stack exceeded
  2062                           ; Regs used in _USARTInit: [wreg+status,2+status,0+pclath+cstack]
  2063  0C7D  1683               	bsf	3,5	;RP0=1, select bank3
  2064  0C7E  1703               	bsf	3,6	;RP1=1, select bank3
  2065  0C7F  01A9               	clrf	USARTInit@BR^(0+384)
  2066  0C80  01AA               	clrf	(USARTInit@BR+1)^(0+384)
  2067                           
  2068                           ;main.c: 40: if (Mode == 0)
  2069  0C81  0824               	movf	(USARTInit@Mode+1)^(0+384),w
  2070  0C82  0423               	iorwf	USARTInit@Mode^(0+384),w
  2071  0C83  1D03               	skipz
  2072  0C84  2C97               	goto	l3058
  2073                           
  2074                           ;main.c: 41: {
  2075                           ;main.c: 42: BR = (20000000 / (64 * BaudRate)) - 1;
  2076  0C85  081F               	movf	USARTInit@BaudRate^(0+384),w
  2077  0C86  00A5               	movwf	??_USARTInit^(0+384)
  2078  0C87  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2079  0C88  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2080  0C89  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2081  0C8A  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2082  0C8B  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2083  0C8C  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2084  0C8D  3006               	movlw	6
  2085  0C8E                     u4035:	
  2086  0C8E  1003               	clrc
  2087  0C8F  0DA5               	rlf	??_USARTInit^(0+384),f
  2088  0C90  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2089  0C91  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2090  0C92  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2091  0C93  3EFF               	addlw	-1
  2092  0C94  1D03               	skipz
  2093  0C95  2C8E               	goto	u4035
  2094  0C96  2CAA               	goto	L2
  2095  0C97                     l3058:	
  2096                           ;main.c: 44: } else
  2097                           
  2098                           ;main.c: 43: SPBRG = BR;
  2099                           
  2100                           
  2101                           ;main.c: 45: {
  2102                           ;main.c: 46: BR = (20000000 / (16 * BaudRate)) - 1;
  2103  0C97  1683               	bsf	3,5	;RP0=1, select bank3
  2104  0C98  1703               	bsf	3,6	;RP1=1, select bank3
  2105  0C99  081F               	movf	USARTInit@BaudRate^(0+384),w
  2106  0C9A  00A5               	movwf	??_USARTInit^(0+384)
  2107  0C9B  0820               	movf	(USARTInit@BaudRate+1)^(0+384),w
  2108  0C9C  00A6               	movwf	(??_USARTInit^(0+384)+1)
  2109  0C9D  0821               	movf	(USARTInit@BaudRate+2)^(0+384),w
  2110  0C9E  00A7               	movwf	(??_USARTInit^(0+384)+2)
  2111  0C9F  0822               	movf	(USARTInit@BaudRate+3)^(0+384),w
  2112  0CA0  00A8               	movwf	(??_USARTInit^(0+384)+3)
  2113  0CA1  3004               	movlw	4
  2114  0CA2                     u4045:	
  2115  0CA2  1003               	clrc
  2116  0CA3  0DA5               	rlf	??_USARTInit^(0+384),f
  2117  0CA4  0DA6               	rlf	(??_USARTInit^(0+384)+1),f
  2118  0CA5  0DA7               	rlf	(??_USARTInit^(0+384)+2),f
  2119  0CA6  0DA8               	rlf	(??_USARTInit^(0+384)+3),f
  2120  0CA7  3EFF               	addlw	-1
  2121  0CA8  1D03               	skipz
  2122  0CA9  2CA2               	goto	u4045
  2123  0CAA                     L2:	
  2124  0CAA  0828               	movf	(??_USARTInit+3)^(0+384),w
  2125  0CAB  0093               	movwf	(___aldiv@divisor+3)^(0+384)
  2126  0CAC  0827               	movf	(??_USARTInit+2)^(0+384),w
  2127  0CAD  0092               	movwf	(___aldiv@divisor+2)^(0+384)
  2128  0CAE  0826               	movf	(??_USARTInit+1)^(0+384),w
  2129  0CAF  0091               	movwf	(___aldiv@divisor+1)^(0+384)
  2130  0CB0  0825               	movf	??_USARTInit^(0+384),w
  2131  0CB1  0090               	movwf	___aldiv@divisor^(0+384)
  2132  0CB2  3001               	movlw	1
  2133  0CB3  0097               	movwf	(___aldiv@dividend+3)^(0+384)
  2134  0CB4  3031               	movlw	49
  2135  0CB5  0096               	movwf	(___aldiv@dividend+2)^(0+384)
  2136  0CB6  302D               	movlw	45
  2137  0CB7  0095               	movwf	(___aldiv@dividend+1)^(0+384)
  2138  0CB8  3000               	movlw	0
  2139  0CB9  0094               	movwf	___aldiv@dividend^(0+384)
  2140  0CBA  120A  158A  25FF  120A  158A  	fcall	___aldiv
  2141  0CBF  1683               	bsf	3,5	;RP0=1, select bank3
  2142  0CC0  1703               	bsf	3,6	;RP1=1, select bank3
  2143  0CC1  0810               	movf	?___aldiv^(0+384),w
  2144  0CC2  3EFF               	addlw	255
  2145  0CC3  00A9               	movwf	USARTInit@BR^(0+384)
  2146  0CC4  0811               	movf	(?___aldiv^(0+384)+1),w
  2147  0CC5  1803               	skipnc
  2148  0CC6  3E01               	addlw	1
  2149  0CC7  3EFF               	addlw	255
  2150  0CC8  00AA               	movwf	(USARTInit@BR+1)^(0+384)
  2151                           
  2152                           ;main.c: 47: SPBRG = BR;
  2153  0CC9  0829               	movf	USARTInit@BR^(0+384),w
  2154  0CCA  1683               	bsf	3,5	;RP0=1, select bank1
  2155  0CCB  1303               	bcf	3,6	;RP1=0, select bank1
  2156  0CCC  0099               	movwf	25	;volatile
  2157                           
  2158                           ;main.c: 48: }
  2159                           ;main.c: 51: TXSTAbits.CSRC = 1;
  2160  0CCD  1798               	bsf	24,7	;volatile
  2161                           
  2162                           ;main.c: 52: TXSTAbits.TX9 = 0;
  2163  0CCE  1318               	bcf	24,6	;volatile
  2164                           
  2165                           ;main.c: 53: TXSTAbits.TXEN = 1;
  2166  0CCF  1698               	bsf	24,5	;volatile
  2167                           
  2168                           ;main.c: 54: TXSTAbits.SYNC = 0;
  2169  0CD0  1218               	bcf	24,4	;volatile
  2170                           
  2171                           ;main.c: 55: TXSTAbits.BRGH = Mode;
  2172  0CD1  1683               	bsf	3,5	;RP0=1, select bank3
  2173  0CD2  1703               	bsf	3,6	;RP1=1, select bank3
  2174  0CD3  0823               	movf	USARTInit@Mode^(0+384),w
  2175  0CD4  1683               	bsf	3,5	;RP0=1, select bank1
  2176  0CD5  1303               	bcf	3,6	;RP1=0, select bank1
  2177  0CD6  1D03               	skipz
  2178  0CD7  1518               	bsf	24,2	;volatile
  2179  0CD8  1903               	skipnz
  2180  0CD9  1118               	bcf	24,2	;volatile
  2181                           
  2182                           ;main.c: 56: TXSTAbits.TRMT = 1;
  2183  0CDA  1498               	bsf	24,1	;volatile
  2184                           
  2185                           ;main.c: 57: TXSTAbits.TX9D = 0;
  2186  0CDB  1018               	bcf	24,0	;volatile
  2187                           
  2188                           ;main.c: 60: RCSTAbits.SPEN = 1;
  2189  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0CDE  1798               	bsf	24,7	;volatile
  2192                           
  2193                           ;main.c: 61: RCSTAbits.RX9 = 0;
  2194  0CDF  1318               	bcf	24,6	;volatile
  2195                           
  2196                           ;main.c: 62: RCSTAbits.SREN = 0;
  2197  0CE0  1298               	bcf	24,5	;volatile
  2198                           
  2199                           ;main.c: 63: RCSTAbits.CREN = 1;
  2200  0CE1  1618               	bsf	24,4	;volatile
  2201                           
  2202                           ;main.c: 64: RCSTAbits.ADDEN = 0;
  2203  0CE2  1198               	bcf	24,3	;volatile
  2204                           
  2205                           ;main.c: 65: RCSTAbits.FERR = 0;
  2206  0CE3  1118               	bcf	24,2	;volatile
  2207                           
  2208                           ;main.c: 66: RCSTAbits.OERR = 0;
  2209  0CE4  1098               	bcf	24,1	;volatile
  2210                           
  2211                           ;main.c: 67: RCSTAbits.RX9D = 0;
  2212  0CE5  1018               	bcf	24,0	;volatile
  2213                           
  2214                           ;main.c: 70: PIE1bits.RCIE = 1;
  2215  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  2216  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  2217  0CE8  168C               	bsf	12,5	;volatile
  2218                           
  2219                           ;main.c: 71: PIR1bits.RCIF = 0;
  2220  0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0CEA  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0CEB  128C               	bcf	12,5	;volatile
  2223  0CEC  0008               	return
  2224  0CED                     __end_of_USARTInit:	
  2225                           
  2226                           	psect	text7
  2227  0DFF                     __ptext7:	
  2228 ;; *************** function ___aldiv *****************
  2229 ;; Defined at:
  2230 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\aldiv.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  divisor         4    0[BANK3 ] long 
  2233 ;;  dividend        4    4[BANK3 ] long 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  quotient        4   11[BANK3 ] long 
  2236 ;;  sign            1   10[BANK3 ] unsigned char 
  2237 ;;  counter         1    9[BANK3 ] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  4    0[BANK3 ] long 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2247 ;;      Params:         0       0       0       8       0
  2248 ;;      Locals:         0       0       0       6       0
  2249 ;;      Temps:          0       0       0       1       0
  2250 ;;      Totals:         0       0       0      15       0
  2251 ;;Total ram usage:       15 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    6
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_USARTInit
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function ___aldiv
  2263  0DFF                     ___aldiv:	
  2264                           
  2265                           ;incstack = 0
  2266 ;; hardware stack exceeded
  2267                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2268  0DFF  1683               	bsf	3,5	;RP0=1, select bank3
  2269  0E00  1703               	bsf	3,6	;RP1=1, select bank3
  2270  0E01  019A               	clrf	___aldiv@sign^(0+384)
  2271  0E02  1F93               	btfss	(___aldiv@divisor+3)^(0+384),7
  2272  0E03  2E11               	goto	l413
  2273  0E04  0990               	comf	___aldiv@divisor^(0+384),f
  2274  0E05  0991               	comf	(___aldiv@divisor+1)^(0+384),f
  2275  0E06  0992               	comf	(___aldiv@divisor+2)^(0+384),f
  2276  0E07  0993               	comf	(___aldiv@divisor+3)^(0+384),f
  2277  0E08  0A90               	incf	___aldiv@divisor^(0+384),f
  2278  0E09  1903               	skipnz
  2279  0E0A  0A91               	incf	(___aldiv@divisor+1)^(0+384),f
  2280  0E0B  1903               	skipnz
  2281  0E0C  0A92               	incf	(___aldiv@divisor+2)^(0+384),f
  2282  0E0D  1903               	skipnz
  2283  0E0E  0A93               	incf	(___aldiv@divisor+3)^(0+384),f
  2284  0E0F  019A               	clrf	___aldiv@sign^(0+384)
  2285  0E10  0A9A               	incf	___aldiv@sign^(0+384),f
  2286  0E11                     l413:	
  2287  0E11  1F97               	btfss	(___aldiv@dividend+3)^(0+384),7
  2288  0E12  2E22               	goto	l3020
  2289  0E13  0994               	comf	___aldiv@dividend^(0+384),f
  2290  0E14  0995               	comf	(___aldiv@dividend+1)^(0+384),f
  2291  0E15  0996               	comf	(___aldiv@dividend+2)^(0+384),f
  2292  0E16  0997               	comf	(___aldiv@dividend+3)^(0+384),f
  2293  0E17  0A94               	incf	___aldiv@dividend^(0+384),f
  2294  0E18  1903               	skipnz
  2295  0E19  0A95               	incf	(___aldiv@dividend+1)^(0+384),f
  2296  0E1A  1903               	skipnz
  2297  0E1B  0A96               	incf	(___aldiv@dividend+2)^(0+384),f
  2298  0E1C  1903               	skipnz
  2299  0E1D  0A97               	incf	(___aldiv@dividend+3)^(0+384),f
  2300  0E1E  3001               	movlw	1
  2301  0E1F  0098               	movwf	??___aldiv^(0+384)
  2302  0E20  0818               	movf	??___aldiv^(0+384),w
  2303  0E21  069A               	xorwf	___aldiv@sign^(0+384),f
  2304  0E22                     l3020:	
  2305  0E22  3000               	movlw	0
  2306  0E23  009E               	movwf	(___aldiv@quotient+3)^(0+384)
  2307  0E24  3000               	movlw	0
  2308  0E25  009D               	movwf	(___aldiv@quotient+2)^(0+384)
  2309  0E26  3000               	movlw	0
  2310  0E27  009C               	movwf	(___aldiv@quotient+1)^(0+384)
  2311  0E28  3000               	movlw	0
  2312  0E29  009B               	movwf	___aldiv@quotient^(0+384)
  2313  0E2A  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2314  0E2B  0412               	iorwf	(___aldiv@divisor+2)^(0+384),w
  2315  0E2C  0411               	iorwf	(___aldiv@divisor+1)^(0+384),w
  2316  0E2D  0410               	iorwf	___aldiv@divisor^(0+384),w
  2317  0E2E  1903               	skipnz
  2318  0E2F  2E77               	goto	l3042
  2319  0E30  0199               	clrf	___aldiv@counter^(0+384)
  2320  0E31  0A99               	incf	___aldiv@counter^(0+384),f
  2321  0E32                     l3028:	
  2322  0E32  1B93               	btfsc	(___aldiv@divisor+3)^(0+384),7
  2323  0E33  2E42               	goto	l3030
  2324  0E34  3001               	movlw	1
  2325  0E35  0098               	movwf	??___aldiv^(0+384)
  2326  0E36                     u3955:	
  2327  0E36  1003               	clrc
  2328  0E37  0D90               	rlf	___aldiv@divisor^(0+384),f
  2329  0E38  0D91               	rlf	(___aldiv@divisor+1)^(0+384),f
  2330  0E39  0D92               	rlf	(___aldiv@divisor+2)^(0+384),f
  2331  0E3A  0D93               	rlf	(___aldiv@divisor+3)^(0+384),f
  2332  0E3B  0B98               	decfsz	??___aldiv^(0+384),f
  2333  0E3C  2E36               	goto	u3955
  2334  0E3D  3001               	movlw	1
  2335  0E3E  0098               	movwf	??___aldiv^(0+384)
  2336  0E3F  0818               	movf	??___aldiv^(0+384),w
  2337  0E40  0799               	addwf	___aldiv@counter^(0+384),f
  2338  0E41  2E32               	goto	l3028
  2339  0E42                     l3030:	
  2340  0E42  3001               	movlw	1
  2341  0E43  0098               	movwf	??___aldiv^(0+384)
  2342  0E44                     u3975:	
  2343  0E44  1003               	clrc
  2344  0E45  0D9B               	rlf	___aldiv@quotient^(0+384),f
  2345  0E46  0D9C               	rlf	(___aldiv@quotient+1)^(0+384),f
  2346  0E47  0D9D               	rlf	(___aldiv@quotient+2)^(0+384),f
  2347  0E48  0D9E               	rlf	(___aldiv@quotient+3)^(0+384),f
  2348  0E49  0B98               	decfsz	??___aldiv^(0+384),f
  2349  0E4A  2E44               	goto	u3975
  2350  0E4B  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2351  0E4C  0217               	subwf	(___aldiv@dividend+3)^(0+384),w
  2352  0E4D  1D03               	skipz
  2353  0E4E  2E59               	goto	u3985
  2354  0E4F  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2355  0E50  0216               	subwf	(___aldiv@dividend+2)^(0+384),w
  2356  0E51  1D03               	skipz
  2357  0E52  2E59               	goto	u3985
  2358  0E53  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2359  0E54  0215               	subwf	(___aldiv@dividend+1)^(0+384),w
  2360  0E55  1D03               	skipz
  2361  0E56  2E59               	goto	u3985
  2362  0E57  0810               	movf	___aldiv@divisor^(0+384),w
  2363  0E58  0214               	subwf	___aldiv@dividend^(0+384),w
  2364  0E59                     u3985:	
  2365  0E59  1C03               	skipc
  2366  0E5A  2E6A               	goto	l3038
  2367  0E5B  0810               	movf	___aldiv@divisor^(0+384),w
  2368  0E5C  0294               	subwf	___aldiv@dividend^(0+384),f
  2369  0E5D  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  2370  0E5E  1C03               	skipc
  2371  0E5F  0F11               	incfsz	(___aldiv@divisor+1)^(0+384),w
  2372  0E60  0295               	subwf	(___aldiv@dividend+1)^(0+384),f
  2373  0E61  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  2374  0E62  1C03               	skipc
  2375  0E63  0F12               	incfsz	(___aldiv@divisor+2)^(0+384),w
  2376  0E64  0296               	subwf	(___aldiv@dividend+2)^(0+384),f
  2377  0E65  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  2378  0E66  1C03               	skipc
  2379  0E67  0F13               	incfsz	(___aldiv@divisor+3)^(0+384),w
  2380  0E68  0297               	subwf	(___aldiv@dividend+3)^(0+384),f
  2381  0E69  141B               	bsf	___aldiv@quotient^(0+384),0
  2382  0E6A                     l3038:	
  2383  0E6A  3001               	movlw	1
  2384  0E6B                     u3995:	
  2385  0E6B  1003               	clrc
  2386  0E6C  0C93               	rrf	(___aldiv@divisor+3)^(0+384),f
  2387  0E6D  0C92               	rrf	(___aldiv@divisor+2)^(0+384),f
  2388  0E6E  0C91               	rrf	(___aldiv@divisor+1)^(0+384),f
  2389  0E6F  0C90               	rrf	___aldiv@divisor^(0+384),f
  2390  0E70  3EFF               	addlw	-1
  2391  0E71  1D03               	skipz
  2392  0E72  2E6B               	goto	u3995
  2393  0E73  3001               	movlw	1
  2394  0E74  0299               	subwf	___aldiv@counter^(0+384),f
  2395  0E75  1D03               	btfss	3,2
  2396  0E76  2E42               	goto	l3030
  2397  0E77                     l3042:	
  2398  0E77  081A               	movf	___aldiv@sign^(0+384),w
  2399  0E78  1903               	btfsc	3,2
  2400  0E79  2E85               	goto	l3046
  2401  0E7A  099B               	comf	___aldiv@quotient^(0+384),f
  2402  0E7B  099C               	comf	(___aldiv@quotient+1)^(0+384),f
  2403  0E7C  099D               	comf	(___aldiv@quotient+2)^(0+384),f
  2404  0E7D  099E               	comf	(___aldiv@quotient+3)^(0+384),f
  2405  0E7E  0A9B               	incf	___aldiv@quotient^(0+384),f
  2406  0E7F  1903               	skipnz
  2407  0E80  0A9C               	incf	(___aldiv@quotient+1)^(0+384),f
  2408  0E81  1903               	skipnz
  2409  0E82  0A9D               	incf	(___aldiv@quotient+2)^(0+384),f
  2410  0E83  1903               	skipnz
  2411  0E84  0A9E               	incf	(___aldiv@quotient+3)^(0+384),f
  2412  0E85                     l3046:	
  2413  0E85  081E               	movf	(___aldiv@quotient+3)^(0+384),w
  2414  0E86  0093               	movwf	(?___aldiv+3)^(0+384)
  2415  0E87  081D               	movf	(___aldiv@quotient+2)^(0+384),w
  2416  0E88  0092               	movwf	(?___aldiv+2)^(0+384)
  2417  0E89  081C               	movf	(___aldiv@quotient+1)^(0+384),w
  2418  0E8A  0091               	movwf	(?___aldiv+1)^(0+384)
  2419  0E8B  081B               	movf	___aldiv@quotient^(0+384),w
  2420  0E8C  0090               	movwf	?___aldiv^(0+384)
  2421  0E8D  0008               	return
  2422  0E8E                     __end_of___aldiv:	
  2423                           
  2424                           	psect	text8
  2425  07BC                     __ptext8:	
  2426 ;; *************** function _LCDClear *****************
  2427 ;; Defined at:
  2428 ;;		line 179 in file "lcd_4bit.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;		None               void
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0, pclath, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2442 ;;      Params:         0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0
  2444 ;;      Temps:          0       0       0       2       0
  2445 ;;      Totals:         0       0       0       2       0
  2446 ;;Total ram usage:        2 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    8
  2449 ;; This function calls:
  2450 ;;		_lcd_envia_byte
  2451 ;; This function is called by:
  2452 ;;		_inicialize
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           
  2457                           ;psect for function _LCDClear
  2458  07BC                     _LCDClear:	
  2459                           
  2460                           ;lcd_4bit.c: 181: lcd_envia_byte(0,0x01);
  2461                           
  2462                           ;incstack = 0
  2463 ;; hardware stack exceeded
  2464                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  2465  07BC  1683               	bsf	3,5	;RP0=1, select bank3
  2466  07BD  1703               	bsf	3,6	;RP1=1, select bank3
  2467  07BE  0192               	clrf	lcd_envia_byte@n^(0+384)
  2468  07BF  0A92               	incf	lcd_envia_byte@n^(0+384),f
  2469  07C0  3000               	movlw	0
  2470  07C1  120A  158A  2057  120A  118A  	fcall	_lcd_envia_byte
  2471                           
  2472                           ;lcd_4bit.c: 182: _delay((unsigned long)((10)*(20000000/4000.0)));
  2473  07C6  3041               	movlw	65
  2474  07C7  1683               	bsf	3,5	;RP0=1, select bank3
  2475  07C8  1703               	bsf	3,6	;RP1=1, select bank3
  2476  07C9  0096               	movwf	(??_LCDClear^(0+384)+1)
  2477  07CA  30EE               	movlw	238
  2478  07CB  0095               	movwf	??_LCDClear^(0+384)
  2479  07CC                     u4427:	
  2480  07CC  0B95               	decfsz	??_LCDClear^(0+384),f
  2481  07CD  2FCC               	goto	u4427
  2482  07CE  0B96               	decfsz	(??_LCDClear^(0+384)+1),f
  2483  07CF  2FCC               	goto	u4427
  2484  07D0  0000               	nop
  2485                           
  2486                           ;lcd_4bit.c: 184: lcd_envia_byte(0,0x0C);
  2487  07D1  300C               	movlw	12
  2488  07D2  1683               	bsf	3,5	;RP0=1, select bank3
  2489  07D3  1703               	bsf	3,6	;RP1=1, select bank3
  2490  07D4  0095               	movwf	??_LCDClear^(0+384)
  2491  07D5  0815               	movf	??_LCDClear^(0+384),w
  2492  07D6  0092               	movwf	lcd_envia_byte@n^(0+384)
  2493  07D7  3000               	movlw	0
  2494  07D8  120A  158A  2057  120A  118A  	fcall	_lcd_envia_byte
  2495                           
  2496                           ;lcd_4bit.c: 185: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2497  07DD  30F9               	movlw	249
  2498  07DE  1683               	bsf	3,5	;RP0=1, select bank3
  2499  07DF  1703               	bsf	3,6	;RP1=1, select bank3
  2500  07E0  0095               	movwf	??_LCDClear^(0+384)
  2501  07E1                     u4437:	
  2502  07E1  0000               	nop
  2503  07E2  0B95               	decfsz	??_LCDClear^(0+384),f
  2504  07E3  2FE1               	goto	u4437
  2505  07E4  2FE5               	nop2	;nop
  2506  07E5  0000               	nop
  2507                           
  2508                           ;lcd_4bit.c: 187: lcd_envia_byte(0,0x06);
  2509  07E6  3006               	movlw	6
  2510  07E7  1683               	bsf	3,5	;RP0=1, select bank3
  2511  07E8  1703               	bsf	3,6	;RP1=1, select bank3
  2512  07E9  0095               	movwf	??_LCDClear^(0+384)
  2513  07EA  0815               	movf	??_LCDClear^(0+384),w
  2514  07EB  0092               	movwf	lcd_envia_byte@n^(0+384)
  2515  07EC  3000               	movlw	0
  2516  07ED  120A  158A  2057  120A  118A  	fcall	_lcd_envia_byte
  2517                           
  2518                           ;lcd_4bit.c: 188: _delay((unsigned long)((200)*(20000000/4000000.0)));
  2519  07F2  30F9               	movlw	249
  2520  07F3  1683               	bsf	3,5	;RP0=1, select bank3
  2521  07F4  1703               	bsf	3,6	;RP1=1, select bank3
  2522  07F5  0095               	movwf	??_LCDClear^(0+384)
  2523  07F6                     u4447:	
  2524  07F6  0000               	nop
  2525  07F7  0B95               	decfsz	??_LCDClear^(0+384),f
  2526  07F8  2FF6               	goto	u4447
  2527  07F9  2FFA               	nop2	;nop
  2528  07FA  0000               	nop
  2529  07FB  0008               	return
  2530  07FC                     __end_of_LCDClear:	
  2531                           
  2532                           	psect	text9
  2533  0857                     __ptext9:	
  2534 ;; *************** function _lcd_envia_byte *****************
  2535 ;; Defined at:
  2536 ;;		line 53 in file "lcd_4bit.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  address         1    wreg     unsigned char 
  2539 ;;  n               1    2[BANK3 ] unsigned char 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  address         1    4[BANK3 ] unsigned char 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;		None               void
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0, pclath, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2551 ;;      Params:         0       0       0       1       0
  2552 ;;      Locals:         0       0       0       1       0
  2553 ;;      Temps:          0       0       0       1       0
  2554 ;;      Totals:         0       0       0       3       0
  2555 ;;Total ram usage:        3 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    7
  2558 ;; This function calls:
  2559 ;;		_lcd_envia_nibble
  2560 ;; This function is called by:
  2561 ;;		_init_lcd_4bit
  2562 ;;		_lcd_gotoxy
  2563 ;;		_lcd_putc
  2564 ;;		_LCDClear
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           
  2569                           ;psect for function _lcd_envia_byte
  2570  0857                     _lcd_envia_byte:	
  2571                           
  2572                           ;incstack = 0
  2573 ;; hardware stack exceeded
  2574                           ; Regs used in _lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  2575                           ;lcd_envia_byte@address stored from wreg
  2576  0857  1683               	bsf	3,5	;RP0=1, select bank3
  2577  0858  1703               	bsf	3,6	;RP1=1, select bank3
  2578  0859  0094               	movwf	lcd_envia_byte@address^(0+384)
  2579                           
  2580                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  2581  085A  1283               	bcf	3,5	;RP0=0, select bank0
  2582  085B  1303               	bcf	3,6	;RP1=0, select bank0
  2583  085C  1286               	bcf	6,5	;volatile
  2584                           
  2585                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  2586  085D  3063               	movlw	99
  2587  085E  1683               	bsf	3,5	;RP0=1, select bank3
  2588  085F  1703               	bsf	3,6	;RP1=1, select bank3
  2589  0860  0093               	movwf	??_lcd_envia_byte^(0+384)
  2590  0861                     u4457:	
  2591  0861  0B93               	decfsz	??_lcd_envia_byte^(0+384),f
  2592  0862  2861               	goto	u4457
  2593  0863  2864               	nop2	;nop
  2594                           
  2595                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  2596  0864  1683               	bsf	3,5	;RP0=1, select bank3
  2597  0865  1703               	bsf	3,6	;RP1=1, select bank3
  2598  0866  0814               	movf	lcd_envia_byte@address^(0+384),w
  2599  0867  1903               	btfsc	3,2
  2600  0868  286D               	goto	l172
  2601  0869  1283               	bcf	3,5	;RP0=0, select bank0
  2602  086A  1303               	bcf	3,6	;RP1=0, select bank0
  2603  086B  1686               	bsf	6,5	;volatile
  2604  086C  2870               	goto	l173
  2605  086D                     l172:	
  2606                           
  2607                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  2608  086D  1283               	bcf	3,5	;RP0=0, select bank0
  2609  086E  1303               	bcf	3,6	;RP1=0, select bank0
  2610  086F  1286               	bcf	6,5	;volatile
  2611  0870                     l173:	
  2612                           
  2613                           ;lcd_4bit.c: 61: _delay(1);
  2614  0870  0000               	nop
  2615                           
  2616                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  2617  0871  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0872  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0873  1206               	bcf	6,4	;volatile
  2620                           
  2621                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  2622  0874  1683               	bsf	3,5	;RP0=1, select bank3
  2623  0875  1703               	bsf	3,6	;RP1=1, select bank3
  2624  0876  0812               	movf	lcd_envia_byte@n^(0+384),w
  2625  0877  0093               	movwf	??_lcd_envia_byte^(0+384)
  2626  0878  3004               	movlw	4
  2627  0879                     u3905:	
  2628  0879  1003               	clrc
  2629  087A  0C93               	rrf	??_lcd_envia_byte^(0+384),f
  2630  087B  3EFF               	addlw	-1
  2631  087C  1D03               	skipz
  2632  087D  2879               	goto	u3905
  2633  087E  0813               	movf	??_lcd_envia_byte^(0+384),w
  2634  087F  120A  158A  21E4  120A  158A  	fcall	_lcd_envia_nibble
  2635                           
  2636                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  2637  0884  1683               	bsf	3,5	;RP0=1, select bank3
  2638  0885  1703               	bsf	3,6	;RP1=1, select bank3
  2639  0886  0812               	movf	lcd_envia_byte@n^(0+384),w
  2640  0887  390F               	andlw	15
  2641  0888  120A  158A  21E4   	fcall	_lcd_envia_nibble
  2642  088B  0008               	return
  2643  088C                     __end_of_lcd_envia_byte:	
  2644                           
  2645                           	psect	text10
  2646  09E4                     __ptext10:	
  2647 ;; *************** function _lcd_envia_nibble *****************
  2648 ;; Defined at:
  2649 ;;		line 39 in file "lcd_4bit.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  n               1    wreg     unsigned char 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  n               1    1[BANK3 ] unsigned char 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;		None               void
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2663 ;;      Params:         0       0       0       0       0
  2664 ;;      Locals:         0       0       0       1       0
  2665 ;;      Temps:          0       0       0       1       0
  2666 ;;      Totals:         0       0       0       2       0
  2667 ;;Total ram usage:        2 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    6
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_init_lcd_4bit
  2674 ;;		_lcd_envia_byte
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           
  2679                           ;psect for function _lcd_envia_nibble
  2680  09E4                     _lcd_envia_nibble:	
  2681                           
  2682                           ;incstack = 0
  2683 ;; hardware stack exceeded
  2684                           ; Regs used in _lcd_envia_nibble: [wreg+status,2+status,0]
  2685                           ;lcd_envia_nibble@n stored from wreg
  2686  09E4  1683               	bsf	3,5	;RP0=1, select bank3
  2687  09E5  1703               	bsf	3,6	;RP1=1, select bank3
  2688  09E6  0091               	movwf	lcd_envia_nibble@n^(0+384)
  2689                           
  2690                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  2691  09E7  3000               	movlw	0
  2692  09E8  1811               	btfsc	lcd_envia_nibble@n^(0+384),0
  2693  09E9  3001               	movlw	1
  2694  09EA  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2695  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  2696  09EC  1303               	bcf	3,6	;RP1=0, select bank0
  2697  09ED  0806               	movf	6,w	;volatile
  2698  09EE  1683               	bsf	3,5	;RP0=1, select bank3
  2699  09EF  1703               	bsf	3,6	;RP1=1, select bank3
  2700  09F0  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2701  09F1  39FE               	andlw	-2
  2702  09F2  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2703  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  2704  09F4  1303               	bcf	3,6	;RP1=0, select bank0
  2705  09F5  0086               	movwf	6	;volatile
  2706                           
  2707                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  2708  09F6  3000               	movlw	0
  2709  09F7  1683               	bsf	3,5	;RP0=1, select bank3
  2710  09F8  1703               	bsf	3,6	;RP1=1, select bank3
  2711  09F9  1891               	btfsc	lcd_envia_nibble@n^(0+384),1
  2712  09FA  3001               	movlw	1
  2713  09FB  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2714  09FC  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2715  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  2716  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  2717  09FF  0806               	movf	6,w	;volatile
  2718  0A00  1683               	bsf	3,5	;RP0=1, select bank3
  2719  0A01  1703               	bsf	3,6	;RP1=1, select bank3
  2720  0A02  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2721  0A03  39FD               	andlw	-3
  2722  0A04  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2723  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  2725  0A07  0086               	movwf	6	;volatile
  2726                           
  2727                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  2728  0A08  3000               	movlw	0
  2729  0A09  1683               	bsf	3,5	;RP0=1, select bank3
  2730  0A0A  1703               	bsf	3,6	;RP1=1, select bank3
  2731  0A0B  1911               	btfsc	lcd_envia_nibble@n^(0+384),2
  2732  0A0C  3001               	movlw	1
  2733  0A0D  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2734  0A0E  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2735  0A0F  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2736  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  2737  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  2738  0A12  0806               	movf	6,w	;volatile
  2739  0A13  1683               	bsf	3,5	;RP0=1, select bank3
  2740  0A14  1703               	bsf	3,6	;RP1=1, select bank3
  2741  0A15  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2742  0A16  39FB               	andlw	-5
  2743  0A17  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2744  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  2745  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  2746  0A1A  0086               	movwf	6	;volatile
  2747                           
  2748                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  2749  0A1B  3000               	movlw	0
  2750  0A1C  1683               	bsf	3,5	;RP0=1, select bank3
  2751  0A1D  1703               	bsf	3,6	;RP1=1, select bank3
  2752  0A1E  1991               	btfsc	lcd_envia_nibble@n^(0+384),3
  2753  0A1F  3001               	movlw	1
  2754  0A20  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2755  0A21  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2756  0A22  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2757  0A23  0D90               	rlf	??_lcd_envia_nibble^(0+384),f
  2758  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0A26  0806               	movf	6,w	;volatile
  2761  0A27  1683               	bsf	3,5	;RP0=1, select bank3
  2762  0A28  1703               	bsf	3,6	;RP1=1, select bank3
  2763  0A29  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2764  0A2A  39F7               	andlw	-9
  2765  0A2B  0610               	xorwf	??_lcd_envia_nibble^(0+384),w
  2766  0A2C  1283               	bcf	3,5	;RP0=0, select bank0
  2767  0A2D  1303               	bcf	3,6	;RP1=0, select bank0
  2768  0A2E  0086               	movwf	6	;volatile
  2769                           
  2770                           ;lcd_4bit.c: 46: _delay(1);
  2771  0A2F  0000               	nop
  2772                           
  2773                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  2774  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  2775  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  2776  0A32  1606               	bsf	6,4	;volatile
  2777                           
  2778                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  2779  0A33  3003               	movlw	3
  2780  0A34  1683               	bsf	3,5	;RP0=1, select bank3
  2781  0A35  1703               	bsf	3,6	;RP1=1, select bank3
  2782  0A36  0090               	movwf	??_lcd_envia_nibble^(0+384)
  2783  0A37                     u4467:	
  2784  0A37  0B90               	decfsz	??_lcd_envia_nibble^(0+384),f
  2785  0A38  2A37               	goto	u4467
  2786                           
  2787                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  2788  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  2789  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  2790  0A3B  1206               	bcf	6,4	;volatile
  2791  0A3C  0008               	return
  2792  0A3D                     __end_of_lcd_envia_nibble:	
  2793                           
  2794                           	psect	text11
  2795  16A4                     __ptext11:	
  2796 ;; *************** function _ADCInit *****************
  2797 ;; Defined at:
  2798 ;;		line 118 in file "main.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;		None               void
  2805 ;; Registers used:
  2806 ;;		None
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2812 ;;      Params:         0       0       0       0       0
  2813 ;;      Locals:         0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0
  2815 ;;      Totals:         0       0       0       0       0
  2816 ;;Total ram usage:        0 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    6
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_inicialize
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _ADCInit
  2828  16A4                     _ADCInit:	
  2829                           
  2830                           ;main.c: 120: ADCON1bits.ADFM = 1;
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _ADCInit: []
  2834  16A4  1683               	bsf	3,5	;RP0=1, select bank1
  2835  16A5  1303               	bcf	3,6	;RP1=0, select bank1
  2836  16A6  179F               	bsf	31,7	;volatile
  2837                           
  2838                           ;main.c: 121: ADCON1bits.PCFG3 = 0;
  2839  16A7  119F               	bcf	31,3	;volatile
  2840                           
  2841                           ;main.c: 122: ADCON1bits.PCFG2 = 0;
  2842  16A8  111F               	bcf	31,2	;volatile
  2843                           
  2844                           ;main.c: 123: ADCON1bits.PCFG1 = 0;
  2845  16A9  109F               	bcf	31,1	;volatile
  2846                           
  2847                           ;main.c: 124: ADCON1bits.PCFG0 = 0;
  2848  16AA  101F               	bcf	31,0	;volatile
  2849                           
  2850                           ;main.c: 127: ADCON0bits.ADCS1 = 1;
  2851  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  2852  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  2853  16AD  179F               	bsf	31,7	;volatile
  2854                           
  2855                           ;main.c: 128: ADCON0bits.ADCS0 = 0;
  2856  16AE  131F               	bcf	31,6	;volatile
  2857                           
  2858                           ;main.c: 132: ADCON0bits.ADON = 1;
  2859  16AF  141F               	bsf	31,0	;volatile
  2860                           
  2861                           ;main.c: 135: PIE1bits.ADIE = 1;
  2862  16B0  1683               	bsf	3,5	;RP0=1, select bank1
  2863  16B1  1303               	bcf	3,6	;RP1=0, select bank1
  2864  16B2  170C               	bsf	12,6	;volatile
  2865                           
  2866                           ;main.c: 136: PIR1bits.ADIF = 0;
  2867  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  2868  16B4  1303               	bcf	3,6	;RP1=0, select bank0
  2869  16B5  130C               	bcf	12,6	;volatile
  2870  16B6  0008               	return
  2871  16B7                     __end_of_ADCInit:	
  2872                           
  2873                           	psect	text12
  2874  0A98                     __ptext12:	
  2875 ;; *************** function _ativar *****************
  2876 ;; Defined at:
  2877 ;;		line 292 in file "main.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;		None               void
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0, pclath, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2891 ;;      Params:         0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0
  2893 ;;      Temps:          0       0       0       3       0
  2894 ;;      Totals:         0       0       0       3       0
  2895 ;;Total ram usage:        3 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    7
  2898 ;; This function calls:
  2899 ;;		_ADCRead
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _ativar
  2907  0A98                     _ativar:	
  2908                           
  2909                           ;main.c: 293: if (PORTCbits.RC3 == 1) {
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _ativar: [wreg+status,2+status,0+pclath+cstack]
  2913  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0A9A  1D87               	btfss	7,3	;volatile
  2916  0A9B  2AB8               	goto	l3208
  2917                           
  2918                           ;main.c: 294: _delay((unsigned long)((300)*(20000000/4000.0)));
  2919  0A9C  3008               	movlw	8
  2920  0A9D  1683               	bsf	3,5	;RP0=1, select bank3
  2921  0A9E  1703               	bsf	3,6	;RP1=1, select bank3
  2922  0A9F  0095               	movwf	(??_ativar^(0+384)+2)
  2923  0AA0  309D               	movlw	157
  2924  0AA1  0094               	movwf	(??_ativar^(0+384)+1)
  2925  0AA2  300B               	movlw	11
  2926  0AA3  0093               	movwf	??_ativar^(0+384)
  2927  0AA4                     u4477:	
  2928  0AA4  0B93               	decfsz	??_ativar^(0+384),f
  2929  0AA5  2AA4               	goto	u4477
  2930  0AA6  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2931  0AA7  2AA4               	goto	u4477
  2932  0AA8  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2933  0AA9  2AA4               	goto	u4477
  2934  0AAA  2AAB               	nop2
  2935                           
  2936                           ;main.c: 295: if (flag_Start == 0) {
  2937  0AAB  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0AAC  1303               	bcf	3,6	;RP1=0, select bank1
  2939  0AAD  085E               	movf	(_flag_Start+1)^(0+128),w
  2940  0AAE  045D               	iorwf	_flag_Start^(0+128),w
  2941  0AAF  1D03               	skipz
  2942  0AB0  2AB6               	goto	l3206
  2943                           
  2944                           ;main.c: 297: flag_Start = 1;
  2945  0AB1  3001               	movlw	1
  2946  0AB2  00DD               	movwf	_flag_Start^(0+128)
  2947  0AB3  3000               	movlw	0
  2948  0AB4  00DE               	movwf	(_flag_Start^(0+128)+1)
  2949                           
  2950                           ;main.c: 298: } else {
  2951  0AB5  2AB8               	goto	l3208
  2952  0AB6                     l3206:	
  2953                           
  2954                           ;main.c: 299: flag_Start = 0;
  2955  0AB6  01DD               	clrf	_flag_Start^(0+128)
  2956  0AB7  01DE               	clrf	(_flag_Start+1)^(0+128)
  2957  0AB8                     l3208:	
  2958                           
  2959                           ;main.c: 301: }
  2960                           ;main.c: 302: }
  2961                           ;main.c: 304: if (flag_Start == 1) {
  2962  0AB8  3001               	movlw	1
  2963  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  2964  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  2965  0ABB  065D               	xorwf	_flag_Start^(0+128),w
  2966  0ABC  045E               	iorwf	(_flag_Start+1)^(0+128),w
  2967  0ABD  1D03               	skipz
  2968  0ABE  0008               	return
  2969                           
  2970                           ;main.c: 305: ADCRead(0);
  2971  0ABF  3000               	movlw	0
  2972  0AC0  1683               	bsf	3,5	;RP0=1, select bank3
  2973  0AC1  1703               	bsf	3,6	;RP1=1, select bank3
  2974  0AC2  0090               	movwf	ADCRead@ch^(0+384)
  2975  0AC3  3000               	movlw	0
  2976  0AC4  0091               	movwf	(ADCRead@ch^(0+384)+1)
  2977  0AC5  160A  118A  2724  120A  158A  	fcall	_ADCRead
  2978                           
  2979                           ;main.c: 306: _delay((unsigned long)((300)*(20000000/4000.0)));
  2980  0ACA  3008               	movlw	8
  2981  0ACB  1683               	bsf	3,5	;RP0=1, select bank3
  2982  0ACC  1703               	bsf	3,6	;RP1=1, select bank3
  2983  0ACD  0095               	movwf	(??_ativar^(0+384)+2)
  2984  0ACE  309D               	movlw	157
  2985  0ACF  0094               	movwf	(??_ativar^(0+384)+1)
  2986  0AD0  300B               	movlw	11
  2987  0AD1  0093               	movwf	??_ativar^(0+384)
  2988  0AD2                     u4487:	
  2989  0AD2  0B93               	decfsz	??_ativar^(0+384),f
  2990  0AD3  2AD2               	goto	u4487
  2991  0AD4  0B94               	decfsz	(??_ativar^(0+384)+1),f
  2992  0AD5  2AD2               	goto	u4487
  2993  0AD6  0B95               	decfsz	(??_ativar^(0+384)+2),f
  2994  0AD7  2AD2               	goto	u4487
  2995  0AD8  2AD9               	nop2
  2996                           
  2997                           ;main.c: 307: ADCRead(1);
  2998  0AD9  3001               	movlw	1
  2999  0ADA  1683               	bsf	3,5	;RP0=1, select bank3
  3000  0ADB  1703               	bsf	3,6	;RP1=1, select bank3
  3001  0ADC  0090               	movwf	ADCRead@ch^(0+384)
  3002  0ADD  3000               	movlw	0
  3003  0ADE  0091               	movwf	(ADCRead@ch^(0+384)+1)
  3004  0ADF  160A  118A  2724  120A  158A  	fcall	_ADCRead
  3005                           
  3006                           ;main.c: 308: _delay((unsigned long)((300)*(20000000/4000.0)));
  3007  0AE4  3008               	movlw	8
  3008  0AE5  1683               	bsf	3,5	;RP0=1, select bank3
  3009  0AE6  1703               	bsf	3,6	;RP1=1, select bank3
  3010  0AE7  0095               	movwf	(??_ativar^(0+384)+2)
  3011  0AE8  309D               	movlw	157
  3012  0AE9  0094               	movwf	(??_ativar^(0+384)+1)
  3013  0AEA  300B               	movlw	11
  3014  0AEB  0093               	movwf	??_ativar^(0+384)
  3015  0AEC                     u4497:	
  3016  0AEC  0B93               	decfsz	??_ativar^(0+384),f
  3017  0AED  2AEC               	goto	u4497
  3018  0AEE  0B94               	decfsz	(??_ativar^(0+384)+1),f
  3019  0AEF  2AEC               	goto	u4497
  3020  0AF0  0B95               	decfsz	(??_ativar^(0+384)+2),f
  3021  0AF1  2AEC               	goto	u4497
  3022  0AF2  2AF3               	nop2
  3023  0AF3  0008               	return
  3024  0AF4                     __end_of_ativar:	
  3025                           
  3026                           	psect	text13
  3027  1724                     __ptext13:	
  3028 ;; *************** function _ADCRead *****************
  3029 ;; Defined at:
  3030 ;;		line 140 in file "main.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  ch              2    0[BANK3 ] int 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, status,0
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3044 ;;      Params:         0       0       0       2       0
  3045 ;;      Locals:         0       0       0       0       0
  3046 ;;      Temps:          0       0       0       1       0
  3047 ;;      Totals:         0       0       0       3       0
  3048 ;;Total ram usage:        3 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    6
  3051 ;; This function calls:
  3052 ;;		Nothing
  3053 ;; This function is called by:
  3054 ;;		_ativar
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           
  3059                           ;psect for function _ADCRead
  3060  1724                     _ADCRead:	
  3061                           
  3062                           ;main.c: 144: ADCON0bits.CHS = ch;
  3063                           
  3064                           ;incstack = 0
  3065                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  3066  1724  1683               	bsf	3,5	;RP0=1, select bank3
  3067  1725  1703               	bsf	3,6	;RP1=1, select bank3
  3068  1726  0810               	movf	ADCRead@ch^(0+384),w
  3069  1727  0092               	movwf	??_ADCRead^(0+384)
  3070  1728  0D92               	rlf	??_ADCRead^(0+384),f
  3071  1729  0D92               	rlf	??_ADCRead^(0+384),f
  3072  172A  0D92               	rlf	??_ADCRead^(0+384),f
  3073  172B  1283               	bcf	3,5	;RP0=0, select bank0
  3074  172C  1303               	bcf	3,6	;RP1=0, select bank0
  3075  172D  081F               	movf	31,w	;volatile
  3076  172E  1683               	bsf	3,5	;RP0=1, select bank3
  3077  172F  1703               	bsf	3,6	;RP1=1, select bank3
  3078  1730  0612               	xorwf	??_ADCRead^(0+384),w
  3079  1731  39C7               	andlw	-57
  3080  1732  0612               	xorwf	??_ADCRead^(0+384),w
  3081  1733  1283               	bcf	3,5	;RP0=0, select bank0
  3082  1734  1303               	bcf	3,6	;RP1=0, select bank0
  3083  1735  009F               	movwf	31	;volatile
  3084                           
  3085                           ;main.c: 147: _delay((unsigned long)((25)*(20000000/4000000.0)));
  3086  1736  3029               	movlw	41
  3087  1737  1683               	bsf	3,5	;RP0=1, select bank3
  3088  1738  1703               	bsf	3,6	;RP1=1, select bank3
  3089  1739  0092               	movwf	??_ADCRead^(0+384)
  3090  173A                     u4507:	
  3091  173A  0B92               	decfsz	??_ADCRead^(0+384),f
  3092  173B  2F3A               	goto	u4507
  3093  173C  0000               	nop
  3094                           
  3095                           ;main.c: 148: ADCON0bits.GO = 1;
  3096  173D  1283               	bcf	3,5	;RP0=0, select bank0
  3097  173E  1303               	bcf	3,6	;RP1=0, select bank0
  3098  173F  151F               	bsf	31,2	;volatile
  3099  1740                     l110:	
  3100                           ;main.c: 149: while (ADCON0bits.GO_DONE);
  3101                           
  3102  1740  1D1F               	btfss	31,2	;volatile
  3103  1741  0008               	return
  3104  1742  2F40               	goto	l110
  3105  1743                     __end_of_ADCRead:	
  3106                           
  3107                           	psect	text14
  3108  004B                     __ptext14:	
  3109 ;; *************** function _ISR *****************
  3110 ;; Defined at:
  3111 ;;		line 157 in file "main.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  aux            16    0[BANK1 ] unsigned char [16]
  3116 ;;  input2          3   32[BANK1 ] float 
  3117 ;;  input           3   29[BANK1 ] float 
  3118 ;;  pre             3   21[BANK1 ] float 
  3119 ;;  i               2   26[BANK1 ] int 
  3120 ;;  preint          2   24[BANK1 ] int 
  3121 ;;  status2         2   19[BANK1 ] int 
  3122 ;;  status          2   17[BANK1 ] int 
  3123 ;;  status3         2    0        int 
  3124 ;;  qtdc            2    0        PTR unsigned char 
  3125 ;;  teste           2    0        PTR unsigned char 
  3126 ;;  per             1   35[BANK1 ] PTR unsigned char 
  3127 ;;		 -> ftoa@buf(17), 
  3128 ;;  result          1   28[BANK1 ] PTR unsigned char 
  3129 ;;		 -> ISR@aux(16), 
  3130 ;;  buf             1   16[BANK1 ] PTR unsigned char 
  3131 ;;		 -> ftoa@buf(17), 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;		None               void
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3141 ;;      Params:         0       0       0       0       0
  3142 ;;      Locals:         0       0      36       0       0
  3143 ;;      Temps:          0       8       0       0       0
  3144 ;;      Totals:         0       8      36       0       0
  3145 ;;Total ram usage:       44 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    5
  3148 ;; This function calls:
  3149 ;;		_USARTReceiveChar
  3150 ;;		_USARTWriteChar
  3151 ;;		_USARTWriteString
  3152 ;;		___awdiv
  3153 ;;		___awmod
  3154 ;;		___awtoft
  3155 ;;		___ftdiv
  3156 ;;		___ftmul
  3157 ;;		___fttol
  3158 ;;		_ftoa
  3159 ;;		i1_lcd_escreve_string
  3160 ;;		i1_lcd_gotoxy
  3161 ;; This function is called by:
  3162 ;;		Interrupt level 1
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _ISR
  3168  004B                     _ISR:	
  3169                           
  3170                           ;main.c: 161: if (PIR1bits.ADIF) {
  3171  004B  1F0C               	btfss	12,6	;volatile
  3172  004C  2AA7               	goto	i1l2846
  3173                           
  3174                           ;main.c: 164: ADCResult = ((ADRESH << 8) + ADRESL);
  3175  004D  081E               	movf	30,w	;volatile
  3176  004E  1683               	bsf	3,5	;RP0=1, select bank1
  3177  004F  1303               	bcf	3,6	;RP1=0, select bank1
  3178  0050  01DC               	clrf	(_ADCResult+1)^(0+128)
  3179  0051  07DC               	addwf	(_ADCResult+1)^(0+128),f
  3180  0052  081E               	movf	30,w	;volatile
  3181  0053  01DB               	clrf	_ADCResult^(0+128)
  3182  0054  07DB               	addwf	_ADCResult^(0+128),f
  3183                           
  3184                           ;main.c: 167: char * buf;
  3185                           ;main.c: 168: char * per;
  3186                           ;main.c: 169: char * teste;
  3187                           ;main.c: 170: char * qtdc;
  3188                           ;main.c: 171: float input;
  3189                           ;main.c: 172: float input2;
  3190                           ;main.c: 173: float pre;
  3191                           ;main.c: 174: int preint;
  3192                           ;main.c: 175: int status;
  3193                           ;main.c: 176: int status2;
  3194                           ;main.c: 177: int status3;
  3195                           ;main.c: 178: int i = 0;
  3196  0055  01BA               	clrf	ISR@i^(0+128)
  3197  0056  01BB               	clrf	(ISR@i+1)^(0+128)
  3198                           
  3199                           ;main.c: 179: unsigned char *result;
  3200                           ;main.c: 180: unsigned char aux[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
      +                           ' ', ' ', ' ', ' ', ' ', ' '};
  3201  0057  30A0               	movlw	ISR@aux& (0+255)
  3202  0058  0084               	movwf	4
  3203  0059  30C4               	movlw	low ISR@F1357
  3204  005A  1283               	bcf	3,5	;RP0=0, select bank0
  3205  005B  1303               	bcf	3,6	;RP1=0, select bank0
  3206  005C  00D2               	movwf	??_ISR
  3207  005D  0804               	movf	4,w
  3208  005E  00D3               	movwf	??_ISR+1
  3209  005F  3010               	movlw	16
  3210  0060  00D4               	movwf	??_ISR+2
  3211  0061                     u363_20:	
  3212  0061  0852               	movf	??_ISR,w
  3213  0062  0084               	movwf	4
  3214  0063  1383               	bcf	3,7	;select IRP bank1
  3215  0064  0800               	movf	0,w
  3216  0065  00D5               	movwf	??_ISR+3
  3217  0066  0AD2               	incf	??_ISR,f
  3218  0067  0853               	movf	??_ISR+1,w
  3219  0068  0084               	movwf	4
  3220  0069  0855               	movf	??_ISR+3,w
  3221  006A  0080               	movwf	0
  3222  006B  0AD3               	incf	??_ISR+1,f
  3223  006C  0BD4               	decfsz	??_ISR+2,f
  3224  006D  2861               	goto	u363_20
  3225                           
  3226                           ;main.c: 182: input = ADCResult * 0.0048828125;
  3227  006E  3000               	movlw	0
  3228  006F  00A0               	movwf	___ftmul@f1
  3229  0070  30A0               	movlw	160
  3230  0071  00A1               	movwf	___ftmul@f1+1
  3231  0072  303B               	movlw	59
  3232  0073  00A2               	movwf	___ftmul@f1+2
  3233  0074  1683               	bsf	3,5	;RP0=1, select bank1
  3234  0075  1303               	bcf	3,6	;RP1=0, select bank1
  3235  0076  085C               	movf	(_ADCResult+1)^(0+128),w
  3236  0077  01F9               	clrf	___awtoft@c+1
  3237  0078  07F9               	addwf	___awtoft@c+1,f
  3238  0079  085B               	movf	_ADCResult^(0+128),w
  3239  007A  01F8               	clrf	___awtoft@c
  3240  007B  07F8               	addwf	___awtoft@c,f
  3241  007C  160A  118A  2743  120A  118A  	fcall	___awtoft
  3242  0081  0878               	movf	?___awtoft,w
  3243  0082  1283               	bcf	3,5	;RP0=0, select bank0
  3244  0083  1303               	bcf	3,6	;RP1=0, select bank0
  3245  0084  00A3               	movwf	___ftmul@f2
  3246  0085  0879               	movf	?___awtoft+1,w
  3247  0086  00A4               	movwf	___ftmul@f2+1
  3248  0087  087A               	movf	?___awtoft+2,w
  3249  0088  00A5               	movwf	___ftmul@f2+2
  3250  0089  120A  118A  26E9  120A  118A  	fcall	___ftmul
  3251  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3252  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3253  0090  0820               	movf	?___ftmul,w
  3254  0091  1683               	bsf	3,5	;RP0=1, select bank1
  3255  0092  1303               	bcf	3,6	;RP1=0, select bank1
  3256  0093  00BD               	movwf	ISR@input^(0+128)
  3257  0094  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0095  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0096  0821               	movf	?___ftmul+1,w
  3260  0097  1683               	bsf	3,5	;RP0=1, select bank1
  3261  0098  1303               	bcf	3,6	;RP1=0, select bank1
  3262  0099  00BE               	movwf	(ISR@input+1)^(0+128)
  3263  009A  1283               	bcf	3,5	;RP0=0, select bank0
  3264  009B  1303               	bcf	3,6	;RP1=0, select bank0
  3265  009C  0822               	movf	?___ftmul+2,w
  3266  009D  1683               	bsf	3,5	;RP0=1, select bank1
  3267  009E  1303               	bcf	3,6	;RP1=0, select bank1
  3268  009F  00BF               	movwf	(ISR@input+2)^(0+128)
  3269                           
  3270                           ;main.c: 183: buf = ftoa(input, &status);
  3271  00A0  083D               	movf	ISR@input^(0+128),w
  3272  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  3273  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  3274  00A3  00C4               	movwf	ftoa@f
  3275  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  3276  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  3277  00A6  083E               	movf	(ISR@input+1)^(0+128),w
  3278  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  3279  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  3280  00A9  00C5               	movwf	ftoa@f+1
  3281  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  3282  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  3283  00AC  083F               	movf	(ISR@input+2)^(0+128),w
  3284  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  3285  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  3286  00AF  00C6               	movwf	ftoa@f+2
  3287  00B0  30B1               	movlw	ISR@status& (0+255)
  3288  00B1  00D2               	movwf	??_ISR
  3289  00B2  0852               	movf	??_ISR,w
  3290  00B3  00C7               	movwf	ftoa@status
  3291  00B4  120A  158A  2746  120A  118A  	fcall	_ftoa
  3292  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  3293  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  3294  00BB  00D3               	movwf	??_ISR+1
  3295  00BC  0853               	movf	??_ISR+1,w
  3296  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  3297  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  3298  00BF  00B0               	movwf	ISR@buf^(0+128)
  3299                           
  3300                           ;main.c: 187: Display[0] = (ADCResult / 1000) + 48;
  3301  00C0  30E8               	movlw	232
  3302  00C1  00F0               	movwf	___awdiv@divisor
  3303  00C2  3003               	movlw	3
  3304  00C3  00F1               	movwf	___awdiv@divisor+1
  3305  00C4  085C               	movf	(_ADCResult+1)^(0+128),w
  3306  00C5  01F3               	clrf	___awdiv@dividend+1
  3307  00C6  07F3               	addwf	___awdiv@dividend+1,f
  3308  00C7  085B               	movf	_ADCResult^(0+128),w
  3309  00C8  01F2               	clrf	___awdiv@dividend
  3310  00C9  07F2               	addwf	___awdiv@dividend,f
  3311  00CA  120A  158A  223D  120A  118A  	fcall	___awdiv
  3312  00CF  0870               	movf	?___awdiv,w
  3313  00D0  3E30               	addlw	48
  3314  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3315  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3316  00D3  00D2               	movwf	??_ISR
  3317  00D4  0852               	movf	??_ISR,w
  3318  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  3319  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  3320  00D7  00D4               	movwf	_Display^(0+128)
  3321                           
  3322                           ;main.c: 188: Display[1] = ((ADCResult / 100) % 10) + 48;
  3323  00D8  300A               	movlw	10
  3324  00D9  00F9               	movwf	___awmod@divisor
  3325  00DA  3000               	movlw	0
  3326  00DB  00FA               	movwf	___awmod@divisor+1
  3327  00DC  3064               	movlw	100
  3328  00DD  00F0               	movwf	___awdiv@divisor
  3329  00DE  3000               	movlw	0
  3330  00DF  00F1               	movwf	___awdiv@divisor+1
  3331  00E0  085C               	movf	(_ADCResult+1)^(0+128),w
  3332  00E1  01F3               	clrf	___awdiv@dividend+1
  3333  00E2  07F3               	addwf	___awdiv@dividend+1,f
  3334  00E3  085B               	movf	_ADCResult^(0+128),w
  3335  00E4  01F2               	clrf	___awdiv@dividend
  3336  00E5  07F2               	addwf	___awdiv@dividend,f
  3337  00E6  120A  158A  223D  120A  118A  	fcall	___awdiv
  3338  00EB  0871               	movf	?___awdiv+1,w
  3339  00EC  01FC               	clrf	___awmod@dividend+1
  3340  00ED  07FC               	addwf	___awmod@dividend+1,f
  3341  00EE  0870               	movf	?___awdiv,w
  3342  00EF  01FB               	clrf	___awmod@dividend
  3343  00F0  07FB               	addwf	___awmod@dividend,f
  3344  00F1  120A  158A  2195  120A  118A  	fcall	___awmod
  3345  00F6  0879               	movf	?___awmod,w
  3346  00F7  3E30               	addlw	48
  3347  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  3348  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  3349  00FA  00D2               	movwf	??_ISR
  3350  00FB  0852               	movf	??_ISR,w
  3351  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  3352  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  3353  00FE  00D5               	movwf	(_Display^(0+128)+1)
  3354                           
  3355                           ;main.c: 189: Display[2] = ((ADCResult / 10) % 10) + 48;
  3356  00FF  300A               	movlw	10
  3357  0100  00F9               	movwf	___awmod@divisor
  3358  0101  3000               	movlw	0
  3359  0102  00FA               	movwf	___awmod@divisor+1
  3360  0103  300A               	movlw	10
  3361  0104  00F0               	movwf	___awdiv@divisor
  3362  0105  3000               	movlw	0
  3363  0106  00F1               	movwf	___awdiv@divisor+1
  3364  0107  085C               	movf	(_ADCResult+1)^(0+128),w
  3365  0108  01F3               	clrf	___awdiv@dividend+1
  3366  0109  07F3               	addwf	___awdiv@dividend+1,f
  3367  010A  085B               	movf	_ADCResult^(0+128),w
  3368  010B  01F2               	clrf	___awdiv@dividend
  3369  010C  07F2               	addwf	___awdiv@dividend,f
  3370  010D  120A  158A  223D  120A  118A  	fcall	___awdiv
  3371  0112  0871               	movf	?___awdiv+1,w
  3372  0113  01FC               	clrf	___awmod@dividend+1
  3373  0114  07FC               	addwf	___awmod@dividend+1,f
  3374  0115  0870               	movf	?___awdiv,w
  3375  0116  01FB               	clrf	___awmod@dividend
  3376  0117  07FB               	addwf	___awmod@dividend,f
  3377  0118  120A  158A  2195  120A  118A  	fcall	___awmod
  3378  011D  0879               	movf	?___awmod,w
  3379  011E  3E30               	addlw	48
  3380  011F  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0120  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0121  00D2               	movwf	??_ISR
  3383  0122  0852               	movf	??_ISR,w
  3384  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3385  0124  1303               	bcf	3,6	;RP1=0, select bank1
  3386  0125  00D6               	movwf	(_Display^(0+128)+2)
  3387                           
  3388                           ;main.c: 190: Display[3] = (ADCResult % 10) + 48;
  3389  0126  300A               	movlw	10
  3390  0127  00F9               	movwf	___awmod@divisor
  3391  0128  3000               	movlw	0
  3392  0129  00FA               	movwf	___awmod@divisor+1
  3393  012A  085C               	movf	(_ADCResult+1)^(0+128),w
  3394  012B  01FC               	clrf	___awmod@dividend+1
  3395  012C  07FC               	addwf	___awmod@dividend+1,f
  3396  012D  085B               	movf	_ADCResult^(0+128),w
  3397  012E  01FB               	clrf	___awmod@dividend
  3398  012F  07FB               	addwf	___awmod@dividend,f
  3399  0130  120A  158A  2195  120A  118A  	fcall	___awmod
  3400  0135  0879               	movf	?___awmod,w
  3401  0136  3E30               	addlw	48
  3402  0137  1283               	bcf	3,5	;RP0=0, select bank0
  3403  0138  1303               	bcf	3,6	;RP1=0, select bank0
  3404  0139  00D2               	movwf	??_ISR
  3405  013A  0852               	movf	??_ISR,w
  3406  013B  1683               	bsf	3,5	;RP0=1, select bank1
  3407  013C  1303               	bcf	3,6	;RP1=0, select bank1
  3408  013D  00D7               	movwf	(_Display^(0+128)+3)
  3409                           
  3410                           ;main.c: 195: lcd_gotoxy(0, 1);
  3411  013E  01F5               	clrf	i1lcd_gotoxy@y
  3412  013F  0AF5               	incf	i1lcd_gotoxy@y,f
  3413  0140  3000               	movlw	0
  3414  0141  160A  118A  26B7  120A  118A  	fcall	i1_lcd_gotoxy
  3415                           
  3416                           ;main.c: 196: lcd_escreve_string("Nivel:");
  3417  0146  30B9               	movlw	low (STR_2-__stringbase)
  3418  0147  00FC               	movwf	i1lcd_escreve_string@y
  3419  0148  3080               	movlw	128
  3420  0149  00FD               	movwf	i1lcd_escreve_string@y+1
  3421  014A  120A  158A  2003  120A  118A  	fcall	i1_lcd_escreve_string
  3422                           
  3423                           ;main.c: 197: lcd_gotoxy(7, 1);
  3424  014F  01F5               	clrf	i1lcd_gotoxy@y
  3425  0150  0AF5               	incf	i1lcd_gotoxy@y,f
  3426  0151  3007               	movlw	7
  3427  0152  160A  118A  26B7  120A  118A  	fcall	i1_lcd_gotoxy
  3428                           
  3429                           ;main.c: 198: input2 = ((input * 100) / 1);
  3430  0157  3000               	movlw	0
  3431  0158  1283               	bcf	3,5	;RP0=0, select bank0
  3432  0159  1303               	bcf	3,6	;RP1=0, select bank0
  3433  015A  00B0               	movwf	___ftdiv@f2
  3434  015B  3080               	movlw	128
  3435  015C  00B1               	movwf	___ftdiv@f2+1
  3436  015D  303F               	movlw	63
  3437  015E  00B2               	movwf	___ftdiv@f2+2
  3438  015F  3000               	movlw	0
  3439  0160  00A0               	movwf	___ftmul@f1
  3440  0161  30C8               	movlw	200
  3441  0162  00A1               	movwf	___ftmul@f1+1
  3442  0163  3042               	movlw	66
  3443  0164  00A2               	movwf	___ftmul@f1+2
  3444  0165  1683               	bsf	3,5	;RP0=1, select bank1
  3445  0166  1303               	bcf	3,6	;RP1=0, select bank1
  3446  0167  083D               	movf	ISR@input^(0+128),w
  3447  0168  1283               	bcf	3,5	;RP0=0, select bank0
  3448  0169  1303               	bcf	3,6	;RP1=0, select bank0
  3449  016A  00A3               	movwf	___ftmul@f2
  3450  016B  1683               	bsf	3,5	;RP0=1, select bank1
  3451  016C  1303               	bcf	3,6	;RP1=0, select bank1
  3452  016D  083E               	movf	(ISR@input+1)^(0+128),w
  3453  016E  1283               	bcf	3,5	;RP0=0, select bank0
  3454  016F  1303               	bcf	3,6	;RP1=0, select bank0
  3455  0170  00A4               	movwf	___ftmul@f2+1
  3456  0171  1683               	bsf	3,5	;RP0=1, select bank1
  3457  0172  1303               	bcf	3,6	;RP1=0, select bank1
  3458  0173  083F               	movf	(ISR@input+2)^(0+128),w
  3459  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0176  00A5               	movwf	___ftmul@f2+2
  3462  0177  120A  118A  26E9  120A  118A  	fcall	___ftmul
  3463  017C  1283               	bcf	3,5	;RP0=0, select bank0
  3464  017D  1303               	bcf	3,6	;RP1=0, select bank0
  3465  017E  0820               	movf	?___ftmul,w
  3466  017F  00B3               	movwf	___ftdiv@f1
  3467  0180  0821               	movf	?___ftmul+1,w
  3468  0181  00B4               	movwf	___ftdiv@f1+1
  3469  0182  0822               	movf	?___ftmul+2,w
  3470  0183  00B5               	movwf	___ftdiv@f1+2
  3471  0184  120A  158A  268E  120A  118A  	fcall	___ftdiv
  3472  0189  1283               	bcf	3,5	;RP0=0, select bank0
  3473  018A  1303               	bcf	3,6	;RP1=0, select bank0
  3474  018B  0830               	movf	?___ftdiv,w
  3475  018C  1683               	bsf	3,5	;RP0=1, select bank1
  3476  018D  1303               	bcf	3,6	;RP1=0, select bank1
  3477  018E  00C0               	movwf	ISR@input2^(0+128)
  3478  018F  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0190  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0191  0831               	movf	?___ftdiv+1,w
  3481  0192  1683               	bsf	3,5	;RP0=1, select bank1
  3482  0193  1303               	bcf	3,6	;RP1=0, select bank1
  3483  0194  00C1               	movwf	(ISR@input2+1)^(0+128)
  3484  0195  1283               	bcf	3,5	;RP0=0, select bank0
  3485  0196  1303               	bcf	3,6	;RP1=0, select bank0
  3486  0197  0832               	movf	?___ftdiv+2,w
  3487  0198  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0199  1303               	bcf	3,6	;RP1=0, select bank1
  3489  019A  00C2               	movwf	(ISR@input2+2)^(0+128)
  3490                           
  3491                           ;main.c: 199: per = ftoa(input2, &status2);
  3492  019B  0840               	movf	ISR@input2^(0+128),w
  3493  019C  1283               	bcf	3,5	;RP0=0, select bank0
  3494  019D  1303               	bcf	3,6	;RP1=0, select bank0
  3495  019E  00C4               	movwf	ftoa@f
  3496  019F  1683               	bsf	3,5	;RP0=1, select bank1
  3497  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  3498  01A1  0841               	movf	(ISR@input2+1)^(0+128),w
  3499  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3500  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3501  01A4  00C5               	movwf	ftoa@f+1
  3502  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  3503  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  3504  01A7  0842               	movf	(ISR@input2+2)^(0+128),w
  3505  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  3506  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  3507  01AA  00C6               	movwf	ftoa@f+2
  3508  01AB  30B3               	movlw	ISR@status2& (0+255)
  3509  01AC  00D2               	movwf	??_ISR
  3510  01AD  0852               	movf	??_ISR,w
  3511  01AE  00C7               	movwf	ftoa@status
  3512  01AF  120A  158A  2746  120A  118A  	fcall	_ftoa
  3513  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  3514  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  3515  01B6  00D3               	movwf	??_ISR+1
  3516  01B7  0853               	movf	??_ISR+1,w
  3517  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  3518  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  3519  01BA  00C3               	movwf	ISR@per^(0+128)
  3520                           
  3521                           ;main.c: 200: lcd_escreve_string(per);
  3522  01BB  0843               	movf	ISR@per^(0+128),w
  3523  01BC  00FC               	movwf	i1lcd_escreve_string@y
  3524  01BD  3001               	movlw	1
  3525  01BE  00FD               	movwf	i1lcd_escreve_string@y+1
  3526  01BF  120A  158A  2003  120A  118A  	fcall	i1_lcd_escreve_string
  3527                           
  3528                           ;main.c: 201: USARTWriteString("\rS");
  3529  01C4  30C0               	movlw	low (STR_3-__stringbase)
  3530  01C5  00F1               	movwf	USARTWriteString@str
  3531  01C6  3080               	movlw	128
  3532  01C7  00F2               	movwf	USARTWriteString@str+1
  3533  01C8  160A  118A  2764  120A  118A  	fcall	_USARTWriteString
  3534                           
  3535                           ;main.c: 202: USARTWriteString(per);
  3536  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  3537  01CE  1303               	bcf	3,6	;RP1=0, select bank1
  3538  01CF  0843               	movf	ISR@per^(0+128),w
  3539  01D0  00F1               	movwf	USARTWriteString@str
  3540  01D1  3001               	movlw	1
  3541  01D2  00F2               	movwf	USARTWriteString@str+1
  3542  01D3  160A  118A  2764  120A  118A  	fcall	_USARTWriteString
  3543                           
  3544                           ;main.c: 204: lcd_gotoxy(16, 1);
  3545  01D8  01F5               	clrf	i1lcd_gotoxy@y
  3546  01D9  0AF5               	incf	i1lcd_gotoxy@y,f
  3547  01DA  3010               	movlw	16
  3548  01DB  160A  118A  26B7  120A  118A  	fcall	i1_lcd_gotoxy
  3549                           
  3550                           ;main.c: 205: lcd_escreve_string("%");
  3551  01E0  30C3               	movlw	low (STR_4-__stringbase)
  3552  01E1  00FC               	movwf	i1lcd_escreve_string@y
  3553  01E2  3080               	movlw	128
  3554  01E3  00FD               	movwf	i1lcd_escreve_string@y+1
  3555  01E4  120A  158A  2003  120A  118A  	fcall	i1_lcd_escreve_string
  3556                           
  3557                           ;main.c: 206: lcd_gotoxy(0, 0);
  3558  01E9  01F5               	clrf	i1lcd_gotoxy@y
  3559  01EA  3000               	movlw	0
  3560  01EB  160A  118A  26B7  120A  118A  	fcall	i1_lcd_gotoxy
  3561                           
  3562                           ;main.c: 207: pre = input2 * 0.16;
  3563  01F0  30D7               	movlw	215
  3564  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3565  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3566  01F3  00A0               	movwf	___ftmul@f1
  3567  01F4  3023               	movlw	35
  3568  01F5  00A1               	movwf	___ftmul@f1+1
  3569  01F6  303E               	movlw	62
  3570  01F7  00A2               	movwf	___ftmul@f1+2
  3571  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  3572  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  3573  01FA  0840               	movf	ISR@input2^(0+128),w
  3574  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3575  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  3576  01FD  00A3               	movwf	___ftmul@f2
  3577  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  3578  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  3579  0200  0841               	movf	(ISR@input2+1)^(0+128),w
  3580  0201  1283               	bcf	3,5	;RP0=0, select bank0
  3581  0202  1303               	bcf	3,6	;RP1=0, select bank0
  3582  0203  00A4               	movwf	___ftmul@f2+1
  3583  0204  1683               	bsf	3,5	;RP0=1, select bank1
  3584  0205  1303               	bcf	3,6	;RP1=0, select bank1
  3585  0206  0842               	movf	(ISR@input2+2)^(0+128),w
  3586  0207  1283               	bcf	3,5	;RP0=0, select bank0
  3587  0208  1303               	bcf	3,6	;RP1=0, select bank0
  3588  0209  00A5               	movwf	___ftmul@f2+2
  3589  020A  120A  118A  26E9  120A  118A  	fcall	___ftmul
  3590  020F  1283               	bcf	3,5	;RP0=0, select bank0
  3591  0210  1303               	bcf	3,6	;RP1=0, select bank0
  3592  0211  0820               	movf	?___ftmul,w
  3593  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3594  0213  1303               	bcf	3,6	;RP1=0, select bank1
  3595  0214  00B5               	movwf	ISR@pre^(0+128)
  3596  0215  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0216  1303               	bcf	3,6	;RP1=0, select bank0
  3598  0217  0821               	movf	?___ftmul+1,w
  3599  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3600  0219  1303               	bcf	3,6	;RP1=0, select bank1
  3601  021A  00B6               	movwf	(ISR@pre+1)^(0+128)
  3602  021B  1283               	bcf	3,5	;RP0=0, select bank0
  3603  021C  1303               	bcf	3,6	;RP1=0, select bank0
  3604  021D  0822               	movf	?___ftmul+2,w
  3605  021E  1683               	bsf	3,5	;RP0=1, select bank1
  3606  021F  1303               	bcf	3,6	;RP1=0, select bank1
  3607  0220  00B7               	movwf	(ISR@pre+2)^(0+128)
  3608                           
  3609                           ;main.c: 208: preint = (int) pre;
  3610  0221  0835               	movf	ISR@pre^(0+128),w
  3611  0222  1283               	bcf	3,5	;RP0=0, select bank0
  3612  0223  1303               	bcf	3,6	;RP1=0, select bank0
  3613  0224  00B0               	movwf	___fttol@f1
  3614  0225  1683               	bsf	3,5	;RP0=1, select bank1
  3615  0226  1303               	bcf	3,6	;RP1=0, select bank1
  3616  0227  0836               	movf	(ISR@pre+1)^(0+128),w
  3617  0228  1283               	bcf	3,5	;RP0=0, select bank0
  3618  0229  1303               	bcf	3,6	;RP1=0, select bank0
  3619  022A  00B1               	movwf	___fttol@f1+1
  3620  022B  1683               	bsf	3,5	;RP0=1, select bank1
  3621  022C  1303               	bcf	3,6	;RP1=0, select bank1
  3622  022D  0837               	movf	(ISR@pre+2)^(0+128),w
  3623  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3624  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3625  0230  00B2               	movwf	___fttol@f1+2
  3626  0231  120A  158A  2571  120A  118A  	fcall	___fttol
  3627  0236  1283               	bcf	3,5	;RP0=0, select bank0
  3628  0237  1303               	bcf	3,6	;RP1=0, select bank0
  3629  0238  0831               	movf	?___fttol+1,w
  3630  0239  1683               	bsf	3,5	;RP0=1, select bank1
  3631  023A  1303               	bcf	3,6	;RP1=0, select bank1
  3632  023B  01B9               	clrf	(ISR@preint+1)^(0+128)
  3633  023C  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3634  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3635  023E  1303               	bcf	3,6	;RP1=0, select bank0
  3636  023F  0830               	movf	?___fttol,w
  3637  0240  1683               	bsf	3,5	;RP0=1, select bank1
  3638  0241  1303               	bcf	3,6	;RP1=0, select bank1
  3639  0242  01B8               	clrf	ISR@preint^(0+128)
  3640  0243  07B8               	addwf	ISR@preint^(0+128),f
  3641                           
  3642                           ;main.c: 211: if (ADCResult < 200) {
  3643  0244  085C               	movf	(_ADCResult+1)^(0+128),w
  3644  0245  3A80               	xorlw	128
  3645  0246  00FF               	movwf	127
  3646  0247  3080               	movlw	128
  3647  0248  027F               	subwf	127,w
  3648  0249  1D03               	skipz
  3649  024A  2A4D               	goto	u364_25
  3650  024B  30C8               	movlw	200
  3651  024C  025B               	subwf	_ADCResult^(0+128),w
  3652  024D                     u364_25:	
  3653  024D  1803               	skipnc
  3654  024E  2A53               	goto	i1l2826
  3655                           
  3656                           ;main.c: 212: PORTDbits.RD2 = 0;
  3657  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3658  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3659  0251  1108               	bcf	8,2	;volatile
  3660                           
  3661                           ;main.c: 213: PORTDbits.RD3 = 1;
  3662  0252  1588               	bsf	8,3	;volatile
  3663  0253                     i1l2826:	
  3664                           
  3665                           ;main.c: 214: }
  3666                           ;main.c: 216: if (ADCResult > 200) {
  3667  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3668  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3669  0255  085C               	movf	(_ADCResult+1)^(0+128),w
  3670  0256  3A80               	xorlw	128
  3671  0257  00FF               	movwf	127
  3672  0258  3080               	movlw	128
  3673  0259  027F               	subwf	127,w
  3674  025A  1D03               	skipz
  3675  025B  2A5E               	goto	u365_25
  3676  025C  30C9               	movlw	201
  3677  025D  025B               	subwf	_ADCResult^(0+128),w
  3678  025E                     u365_25:	
  3679  025E  1C03               	skipc
  3680  025F  2A64               	goto	i1l2836
  3681                           
  3682                           ;main.c: 217: PORTDbits.RD2 = 1;
  3683  0260  1283               	bcf	3,5	;RP0=0, select bank0
  3684  0261  1303               	bcf	3,6	;RP1=0, select bank0
  3685  0262  1508               	bsf	8,2	;volatile
  3686                           
  3687                           ;main.c: 218: PORTDbits.RD3 = 0;
  3688  0263  1188               	bcf	8,3	;volatile
  3689  0264                     i1l2836:	
  3690                           ;main.c: 219: }
  3691                           ;main.c: 222: while (preint >= 0) {
  3692                           
  3693  0264  1683               	bsf	3,5	;RP0=1, select bank1
  3694  0265  1303               	bcf	3,6	;RP1=0, select bank1
  3695  0266  1BB9               	btfsc	(ISR@preint+1)^(0+128),7
  3696  0267  2A84               	goto	i1l2838
  3697                           
  3698                           ;main.c: 223: aux[i] = 0xFF;
  3699  0268  30FF               	movlw	255
  3700  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3701  026A  00D2               	movwf	??_ISR
  3702  026B  1683               	bsf	3,5	;RP0=1, select bank1
  3703  026C  1303               	bcf	3,6	;RP1=0, select bank1
  3704  026D  083A               	movf	ISR@i^(0+128),w
  3705  026E  3EA0               	addlw	ISR@aux& (0+255)
  3706  026F  0084               	movwf	4
  3707  0270  1283               	bcf	3,5	;RP0=0, select bank0
  3708  0271  1303               	bcf	3,6	;RP1=0, select bank0
  3709  0272  0852               	movf	??_ISR,w
  3710  0273  1383               	bcf	3,7	;select IRP bank1
  3711  0274  0080               	movwf	0
  3712                           
  3713                           ;main.c: 224: preint--;
  3714  0275  30FF               	movlw	255
  3715  0276  1683               	bsf	3,5	;RP0=1, select bank1
  3716  0277  1303               	bcf	3,6	;RP1=0, select bank1
  3717  0278  07B8               	addwf	ISR@preint^(0+128),f
  3718  0279  1803               	skipnc
  3719  027A  0AB9               	incf	(ISR@preint+1)^(0+128),f
  3720  027B  30FF               	movlw	255
  3721  027C  07B9               	addwf	(ISR@preint+1)^(0+128),f
  3722                           
  3723                           ;main.c: 225: i++;
  3724  027D  3001               	movlw	1
  3725  027E  07BA               	addwf	ISR@i^(0+128),f
  3726  027F  1803               	skipnc
  3727  0280  0ABB               	incf	(ISR@i+1)^(0+128),f
  3728  0281  3000               	movlw	0
  3729  0282  07BB               	addwf	(ISR@i+1)^(0+128),f
  3730  0283  2A64               	goto	i1l2836
  3731  0284                     i1l2838:	
  3732                           
  3733                           ;main.c: 226: }
  3734                           ;main.c: 227: result = &aux;
  3735  0284  30A0               	movlw	ISR@aux& (0+255)
  3736  0285  1283               	bcf	3,5	;RP0=0, select bank0
  3737  0286  1303               	bcf	3,6	;RP1=0, select bank0
  3738  0287  00D2               	movwf	??_ISR
  3739  0288  0852               	movf	??_ISR,w
  3740  0289  1683               	bsf	3,5	;RP0=1, select bank1
  3741  028A  1303               	bcf	3,6	;RP1=0, select bank1
  3742  028B  00BC               	movwf	ISR@result^(0+128)
  3743                           
  3744                           ;main.c: 229: lcd_escreve_string(result);
  3745  028C  083C               	movf	ISR@result^(0+128),w
  3746  028D  00FC               	movwf	i1lcd_escreve_string@y
  3747  028E  3000               	movlw	0
  3748  028F  00FD               	movwf	i1lcd_escreve_string@y+1
  3749  0290  120A  158A  2003  120A  118A  	fcall	i1_lcd_escreve_string
  3750                           
  3751                           ;main.c: 252: _delay((unsigned long)((200)*(20000000/4000.0)));
  3752  0295  3006               	movlw	6
  3753  0296  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0297  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0298  00D4               	movwf	??_ISR+2
  3756  0299  3013               	movlw	19
  3757  029A  00D3               	movwf	??_ISR+1
  3758  029B  30B1               	movlw	177
  3759  029C  00D2               	movwf	??_ISR
  3760  029D                     u451_27:	
  3761  029D  0BD2               	decfsz	??_ISR,f
  3762  029E  2A9D               	goto	u451_27
  3763  029F  0BD3               	decfsz	??_ISR+1,f
  3764  02A0  2A9D               	goto	u451_27
  3765  02A1  0BD4               	decfsz	??_ISR+2,f
  3766  02A2  2A9D               	goto	u451_27
  3767  02A3  2AA4               	nop2
  3768                           
  3769                           ;main.c: 254: PIR1bits.ADIF = 0;
  3770  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3771  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3772  02A6  130C               	bcf	12,6	;volatile
  3773  02A7                     i1l2846:	
  3774                           
  3775                           ;main.c: 255: }
  3776                           ;main.c: 257: if (PIR1bits.RCIF) {
  3777  02A7  1E8C               	btfss	12,5	;volatile
  3778  02A8  2AC5               	goto	i1l125
  3779                           
  3780                           ;main.c: 258: USARTWriteString("\n\r Entrou na funcao de Interrupcao da USART");
  3781  02A9  3033               	movlw	low (STR_5-__stringbase)
  3782  02AA  00F1               	movwf	USARTWriteString@str
  3783  02AB  3080               	movlw	128
  3784  02AC  00F2               	movwf	USARTWriteString@str+1
  3785  02AD  160A  118A  2764  120A  118A  	fcall	_USARTWriteString
  3786                           
  3787                           ;main.c: 259: USARTWriteString("\n\r Caracter Digitado :");
  3788  02B2  3087               	movlw	low (STR_6-__stringbase)
  3789  02B3  00F1               	movwf	USARTWriteString@str
  3790  02B4  3080               	movlw	128
  3791  02B5  00F2               	movwf	USARTWriteString@str+1
  3792  02B6  160A  118A  2764  120A  118A  	fcall	_USARTWriteString
  3793                           
  3794                           ;main.c: 260: USARTWriteChar(USARTReceiveChar());
  3795  02BB  160A  118A  26D1  120A  118A  	fcall	_USARTReceiveChar
  3796  02C0  160A  118A  2652  120A  118A  	fcall	_USARTWriteChar
  3797  02C5                     i1l125:	
  3798  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  3799  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  3800  02C7  0859               	movf	??_ISR+7,w
  3801  02C8  00FF               	movwf	127
  3802  02C9  0858               	movf	??_ISR+6,w
  3803  02CA  008A               	movwf	10
  3804  02CB  0857               	movf	??_ISR+5,w
  3805  02CC  0084               	movwf	4
  3806  02CD  0E56               	swapf	(??_ISR+4)^0,w
  3807  02CE  0083               	movwf	3
  3808  02CF  0EFE               	swapf	126,f
  3809  02D0  0E7E               	swapf	126,w
  3810  02D1  0009               	retfie
  3811  02D2                     __end_of_ISR:	
  3812                           
  3813                           	psect	intentry
  3814  0004                     __pintentry:	
  3815                           ;incstack = 0
  3816 ;; hardware stack exceeded
  3817                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3818                           
  3819  0004                     interrupt_function:	
  3820  007E                     saved_w	set	btemp
  3821  0004  00FE               	movwf	btemp
  3822  0005  0E03               	swapf	3,w
  3823  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3824  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3825  0008  00D6               	movwf	??_ISR+4
  3826  0009  0804               	movf	4,w
  3827  000A  00D7               	movwf	??_ISR+5
  3828  000B  080A               	movf	10,w
  3829  000C  00D8               	movwf	??_ISR+6
  3830  000D  087F               	movf	btemp+1,w
  3831  000E  00D9               	movwf	??_ISR+7
  3832  000F  120A  118A  284B   	ljmp	_ISR
  3833                           
  3834                           	psect	text15
  3835  0803                     __ptext15:	
  3836 ;; *************** function i1_lcd_escreve_string *****************
  3837 ;; Defined at:
  3838 ;;		line 168 in file "lcd_4bit.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  y               2   12[COMMON] PTR const unsigned char 
  3841 ;;		 -> ftoa@buf(17), STR_7(16), STR_4(2), STR_2(7), 
  3842 ;;		 -> ISR@aux(16), 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;		None               void
  3847 ;; Registers used:
  3848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3854 ;;      Params:         2       0       0       0       0
  3855 ;;      Locals:         0       0       0       0       0
  3856 ;;      Temps:          0       0       0       0       0
  3857 ;;      Totals:         2       0       0       0       0
  3858 ;;Total ram usage:        2 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    4
  3861 ;; This function calls:
  3862 ;;		i1_lcd_putc
  3863 ;; This function is called by:
  3864 ;;		_ISR
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function i1_lcd_escreve_string
  3870  0803                     i1_lcd_escreve_string:	
  3871  0803                     i1l2774:	
  3872                           ;lcd_4bit.c: 170: while(*y!='\0')
  3873                           
  3874                           ;incstack = 0
  3875 ;; hardware stack exceeded
  3876                           ; Regs used in i1_lcd_escreve_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3877                           
  3878  0803  087D               	movf	i1lcd_escreve_string@y+1,w
  3879  0804  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0805  1303               	bcf	3,6	;RP1=0, select bank0
  3881  0806  00FF               	movwf	127
  3882  0807  087C               	movf	i1lcd_escreve_string@y,w
  3883  0808  0084               	movwf	4
  3884  0809  120A  118A  2615  120A  158A  	fcall	stringtab
  3885  080E  3800               	iorlw	0
  3886  080F  1903               	btfsc	3,2
  3887  0810  0008               	return
  3888                           
  3889                           ;lcd_4bit.c: 171: {
  3890                           ;lcd_4bit.c: 172: lcd_putc(*y);
  3891  0811  087D               	movf	i1lcd_escreve_string@y+1,w
  3892  0812  1283               	bcf	3,5	;RP0=0, select bank0
  3893  0813  1303               	bcf	3,6	;RP1=0, select bank0
  3894  0814  00FF               	movwf	127
  3895  0815  087C               	movf	i1lcd_escreve_string@y,w
  3896  0816  0084               	movwf	4
  3897  0817  120A  118A  2615  120A  158A  	fcall	stringtab
  3898  081C  120A  158A  20C5  120A  158A  	fcall	i1_lcd_putc
  3899                           
  3900                           ;lcd_4bit.c: 173: y++;
  3901  0821  3001               	movlw	1
  3902  0822  07FC               	addwf	i1lcd_escreve_string@y,f
  3903  0823  1803               	skipnc
  3904  0824  0AFD               	incf	i1lcd_escreve_string@y+1,f
  3905  0825  2803               	goto	i1l2774
  3906  0826                     __end_ofi1_lcd_escreve_string:	
  3907                           
  3908                           	psect	text16
  3909  08C5                     __ptext16:	
  3910 ;; *************** function i1_lcd_putc *****************
  3911 ;; Defined at:
  3912 ;;		line 82 in file "lcd_4bit.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  c               1    wreg     unsigned char 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  c               1   11[COMMON] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         0       0       0       0       0
  3927 ;;      Locals:         1       0       0       0       0
  3928 ;;      Temps:          2       0       0       0       0
  3929 ;;      Totals:         3       0       0       0       0
  3930 ;;Total ram usage:        3 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    3
  3933 ;; This function calls:
  3934 ;;		i1_lcd_envia_byte
  3935 ;;		i1_lcd_gotoxy
  3936 ;; This function is called by:
  3937 ;;		i1_lcd_escreve_string
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function i1_lcd_putc
  3943  08C5                     i1_lcd_putc:	
  3944                           
  3945                           ;incstack = 0
  3946 ;; hardware stack exceeded
  3947                           ; Regs used in i1_lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3948                           ;i1lcd_putc@c stored from wreg
  3949  08C5  00FB               	movwf	i1lcd_putc@c
  3950                           
  3951                           ;lcd_4bit.c: 84: switch(c)
  3952  08C6  28F4               	goto	i1l2526
  3953  08C7                     i1l2514:	
  3954                           ;lcd_4bit.c: 85: {
  3955                           ;lcd_4bit.c: 86: case '\f':
  3956                           
  3957                           
  3958                           ;lcd_4bit.c: 87: lcd_envia_byte(0,1);
  3959  08C7  01F2               	clrf	i1lcd_envia_byte@n
  3960  08C8  0AF2               	incf	i1lcd_envia_byte@n,f
  3961  08C9  3000               	movlw	0
  3962  08CA  160A  118A  27D5  120A  158A  	fcall	i1_lcd_envia_byte
  3963                           
  3964                           ;lcd_4bit.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3965  08CF  300D               	movlw	13
  3966  08D0  00FA               	movwf	??i1_lcd_putc+1
  3967  08D1  30FB               	movlw	251
  3968  08D2  00F9               	movwf	??i1_lcd_putc
  3969  08D3                     u452_27:	
  3970  08D3  0BF9               	decfsz	??i1_lcd_putc,f
  3971  08D4  28D3               	goto	u452_27
  3972  08D5  0BFA               	decfsz	??i1_lcd_putc+1,f
  3973  08D6  28D3               	goto	u452_27
  3974  08D7  28D8               	nop2
  3975                           
  3976                           ;lcd_4bit.c: 89: break;
  3977  08D8  0008               	return
  3978  08D9                     i1l2518:	
  3979                           ;lcd_4bit.c: 91: case '\n':
  3980                           
  3981                           
  3982                           ;lcd_4bit.c: 92: lcd_gotoxy(1,2);
  3983  08D9  3002               	movlw	2
  3984  08DA  00F9               	movwf	??i1_lcd_putc
  3985  08DB  0879               	movf	??i1_lcd_putc,w
  3986  08DC  00F5               	movwf	i1lcd_gotoxy@y
  3987  08DD  3001               	movlw	1
  3988  08DE  160A  118A  26B7   	fcall	i1_lcd_gotoxy
  3989                           
  3990                           ;lcd_4bit.c: 93: break;
  3991  08E1  0008               	return
  3992  08E2                     i1l2520:	
  3993                           ;lcd_4bit.c: 95: case '\b':
  3994                           
  3995                           
  3996                           ;lcd_4bit.c: 96: lcd_envia_byte(0,0x10);
  3997  08E2  3010               	movlw	16
  3998  08E3  00F9               	movwf	??i1_lcd_putc
  3999  08E4  0879               	movf	??i1_lcd_putc,w
  4000  08E5  00F2               	movwf	i1lcd_envia_byte@n
  4001  08E6  3000               	movlw	0
  4002  08E7  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4003                           
  4004                           ;lcd_4bit.c: 97: break;
  4005  08EA  0008               	return
  4006  08EB                     i1l2522:	
  4007                           ;lcd_4bit.c: 99: default:
  4008                           
  4009                           
  4010                           ;lcd_4bit.c: 100: lcd_envia_byte(1,c);
  4011  08EB  087B               	movf	i1lcd_putc@c,w
  4012  08EC  00F9               	movwf	??i1_lcd_putc
  4013  08ED  0879               	movf	??i1_lcd_putc,w
  4014  08EE  00F2               	movwf	i1lcd_envia_byte@n
  4015  08EF  3001               	movlw	1
  4016  08F0  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4017                           
  4018                           ;lcd_4bit.c: 102: }
  4019                           
  4020                           ;lcd_4bit.c: 101: break;
  4021  08F3  0008               	return
  4022  08F4                     i1l2526:	
  4023  08F4  087B               	movf	i1lcd_putc@c,w
  4024                           
  4025                           ; Switch size 1, requested type "space"
  4026                           ; Number of cases is 3, Range of values is 8 to 12
  4027                           ; switch strategies available:
  4028                           ; Name         Instructions Cycles
  4029                           ; simple_byte           10     6 (average)
  4030                           ; direct_byte           26    11 (fixed)
  4031                           ; jumptable            263     9 (fixed)
  4032                           ;	Chosen strategy is simple_byte
  4033  08F5  3A08               	xorlw	8	; case 8
  4034  08F6  1903               	skipnz
  4035  08F7  28E2               	goto	i1l2520
  4036  08F8  3A02               	xorlw	2	; case 10
  4037  08F9  1903               	skipnz
  4038  08FA  28D9               	goto	i1l2518
  4039  08FB  3A06               	xorlw	6	; case 12
  4040  08FC  1903               	skipnz
  4041  08FD  28C7               	goto	i1l2514
  4042  08FE  28EB               	goto	i1l2522
  4043  08FF  0008               	return
  4044  0900                     __end_ofi1_lcd_putc:	
  4045                           
  4046                           	psect	text17
  4047  16B7                     __ptext17:	
  4048 ;; *************** function i1_lcd_gotoxy *****************
  4049 ;; Defined at:
  4050 ;;		line 70 in file "lcd_4bit.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  x               1    wreg     unsigned char 
  4053 ;;  y               1    5[COMMON] unsigned char 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  x               1    7[COMMON] unsigned char 
  4056 ;;  lcd_gotoxy      1    8[COMMON] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;		None               void
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, pclath, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4066 ;;      Params:         1       0       0       0       0
  4067 ;;      Locals:         2       0       0       0       0
  4068 ;;      Temps:          1       0       0       0       0
  4069 ;;      Totals:         4       0       0       0       0
  4070 ;;Total ram usage:        4 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    2
  4073 ;; This function calls:
  4074 ;;		i1_lcd_envia_byte
  4075 ;; This function is called by:
  4076 ;;		_ISR
  4077 ;;		i1_lcd_putc
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function i1_lcd_gotoxy
  4083  16B7                     i1_lcd_gotoxy:	
  4084                           
  4085                           ;incstack = 0
  4086 ;; hardware stack exceeded
  4087                           ; Regs used in i1_lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4088                           ;i1lcd_gotoxy@x stored from wreg
  4089  16B7  00F7               	movwf	i1lcd_gotoxy@x
  4090                           
  4091                           ;lcd_4bit.c: 72: unsigned char address;
  4092                           ;lcd_4bit.c: 74: if(y != 1) address = 0x40;
  4093  16B8  0875               	movf	i1lcd_gotoxy@y,w
  4094  16B9  3A01               	xorlw	1
  4095  16BA  1903               	skipnz
  4096  16BB  2EC1               	goto	i1l2152
  4097  16BC  3040               	movlw	64
  4098  16BD  00F6               	movwf	??i1_lcd_gotoxy
  4099  16BE  0876               	movf	??i1_lcd_gotoxy,w
  4100  16BF  00F8               	movwf	i1lcd_gotoxy@address
  4101  16C0  2EC2               	goto	i1l2154
  4102  16C1                     i1l2152:	
  4103                           
  4104                           ;lcd_4bit.c: 75: else address=0;
  4105  16C1  01F8               	clrf	i1lcd_gotoxy@address
  4106  16C2                     i1l2154:	
  4107                           
  4108                           ;lcd_4bit.c: 77: address += x-1;
  4109  16C2  0877               	movf	i1lcd_gotoxy@x,w
  4110  16C3  3EFF               	addlw	255
  4111  16C4  00F6               	movwf	??i1_lcd_gotoxy
  4112  16C5  0876               	movf	??i1_lcd_gotoxy,w
  4113  16C6  07F8               	addwf	i1lcd_gotoxy@address,f
  4114                           
  4115                           ;lcd_4bit.c: 78: lcd_envia_byte(0, 0x80 | address);
  4116  16C7  0878               	movf	i1lcd_gotoxy@address,w
  4117  16C8  3880               	iorlw	128
  4118  16C9  00F6               	movwf	??i1_lcd_gotoxy
  4119  16CA  0876               	movf	??i1_lcd_gotoxy,w
  4120  16CB  00F2               	movwf	i1lcd_envia_byte@n
  4121  16CC  3000               	movlw	0
  4122  16CD  160A  118A  27D5   	fcall	i1_lcd_envia_byte
  4123  16D0  0008               	return
  4124  16D1                     __end_ofi1_lcd_gotoxy:	
  4125                           
  4126                           	psect	text18
  4127  17D5                     __ptext18:	
  4128 ;; *************** function i1_lcd_envia_byte *****************
  4129 ;; Defined at:
  4130 ;;		line 53 in file "lcd_4bit.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  address         1    wreg     unsigned char 
  4133 ;;  n               1    2[COMMON] unsigned char 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  address         1    4[COMMON] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;		None               void
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0, pclath, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4145 ;;      Params:         1       0       0       0       0
  4146 ;;      Locals:         1       0       0       0       0
  4147 ;;      Temps:          1       0       0       0       0
  4148 ;;      Totals:         3       0       0       0       0
  4149 ;;Total ram usage:        3 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    1
  4152 ;; This function calls:
  4153 ;;		i1_lcd_envia_nibble
  4154 ;; This function is called by:
  4155 ;;		i1_lcd_gotoxy
  4156 ;;		i1_lcd_putc
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function i1_lcd_envia_byte
  4162  17D5                     i1_lcd_envia_byte:	
  4163                           
  4164                           ;incstack = 0
  4165 ;; hardware stack exceeded
  4166                           ; Regs used in i1_lcd_envia_byte: [wreg+status,2+status,0+pclath+cstack]
  4167                           ;i1lcd_envia_byte@address stored from wreg
  4168  17D5  00F4               	movwf	i1lcd_envia_byte@address
  4169                           
  4170                           ;lcd_4bit.c: 55: PORTBbits.RB5=0;
  4171  17D6  1283               	bcf	3,5	;RP0=0, select bank0
  4172  17D7  1303               	bcf	3,6	;RP1=0, select bank0
  4173  17D8  1286               	bcf	6,5	;volatile
  4174                           
  4175                           ;lcd_4bit.c: 56: _delay((unsigned long)((60)*(20000000/4000000.0)));
  4176  17D9  3063               	movlw	99
  4177  17DA  00F3               	movwf	??i1_lcd_envia_byte
  4178  17DB                     u453_27:	
  4179  17DB  0BF3               	decfsz	??i1_lcd_envia_byte,f
  4180  17DC  2FDB               	goto	u453_27
  4181  17DD  2FDE               	nop2	;nop
  4182                           
  4183                           ;lcd_4bit.c: 58: if(address) PORTBbits.RB5=1;
  4184  17DE  0874               	movf	i1lcd_envia_byte@address,w
  4185  17DF  1903               	btfsc	3,2
  4186  17E0  2FE5               	goto	i1l172
  4187  17E1  1283               	bcf	3,5	;RP0=0, select bank0
  4188  17E2  1303               	bcf	3,6	;RP1=0, select bank0
  4189  17E3  1686               	bsf	6,5	;volatile
  4190  17E4  2FE8               	goto	i1l173
  4191  17E5                     i1l172:	
  4192                           
  4193                           ;lcd_4bit.c: 59: else PORTBbits.RB5=0;
  4194  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  4195  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  4196  17E7  1286               	bcf	6,5	;volatile
  4197  17E8                     i1l173:	
  4198                           
  4199                           ;lcd_4bit.c: 61: _delay(1);
  4200  17E8  0000               	nop
  4201                           
  4202                           ;lcd_4bit.c: 63: PORTBbits.RB4=0;
  4203  17E9  1283               	bcf	3,5	;RP0=0, select bank0
  4204  17EA  1303               	bcf	3,6	;RP1=0, select bank0
  4205  17EB  1206               	bcf	6,4	;volatile
  4206                           
  4207                           ;lcd_4bit.c: 65: lcd_envia_nibble(n >> 4);
  4208  17EC  0872               	movf	i1lcd_envia_byte@n,w
  4209  17ED  00F3               	movwf	??i1_lcd_envia_byte
  4210  17EE  3004               	movlw	4
  4211  17EF                     u210_25:	
  4212  17EF  1003               	clrc
  4213  17F0  0CF3               	rrf	??i1_lcd_envia_byte,f
  4214  17F1  3EFF               	addlw	-1
  4215  17F2  1D03               	skipz
  4216  17F3  2FEF               	goto	u210_25
  4217  17F4  0873               	movf	??i1_lcd_envia_byte,w
  4218  17F5  120A  158A  208C  160A  118A  	fcall	i1_lcd_envia_nibble
  4219                           
  4220                           ;lcd_4bit.c: 66: lcd_envia_nibble(n & 0xf);
  4221  17FA  0872               	movf	i1lcd_envia_byte@n,w
  4222  17FB  390F               	andlw	15
  4223  17FC  120A  158A  208C   	fcall	i1_lcd_envia_nibble
  4224  17FF  0008               	return
  4225  1800                     __end_ofi1_lcd_envia_byte:	
  4226                           
  4227                           	psect	text19
  4228  088C                     __ptext19:	
  4229 ;; *************** function i1_lcd_envia_nibble *****************
  4230 ;; Defined at:
  4231 ;;		line 39 in file "lcd_4bit.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  n               1    wreg     unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  n               1    1[COMMON] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;		None               void
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4245 ;;      Params:         0       0       0       0       0
  4246 ;;      Locals:         1       0       0       0       0
  4247 ;;      Temps:          1       0       0       0       0
  4248 ;;      Totals:         2       0       0       0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		i1_lcd_envia_byte
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function i1_lcd_envia_nibble
  4260  088C                     i1_lcd_envia_nibble:	
  4261                           
  4262                           ;incstack = 0
  4263 ;; hardware stack exceeded
  4264                           ; Regs used in i1_lcd_envia_nibble: [wreg+status,2+status,0]
  4265                           ;i1lcd_envia_nibble@n stored from wreg
  4266  088C  00F1               	movwf	i1lcd_envia_nibble@n
  4267                           
  4268                           ;lcd_4bit.c: 41: PORTBbits.RB0 = !!(n & 1);
  4269  088D  3000               	movlw	0
  4270  088E  1871               	btfsc	i1lcd_envia_nibble@n,0
  4271  088F  3001               	movlw	1
  4272  0890  00F0               	movwf	??i1_lcd_envia_nibble
  4273  0891  1283               	bcf	3,5	;RP0=0, select bank0
  4274  0892  1303               	bcf	3,6	;RP1=0, select bank0
  4275  0893  0806               	movf	6,w	;volatile
  4276  0894  0670               	xorwf	??i1_lcd_envia_nibble,w
  4277  0895  39FE               	andlw	-2
  4278  0896  0670               	xorwf	??i1_lcd_envia_nibble,w
  4279  0897  0086               	movwf	6	;volatile
  4280                           
  4281                           ;lcd_4bit.c: 42: PORTBbits.RB1 = !!(n & 2);
  4282  0898  3000               	movlw	0
  4283  0899  18F1               	btfsc	i1lcd_envia_nibble@n,1
  4284  089A  3001               	movlw	1
  4285  089B  00F0               	movwf	??i1_lcd_envia_nibble
  4286  089C  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4287  089D  0806               	movf	6,w	;volatile
  4288  089E  0670               	xorwf	??i1_lcd_envia_nibble,w
  4289  089F  39FD               	andlw	-3
  4290  08A0  0670               	xorwf	??i1_lcd_envia_nibble,w
  4291  08A1  0086               	movwf	6	;volatile
  4292                           
  4293                           ;lcd_4bit.c: 43: PORTBbits.RB2 = !!(n & 4);
  4294  08A2  3000               	movlw	0
  4295  08A3  1971               	btfsc	i1lcd_envia_nibble@n,2
  4296  08A4  3001               	movlw	1
  4297  08A5  00F0               	movwf	??i1_lcd_envia_nibble
  4298  08A6  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4299  08A7  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4300  08A8  0806               	movf	6,w	;volatile
  4301  08A9  0670               	xorwf	??i1_lcd_envia_nibble,w
  4302  08AA  39FB               	andlw	-5
  4303  08AB  0670               	xorwf	??i1_lcd_envia_nibble,w
  4304  08AC  0086               	movwf	6	;volatile
  4305                           
  4306                           ;lcd_4bit.c: 44: PORTBbits.RB3 = !!(n & 8);
  4307  08AD  3000               	movlw	0
  4308  08AE  19F1               	btfsc	i1lcd_envia_nibble@n,3
  4309  08AF  3001               	movlw	1
  4310  08B0  00F0               	movwf	??i1_lcd_envia_nibble
  4311  08B1  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4312  08B2  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4313  08B3  0DF0               	rlf	??i1_lcd_envia_nibble,f
  4314  08B4  0806               	movf	6,w	;volatile
  4315  08B5  0670               	xorwf	??i1_lcd_envia_nibble,w
  4316  08B6  39F7               	andlw	-9
  4317  08B7  0670               	xorwf	??i1_lcd_envia_nibble,w
  4318  08B8  0086               	movwf	6	;volatile
  4319                           
  4320                           ;lcd_4bit.c: 46: _delay(1);
  4321  08B9  0000               	nop
  4322                           
  4323                           ;lcd_4bit.c: 47: PORTBbits.RB4=1;
  4324  08BA  1283               	bcf	3,5	;RP0=0, select bank0
  4325  08BB  1303               	bcf	3,6	;RP1=0, select bank0
  4326  08BC  1606               	bsf	6,4	;volatile
  4327                           
  4328                           ;lcd_4bit.c: 48: _delay((unsigned long)((2)*(20000000/4000000.0)));
  4329  08BD  3003               	movlw	3
  4330  08BE  00F0               	movwf	??i1_lcd_envia_nibble
  4331  08BF                     u454_27:	
  4332  08BF  0BF0               	decfsz	??i1_lcd_envia_nibble,f
  4333  08C0  28BF               	goto	u454_27
  4334                           
  4335                           ;lcd_4bit.c: 49: PORTBbits.RB4=0;
  4336  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  4337  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  4338  08C3  1206               	bcf	6,4	;volatile
  4339  08C4  0008               	return
  4340  08C5                     __end_ofi1_lcd_envia_nibble:	
  4341                           
  4342                           	psect	text20
  4343  0F46                     __ptext20:	
  4344 ;; *************** function _ftoa *****************
  4345 ;; Defined at:
  4346 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftoa.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  f               3   36[BANK0 ] float 
  4349 ;;  status          1   39[BANK0 ] PTR int 
  4350 ;;		 -> ISR@status2(2), ISR@status(2), 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  l               4   45[BANK0 ] unsigned long 
  4353 ;;  rem             4   41[BANK0 ] unsigned long 
  4354 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  4355 ;;		 -> ftoa@buf(17), 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      PTR unsigned char 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4365 ;;      Params:         0       4       0       0       0
  4366 ;;      Locals:         0       9       0       0       0
  4367 ;;      Temps:          0       1       0       0       0
  4368 ;;      Totals:         0      14       0       0       0
  4369 ;;Total ram usage:       14 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    3
  4372 ;; This function calls:
  4373 ;;		___ftge
  4374 ;;		___ftmul
  4375 ;;		___ftneg
  4376 ;;		___ftsub
  4377 ;;		___fttol
  4378 ;;		___lltoft
  4379 ;;		_sprintf
  4380 ;; This function is called by:
  4381 ;;		_ISR
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _ftoa
  4387  0F46                     _ftoa:	
  4388                           
  4389                           ;incstack = 0
  4390 ;; hardware stack exceeded
  4391                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4392  0F46  30AE               	movlw	ftoa@buf& (0+255)
  4393  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  4395  0F49  00C8               	movwf	??_ftoa
  4396  0F4A  0848               	movf	??_ftoa,w
  4397  0F4B  00D1               	movwf	ftoa@cp
  4398  0F4C  0844               	movf	ftoa@f,w
  4399  0F4D  00F0               	movwf	___ftge@ff1
  4400  0F4E  0845               	movf	ftoa@f+1,w
  4401  0F4F  00F1               	movwf	___ftge@ff1+1
  4402  0F50  0846               	movf	ftoa@f+2,w
  4403  0F51  00F2               	movwf	___ftge@ff1+2
  4404  0F52  3000               	movlw	0
  4405  0F53  00F3               	movwf	___ftge@ff2
  4406  0F54  3000               	movlw	0
  4407  0F55  00F4               	movwf	___ftge@ff2+1
  4408  0F56  3000               	movlw	0
  4409  0F57  00F5               	movwf	___ftge@ff2+2
  4410  0F58  120A  158A  22F4  120A  158A  	fcall	___ftge
  4411  0F5D  1803               	btfsc	3,0
  4412  0F5E  2F7F               	goto	i1l2558
  4413  0F5F  302D               	movlw	45
  4414  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  4415  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  4416  0F62  00C8               	movwf	??_ftoa
  4417  0F63  0851               	movf	ftoa@cp,w
  4418  0F64  0084               	movwf	4
  4419  0F65  0848               	movf	??_ftoa,w
  4420  0F66  1783               	bsf	3,7	;select IRP bank2
  4421  0F67  0080               	movwf	0
  4422  0F68  3001               	movlw	1
  4423  0F69  00C8               	movwf	??_ftoa
  4424  0F6A  0848               	movf	??_ftoa,w
  4425  0F6B  07D1               	addwf	ftoa@cp,f
  4426  0F6C  0844               	movf	ftoa@f,w
  4427  0F6D  00F0               	movwf	___ftneg@f1
  4428  0F6E  0845               	movf	ftoa@f+1,w
  4429  0F6F  00F1               	movwf	___ftneg@f1+1
  4430  0F70  0846               	movf	ftoa@f+2,w
  4431  0F71  00F2               	movwf	___ftneg@f1+2
  4432  0F72  160A  118A  265A  120A  158A  	fcall	___ftneg
  4433  0F77  0870               	movf	?___ftneg,w
  4434  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0F7A  00C4               	movwf	ftoa@f
  4437  0F7B  0871               	movf	?___ftneg+1,w
  4438  0F7C  00C5               	movwf	ftoa@f+1
  4439  0F7D  0872               	movf	?___ftneg+2,w
  4440  0F7E  00C6               	movwf	ftoa@f+2
  4441  0F7F                     i1l2558:	
  4442  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4443  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4444  0F81  0844               	movf	ftoa@f,w
  4445  0F82  00B0               	movwf	___fttol@f1
  4446  0F83  0845               	movf	ftoa@f+1,w
  4447  0F84  00B1               	movwf	___fttol@f1+1
  4448  0F85  0846               	movf	ftoa@f+2,w
  4449  0F86  00B2               	movwf	___fttol@f1+2
  4450  0F87  120A  158A  2571  120A  158A  	fcall	___fttol
  4451  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0F8E  0833               	movf	?___fttol+3,w
  4454  0F8F  00D0               	movwf	ftoa@l+3
  4455  0F90  0832               	movf	?___fttol+2,w
  4456  0F91  00CF               	movwf	ftoa@l+2
  4457  0F92  0831               	movf	?___fttol+1,w
  4458  0F93  00CE               	movwf	ftoa@l+1
  4459  0F94  0830               	movf	?___fttol,w
  4460  0F95  00CD               	movwf	ftoa@l
  4461  0F96  0850               	movf	ftoa@l+3,w
  4462  0F97  00FB               	movwf	___lltoft@c+3
  4463  0F98  084F               	movf	ftoa@l+2,w
  4464  0F99  00FA               	movwf	___lltoft@c+2
  4465  0F9A  084E               	movf	ftoa@l+1,w
  4466  0F9B  00F9               	movwf	___lltoft@c+1
  4467  0F9C  084D               	movf	ftoa@l,w
  4468  0F9D  00F8               	movwf	___lltoft@c
  4469  0F9E  160A  118A  27AA  120A  158A  	fcall	___lltoft
  4470  0FA3  0878               	movf	?___lltoft,w
  4471  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  4472  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  4473  0FA6  00A7               	movwf	___ftsub@f2
  4474  0FA7  0879               	movf	?___lltoft+1,w
  4475  0FA8  00A8               	movwf	___ftsub@f2+1
  4476  0FA9  087A               	movf	?___lltoft+2,w
  4477  0FAA  00A9               	movwf	___ftsub@f2+2
  4478  0FAB  0844               	movf	ftoa@f,w
  4479  0FAC  00AA               	movwf	___ftsub@f1
  4480  0FAD  0845               	movf	ftoa@f+1,w
  4481  0FAE  00AB               	movwf	___ftsub@f1+1
  4482  0FAF  0846               	movf	ftoa@f+2,w
  4483  0FB0  00AC               	movwf	___ftsub@f1+2
  4484  0FB1  160A  118A  26EC  120A  158A  	fcall	___ftsub
  4485  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  4486  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  4487  0FB8  0827               	movf	?___ftsub,w
  4488  0FB9  00C4               	movwf	ftoa@f
  4489  0FBA  0828               	movf	?___ftsub+1,w
  4490  0FBB  00C5               	movwf	ftoa@f+1
  4491  0FBC  0829               	movf	?___ftsub+2,w
  4492  0FBD  00C6               	movwf	ftoa@f+2
  4493  0FBE  0844               	movf	ftoa@f,w
  4494  0FBF  00A3               	movwf	___ftmul@f2
  4495  0FC0  0845               	movf	ftoa@f+1,w
  4496  0FC1  00A4               	movwf	___ftmul@f2+1
  4497  0FC2  0846               	movf	ftoa@f+2,w
  4498  0FC3  00A5               	movwf	___ftmul@f2+2
  4499  0FC4  3024               	movlw	36
  4500  0FC5  00A0               	movwf	___ftmul@f1
  4501  0FC6  3074               	movlw	116
  4502  0FC7  00A1               	movwf	___ftmul@f1+1
  4503  0FC8  3049               	movlw	73
  4504  0FC9  00A2               	movwf	___ftmul@f1+2
  4505  0FCA  120A  118A  26E9  120A  158A  	fcall	___ftmul
  4506  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  4507  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  4508  0FD1  0820               	movf	?___ftmul,w
  4509  0FD2  00B0               	movwf	___fttol@f1
  4510  0FD3  0821               	movf	?___ftmul+1,w
  4511  0FD4  00B1               	movwf	___fttol@f1+1
  4512  0FD5  0822               	movf	?___ftmul+2,w
  4513  0FD6  00B2               	movwf	___fttol@f1+2
  4514  0FD7  120A  158A  2571  120A  158A  	fcall	___fttol
  4515  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4517  0FDE  0833               	movf	?___fttol+3,w
  4518  0FDF  00CC               	movwf	ftoa@rem+3
  4519  0FE0  0832               	movf	?___fttol+2,w
  4520  0FE1  00CB               	movwf	ftoa@rem+2
  4521  0FE2  0831               	movf	?___fttol+1,w
  4522  0FE3  00CA               	movwf	ftoa@rem+1
  4523  0FE4  0830               	movf	?___fttol,w
  4524  0FE5  00C9               	movwf	ftoa@rem
  4525  0FE6  30AE               	movlw	(STR_8-__stringbase)& (0+255)
  4526  0FE7  00C8               	movwf	??_ftoa
  4527  0FE8  0848               	movf	??_ftoa,w
  4528  0FE9  00AA               	movwf	sprintf@f
  4529  0FEA  0850               	movf	ftoa@l+3,w
  4530  0FEB  00AE               	movwf	?_sprintf+4
  4531  0FEC  084F               	movf	ftoa@l+2,w
  4532  0FED  00AD               	movwf	?_sprintf+3
  4533  0FEE  084E               	movf	ftoa@l+1,w
  4534  0FEF  00AC               	movwf	?_sprintf+2
  4535  0FF0  084D               	movf	ftoa@l,w
  4536  0FF1  00AB               	movwf	?_sprintf+1
  4537  0FF2  084C               	movf	ftoa@rem+3,w
  4538  0FF3  00B2               	movwf	?_sprintf+8
  4539  0FF4  084B               	movf	ftoa@rem+2,w
  4540  0FF5  00B1               	movwf	?_sprintf+7
  4541  0FF6  084A               	movf	ftoa@rem+1,w
  4542  0FF7  00B0               	movwf	?_sprintf+6
  4543  0FF8  0849               	movf	ftoa@rem,w
  4544  0FF9  00AF               	movwf	?_sprintf+5
  4545  0FFA  0851               	movf	ftoa@cp,w
  4546  0FFB  120A  118A  22D2   	fcall	_sprintf
  4547  0FFE  30AE               	movlw	ftoa@buf& (0+255)
  4548  0FFF  0008               	return
  4549  1000                     __end_of_ftoa:	
  4550                           
  4551                           	psect	text21
  4552  02D2                     __ptext21:	
  4553 ;; *************** function _sprintf *****************
  4554 ;; Defined at:
  4555 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  sp              1    wreg     PTR unsigned char 
  4558 ;;		 -> ftoa@buf(17), 
  4559 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  4560 ;;		 -> STR_8(11), 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  4563 ;;		 -> ftoa@buf(17), 
  4564 ;;  _val            4   26[BANK0 ] struct .
  4565 ;;  prec            2   33[BANK0 ] int 
  4566 ;;  width           2   31[BANK0 ] int 
  4567 ;;  c               1   35[BANK0 ] char 
  4568 ;;  ap              1   25[BANK0 ] PTR void [1]
  4569 ;;		 -> ?_sprintf(2), 
  4570 ;;  flag            1   24[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  2   10[BANK0 ] int 
  4573 ;; Registers used:
  4574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4580 ;;      Params:         0       9       0       0       0
  4581 ;;      Locals:         0      12       0       0       0
  4582 ;;      Temps:          0       5       0       0       0
  4583 ;;      Totals:         0      26       0       0       0
  4584 ;;Total ram usage:       26 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    1
  4587 ;; This function calls:
  4588 ;;		___lldiv
  4589 ;;		___llmod
  4590 ;;		___wmul
  4591 ;;		_isdigit
  4592 ;; This function is called by:
  4593 ;;		_ftoa
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _sprintf
  4599  02D2                     _sprintf:	
  4600                           
  4601                           ;incstack = 0
  4602 ;; hardware stack exceeded
  4603                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4604                           ;sprintf@sp stored from wreg
  4605  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  4606  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  4607  02D4  00BE               	movwf	sprintf@sp
  4608                           
  4609                           ;doprnt.c: 494: va_list ap;
  4610                           ;doprnt.c: 499: signed char c;
  4611                           ;doprnt.c: 501: int width;
  4612                           ;doprnt.c: 504: int prec;
  4613                           ;doprnt.c: 508: unsigned char flag;
  4614                           ;doprnt.c: 527: union {
  4615                           ;doprnt.c: 528: unsigned long _val;
  4616                           ;doprnt.c: 529: struct {
  4617                           ;doprnt.c: 530: const char * _cp;
  4618                           ;doprnt.c: 531: unsigned _len;
  4619                           ;doprnt.c: 532: } _str;
  4620                           ;doprnt.c: 533: } _val;
  4621                           ;doprnt.c: 542: *ap = __va_start();
  4622  02D5  302B               	movlw	(?_sprintf+1)& (0+255)
  4623  02D6  00B3               	movwf	??_sprintf
  4624  02D7  0833               	movf	??_sprintf,w
  4625  02D8  00B9               	movwf	sprintf@ap
  4626  02D9                     i1l2368:	
  4627                           ;doprnt.c: 545: while(c = *f++) {
  4628                           
  4629  02D9  3001               	movlw	1
  4630  02DA  07AA               	addwf	sprintf@f,f
  4631  02DB  30FF               	movlw	-1
  4632  02DC  072A               	addwf	sprintf@f,w
  4633  02DD  0084               	movwf	4
  4634  02DE  120A  118A  261F  120A  118A  	fcall	stringdir
  4635  02E3  00B3               	movwf	??_sprintf
  4636  02E4  0833               	movf	??_sprintf,w
  4637  02E5  00C3               	movwf	sprintf@c
  4638  02E6  08C3               	movf	sprintf@c,f
  4639  02E7  1903               	btfsc	3,2
  4640  02E8  2D09               	goto	i1l2370
  4641                           
  4642                           ;doprnt.c: 547: if(c != '%')
  4643  02E9  0843               	movf	sprintf@c,w
  4644  02EA  3A25               	xorlw	37
  4645  02EB  1903               	skipnz
  4646  02EC  2AF9               	goto	i1l2278
  4647                           
  4648                           ;doprnt.c: 549: {
  4649                           ;doprnt.c: 550: ((*sp++ = (c)));
  4650  02ED  0843               	movf	sprintf@c,w
  4651  02EE  00B3               	movwf	??_sprintf
  4652  02EF  083E               	movf	sprintf@sp,w
  4653  02F0  0084               	movwf	4
  4654  02F1  0833               	movf	??_sprintf,w
  4655  02F2  1783               	bsf	3,7	;select IRP bank2
  4656  02F3  0080               	movwf	0
  4657  02F4  3001               	movlw	1
  4658  02F5  00B3               	movwf	??_sprintf
  4659  02F6  0833               	movf	??_sprintf,w
  4660  02F7  07BE               	addwf	sprintf@sp,f
  4661                           
  4662                           ;doprnt.c: 551: continue;
  4663  02F8  2AD9               	goto	i1l2368
  4664  02F9                     i1l2278:	
  4665                           
  4666                           ;doprnt.c: 552: }
  4667                           ;doprnt.c: 555: width = 0;
  4668  02F9  01BF               	clrf	sprintf@width
  4669  02FA  01C0               	clrf	sprintf@width+1
  4670                           
  4671                           ;doprnt.c: 557: flag = 0;
  4672  02FB  01B8               	clrf	sprintf@flag
  4673                           
  4674                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4675  02FC  082A               	movf	sprintf@f,w
  4676  02FD  0084               	movwf	4
  4677  02FE  120A  118A  261F  120A  118A  	fcall	stringdir
  4678  0303  160A  118A  2675  120A  118A  	fcall	_isdigit
  4679  0308  1C03               	btfss	3,0
  4680  0309  2B4C               	goto	i1l2292
  4681                           
  4682                           ;doprnt.c: 607: width = 0;
  4683  030A  1283               	bcf	3,5	;RP0=0, select bank0
  4684  030B  1303               	bcf	3,6	;RP1=0, select bank0
  4685  030C  01BF               	clrf	sprintf@width
  4686  030D  01C0               	clrf	sprintf@width+1
  4687  030E                     i1l2284:	
  4688                           ;doprnt.c: 608: do {
  4689                           
  4690                           
  4691                           ;doprnt.c: 609: width *= 10;
  4692  030E  300A               	movlw	10
  4693  030F  00F0               	movwf	___wmul@multiplier
  4694  0310  3000               	movlw	0
  4695  0311  00F1               	movwf	___wmul@multiplier+1
  4696  0312  1283               	bcf	3,5	;RP0=0, select bank0
  4697  0313  1303               	bcf	3,6	;RP1=0, select bank0
  4698  0314  0840               	movf	sprintf@width+1,w
  4699  0315  01F3               	clrf	___wmul@multiplicand+1
  4700  0316  07F3               	addwf	___wmul@multiplicand+1,f
  4701  0317  083F               	movf	sprintf@width,w
  4702  0318  01F2               	clrf	___wmul@multiplicand
  4703  0319  07F2               	addwf	___wmul@multiplicand,f
  4704  031A  160A  118A  2787  120A  118A  	fcall	___wmul
  4705  031F  0871               	movf	?___wmul+1,w
  4706  0320  1283               	bcf	3,5	;RP0=0, select bank0
  4707  0321  1303               	bcf	3,6	;RP1=0, select bank0
  4708  0322  01C0               	clrf	sprintf@width+1
  4709  0323  07C0               	addwf	sprintf@width+1,f
  4710  0324  0870               	movf	?___wmul,w
  4711  0325  01BF               	clrf	sprintf@width
  4712  0326  07BF               	addwf	sprintf@width,f
  4713                           
  4714                           ;doprnt.c: 610: width += *f++ - '0';
  4715  0327  082A               	movf	sprintf@f,w
  4716  0328  0084               	movwf	4
  4717  0329  120A  118A  261F  120A  118A  	fcall	stringdir
  4718  032E  3ED0               	addlw	208
  4719  032F  00B3               	movwf	??_sprintf
  4720  0330  30FF               	movlw	255
  4721  0331  1803               	skipnc
  4722  0332  3000               	movlw	0
  4723  0333  00B4               	movwf	??_sprintf+1
  4724  0334  0833               	movf	??_sprintf,w
  4725  0335  07BF               	addwf	sprintf@width,f
  4726  0336  1803               	skipnc
  4727  0337  0AC0               	incf	sprintf@width+1,f
  4728  0338  0834               	movf	??_sprintf+1,w
  4729  0339  07C0               	addwf	sprintf@width+1,f
  4730  033A  3001               	movlw	1
  4731  033B  00B3               	movwf	??_sprintf
  4732  033C  0833               	movf	??_sprintf,w
  4733  033D  07AA               	addwf	sprintf@f,f
  4734                           
  4735                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4736  033E  082A               	movf	sprintf@f,w
  4737  033F  0084               	movwf	4
  4738  0340  120A  118A  261F  120A  118A  	fcall	stringdir
  4739  0345  160A  118A  2675  120A  118A  	fcall	_isdigit
  4740  034A  1803               	btfsc	3,0
  4741  034B  2B0E               	goto	i1l2284
  4742  034C                     i1l2292:	
  4743                           
  4744                           ;doprnt.c: 617: }
  4745                           ;doprnt.c: 620: if(*f == '.') {
  4746  034C  1283               	bcf	3,5	;RP0=0, select bank0
  4747  034D  1303               	bcf	3,6	;RP1=0, select bank0
  4748  034E  082A               	movf	sprintf@f,w
  4749  034F  0084               	movwf	4
  4750  0350  120A  118A  261F  120A  118A  	fcall	stringdir
  4751  0355  3A2E               	xorlw	46
  4752  0356  1D03               	skipz
  4753  0357  2B9A               	goto	i1l2304
  4754                           
  4755                           ;doprnt.c: 622: f++;
  4756  0358  3001               	movlw	1
  4757  0359  00B3               	movwf	??_sprintf
  4758  035A  0833               	movf	??_sprintf,w
  4759  035B  07AA               	addwf	sprintf@f,f
  4760                           
  4761                           ;doprnt.c: 629: {
  4762                           ;doprnt.c: 630: prec = 0;
  4763  035C  01C1               	clrf	sprintf@prec
  4764  035D  01C2               	clrf	sprintf@prec+1
  4765  035E                     i1l2302:	
  4766                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4767                           
  4768  035E  082A               	movf	sprintf@f,w
  4769  035F  0084               	movwf	4
  4770  0360  120A  118A  261F  120A  118A  	fcall	stringdir
  4771  0365  160A  118A  2675  120A  118A  	fcall	_isdigit
  4772  036A  1C03               	btfss	3,0
  4773  036B  2BA6               	goto	i1l2310
  4774                           
  4775                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4776  036C  1283               	bcf	3,5	;RP0=0, select bank0
  4777  036D  1303               	bcf	3,6	;RP1=0, select bank0
  4778  036E  0842               	movf	sprintf@prec+1,w
  4779  036F  01F1               	clrf	___wmul@multiplier+1
  4780  0370  07F1               	addwf	___wmul@multiplier+1,f
  4781  0371  0841               	movf	sprintf@prec,w
  4782  0372  01F0               	clrf	___wmul@multiplier
  4783  0373  07F0               	addwf	___wmul@multiplier,f
  4784  0374  300A               	movlw	10
  4785  0375  00F2               	movwf	___wmul@multiplicand
  4786  0376  3000               	movlw	0
  4787  0377  00F3               	movwf	___wmul@multiplicand+1
  4788  0378  160A  118A  2787  120A  118A  	fcall	___wmul
  4789  037D  1283               	bcf	3,5	;RP0=0, select bank0
  4790  037E  1303               	bcf	3,6	;RP1=0, select bank0
  4791  037F  082A               	movf	sprintf@f,w
  4792  0380  0084               	movwf	4
  4793  0381  120A  118A  261F  120A  118A  	fcall	stringdir
  4794  0386  0770               	addwf	?___wmul,w
  4795  0387  00B3               	movwf	??_sprintf
  4796  0388  3000               	movlw	0
  4797  0389  1803               	skipnc
  4798  038A  3001               	movlw	1
  4799  038B  0771               	addwf	?___wmul+1,w
  4800  038C  00B4               	movwf	??_sprintf+1
  4801  038D  0833               	movf	??_sprintf,w
  4802  038E  3ED0               	addlw	208
  4803  038F  00C1               	movwf	sprintf@prec
  4804  0390  0834               	movf	??_sprintf+1,w
  4805  0391  1803               	skipnc
  4806  0392  3E01               	addlw	1
  4807  0393  3EFF               	addlw	255
  4808  0394  00C2               	movwf	sprintf@prec+1
  4809  0395  3001               	movlw	1
  4810  0396  00B3               	movwf	??_sprintf
  4811  0397  0833               	movf	??_sprintf,w
  4812  0398  07AA               	addwf	sprintf@f,f
  4813  0399  2B5E               	goto	i1l2302
  4814  039A                     i1l2304:	
  4815                           ;doprnt.c: 633: }
  4816                           ;doprnt.c: 634: } else {
  4817                           
  4818                           
  4819                           ;doprnt.c: 635: prec = 0;
  4820  039A  1283               	bcf	3,5	;RP0=0, select bank0
  4821  039B  1303               	bcf	3,6	;RP1=0, select bank0
  4822  039C  01C1               	clrf	sprintf@prec
  4823  039D  01C2               	clrf	sprintf@prec+1
  4824                           
  4825                           ;doprnt.c: 644: switch(c = *f++) {
  4826                           
  4827                           ;doprnt.c: 639: }
  4828                           ;doprnt.c: 642: loop:
  4829  039E  2BA6               	goto	i1l2310
  4830  039F                     i1l252:	
  4831                           ;doprnt.c: 650: case 'l':
  4832                           
  4833                           ;doprnt.c: 647: goto alldone;
  4834                           
  4835                           ;doprnt.c: 646: case 0:
  4836                           
  4837                           
  4838                           ;doprnt.c: 652: flag |= 0x10;
  4839  039F  1638               	bsf	sprintf@flag,4
  4840                           
  4841                           ;doprnt.c: 653: goto loop;
  4842  03A0  2BA6               	goto	i1l2310
  4843  03A1                     i1l2306:	
  4844                           ;doprnt.c: 826: case 'u':
  4845                           
  4846                           ;doprnt.c: 822: continue;
  4847                           
  4848                           ;doprnt.c: 811: default:
  4849                           
  4850                           
  4851                           ;doprnt.c: 827: flag |= 0xC0;
  4852  03A1  30C0               	movlw	192
  4853  03A2  00B3               	movwf	??_sprintf
  4854  03A3  0833               	movf	??_sprintf,w
  4855  03A4  04B8               	iorwf	sprintf@flag,f
  4856                           
  4857                           ;doprnt.c: 831: }
  4858                           
  4859                           ;doprnt.c: 828: break;
  4860  03A5  2BBD               	goto	i1l255
  4861  03A6                     i1l2310:	
  4862  03A6  3001               	movlw	1
  4863  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  4864  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  4865  03A9  07AA               	addwf	sprintf@f,f
  4866  03AA  30FF               	movlw	-1
  4867  03AB  072A               	addwf	sprintf@f,w
  4868  03AC  0084               	movwf	4
  4869  03AD  120A  118A  261F  120A  118A  	fcall	stringdir
  4870  03B2  00C3               	movwf	sprintf@c
  4871                           
  4872                           ; Switch size 1, requested type "space"
  4873                           ; Number of cases is 3, Range of values is 0 to 117
  4874                           ; switch strategies available:
  4875                           ; Name         Instructions Cycles
  4876                           ; simple_byte           10     6 (average)
  4877                           ; jumptable            260     6 (fixed)
  4878                           ;	Chosen strategy is simple_byte
  4879  03B3  3A00               	xorlw	0	; case 0
  4880  03B4  1903               	skipnz
  4881  03B5  2D09               	goto	i1l2370
  4882  03B6  3A6C               	xorlw	108	; case 108
  4883  03B7  1903               	skipnz
  4884  03B8  2B9F               	goto	i1l252
  4885  03B9  3A19               	xorlw	25	; case 117
  4886  03BA  1903               	skipnz
  4887  03BB  2BA1               	goto	i1l2306
  4888  03BC  2AD9               	goto	i1l2368
  4889  03BD                     i1l255:	
  4890                           
  4891                           ;doprnt.c: 1282: {
  4892                           ;doprnt.c: 1290: if(flag & 0x10)
  4893  03BD  1E38               	btfss	sprintf@flag,4
  4894  03BE  2BCF               	goto	i1l2316
  4895                           
  4896                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  4897  03BF  0839               	movf	sprintf@ap,w
  4898  03C0  0084               	movwf	4
  4899  03C1  1383               	bcf	3,7	;select IRP bank0
  4900  03C2  0800               	movf	0,w
  4901  03C3  00BA               	movwf	sprintf@_val
  4902  03C4  0A84               	incf	4,f
  4903  03C5  0800               	movf	0,w
  4904  03C6  00BB               	movwf	sprintf@_val+1
  4905  03C7  0A84               	incf	4,f
  4906  03C8  0800               	movf	0,w
  4907  03C9  00BC               	movwf	sprintf@_val+2
  4908  03CA  0A84               	incf	4,f
  4909  03CB  0800               	movf	0,w
  4910  03CC  00BD               	movwf	sprintf@_val+3
  4911  03CD  3004               	movlw	4
  4912  03CE  2BDE               	goto	L3
  4913  03CF                     i1l2316:	
  4914                           
  4915                           ;doprnt.c: 1292: else
  4916                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4917  03CF  0839               	movf	sprintf@ap,w
  4918  03D0  0084               	movwf	4
  4919  03D1  1383               	bcf	3,7	;select IRP bank0
  4920  03D2  0800               	movf	0,w
  4921  03D3  00B3               	movwf	??_sprintf
  4922  03D4  0A84               	incf	4,f
  4923  03D5  0800               	movf	0,w
  4924  03D6  00B4               	movwf	??_sprintf+1
  4925  03D7  0833               	movf	??_sprintf,w
  4926  03D8  00BA               	movwf	sprintf@_val
  4927  03D9  0834               	movf	??_sprintf+1,w
  4928  03DA  00BB               	movwf	sprintf@_val+1
  4929  03DB  01BC               	clrf	sprintf@_val+2
  4930  03DC  01BD               	clrf	sprintf@_val+3
  4931  03DD  3002               	movlw	2
  4932  03DE                     L3:	
  4933  03DE  00B3               	movwf	??_sprintf
  4934  03DF  0833               	movf	??_sprintf,w
  4935  03E0  07B9               	addwf	sprintf@ap,f
  4936                           
  4937                           ;doprnt.c: 1296: }
  4938                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4939  03E1  0842               	movf	sprintf@prec+1,w
  4940  03E2  0441               	iorwf	sprintf@prec,w
  4941  03E3  1D03               	skipz
  4942  03E4  2BF1               	goto	i1l2326
  4943  03E5  083D               	movf	sprintf@_val+3,w
  4944  03E6  043C               	iorwf	sprintf@_val+2,w
  4945  03E7  043B               	iorwf	sprintf@_val+1,w
  4946  03E8  043A               	iorwf	sprintf@_val,w
  4947  03E9  1D03               	skipz
  4948  03EA  2BF1               	goto	i1l2326
  4949                           
  4950                           ;doprnt.c: 1300: prec++;
  4951  03EB  3001               	movlw	1
  4952  03EC  07C1               	addwf	sprintf@prec,f
  4953  03ED  1803               	skipnc
  4954  03EE  0AC2               	incf	sprintf@prec+1,f
  4955  03EF  3000               	movlw	0
  4956  03F0  07C2               	addwf	sprintf@prec+1,f
  4957  03F1                     i1l2326:	
  4958                           
  4959                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4960  03F1  01C3               	clrf	sprintf@c
  4961  03F2  0AC3               	incf	sprintf@c,f
  4962  03F3  0843               	movf	sprintf@c,w
  4963  03F4  3A0A               	xorlw	10
  4964  03F5  1903               	btfsc	3,2
  4965  03F6  2C33               	goto	i1l2338
  4966  03F7                     i1l2330:	
  4967                           
  4968                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4969  03F7  0843               	movf	sprintf@c,w
  4970  03F8  00B3               	movwf	??_sprintf
  4971  03F9  3001               	movlw	1
  4972  03FA                     u285_25:	
  4973  03FA  1003               	clrc
  4974  03FB  0DB3               	rlf	??_sprintf,f
  4975  03FC  3EFF               	addlw	-1
  4976  03FD  1D03               	skipz
  4977  03FE  2BFA               	goto	u285_25
  4978  03FF  1003               	clrc
  4979  0400  0D33               	rlf	??_sprintf,w
  4980  0401  3E01               	addlw	low (_dpowers-__stringbase)
  4981  0402  0084               	movwf	4
  4982  0403  120A  118A  261F  120A  118A  	fcall	stringdir
  4983  0408  00B4               	movwf	??_sprintf+1
  4984  0409  120A  118A  261F  120A  118A  	fcall	stringdir
  4985  040E  00B5               	movwf	??_sprintf+2
  4986  040F  120A  118A  261F  120A  118A  	fcall	stringdir
  4987  0414  00B6               	movwf	??_sprintf+3
  4988  0415  120A  118A  261F  120A  118A  	fcall	stringdir
  4989  041A  00B7               	movwf	??_sprintf+4
  4990  041B  0837               	movf	??_sprintf+4,w
  4991  041C  023D               	subwf	sprintf@_val+3,w
  4992  041D  1D03               	skipz
  4993  041E  2C29               	goto	u286_25
  4994  041F  0836               	movf	??_sprintf+3,w
  4995  0420  023C               	subwf	sprintf@_val+2,w
  4996  0421  1D03               	skipz
  4997  0422  2C29               	goto	u286_25
  4998  0423  0835               	movf	??_sprintf+2,w
  4999  0424  023B               	subwf	sprintf@_val+1,w
  5000  0425  1D03               	skipz
  5001  0426  2C29               	goto	u286_25
  5002  0427  0834               	movf	??_sprintf+1,w
  5003  0428  023A               	subwf	sprintf@_val,w
  5004  0429                     u286_25:	
  5005  0429  1C03               	btfss	3,0
  5006  042A  2C33               	goto	i1l2338
  5007                           
  5008                           ;doprnt.c: 1316: break;
  5009  042B  3001               	movlw	1
  5010  042C  00B3               	movwf	??_sprintf
  5011  042D  0833               	movf	??_sprintf,w
  5012  042E  07C3               	addwf	sprintf@c,f
  5013  042F  0843               	movf	sprintf@c,w
  5014  0430  3A0A               	xorlw	10
  5015  0431  1D03               	skipz
  5016  0432  2BF7               	goto	i1l2330
  5017  0433                     i1l2338:	
  5018                           
  5019                           ;doprnt.c: 1348: if(c < prec)
  5020  0433  0843               	movf	sprintf@c,w
  5021  0434  00B3               	movwf	??_sprintf
  5022  0435  01B4               	clrf	??_sprintf+1
  5023  0436  1BB3               	btfsc	??_sprintf,7
  5024  0437  03B4               	decf	??_sprintf+1,f
  5025  0438  0834               	movf	??_sprintf+1,w
  5026  0439  3A80               	xorlw	128
  5027  043A  00B5               	movwf	??_sprintf+2
  5028  043B  0842               	movf	sprintf@prec+1,w
  5029  043C  3A80               	xorlw	128
  5030  043D  0235               	subwf	??_sprintf+2,w
  5031  043E  1D03               	skipz
  5032  043F  2C42               	goto	u288_25
  5033  0440  0841               	movf	sprintf@prec,w
  5034  0441  0233               	subwf	??_sprintf,w
  5035  0442                     u288_25:	
  5036  0442  1803               	skipnc
  5037  0443  2C4B               	goto	i1l2342
  5038                           
  5039                           ;doprnt.c: 1349: c = prec;
  5040  0444  1283               	bcf	3,5	;RP0=0, select bank0
  5041  0445  1303               	bcf	3,6	;RP1=0, select bank0
  5042  0446  0841               	movf	sprintf@prec,w
  5043  0447  00B3               	movwf	??_sprintf
  5044  0448  0833               	movf	??_sprintf,w
  5045  0449  00C3               	movwf	sprintf@c
  5046  044A  2C65               	goto	i1l2346
  5047  044B                     i1l2342:	
  5048                           
  5049                           ;doprnt.c: 1350: else if(prec < c)
  5050  044B  1283               	bcf	3,5	;RP0=0, select bank0
  5051  044C  1303               	bcf	3,6	;RP1=0, select bank0
  5052  044D  0843               	movf	sprintf@c,w
  5053  044E  00B3               	movwf	??_sprintf
  5054  044F  01B4               	clrf	??_sprintf+1
  5055  0450  1BB3               	btfsc	??_sprintf,7
  5056  0451  03B4               	decf	??_sprintf+1,f
  5057  0452  0842               	movf	sprintf@prec+1,w
  5058  0453  3A80               	xorlw	128
  5059  0454  00B5               	movwf	??_sprintf+2
  5060  0455  0834               	movf	??_sprintf+1,w
  5061  0456  3A80               	xorlw	128
  5062  0457  0235               	subwf	??_sprintf+2,w
  5063  0458  1D03               	skipz
  5064  0459  2C5C               	goto	u289_25
  5065  045A  0833               	movf	??_sprintf,w
  5066  045B  0241               	subwf	sprintf@prec,w
  5067  045C                     u289_25:	
  5068  045C  1803               	skipnc
  5069  045D  2C65               	goto	i1l2346
  5070                           
  5071                           ;doprnt.c: 1351: prec = c;
  5072  045E  1283               	bcf	3,5	;RP0=0, select bank0
  5073  045F  1303               	bcf	3,6	;RP1=0, select bank0
  5074  0460  0843               	movf	sprintf@c,w
  5075  0461  00C1               	movwf	sprintf@prec
  5076  0462  01C2               	clrf	sprintf@prec+1
  5077  0463  1BC1               	btfsc	sprintf@prec,7
  5078  0464  03C2               	decf	sprintf@prec+1,f
  5079  0465                     i1l2346:	
  5080                           
  5081                           ;doprnt.c: 1390: if(width > c)
  5082  0465  1283               	bcf	3,5	;RP0=0, select bank0
  5083  0466  1303               	bcf	3,6	;RP1=0, select bank0
  5084  0467  0843               	movf	sprintf@c,w
  5085  0468  00B3               	movwf	??_sprintf
  5086  0469  01B4               	clrf	??_sprintf+1
  5087  046A  1BB3               	btfsc	??_sprintf,7
  5088  046B  03B4               	decf	??_sprintf+1,f
  5089  046C  0834               	movf	??_sprintf+1,w
  5090  046D  3A80               	xorlw	128
  5091  046E  00B5               	movwf	??_sprintf+2
  5092  046F  0840               	movf	sprintf@width+1,w
  5093  0470  3A80               	xorlw	128
  5094  0471  0235               	subwf	??_sprintf+2,w
  5095  0472  1D03               	skipz
  5096  0473  2C76               	goto	u290_25
  5097  0474  083F               	movf	sprintf@width,w
  5098  0475  0233               	subwf	??_sprintf,w
  5099  0476                     u290_25:	
  5100  0476  1803               	skipnc
  5101  0477  2C86               	goto	i1l2350
  5102                           
  5103                           ;doprnt.c: 1391: width -= c;
  5104  0478  1283               	bcf	3,5	;RP0=0, select bank0
  5105  0479  1303               	bcf	3,6	;RP1=0, select bank0
  5106  047A  0843               	movf	sprintf@c,w
  5107  047B  00B3               	movwf	??_sprintf
  5108  047C  01B4               	clrf	??_sprintf+1
  5109  047D  1BB3               	btfsc	??_sprintf,7
  5110  047E  03B4               	decf	??_sprintf+1,f
  5111  047F  0833               	movf	??_sprintf,w
  5112  0480  02BF               	subwf	sprintf@width,f
  5113  0481  0834               	movf	??_sprintf+1,w
  5114  0482  1C03               	skipc
  5115  0483  03C0               	decf	sprintf@width+1,f
  5116  0484  02C0               	subwf	sprintf@width+1,f
  5117  0485  2C8A               	goto	i1l2352
  5118  0486                     i1l2350:	
  5119                           
  5120                           ;doprnt.c: 1392: else
  5121                           ;doprnt.c: 1393: width = 0;
  5122  0486  1283               	bcf	3,5	;RP0=0, select bank0
  5123  0487  1303               	bcf	3,6	;RP1=0, select bank0
  5124  0488  01BF               	clrf	sprintf@width
  5125  0489  01C0               	clrf	sprintf@width+1
  5126  048A                     i1l2352:	
  5127                           
  5128                           ;doprnt.c: 1431: {
  5129                           ;doprnt.c: 1433: if(width
  5130                           ;doprnt.c: 1437: )
  5131  048A  0840               	movf	sprintf@width+1,w
  5132  048B  043F               	iorwf	sprintf@width,w
  5133  048C  1903               	skipnz
  5134  048D  2CFA               	goto	i1l2366
  5135                           
  5136                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  5137                           
  5138                           ;doprnt.c: 1438: do
  5139  048E  3020               	movlw	32
  5140  048F  00B3               	movwf	??_sprintf
  5141  0490  083E               	movf	sprintf@sp,w
  5142  0491  0084               	movwf	4
  5143  0492  0833               	movf	??_sprintf,w
  5144  0493  1783               	bsf	3,7	;select IRP bank2
  5145  0494  0080               	movwf	0
  5146  0495  3001               	movlw	1
  5147  0496  00B3               	movwf	??_sprintf
  5148  0497  0833               	movf	??_sprintf,w
  5149  0498  07BE               	addwf	sprintf@sp,f
  5150                           
  5151                           ;doprnt.c: 1440: while(--width);
  5152  0499  30FF               	movlw	255
  5153  049A  07BF               	addwf	sprintf@width,f
  5154  049B  1803               	skipnc
  5155  049C  0AC0               	incf	sprintf@width+1,f
  5156  049D  30FF               	movlw	255
  5157  049E  07C0               	addwf	sprintf@width+1,f
  5158  049F  2C8A               	goto	i1l2352
  5159  04A0                     i1l2360:	
  5160                           ;doprnt.c: 1478: }
  5161                           ;doprnt.c: 1483: while(prec--) {
  5162                           
  5163                           
  5164                           ;doprnt.c: 1487: {
  5165                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5166  04A0  3000               	movlw	0
  5167  04A1  00A3               	movwf	___llmod@divisor+3
  5168  04A2  3000               	movlw	0
  5169  04A3  00A2               	movwf	___llmod@divisor+2
  5170  04A4  3000               	movlw	0
  5171  04A5  00A1               	movwf	___llmod@divisor+1
  5172  04A6  300A               	movlw	10
  5173  04A7  00A0               	movwf	___llmod@divisor
  5174  04A8  0841               	movf	sprintf@prec,w
  5175  04A9  00B3               	movwf	??_sprintf
  5176  04AA  3001               	movlw	1
  5177  04AB                     u293_25:	
  5178  04AB  1003               	clrc
  5179  04AC  0DB3               	rlf	??_sprintf,f
  5180  04AD  3EFF               	addlw	-1
  5181  04AE  1D03               	skipz
  5182  04AF  2CAB               	goto	u293_25
  5183  04B0  1003               	clrc
  5184  04B1  0D33               	rlf	??_sprintf,w
  5185  04B2  3E01               	addlw	low (_dpowers-__stringbase)
  5186  04B3  0084               	movwf	4
  5187  04B4  120A  118A  261F  120A  118A  	fcall	stringdir
  5188  04B9  00F0               	movwf	___lldiv@divisor
  5189  04BA  120A  118A  261F  120A  118A  	fcall	stringdir
  5190  04BF  00F1               	movwf	___lldiv@divisor+1
  5191  04C0  120A  118A  261F  120A  118A  	fcall	stringdir
  5192  04C5  00F2               	movwf	___lldiv@divisor+2
  5193  04C6  120A  118A  261F  120A  118A  	fcall	stringdir
  5194  04CB  00F3               	movwf	___lldiv@divisor+3
  5195  04CC  083D               	movf	sprintf@_val+3,w
  5196  04CD  00F7               	movwf	___lldiv@dividend+3
  5197  04CE  083C               	movf	sprintf@_val+2,w
  5198  04CF  00F6               	movwf	___lldiv@dividend+2
  5199  04D0  083B               	movf	sprintf@_val+1,w
  5200  04D1  00F5               	movwf	___lldiv@dividend+1
  5201  04D2  083A               	movf	sprintf@_val,w
  5202  04D3  00F4               	movwf	___lldiv@dividend
  5203  04D4  120A  158A  2351  120A  118A  	fcall	___lldiv
  5204  04D9  0873               	movf	?___lldiv+3,w
  5205  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  5206  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  5207  04DC  00A7               	movwf	___llmod@dividend+3
  5208  04DD  0872               	movf	?___lldiv+2,w
  5209  04DE  00A6               	movwf	___llmod@dividend+2
  5210  04DF  0871               	movf	?___lldiv+1,w
  5211  04E0  00A5               	movwf	___llmod@dividend+1
  5212  04E1  0870               	movf	?___lldiv,w
  5213  04E2  00A4               	movwf	___llmod@dividend
  5214  04E3  120A  158A  2147  120A  118A  	fcall	___llmod
  5215  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  5216  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  5217  04EA  0820               	movf	?___llmod,w
  5218  04EB  3E30               	addlw	48
  5219  04EC  00B4               	movwf	??_sprintf+1
  5220  04ED  0834               	movf	??_sprintf+1,w
  5221  04EE  00C3               	movwf	sprintf@c
  5222                           
  5223                           ;doprnt.c: 1532: }
  5224                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5225  04EF  0843               	movf	sprintf@c,w
  5226  04F0  00B3               	movwf	??_sprintf
  5227  04F1  083E               	movf	sprintf@sp,w
  5228  04F2  0084               	movwf	4
  5229  04F3  0833               	movf	??_sprintf,w
  5230  04F4  1783               	bsf	3,7	;select IRP bank2
  5231  04F5  0080               	movwf	0
  5232  04F6  3001               	movlw	1
  5233  04F7  00B3               	movwf	??_sprintf
  5234  04F8  0833               	movf	??_sprintf,w
  5235  04F9  07BE               	addwf	sprintf@sp,f
  5236  04FA                     i1l2366:	
  5237  04FA  30FF               	movlw	255
  5238  04FB  07C1               	addwf	sprintf@prec,f
  5239  04FC  1803               	skipnc
  5240  04FD  0AC2               	incf	sprintf@prec+1,f
  5241  04FE  30FF               	movlw	255
  5242  04FF  07C2               	addwf	sprintf@prec+1,f
  5243  0500  30FF               	movlw	255
  5244  0501  0642               	xorwf	sprintf@prec+1,w
  5245  0502  1D03               	skipz
  5246  0503  2D06               	goto	u294_25
  5247  0504  30FF               	movlw	255
  5248  0505  0641               	xorwf	sprintf@prec,w
  5249  0506                     u294_25:	
  5250  0506  1903               	btfsc	3,2
  5251  0507  2AD9               	goto	i1l2368
  5252  0508  2CA0               	goto	i1l2360
  5253  0509                     i1l2370:	
  5254                           ;doprnt.c: 1534: }
  5255                           ;doprnt.c: 1542: }
  5256                           ;doprnt.c: 1544: alldone:
  5257                           
  5258                           
  5259                           ;doprnt.c: 1547: *sp = 0;
  5260  0509  083E               	movf	sprintf@sp,w
  5261  050A  0084               	movwf	4
  5262  050B  1783               	bsf	3,7	;select IRP bank2
  5263  050C  0180               	clrf	0
  5264  050D  0008               	return
  5265  050E                     __end_of_sprintf:	
  5266                           ;doprnt.c: 1549: return 0;
  5267                           ;	Return value of _sprintf is never used
  5268                           
  5269                           
  5270                           	psect	text22
  5271  1675                     __ptext22:	
  5272 ;; *************** function _isdigit *****************
  5273 ;; Defined at:
  5274 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\isdigit.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  c               1    wreg     unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  c               1    1[COMMON] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5288 ;;      Params:         0       0       0       0       0
  5289 ;;      Locals:         2       0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0
  5291 ;;      Totals:         2       0       0       0       0
  5292 ;;Total ram usage:        2 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_sprintf
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           
  5302                           ;psect for function _isdigit
  5303  1675                     _isdigit:	
  5304                           
  5305                           ;incstack = 0
  5306 ;; hardware stack exceeded
  5307                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5308                           ;isdigit@c stored from wreg
  5309  1675  00F1               	movwf	isdigit@c
  5310  1676  01F0               	clrf	_isdigit$887
  5311  1677  303A               	movlw	58
  5312  1678  0271               	subwf	isdigit@c,w
  5313  1679  1803               	skipnc
  5314  167A  2E81               	goto	i1l1976
  5315  167B  3030               	movlw	48
  5316  167C  0271               	subwf	isdigit@c,w
  5317  167D  1C03               	skipc
  5318  167E  2E81               	goto	i1l1976
  5319  167F  01F0               	clrf	_isdigit$887
  5320  1680  0AF0               	incf	_isdigit$887,f
  5321  1681                     i1l1976:	
  5322  1681  0C70               	rrf	_isdigit$887,w
  5323  1682  0008               	return
  5324  1683                     __end_of_isdigit:	
  5325                           
  5326                           	psect	text23
  5327  1787                     __ptext23:	
  5328 ;; *************** function ___wmul *****************
  5329 ;; Defined at:
  5330 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  multiplier      2    0[COMMON] unsigned int 
  5333 ;;  multiplicand    2    2[COMMON] unsigned int 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  product         2    4[COMMON] unsigned int 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  2    0[COMMON] unsigned int 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5345 ;;      Params:         4       0       0       0       0
  5346 ;;      Locals:         2       0       0       0       0
  5347 ;;      Temps:          0       0       0       0       0
  5348 ;;      Totals:         6       0       0       0       0
  5349 ;;Total ram usage:        6 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_sprintf
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function ___wmul
  5360  1787                     ___wmul:	
  5361                           
  5362                           ;incstack = 0
  5363 ;; hardware stack exceeded
  5364                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5365  1787  01F4               	clrf	___wmul@product
  5366  1788  01F5               	clrf	___wmul@product+1
  5367  1789                     i1l1982:	
  5368  1789  1C70               	btfss	___wmul@multiplier,0
  5369  178A  2F91               	goto	i1l358
  5370  178B  0872               	movf	___wmul@multiplicand,w
  5371  178C  07F4               	addwf	___wmul@product,f
  5372  178D  1803               	skipnc
  5373  178E  0AF5               	incf	___wmul@product+1,f
  5374  178F  0873               	movf	___wmul@multiplicand+1,w
  5375  1790  07F5               	addwf	___wmul@product+1,f
  5376  1791                     i1l358:	
  5377  1791  3001               	movlw	1
  5378  1792                     u215_25:	
  5379  1792  1003               	clrc
  5380  1793  0DF2               	rlf	___wmul@multiplicand,f
  5381  1794  0DF3               	rlf	___wmul@multiplicand+1,f
  5382  1795  3EFF               	addlw	-1
  5383  1796  1D03               	skipz
  5384  1797  2F92               	goto	u215_25
  5385  1798  3001               	movlw	1
  5386  1799                     u216_25:	
  5387  1799  1003               	clrc
  5388  179A  0CF1               	rrf	___wmul@multiplier+1,f
  5389  179B  0CF0               	rrf	___wmul@multiplier,f
  5390  179C  3EFF               	addlw	-1
  5391  179D  1D03               	skipz
  5392  179E  2F99               	goto	u216_25
  5393  179F  0871               	movf	___wmul@multiplier+1,w
  5394  17A0  0470               	iorwf	___wmul@multiplier,w
  5395  17A1  1D03               	skipz
  5396  17A2  2F89               	goto	i1l1982
  5397  17A3  0875               	movf	___wmul@product+1,w
  5398  17A4  01F1               	clrf	?___wmul+1
  5399  17A5  07F1               	addwf	?___wmul+1,f
  5400  17A6  0874               	movf	___wmul@product,w
  5401  17A7  01F0               	clrf	?___wmul
  5402  17A8  07F0               	addwf	?___wmul,f
  5403  17A9  0008               	return
  5404  17AA                     __end_of___wmul:	
  5405                           
  5406                           	psect	text24
  5407  0947                     __ptext24:	
  5408 ;; *************** function ___llmod *****************
  5409 ;; Defined at:
  5410 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\llmod.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  divisor         4    0[BANK0 ] unsigned long 
  5413 ;;  dividend        4    4[BANK0 ] unsigned long 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  counter         1    9[BANK0 ] unsigned char 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  4    0[BANK0 ] unsigned long 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2, status,0
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5425 ;;      Params:         0       8       0       0       0
  5426 ;;      Locals:         0       1       0       0       0
  5427 ;;      Temps:          0       1       0       0       0
  5428 ;;      Totals:         0      10       0       0       0
  5429 ;;Total ram usage:       10 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; This function calls:
  5432 ;;		Nothing
  5433 ;; This function is called by:
  5434 ;;		_sprintf
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           
  5439                           ;psect for function ___llmod
  5440  0947                     ___llmod:	
  5441                           
  5442                           ;incstack = 0
  5443 ;; hardware stack exceeded
  5444                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5445  0947  1283               	bcf	3,5	;RP0=0, select bank0
  5446  0948  1303               	bcf	3,6	;RP1=0, select bank0
  5447  0949  0823               	movf	___llmod@divisor+3,w
  5448  094A  0422               	iorwf	___llmod@divisor+2,w
  5449  094B  0421               	iorwf	___llmod@divisor+1,w
  5450  094C  0420               	iorwf	___llmod@divisor,w
  5451  094D  1903               	skipnz
  5452  094E  298C               	goto	i1l2144
  5453  094F  01A9               	clrf	___llmod@counter
  5454  0950  0AA9               	incf	___llmod@counter,f
  5455  0951                     i1l2134:	
  5456  0951  1BA3               	btfsc	___llmod@divisor+3,7
  5457  0952  2961               	goto	i1l2136
  5458  0953  3001               	movlw	1
  5459  0954  00A8               	movwf	??___llmod
  5460  0955                     u260_25:	
  5461  0955  1003               	clrc
  5462  0956  0DA0               	rlf	___llmod@divisor,f
  5463  0957  0DA1               	rlf	___llmod@divisor+1,f
  5464  0958  0DA2               	rlf	___llmod@divisor+2,f
  5465  0959  0DA3               	rlf	___llmod@divisor+3,f
  5466  095A  0BA8               	decfsz	??___llmod,f
  5467  095B  2955               	goto	u260_25
  5468  095C  3001               	movlw	1
  5469  095D  00A8               	movwf	??___llmod
  5470  095E  0828               	movf	??___llmod,w
  5471  095F  07A9               	addwf	___llmod@counter,f
  5472  0960  2951               	goto	i1l2134
  5473  0961                     i1l2136:	
  5474  0961  0823               	movf	___llmod@divisor+3,w
  5475  0962  0227               	subwf	___llmod@dividend+3,w
  5476  0963  1D03               	skipz
  5477  0964  296F               	goto	u262_25
  5478  0965  0822               	movf	___llmod@divisor+2,w
  5479  0966  0226               	subwf	___llmod@dividend+2,w
  5480  0967  1D03               	skipz
  5481  0968  296F               	goto	u262_25
  5482  0969  0821               	movf	___llmod@divisor+1,w
  5483  096A  0225               	subwf	___llmod@dividend+1,w
  5484  096B  1D03               	skipz
  5485  096C  296F               	goto	u262_25
  5486  096D  0820               	movf	___llmod@divisor,w
  5487  096E  0224               	subwf	___llmod@dividend,w
  5488  096F                     u262_25:	
  5489  096F  1C03               	skipc
  5490  0970  297F               	goto	i1l2140
  5491  0971  0820               	movf	___llmod@divisor,w
  5492  0972  02A4               	subwf	___llmod@dividend,f
  5493  0973  0821               	movf	___llmod@divisor+1,w
  5494  0974  1C03               	skipc
  5495  0975  0F21               	incfsz	___llmod@divisor+1,w
  5496  0976  02A5               	subwf	___llmod@dividend+1,f
  5497  0977  0822               	movf	___llmod@divisor+2,w
  5498  0978  1C03               	skipc
  5499  0979  0F22               	incfsz	___llmod@divisor+2,w
  5500  097A  02A6               	subwf	___llmod@dividend+2,f
  5501  097B  0823               	movf	___llmod@divisor+3,w
  5502  097C  1C03               	skipc
  5503  097D  0F23               	incfsz	___llmod@divisor+3,w
  5504  097E  02A7               	subwf	___llmod@dividend+3,f
  5505  097F                     i1l2140:	
  5506  097F  3001               	movlw	1
  5507  0980                     u263_25:	
  5508  0980  1003               	clrc
  5509  0981  0CA3               	rrf	___llmod@divisor+3,f
  5510  0982  0CA2               	rrf	___llmod@divisor+2,f
  5511  0983  0CA1               	rrf	___llmod@divisor+1,f
  5512  0984  0CA0               	rrf	___llmod@divisor,f
  5513  0985  3EFF               	addlw	-1
  5514  0986  1D03               	skipz
  5515  0987  2980               	goto	u263_25
  5516  0988  3001               	movlw	1
  5517  0989  02A9               	subwf	___llmod@counter,f
  5518  098A  1D03               	btfss	3,2
  5519  098B  2961               	goto	i1l2136
  5520  098C                     i1l2144:	
  5521  098C  0827               	movf	___llmod@dividend+3,w
  5522  098D  00A3               	movwf	?___llmod+3
  5523  098E  0826               	movf	___llmod@dividend+2,w
  5524  098F  00A2               	movwf	?___llmod+2
  5525  0990  0825               	movf	___llmod@dividend+1,w
  5526  0991  00A1               	movwf	?___llmod+1
  5527  0992  0824               	movf	___llmod@dividend,w
  5528  0993  00A0               	movwf	?___llmod
  5529  0994  0008               	return
  5530  0995                     __end_of___llmod:	
  5531                           
  5532                           	psect	text25
  5533  0B51                     __ptext25:	
  5534 ;; *************** function ___lldiv *****************
  5535 ;; Defined at:
  5536 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  divisor         4    0[COMMON] unsigned long 
  5539 ;;  dividend        4    4[COMMON] unsigned long 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  quotient        4    9[COMMON] unsigned long 
  5542 ;;  counter         1   13[COMMON] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  4    0[COMMON] unsigned long 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5552 ;;      Params:         8       0       0       0       0
  5553 ;;      Locals:         5       0       0       0       0
  5554 ;;      Temps:          1       0       0       0       0
  5555 ;;      Totals:        14       0       0       0       0
  5556 ;;Total ram usage:       14 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_sprintf
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function ___lldiv
  5567  0B51                     ___lldiv:	
  5568                           
  5569                           ;incstack = 0
  5570 ;; hardware stack exceeded
  5571                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5572  0B51  3000               	movlw	0
  5573  0B52  00FC               	movwf	___lldiv@quotient+3
  5574  0B53  3000               	movlw	0
  5575  0B54  00FB               	movwf	___lldiv@quotient+2
  5576  0B55  3000               	movlw	0
  5577  0B56  00FA               	movwf	___lldiv@quotient+1
  5578  0B57  3000               	movlw	0
  5579  0B58  00F9               	movwf	___lldiv@quotient
  5580  0B59  0873               	movf	___lldiv@divisor+3,w
  5581  0B5A  0472               	iorwf	___lldiv@divisor+2,w
  5582  0B5B  0471               	iorwf	___lldiv@divisor+1,w
  5583  0B5C  0470               	iorwf	___lldiv@divisor,w
  5584  0B5D  1903               	skipnz
  5585  0B5E  2BA6               	goto	i1l2124
  5586  0B5F  01FD               	clrf	___lldiv@counter
  5587  0B60  0AFD               	incf	___lldiv@counter,f
  5588  0B61                     i1l2110:	
  5589  0B61  1BF3               	btfsc	___lldiv@divisor+3,7
  5590  0B62  2B71               	goto	i1l2112
  5591  0B63  3001               	movlw	1
  5592  0B64  00F8               	movwf	??___lldiv
  5593  0B65                     u253_25:	
  5594  0B65  1003               	clrc
  5595  0B66  0DF0               	rlf	___lldiv@divisor,f
  5596  0B67  0DF1               	rlf	___lldiv@divisor+1,f
  5597  0B68  0DF2               	rlf	___lldiv@divisor+2,f
  5598  0B69  0DF3               	rlf	___lldiv@divisor+3,f
  5599  0B6A  0BF8               	decfsz	??___lldiv,f
  5600  0B6B  2B65               	goto	u253_25
  5601  0B6C  3001               	movlw	1
  5602  0B6D  00F8               	movwf	??___lldiv
  5603  0B6E  0878               	movf	??___lldiv,w
  5604  0B6F  07FD               	addwf	___lldiv@counter,f
  5605  0B70  2B61               	goto	i1l2110
  5606  0B71                     i1l2112:	
  5607  0B71  3001               	movlw	1
  5608  0B72  00F8               	movwf	??___lldiv
  5609  0B73                     u255_25:	
  5610  0B73  1003               	clrc
  5611  0B74  0DF9               	rlf	___lldiv@quotient,f
  5612  0B75  0DFA               	rlf	___lldiv@quotient+1,f
  5613  0B76  0DFB               	rlf	___lldiv@quotient+2,f
  5614  0B77  0DFC               	rlf	___lldiv@quotient+3,f
  5615  0B78  0BF8               	decfsz	??___lldiv,f
  5616  0B79  2B73               	goto	u255_25
  5617  0B7A  0873               	movf	___lldiv@divisor+3,w
  5618  0B7B  0277               	subwf	___lldiv@dividend+3,w
  5619  0B7C  1D03               	skipz
  5620  0B7D  2B88               	goto	u256_25
  5621  0B7E  0872               	movf	___lldiv@divisor+2,w
  5622  0B7F  0276               	subwf	___lldiv@dividend+2,w
  5623  0B80  1D03               	skipz
  5624  0B81  2B88               	goto	u256_25
  5625  0B82  0871               	movf	___lldiv@divisor+1,w
  5626  0B83  0275               	subwf	___lldiv@dividend+1,w
  5627  0B84  1D03               	skipz
  5628  0B85  2B88               	goto	u256_25
  5629  0B86  0870               	movf	___lldiv@divisor,w
  5630  0B87  0274               	subwf	___lldiv@dividend,w
  5631  0B88                     u256_25:	
  5632  0B88  1C03               	skipc
  5633  0B89  2B99               	goto	i1l2120
  5634  0B8A  0870               	movf	___lldiv@divisor,w
  5635  0B8B  02F4               	subwf	___lldiv@dividend,f
  5636  0B8C  0871               	movf	___lldiv@divisor+1,w
  5637  0B8D  1C03               	skipc
  5638  0B8E  0F71               	incfsz	___lldiv@divisor+1,w
  5639  0B8F  02F5               	subwf	___lldiv@dividend+1,f
  5640  0B90  0872               	movf	___lldiv@divisor+2,w
  5641  0B91  1C03               	skipc
  5642  0B92  0F72               	incfsz	___lldiv@divisor+2,w
  5643  0B93  02F6               	subwf	___lldiv@dividend+2,f
  5644  0B94  0873               	movf	___lldiv@divisor+3,w
  5645  0B95  1C03               	skipc
  5646  0B96  0F73               	incfsz	___lldiv@divisor+3,w
  5647  0B97  02F7               	subwf	___lldiv@dividend+3,f
  5648  0B98  1479               	bsf	___lldiv@quotient,0
  5649  0B99                     i1l2120:	
  5650  0B99  3001               	movlw	1
  5651  0B9A                     u257_25:	
  5652  0B9A  1003               	clrc
  5653  0B9B  0CF3               	rrf	___lldiv@divisor+3,f
  5654  0B9C  0CF2               	rrf	___lldiv@divisor+2,f
  5655  0B9D  0CF1               	rrf	___lldiv@divisor+1,f
  5656  0B9E  0CF0               	rrf	___lldiv@divisor,f
  5657  0B9F  3EFF               	addlw	-1
  5658  0BA0  1D03               	skipz
  5659  0BA1  2B9A               	goto	u257_25
  5660  0BA2  3001               	movlw	1
  5661  0BA3  02FD               	subwf	___lldiv@counter,f
  5662  0BA4  1D03               	btfss	3,2
  5663  0BA5  2B71               	goto	i1l2112
  5664  0BA6                     i1l2124:	
  5665  0BA6  087C               	movf	___lldiv@quotient+3,w
  5666  0BA7  00F3               	movwf	?___lldiv+3
  5667  0BA8  087B               	movf	___lldiv@quotient+2,w
  5668  0BA9  00F2               	movwf	?___lldiv+2
  5669  0BAA  087A               	movf	___lldiv@quotient+1,w
  5670  0BAB  00F1               	movwf	?___lldiv+1
  5671  0BAC  0879               	movf	___lldiv@quotient,w
  5672  0BAD  00F0               	movwf	?___lldiv
  5673  0BAE  0008               	return
  5674  0BAF                     __end_of___lldiv:	
  5675                           
  5676                           	psect	text26
  5677  17AA                     __ptext26:	
  5678 ;; *************** function ___lltoft *****************
  5679 ;; Defined at:
  5680 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lltoft.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  c               4    8[COMMON] unsigned long 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  exp             1   13[COMMON] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  3    8[COMMON] float 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5694 ;;      Params:         4       0       0       0       0
  5695 ;;      Locals:         1       0       0       0       0
  5696 ;;      Temps:          1       0       0       0       0
  5697 ;;      Totals:         6       0       0       0       0
  5698 ;;Total ram usage:        6 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    1
  5701 ;; This function calls:
  5702 ;;		___ftpack
  5703 ;; This function is called by:
  5704 ;;		_ftoa
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function ___lltoft
  5710  17AA                     ___lltoft:	
  5711                           
  5712                           ;incstack = 0
  5713 ;; hardware stack exceeded
  5714                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5715  17AA  308E               	movlw	142
  5716  17AB  00FC               	movwf	??___lltoft
  5717  17AC  087C               	movf	??___lltoft,w
  5718  17AD  00FD               	movwf	___lltoft@exp
  5719  17AE                     i1l2506:	
  5720  17AE  30FF               	movlw	255
  5721  17AF  057B               	andwf	___lltoft@c+3,w
  5722  17B0  1903               	btfsc	3,2
  5723  17B1  2FC0               	goto	i1l2508
  5724  17B2  3001               	movlw	1
  5725  17B3                     u326_25:	
  5726  17B3  1003               	clrc
  5727  17B4  0CFB               	rrf	___lltoft@c+3,f
  5728  17B5  0CFA               	rrf	___lltoft@c+2,f
  5729  17B6  0CF9               	rrf	___lltoft@c+1,f
  5730  17B7  0CF8               	rrf	___lltoft@c,f
  5731  17B8  3EFF               	addlw	-1
  5732  17B9  1D03               	skipz
  5733  17BA  2FB3               	goto	u326_25
  5734  17BB  3001               	movlw	1
  5735  17BC  00FC               	movwf	??___lltoft
  5736  17BD  087C               	movf	??___lltoft,w
  5737  17BE  07FD               	addwf	___lltoft@exp,f
  5738  17BF  2FAE               	goto	i1l2506
  5739  17C0                     i1l2508:	
  5740  17C0  0878               	movf	___lltoft@c,w
  5741  17C1  00F0               	movwf	___ftpack@arg
  5742  17C2  0879               	movf	___lltoft@c+1,w
  5743  17C3  00F1               	movwf	___ftpack@arg+1
  5744  17C4  087A               	movf	___lltoft@c+2,w
  5745  17C5  00F2               	movwf	___ftpack@arg+2
  5746  17C6  087D               	movf	___lltoft@exp,w
  5747  17C7  00FC               	movwf	??___lltoft
  5748  17C8  087C               	movf	??___lltoft,w
  5749  17C9  00F3               	movwf	___ftpack@exp
  5750  17CA  01F4               	clrf	___ftpack@sign
  5751  17CB  120A  158A  2415   	fcall	___ftpack
  5752  17CE  0870               	movf	?___ftpack,w
  5753  17CF  00F8               	movwf	?___lltoft
  5754  17D0  0871               	movf	?___ftpack+1,w
  5755  17D1  00F9               	movwf	?___lltoft+1
  5756  17D2  0872               	movf	?___ftpack+2,w
  5757  17D3  00FA               	movwf	?___lltoft+2
  5758  17D4  0008               	return
  5759  17D5                     __end_of___lltoft:	
  5760                           
  5761                           	psect	text27
  5762  0D71                     __ptext27:	
  5763 ;; *************** function ___fttol *****************
  5764 ;; Defined at:
  5765 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\fttol.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  f1              3   16[BANK0 ] float 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  lval            4   25[BANK0 ] unsigned long 
  5770 ;;  exp1            1   29[BANK0 ] unsigned char 
  5771 ;;  sign1           1   24[BANK0 ] unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  4   16[BANK0 ] long 
  5774 ;; Registers used:
  5775 ;;		wreg, status,2, status,0
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5781 ;;      Params:         0       4       0       0       0
  5782 ;;      Locals:         0       6       0       0       0
  5783 ;;      Temps:          0       4       0       0       0
  5784 ;;      Totals:         0      14       0       0       0
  5785 ;;Total ram usage:       14 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; This function calls:
  5788 ;;		Nothing
  5789 ;; This function is called by:
  5790 ;;		_ISR
  5791 ;;		_ftoa
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           
  5796                           ;psect for function ___fttol
  5797  0D71                     ___fttol:	
  5798                           
  5799                           ;incstack = 0
  5800 ;; hardware stack exceeded
  5801                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5802  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  5803  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  5804  0D73  0830               	movf	___fttol@f1,w
  5805  0D74  00B4               	movwf	??___fttol
  5806  0D75  0831               	movf	___fttol@f1+1,w
  5807  0D76  00B5               	movwf	??___fttol+1
  5808  0D77  0832               	movf	___fttol@f1+2,w
  5809  0D78  00B6               	movwf	??___fttol+2
  5810  0D79  1003               	clrc
  5811  0D7A  0D35               	rlf	??___fttol+1,w
  5812  0D7B  0D36               	rlf	??___fttol+2,w
  5813  0D7C  00B7               	movwf	??___fttol+3
  5814  0D7D  0837               	movf	??___fttol+3,w
  5815  0D7E  00BD               	movwf	___fttol@exp1
  5816  0D7F  08BD               	movf	___fttol@exp1,f
  5817  0D80  1D03               	skipz
  5818  0D81  2D8B               	goto	i1l2464
  5819  0D82  3000               	movlw	0
  5820  0D83  00B3               	movwf	?___fttol+3
  5821  0D84  3000               	movlw	0
  5822  0D85  00B2               	movwf	?___fttol+2
  5823  0D86  3000               	movlw	0
  5824  0D87  00B1               	movwf	?___fttol+1
  5825  0D88  3000               	movlw	0
  5826  0D89  00B0               	movwf	?___fttol
  5827  0D8A  0008               	return
  5828  0D8B                     i1l2464:	
  5829  0D8B  0830               	movf	___fttol@f1,w
  5830  0D8C  00B4               	movwf	??___fttol
  5831  0D8D  0831               	movf	___fttol@f1+1,w
  5832  0D8E  00B5               	movwf	??___fttol+1
  5833  0D8F  0832               	movf	___fttol@f1+2,w
  5834  0D90  00B6               	movwf	??___fttol+2
  5835  0D91  3017               	movlw	23
  5836  0D92                     u317_25:	
  5837  0D92  1003               	clrc
  5838  0D93  0CB6               	rrf	??___fttol+2,f
  5839  0D94  0CB5               	rrf	??___fttol+1,f
  5840  0D95  0CB4               	rrf	??___fttol,f
  5841  0D96  3EFF               	addlw	-1
  5842  0D97  1D03               	skipz
  5843  0D98  2D92               	goto	u317_25
  5844  0D99  0834               	movf	??___fttol,w
  5845  0D9A  00B7               	movwf	??___fttol+3
  5846  0D9B  0837               	movf	??___fttol+3,w
  5847  0D9C  00B8               	movwf	___fttol@sign1
  5848  0D9D  17B1               	bsf	___fttol@f1+1,7
  5849  0D9E  30FF               	movlw	255
  5850  0D9F  05B0               	andwf	___fttol@f1,f
  5851  0DA0  30FF               	movlw	255
  5852  0DA1  05B1               	andwf	___fttol@f1+1,f
  5853  0DA2  3000               	movlw	0
  5854  0DA3  05B2               	andwf	___fttol@f1+2,f
  5855  0DA4  0830               	movf	___fttol@f1,w
  5856  0DA5  00B9               	movwf	___fttol@lval
  5857  0DA6  0831               	movf	___fttol@f1+1,w
  5858  0DA7  00BA               	movwf	___fttol@lval+1
  5859  0DA8  0832               	movf	___fttol@f1+2,w
  5860  0DA9  00BB               	movwf	___fttol@lval+2
  5861  0DAA  01BC               	clrf	___fttol@lval+3
  5862  0DAB  308E               	movlw	142
  5863  0DAC  02BD               	subwf	___fttol@exp1,f
  5864  0DAD  1FBD               	btfss	___fttol@exp1,7
  5865  0DAE  2DCD               	goto	i1l2484
  5866  0DAF  083D               	movf	___fttol@exp1,w
  5867  0DB0  3A80               	xorlw	128
  5868  0DB1  3E8F               	addlw	143
  5869  0DB2  1803               	skipnc
  5870  0DB3  2DBD               	goto	i1l2482
  5871  0DB4  3000               	movlw	0
  5872  0DB5  00B3               	movwf	?___fttol+3
  5873  0DB6  3000               	movlw	0
  5874  0DB7  00B2               	movwf	?___fttol+2
  5875  0DB8  3000               	movlw	0
  5876  0DB9  00B1               	movwf	?___fttol+1
  5877  0DBA  3000               	movlw	0
  5878  0DBB  00B0               	movwf	?___fttol
  5879  0DBC  0008               	return
  5880  0DBD                     i1l2482:	
  5881  0DBD  3001               	movlw	1
  5882  0DBE                     u320_25:	
  5883  0DBE  1003               	clrc
  5884  0DBF  0CBC               	rrf	___fttol@lval+3,f
  5885  0DC0  0CBB               	rrf	___fttol@lval+2,f
  5886  0DC1  0CBA               	rrf	___fttol@lval+1,f
  5887  0DC2  0CB9               	rrf	___fttol@lval,f
  5888  0DC3  3EFF               	addlw	-1
  5889  0DC4  1D03               	skipz
  5890  0DC5  2DBE               	goto	u320_25
  5891  0DC6  3001               	movlw	1
  5892  0DC7  00B4               	movwf	??___fttol
  5893  0DC8  0834               	movf	??___fttol,w
  5894  0DC9  07BD               	addwf	___fttol@exp1,f
  5895  0DCA  1903               	btfsc	3,2
  5896  0DCB  2DE8               	goto	i1l2494
  5897  0DCC  2DBD               	goto	i1l2482
  5898  0DCD                     i1l2484:	
  5899  0DCD  3018               	movlw	24
  5900  0DCE  023D               	subwf	___fttol@exp1,w
  5901  0DCF  1C03               	skipc
  5902  0DD0  2DE5               	goto	i1l2492
  5903  0DD1  3000               	movlw	0
  5904  0DD2  00B3               	movwf	?___fttol+3
  5905  0DD3  3000               	movlw	0
  5906  0DD4  00B2               	movwf	?___fttol+2
  5907  0DD5  3000               	movlw	0
  5908  0DD6  00B1               	movwf	?___fttol+1
  5909  0DD7  3000               	movlw	0
  5910  0DD8  00B0               	movwf	?___fttol
  5911  0DD9  0008               	return
  5912  0DDA                     i1l2490:	
  5913  0DDA  3001               	movlw	1
  5914  0DDB  00B4               	movwf	??___fttol
  5915  0DDC                     u323_25:	
  5916  0DDC  1003               	clrc
  5917  0DDD  0DB9               	rlf	___fttol@lval,f
  5918  0DDE  0DBA               	rlf	___fttol@lval+1,f
  5919  0DDF  0DBB               	rlf	___fttol@lval+2,f
  5920  0DE0  0DBC               	rlf	___fttol@lval+3,f
  5921  0DE1  0BB4               	decfsz	??___fttol,f
  5922  0DE2  2DDC               	goto	u323_25
  5923  0DE3  3001               	movlw	1
  5924  0DE4  02BD               	subwf	___fttol@exp1,f
  5925  0DE5                     i1l2492:	
  5926  0DE5  08BD               	movf	___fttol@exp1,f
  5927  0DE6  1D03               	skipz
  5928  0DE7  2DDA               	goto	i1l2490
  5929  0DE8                     i1l2494:	
  5930  0DE8  0838               	movf	___fttol@sign1,w
  5931  0DE9  1903               	btfsc	3,2
  5932  0DEA  2DF6               	goto	i1l2498
  5933  0DEB  09B9               	comf	___fttol@lval,f
  5934  0DEC  09BA               	comf	___fttol@lval+1,f
  5935  0DED  09BB               	comf	___fttol@lval+2,f
  5936  0DEE  09BC               	comf	___fttol@lval+3,f
  5937  0DEF  0AB9               	incf	___fttol@lval,f
  5938  0DF0  1903               	skipnz
  5939  0DF1  0ABA               	incf	___fttol@lval+1,f
  5940  0DF2  1903               	skipnz
  5941  0DF3  0ABB               	incf	___fttol@lval+2,f
  5942  0DF4  1903               	skipnz
  5943  0DF5  0ABC               	incf	___fttol@lval+3,f
  5944  0DF6                     i1l2498:	
  5945  0DF6  083C               	movf	___fttol@lval+3,w
  5946  0DF7  00B3               	movwf	?___fttol+3
  5947  0DF8  083B               	movf	___fttol@lval+2,w
  5948  0DF9  00B2               	movwf	?___fttol+2
  5949  0DFA  083A               	movf	___fttol@lval+1,w
  5950  0DFB  00B1               	movwf	?___fttol+1
  5951  0DFC  0839               	movf	___fttol@lval,w
  5952  0DFD  00B0               	movwf	?___fttol
  5953  0DFE  0008               	return
  5954  0DFF                     __end_of___fttol:	
  5955                           
  5956                           	psect	text28
  5957  16EC                     __ptext28:	
  5958 ;; *************** function ___ftsub *****************
  5959 ;; Defined at:
  5960 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftsub.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  f2              3    7[BANK0 ] float 
  5963 ;;  f1              3   10[BANK0 ] float 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;		None
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  3    7[BANK0 ] float 
  5968 ;; Registers used:
  5969 ;;		wreg, status,2, status,0, pclath, cstack
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5975 ;;      Params:         0       6       0       0       0
  5976 ;;      Locals:         0       0       0       0       0
  5977 ;;      Temps:          0       0       0       0       0
  5978 ;;      Totals:         0       6       0       0       0
  5979 ;;Total ram usage:        6 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    2
  5982 ;; This function calls:
  5983 ;;		___ftadd
  5984 ;; This function is called by:
  5985 ;;		_ftoa
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function ___ftsub
  5991  16EC                     ___ftsub:	
  5992                           
  5993                           ;incstack = 0
  5994 ;; hardware stack exceeded
  5995                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5996  16EC  3080               	movlw	128
  5997  16ED  1283               	bcf	3,5	;RP0=0, select bank0
  5998  16EE  1303               	bcf	3,6	;RP1=0, select bank0
  5999  16EF  06A9               	xorwf	___ftsub@f2+2,f
  6000  16F0  082A               	movf	___ftsub@f1,w
  6001  16F1  00F8               	movwf	___ftadd@f1
  6002  16F2  082B               	movf	___ftsub@f1+1,w
  6003  16F3  00F9               	movwf	___ftadd@f1+1
  6004  16F4  082C               	movf	___ftsub@f1+2,w
  6005  16F5  00FA               	movwf	___ftadd@f1+2
  6006  16F6  0827               	movf	___ftsub@f2,w
  6007  16F7  00FB               	movwf	___ftadd@f2
  6008  16F8  0828               	movf	___ftsub@f2+1,w
  6009  16F9  00FC               	movwf	___ftadd@f2+1
  6010  16FA  0829               	movf	___ftsub@f2+2,w
  6011  16FB  00FD               	movwf	___ftadd@f2+2
  6012  16FC  120A  118A  250E   	fcall	___ftadd
  6013  16FF  0878               	movf	?___ftadd,w
  6014  1700  1283               	bcf	3,5	;RP0=0, select bank0
  6015  1701  1303               	bcf	3,6	;RP1=0, select bank0
  6016  1702  00A7               	movwf	?___ftsub
  6017  1703  0879               	movf	?___ftadd+1,w
  6018  1704  00A8               	movwf	?___ftsub+1
  6019  1705  087A               	movf	?___ftadd+2,w
  6020  1706  00A9               	movwf	?___ftsub+2
  6021  1707  0008               	return
  6022  1708                     __end_of___ftsub:	
  6023                           
  6024                           	psect	text29
  6025  050E                     __ptext29:	
  6026 ;; *************** function ___ftadd *****************
  6027 ;; Defined at:
  6028 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftadd.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  f1              3    8[COMMON] float 
  6031 ;;  f2              3   11[COMMON] float 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  exp1            1    6[BANK0 ] unsigned char 
  6034 ;;  exp2            1    5[BANK0 ] unsigned char 
  6035 ;;  sign            1    4[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  3    8[COMMON] float 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0, pclath, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6045 ;;      Params:         6       0       0       0       0
  6046 ;;      Locals:         0       3       0       0       0
  6047 ;;      Temps:          0       4       0       0       0
  6048 ;;      Totals:         6       7       0       0       0
  6049 ;;Total ram usage:       13 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    1
  6052 ;; This function calls:
  6053 ;;		___ftpack
  6054 ;; This function is called by:
  6055 ;;		___ftsub
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           
  6060                           ;psect for function ___ftadd
  6061  050E                     ___ftadd:	
  6062                           
  6063                           ;incstack = 0
  6064 ;; hardware stack exceeded
  6065                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6066  050E  0878               	movf	___ftadd@f1,w
  6067  050F  1283               	bcf	3,5	;RP0=0, select bank0
  6068  0510  1303               	bcf	3,6	;RP1=0, select bank0
  6069  0511  00A0               	movwf	??___ftadd
  6070  0512  0879               	movf	___ftadd@f1+1,w
  6071  0513  00A1               	movwf	??___ftadd+1
  6072  0514  087A               	movf	___ftadd@f1+2,w
  6073  0515  00A2               	movwf	??___ftadd+2
  6074  0516  1003               	clrc
  6075  0517  0D21               	rlf	??___ftadd+1,w
  6076  0518  0D22               	rlf	??___ftadd+2,w
  6077  0519  00A3               	movwf	??___ftadd+3
  6078  051A  0823               	movf	??___ftadd+3,w
  6079  051B  00A6               	movwf	___ftadd@exp1
  6080  051C  087B               	movf	___ftadd@f2,w
  6081  051D  00A0               	movwf	??___ftadd
  6082  051E  087C               	movf	___ftadd@f2+1,w
  6083  051F  00A1               	movwf	??___ftadd+1
  6084  0520  087D               	movf	___ftadd@f2+2,w
  6085  0521  00A2               	movwf	??___ftadd+2
  6086  0522  1003               	clrc
  6087  0523  0D21               	rlf	??___ftadd+1,w
  6088  0524  0D22               	rlf	??___ftadd+2,w
  6089  0525  00A3               	movwf	??___ftadd+3
  6090  0526  0823               	movf	??___ftadd+3,w
  6091  0527  00A5               	movwf	___ftadd@exp2
  6092  0528  0826               	movf	___ftadd@exp1,w
  6093  0529  1903               	btfsc	3,2
  6094  052A  2D37               	goto	i1l2040
  6095  052B  0825               	movf	___ftadd@exp2,w
  6096  052C  0226               	subwf	___ftadd@exp1,w
  6097  052D  1803               	skipnc
  6098  052E  2D3E               	goto	i1l2044
  6099  052F  0326               	decf	___ftadd@exp1,w
  6100  0530  3AFF               	xorlw	255
  6101  0531  0725               	addwf	___ftadd@exp2,w
  6102  0532  00A0               	movwf	??___ftadd
  6103  0533  3019               	movlw	25
  6104  0534  0220               	subwf	??___ftadd,w
  6105  0535  1C03               	skipc
  6106  0536  2D3E               	goto	i1l2044
  6107  0537                     i1l2040:	
  6108  0537  087B               	movf	___ftadd@f2,w
  6109  0538  00F8               	movwf	?___ftadd
  6110  0539  087C               	movf	___ftadd@f2+1,w
  6111  053A  00F9               	movwf	?___ftadd+1
  6112  053B  087D               	movf	___ftadd@f2+2,w
  6113  053C  00FA               	movwf	?___ftadd+2
  6114  053D  0008               	return
  6115  053E                     i1l2044:	
  6116  053E  0825               	movf	___ftadd@exp2,w
  6117  053F  1903               	btfsc	3,2
  6118  0540  0008               	return
  6119  0541  0826               	movf	___ftadd@exp1,w
  6120  0542  0225               	subwf	___ftadd@exp2,w
  6121  0543  1803               	skipnc
  6122  0544  2D4D               	goto	i1l2050
  6123  0545  0325               	decf	___ftadd@exp2,w
  6124  0546  3AFF               	xorlw	255
  6125  0547  0726               	addwf	___ftadd@exp1,w
  6126  0548  00A0               	movwf	??___ftadd
  6127  0549  3019               	movlw	25
  6128  054A  0220               	subwf	??___ftadd,w
  6129  054B  1803               	btfsc	3,0
  6130  054C  0008               	return
  6131  054D                     i1l2050:	
  6132  054D  3006               	movlw	6
  6133  054E  00A0               	movwf	??___ftadd
  6134  054F  0820               	movf	??___ftadd,w
  6135  0550  00A4               	movwf	___ftadd@sign
  6136  0551  1BFA               	btfsc	___ftadd@f1+2,7
  6137  0552  17A4               	bsf	___ftadd@sign,7
  6138  0553  1BFD               	btfsc	___ftadd@f2+2,7
  6139  0554  1724               	bsf	___ftadd@sign,6
  6140  0555  17F9               	bsf	___ftadd@f1+1,7
  6141  0556  30FF               	movlw	255
  6142  0557  05F8               	andwf	___ftadd@f1,f
  6143  0558  30FF               	movlw	255
  6144  0559  05F9               	andwf	___ftadd@f1+1,f
  6145  055A  3000               	movlw	0
  6146  055B  05FA               	andwf	___ftadd@f1+2,f
  6147  055C  17FC               	bsf	___ftadd@f2+1,7
  6148  055D  30FF               	movlw	255
  6149  055E  05FB               	andwf	___ftadd@f2,f
  6150  055F  30FF               	movlw	255
  6151  0560  05FC               	andwf	___ftadd@f2+1,f
  6152  0561  3000               	movlw	0
  6153  0562  05FD               	andwf	___ftadd@f2+2,f
  6154  0563  0825               	movf	___ftadd@exp2,w
  6155  0564  0226               	subwf	___ftadd@exp1,w
  6156  0565  1803               	skipnc
  6157  0566  2D8D               	goto	i1l2072
  6158  0567                     i1l2062:	
  6159  0567  3001               	movlw	1
  6160  0568                     u237_25:	
  6161  0568  1003               	clrc
  6162  0569  0DFB               	rlf	___ftadd@f2,f
  6163  056A  0DFC               	rlf	___ftadd@f2+1,f
  6164  056B  0DFD               	rlf	___ftadd@f2+2,f
  6165  056C  3EFF               	addlw	-1
  6166  056D  1D03               	skipz
  6167  056E  2D68               	goto	u237_25
  6168  056F  3001               	movlw	1
  6169  0570  02A5               	subwf	___ftadd@exp2,f
  6170  0571  0825               	movf	___ftadd@exp2,w
  6171  0572  0626               	xorwf	___ftadd@exp1,w
  6172  0573  1903               	skipnz
  6173  0574  2D88               	goto	i1l2070
  6174  0575  3001               	movlw	1
  6175  0576  02A4               	subwf	___ftadd@sign,f
  6176  0577  0824               	movf	___ftadd@sign,w
  6177  0578  3907               	andlw	7
  6178  0579  1903               	btfsc	3,2
  6179  057A  2D88               	goto	i1l2070
  6180  057B  2D67               	goto	i1l2062
  6181  057C                     i1l2068:	
  6182  057C  3001               	movlw	1
  6183  057D                     u240_25:	
  6184  057D  1003               	clrc
  6185  057E  0CFA               	rrf	___ftadd@f1+2,f
  6186  057F  0CF9               	rrf	___ftadd@f1+1,f
  6187  0580  0CF8               	rrf	___ftadd@f1,f
  6188  0581  3EFF               	addlw	-1
  6189  0582  1D03               	skipz
  6190  0583  2D7D               	goto	u240_25
  6191  0584  3001               	movlw	1
  6192  0585  00A0               	movwf	??___ftadd
  6193  0586  0820               	movf	??___ftadd,w
  6194  0587  07A6               	addwf	___ftadd@exp1,f
  6195  0588                     i1l2070:	
  6196  0588  0826               	movf	___ftadd@exp1,w
  6197  0589  0625               	xorwf	___ftadd@exp2,w
  6198  058A  1903               	btfsc	3,2
  6199  058B  2DB6               	goto	i1l548
  6200  058C  2D7C               	goto	i1l2068
  6201  058D                     i1l2072:	
  6202  058D  0826               	movf	___ftadd@exp1,w
  6203  058E  0225               	subwf	___ftadd@exp2,w
  6204  058F  1803               	skipnc
  6205  0590  2DB6               	goto	i1l548
  6206  0591                     i1l2074:	
  6207  0591  3001               	movlw	1
  6208  0592                     u243_25:	
  6209  0592  1003               	clrc
  6210  0593  0DF8               	rlf	___ftadd@f1,f
  6211  0594  0DF9               	rlf	___ftadd@f1+1,f
  6212  0595  0DFA               	rlf	___ftadd@f1+2,f
  6213  0596  3EFF               	addlw	-1
  6214  0597  1D03               	skipz
  6215  0598  2D92               	goto	u243_25
  6216  0599  3001               	movlw	1
  6217  059A  02A6               	subwf	___ftadd@exp1,f
  6218  059B  0825               	movf	___ftadd@exp2,w
  6219  059C  0626               	xorwf	___ftadd@exp1,w
  6220  059D  1903               	skipnz
  6221  059E  2DB2               	goto	i1l2082
  6222  059F  3001               	movlw	1
  6223  05A0  02A4               	subwf	___ftadd@sign,f
  6224  05A1  0824               	movf	___ftadd@sign,w
  6225  05A2  3907               	andlw	7
  6226  05A3  1903               	btfsc	3,2
  6227  05A4  2DB2               	goto	i1l2082
  6228  05A5  2D91               	goto	i1l2074
  6229  05A6                     i1l2080:	
  6230  05A6  3001               	movlw	1
  6231  05A7                     u246_25:	
  6232  05A7  1003               	clrc
  6233  05A8  0CFD               	rrf	___ftadd@f2+2,f
  6234  05A9  0CFC               	rrf	___ftadd@f2+1,f
  6235  05AA  0CFB               	rrf	___ftadd@f2,f
  6236  05AB  3EFF               	addlw	-1
  6237  05AC  1D03               	skipz
  6238  05AD  2DA7               	goto	u246_25
  6239  05AE  3001               	movlw	1
  6240  05AF  00A0               	movwf	??___ftadd
  6241  05B0  0820               	movf	??___ftadd,w
  6242  05B1  07A5               	addwf	___ftadd@exp2,f
  6243  05B2                     i1l2082:	
  6244  05B2  0826               	movf	___ftadd@exp1,w
  6245  05B3  0625               	xorwf	___ftadd@exp2,w
  6246  05B4  1D03               	skipz
  6247  05B5  2DA6               	goto	i1l2080
  6248  05B6                     i1l548:	
  6249  05B6  1FA4               	btfss	___ftadd@sign,7
  6250  05B7  2DC8               	goto	i1l2086
  6251  05B8  30FF               	movlw	255
  6252  05B9  06F8               	xorwf	___ftadd@f1,f
  6253  05BA  30FF               	movlw	255
  6254  05BB  06F9               	xorwf	___ftadd@f1+1,f
  6255  05BC  30FF               	movlw	255
  6256  05BD  06FA               	xorwf	___ftadd@f1+2,f
  6257  05BE  3001               	movlw	1
  6258  05BF  07F8               	addwf	___ftadd@f1,f
  6259  05C0  3000               	movlw	0
  6260  05C1  1803               	skipnc
  6261  05C2  3001               	movlw	1
  6262  05C3  07F9               	addwf	___ftadd@f1+1,f
  6263  05C4  3000               	movlw	0
  6264  05C5  1803               	skipnc
  6265  05C6  3001               	movlw	1
  6266  05C7  07FA               	addwf	___ftadd@f1+2,f
  6267  05C8                     i1l2086:	
  6268  05C8  1F24               	btfss	___ftadd@sign,6
  6269  05C9  2DDA               	goto	i1l2090
  6270  05CA  30FF               	movlw	255
  6271  05CB  06FB               	xorwf	___ftadd@f2,f
  6272  05CC  30FF               	movlw	255
  6273  05CD  06FC               	xorwf	___ftadd@f2+1,f
  6274  05CE  30FF               	movlw	255
  6275  05CF  06FD               	xorwf	___ftadd@f2+2,f
  6276  05D0  3001               	movlw	1
  6277  05D1  07FB               	addwf	___ftadd@f2,f
  6278  05D2  3000               	movlw	0
  6279  05D3  1803               	skipnc
  6280  05D4  3001               	movlw	1
  6281  05D5  07FC               	addwf	___ftadd@f2+1,f
  6282  05D6  3000               	movlw	0
  6283  05D7  1803               	skipnc
  6284  05D8  3001               	movlw	1
  6285  05D9  07FD               	addwf	___ftadd@f2+2,f
  6286  05DA                     i1l2090:	
  6287  05DA  01A4               	clrf	___ftadd@sign
  6288  05DB  0878               	movf	___ftadd@f1,w
  6289  05DC  07FB               	addwf	___ftadd@f2,f
  6290  05DD  0879               	movf	___ftadd@f1+1,w
  6291  05DE  1103               	clrz
  6292  05DF  1803               	skipnc
  6293  05E0  0A79               	incf	___ftadd@f1+1,w
  6294  05E1  1D03               	btfss	3,2
  6295  05E2  07FC               	addwf	___ftadd@f2+1,f
  6296  05E3  087A               	movf	___ftadd@f1+2,w
  6297  05E4  1103               	clrz
  6298  05E5  1803               	skipnc
  6299  05E6  0A7A               	incf	___ftadd@f1+2,w
  6300  05E7  1D03               	btfss	3,2
  6301  05E8  07FD               	addwf	___ftadd@f2+2,f
  6302  05E9  1FFD               	btfss	___ftadd@f2+2,7
  6303  05EA  2DFD               	goto	i1l2100
  6304  05EB  30FF               	movlw	255
  6305  05EC  06FB               	xorwf	___ftadd@f2,f
  6306  05ED  30FF               	movlw	255
  6307  05EE  06FC               	xorwf	___ftadd@f2+1,f
  6308  05EF  30FF               	movlw	255
  6309  05F0  06FD               	xorwf	___ftadd@f2+2,f
  6310  05F1  3001               	movlw	1
  6311  05F2  07FB               	addwf	___ftadd@f2,f
  6312  05F3  3000               	movlw	0
  6313  05F4  1803               	skipnc
  6314  05F5  3001               	movlw	1
  6315  05F6  07FC               	addwf	___ftadd@f2+1,f
  6316  05F7  3000               	movlw	0
  6317  05F8  1803               	skipnc
  6318  05F9  3001               	movlw	1
  6319  05FA  07FD               	addwf	___ftadd@f2+2,f
  6320  05FB  01A4               	clrf	___ftadd@sign
  6321  05FC  0AA4               	incf	___ftadd@sign,f
  6322  05FD                     i1l2100:	
  6323  05FD  087B               	movf	___ftadd@f2,w
  6324  05FE  00F0               	movwf	___ftpack@arg
  6325  05FF  087C               	movf	___ftadd@f2+1,w
  6326  0600  00F1               	movwf	___ftpack@arg+1
  6327  0601  087D               	movf	___ftadd@f2+2,w
  6328  0602  00F2               	movwf	___ftpack@arg+2
  6329  0603  0826               	movf	___ftadd@exp1,w
  6330  0604  00A0               	movwf	??___ftadd
  6331  0605  0820               	movf	??___ftadd,w
  6332  0606  00F3               	movwf	___ftpack@exp
  6333  0607  0824               	movf	___ftadd@sign,w
  6334  0608  00A1               	movwf	??___ftadd+1
  6335  0609  0821               	movf	??___ftadd+1,w
  6336  060A  00F4               	movwf	___ftpack@sign
  6337  060B  120A  158A  2415   	fcall	___ftpack
  6338  060E  0870               	movf	?___ftpack,w
  6339  060F  00F8               	movwf	?___ftadd
  6340  0610  0871               	movf	?___ftpack+1,w
  6341  0611  00F9               	movwf	?___ftadd+1
  6342  0612  0872               	movf	?___ftpack+2,w
  6343  0613  00FA               	movwf	?___ftadd+2
  6344  0614  0008               	return
  6345  0615                     __end_of___ftadd:	
  6346                           
  6347                           	psect	text30
  6348  165A                     __ptext30:	
  6349 ;; *************** function ___ftneg *****************
  6350 ;; Defined at:
  6351 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftneg.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  f1              3    0[COMMON] float 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  3    0[COMMON] float 
  6358 ;; Registers used:
  6359 ;;		wreg
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6365 ;;      Params:         3       0       0       0       0
  6366 ;;      Locals:         0       0       0       0       0
  6367 ;;      Temps:          0       0       0       0       0
  6368 ;;      Totals:         3       0       0       0       0
  6369 ;;Total ram usage:        3 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; This function calls:
  6372 ;;		Nothing
  6373 ;; This function is called by:
  6374 ;;		_ftoa
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           
  6379                           ;psect for function ___ftneg
  6380  165A                     ___ftneg:	
  6381                           
  6382                           ;incstack = 0
  6383 ;; hardware stack exceeded
  6384                           ; Regs used in ___ftneg: [wreg]
  6385  165A  0872               	movf	___ftneg@f1+2,w
  6386  165B  0471               	iorwf	___ftneg@f1+1,w
  6387  165C  0470               	iorwf	___ftneg@f1,w
  6388  165D  1903               	skipnz
  6389  165E  0008               	return
  6390  165F  3080               	movlw	128
  6391  1660  06F2               	xorwf	___ftneg@f1+2,f
  6392  1661  0008               	return
  6393  1662                     __end_of___ftneg:	
  6394                           
  6395                           	psect	text31
  6396  06E9                     __ptext31:	
  6397 ;; *************** function ___ftmul *****************
  6398 ;; Defined at:
  6399 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftmul.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  f1              3    0[BANK0 ] float 
  6402 ;;  f2              3    3[BANK0 ] float 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6405 ;;  sign            1   15[BANK0 ] unsigned char 
  6406 ;;  cntr            1   14[BANK0 ] unsigned char 
  6407 ;;  exp             1   10[BANK0 ] unsigned char 
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  3    0[BANK0 ] float 
  6410 ;; Registers used:
  6411 ;;		wreg, status,2, status,0, pclath, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6417 ;;      Params:         0       6       0       0       0
  6418 ;;      Locals:         0       6       0       0       0
  6419 ;;      Temps:          0       4       0       0       0
  6420 ;;      Totals:         0      16       0       0       0
  6421 ;;Total ram usage:       16 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    1
  6424 ;; This function calls:
  6425 ;;		___ftpack
  6426 ;; This function is called by:
  6427 ;;		_ISR
  6428 ;;		_ftoa
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           
  6433                           ;psect for function ___ftmul
  6434  06E9                     ___ftmul:	
  6435                           
  6436                           ;incstack = 0
  6437 ;; hardware stack exceeded
  6438                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6439  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  6440  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  6441  06EB  0820               	movf	___ftmul@f1,w
  6442  06EC  00A6               	movwf	??___ftmul
  6443  06ED  0821               	movf	___ftmul@f1+1,w
  6444  06EE  00A7               	movwf	??___ftmul+1
  6445  06EF  0822               	movf	___ftmul@f1+2,w
  6446  06F0  00A8               	movwf	??___ftmul+2
  6447  06F1  1003               	clrc
  6448  06F2  0D27               	rlf	??___ftmul+1,w
  6449  06F3  0D28               	rlf	??___ftmul+2,w
  6450  06F4  00A9               	movwf	??___ftmul+3
  6451  06F5  0829               	movf	??___ftmul+3,w
  6452  06F6  00AA               	movwf	___ftmul@exp
  6453  06F7  08AA               	movf	___ftmul@exp,f
  6454  06F8  1D03               	skipz
  6455  06F9  2F01               	goto	i1l2400
  6456  06FA  3000               	movlw	0
  6457  06FB  00A0               	movwf	?___ftmul
  6458  06FC  3000               	movlw	0
  6459  06FD  00A1               	movwf	?___ftmul+1
  6460  06FE  3000               	movlw	0
  6461  06FF  00A2               	movwf	?___ftmul+2
  6462  0700  0008               	return
  6463  0701                     i1l2400:	
  6464  0701  0823               	movf	___ftmul@f2,w
  6465  0702  00A6               	movwf	??___ftmul
  6466  0703  0824               	movf	___ftmul@f2+1,w
  6467  0704  00A7               	movwf	??___ftmul+1
  6468  0705  0825               	movf	___ftmul@f2+2,w
  6469  0706  00A8               	movwf	??___ftmul+2
  6470  0707  1003               	clrc
  6471  0708  0D27               	rlf	??___ftmul+1,w
  6472  0709  0D28               	rlf	??___ftmul+2,w
  6473  070A  00A9               	movwf	??___ftmul+3
  6474  070B  0829               	movf	??___ftmul+3,w
  6475  070C  00AF               	movwf	___ftmul@sign
  6476  070D  08AF               	movf	___ftmul@sign,f
  6477  070E  1D03               	skipz
  6478  070F  2F17               	goto	i1l2406
  6479  0710  3000               	movlw	0
  6480  0711  00A0               	movwf	?___ftmul
  6481  0712  3000               	movlw	0
  6482  0713  00A1               	movwf	?___ftmul+1
  6483  0714  3000               	movlw	0
  6484  0715  00A2               	movwf	?___ftmul+2
  6485  0716  0008               	return
  6486  0717                     i1l2406:	
  6487  0717  082F               	movf	___ftmul@sign,w
  6488  0718  3E7B               	addlw	123
  6489  0719  00A6               	movwf	??___ftmul
  6490  071A  0826               	movf	??___ftmul,w
  6491  071B  07AA               	addwf	___ftmul@exp,f
  6492  071C  0820               	movf	___ftmul@f1,w
  6493  071D  00A6               	movwf	??___ftmul
  6494  071E  0821               	movf	___ftmul@f1+1,w
  6495  071F  00A7               	movwf	??___ftmul+1
  6496  0720  0822               	movf	___ftmul@f1+2,w
  6497  0721  00A8               	movwf	??___ftmul+2
  6498  0722  3010               	movlw	16
  6499  0723                     u303_25:	
  6500  0723  1003               	clrc
  6501  0724  0CA8               	rrf	??___ftmul+2,f
  6502  0725  0CA7               	rrf	??___ftmul+1,f
  6503  0726  0CA6               	rrf	??___ftmul,f
  6504  0727  3EFF               	addlw	-1
  6505  0728  1D03               	skipz
  6506  0729  2F23               	goto	u303_25
  6507  072A  0826               	movf	??___ftmul,w
  6508  072B  00A9               	movwf	??___ftmul+3
  6509  072C  0829               	movf	??___ftmul+3,w
  6510  072D  00AF               	movwf	___ftmul@sign
  6511  072E  0823               	movf	___ftmul@f2,w
  6512  072F  00A6               	movwf	??___ftmul
  6513  0730  0824               	movf	___ftmul@f2+1,w
  6514  0731  00A7               	movwf	??___ftmul+1
  6515  0732  0825               	movf	___ftmul@f2+2,w
  6516  0733  00A8               	movwf	??___ftmul+2
  6517  0734  3010               	movlw	16
  6518  0735                     u304_25:	
  6519  0735  1003               	clrc
  6520  0736  0CA8               	rrf	??___ftmul+2,f
  6521  0737  0CA7               	rrf	??___ftmul+1,f
  6522  0738  0CA6               	rrf	??___ftmul,f
  6523  0739  3EFF               	addlw	-1
  6524  073A  1D03               	skipz
  6525  073B  2F35               	goto	u304_25
  6526  073C  0826               	movf	??___ftmul,w
  6527  073D  00A9               	movwf	??___ftmul+3
  6528  073E  0829               	movf	??___ftmul+3,w
  6529  073F  06AF               	xorwf	___ftmul@sign,f
  6530  0740  3080               	movlw	128
  6531  0741  00A6               	movwf	??___ftmul
  6532  0742  0826               	movf	??___ftmul,w
  6533  0743  05AF               	andwf	___ftmul@sign,f
  6534  0744  17A1               	bsf	___ftmul@f1+1,7
  6535  0745  17A4               	bsf	___ftmul@f2+1,7
  6536  0746  30FF               	movlw	255
  6537  0747  05A3               	andwf	___ftmul@f2,f
  6538  0748  30FF               	movlw	255
  6539  0749  05A4               	andwf	___ftmul@f2+1,f
  6540  074A  3000               	movlw	0
  6541  074B  05A5               	andwf	___ftmul@f2+2,f
  6542  074C  3000               	movlw	0
  6543  074D  00AB               	movwf	___ftmul@f3_as_product
  6544  074E  3000               	movlw	0
  6545  074F  00AC               	movwf	___ftmul@f3_as_product+1
  6546  0750  3000               	movlw	0
  6547  0751  00AD               	movwf	___ftmul@f3_as_product+2
  6548  0752  3007               	movlw	7
  6549  0753  00A6               	movwf	??___ftmul
  6550  0754  0826               	movf	??___ftmul,w
  6551  0755  00AE               	movwf	___ftmul@cntr
  6552  0756                     i1l2418:	
  6553  0756  1C20               	btfss	___ftmul@f1,0
  6554  0757  2F66               	goto	i1l2422
  6555  0758  0823               	movf	___ftmul@f2,w
  6556  0759  07AB               	addwf	___ftmul@f3_as_product,f
  6557  075A  0824               	movf	___ftmul@f2+1,w
  6558  075B  1103               	clrz
  6559  075C  1803               	skipnc
  6560  075D  0A24               	incf	___ftmul@f2+1,w
  6561  075E  1D03               	btfss	3,2
  6562  075F  07AC               	addwf	___ftmul@f3_as_product+1,f
  6563  0760  0825               	movf	___ftmul@f2+2,w
  6564  0761  1103               	clrz
  6565  0762  1803               	skipnc
  6566  0763  0A25               	incf	___ftmul@f2+2,w
  6567  0764  1D03               	btfss	3,2
  6568  0765  07AD               	addwf	___ftmul@f3_as_product+2,f
  6569  0766                     i1l2422:	
  6570  0766  3001               	movlw	1
  6571  0767                     u307_25:	
  6572  0767  1003               	clrc
  6573  0768  0CA2               	rrf	___ftmul@f1+2,f
  6574  0769  0CA1               	rrf	___ftmul@f1+1,f
  6575  076A  0CA0               	rrf	___ftmul@f1,f
  6576  076B  3EFF               	addlw	-1
  6577  076C  1D03               	skipz
  6578  076D  2F67               	goto	u307_25
  6579  076E  3001               	movlw	1
  6580  076F                     u308_25:	
  6581  076F  1003               	clrc
  6582  0770  0DA3               	rlf	___ftmul@f2,f
  6583  0771  0DA4               	rlf	___ftmul@f2+1,f
  6584  0772  0DA5               	rlf	___ftmul@f2+2,f
  6585  0773  3EFF               	addlw	-1
  6586  0774  1D03               	skipz
  6587  0775  2F6F               	goto	u308_25
  6588  0776  3001               	movlw	1
  6589  0777  02AE               	subwf	___ftmul@cntr,f
  6590  0778  1D03               	btfss	3,2
  6591  0779  2F56               	goto	i1l2418
  6592  077A  3009               	movlw	9
  6593  077B  00A6               	movwf	??___ftmul
  6594  077C  0826               	movf	??___ftmul,w
  6595  077D  00AE               	movwf	___ftmul@cntr
  6596  077E                     i1l2430:	
  6597  077E  1C20               	btfss	___ftmul@f1,0
  6598  077F  2F8E               	goto	i1l2434
  6599  0780  0823               	movf	___ftmul@f2,w
  6600  0781  07AB               	addwf	___ftmul@f3_as_product,f
  6601  0782  0824               	movf	___ftmul@f2+1,w
  6602  0783  1103               	clrz
  6603  0784  1803               	skipnc
  6604  0785  0A24               	incf	___ftmul@f2+1,w
  6605  0786  1D03               	btfss	3,2
  6606  0787  07AC               	addwf	___ftmul@f3_as_product+1,f
  6607  0788  0825               	movf	___ftmul@f2+2,w
  6608  0789  1103               	clrz
  6609  078A  1803               	skipnc
  6610  078B  0A25               	incf	___ftmul@f2+2,w
  6611  078C  1D03               	btfss	3,2
  6612  078D  07AD               	addwf	___ftmul@f3_as_product+2,f
  6613  078E                     i1l2434:	
  6614  078E  3001               	movlw	1
  6615  078F                     u312_25:	
  6616  078F  1003               	clrc
  6617  0790  0CA2               	rrf	___ftmul@f1+2,f
  6618  0791  0CA1               	rrf	___ftmul@f1+1,f
  6619  0792  0CA0               	rrf	___ftmul@f1,f
  6620  0793  3EFF               	addlw	-1
  6621  0794  1D03               	skipz
  6622  0795  2F8F               	goto	u312_25
  6623  0796  3001               	movlw	1
  6624  0797                     u313_25:	
  6625  0797  1003               	clrc
  6626  0798  0CAD               	rrf	___ftmul@f3_as_product+2,f
  6627  0799  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6628  079A  0CAB               	rrf	___ftmul@f3_as_product,f
  6629  079B  3EFF               	addlw	-1
  6630  079C  1D03               	skipz
  6631  079D  2F97               	goto	u313_25
  6632  079E  3001               	movlw	1
  6633  079F  02AE               	subwf	___ftmul@cntr,f
  6634  07A0  1D03               	btfss	3,2
  6635  07A1  2F7E               	goto	i1l2430
  6636  07A2  082B               	movf	___ftmul@f3_as_product,w
  6637  07A3  00F0               	movwf	___ftpack@arg
  6638  07A4  082C               	movf	___ftmul@f3_as_product+1,w
  6639  07A5  00F1               	movwf	___ftpack@arg+1
  6640  07A6  082D               	movf	___ftmul@f3_as_product+2,w
  6641  07A7  00F2               	movwf	___ftpack@arg+2
  6642  07A8  082A               	movf	___ftmul@exp,w
  6643  07A9  00A6               	movwf	??___ftmul
  6644  07AA  0826               	movf	??___ftmul,w
  6645  07AB  00F3               	movwf	___ftpack@exp
  6646  07AC  082F               	movf	___ftmul@sign,w
  6647  07AD  00A7               	movwf	??___ftmul+1
  6648  07AE  0827               	movf	??___ftmul+1,w
  6649  07AF  00F4               	movwf	___ftpack@sign
  6650  07B0  120A  158A  2415   	fcall	___ftpack
  6651  07B3  0870               	movf	?___ftpack,w
  6652  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  6653  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  6654  07B6  00A0               	movwf	?___ftmul
  6655  07B7  0871               	movf	?___ftpack+1,w
  6656  07B8  00A1               	movwf	?___ftmul+1
  6657  07B9  0872               	movf	?___ftpack+2,w
  6658  07BA  00A2               	movwf	?___ftmul+2
  6659  07BB  0008               	return
  6660  07BC                     __end_of___ftmul:	
  6661                           
  6662                           	psect	text32
  6663  0AF4                     __ptext32:	
  6664 ;; *************** function ___ftge *****************
  6665 ;; Defined at:
  6666 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\ftge.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;  ff1             3    0[COMMON] float 
  6669 ;;  ff2             3    3[COMMON] float 
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;		None
  6672 ;; Return value:  Size  Location     Type
  6673 ;;		None               void
  6674 ;; Registers used:
  6675 ;;		wreg, status,2, status,0
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6681 ;;      Params:         6       0       0       0       0
  6682 ;;      Locals:         0       0       0       0       0
  6683 ;;      Temps:          6       0       0       0       0
  6684 ;;      Totals:        12       0       0       0       0
  6685 ;;Total ram usage:       12 bytes
  6686 ;; Hardware stack levels used:    1
  6687 ;; This function calls:
  6688 ;;		Nothing
  6689 ;; This function is called by:
  6690 ;;		_ftoa
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function ___ftge
  6696  0AF4                     ___ftge:	
  6697                           
  6698                           ;incstack = 0
  6699 ;; hardware stack exceeded
  6700                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6701  0AF4  1FF2               	btfss	___ftge@ff1+2,7
  6702  0AF5  2B1B               	goto	i1l2378
  6703  0AF6  3000               	movlw	0
  6704  0AF7  00F6               	movwf	??___ftge
  6705  0AF8  3000               	movlw	0
  6706  0AF9  00F7               	movwf	??___ftge+1
  6707  0AFA  3080               	movlw	128
  6708  0AFB  00F8               	movwf	??___ftge+2
  6709  0AFC  0970               	comf	___ftge@ff1,w
  6710  0AFD  00F9               	movwf	??___ftge+3
  6711  0AFE  0971               	comf	___ftge@ff1+1,w
  6712  0AFF  00FA               	movwf	??___ftge+4
  6713  0B00  0972               	comf	___ftge@ff1+2,w
  6714  0B01  00FB               	movwf	??___ftge+5
  6715  0B02  0AF9               	incf	??___ftge+3,f
  6716  0B03  1903               	skipnz
  6717  0B04  0AFA               	incf	??___ftge+4,f
  6718  0B05  1903               	skipnz
  6719  0B06  0AFB               	incf	??___ftge+5,f
  6720  0B07  0879               	movf	??___ftge+3,w
  6721  0B08  07F6               	addwf	??___ftge,f
  6722  0B09  087A               	movf	??___ftge+4,w
  6723  0B0A  1803               	skipnc
  6724  0B0B  0F7A               	incfsz	??___ftge+4,w
  6725  0B0C  2B0E               	goto	u297_21
  6726  0B0D  2B0F               	goto	u297_22
  6727  0B0E                     u297_21:	
  6728  0B0E  07F7               	addwf	??___ftge+1,f
  6729  0B0F                     u297_22:	
  6730  0B0F  087B               	movf	??___ftge+5,w
  6731  0B10  1803               	skipnc
  6732  0B11  0F7B               	incfsz	??___ftge+5,w
  6733  0B12  2B14               	goto	u297_23
  6734  0B13  2B15               	goto	u297_24
  6735  0B14                     u297_23:	
  6736  0B14  07F8               	addwf	??___ftge+2,f
  6737  0B15                     u297_24:	
  6738  0B15  0876               	movf	??___ftge,w
  6739  0B16  00F0               	movwf	___ftge@ff1
  6740  0B17  0877               	movf	??___ftge+1,w
  6741  0B18  00F1               	movwf	___ftge@ff1+1
  6742  0B19  0878               	movf	??___ftge+2,w
  6743  0B1A  00F2               	movwf	___ftge@ff1+2
  6744  0B1B                     i1l2378:	
  6745  0B1B  1FF5               	btfss	___ftge@ff2+2,7
  6746  0B1C  2B42               	goto	i1l2382
  6747  0B1D  3000               	movlw	0
  6748  0B1E  00F6               	movwf	??___ftge
  6749  0B1F  3000               	movlw	0
  6750  0B20  00F7               	movwf	??___ftge+1
  6751  0B21  3080               	movlw	128
  6752  0B22  00F8               	movwf	??___ftge+2
  6753  0B23  0973               	comf	___ftge@ff2,w
  6754  0B24  00F9               	movwf	??___ftge+3
  6755  0B25  0974               	comf	___ftge@ff2+1,w
  6756  0B26  00FA               	movwf	??___ftge+4
  6757  0B27  0975               	comf	___ftge@ff2+2,w
  6758  0B28  00FB               	movwf	??___ftge+5
  6759  0B29  0AF9               	incf	??___ftge+3,f
  6760  0B2A  1903               	skipnz
  6761  0B2B  0AFA               	incf	??___ftge+4,f
  6762  0B2C  1903               	skipnz
  6763  0B2D  0AFB               	incf	??___ftge+5,f
  6764  0B2E  0879               	movf	??___ftge+3,w
  6765  0B2F  07F6               	addwf	??___ftge,f
  6766  0B30  087A               	movf	??___ftge+4,w
  6767  0B31  1803               	skipnc
  6768  0B32  0F7A               	incfsz	??___ftge+4,w
  6769  0B33  2B35               	goto	u299_21
  6770  0B34  2B36               	goto	u299_22
  6771  0B35                     u299_21:	
  6772  0B35  07F7               	addwf	??___ftge+1,f
  6773  0B36                     u299_22:	
  6774  0B36  087B               	movf	??___ftge+5,w
  6775  0B37  1803               	skipnc
  6776  0B38  0F7B               	incfsz	??___ftge+5,w
  6777  0B39  2B3B               	goto	u299_23
  6778  0B3A  2B3C               	goto	u299_24
  6779  0B3B                     u299_23:	
  6780  0B3B  07F8               	addwf	??___ftge+2,f
  6781  0B3C                     u299_24:	
  6782  0B3C  0876               	movf	??___ftge,w
  6783  0B3D  00F3               	movwf	___ftge@ff2
  6784  0B3E  0877               	movf	??___ftge+1,w
  6785  0B3F  00F4               	movwf	___ftge@ff2+1
  6786  0B40  0878               	movf	??___ftge+2,w
  6787  0B41  00F5               	movwf	___ftge@ff2+2
  6788  0B42                     i1l2382:	
  6789  0B42  3080               	movlw	128
  6790  0B43  06F2               	xorwf	___ftge@ff1+2,f
  6791  0B44  3080               	movlw	128
  6792  0B45  06F5               	xorwf	___ftge@ff2+2,f
  6793  0B46  0875               	movf	___ftge@ff2+2,w
  6794  0B47  0272               	subwf	___ftge@ff1+2,w
  6795  0B48  1D03               	skipz
  6796  0B49  0008               	return
  6797  0B4A  0874               	movf	___ftge@ff2+1,w
  6798  0B4B  0271               	subwf	___ftge@ff1+1,w
  6799  0B4C  1D03               	skipz
  6800  0B4D  0008               	return
  6801  0B4E  0873               	movf	___ftge@ff2,w
  6802  0B4F  0270               	subwf	___ftge@ff1,w
  6803  0B50  0008               	return
  6804  0B51                     __end_of___ftge:	
  6805                           
  6806                           	psect	text33
  6807  0E8E                     __ptext33:	
  6808 ;; *************** function ___ftdiv *****************
  6809 ;; Defined at:
  6810 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  f2              3   16[BANK0 ] float 
  6813 ;;  f1              3   19[BANK0 ] float 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  f3              3   27[BANK0 ] float 
  6816 ;;  sign            1   31[BANK0 ] unsigned char 
  6817 ;;  exp             1   30[BANK0 ] unsigned char 
  6818 ;;  cntr            1   26[BANK0 ] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  3   16[BANK0 ] float 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0, pclath, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6828 ;;      Params:         0       6       0       0       0
  6829 ;;      Locals:         0       6       0       0       0
  6830 ;;      Temps:          0       4       0       0       0
  6831 ;;      Totals:         0      16       0       0       0
  6832 ;;Total ram usage:       16 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    1
  6835 ;; This function calls:
  6836 ;;		___ftpack
  6837 ;; This function is called by:
  6838 ;;		_ISR
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function ___ftdiv
  6844  0E8E                     ___ftdiv:	
  6845                           
  6846                           ;incstack = 0
  6847 ;; hardware stack exceeded
  6848                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6849  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6850  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6851  0E90  0833               	movf	___ftdiv@f1,w
  6852  0E91  00B6               	movwf	??___ftdiv
  6853  0E92  0834               	movf	___ftdiv@f1+1,w
  6854  0E93  00B7               	movwf	??___ftdiv+1
  6855  0E94  0835               	movf	___ftdiv@f1+2,w
  6856  0E95  00B8               	movwf	??___ftdiv+2
  6857  0E96  1003               	clrc
  6858  0E97  0D37               	rlf	??___ftdiv+1,w
  6859  0E98  0D38               	rlf	??___ftdiv+2,w
  6860  0E99  00B9               	movwf	??___ftdiv+3
  6861  0E9A  0839               	movf	??___ftdiv+3,w
  6862  0E9B  00BE               	movwf	___ftdiv@exp
  6863  0E9C  08BE               	movf	___ftdiv@exp,f
  6864  0E9D  1D03               	skipz
  6865  0E9E  2EA6               	goto	i1l2732
  6866  0E9F  3000               	movlw	0
  6867  0EA0  00B0               	movwf	?___ftdiv
  6868  0EA1  3000               	movlw	0
  6869  0EA2  00B1               	movwf	?___ftdiv+1
  6870  0EA3  3000               	movlw	0
  6871  0EA4  00B2               	movwf	?___ftdiv+2
  6872  0EA5  0008               	return
  6873  0EA6                     i1l2732:	
  6874  0EA6  0830               	movf	___ftdiv@f2,w
  6875  0EA7  00B6               	movwf	??___ftdiv
  6876  0EA8  0831               	movf	___ftdiv@f2+1,w
  6877  0EA9  00B7               	movwf	??___ftdiv+1
  6878  0EAA  0832               	movf	___ftdiv@f2+2,w
  6879  0EAB  00B8               	movwf	??___ftdiv+2
  6880  0EAC  1003               	clrc
  6881  0EAD  0D37               	rlf	??___ftdiv+1,w
  6882  0EAE  0D38               	rlf	??___ftdiv+2,w
  6883  0EAF  00B9               	movwf	??___ftdiv+3
  6884  0EB0  0839               	movf	??___ftdiv+3,w
  6885  0EB1  00BF               	movwf	___ftdiv@sign
  6886  0EB2  08BF               	movf	___ftdiv@sign,f
  6887  0EB3  1D03               	skipz
  6888  0EB4  2EBC               	goto	i1l2738
  6889  0EB5  3000               	movlw	0
  6890  0EB6  00B0               	movwf	?___ftdiv
  6891  0EB7  3000               	movlw	0
  6892  0EB8  00B1               	movwf	?___ftdiv+1
  6893  0EB9  3000               	movlw	0
  6894  0EBA  00B2               	movwf	?___ftdiv+2
  6895  0EBB  0008               	return
  6896  0EBC                     i1l2738:	
  6897  0EBC  3000               	movlw	0
  6898  0EBD  00BB               	movwf	___ftdiv@f3
  6899  0EBE  3000               	movlw	0
  6900  0EBF  00BC               	movwf	___ftdiv@f3+1
  6901  0EC0  3000               	movlw	0
  6902  0EC1  00BD               	movwf	___ftdiv@f3+2
  6903  0EC2  3089               	movlw	137
  6904  0EC3  073F               	addwf	___ftdiv@sign,w
  6905  0EC4  00B6               	movwf	??___ftdiv
  6906  0EC5  0836               	movf	??___ftdiv,w
  6907  0EC6  02BE               	subwf	___ftdiv@exp,f
  6908  0EC7  0833               	movf	___ftdiv@f1,w
  6909  0EC8  00B6               	movwf	??___ftdiv
  6910  0EC9  0834               	movf	___ftdiv@f1+1,w
  6911  0ECA  00B7               	movwf	??___ftdiv+1
  6912  0ECB  0835               	movf	___ftdiv@f1+2,w
  6913  0ECC  00B8               	movwf	??___ftdiv+2
  6914  0ECD  3010               	movlw	16
  6915  0ECE                     u355_25:	
  6916  0ECE  1003               	clrc
  6917  0ECF  0CB8               	rrf	??___ftdiv+2,f
  6918  0ED0  0CB7               	rrf	??___ftdiv+1,f
  6919  0ED1  0CB6               	rrf	??___ftdiv,f
  6920  0ED2  3EFF               	addlw	-1
  6921  0ED3  1D03               	skipz
  6922  0ED4  2ECE               	goto	u355_25
  6923  0ED5  0836               	movf	??___ftdiv,w
  6924  0ED6  00B9               	movwf	??___ftdiv+3
  6925  0ED7  0839               	movf	??___ftdiv+3,w
  6926  0ED8  00BF               	movwf	___ftdiv@sign
  6927  0ED9  0830               	movf	___ftdiv@f2,w
  6928  0EDA  00B6               	movwf	??___ftdiv
  6929  0EDB  0831               	movf	___ftdiv@f2+1,w
  6930  0EDC  00B7               	movwf	??___ftdiv+1
  6931  0EDD  0832               	movf	___ftdiv@f2+2,w
  6932  0EDE  00B8               	movwf	??___ftdiv+2
  6933  0EDF  3010               	movlw	16
  6934  0EE0                     u356_25:	
  6935  0EE0  1003               	clrc
  6936  0EE1  0CB8               	rrf	??___ftdiv+2,f
  6937  0EE2  0CB7               	rrf	??___ftdiv+1,f
  6938  0EE3  0CB6               	rrf	??___ftdiv,f
  6939  0EE4  3EFF               	addlw	-1
  6940  0EE5  1D03               	skipz
  6941  0EE6  2EE0               	goto	u356_25
  6942  0EE7  0836               	movf	??___ftdiv,w
  6943  0EE8  00B9               	movwf	??___ftdiv+3
  6944  0EE9  0839               	movf	??___ftdiv+3,w
  6945  0EEA  06BF               	xorwf	___ftdiv@sign,f
  6946  0EEB  3080               	movlw	128
  6947  0EEC  00B6               	movwf	??___ftdiv
  6948  0EED  0836               	movf	??___ftdiv,w
  6949  0EEE  05BF               	andwf	___ftdiv@sign,f
  6950  0EEF  17B4               	bsf	___ftdiv@f1+1,7
  6951  0EF0  30FF               	movlw	255
  6952  0EF1  05B3               	andwf	___ftdiv@f1,f
  6953  0EF2  30FF               	movlw	255
  6954  0EF3  05B4               	andwf	___ftdiv@f1+1,f
  6955  0EF4  3000               	movlw	0
  6956  0EF5  05B5               	andwf	___ftdiv@f1+2,f
  6957  0EF6  17B1               	bsf	___ftdiv@f2+1,7
  6958  0EF7  30FF               	movlw	255
  6959  0EF8  05B0               	andwf	___ftdiv@f2,f
  6960  0EF9  30FF               	movlw	255
  6961  0EFA  05B1               	andwf	___ftdiv@f2+1,f
  6962  0EFB  3000               	movlw	0
  6963  0EFC  05B2               	andwf	___ftdiv@f2+2,f
  6964  0EFD  3018               	movlw	24
  6965  0EFE  00B6               	movwf	??___ftdiv
  6966  0EFF  0836               	movf	??___ftdiv,w
  6967  0F00  00BA               	movwf	___ftdiv@cntr
  6968  0F01                     i1l2752:	
  6969  0F01  3001               	movlw	1
  6970  0F02                     u357_25:	
  6971  0F02  1003               	clrc
  6972  0F03  0DBB               	rlf	___ftdiv@f3,f
  6973  0F04  0DBC               	rlf	___ftdiv@f3+1,f
  6974  0F05  0DBD               	rlf	___ftdiv@f3+2,f
  6975  0F06  3EFF               	addlw	-1
  6976  0F07  1D03               	skipz
  6977  0F08  2F02               	goto	u357_25
  6978  0F09  0832               	movf	___ftdiv@f2+2,w
  6979  0F0A  0235               	subwf	___ftdiv@f1+2,w
  6980  0F0B  1D03               	skipz
  6981  0F0C  2F13               	goto	u358_25
  6982  0F0D  0831               	movf	___ftdiv@f2+1,w
  6983  0F0E  0234               	subwf	___ftdiv@f1+1,w
  6984  0F0F  1D03               	skipz
  6985  0F10  2F13               	goto	u358_25
  6986  0F11  0830               	movf	___ftdiv@f2,w
  6987  0F12  0233               	subwf	___ftdiv@f1,w
  6988  0F13                     u358_25:	
  6989  0F13  1C03               	skipc
  6990  0F14  2F20               	goto	i1l2760
  6991  0F15  0830               	movf	___ftdiv@f2,w
  6992  0F16  02B3               	subwf	___ftdiv@f1,f
  6993  0F17  0831               	movf	___ftdiv@f2+1,w
  6994  0F18  1C03               	skipc
  6995  0F19  0F31               	incfsz	___ftdiv@f2+1,w
  6996  0F1A  02B4               	subwf	___ftdiv@f1+1,f
  6997  0F1B  0832               	movf	___ftdiv@f2+2,w
  6998  0F1C  1C03               	skipc
  6999  0F1D  0A32               	incf	___ftdiv@f2+2,w
  7000  0F1E  02B5               	subwf	___ftdiv@f1+2,f
  7001  0F1F  143B               	bsf	___ftdiv@f3,0
  7002  0F20                     i1l2760:	
  7003  0F20  3001               	movlw	1
  7004  0F21                     u359_25:	
  7005  0F21  1003               	clrc
  7006  0F22  0DB3               	rlf	___ftdiv@f1,f
  7007  0F23  0DB4               	rlf	___ftdiv@f1+1,f
  7008  0F24  0DB5               	rlf	___ftdiv@f1+2,f
  7009  0F25  3EFF               	addlw	-1
  7010  0F26  1D03               	skipz
  7011  0F27  2F21               	goto	u359_25
  7012  0F28  3001               	movlw	1
  7013  0F29  02BA               	subwf	___ftdiv@cntr,f
  7014  0F2A  1D03               	btfss	3,2
  7015  0F2B  2F01               	goto	i1l2752
  7016  0F2C  083B               	movf	___ftdiv@f3,w
  7017  0F2D  00F0               	movwf	___ftpack@arg
  7018  0F2E  083C               	movf	___ftdiv@f3+1,w
  7019  0F2F  00F1               	movwf	___ftpack@arg+1
  7020  0F30  083D               	movf	___ftdiv@f3+2,w
  7021  0F31  00F2               	movwf	___ftpack@arg+2
  7022  0F32  083E               	movf	___ftdiv@exp,w
  7023  0F33  00B6               	movwf	??___ftdiv
  7024  0F34  0836               	movf	??___ftdiv,w
  7025  0F35  00F3               	movwf	___ftpack@exp
  7026  0F36  083F               	movf	___ftdiv@sign,w
  7027  0F37  00B7               	movwf	??___ftdiv+1
  7028  0F38  0837               	movf	??___ftdiv+1,w
  7029  0F39  00F4               	movwf	___ftpack@sign
  7030  0F3A  120A  158A  2415   	fcall	___ftpack
  7031  0F3D  0870               	movf	?___ftpack,w
  7032  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  7033  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  7034  0F40  00B0               	movwf	?___ftdiv
  7035  0F41  0871               	movf	?___ftpack+1,w
  7036  0F42  00B1               	movwf	?___ftdiv+1
  7037  0F43  0872               	movf	?___ftpack+2,w
  7038  0F44  00B2               	movwf	?___ftdiv+2
  7039  0F45  0008               	return
  7040  0F46                     __end_of___ftdiv:	
  7041                           
  7042                           	psect	text34
  7043  1743                     __ptext34:	
  7044 ;; *************** function ___awtoft *****************
  7045 ;; Defined at:
  7046 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awtoft.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  c               2    8[COMMON] int 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;  sign            1   13[COMMON] unsigned char 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  3    8[COMMON] float 
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0, pclath, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7060 ;;      Params:         3       0       0       0       0
  7061 ;;      Locals:         1       0       0       0       0
  7062 ;;      Temps:          2       0       0       0       0
  7063 ;;      Totals:         6       0       0       0       0
  7064 ;;Total ram usage:        6 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    1
  7067 ;; This function calls:
  7068 ;;		___ftpack
  7069 ;; This function is called by:
  7070 ;;		_ISR
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           
  7075                           ;psect for function ___awtoft
  7076  1743                     ___awtoft:	
  7077                           
  7078                           ;incstack = 0
  7079 ;; hardware stack exceeded
  7080                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7081  1743  01FD               	clrf	___awtoft@sign
  7082  1744  1FF9               	btfss	___awtoft@c+1,7
  7083  1745  2F4D               	goto	i1l2722
  7084  1746  09F8               	comf	___awtoft@c,f
  7085  1747  09F9               	comf	___awtoft@c+1,f
  7086  1748  0AF8               	incf	___awtoft@c,f
  7087  1749  1903               	skipnz
  7088  174A  0AF9               	incf	___awtoft@c+1,f
  7089  174B  01FD               	clrf	___awtoft@sign
  7090  174C  0AFD               	incf	___awtoft@sign,f
  7091  174D                     i1l2722:	
  7092  174D  0878               	movf	___awtoft@c,w
  7093  174E  00F0               	movwf	___ftpack@arg
  7094  174F  0879               	movf	___awtoft@c+1,w
  7095  1750  00F1               	movwf	___ftpack@arg+1
  7096  1751  01F2               	clrf	___ftpack@arg+2
  7097  1752  308E               	movlw	142
  7098  1753  00FB               	movwf	??___awtoft
  7099  1754  087B               	movf	??___awtoft,w
  7100  1755  00F3               	movwf	___ftpack@exp
  7101  1756  087D               	movf	___awtoft@sign,w
  7102  1757  00FC               	movwf	??___awtoft+1
  7103  1758  087C               	movf	??___awtoft+1,w
  7104  1759  00F4               	movwf	___ftpack@sign
  7105  175A  120A  158A  2415   	fcall	___ftpack
  7106  175D  0870               	movf	?___ftpack,w
  7107  175E  00F8               	movwf	?___awtoft
  7108  175F  0871               	movf	?___ftpack+1,w
  7109  1760  00F9               	movwf	?___awtoft+1
  7110  1761  0872               	movf	?___ftpack+2,w
  7111  1762  00FA               	movwf	?___awtoft+2
  7112  1763  0008               	return
  7113  1764                     __end_of___awtoft:	
  7114                           
  7115                           	psect	text35
  7116  0C15                     __ptext35:	
  7117 ;; *************** function ___ftpack *****************
  7118 ;; Defined at:
  7119 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\float.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  arg             3    0[COMMON] unsigned um
  7122 ;;  exp             1    3[COMMON] unsigned char 
  7123 ;;  sign            1    4[COMMON] unsigned char 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  3    0[COMMON] float 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7135 ;;      Params:         5       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0
  7137 ;;      Temps:          3       0       0       0       0
  7138 ;;      Totals:         8       0       0       0       0
  7139 ;;Total ram usage:        8 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		___awtoft
  7145 ;;		___ftadd
  7146 ;;		___ftdiv
  7147 ;;		___ftmul
  7148 ;;		___lltoft
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           
  7153                           ;psect for function ___ftpack
  7154  0C15                     ___ftpack:	
  7155                           
  7156                           ;incstack = 0
  7157 ;; hardware stack exceeded
  7158                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7159  0C15  0873               	movf	___ftpack@exp,w
  7160  0C16  1903               	btfsc	3,2
  7161  0C17  2C1D               	goto	i1l1914
  7162  0C18  0872               	movf	___ftpack@arg+2,w
  7163  0C19  0471               	iorwf	___ftpack@arg+1,w
  7164  0C1A  0470               	iorwf	___ftpack@arg,w
  7165  0C1B  1D03               	skipz
  7166  0C1C  2C30               	goto	i1l1920
  7167  0C1D                     i1l1914:	
  7168  0C1D  3000               	movlw	0
  7169  0C1E  00F0               	movwf	?___ftpack
  7170  0C1F  3000               	movlw	0
  7171  0C20  00F1               	movwf	?___ftpack+1
  7172  0C21  3000               	movlw	0
  7173  0C22  00F2               	movwf	?___ftpack+2
  7174  0C23  0008               	return
  7175  0C24                     i1l1918:	
  7176  0C24  3001               	movlw	1
  7177  0C25  00F5               	movwf	??___ftpack
  7178  0C26  0875               	movf	??___ftpack,w
  7179  0C27  07F3               	addwf	___ftpack@exp,f
  7180  0C28  3001               	movlw	1
  7181  0C29                     u200_25:	
  7182  0C29  1003               	clrc
  7183  0C2A  0CF2               	rrf	___ftpack@arg+2,f
  7184  0C2B  0CF1               	rrf	___ftpack@arg+1,f
  7185  0C2C  0CF0               	rrf	___ftpack@arg,f
  7186  0C2D  3EFF               	addlw	-1
  7187  0C2E  1D03               	skipz
  7188  0C2F  2C29               	goto	u200_25
  7189  0C30                     i1l1920:	
  7190  0C30  30FE               	movlw	254
  7191  0C31  0572               	andwf	___ftpack@arg+2,w
  7192  0C32  1903               	btfsc	3,2
  7193  0C33  2C4B               	goto	i1l519
  7194  0C34  2C24               	goto	i1l1918
  7195  0C35                     i1l1922:	
  7196  0C35  3001               	movlw	1
  7197  0C36  00F5               	movwf	??___ftpack
  7198  0C37  0875               	movf	??___ftpack,w
  7199  0C38  07F3               	addwf	___ftpack@exp,f
  7200  0C39  3001               	movlw	1
  7201  0C3A  07F0               	addwf	___ftpack@arg,f
  7202  0C3B  3000               	movlw	0
  7203  0C3C  1803               	skipnc
  7204  0C3D  3001               	movlw	1
  7205  0C3E  07F1               	addwf	___ftpack@arg+1,f
  7206  0C3F  3000               	movlw	0
  7207  0C40  1803               	skipnc
  7208  0C41  3001               	movlw	1
  7209  0C42  07F2               	addwf	___ftpack@arg+2,f
  7210  0C43  3001               	movlw	1
  7211  0C44                     u202_25:	
  7212  0C44  1003               	clrc
  7213  0C45  0CF2               	rrf	___ftpack@arg+2,f
  7214  0C46  0CF1               	rrf	___ftpack@arg+1,f
  7215  0C47  0CF0               	rrf	___ftpack@arg,f
  7216  0C48  3EFF               	addlw	-1
  7217  0C49  1D03               	skipz
  7218  0C4A  2C44               	goto	u202_25
  7219  0C4B                     i1l519:	
  7220  0C4B  30FF               	movlw	255
  7221  0C4C  0572               	andwf	___ftpack@arg+2,w
  7222  0C4D  1903               	btfsc	3,2
  7223  0C4E  2C5A               	goto	i1l1930
  7224  0C4F  2C35               	goto	i1l1922
  7225  0C50                     i1l1928:	
  7226  0C50  3001               	movlw	1
  7227  0C51  02F3               	subwf	___ftpack@exp,f
  7228  0C52  3001               	movlw	1
  7229  0C53                     u204_25:	
  7230  0C53  1003               	clrc
  7231  0C54  0DF0               	rlf	___ftpack@arg,f
  7232  0C55  0DF1               	rlf	___ftpack@arg+1,f
  7233  0C56  0DF2               	rlf	___ftpack@arg+2,f
  7234  0C57  3EFF               	addlw	-1
  7235  0C58  1D03               	skipz
  7236  0C59  2C53               	goto	u204_25
  7237  0C5A                     i1l1930:	
  7238  0C5A  1FF1               	btfss	___ftpack@arg+1,7
  7239  0C5B  2C50               	goto	i1l1928
  7240  0C5C  1873               	btfsc	___ftpack@exp,0
  7241  0C5D  2C64               	goto	i1l525
  7242  0C5E  30FF               	movlw	255
  7243  0C5F  05F0               	andwf	___ftpack@arg,f
  7244  0C60  307F               	movlw	127
  7245  0C61  05F1               	andwf	___ftpack@arg+1,f
  7246  0C62  30FF               	movlw	255
  7247  0C63  05F2               	andwf	___ftpack@arg+2,f
  7248  0C64                     i1l525:	
  7249  0C64  1003               	clrc
  7250  0C65  0CF3               	rrf	___ftpack@exp,f
  7251  0C66  0873               	movf	___ftpack@exp,w
  7252  0C67  00F5               	movwf	??___ftpack
  7253  0C68  01F6               	clrf	??___ftpack+1
  7254  0C69  01F7               	clrf	??___ftpack+2
  7255  0C6A  3010               	movlw	16
  7256  0C6B                     u207_25:	
  7257  0C6B  1003               	clrc
  7258  0C6C  0DF5               	rlf	??___ftpack,f
  7259  0C6D  0DF6               	rlf	??___ftpack+1,f
  7260  0C6E  0DF7               	rlf	??___ftpack+2,f
  7261  0C6F  3EFF               	addlw	-1
  7262  0C70  1D03               	skipz
  7263  0C71  2C6B               	goto	u207_25
  7264  0C72  0875               	movf	??___ftpack,w
  7265  0C73  04F0               	iorwf	___ftpack@arg,f
  7266  0C74  0876               	movf	??___ftpack+1,w
  7267  0C75  04F1               	iorwf	___ftpack@arg+1,f
  7268  0C76  0877               	movf	??___ftpack+2,w
  7269  0C77  04F2               	iorwf	___ftpack@arg+2,f
  7270  0C78  0874               	movf	___ftpack@sign,w
  7271  0C79  1903               	btfsc	3,2
  7272  0C7A  0008               	return
  7273  0C7B  17F2               	bsf	___ftpack@arg+2,7
  7274  0C7C  0008               	return
  7275  0C7D                     __end_of___ftpack:	
  7276                           
  7277                           	psect	text36
  7278  0995                     __ptext36:	
  7279 ;; *************** function ___awmod *****************
  7280 ;; Defined at:
  7281 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awmod.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  divisor         2    9[COMMON] int 
  7284 ;;  dividend        2   11[COMMON] int 
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;  sign            1    1[BANK0 ] unsigned char 
  7287 ;;  counter         1    0[BANK0 ] unsigned char 
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  2    9[COMMON] int 
  7290 ;; Registers used:
  7291 ;;		wreg, status,2, status,0
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7297 ;;      Params:         4       0       0       0       0
  7298 ;;      Locals:         0       2       0       0       0
  7299 ;;      Temps:          1       0       0       0       0
  7300 ;;      Totals:         5       2       0       0       0
  7301 ;;Total ram usage:        7 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; This function calls:
  7304 ;;		Nothing
  7305 ;; This function is called by:
  7306 ;;		_ISR
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           
  7311                           ;psect for function ___awmod
  7312  0995                     ___awmod:	
  7313                           
  7314                           ;incstack = 0
  7315                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7316  0995  1283               	bcf	3,5	;RP0=0, select bank0
  7317  0996  1303               	bcf	3,6	;RP1=0, select bank0
  7318  0997  01A1               	clrf	___awmod@sign
  7319  0998  1FFC               	btfss	___awmod@dividend+1,7
  7320  0999  29A1               	goto	i1l2684
  7321  099A  09FB               	comf	___awmod@dividend,f
  7322  099B  09FC               	comf	___awmod@dividend+1,f
  7323  099C  0AFB               	incf	___awmod@dividend,f
  7324  099D  1903               	skipnz
  7325  099E  0AFC               	incf	___awmod@dividend+1,f
  7326  099F  01A1               	clrf	___awmod@sign
  7327  09A0  0AA1               	incf	___awmod@sign,f
  7328  09A1                     i1l2684:	
  7329  09A1  1FFA               	btfss	___awmod@divisor+1,7
  7330  09A2  29A8               	goto	i1l2688
  7331  09A3  09F9               	comf	___awmod@divisor,f
  7332  09A4  09FA               	comf	___awmod@divisor+1,f
  7333  09A5  0AF9               	incf	___awmod@divisor,f
  7334  09A6  1903               	skipnz
  7335  09A7  0AFA               	incf	___awmod@divisor+1,f
  7336  09A8                     i1l2688:	
  7337  09A8  087A               	movf	___awmod@divisor+1,w
  7338  09A9  0479               	iorwf	___awmod@divisor,w
  7339  09AA  1903               	skipnz
  7340  09AB  29D5               	goto	i1l2706
  7341  09AC  01A0               	clrf	___awmod@counter
  7342  09AD  0AA0               	incf	___awmod@counter,f
  7343  09AE                     i1l2696:	
  7344  09AE  1BFA               	btfsc	___awmod@divisor+1,7
  7345  09AF  29BC               	goto	i1l2698
  7346  09B0  3001               	movlw	1
  7347  09B1                     u346_25:	
  7348  09B1  1003               	clrc
  7349  09B2  0DF9               	rlf	___awmod@divisor,f
  7350  09B3  0DFA               	rlf	___awmod@divisor+1,f
  7351  09B4  3EFF               	addlw	-1
  7352  09B5  1D03               	skipz
  7353  09B6  29B1               	goto	u346_25
  7354  09B7  3001               	movlw	1
  7355  09B8  00FD               	movwf	??___awmod
  7356  09B9  087D               	movf	??___awmod,w
  7357  09BA  07A0               	addwf	___awmod@counter,f
  7358  09BB  29AE               	goto	i1l2696
  7359  09BC                     i1l2698:	
  7360  09BC  087A               	movf	___awmod@divisor+1,w
  7361  09BD  027C               	subwf	___awmod@dividend+1,w
  7362  09BE  1D03               	skipz
  7363  09BF  29C2               	goto	u348_25
  7364  09C0  0879               	movf	___awmod@divisor,w
  7365  09C1  027B               	subwf	___awmod@dividend,w
  7366  09C2                     u348_25:	
  7367  09C2  1C03               	skipc
  7368  09C3  29CA               	goto	i1l2702
  7369  09C4  0879               	movf	___awmod@divisor,w
  7370  09C5  02FB               	subwf	___awmod@dividend,f
  7371  09C6  087A               	movf	___awmod@divisor+1,w
  7372  09C7  1C03               	skipc
  7373  09C8  03FC               	decf	___awmod@dividend+1,f
  7374  09C9  02FC               	subwf	___awmod@dividend+1,f
  7375  09CA                     i1l2702:	
  7376  09CA  3001               	movlw	1
  7377  09CB                     u349_25:	
  7378  09CB  1003               	clrc
  7379  09CC  0CFA               	rrf	___awmod@divisor+1,f
  7380  09CD  0CF9               	rrf	___awmod@divisor,f
  7381  09CE  3EFF               	addlw	-1
  7382  09CF  1D03               	skipz
  7383  09D0  29CB               	goto	u349_25
  7384  09D1  3001               	movlw	1
  7385  09D2  02A0               	subwf	___awmod@counter,f
  7386  09D3  1D03               	btfss	3,2
  7387  09D4  29BC               	goto	i1l2698
  7388  09D5                     i1l2706:	
  7389  09D5  0821               	movf	___awmod@sign,w
  7390  09D6  1903               	btfsc	3,2
  7391  09D7  29DD               	goto	i1l2710
  7392  09D8  09FB               	comf	___awmod@dividend,f
  7393  09D9  09FC               	comf	___awmod@dividend+1,f
  7394  09DA  0AFB               	incf	___awmod@dividend,f
  7395  09DB  1903               	skipnz
  7396  09DC  0AFC               	incf	___awmod@dividend+1,f
  7397  09DD                     i1l2710:	
  7398  09DD  087C               	movf	___awmod@dividend+1,w
  7399  09DE  01FA               	clrf	?___awmod+1
  7400  09DF  07FA               	addwf	?___awmod+1,f
  7401  09E0  087B               	movf	___awmod@dividend,w
  7402  09E1  01F9               	clrf	?___awmod
  7403  09E2  07F9               	addwf	?___awmod,f
  7404  09E3  0008               	return
  7405  09E4                     __end_of___awmod:	
  7406                           
  7407                           	psect	text37
  7408  0A3D                     __ptext37:	
  7409 ;; *************** function ___awdiv *****************
  7410 ;; Defined at:
  7411 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  divisor         2    0[COMMON] int 
  7414 ;;  dividend        2    2[COMMON] int 
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;  quotient        2    7[COMMON] int 
  7417 ;;  sign            1    6[COMMON] unsigned char 
  7418 ;;  counter         1    5[COMMON] unsigned char 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  2    0[COMMON] int 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7428 ;;      Params:         4       0       0       0       0
  7429 ;;      Locals:         4       0       0       0       0
  7430 ;;      Temps:          1       0       0       0       0
  7431 ;;      Totals:         9       0       0       0       0
  7432 ;;Total ram usage:        9 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; This function calls:
  7435 ;;		Nothing
  7436 ;; This function is called by:
  7437 ;;		_ISR
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           
  7442                           ;psect for function ___awdiv
  7443  0A3D                     ___awdiv:	
  7444                           
  7445                           ;incstack = 0
  7446                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7447  0A3D  01F6               	clrf	___awdiv@sign
  7448  0A3E  1FF1               	btfss	___awdiv@divisor+1,7
  7449  0A3F  2A47               	goto	i1l2640
  7450  0A40  09F0               	comf	___awdiv@divisor,f
  7451  0A41  09F1               	comf	___awdiv@divisor+1,f
  7452  0A42  0AF0               	incf	___awdiv@divisor,f
  7453  0A43  1903               	skipnz
  7454  0A44  0AF1               	incf	___awdiv@divisor+1,f
  7455  0A45  01F6               	clrf	___awdiv@sign
  7456  0A46  0AF6               	incf	___awdiv@sign,f
  7457  0A47                     i1l2640:	
  7458  0A47  1FF3               	btfss	___awdiv@dividend+1,7
  7459  0A48  2A52               	goto	i1l2646
  7460  0A49  09F2               	comf	___awdiv@dividend,f
  7461  0A4A  09F3               	comf	___awdiv@dividend+1,f
  7462  0A4B  0AF2               	incf	___awdiv@dividend,f
  7463  0A4C  1903               	skipnz
  7464  0A4D  0AF3               	incf	___awdiv@dividend+1,f
  7465  0A4E  3001               	movlw	1
  7466  0A4F  00F4               	movwf	??___awdiv
  7467  0A50  0874               	movf	??___awdiv,w
  7468  0A51  06F6               	xorwf	___awdiv@sign,f
  7469  0A52                     i1l2646:	
  7470  0A52  01F7               	clrf	___awdiv@quotient
  7471  0A53  01F8               	clrf	___awdiv@quotient+1
  7472  0A54  0871               	movf	___awdiv@divisor+1,w
  7473  0A55  0470               	iorwf	___awdiv@divisor,w
  7474  0A56  1903               	skipnz
  7475  0A57  2A89               	goto	i1l2668
  7476  0A58  01F5               	clrf	___awdiv@counter
  7477  0A59  0AF5               	incf	___awdiv@counter,f
  7478  0A5A                     i1l2656:	
  7479  0A5A  1BF1               	btfsc	___awdiv@divisor+1,7
  7480  0A5B  2A68               	goto	i1l2658
  7481  0A5C  3001               	movlw	1
  7482  0A5D                     u336_25:	
  7483  0A5D  1003               	clrc
  7484  0A5E  0DF0               	rlf	___awdiv@divisor,f
  7485  0A5F  0DF1               	rlf	___awdiv@divisor+1,f
  7486  0A60  3EFF               	addlw	-1
  7487  0A61  1D03               	skipz
  7488  0A62  2A5D               	goto	u336_25
  7489  0A63  3001               	movlw	1
  7490  0A64  00F4               	movwf	??___awdiv
  7491  0A65  0874               	movf	??___awdiv,w
  7492  0A66  07F5               	addwf	___awdiv@counter,f
  7493  0A67  2A5A               	goto	i1l2656
  7494  0A68                     i1l2658:	
  7495  0A68  3001               	movlw	1
  7496  0A69                     u338_25:	
  7497  0A69  1003               	clrc
  7498  0A6A  0DF7               	rlf	___awdiv@quotient,f
  7499  0A6B  0DF8               	rlf	___awdiv@quotient+1,f
  7500  0A6C  3EFF               	addlw	-1
  7501  0A6D  1D03               	skipz
  7502  0A6E  2A69               	goto	u338_25
  7503  0A6F  0871               	movf	___awdiv@divisor+1,w
  7504  0A70  0273               	subwf	___awdiv@dividend+1,w
  7505  0A71  1D03               	skipz
  7506  0A72  2A75               	goto	u339_25
  7507  0A73  0870               	movf	___awdiv@divisor,w
  7508  0A74  0272               	subwf	___awdiv@dividend,w
  7509  0A75                     u339_25:	
  7510  0A75  1C03               	skipc
  7511  0A76  2A7E               	goto	i1l2664
  7512  0A77  0870               	movf	___awdiv@divisor,w
  7513  0A78  02F2               	subwf	___awdiv@dividend,f
  7514  0A79  0871               	movf	___awdiv@divisor+1,w
  7515  0A7A  1C03               	skipc
  7516  0A7B  03F3               	decf	___awdiv@dividend+1,f
  7517  0A7C  02F3               	subwf	___awdiv@dividend+1,f
  7518  0A7D  1477               	bsf	___awdiv@quotient,0
  7519  0A7E                     i1l2664:	
  7520  0A7E  3001               	movlw	1
  7521  0A7F                     u340_25:	
  7522  0A7F  1003               	clrc
  7523  0A80  0CF1               	rrf	___awdiv@divisor+1,f
  7524  0A81  0CF0               	rrf	___awdiv@divisor,f
  7525  0A82  3EFF               	addlw	-1
  7526  0A83  1D03               	skipz
  7527  0A84  2A7F               	goto	u340_25
  7528  0A85  3001               	movlw	1
  7529  0A86  02F5               	subwf	___awdiv@counter,f
  7530  0A87  1D03               	btfss	3,2
  7531  0A88  2A68               	goto	i1l2658
  7532  0A89                     i1l2668:	
  7533  0A89  0876               	movf	___awdiv@sign,w
  7534  0A8A  1903               	btfsc	3,2
  7535  0A8B  2A91               	goto	i1l2672
  7536  0A8C  09F7               	comf	___awdiv@quotient,f
  7537  0A8D  09F8               	comf	___awdiv@quotient+1,f
  7538  0A8E  0AF7               	incf	___awdiv@quotient,f
  7539  0A8F  1903               	skipnz
  7540  0A90  0AF8               	incf	___awdiv@quotient+1,f
  7541  0A91                     i1l2672:	
  7542  0A91  0878               	movf	___awdiv@quotient+1,w
  7543  0A92  01F1               	clrf	?___awdiv+1
  7544  0A93  07F1               	addwf	?___awdiv+1,f
  7545  0A94  0877               	movf	___awdiv@quotient,w
  7546  0A95  01F0               	clrf	?___awdiv
  7547  0A96  07F0               	addwf	?___awdiv,f
  7548  0A97  0008               	return
  7549  0A98                     __end_of___awdiv:	
  7550                           
  7551                           	psect	text38
  7552  16D1                     __ptext38:	
  7553 ;; *************** function _USARTReceiveChar *****************
  7554 ;; Defined at:
  7555 ;;		line 94 in file "main.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;		None
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  USARTData       1    4[COMMON] unsigned char 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  1    wreg      unsigned char 
  7562 ;; Registers used:
  7563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7569 ;;      Params:         0       0       0       0       0
  7570 ;;      Locals:         1       0       0       0       0
  7571 ;;      Temps:          1       0       0       0       0
  7572 ;;      Totals:         2       0       0       0       0
  7573 ;;Total ram usage:        2 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    2
  7576 ;; This function calls:
  7577 ;;		_USARTWriteString
  7578 ;; This function is called by:
  7579 ;;		_ISR
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           
  7584                           ;psect for function _USARTReceiveChar
  7585  16D1                     _USARTReceiveChar:	
  7586                           
  7587                           ;main.c: 95: unsigned char USARTData;
  7588                           ;main.c: 97: if (!OERR)
  7589                           
  7590                           ;incstack = 0
  7591 ;; hardware stack exceeded
  7592                           ; Regs used in _USARTReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7593  16D1  1283               	bcf	3,5	;RP0=0, select bank0
  7594  16D2  1303               	bcf	3,6	;RP1=0, select bank0
  7595  16D3  1898               	btfsc	24,1	;volatile
  7596  16D4  2EDA               	goto	i1l2534
  7597                           
  7598                           ;main.c: 98: {
  7599                           ;main.c: 99: USARTData = RCREG;
  7600  16D5  081A               	movf	26,w	;volatile
  7601  16D6  00F3               	movwf	??_USARTReceiveChar
  7602  16D7  0873               	movf	??_USARTReceiveChar,w
  7603  16D8  00F4               	movwf	USARTReceiveChar@USARTData
  7604  16D9  2EE9               	goto	i1l2542
  7605  16DA                     i1l2534:	
  7606                           ;main.c: 101: } else {
  7607                           
  7608                           ;main.c: 100: PIR1bits.RCIF = 0;
  7609                           
  7610                           
  7611                           ;main.c: 102: USARTWriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7612  16DA  305F               	movlw	low (STR_1-__stringbase)
  7613  16DB  00F1               	movwf	USARTWriteString@str
  7614  16DC  3080               	movlw	128
  7615  16DD  00F2               	movwf	USARTWriteString@str+1
  7616  16DE  160A  118A  2764   	fcall	_USARTWriteString
  7617                           
  7618                           ;main.c: 104: RCSTAbits.CREN = 0;
  7619  16E1  1283               	bcf	3,5	;RP0=0, select bank0
  7620  16E2  1303               	bcf	3,6	;RP1=0, select bank0
  7621  16E3  1218               	bcf	24,4	;volatile
  7622                           
  7623                           ;main.c: 105: USARTData = RCREG;
  7624  16E4  081A               	movf	26,w	;volatile
  7625  16E5  00F3               	movwf	??_USARTReceiveChar
  7626  16E6  0873               	movf	??_USARTReceiveChar,w
  7627  16E7  00F4               	movwf	USARTReceiveChar@USARTData
  7628                           
  7629                           ;main.c: 106: RCSTAbits.CREN = 1;
  7630  16E8  1618               	bsf	24,4	;volatile
  7631  16E9                     i1l2542:	
  7632                           
  7633                           ;main.c: 107: PIR1bits.RCIF = 0;
  7634  16E9  128C               	bcf	12,5	;volatile
  7635                           
  7636                           ;main.c: 108: }
  7637                           ;main.c: 110: return (USARTData);
  7638  16EA  0874               	movf	USARTReceiveChar@USARTData,w
  7639  16EB  0008               	return
  7640  16EC                     __end_of_USARTReceiveChar:	
  7641                           
  7642                           	psect	text39
  7643  1764                     __ptext39:	
  7644 ;; *************** function _USARTWriteString *****************
  7645 ;; Defined at:
  7646 ;;		line 83 in file "main.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  str             2    1[COMMON] PTR const unsigned char 
  7649 ;;		 -> ftoa@buf(17), STR_6(23), STR_5(44), STR_3(3), 
  7650 ;;		 -> STR_1(40), 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;		None
  7653 ;; Return value:  Size  Location     Type
  7654 ;;		None               void
  7655 ;; Registers used:
  7656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7662 ;;      Params:         2       0       0       0       0
  7663 ;;      Locals:         0       0       0       0       0
  7664 ;;      Temps:          0       0       0       0       0
  7665 ;;      Totals:         2       0       0       0       0
  7666 ;;Total ram usage:        2 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    1
  7669 ;; This function calls:
  7670 ;;		_USARTWriteChar
  7671 ;; This function is called by:
  7672 ;;		_USARTReceiveChar
  7673 ;;		_ISR
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           
  7678                           ;psect for function _USARTWriteString
  7679  1764                     _USARTWriteString:	
  7680  1764                     i1l2210:	
  7681                           ;main.c: 85: while (*str != '\0') {
  7682                           
  7683                           ;incstack = 0
  7684 ;; hardware stack exceeded
  7685                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7686                           
  7687  1764  0872               	movf	USARTWriteString@str+1,w
  7688  1765  1283               	bcf	3,5	;RP0=0, select bank0
  7689  1766  1303               	bcf	3,6	;RP1=0, select bank0
  7690  1767  00FF               	movwf	127
  7691  1768  0871               	movf	USARTWriteString@str,w
  7692  1769  0084               	movwf	4
  7693  176A  120A  118A  2615  160A  118A  	fcall	stringtab
  7694  176F  3800               	iorlw	0
  7695  1770  1903               	btfsc	3,2
  7696  1771  0008               	return
  7697                           
  7698                           ;main.c: 87: USARTWriteChar(*str);
  7699  1772  0872               	movf	USARTWriteString@str+1,w
  7700  1773  1283               	bcf	3,5	;RP0=0, select bank0
  7701  1774  1303               	bcf	3,6	;RP1=0, select bank0
  7702  1775  00FF               	movwf	127
  7703  1776  0871               	movf	USARTWriteString@str,w
  7704  1777  0084               	movwf	4
  7705  1778  120A  118A  2615  160A  118A  	fcall	stringtab
  7706  177D  160A  118A  2652  160A  118A  	fcall	_USARTWriteChar
  7707                           
  7708                           ;main.c: 88: str++;
  7709  1782  3001               	movlw	1
  7710  1783  07F1               	addwf	USARTWriteString@str,f
  7711  1784  1803               	skipnc
  7712  1785  0AF2               	incf	USARTWriteString@str+1,f
  7713  1786  2F64               	goto	i1l2210
  7714  1787                     __end_of_USARTWriteString:	
  7715                           
  7716                           	psect	text40
  7717  1652                     __ptext40:	
  7718 ;; *************** function _USARTWriteChar *****************
  7719 ;; Defined at:
  7720 ;;		line 76 in file "main.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  USARTData       1    wreg     unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  USARTData       1    0[COMMON] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7734 ;;      Params:         0       0       0       0       0
  7735 ;;      Locals:         1       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0
  7737 ;;      Totals:         1       0       0       0       0
  7738 ;;Total ram usage:        1 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; This function calls:
  7741 ;;		Nothing
  7742 ;; This function is called by:
  7743 ;;		_USARTWriteString
  7744 ;;		_ISR
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _USARTWriteChar
  7750  1652                     _USARTWriteChar:	
  7751                           
  7752                           ;incstack = 0
  7753 ;; hardware stack exceeded
  7754                           ; Regs used in _USARTWriteChar: [wreg]
  7755                           ;USARTWriteChar@USARTData stored from wreg
  7756  1652  00F0               	movwf	USARTWriteChar@USARTData
  7757  1653                     i1l90:	
  7758                           ;main.c: 77: while (!PIR1bits.TXIF);
  7759                           
  7760  1653  1283               	bcf	3,5	;RP0=0, select bank0
  7761  1654  1303               	bcf	3,6	;RP1=0, select bank0
  7762  1655  1E0C               	btfss	12,4	;volatile
  7763  1656  2E53               	goto	i1l90
  7764                           
  7765                           ;main.c: 78: TXREG = USARTData;
  7766  1657  0870               	movf	USARTWriteChar@USARTData,w
  7767  1658  0099               	movwf	25	;volatile
  7768  1659  0008               	return
  7769  165A                     __end_of_USARTWriteChar:	
  7770  007E                     btemp	set	126	;btemp
  7771  007E                     wtemp	set	126
  7772  007E                     wtemp0	set	126
  7773  0080                     wtemp1	set	128
  7774  0082                     wtemp2	set	130
  7775  0084                     wtemp3	set	132
  7776  0086                     wtemp4	set	134
  7777  0088                     wtemp5	set	136
  7778  007F                     wtemp6	set	127
  7779  007E                     ttemp	set	126
  7780  007E                     ttemp0	set	126
  7781  0081                     ttemp1	set	129
  7782  0084                     ttemp2	set	132
  7783  0087                     ttemp3	set	135
  7784  007F                     ttemp4	set	127
  7785  007E                     ltemp	set	126
  7786  007E                     ltemp0	set	126
  7787  0082                     ltemp1	set	130
  7788  0086                     ltemp2	set	134
  7789  0080                     ltemp3	set	128


Data Sizes:
    Strings     146
    Constant    50
    Data        18
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      70
    BANK1            80     36      63
    BANK3            96     30      47
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> ISR@status2(BANK1[2]), ISR@status(BANK1[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S679$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    lcd_escreve_string@y	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK3[17]), STR_7(CODE[16]), STR_4(CODE[2]), STR_2(CODE[7]), 
		 -> ISR@aux(BANK1[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> lcd_escreve_p@caracter(COMMON[6]), 

    ISR@result	PTR unsigned char  size(1) Largest target is 16
		 -> ISR@aux(BANK1[16]), 

    ISR@per	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    ISR@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 44
		 -> ftoa@buf(BANK3[17]), STR_6(CODE[23]), STR_5(CODE[44]), STR_3(CODE[3]), 
		 -> STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awmod
    _ISR->___awtoft
    _ISR->i1_lcd_escreve_string
    i1_lcd_escreve_string->i1_lcd_putc
    i1_lcd_putc->i1_lcd_gotoxy
    i1_lcd_gotoxy->i1_lcd_envia_byte
    i1_lcd_envia_byte->i1_lcd_envia_nibble
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    ___awmod->___awdiv
    _USARTReceiveChar->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_inicialize
    _inicialize->_USARTInit
    _lcd_escreve_string->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_envia_byte
    _init_lcd_4bit->_lcd_envia_byte
    _USARTInit->___aldiv
    _LCDClear->_lcd_envia_byte
    _lcd_envia_byte->_lcd_envia_nibble
    _ativar->_ADCRead

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5629
                             _ativar
                         _inicialize
 ---------------------------------------------------------------------------------
 (1) _inicialize                                           3     3      0    5444
                                             27 BANK3      3     3      0
                            _ADCInit
                           _LCDClear
                          _USARTInit
                      _init_lcd_4bit
                 _lcd_escreve_string
 ---------------------------------------------------------------------------------
 (2) _lcd_escreve_string                                   2     0      2    2385
                                             12 BANK3      2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             3     3      0    2075
                                              9 BANK3      3     3      0
                     _lcd_envia_byte
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           4     3      1    1180
                                              5 BANK3      4     3      1
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _init_lcd_4bit                                        3     3      0    1124
                                              5 BANK3      3     3      0
                     _lcd_envia_byte
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                           12     6      6    1102
                                             15 BANK3     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                              0 BANK3     15     7      8
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             2     2      0     833
                                              5 BANK3      2     2      0
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_envia_byte                                       3     2      1     833
                                              2 BANK3      3     2      1
                   _lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_envia_nibble                                     2     2      0     124
                                              0 BANK3      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ativar                                               3     3      0     185
                                              3 BANK3      3     3      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2     185
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 50    50      0   23650
                                             50 BANK0      8     8      0
                                              0 BANK1     36    36      0
                   _USARTReceiveChar
                     _USARTWriteChar
                   _USARTWriteString
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                               _ftoa
               i1_lcd_escreve_string
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_escreve_string                                 2     0      2     908
                                             12 COMMON     2     0      2
                         i1_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i1_lcd_putc                                           3     3      0     759
                                              9 COMMON     3     3      0
                   i1_lcd_envia_byte
                       i1_lcd_gotoxy
 ---------------------------------------------------------------------------------
 (8) i1_lcd_gotoxy                                         4     3      1     457
                                              5 COMMON     4     3      1
                   i1_lcd_envia_byte
 ---------------------------------------------------------------------------------
 (9) i1_lcd_envia_byte                                     3     2      1     258
                                              2 COMMON     3     2      1
                 i1_lcd_envia_nibble
 ---------------------------------------------------------------------------------
 (10) i1_lcd_envia_nibble                                  2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ftoa                                                14    10      4   11670
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (9) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (10) _isdigit                                             2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___llmod                                            10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     444
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    3228
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            13     7      6    3055
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2925
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             16    10      6    2495
                                             16 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             6     3      3    2242
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              7     3      4     680
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     684
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _USARTReceiveChar                                     2     2      0     411
                                              3 COMMON     2     2      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (8) _USARTWriteString                                     2     0      2     387
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (9) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ativar
     _ADCRead
   _inicialize
     _ADCInit
     _LCDClear
       _lcd_envia_byte
         _lcd_envia_nibble
     _USARTInit
       ___aldiv
     _init_lcd_4bit
       _lcd_envia_byte
         _lcd_envia_nibble
       _lcd_envia_nibble
     _lcd_escreve_string
       _lcd_putc
         _lcd_envia_byte
           _lcd_envia_nibble
         _lcd_gotoxy
           _lcd_envia_byte
             _lcd_envia_nibble

 _ISR (ROOT)
   _USARTReceiveChar
     _USARTWriteString
       _USARTWriteChar
   _USARTWriteChar
   _USARTWriteString
     _USARTWriteChar
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   i1_lcd_escreve_string
     i1_lcd_putc
       i1_lcd_envia_byte
         i1_lcd_envia_nibble
       i1_lcd_gotoxy
         i1_lcd_envia_byte
           i1_lcd_envia_nibble
   i1_lcd_gotoxy
     i1_lcd_envia_byte
       i1_lcd_envia_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1E      2F       9       49.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     24      3F       7       78.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      46       5       87.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C2      12        0.0%
ABS                  0      0      C2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Nov 06 21:47:19 2014

                            pc 0002                    __CFG_CP$OFF 0000                   ___awdiv@sign 0076  
                           fsr 0004            ___wmul@multiplicand 0072                   ___ftadd@exp1 0026  
                 ___ftadd@exp2 0025                   ___ftadd@sign 0024                            l110 1740  
                          l172 086D                            l173 0870                            l413 0E11  
            i1lcd_envia_byte@n 0072                   __CFG_CPD$OFF 0000                            _ISR 004B  
                          fsr0 0004                __end_of_ADCInit 16B7                __end_of_ADCRead 1743  
                          indf 0000                   ___awmod@sign 0021                   __CFG_FOSC$HS 0000  
                   i1_lcd_putc 08C5                    lcd_gotoxy@x 0197                    lcd_gotoxy@y 0195  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 003A  
                         ISR@i 00BA                   ___ftdiv@sign 003F                           l3000 0918  
                         l3002 0923                           l3020 0E22                           l3004 092E  
                         l3030 0E42                           l3110 0826                           l3008 0939  
                         l3042 0E77                           l3130 0BF0                           l3122 0BD5  
                         l3028 0E32                           l3206 0AB6                           l3046 0E85  
                         l3038 0E6A                           l3208 0AB8                           l3058 0C97  
                         l3218 166F                           l2990 1715                           l2988 1714  
                         l2996 0904                           STR_1 0683                           STR_2 06DD  
                         STR_3 06E4                           STR_4 06E7                           STR_5 0657  
                         STR_6 06AB                           STR_7 06C2                           STR_8 06D2  
                         u4035 0C8E                           u4045 0CA2                           u4407 0BC9  
                         u4417 0BE1                           u4507 173A                           u4427 07CC  
                         u4437 07E1                           u4357 0D24                           u4447 07F6  
                         u4367 0D37                           u3905 0879                           u4457 0861  
                         u4377 0D47                           u4467 0A37                           u4387 0D66  
                         u4477 0AA4                           u4397 0912                           u4487 0AD2  
                         u4497 0AEC                           i1l90 1653                           u3955 0E36  
                         u3975 0E44                           u3985 0E59                           _OERR 00C1  
                         u3995 0E6B                   __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 165A  
                         _main 166A                           _ftoa 0F46                   ___ftpack@arg 0070  
                 ___ftpack@exp 0073                           btemp 007E                  __CFG_BOREN$ON 0000  
                         ltemp 007E                           start 0012                           ttemp 007E  
                         wtemp 007E               __end_of_DESLIGAR 0652                   ___ftmul@cntr 002E  
                 ___ftmul@sign 002F                          ??_ISR 0052               __end_of_LCDClear 07FC  
                 ___fttol@exp1 003D                   ___fttol@lval 0039     __end_of_lcd_escreve_string 0857  
              __end_of___aldiv 0E8E                          ?_main 0070                          ?_ftoa 0044  
        __size_ofi1_lcd_gotoxy 001A                __end_of___awdiv 0A98                __end_of___ftadd 0615  
                __CFG_WDTE$OFF 0000                __end_of___awmod 09E4                __end_of___ftdiv 0F46  
              __end_of___ftneg 1662                __end_of___lldiv 0BAF                __end_of___ftmul 07BC  
              ___awdiv@divisor 0070                __end_of___llmod 0995                __end_of___ftsub 1708  
              __end_of___fttol 0DFF                          _LIGAR 0654                          i1l125 02C5  
                        i1l252 039F                          i1l172 17E5                          i1l173 17E8  
                        i1l255 03BD                          i1l525 0C64                          i1l358 1791  
                        i1l519 0C4B                          i1l548 05B6                ___awdiv@counter 0075  
                        _RCREG 001A                          _SPBRG 0099            i1lcd_envia_nibble@n 0071  
                        _TRISA 0085                          _TXREG 0019                  __CFG_PWRTE$ON 0000  
                 ___lltoft@exp 007D           i1_lcd_escreve_string 0803                  ___awtoft@sign 007D  
              __end_of_dpowers 064D                __end_of_isdigit 1683                  ___ftpack@sign 0074  
                _countInferior 005A                          ftoa@f 0044                          ftoa@l 004D  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080             __size_of_USARTInit 0070  
              ?_USARTWriteChar 0070                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __end_of_sprintf 050E  
             i1_lcd_envia_byte 17D5                __initialization 0015                   i1_lcd_gotoxy 16B7  
                 __end_of_main 1675                   __end_of_ftoa 1000                  _countSuperior 005C  
                  i1lcd_putc@c 007B                      ??_ADCInit 0190                      ??_ADCRead 0192  
    __size_of_lcd_envia_nibble 0059                         ??_main 01AE                         ??_ftoa 0048  
                ___fttol@sign1 0038                         ISR@buf 00B0                         ISR@aux 00A0  
                       ISR@per 00C3                         ISR@pre 00B5        USARTWriteChar@USARTData 0070  
        ?i1_lcd_escreve_string 007C                    ?i1_lcd_putc 0070                      ADCRead@ch 0190  
             ___llmod@dividend 0024                         _ADRESH 001E                         _ADRESL 009E  
             ___awdiv@dividend 0072               __end_of___awtoft 1764               __end_of___ftpack 0C7D  
             __end_of___lltoft 17D5                         i1l2100 05FD                         i1l2110 0B61  
                       i1l2040 0537                         i1l2120 0B99                         i1l2112 0B71  
                       i1l2210 1764                         i1l2050 054D                         i1l2044 053E  
                       i1l2124 0BA6                         i1l2140 097F                         i1l2070 0588  
                       i1l2062 0567                         i1l2134 0951                         i1l2310 03A6  
                       i1l2302 035E                         i1l2400 0701                         i1l2080 05A6  
                       i1l2072 058D                         i1l2136 0961                         i1l2144 098C  
                       i1l2304 039A                         i1l2152 16C1                         i1l2090 05DA  
                       i1l2082 05B2                         i1l2074 0591                         i1l2330 03F7  
                       i1l2306 03A1                         i1l2154 16C2                         i1l2068 057C  
                       i1l2316 03CF                         u200_25 0C29                         i1l2430 077E  
                       i1l2422 0766                         i1l2406 0717                         i1l2086 05C8  
                       i1l2350 0486                         i1l2342 044B                         i1l2326 03F1  
                       i1l2360 04A0                         i1l2352 048A                         i1l2520 08E2  
                       i1l2434 078E                         i1l2418 0756                         i1l2506 17AE  
                       i1l2346 0465                         i1l2338 0433                         i1l2370 0509  
                       i1l2522 08EB                         i1l2514 08C7                         i1l2508 17C0  
                       i1l2284 030E                         i1l2292 034C                         i1l2542 16E9  
                       i1l2534 16DA                         i1l2710 09DD                         i1l2702 09CA  
                       i1l2382 0B42                         i1l2366 04FA                         i1l2278 02F9  
                       i1l2518 08D9                         i1l2526 08F4                         i1l2640 0A47  
                       i1l1920 0C30                         i1l2464 0D8B                         i1l2368 02D9  
                       i1l2706 09D5                         i1l1930 0C5A                         i1l1922 0C35  
                       i1l1914 0C1D                         i1l2722 174D                         i1l2378 0B1B  
                       i1l2490 0DDA                         i1l2482 0DBD                         i1l2732 0EA6  
                       i1l2492 0DE5                         i1l2484 0DCD                         u202_25 0C44  
                       u210_25 17EF                         i1l2646 0A52                         i1l1918 0C24  
                       i1l2494 0DE8                         i1l2558 0F7F                         i1l2672 0A91  
                       i1l2664 0A7E                         i1l2656 0A5A                         i1l1928 0C50  
                       i1l2760 0F20                         i1l2752 0F01                         i1l2658 0A68  
                       i1l2738 0EBC                         i1l2498 0DF6                         i1l2826 0253  
                       i1l2668 0A89                         i1l2684 09A1                         i1l2836 0264  
                       i1l1982 1789                         i1l2774 0803                         i1l2838 0284  
                       i1l2846 02A7                         i1l2696 09AE                         i1l2688 09A8  
                       i1l1976 1681                         i1l2698 09BC                         u204_25 0C53  
                       u207_25 0C6B                         u303_25 0723                         u215_25 1792  
                       u312_25 078F                         u304_25 0735                         u240_25 057D  
                       u320_25 0DBE                         u216_25 1799                         u313_25 0797  
                       u307_25 0767                         u243_25 0592                         u323_25 0DDC  
                       u340_25 0A7F                         u308_25 076F                         u260_25 0955  
                       u237_25 0568                         u317_25 0D92                         u253_25 0B65  
                       u246_25 05A7                         u326_25 17B3                         u262_25 096F  
                       u255_25 0B73                         u263_25 0980                         u336_25 0A5D  
                       u256_25 0B88                         u257_25 0B9A                         u338_25 0A69  
                       u346_25 09B1                         u290_25 0476                         u363_20 0061  
                       u339_25 0A75                         u355_25 0ECE                         u451_27 029D  
                       u348_25 09C2                         u356_25 0EE0                         u364_25 024D  
                       u452_27 08D3                         u349_25 09CB                         u357_25 0F02  
                       u293_25 04AB                         u285_25 03FA                         u365_25 025E  
                       u453_27 17DB                         u358_25 0F13                         u294_25 0506  
                       u286_25 0429                         u454_27 08BF                         u359_25 0F21  
                       u288_25 0442                         u297_21 0B0E                         u297_22 0B0F  
                       u297_23 0B14                         u297_24 0B15                         u289_25 045C  
                       u299_21 0B35                         u299_22 0B36                         u299_23 0B3B  
                       u299_24 0B3C                  USARTInit@Mode 01A3         __size_of_init_lcd_4bit 0066  
             __end_of_lcd_putc 0947                         ___ftge 0AF4                      ??___aldiv 0198  
                       ___wmul 1787                      ??___awdiv 0074                      ??___ftadd 0020  
                    ??___awmod 007D                      ??___ftdiv 0036                      ??___ftneg 0073  
                    ??___lldiv 0078                      ??___ftmul 0026                      ??___llmod 0028  
                    ??___ftsub 007E                      ??___fttol 0034                         _ativar 0A98  
     __end_of_USARTWriteString 1787               ___awdiv@quotient 0077                ___awmod@divisor 0079  
             ??_lcd_envia_byte 0193                ___awmod@counter 0020              __end_of_USARTInit 0CED  
                       ftoa@cp 0051          ___ftmul@f3_as_product 002B                      ??_isdigit 0070  
                       saved_w 007E          i1lcd_escreve_string@y 007C                      ??_sprintf 0033  
   __end_ofi1_lcd_envia_nibble 08C5              ?_USARTReceiveChar 0070                      ?_LCDClear 0070  
      __end_of__initialization 0047             ??_USARTReceiveChar 0073                     ___ftadd@f1 0078  
                   ___ftadd@f2 007B                     ___ftge@ff1 0070                     ___ftge@ff2 0073  
                   ___ftdiv@f1 0033                     ___ftdiv@f2 0030                     ___ftdiv@f3 003B  
                __end_of_LIGAR 0655                     ___ftneg@f1 0070                     ___awtoft@c 0078  
                   ___ftmul@f1 0020                     ___ftmul@f2 0023                     ___ftsub@f1 002A  
                   ___ftsub@f2 0027                     ___fttol@f1 0030                 __pcstackCOMMON 0070  
                 __pidataBANK0 07FC                   __pidataBANK1 1683            __size_ofi1_lcd_putc 003B  
                   ___lltoft@c 0078                  _init_lcd_4bit 0BAF         ??i1_lcd_escreve_string 007E  
            lcd_gotoxy@address 0198                   sprintf@width 003F                     __pbssBANK0 005A  
                   __pbssBANK1 00D4                     __pbssBANK3 01AE                     ??_LCDClear 0195  
                    ISR@input2 00C0                      ISR@preint 00B8                      ISR@result 00BC  
                    ISR@status 00B1      USARTReceiveChar@USARTData 0074                     __pmaintext 166A  
                      ?___ftge 0070                        ?___wmul 0070                     __pintentry 0004  
                   _flag_Start 00DD                        ?_ativar 0070                        _ADCInit 16A4  
                      _ADCRead 1724                      ?___awtoft 0078                      ?___ftpack 0070  
             _lcd_envia_nibble 09E4                      ?___lltoft 0078                 ?_init_lcd_4bit 0070  
                   _lcd_gotoxy 1708       __end_ofi1_lcd_envia_byte 1800               ??_USARTWriteChar 0070  
           _lcd_escreve_string 0826                      ?_lcd_putc 0070                     __stringtab 0615  
          ?_lcd_escreve_string 019C                        _Display 00D4                      _ADCResult 00DB  
                   _inicialize 0CED                        ___aldiv 0DFF                __size_of___ftge 005D  
                      ___awdiv 0A3D                        ___ftadd 050E                        ___awmod 0995  
                      ___ftdiv 0E8E                        ___ftneg 165A                        ___lldiv 0B51  
              __size_of___wmul 0023                        ___ftmul 06E9                        ___llmod 0947  
                      ___ftsub 16EC                        ___fttol 0D71                __size_of_ativar 005C  
                   ??___awtoft 007B                     ??___ftpack 0075                        _flag_an 0064  
                   ??___lltoft 007C                        __ptext1 0CED                        __ptext2 0826  
                      __ptext3 0900                        __ptext4 1708                        __ptext5 0BAF  
                      __ptext6 0C7D                        __ptext7 0DFF                        __ptext8 07BC  
                      __ptext9 0857           ??_lcd_escreve_string 019E                   __size_of_ISR 0287  
                      _dpowers 0625                        _isdigit 1675               ___awmod@dividend 007B  
             ___aldiv@dividend 0194                lcd_envia_byte@n 0192                   ??i1_lcd_putc 0079  
                   _recipiente 0062                        _sprintf 02D2                        clrloop0 1663  
                   ??_lcd_putc 0199           end_of_initialization 0047                        ftoa@buf 01AE  
                      ftoa@rem 0049        i1lcd_envia_byte@address 0074                ___lldiv@divisor 0070  
              ___lldiv@counter 007D                      _RCSTAbits 0018               ___aldiv@quotient 019B  
           __end_ofi1_lcd_putc 0900                ??_init_lcd_4bit 0195              ?_USARTWriteString 0071  
                    _PORTAbits 0005                      _PORTBbits 0006                      _PORTCbits 0007  
                    _PORTDbits 0008             ??_USARTWriteString 0073                      _USARTInit 0C7D  
                    _TRISBbits 0086                      _TRISCbits 0087                      _TRISDbits 0088  
                  ?_lcd_gotoxy 0195                _LCD_INIT_STRING 064D                    ___ftdiv@exp 003E  
                    _TXSTAbits 0098              __size_of_LCDClear 0040                    ?_inicialize 0070  
                  ___ftmul@exp 002A             i1_lcd_envia_nibble 088C      __size_of_USARTReceiveChar 001B  
               __end_of___ftge 0B51                    USARTInit@BR 01A9                 __end_of___wmul 17AA  
          ?i1_lcd_envia_nibble 0070                 __end_of_ativar 0AF4                  _nivelInferior 005E  
          start_initialization 0015                     ?_USARTInit 019F                    __end_of_ISR 02D2  
                   ftoa@status 0047                  i1lcd_gotoxy@x 0077                  i1lcd_gotoxy@y 0075  
         ??i1_lcd_envia_nibble 0070       __end_of_lcd_envia_nibble 0A3D          lcd_envia_byte@address 0194  
              ___llmod@divisor 0020                ___llmod@counter 0029                  _nivelSuperior 0060  
                     ??___ftge 0076            __size_of_lcd_gotoxy 001C                       ??___wmul 0074  
                   init_fetch0 1693                       ??_ativar 0193                    __pdataBANK0 0064  
                  __pdataBANK1 00C4                       ?_ADCInit 0070                       ?_ADCRead 0190  
          __end_of_LIGAR_BOMBA 0656            __end_of_LIGAR_MOTOR 0657        __end_of_LCD_INIT_STRING 0651  
            __size_of___awtoft 0021              __size_of___ftpack 0068              __size_of___lltoft 002B  
                    ___latbits 0002                  __pcstackBANK0 0020                  __pcstackBANK1 00A0  
                __pcstackBANK3 0190            __end_of__stringdata 06E9            __size_of_inicialize 0084  
__size_ofi1_lcd_escreve_string 0023              ?i1_lcd_envia_byte 0072                       ISR@F1357 00C4  
      __size_of_lcd_envia_byte 0035             ??i1_lcd_envia_byte 0073                    sprintf@_val 003A  
                  sprintf@flag 0038              __size_of_lcd_putc 0047                    sprintf@prec 0041  
                   ISR@status2 00B3                       ISR@input 00BD                  ?i1_lcd_gotoxy 0075  
          i1lcd_gotoxy@address 0078                       ?___aldiv 0190                       ?___awdiv 0070  
                     ?___ftadd 0078                       ?___awmod 0079                       ?___ftdiv 0030  
                     ?___ftneg 0070                       ?___lldiv 0070                       ?___ftmul 0020  
                     ?___llmod 0020                       ?___ftsub 0027                       ?___fttol 0030  
                    __pstrings 0615                       ?_isdigit 0070                    ??_USARTInit 01A5  
                     _DESLIGAR 0651                 init_lcd_4bit@i 0197                       ?_sprintf 002A  
                     _LCDClear 07BC                ___aldiv@divisor 0190              interrupt_function 0004  
              ___aldiv@counter 0199                 ___wmul@product 0074                      clear_ram0 1662  
                     _PIE1bits 008C              lcd_envia_nibble@n 0191                 ??i1_lcd_gotoxy 0076  
                     _PIR1bits 000C                    _LIGAR_BOMBA 0655                    _LIGAR_MOTOR 0656  
             _USARTReceiveChar 16D1               __size_of_ADCInit 0013               __size_of_ADCRead 001F  
                   _ADCON0bits 001F                    __stringbase 0624                     _ADCON1bits 009F  
                  __stringdata 0657              ___wmul@multiplier 0070    __size_of_lcd_escreve_string 0031  
                    lcd_putc@c 019B                   ??_lcd_gotoxy 0196            lcd_escreve_string@y 019C  
    __size_of_USARTWriteString 0023        __size_of_USARTWriteChar 0008                   ??_inicialize 01AB  
           __end_of_lcd_gotoxy 1724               __size_of___aldiv 008F               __size_of___awdiv 005B  
             __size_of___ftadd 0107               __size_of___awmod 004F               __size_of___ftdiv 00B8  
             __size_of___ftneg 0008               __size_of___lldiv 005E               __size_of___ftmul 00D3  
             __size_of___llmod 004E               __size_of___ftsub 001C               __size_of___fttol 008E  
                     ___awtoft 1743                       ___ftpack 0C15             __end_of__stringtab 0625  
                     ___lltoft 17AA                    _isdigit$887 0070          __end_of_init_lcd_4bit 0C15  
             __size_of_isdigit 000E                       __ptext10 09E4                       __ptext11 16A4  
                     __ptext20 0F46                       __ptext12 0A98                       __ptext21 02D2  
                     __ptext13 1724                       __ptext30 165A                       __ptext22 1675  
                     __ptext14 004B                       __ptext31 06E9                       __ptext23 1787  
                     __ptext15 0803                       __ptext40 1652                       __ptext32 0AF4  
                     __ptext24 0947                       __ptext16 08C5                       __ptext33 0E8E  
                     __ptext25 0B51                       __ptext17 16B7                       __ptext34 1743  
                     __ptext26 17AA                       __ptext18 17D5                       __ptext35 0C15  
                     __ptext27 0D71                       __ptext19 088C                       __ptext36 0995  
                     __ptext28 16EC                       __ptext37 0A3D                       __ptext29 050E  
                     __ptext38 16D1                       __ptext39 1764                 _lcd_envia_byte 0857  
           __end_of_inicialize 0D71                       _lcd_putc 0900               __size_of_sprintf 023C  
                __size_of_main 000B                  __size_of_ftoa 00BA              ?_lcd_envia_nibble 0070  
           ??_lcd_envia_nibble 0190                     _INTCONbits 000B         __end_of_lcd_envia_byte 088C  
         __end_ofi1_lcd_gotoxy 16D1                       init_ram0 1697                       isdigit@c 0071  
                     intlevel1 0000                      sprintf@ap 0039                      sprintf@sp 003E  
  __size_ofi1_lcd_envia_nibble 0039               ___lldiv@dividend 0074                      stringcode 061F  
 __end_ofi1_lcd_escreve_string 0826      __size_ofi1_lcd_envia_byte 002B              USARTInit@BaudRate 019F  
               _DESLIGAR_BOMBA 0652                 _DESLIGAR_MOTOR 0653            USARTWriteString@str 0071  
                     sprintf@c 0043                       sprintf@f 002A               ___lldiv@quotient 0079  
              ?_lcd_envia_byte 0192                       stringdir 061F                       stringtab 0615  
                 ___aldiv@sign 019A       __end_of_USARTReceiveChar 16EC               _USARTWriteString 1764  
               _USARTWriteChar 1652         __end_of_DESLIGAR_BOMBA 0653         __end_of_DESLIGAR_MOTOR 0654  
